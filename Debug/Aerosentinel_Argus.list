
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104d4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  080107a8  080107a8  000117a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010d50  08010d50  00011d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010d58  08010d58  00011d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010d5c  08010d5c  00011d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08010d60  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000093c  240001d8  08010f38  000121d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000b14  08010f38  00012b14  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dd85  00000000  00000000  00012206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d72  00000000  00000000  0002ff8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001780  00000000  00000000  00033d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001225  00000000  00000000  00035480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000065ac  00000000  00000000  000366a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000243af  00000000  00000000  0003cc51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166558  00000000  00000000  00061000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c7558  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007688  00000000  00000000  001c759c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001cec24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801078c 	.word	0x0801078c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0801078c 	.word	0x0801078c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ab0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ab4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ab8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac0:	e000      	b.n	8000ac4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ac2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ace:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	int i=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffc7 	bl	8000a98 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x16>
	}
	return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b26:	f000 fc2b 	bl	8001380 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2a:	f001 fa45 	bl	8001fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2e:	f000 f81d 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b32:	f000 fb13 	bl	800115c <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000b36:	f000 f947 	bl	8000dc8 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8000b3a:	f000 f885 	bl	8000c48 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b3e:	f000 f8c3 	bl	8000cc8 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000b42:	f000 f901 	bl	8000d48 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000b46:	f000 f95d 	bl	8000e04 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b4a:	f000 f9b1 	bl	8000eb0 <MX_SPI2_Init>
  MX_UART8_Init();
 8000b4e:	f000 fa5b 	bl	8001008 <MX_UART8_Init>
  MX_USART1_Init();
 8000b52:	f000 faa5 	bl	80010a0 <MX_USART1_Init>
  MX_SPI4_Init();
 8000b56:	f000 fa01 	bl	8000f5c <MX_SPI4_Init>
  MX_FATFS_Init();
 8000b5a:	f00b f92d 	bl	800bdb8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
  SensorManager_Init();
 8000b5e:	f001 f97d 	bl	8001e5c <SensorManager_Init>
  TestTelemetry();
 8000b62:	f001 f9e3 	bl	8001f2c <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b66:	bf00      	nop
 8000b68:	e7fd      	b.n	8000b66 <main+0x44>
	...

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b09c      	sub	sp, #112	@ 0x70
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b76:	224c      	movs	r2, #76	@ 0x4c
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f00c fb82 	bl	800d284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2220      	movs	r2, #32
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f00c fb7c 	bl	800d284 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f002 fcc3 	bl	8003518 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b2b      	ldr	r3, [pc, #172]	@ (8000c44 <SystemClock_Config+0xd8>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c44 <SystemClock_Config+0xd8>)
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b28      	ldr	r3, [pc, #160]	@ (8000c44 <SystemClock_Config+0xd8>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bae:	bf00      	nop
 8000bb0:	4b24      	ldr	r3, [pc, #144]	@ (8000c44 <SystemClock_Config+0xd8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bbc:	d1f8      	bne.n	8000bb0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000bd4:	231f      	movs	r3, #31
 8000bd6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000be4:	230c      	movs	r3, #12
 8000be6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000bec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 fcc8 	bl	800358c <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c02:	f000 fbe9 	bl	80013d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	233f      	movs	r3, #63	@ 0x3f
 8000c08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c12:	2308      	movs	r3, #8
 8000c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c16:	2340      	movs	r3, #64	@ 0x40
 8000c18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c1a:	2340      	movs	r3, #64	@ 0x40
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c24:	2340      	movs	r3, #64	@ 0x40
 8000c26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 f887 	bl	8003d40 <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c38:	f000 fbce 	bl	80013d8 <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3770      	adds	r7, #112	@ 0x70
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	58024800 	.word	0x58024800

08000c48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc0 <MX_I2C1_Init+0x78>)
 8000c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c54:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc4 <MX_I2C1_Init+0x7c>)
 8000c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c58:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c82:	480e      	ldr	r0, [pc, #56]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c84:	f002 fb14 	bl	80032b0 <HAL_I2C_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c8e:	f000 fba3 	bl	80013d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c92:	2100      	movs	r1, #0
 8000c94:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c96:	f002 fba7 	bl	80033e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ca0:	f000 fb9a 	bl	80013d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000ca8:	f002 fbe9 	bl	800347e <HAL_I2CEx_ConfigDigitalFilter>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cb2:	f000 fb91 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	240001f4 	.word	0x240001f4
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	20a0a3f6 	.word	0x20a0a3f6

08000cc8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000cce:	4a1c      	ldr	r2, [pc, #112]	@ (8000d40 <MX_I2C2_Init+0x78>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d44 <MX_I2C2_Init+0x7c>)
 8000cd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d02:	480e      	ldr	r0, [pc, #56]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000d04:	f002 fad4 	bl	80032b0 <HAL_I2C_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d0e:	f000 fb63 	bl	80013d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000d16:	f002 fb67 	bl	80033e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d20:	f000 fb5a 	bl	80013d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d24:	2100      	movs	r1, #0
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_I2C2_Init+0x74>)
 8000d28:	f002 fba9 	bl	800347e <HAL_I2CEx_ConfigDigitalFilter>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f000 fb51 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000248 	.word	0x24000248
 8000d40:	40005800 	.word	0x40005800
 8000d44:	20a0a3f6 	.word	0x20a0a3f6

08000d48 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <MX_I2C4_Init+0x78>)
 8000d50:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d54:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc4 <MX_I2C4_Init+0x7c>)
 8000d56:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d58:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d82:	480e      	ldr	r0, [pc, #56]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d84:	f002 fa94 	bl	80032b0 <HAL_I2C_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d8e:	f000 fb23 	bl	80013d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000d92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d96:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000d98:	f002 fb26 	bl	80033e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8000da2:	f000 fb19 	bl	80013d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <MX_I2C4_Init+0x74>)
 8000daa:	f002 fb68 	bl	800347e <HAL_I2CEx_ConfigDigitalFilter>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000db4:	f000 fb10 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2400029c 	.word	0x2400029c
 8000dc0:	58001c00 	.word	0x58001c00
 8000dc4:	60405858 	.word	0x60405858

08000dc8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_SDMMC1_SD_Init+0x34>)
 8000dce:	4a0c      	ldr	r2, [pc, #48]	@ (8000e00 <MX_SDMMC1_SD_Init+0x38>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <MX_SDMMC1_SD_Init+0x34>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_SDMMC1_SD_Init+0x34>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <MX_SDMMC1_SD_Init+0x34>)
 8000de0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000de4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <MX_SDMMC1_SD_Init+0x34>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <MX_SDMMC1_SD_Init+0x34>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	240002f0 	.word	0x240002f0
 8000e00:	52007000 	.word	0x52007000

08000e04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e08:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e0a:	4a28      	ldr	r2, [pc, #160]	@ (8000eac <MX_SPI1_Init+0xa8>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e10:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e16:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e1e:	2207      	movs	r2, #7
 8000e20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e30:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e38:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000e3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e44:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e5c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e64:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <MX_SPI1_Init+0xa4>)
 8000e96:	f007 fa77 	bl	8008388 <HAL_SPI_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000ea0:	f000 fa9a 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2400036c 	.word	0x2400036c
 8000eac:	40013000 	.word	0x40013000

08000eb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000eb6:	4a28      	ldr	r2, [pc, #160]	@ (8000f58 <MX_SPI2_Init+0xa8>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ebc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ec0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec2:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec8:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000eca:	2207      	movs	r2, #7
 8000ecc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000edc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ee0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ee4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000ee8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000efc:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f08:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f10:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f34:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f40:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f42:	f007 fa21 	bl	8008388 <HAL_SPI_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000f4c:	f000 fa44 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	240003f4 	.word	0x240003f4
 8000f58:	40003800 	.word	0x40003800

08000f5c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000f60:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000f62:	4a28      	ldr	r2, [pc, #160]	@ (8001004 <MX_SPI4_Init+0xa8>)
 8000f64:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f66:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000f68:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f6c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6e:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f74:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000f76:	2207      	movs	r2, #7
 8000f78:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000f88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f8c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000f90:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000f94:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fbc:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <MX_SPI4_Init+0xa4>)
 8000fee:	f007 f9cb 	bl	8008388 <HAL_SPI_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000ff8:	f000 f9ee 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2400047c 	.word	0x2400047c
 8001004:	40013400 	.word	0x40013400

08001008 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800100c:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <MX_UART8_Init+0x90>)
 800100e:	4a23      	ldr	r2, [pc, #140]	@ (800109c <MX_UART8_Init+0x94>)
 8001010:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001012:	4b21      	ldr	r3, [pc, #132]	@ (8001098 <MX_UART8_Init+0x90>)
 8001014:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001018:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <MX_UART8_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <MX_UART8_Init+0x90>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <MX_UART8_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <MX_UART8_Init+0x90>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <MX_UART8_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_UART8_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <MX_UART8_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_UART8_Init+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <MX_UART8_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001050:	4811      	ldr	r0, [pc, #68]	@ (8001098 <MX_UART8_Init+0x90>)
 8001052:	f007 fad8 	bl	8008606 <HAL_UART_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800105c:	f000 f9bc 	bl	80013d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001060:	2100      	movs	r1, #0
 8001062:	480d      	ldr	r0, [pc, #52]	@ (8001098 <MX_UART8_Init+0x90>)
 8001064:	f009 f81e 	bl	800a0a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800106e:	f000 f9b3 	bl	80013d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001072:	2100      	movs	r1, #0
 8001074:	4808      	ldr	r0, [pc, #32]	@ (8001098 <MX_UART8_Init+0x90>)
 8001076:	f009 f853 	bl	800a120 <HAL_UARTEx_SetRxFifoThreshold>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001080:	f000 f9aa 	bl	80013d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <MX_UART8_Init+0x90>)
 8001086:	f008 ffd4 	bl	800a032 <HAL_UARTEx_DisableFifoMode>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001090:	f000 f9a2 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	24000504 	.word	0x24000504
 800109c:	40007c00 	.word	0x40007c00

080010a0 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80010a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001158 <MX_USART1_Init+0xb8>)
 80010a8:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80010aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80010b2:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80010b8:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80010be:	4b25      	ldr	r3, [pc, #148]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80010c4:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80010ca:	4b22      	ldr	r3, [pc, #136]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80010d0:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80010e8:	481a      	ldr	r0, [pc, #104]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010ea:	f009 f8a5 	bl	800a238 <HAL_USART_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80010f4:	f000 f970 	bl	80013d8 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	4816      	ldr	r0, [pc, #88]	@ (8001154 <MX_USART1_Init+0xb4>)
 80010fc:	f009 ffcc 	bl	800b098 <HAL_USARTEx_SetTxFifoThreshold>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001106:	f000 f967 	bl	80013d8 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4811      	ldr	r0, [pc, #68]	@ (8001154 <MX_USART1_Init+0xb4>)
 800110e:	f00a f801 	bl	800b114 <HAL_USARTEx_SetRxFifoThreshold>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8001118:	f000 f95e 	bl	80013d8 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	480d      	ldr	r0, [pc, #52]	@ (8001154 <MX_USART1_Init+0xb4>)
 8001120:	f009 ff44 	bl	800afac <HAL_USARTEx_ConfigNSS>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 800112a:	f000 f955 	bl	80013d8 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 800112e:	4809      	ldr	r0, [pc, #36]	@ (8001154 <MX_USART1_Init+0xb4>)
 8001130:	f009 ff79 	bl	800b026 <HAL_USARTEx_DisableFifoMode>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 800113a:	f000 f94d 	bl	80013d8 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_USART1_Init+0xb4>)
 8001140:	f009 fedf 	bl	800af02 <HAL_USARTEx_EnableSlaveMode>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART1_Init+0xae>
  {
    Error_Handler();
 800114a:	f000 f945 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000598 	.word	0x24000598
 8001158:	40011000 	.word	0x40011000

0800115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	@ 0x30
 8001160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	4b7d      	ldr	r3, [pc, #500]	@ (8001368 <MX_GPIO_Init+0x20c>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001178:	4a7b      	ldr	r2, [pc, #492]	@ (8001368 <MX_GPIO_Init+0x20c>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001182:	4b79      	ldr	r3, [pc, #484]	@ (8001368 <MX_GPIO_Init+0x20c>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001190:	4b75      	ldr	r3, [pc, #468]	@ (8001368 <MX_GPIO_Init+0x20c>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001196:	4a74      	ldr	r2, [pc, #464]	@ (8001368 <MX_GPIO_Init+0x20c>)
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a0:	4b71      	ldr	r3, [pc, #452]	@ (8001368 <MX_GPIO_Init+0x20c>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001368 <MX_GPIO_Init+0x20c>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b4:	4a6c      	ldr	r2, [pc, #432]	@ (8001368 <MX_GPIO_Init+0x20c>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011be:	4b6a      	ldr	r3, [pc, #424]	@ (8001368 <MX_GPIO_Init+0x20c>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b66      	ldr	r3, [pc, #408]	@ (8001368 <MX_GPIO_Init+0x20c>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d2:	4a65      	ldr	r2, [pc, #404]	@ (8001368 <MX_GPIO_Init+0x20c>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011dc:	4b62      	ldr	r3, [pc, #392]	@ (8001368 <MX_GPIO_Init+0x20c>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001368 <MX_GPIO_Init+0x20c>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001368 <MX_GPIO_Init+0x20c>)
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001368 <MX_GPIO_Init+0x20c>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001208:	4b57      	ldr	r3, [pc, #348]	@ (8001368 <MX_GPIO_Init+0x20c>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120e:	4a56      	ldr	r2, [pc, #344]	@ (8001368 <MX_GPIO_Init+0x20c>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001218:	4b53      	ldr	r3, [pc, #332]	@ (8001368 <MX_GPIO_Init+0x20c>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2110      	movs	r1, #16
 800122a:	4850      	ldr	r0, [pc, #320]	@ (800136c <MX_GPIO_Init+0x210>)
 800122c:	f002 f826 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2110      	movs	r1, #16
 8001234:	484e      	ldr	r0, [pc, #312]	@ (8001370 <MX_GPIO_Init+0x214>)
 8001236:	f002 f821 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001240:	484c      	ldr	r0, [pc, #304]	@ (8001374 <MX_GPIO_Init+0x218>)
 8001242:	f002 f81b 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001246:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4847      	ldr	r0, [pc, #284]	@ (8001378 <MX_GPIO_Init+0x21c>)
 800125c:	f001 fe4e 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001260:	2310      	movs	r3, #16
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2302      	movs	r3, #2
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	483d      	ldr	r0, [pc, #244]	@ (800136c <MX_GPIO_Init+0x210>)
 8001278:	f001 fe40 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800127c:	2302      	movs	r3, #2
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	483b      	ldr	r0, [pc, #236]	@ (800137c <MX_GPIO_Init+0x220>)
 8001290:	f001 fe34 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001294:	2308      	movs	r3, #8
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4834      	ldr	r0, [pc, #208]	@ (8001378 <MX_GPIO_Init+0x21c>)
 80012a8:	f001 fe28 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 80012ac:	2310      	movs	r3, #16
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	482b      	ldr	r0, [pc, #172]	@ (8001370 <MX_GPIO_Init+0x214>)
 80012c4:	f001 fe1a 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c8:	2304      	movs	r3, #4
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012cc:	2303      	movs	r3, #3
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	4826      	ldr	r0, [pc, #152]	@ (8001374 <MX_GPIO_Init+0x218>)
 80012dc:	f001 fe0e 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 80012e0:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	481d      	ldr	r0, [pc, #116]	@ (800136c <MX_GPIO_Init+0x210>)
 80012f6:	f001 fe01 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 80012fa:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4818      	ldr	r0, [pc, #96]	@ (8001374 <MX_GPIO_Init+0x218>)
 8001314:	f001 fdf2 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001318:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	480f      	ldr	r0, [pc, #60]	@ (800136c <MX_GPIO_Init+0x210>)
 800132e:	f001 fde5 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001332:	2308      	movs	r3, #8
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	480a      	ldr	r0, [pc, #40]	@ (8001370 <MX_GPIO_Init+0x214>)
 8001346:	f001 fdd9 	bl	8002efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001350:	4808      	ldr	r0, [pc, #32]	@ (8001374 <MX_GPIO_Init+0x218>)
 8001352:	f001 ff93 	bl	800327c <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2110      	movs	r1, #16
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_GPIO_Init+0x214>)
 800135c:	f001 ff8e 	bl	800327c <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001360:	bf00      	nop
 8001362:	3730      	adds	r7, #48	@ 0x30
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	58024400 	.word	0x58024400
 800136c:	58021000 	.word	0x58021000
 8001370:	58020000 	.word	0x58020000
 8001374:	58020400 	.word	0x58020400
 8001378:	58020800 	.word	0x58020800
 800137c:	58020c00 	.word	0x58020c00

08001380 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001386:	463b      	mov	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001392:	f000 ffd7 	bl	8002344 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001396:	2301      	movs	r3, #1
 8001398:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800139a:	2300      	movs	r3, #0
 800139c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80013a2:	231f      	movs	r3, #31
 80013a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80013a6:	2387      	movs	r3, #135	@ 0x87
 80013a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80013ae:	2300      	movs	r3, #0
 80013b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013c2:	463b      	mov	r3, r7
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fff5 	bl	80023b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013ca:	2004      	movs	r0, #4
 80013cc:	f000 ffd2 	bl	8002374 <HAL_MPU_Enable>

}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013dc:	b672      	cpsid	i
}
 80013de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <Error_Handler+0x8>

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_MspInit+0x30>)
 80013ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013f0:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_MspInit+0x30>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_MspInit+0x30>)
 80013fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	58024400 	.word	0x58024400

08001418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0bc      	sub	sp, #240	@ 0xf0
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	22b8      	movs	r2, #184	@ 0xb8
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f00b ff23 	bl	800d284 <memset>
  if(hi2c->Instance==I2C1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a74      	ldr	r2, [pc, #464]	@ (8001614 <HAL_I2C_MspInit+0x1fc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d147      	bne.n	80014d8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001448:	f04f 0208 	mov.w	r2, #8
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fffa 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800146a:	f7ff ffb5 	bl	80013d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b6a      	ldr	r3, [pc, #424]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001474:	4a68      	ldr	r2, [pc, #416]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147e:	4b66      	ldr	r3, [pc, #408]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800148c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001490:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001494:	2312      	movs	r3, #18
 8001496:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a6:	2304      	movs	r3, #4
 80014a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014b0:	4619      	mov	r1, r3
 80014b2:	485a      	ldr	r0, [pc, #360]	@ (800161c <HAL_I2C_MspInit+0x204>)
 80014b4:	f001 fd22 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b8:	4b57      	ldr	r3, [pc, #348]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 80014ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014be:	4a56      	ldr	r2, [pc, #344]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 80014c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014c8:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 80014ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80014d6:	e098      	b.n	800160a <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a50      	ldr	r2, [pc, #320]	@ (8001620 <HAL_I2C_MspInit+0x208>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d147      	bne.n	8001572 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014e2:	f04f 0208 	mov.w	r2, #8
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 ffad 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001504:	f7ff ff68 	bl	80013d8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b43      	ldr	r3, [pc, #268]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150e:	4a42      	ldr	r2, [pc, #264]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001518:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001526:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800152a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152e:	2312      	movs	r3, #18
 8001530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001540:	2304      	movs	r3, #4
 8001542:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800154a:	4619      	mov	r1, r3
 800154c:	4833      	ldr	r0, [pc, #204]	@ (800161c <HAL_I2C_MspInit+0x204>)
 800154e:	f001 fcd5 	bl	8002efc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001552:	4b31      	ldr	r3, [pc, #196]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 8001554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001558:	4a2f      	ldr	r2, [pc, #188]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 800155a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800155e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001562:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 8001564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
}
 8001570:	e04b      	b.n	800160a <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a2b      	ldr	r2, [pc, #172]	@ (8001624 <HAL_I2C_MspInit+0x20c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d146      	bne.n	800160a <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800157c:	f04f 0210 	mov.w	r2, #16
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	4618      	mov	r0, r3
 8001594:	f002 ff60 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 800159e:	f7ff ff1b 	bl	80013d8 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80015c0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80015c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c8:	2312      	movs	r3, #18
 80015ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80015da:	2304      	movs	r3, #4
 80015dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015e4:	4619      	mov	r1, r3
 80015e6:	4810      	ldr	r0, [pc, #64]	@ (8001628 <HAL_I2C_MspInit+0x210>)
 80015e8:	f001 fc88 	bl	8002efc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 80015ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015f2:	4a09      	ldr	r2, [pc, #36]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 80015f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_I2C_MspInit+0x200>)
 80015fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
}
 800160a:	bf00      	nop
 800160c:	37f0      	adds	r7, #240	@ 0xf0
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40005400 	.word	0x40005400
 8001618:	58024400 	.word	0x58024400
 800161c:	58020400 	.word	0x58020400
 8001620:	40005800 	.word	0x40005800
 8001624:	58001c00 	.word	0x58001c00
 8001628:	58020c00 	.word	0x58020c00

0800162c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0ba      	sub	sp, #232	@ 0xe8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001644:	f107 0318 	add.w	r3, r7, #24
 8001648:	22b8      	movs	r2, #184	@ 0xb8
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00b fe19 	bl	800d284 <memset>
  if(hsd->Instance==SDMMC1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a38      	ldr	r2, [pc, #224]	@ (8001738 <HAL_SD_MspInit+0x10c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d169      	bne.n	8001730 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800165c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001668:	2300      	movs	r3, #0
 800166a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fef1 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800167c:	f7ff feac 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001680:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_SD_MspInit+0x110>)
 8001682:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001686:	4a2d      	ldr	r2, [pc, #180]	@ (800173c <HAL_SD_MspInit+0x110>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001690:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <HAL_SD_MspInit+0x110>)
 8001692:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	4b27      	ldr	r3, [pc, #156]	@ (800173c <HAL_SD_MspInit+0x110>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a4:	4a25      	ldr	r2, [pc, #148]	@ (800173c <HAL_SD_MspInit+0x110>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ae:	4b23      	ldr	r3, [pc, #140]	@ (800173c <HAL_SD_MspInit+0x110>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016bc:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <HAL_SD_MspInit+0x110>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c2:	4a1e      	ldr	r2, [pc, #120]	@ (800173c <HAL_SD_MspInit+0x110>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_SD_MspInit+0x110>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016da:	2304      	movs	r3, #4
 80016dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016f2:	230c      	movs	r3, #12
 80016f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4810      	ldr	r0, [pc, #64]	@ (8001740 <HAL_SD_MspInit+0x114>)
 8001700:	f001 fbfc 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8001704:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001708:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800171e:	230c      	movs	r3, #12
 8001720:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001728:	4619      	mov	r1, r3
 800172a:	4806      	ldr	r0, [pc, #24]	@ (8001744 <HAL_SD_MspInit+0x118>)
 800172c:	f001 fbe6 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001730:	bf00      	nop
 8001732:	37e8      	adds	r7, #232	@ 0xe8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	52007000 	.word	0x52007000
 800173c:	58024400 	.word	0x58024400
 8001740:	58020c00 	.word	0x58020c00
 8001744:	58020800 	.word	0x58020800

08001748 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b0be      	sub	sp, #248	@ 0xf8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001764:	22b8      	movs	r2, #184	@ 0xb8
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f00b fd8b 	bl	800d284 <memset>
  if(hspi->Instance==SPI1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a97      	ldr	r2, [pc, #604]	@ (80019d0 <HAL_SPI_MspInit+0x288>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d16a      	bne.n	800184e <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001778:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fe62 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800179a:	f7ff fe1d 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800179e:	4b8d      	ldr	r3, [pc, #564]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80017a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017a4:	4a8b      	ldr	r2, [pc, #556]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80017a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017ae:	4b89      	ldr	r3, [pc, #548]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80017b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	4b85      	ldr	r3, [pc, #532]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c2:	4a84      	ldr	r2, [pc, #528]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017cc:	4b81      	ldr	r3, [pc, #516]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b7e      	ldr	r3, [pc, #504]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e0:	4a7c      	ldr	r2, [pc, #496]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ea:	4b7a      	ldr	r3, [pc, #488]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017f8:	2310      	movs	r3, #16
 80017fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001810:	2305      	movs	r3, #5
 8001812:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800181a:	4619      	mov	r1, r3
 800181c:	486e      	ldr	r0, [pc, #440]	@ (80019d8 <HAL_SPI_MspInit+0x290>)
 800181e:	f001 fb6d 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001822:	23a0      	movs	r3, #160	@ 0xa0
 8001824:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800183a:	2305      	movs	r3, #5
 800183c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001844:	4619      	mov	r1, r3
 8001846:	4865      	ldr	r0, [pc, #404]	@ (80019dc <HAL_SPI_MspInit+0x294>)
 8001848:	f001 fb58 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800184c:	e0bb      	b.n	80019c6 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a63      	ldr	r2, [pc, #396]	@ (80019e0 <HAL_SPI_MspInit+0x298>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d16b      	bne.n	8001930 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001858:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186e:	4618      	mov	r0, r3
 8001870:	f002 fdf2 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_SPI_MspInit+0x136>
      Error_Handler();
 800187a:	f7ff fdad 	bl	80013d8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800187e:	4b55      	ldr	r3, [pc, #340]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 8001880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001884:	4a53      	ldr	r2, [pc, #332]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 8001886:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800188e:	4b51      	ldr	r3, [pc, #324]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 8001890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b4d      	ldr	r3, [pc, #308]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a2:	4a4c      	ldr	r2, [pc, #304]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ac:	4b49      	ldr	r3, [pc, #292]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	4b46      	ldr	r3, [pc, #280]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c0:	4a44      	ldr	r2, [pc, #272]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ca:	4b42      	ldr	r3, [pc, #264]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f2:	2305      	movs	r3, #5
 80018f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4837      	ldr	r0, [pc, #220]	@ (80019dc <HAL_SPI_MspInit+0x294>)
 8001900:	f001 fafc 	bl	8002efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8001904:	2306      	movs	r3, #6
 8001906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800191c:	2305      	movs	r3, #5
 800191e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001922:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001926:	4619      	mov	r1, r3
 8001928:	482e      	ldr	r0, [pc, #184]	@ (80019e4 <HAL_SPI_MspInit+0x29c>)
 800192a:	f001 fae7 	bl	8002efc <HAL_GPIO_Init>
}
 800192e:	e04a      	b.n	80019c6 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a2c      	ldr	r2, [pc, #176]	@ (80019e8 <HAL_SPI_MspInit+0x2a0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d145      	bne.n	80019c6 <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800193a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001950:	4618      	mov	r0, r3
 8001952:	f002 fd81 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 800195c:	f7ff fd3c 	bl	80013d8 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001960:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 8001962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001966:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 8001968:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800196c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001970:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 8001972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001984:	4a13      	ldr	r2, [pc, #76]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <HAL_SPI_MspInit+0x28c>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800199c:	2364      	movs	r3, #100	@ 0x64
 800199e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80019b4:	2305      	movs	r3, #5
 80019b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019be:	4619      	mov	r1, r3
 80019c0:	480a      	ldr	r0, [pc, #40]	@ (80019ec <HAL_SPI_MspInit+0x2a4>)
 80019c2:	f001 fa9b 	bl	8002efc <HAL_GPIO_Init>
}
 80019c6:	bf00      	nop
 80019c8:	37f8      	adds	r7, #248	@ 0xf8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40013000 	.word	0x40013000
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58020400 	.word	0x58020400
 80019dc:	58020000 	.word	0x58020000
 80019e0:	40003800 	.word	0x40003800
 80019e4:	58020800 	.word	0x58020800
 80019e8:	40013400 	.word	0x40013400
 80019ec:	58021000 	.word	0x58021000

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0b8      	sub	sp, #224	@ 0xe0
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	22b8      	movs	r2, #184	@ 0xb8
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00b fc37 	bl	800d284 <memset>
  if(huart->Instance==UART8)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac4 <HAL_UART_MspInit+0xd4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d14d      	bne.n	8001abc <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001a20:	f04f 0202 	mov.w	r2, #2
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 fd0e 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a42:	f7ff fcc9 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <HAL_UART_MspInit+0xd8>)
 8001a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <HAL_UART_MspInit+0xd8>)
 8001a4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <HAL_UART_MspInit+0xd8>)
 8001a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a64:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <HAL_UART_MspInit+0xd8>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6a:	4a17      	ldr	r2, [pc, #92]	@ (8001ac8 <HAL_UART_MspInit+0xd8>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a74:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <HAL_UART_MspInit+0xd8>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001a82:	2303      	movs	r3, #3
 8001a84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4809      	ldr	r0, [pc, #36]	@ (8001acc <HAL_UART_MspInit+0xdc>)
 8001aa8:	f001 fa28 	bl	8002efc <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2053      	movs	r0, #83	@ 0x53
 8001ab2:	f000 fc12 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001ab6:	2053      	movs	r0, #83	@ 0x53
 8001ab8:	f000 fc29 	bl	800230e <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 8001abc:	bf00      	nop
 8001abe:	37e0      	adds	r7, #224	@ 0xe0
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40007c00 	.word	0x40007c00
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	58021000 	.word	0x58021000

08001ad0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0b8      	sub	sp, #224	@ 0xe0
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	22b8      	movs	r2, #184	@ 0xb8
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00b fbc7 	bl	800d284 <memset>
  if(husart->Instance==USART1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a27      	ldr	r2, [pc, #156]	@ (8001b98 <HAL_USART_MspInit+0xc8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d146      	bne.n	8001b8e <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b00:	f04f 0201 	mov.w	r2, #1
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fc9e 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8001b22:	f7ff fc59 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b26:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <HAL_USART_MspInit+0xcc>)
 8001b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b9c <HAL_USART_MspInit+0xcc>)
 8001b2e:	f043 0310 	orr.w	r3, r3, #16
 8001b32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_USART_MspInit+0xcc>)
 8001b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <HAL_USART_MspInit+0xcc>)
 8001b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b4a:	4a14      	ldr	r2, [pc, #80]	@ (8001b9c <HAL_USART_MspInit+0xcc>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <HAL_USART_MspInit+0xcc>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 8001b62:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001b66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <HAL_USART_MspInit+0xd0>)
 8001b8a:	f001 f9b7 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b8e:	bf00      	nop
 8001b90:	37e0      	adds	r7, #224	@ 0xe0
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40011000 	.word	0x40011000
 8001b9c:	58024400 	.word	0x58024400
 8001ba0:	58020000 	.word	0x58020000

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <NMI_Handler+0x4>

08001bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 fa4f 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <UART8_IRQHandler+0x10>)
 8001c0a:	f006 fd4d 	bl	80086a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	24000504 	.word	0x24000504

08001c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return 1;
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_kill>:

int _kill(int pid, int sig)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c32:	f00b fb79 	bl	800d328 <__errno>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2216      	movs	r2, #22
 8001c3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_exit>:

void _exit (int status)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ffe7 	bl	8001c28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c5a:	bf00      	nop
 8001c5c:	e7fd      	b.n	8001c5a <_exit+0x12>

08001c5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e00a      	b.n	8001c86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c70:	f3af 8000 	nop.w
 8001c74:	4601      	mov	r1, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	60ba      	str	r2, [r7, #8]
 8001c7c:	b2ca      	uxtb	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbf0      	blt.n	8001c70 <_read+0x12>
  }

  return len;
 8001c8e:	687b      	ldr	r3, [r7, #4]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc0:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_isatty>:

int _isatty(int file)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cd8:	2301      	movs	r3, #1
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f00b fafa 	bl	800d328 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	24050000 	.word	0x24050000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	240005f8 	.word	0x240005f8
 8001d68:	24000b18 	.word	0x24000b18

08001d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d70:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <SystemInit+0xd0>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d76:	4a31      	ldr	r2, [pc, #196]	@ (8001e3c <SystemInit+0xd0>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d80:	4b2f      	ldr	r3, [pc, #188]	@ (8001e40 <SystemInit+0xd4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	2b06      	cmp	r3, #6
 8001d8a:	d807      	bhi.n	8001d9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e40 <SystemInit+0xd4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 030f 	bic.w	r3, r3, #15
 8001d94:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <SystemInit+0xd4>)
 8001d96:	f043 0307 	orr.w	r3, r3, #7
 8001d9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d9c:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <SystemInit+0xd8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a28      	ldr	r2, [pc, #160]	@ (8001e44 <SystemInit+0xd8>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001da8:	4b26      	ldr	r3, [pc, #152]	@ (8001e44 <SystemInit+0xd8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dae:	4b25      	ldr	r3, [pc, #148]	@ (8001e44 <SystemInit+0xd8>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4924      	ldr	r1, [pc, #144]	@ (8001e44 <SystemInit+0xd8>)
 8001db4:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <SystemInit+0xdc>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dba:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <SystemInit+0xd4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e40 <SystemInit+0xd4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 030f 	bic.w	r3, r3, #15
 8001dce:	4a1c      	ldr	r2, [pc, #112]	@ (8001e40 <SystemInit+0xd4>)
 8001dd0:	f043 0307 	orr.w	r3, r3, #7
 8001dd4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <SystemInit+0xd8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <SystemInit+0xd8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <SystemInit+0xd8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <SystemInit+0xd8>)
 8001dea:	4a18      	ldr	r2, [pc, #96]	@ (8001e4c <SystemInit+0xe0>)
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <SystemInit+0xd8>)
 8001df0:	4a17      	ldr	r2, [pc, #92]	@ (8001e50 <SystemInit+0xe4>)
 8001df2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001df4:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <SystemInit+0xd8>)
 8001df6:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <SystemInit+0xe8>)
 8001df8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dfa:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <SystemInit+0xd8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e00:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <SystemInit+0xd8>)
 8001e02:	4a14      	ldr	r2, [pc, #80]	@ (8001e54 <SystemInit+0xe8>)
 8001e04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <SystemInit+0xd8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <SystemInit+0xd8>)
 8001e0e:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <SystemInit+0xe8>)
 8001e10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <SystemInit+0xd8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <SystemInit+0xd8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a09      	ldr	r2, [pc, #36]	@ (8001e44 <SystemInit+0xd8>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e24:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <SystemInit+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <SystemInit+0xec>)
 8001e2c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00
 8001e40:	52002000 	.word	0x52002000
 8001e44:	58024400 	.word	0x58024400
 8001e48:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e4c:	02020200 	.word	0x02020200
 8001e50:	01ff0000 	.word	0x01ff0000
 8001e54:	01010280 	.word	0x01010280
 8001e58:	52004000 	.word	0x52004000

08001e5c <SensorManager_Init>:
//	"BME680",
//	"MS5607",
//	"ATGM336H",
};

telemetry_init_status SensorManager_Init(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
	printf("Sensors Initialization routine started. \n");
 8001e62:	4825      	ldr	r0, [pc, #148]	@ (8001ef8 <SensorManager_Init+0x9c>)
 8001e64:	f00b f90e 	bl	800d084 <puts>

    size_t num_sensors = sizeof(init_functions) / sizeof(init_functions[0]);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	e022      	b.n	8001ec0 <SensorManager_Init+0x64>
        int8_t status = init_functions[i]();
 8001e7a:	4a20      	ldr	r2, [pc, #128]	@ (8001efc <SensorManager_Init+0xa0>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e82:	4798      	blx	r3
 8001e84:	4603      	mov	r3, r0
 8001e86:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 8001e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <SensorManager_Init+0x4a>
            printf("%s initialization failed.\n", sensor_names[i]);
 8001e90:	4a1b      	ldr	r2, [pc, #108]	@ (8001f00 <SensorManager_Init+0xa4>)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	481a      	ldr	r0, [pc, #104]	@ (8001f04 <SensorManager_Init+0xa8>)
 8001e9c:	f00b f88a 	bl	800cfb4 <iprintf>
            all_success = false;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e009      	b.n	8001eba <SensorManager_Init+0x5e>
        } else {
        	printf("[%s] device found! Initialization succeded.\n", sensor_names[i]);
 8001ea6:	4a16      	ldr	r2, [pc, #88]	@ (8001f00 <SensorManager_Init+0xa4>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4815      	ldr	r0, [pc, #84]	@ (8001f08 <SensorManager_Init+0xac>)
 8001eb2:	f00b f87f 	bl	800cfb4 <iprintf>
            any_success = true;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d3d8      	bcc.n	8001e7a <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d004      	beq.n	8001ed8 <SensorManager_Init+0x7c>
        printf("All sensors initialized successfully.\n");
 8001ece:	480f      	ldr	r0, [pc, #60]	@ (8001f0c <SensorManager_Init+0xb0>)
 8001ed0:	f00b f8d8 	bl	800d084 <puts>
        return TELEMETRY_INIT_SUCCESS;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e00b      	b.n	8001ef0 <SensorManager_Init+0x94>
    } else if (any_success) {
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <SensorManager_Init+0x8c>
        printf("Partial initialization success.\n");
 8001ede:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <SensorManager_Init+0xb4>)
 8001ee0:	f00b f8d0 	bl	800d084 <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e003      	b.n	8001ef0 <SensorManager_Init+0x94>
    } else {
        printf("All sensors initialization failed.\n");
 8001ee8:	480a      	ldr	r0, [pc, #40]	@ (8001f14 <SensorManager_Init+0xb8>)
 8001eea:	f00b f8cb 	bl	800d084 <puts>
        return TELEMETRY_INIT_FAILURE;
 8001eee:	2302      	movs	r3, #2
    }
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	080107a8 	.word	0x080107a8
 8001efc:	240009b0 	.word	0x240009b0
 8001f00:	240009b0 	.word	0x240009b0
 8001f04:	080107d4 	.word	0x080107d4
 8001f08:	080107f0 	.word	0x080107f0
 8001f0c:	08010820 	.word	0x08010820
 8001f10:	08010848 	.word	0x08010848
 8001f14:	08010868 	.word	0x08010868

08001f18 <SensorManager_UpdateData>:

void SensorManager_UpdateData(TelemetryData *data) {
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

    //FOR VERSION 2 OF ARGUS
//    ASM330LHH_ReadData(&data->asm330lhh_data);
//    LIS2MDLTR_ReadData(&data->lis2mdltr_data);

}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <TestTelemetry>:
			;
		}
	}
}

void TestTelemetry(){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1000 ; i++){
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	e008      	b.n	8001f4a <TestTelemetry+0x1e>

	// Sensor Data Read
	SensorManager_UpdateData(&telemetry);
 8001f38:	4808      	ldr	r0, [pc, #32]	@ (8001f5c <TestTelemetry+0x30>)
 8001f3a:	f7ff ffed 	bl	8001f18 <SensorManager_UpdateData>
//	bno055_print_fusion_data(&telemetry.bno055_data);
//	ms5607_print_barometer_data(&telemetry.ms5607_data);
//	bme680_print_barometer_data(&telemetry.bme680_data);
//	gps_print_positionning_data(&telemetry.gps_data);

	printf("// --------------------------------------------- // \n");
 8001f3e:	4808      	ldr	r0, [pc, #32]	@ (8001f60 <TestTelemetry+0x34>)
 8001f40:	f00b f8a0 	bl	800d084 <puts>
	for(int i = 0; i < 1000 ; i++){
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3301      	adds	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f50:	dbf2      	blt.n	8001f38 <TestTelemetry+0xc>
//    delay_us_func(50000);  //50 ms
//    delay_us_func(100000); //100 ms
//    delay_us_func(200000); //200 ms
//      delay_us_func(1500000); //1.5 s
    	}
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	24000600 	.word	0x24000600
 8001f60:	0801088c 	.word	0x0801088c

08001f64 <Reset_Handler>:
 8001f64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f9c <LoopFillZerobss+0xe>
 8001f68:	f7ff ff00 	bl	8001d6c <SystemInit>
 8001f6c:	480c      	ldr	r0, [pc, #48]	@ (8001fa0 <LoopFillZerobss+0x12>)
 8001f6e:	490d      	ldr	r1, [pc, #52]	@ (8001fa4 <LoopFillZerobss+0x16>)
 8001f70:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa8 <LoopFillZerobss+0x1a>)
 8001f72:	2300      	movs	r3, #0
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:
 8001f76:	58d4      	ldr	r4, [r2, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:
 8001f7c:	18c4      	adds	r4, r0, r3
 8001f7e:	428c      	cmp	r4, r1
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <LoopFillZerobss+0x1e>)
 8001f84:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb0 <LoopFillZerobss+0x22>)
 8001f86:	2300      	movs	r3, #0
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:
 8001f8e:	42a2      	cmp	r2, r4
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>
 8001f92:	f00b f9cf 	bl	800d334 <__libc_init_array>
 8001f96:	f7fe fdc4 	bl	8000b22 <main>
 8001f9a:	4770      	bx	lr
 8001f9c:	24050000 	.word	0x24050000
 8001fa0:	24000000 	.word	0x24000000
 8001fa4:	240001d8 	.word	0x240001d8
 8001fa8:	08010d60 	.word	0x08010d60
 8001fac:	240001d8 	.word	0x240001d8
 8001fb0:	24000b14 	.word	0x24000b14

08001fb4 <ADC3_IRQHandler>:
 8001fb4:	e7fe      	b.n	8001fb4 <ADC3_IRQHandler>
	...

08001fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f000 f980 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fc4:	f002 f872 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <HAL_Init+0x68>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	4913      	ldr	r1, [pc, #76]	@ (8002024 <HAL_Init+0x6c>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_Init+0x68>)
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <HAL_Init+0x6c>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8002028 <HAL_Init+0x70>)
 8001ffa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800202c <HAL_Init+0x74>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002002:	2000      	movs	r0, #0
 8002004:	f000 f814 	bl	8002030 <HAL_InitTick>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e002      	b.n	8002018 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002012:	f7ff f9e7 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	58024400 	.word	0x58024400
 8002024:	080108c4 	.word	0x080108c4
 8002028:	24000004 	.word	0x24000004
 800202c:	24000000 	.word	0x24000000

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002038:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <HAL_InitTick+0x60>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e021      	b.n	8002088 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <HAL_InitTick+0x64>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_InitTick+0x60>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f965 	bl	800232a <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 f92f 	bl	80022da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	@ (8002098 <HAL_InitTick+0x68>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2400000c 	.word	0x2400000c
 8002094:	24000000 	.word	0x24000000
 8002098:	24000008 	.word	0x24000008

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	2400000c 	.word	0x2400000c
 80020c0:	240009b0 	.word	0x240009b0

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	240009b0 	.word	0x240009b0

080020dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff ffee 	bl	80020c4 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d005      	beq.n	8002102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_Delay+0x44>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002102:	bf00      	nop
 8002104:	f7ff ffde 	bl	80020c4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d8f7      	bhi.n	8002104 <HAL_Delay+0x28>
  {
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2400000c 	.word	0x2400000c

08002124 <__NVIC_SetPriorityGrouping>:
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <__NVIC_SetPriorityGrouping+0x40>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	4313      	orrs	r3, r2
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <__NVIC_SetPriorityGrouping+0x40>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00
 8002168:	05fa0000 	.word	0x05fa0000

0800216c <__NVIC_GetPriorityGrouping>:
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	@ (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	@ (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	@ (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	@ 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e8:	f7ff ff40 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7ff ff90 	bl	8002218 <NVIC_EncodePriority>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff5f 	bl	80021c4 <__NVIC_SetPriority>
}
 8002306:	bf00      	nop
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff33 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ffa4 	bl	8002280 <SysTick_Config>
 8002338:	4603      	mov	r3, r0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002348:	f3bf 8f5f 	dmb	sy
}
 800234c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800234e:	4b07      	ldr	r3, [pc, #28]	@ (800236c <HAL_MPU_Disable+0x28>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	4a06      	ldr	r2, [pc, #24]	@ (800236c <HAL_MPU_Disable+0x28>)
 8002354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002358:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800235a:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_MPU_Disable+0x2c>)
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000ed00 	.word	0xe000ed00
 8002370:	e000ed90 	.word	0xe000ed90

08002374 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800237c:	4a0b      	ldr	r2, [pc, #44]	@ (80023ac <HAL_MPU_Enable+0x38>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_MPU_Enable+0x3c>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <HAL_MPU_Enable+0x3c>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002390:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002392:	f3bf 8f4f 	dsb	sy
}
 8002396:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002398:	f3bf 8f6f 	isb	sy
}
 800239c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed90 	.word	0xe000ed90
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	785a      	ldrb	r2, [r3, #1]
 80023c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_MPU_ConfigRegion+0x7c>)
 80023c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80023c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002430 <HAL_MPU_ConfigRegion+0x7c>)
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	4a19      	ldr	r2, [pc, #100]	@ (8002430 <HAL_MPU_ConfigRegion+0x7c>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80023d0:	4a17      	ldr	r2, [pc, #92]	@ (8002430 <HAL_MPU_ConfigRegion+0x7c>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7b1b      	ldrb	r3, [r3, #12]
 80023dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7adb      	ldrb	r3, [r3, #11]
 80023e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7a9b      	ldrb	r3, [r3, #10]
 80023ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80023ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7b5b      	ldrb	r3, [r3, #13]
 80023f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	7b9b      	ldrb	r3, [r3, #14]
 80023fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7bdb      	ldrb	r3, [r3, #15]
 8002402:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002404:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	7a5b      	ldrb	r3, [r3, #9]
 800240a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800240c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7a1b      	ldrb	r3, [r3, #8]
 8002412:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002414:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800241c:	4a04      	ldr	r2, [pc, #16]	@ (8002430 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800241e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002420:	6113      	str	r3, [r2, #16]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed90 	.word	0xe000ed90

08002434 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff fe42 	bl	80020c4 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e2dc      	b.n	8002a06 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d008      	beq.n	800246a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2280      	movs	r2, #128	@ 0x80
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e2cd      	b.n	8002a06 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a76      	ldr	r2, [pc, #472]	@ (8002648 <HAL_DMA_Abort+0x214>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d04a      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a74      	ldr	r2, [pc, #464]	@ (800264c <HAL_DMA_Abort+0x218>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d045      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a73      	ldr	r2, [pc, #460]	@ (8002650 <HAL_DMA_Abort+0x21c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d040      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a71      	ldr	r2, [pc, #452]	@ (8002654 <HAL_DMA_Abort+0x220>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d03b      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a70      	ldr	r2, [pc, #448]	@ (8002658 <HAL_DMA_Abort+0x224>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d036      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6e      	ldr	r2, [pc, #440]	@ (800265c <HAL_DMA_Abort+0x228>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d031      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6d      	ldr	r2, [pc, #436]	@ (8002660 <HAL_DMA_Abort+0x22c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d02c      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002664 <HAL_DMA_Abort+0x230>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d027      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6a      	ldr	r2, [pc, #424]	@ (8002668 <HAL_DMA_Abort+0x234>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a68      	ldr	r2, [pc, #416]	@ (800266c <HAL_DMA_Abort+0x238>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01d      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a67      	ldr	r2, [pc, #412]	@ (8002670 <HAL_DMA_Abort+0x23c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d018      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a65      	ldr	r2, [pc, #404]	@ (8002674 <HAL_DMA_Abort+0x240>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a64      	ldr	r2, [pc, #400]	@ (8002678 <HAL_DMA_Abort+0x244>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00e      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a62      	ldr	r2, [pc, #392]	@ (800267c <HAL_DMA_Abort+0x248>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a61      	ldr	r2, [pc, #388]	@ (8002680 <HAL_DMA_Abort+0x24c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d004      	beq.n	800250a <HAL_DMA_Abort+0xd6>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a5f      	ldr	r2, [pc, #380]	@ (8002684 <HAL_DMA_Abort+0x250>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_DMA_Abort+0xda>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_DMA_Abort+0xdc>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 021e 	bic.w	r2, r2, #30
 8002522:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002532:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e00a      	b.n	8002552 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 020e 	bic.w	r2, r2, #14
 800254a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a3c      	ldr	r2, [pc, #240]	@ (8002648 <HAL_DMA_Abort+0x214>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d072      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a3a      	ldr	r2, [pc, #232]	@ (800264c <HAL_DMA_Abort+0x218>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d06d      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a39      	ldr	r2, [pc, #228]	@ (8002650 <HAL_DMA_Abort+0x21c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d068      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a37      	ldr	r2, [pc, #220]	@ (8002654 <HAL_DMA_Abort+0x220>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d063      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a36      	ldr	r2, [pc, #216]	@ (8002658 <HAL_DMA_Abort+0x224>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d05e      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a34      	ldr	r2, [pc, #208]	@ (800265c <HAL_DMA_Abort+0x228>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d059      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a33      	ldr	r2, [pc, #204]	@ (8002660 <HAL_DMA_Abort+0x22c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d054      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a31      	ldr	r2, [pc, #196]	@ (8002664 <HAL_DMA_Abort+0x230>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d04f      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a30      	ldr	r2, [pc, #192]	@ (8002668 <HAL_DMA_Abort+0x234>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d04a      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2e      	ldr	r2, [pc, #184]	@ (800266c <HAL_DMA_Abort+0x238>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d045      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002670 <HAL_DMA_Abort+0x23c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d040      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002674 <HAL_DMA_Abort+0x240>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d03b      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002678 <HAL_DMA_Abort+0x244>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d036      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a28      	ldr	r2, [pc, #160]	@ (800267c <HAL_DMA_Abort+0x248>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d031      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a27      	ldr	r2, [pc, #156]	@ (8002680 <HAL_DMA_Abort+0x24c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d02c      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a25      	ldr	r2, [pc, #148]	@ (8002684 <HAL_DMA_Abort+0x250>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d027      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a24      	ldr	r2, [pc, #144]	@ (8002688 <HAL_DMA_Abort+0x254>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d022      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a22      	ldr	r2, [pc, #136]	@ (800268c <HAL_DMA_Abort+0x258>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01d      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a21      	ldr	r2, [pc, #132]	@ (8002690 <HAL_DMA_Abort+0x25c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d018      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1f      	ldr	r2, [pc, #124]	@ (8002694 <HAL_DMA_Abort+0x260>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1e      	ldr	r2, [pc, #120]	@ (8002698 <HAL_DMA_Abort+0x264>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00e      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1c      	ldr	r2, [pc, #112]	@ (800269c <HAL_DMA_Abort+0x268>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d009      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1b      	ldr	r2, [pc, #108]	@ (80026a0 <HAL_DMA_Abort+0x26c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d004      	beq.n	8002642 <HAL_DMA_Abort+0x20e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a19      	ldr	r2, [pc, #100]	@ (80026a4 <HAL_DMA_Abort+0x270>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d132      	bne.n	80026a8 <HAL_DMA_Abort+0x274>
 8002642:	2301      	movs	r3, #1
 8002644:	e031      	b.n	80026aa <HAL_DMA_Abort+0x276>
 8002646:	bf00      	nop
 8002648:	40020010 	.word	0x40020010
 800264c:	40020028 	.word	0x40020028
 8002650:	40020040 	.word	0x40020040
 8002654:	40020058 	.word	0x40020058
 8002658:	40020070 	.word	0x40020070
 800265c:	40020088 	.word	0x40020088
 8002660:	400200a0 	.word	0x400200a0
 8002664:	400200b8 	.word	0x400200b8
 8002668:	40020410 	.word	0x40020410
 800266c:	40020428 	.word	0x40020428
 8002670:	40020440 	.word	0x40020440
 8002674:	40020458 	.word	0x40020458
 8002678:	40020470 	.word	0x40020470
 800267c:	40020488 	.word	0x40020488
 8002680:	400204a0 	.word	0x400204a0
 8002684:	400204b8 	.word	0x400204b8
 8002688:	58025408 	.word	0x58025408
 800268c:	5802541c 	.word	0x5802541c
 8002690:	58025430 	.word	0x58025430
 8002694:	58025444 	.word	0x58025444
 8002698:	58025458 	.word	0x58025458
 800269c:	5802546c 	.word	0x5802546c
 80026a0:	58025480 	.word	0x58025480
 80026a4:	58025494 	.word	0x58025494
 80026a8:	2300      	movs	r3, #0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6d      	ldr	r2, [pc, #436]	@ (8002878 <HAL_DMA_Abort+0x444>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d04a      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6b      	ldr	r2, [pc, #428]	@ (800287c <HAL_DMA_Abort+0x448>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d045      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6a      	ldr	r2, [pc, #424]	@ (8002880 <HAL_DMA_Abort+0x44c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d040      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a68      	ldr	r2, [pc, #416]	@ (8002884 <HAL_DMA_Abort+0x450>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d03b      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a67      	ldr	r2, [pc, #412]	@ (8002888 <HAL_DMA_Abort+0x454>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d036      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a65      	ldr	r2, [pc, #404]	@ (800288c <HAL_DMA_Abort+0x458>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d031      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a64      	ldr	r2, [pc, #400]	@ (8002890 <HAL_DMA_Abort+0x45c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d02c      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a62      	ldr	r2, [pc, #392]	@ (8002894 <HAL_DMA_Abort+0x460>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d027      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a61      	ldr	r2, [pc, #388]	@ (8002898 <HAL_DMA_Abort+0x464>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d022      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5f      	ldr	r2, [pc, #380]	@ (800289c <HAL_DMA_Abort+0x468>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01d      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a5e      	ldr	r2, [pc, #376]	@ (80028a0 <HAL_DMA_Abort+0x46c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d018      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a5c      	ldr	r2, [pc, #368]	@ (80028a4 <HAL_DMA_Abort+0x470>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a5b      	ldr	r2, [pc, #364]	@ (80028a8 <HAL_DMA_Abort+0x474>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00e      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a59      	ldr	r2, [pc, #356]	@ (80028ac <HAL_DMA_Abort+0x478>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a58      	ldr	r2, [pc, #352]	@ (80028b0 <HAL_DMA_Abort+0x47c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d004      	beq.n	800275e <HAL_DMA_Abort+0x32a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a56      	ldr	r2, [pc, #344]	@ (80028b4 <HAL_DMA_Abort+0x480>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d108      	bne.n	8002770 <HAL_DMA_Abort+0x33c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e007      	b.n	8002780 <HAL_DMA_Abort+0x34c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002780:	e013      	b.n	80027aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002782:	f7ff fc9f 	bl	80020c4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b05      	cmp	r3, #5
 800278e:	d90c      	bls.n	80027aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e12d      	b.n	8002a06 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e5      	bne.n	8002782 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002878 <HAL_DMA_Abort+0x444>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d04a      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2d      	ldr	r2, [pc, #180]	@ (800287c <HAL_DMA_Abort+0x448>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d045      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002880 <HAL_DMA_Abort+0x44c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d040      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002884 <HAL_DMA_Abort+0x450>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d03b      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a29      	ldr	r2, [pc, #164]	@ (8002888 <HAL_DMA_Abort+0x454>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d036      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a27      	ldr	r2, [pc, #156]	@ (800288c <HAL_DMA_Abort+0x458>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d031      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a26      	ldr	r2, [pc, #152]	@ (8002890 <HAL_DMA_Abort+0x45c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d02c      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a24      	ldr	r2, [pc, #144]	@ (8002894 <HAL_DMA_Abort+0x460>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d027      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a23      	ldr	r2, [pc, #140]	@ (8002898 <HAL_DMA_Abort+0x464>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d022      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a21      	ldr	r2, [pc, #132]	@ (800289c <HAL_DMA_Abort+0x468>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01d      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a20      	ldr	r2, [pc, #128]	@ (80028a0 <HAL_DMA_Abort+0x46c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d018      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1e      	ldr	r2, [pc, #120]	@ (80028a4 <HAL_DMA_Abort+0x470>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <HAL_DMA_Abort+0x474>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00e      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1b      	ldr	r2, [pc, #108]	@ (80028ac <HAL_DMA_Abort+0x478>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1a      	ldr	r2, [pc, #104]	@ (80028b0 <HAL_DMA_Abort+0x47c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d004      	beq.n	8002856 <HAL_DMA_Abort+0x422>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a18      	ldr	r2, [pc, #96]	@ (80028b4 <HAL_DMA_Abort+0x480>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_DMA_Abort+0x426>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_DMA_Abort+0x428>
 800285a:	2300      	movs	r3, #0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d02b      	beq.n	80028b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	223f      	movs	r2, #63	@ 0x3f
 8002870:	409a      	lsls	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	e02a      	b.n	80028ce <HAL_DMA_Abort+0x49a>
 8002878:	40020010 	.word	0x40020010
 800287c:	40020028 	.word	0x40020028
 8002880:	40020040 	.word	0x40020040
 8002884:	40020058 	.word	0x40020058
 8002888:	40020070 	.word	0x40020070
 800288c:	40020088 	.word	0x40020088
 8002890:	400200a0 	.word	0x400200a0
 8002894:	400200b8 	.word	0x400200b8
 8002898:	40020410 	.word	0x40020410
 800289c:	40020428 	.word	0x40020428
 80028a0:	40020440 	.word	0x40020440
 80028a4:	40020458 	.word	0x40020458
 80028a8:	40020470 	.word	0x40020470
 80028ac:	40020488 	.word	0x40020488
 80028b0:	400204a0 	.word	0x400204a0
 80028b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2201      	movs	r2, #1
 80028c8:	409a      	lsls	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a4f      	ldr	r2, [pc, #316]	@ (8002a10 <HAL_DMA_Abort+0x5dc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d072      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002a14 <HAL_DMA_Abort+0x5e0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d06d      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002a18 <HAL_DMA_Abort+0x5e4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d068      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a4a      	ldr	r2, [pc, #296]	@ (8002a1c <HAL_DMA_Abort+0x5e8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d063      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a49      	ldr	r2, [pc, #292]	@ (8002a20 <HAL_DMA_Abort+0x5ec>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d05e      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a47      	ldr	r2, [pc, #284]	@ (8002a24 <HAL_DMA_Abort+0x5f0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d059      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a46      	ldr	r2, [pc, #280]	@ (8002a28 <HAL_DMA_Abort+0x5f4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d054      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a44      	ldr	r2, [pc, #272]	@ (8002a2c <HAL_DMA_Abort+0x5f8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d04f      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a43      	ldr	r2, [pc, #268]	@ (8002a30 <HAL_DMA_Abort+0x5fc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d04a      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a41      	ldr	r2, [pc, #260]	@ (8002a34 <HAL_DMA_Abort+0x600>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d045      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a40      	ldr	r2, [pc, #256]	@ (8002a38 <HAL_DMA_Abort+0x604>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d040      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a3e      	ldr	r2, [pc, #248]	@ (8002a3c <HAL_DMA_Abort+0x608>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d03b      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a40 <HAL_DMA_Abort+0x60c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d036      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3b      	ldr	r2, [pc, #236]	@ (8002a44 <HAL_DMA_Abort+0x610>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d031      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a48 <HAL_DMA_Abort+0x614>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d02c      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a38      	ldr	r2, [pc, #224]	@ (8002a4c <HAL_DMA_Abort+0x618>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d027      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a37      	ldr	r2, [pc, #220]	@ (8002a50 <HAL_DMA_Abort+0x61c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a35      	ldr	r2, [pc, #212]	@ (8002a54 <HAL_DMA_Abort+0x620>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01d      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a34      	ldr	r2, [pc, #208]	@ (8002a58 <HAL_DMA_Abort+0x624>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d018      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a32      	ldr	r2, [pc, #200]	@ (8002a5c <HAL_DMA_Abort+0x628>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a31      	ldr	r2, [pc, #196]	@ (8002a60 <HAL_DMA_Abort+0x62c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00e      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a64 <HAL_DMA_Abort+0x630>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002a68 <HAL_DMA_Abort+0x634>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_DMA_Abort+0x58a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a6c <HAL_DMA_Abort+0x638>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_DMA_Abort+0x58e>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_DMA_Abort+0x590>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d015      	beq.n	80029f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00c      	beq.n	80029f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40020010 	.word	0x40020010
 8002a14:	40020028 	.word	0x40020028
 8002a18:	40020040 	.word	0x40020040
 8002a1c:	40020058 	.word	0x40020058
 8002a20:	40020070 	.word	0x40020070
 8002a24:	40020088 	.word	0x40020088
 8002a28:	400200a0 	.word	0x400200a0
 8002a2c:	400200b8 	.word	0x400200b8
 8002a30:	40020410 	.word	0x40020410
 8002a34:	40020428 	.word	0x40020428
 8002a38:	40020440 	.word	0x40020440
 8002a3c:	40020458 	.word	0x40020458
 8002a40:	40020470 	.word	0x40020470
 8002a44:	40020488 	.word	0x40020488
 8002a48:	400204a0 	.word	0x400204a0
 8002a4c:	400204b8 	.word	0x400204b8
 8002a50:	58025408 	.word	0x58025408
 8002a54:	5802541c 	.word	0x5802541c
 8002a58:	58025430 	.word	0x58025430
 8002a5c:	58025444 	.word	0x58025444
 8002a60:	58025458 	.word	0x58025458
 8002a64:	5802546c 	.word	0x5802546c
 8002a68:	58025480 	.word	0x58025480
 8002a6c:	58025494 	.word	0x58025494

08002a70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e237      	b.n	8002ef2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d004      	beq.n	8002a98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2280      	movs	r2, #128	@ 0x80
 8002a92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e22c      	b.n	8002ef2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002c10 <HAL_DMA_Abort_IT+0x1a0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d04a      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c14 <HAL_DMA_Abort_IT+0x1a4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d045      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a59      	ldr	r2, [pc, #356]	@ (8002c18 <HAL_DMA_Abort_IT+0x1a8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d040      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a58      	ldr	r2, [pc, #352]	@ (8002c1c <HAL_DMA_Abort_IT+0x1ac>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d03b      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a56      	ldr	r2, [pc, #344]	@ (8002c20 <HAL_DMA_Abort_IT+0x1b0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d036      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a55      	ldr	r2, [pc, #340]	@ (8002c24 <HAL_DMA_Abort_IT+0x1b4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d031      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a53      	ldr	r2, [pc, #332]	@ (8002c28 <HAL_DMA_Abort_IT+0x1b8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d02c      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a52      	ldr	r2, [pc, #328]	@ (8002c2c <HAL_DMA_Abort_IT+0x1bc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d027      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a50      	ldr	r2, [pc, #320]	@ (8002c30 <HAL_DMA_Abort_IT+0x1c0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d022      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a4f      	ldr	r2, [pc, #316]	@ (8002c34 <HAL_DMA_Abort_IT+0x1c4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d01d      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a4d      	ldr	r2, [pc, #308]	@ (8002c38 <HAL_DMA_Abort_IT+0x1c8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d018      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8002c3c <HAL_DMA_Abort_IT+0x1cc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d013      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a4a      	ldr	r2, [pc, #296]	@ (8002c40 <HAL_DMA_Abort_IT+0x1d0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00e      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a49      	ldr	r2, [pc, #292]	@ (8002c44 <HAL_DMA_Abort_IT+0x1d4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a47      	ldr	r2, [pc, #284]	@ (8002c48 <HAL_DMA_Abort_IT+0x1d8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a46      	ldr	r2, [pc, #280]	@ (8002c4c <HAL_DMA_Abort_IT+0x1dc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_DMA_Abort_IT+0xcc>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_DMA_Abort_IT+0xce>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8086 	beq.w	8002c50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2f      	ldr	r2, [pc, #188]	@ (8002c10 <HAL_DMA_Abort_IT+0x1a0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d04a      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002c14 <HAL_DMA_Abort_IT+0x1a4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d045      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2c      	ldr	r2, [pc, #176]	@ (8002c18 <HAL_DMA_Abort_IT+0x1a8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d040      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c1c <HAL_DMA_Abort_IT+0x1ac>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d03b      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a29      	ldr	r2, [pc, #164]	@ (8002c20 <HAL_DMA_Abort_IT+0x1b0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d036      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <HAL_DMA_Abort_IT+0x1b4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d031      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a26      	ldr	r2, [pc, #152]	@ (8002c28 <HAL_DMA_Abort_IT+0x1b8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d02c      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a25      	ldr	r2, [pc, #148]	@ (8002c2c <HAL_DMA_Abort_IT+0x1bc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d027      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a23      	ldr	r2, [pc, #140]	@ (8002c30 <HAL_DMA_Abort_IT+0x1c0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d022      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a22      	ldr	r2, [pc, #136]	@ (8002c34 <HAL_DMA_Abort_IT+0x1c4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d01d      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a20      	ldr	r2, [pc, #128]	@ (8002c38 <HAL_DMA_Abort_IT+0x1c8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d018      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8002c3c <HAL_DMA_Abort_IT+0x1cc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d013      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <HAL_DMA_Abort_IT+0x1d0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00e      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c44 <HAL_DMA_Abort_IT+0x1d4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002c48 <HAL_DMA_Abort_IT+0x1d8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a19      	ldr	r2, [pc, #100]	@ (8002c4c <HAL_DMA_Abort_IT+0x1dc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d108      	bne.n	8002bfe <HAL_DMA_Abort_IT+0x18e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e178      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x480>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e16f      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x480>
 8002c10:	40020010 	.word	0x40020010
 8002c14:	40020028 	.word	0x40020028
 8002c18:	40020040 	.word	0x40020040
 8002c1c:	40020058 	.word	0x40020058
 8002c20:	40020070 	.word	0x40020070
 8002c24:	40020088 	.word	0x40020088
 8002c28:	400200a0 	.word	0x400200a0
 8002c2c:	400200b8 	.word	0x400200b8
 8002c30:	40020410 	.word	0x40020410
 8002c34:	40020428 	.word	0x40020428
 8002c38:	40020440 	.word	0x40020440
 8002c3c:	40020458 	.word	0x40020458
 8002c40:	40020470 	.word	0x40020470
 8002c44:	40020488 	.word	0x40020488
 8002c48:	400204a0 	.word	0x400204a0
 8002c4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 020e 	bic.w	r2, r2, #14
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6c      	ldr	r2, [pc, #432]	@ (8002e18 <HAL_DMA_Abort_IT+0x3a8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d04a      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6b      	ldr	r2, [pc, #428]	@ (8002e1c <HAL_DMA_Abort_IT+0x3ac>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d045      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a69      	ldr	r2, [pc, #420]	@ (8002e20 <HAL_DMA_Abort_IT+0x3b0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d040      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a68      	ldr	r2, [pc, #416]	@ (8002e24 <HAL_DMA_Abort_IT+0x3b4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d03b      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a66      	ldr	r2, [pc, #408]	@ (8002e28 <HAL_DMA_Abort_IT+0x3b8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d036      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a65      	ldr	r2, [pc, #404]	@ (8002e2c <HAL_DMA_Abort_IT+0x3bc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d031      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a63      	ldr	r2, [pc, #396]	@ (8002e30 <HAL_DMA_Abort_IT+0x3c0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d02c      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a62      	ldr	r2, [pc, #392]	@ (8002e34 <HAL_DMA_Abort_IT+0x3c4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d027      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a60      	ldr	r2, [pc, #384]	@ (8002e38 <HAL_DMA_Abort_IT+0x3c8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d022      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a5f      	ldr	r2, [pc, #380]	@ (8002e3c <HAL_DMA_Abort_IT+0x3cc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d01d      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e40 <HAL_DMA_Abort_IT+0x3d0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d018      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002e44 <HAL_DMA_Abort_IT+0x3d4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d013      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a5a      	ldr	r2, [pc, #360]	@ (8002e48 <HAL_DMA_Abort_IT+0x3d8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00e      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a59      	ldr	r2, [pc, #356]	@ (8002e4c <HAL_DMA_Abort_IT+0x3dc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d009      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a57      	ldr	r2, [pc, #348]	@ (8002e50 <HAL_DMA_Abort_IT+0x3e0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a56      	ldr	r2, [pc, #344]	@ (8002e54 <HAL_DMA_Abort_IT+0x3e4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d108      	bne.n	8002d12 <HAL_DMA_Abort_IT+0x2a2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e007      	b.n	8002d22 <HAL_DMA_Abort_IT+0x2b2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a3c      	ldr	r2, [pc, #240]	@ (8002e18 <HAL_DMA_Abort_IT+0x3a8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d072      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3a      	ldr	r2, [pc, #232]	@ (8002e1c <HAL_DMA_Abort_IT+0x3ac>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d06d      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a39      	ldr	r2, [pc, #228]	@ (8002e20 <HAL_DMA_Abort_IT+0x3b0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d068      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a37      	ldr	r2, [pc, #220]	@ (8002e24 <HAL_DMA_Abort_IT+0x3b4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d063      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a36      	ldr	r2, [pc, #216]	@ (8002e28 <HAL_DMA_Abort_IT+0x3b8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d05e      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a34      	ldr	r2, [pc, #208]	@ (8002e2c <HAL_DMA_Abort_IT+0x3bc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d059      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a33      	ldr	r2, [pc, #204]	@ (8002e30 <HAL_DMA_Abort_IT+0x3c0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d054      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a31      	ldr	r2, [pc, #196]	@ (8002e34 <HAL_DMA_Abort_IT+0x3c4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d04f      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a30      	ldr	r2, [pc, #192]	@ (8002e38 <HAL_DMA_Abort_IT+0x3c8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d04a      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2e      	ldr	r2, [pc, #184]	@ (8002e3c <HAL_DMA_Abort_IT+0x3cc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d045      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e40 <HAL_DMA_Abort_IT+0x3d0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d040      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a2b      	ldr	r2, [pc, #172]	@ (8002e44 <HAL_DMA_Abort_IT+0x3d4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d03b      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e48 <HAL_DMA_Abort_IT+0x3d8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d036      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a28      	ldr	r2, [pc, #160]	@ (8002e4c <HAL_DMA_Abort_IT+0x3dc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d031      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a27      	ldr	r2, [pc, #156]	@ (8002e50 <HAL_DMA_Abort_IT+0x3e0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d02c      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a25      	ldr	r2, [pc, #148]	@ (8002e54 <HAL_DMA_Abort_IT+0x3e4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d027      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a24      	ldr	r2, [pc, #144]	@ (8002e58 <HAL_DMA_Abort_IT+0x3e8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d022      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a22      	ldr	r2, [pc, #136]	@ (8002e5c <HAL_DMA_Abort_IT+0x3ec>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d01d      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a21      	ldr	r2, [pc, #132]	@ (8002e60 <HAL_DMA_Abort_IT+0x3f0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d018      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e64 <HAL_DMA_Abort_IT+0x3f4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1e      	ldr	r2, [pc, #120]	@ (8002e68 <HAL_DMA_Abort_IT+0x3f8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00e      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e6c <HAL_DMA_Abort_IT+0x3fc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1b      	ldr	r2, [pc, #108]	@ (8002e70 <HAL_DMA_Abort_IT+0x400>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a19      	ldr	r2, [pc, #100]	@ (8002e74 <HAL_DMA_Abort_IT+0x404>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d132      	bne.n	8002e78 <HAL_DMA_Abort_IT+0x408>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e031      	b.n	8002e7a <HAL_DMA_Abort_IT+0x40a>
 8002e16:	bf00      	nop
 8002e18:	40020010 	.word	0x40020010
 8002e1c:	40020028 	.word	0x40020028
 8002e20:	40020040 	.word	0x40020040
 8002e24:	40020058 	.word	0x40020058
 8002e28:	40020070 	.word	0x40020070
 8002e2c:	40020088 	.word	0x40020088
 8002e30:	400200a0 	.word	0x400200a0
 8002e34:	400200b8 	.word	0x400200b8
 8002e38:	40020410 	.word	0x40020410
 8002e3c:	40020428 	.word	0x40020428
 8002e40:	40020440 	.word	0x40020440
 8002e44:	40020458 	.word	0x40020458
 8002e48:	40020470 	.word	0x40020470
 8002e4c:	40020488 	.word	0x40020488
 8002e50:	400204a0 	.word	0x400204a0
 8002e54:	400204b8 	.word	0x400204b8
 8002e58:	58025408 	.word	0x58025408
 8002e5c:	5802541c 	.word	0x5802541c
 8002e60:	58025430 	.word	0x58025430
 8002e64:	58025444 	.word	0x58025444
 8002e68:	58025458 	.word	0x58025458
 8002e6c:	5802546c 	.word	0x5802546c
 8002e70:	58025480 	.word	0x58025480
 8002e74:	58025494 	.word	0x58025494
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d028      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002eac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ec4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ece:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f0a:	4b86      	ldr	r3, [pc, #536]	@ (8003124 <HAL_GPIO_Init+0x228>)
 8002f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f0e:	e18c      	b.n	800322a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 817e 	beq.w	8003224 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d005      	beq.n	8002f40 <HAL_GPIO_Init+0x44>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d130      	bne.n	8002fa2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f76:	2201      	movs	r2, #1
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	f003 0201 	and.w	r2, r3, #1
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d017      	beq.n	8002fde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d123      	bne.n	8003032 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	08da      	lsrs	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3208      	adds	r2, #8
 8002ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	220f      	movs	r2, #15
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	08da      	lsrs	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3208      	adds	r2, #8
 800302c:	69b9      	ldr	r1, [r7, #24]
 800302e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80d8 	beq.w	8003224 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003074:	4b2c      	ldr	r3, [pc, #176]	@ (8003128 <HAL_GPIO_Init+0x22c>)
 8003076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800307a:	4a2b      	ldr	r2, [pc, #172]	@ (8003128 <HAL_GPIO_Init+0x22c>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003084:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <HAL_GPIO_Init+0x22c>)
 8003086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a26      	ldr	r2, [pc, #152]	@ (800312c <HAL_GPIO_Init+0x230>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003130 <HAL_GPIO_Init+0x234>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d04a      	beq.n	8003154 <HAL_GPIO_Init+0x258>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <HAL_GPIO_Init+0x238>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d02b      	beq.n	800311e <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <HAL_GPIO_Init+0x23c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d025      	beq.n	800311a <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <HAL_GPIO_Init+0x240>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01f      	beq.n	8003116 <HAL_GPIO_Init+0x21a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a19      	ldr	r2, [pc, #100]	@ (8003140 <HAL_GPIO_Init+0x244>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d019      	beq.n	8003112 <HAL_GPIO_Init+0x216>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <HAL_GPIO_Init+0x248>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_GPIO_Init+0x212>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a17      	ldr	r2, [pc, #92]	@ (8003148 <HAL_GPIO_Init+0x24c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00d      	beq.n	800310a <HAL_GPIO_Init+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a16      	ldr	r2, [pc, #88]	@ (800314c <HAL_GPIO_Init+0x250>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <HAL_GPIO_Init+0x20a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a15      	ldr	r2, [pc, #84]	@ (8003150 <HAL_GPIO_Init+0x254>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_GPIO_Init+0x206>
 80030fe:	2309      	movs	r3, #9
 8003100:	e029      	b.n	8003156 <HAL_GPIO_Init+0x25a>
 8003102:	230a      	movs	r3, #10
 8003104:	e027      	b.n	8003156 <HAL_GPIO_Init+0x25a>
 8003106:	2307      	movs	r3, #7
 8003108:	e025      	b.n	8003156 <HAL_GPIO_Init+0x25a>
 800310a:	2306      	movs	r3, #6
 800310c:	e023      	b.n	8003156 <HAL_GPIO_Init+0x25a>
 800310e:	2305      	movs	r3, #5
 8003110:	e021      	b.n	8003156 <HAL_GPIO_Init+0x25a>
 8003112:	2304      	movs	r3, #4
 8003114:	e01f      	b.n	8003156 <HAL_GPIO_Init+0x25a>
 8003116:	2303      	movs	r3, #3
 8003118:	e01d      	b.n	8003156 <HAL_GPIO_Init+0x25a>
 800311a:	2302      	movs	r3, #2
 800311c:	e01b      	b.n	8003156 <HAL_GPIO_Init+0x25a>
 800311e:	2301      	movs	r3, #1
 8003120:	e019      	b.n	8003156 <HAL_GPIO_Init+0x25a>
 8003122:	bf00      	nop
 8003124:	58000080 	.word	0x58000080
 8003128:	58024400 	.word	0x58024400
 800312c:	58000400 	.word	0x58000400
 8003130:	58020000 	.word	0x58020000
 8003134:	58020400 	.word	0x58020400
 8003138:	58020800 	.word	0x58020800
 800313c:	58020c00 	.word	0x58020c00
 8003140:	58021000 	.word	0x58021000
 8003144:	58021400 	.word	0x58021400
 8003148:	58021800 	.word	0x58021800
 800314c:	58021c00 	.word	0x58021c00
 8003150:	58022400 	.word	0x58022400
 8003154:	2300      	movs	r3, #0
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	f002 0203 	and.w	r2, r2, #3
 800315c:	0092      	lsls	r2, r2, #2
 800315e:	4093      	lsls	r3, r2
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003166:	4938      	ldr	r1, [pc, #224]	@ (8003248 <HAL_GPIO_Init+0x34c>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800319a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	3301      	adds	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	f47f ae6b 	bne.w	8002f10 <HAL_GPIO_Init+0x14>
  }
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	3724      	adds	r7, #36	@ 0x24
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	58000400 	.word	0x58000400

0800324c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	887b      	ldrh	r3, [r7, #2]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e001      	b.n	800326e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e08b      	b.n	80033da <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe f89e 	bl	8001418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	@ 0x24
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003300:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003310:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d107      	bne.n	800332a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	e006      	b.n	8003338 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003336:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d108      	bne.n	8003352 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	e007      	b.n	8003362 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003360:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b1d      	ldr	r3, [pc, #116]	@ (80033e4 <HAL_I2C_Init+0x134>)
 800336e:	430b      	orrs	r3, r1
 8003370:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003380:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69d9      	ldr	r1, [r3, #28]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	02008000 	.word	0x02008000

080033e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d138      	bne.n	8003470 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003408:	2302      	movs	r3, #2
 800340a:	e032      	b.n	8003472 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	@ 0x24
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800343a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6819      	ldr	r1, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b20      	cmp	r3, #32
 8003492:	d139      	bne.n	8003508 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800349e:	2302      	movs	r3, #2
 80034a0:	e033      	b.n	800350a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2224      	movs	r2, #36	@ 0x24
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0201 	bic.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e000      	b.n	800350a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003520:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_PWREx_ConfigSupply+0x70>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d00a      	beq.n	8003542 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800352c:	4b16      	ldr	r3, [pc, #88]	@ (8003588 <HAL_PWREx_ConfigSupply+0x70>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	d001      	beq.n	800353e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e01f      	b.n	800357e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	e01d      	b.n	800357e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003542:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <HAL_PWREx_ConfigSupply+0x70>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f023 0207 	bic.w	r2, r3, #7
 800354a:	490f      	ldr	r1, [pc, #60]	@ (8003588 <HAL_PWREx_ConfigSupply+0x70>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4313      	orrs	r3, r2
 8003550:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003552:	f7fe fdb7 	bl	80020c4 <HAL_GetTick>
 8003556:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003558:	e009      	b.n	800356e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800355a:	f7fe fdb3 	bl	80020c4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003568:	d901      	bls.n	800356e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e007      	b.n	800357e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800356e:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <HAL_PWREx_ConfigSupply+0x70>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800357a:	d1ee      	bne.n	800355a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	58024800 	.word	0x58024800

0800358c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08c      	sub	sp, #48	@ 0x30
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e3c8      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8087 	beq.w	80036ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ac:	4b88      	ldr	r3, [pc, #544]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035b6:	4b86      	ldr	r3, [pc, #536]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80035b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035be:	2b10      	cmp	r3, #16
 80035c0:	d007      	beq.n	80035d2 <HAL_RCC_OscConfig+0x46>
 80035c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c4:	2b18      	cmp	r3, #24
 80035c6:	d110      	bne.n	80035ea <HAL_RCC_OscConfig+0x5e>
 80035c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d10b      	bne.n	80035ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d2:	4b7f      	ldr	r3, [pc, #508]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d06c      	beq.n	80036b8 <HAL_RCC_OscConfig+0x12c>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d168      	bne.n	80036b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e3a2      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x76>
 80035f4:	4b76      	ldr	r3, [pc, #472]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a75      	ldr	r2, [pc, #468]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e02e      	b.n	8003660 <HAL_RCC_OscConfig+0xd4>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x98>
 800360a:	4b71      	ldr	r3, [pc, #452]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a70      	ldr	r2, [pc, #448]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b6e      	ldr	r3, [pc, #440]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6d      	ldr	r2, [pc, #436]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 800361c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e01d      	b.n	8003660 <HAL_RCC_OscConfig+0xd4>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0xbc>
 800362e:	4b68      	ldr	r3, [pc, #416]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a67      	ldr	r2, [pc, #412]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b65      	ldr	r3, [pc, #404]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a64      	ldr	r2, [pc, #400]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e00b      	b.n	8003660 <HAL_RCC_OscConfig+0xd4>
 8003648:	4b61      	ldr	r3, [pc, #388]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a60      	ldr	r2, [pc, #384]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b5e      	ldr	r3, [pc, #376]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a5d      	ldr	r2, [pc, #372]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 800365a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe fd2c 	bl	80020c4 <HAL_GetTick>
 800366c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe fd28 	bl	80020c4 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	@ 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e356      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003682:	4b53      	ldr	r3, [pc, #332]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0xe4>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe fd18 	bl	80020c4 <HAL_GetTick>
 8003694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7fe fd14 	bl	80020c4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	@ 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e342      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036aa:	4b49      	ldr	r3, [pc, #292]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x10c>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 808c 	beq.w	80037e0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c8:	4b41      	ldr	r3, [pc, #260]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036d2:	4b3f      	ldr	r3, [pc, #252]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80036d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_RCC_OscConfig+0x162>
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	2b18      	cmp	r3, #24
 80036e2:	d137      	bne.n	8003754 <HAL_RCC_OscConfig+0x1c8>
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d132      	bne.n	8003754 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ee:	4b38      	ldr	r3, [pc, #224]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_RCC_OscConfig+0x17a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e314      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003706:	4b32      	ldr	r3, [pc, #200]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 0219 	bic.w	r2, r3, #25
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	492f      	ldr	r1, [pc, #188]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe fcd4 	bl	80020c4 <HAL_GetTick>
 800371c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003720:	f7fe fcd0 	bl	80020c4 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e2fe      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003732:	4b27      	ldr	r3, [pc, #156]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	4920      	ldr	r1, [pc, #128]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003752:	e045      	b.n	80037e0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d026      	beq.n	80037aa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800375c:	4b1c      	ldr	r3, [pc, #112]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 0219 	bic.w	r2, r3, #25
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4919      	ldr	r1, [pc, #100]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fe fca9 	bl	80020c4 <HAL_GetTick>
 8003772:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003776:	f7fe fca5 	bl	80020c4 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e2d3      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b0e      	ldr	r3, [pc, #56]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	490b      	ldr	r1, [pc, #44]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
 80037a8:	e01a      	b.n	80037e0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a08      	ldr	r2, [pc, #32]	@ (80037d0 <HAL_RCC_OscConfig+0x244>)
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fe fc85 	bl	80020c4 <HAL_GetTick>
 80037ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037bc:	e00a      	b.n	80037d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037be:	f7fe fc81 	bl	80020c4 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d903      	bls.n	80037d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e2af      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
 80037d0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037d4:	4b96      	ldr	r3, [pc, #600]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ee      	bne.n	80037be <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d06a      	beq.n	80038c2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ec:	4b90      	ldr	r3, [pc, #576]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037f4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037f6:	4b8e      	ldr	r3, [pc, #568]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 80037f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d007      	beq.n	8003812 <HAL_RCC_OscConfig+0x286>
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b18      	cmp	r3, #24
 8003806:	d11b      	bne.n	8003840 <HAL_RCC_OscConfig+0x2b4>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d116      	bne.n	8003840 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003812:	4b87      	ldr	r3, [pc, #540]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_RCC_OscConfig+0x29e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	2b80      	cmp	r3, #128	@ 0x80
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e282      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800382a:	4b81      	ldr	r3, [pc, #516]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	061b      	lsls	r3, r3, #24
 8003838:	497d      	ldr	r1, [pc, #500]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800383e:	e040      	b.n	80038c2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d023      	beq.n	8003890 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003848:	4b79      	ldr	r3, [pc, #484]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a78      	ldr	r2, [pc, #480]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 800384e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fe fc36 	bl	80020c4 <HAL_GetTick>
 8003858:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800385c:	f7fe fc32 	bl	80020c4 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e260      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800386e:	4b70      	ldr	r3, [pc, #448]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800387a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	061b      	lsls	r3, r3, #24
 8003888:	4969      	ldr	r1, [pc, #420]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	60cb      	str	r3, [r1, #12]
 800388e:	e018      	b.n	80038c2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003890:	4b67      	ldr	r3, [pc, #412]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a66      	ldr	r2, [pc, #408]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800389a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe fc12 	bl	80020c4 <HAL_GetTick>
 80038a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038a4:	f7fe fc0e 	bl	80020c4 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e23c      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d036      	beq.n	800393c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d019      	beq.n	800390a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d6:	4b56      	ldr	r3, [pc, #344]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 80038d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038da:	4a55      	ldr	r2, [pc, #340]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e2:	f7fe fbef 	bl	80020c4 <HAL_GetTick>
 80038e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ea:	f7fe fbeb 	bl	80020c4 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e219      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 80038fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x35e>
 8003908:	e018      	b.n	800393c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800390a:	4b49      	ldr	r3, [pc, #292]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 800390c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390e:	4a48      	ldr	r2, [pc, #288]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003916:	f7fe fbd5 	bl	80020c4 <HAL_GetTick>
 800391a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391e:	f7fe fbd1 	bl	80020c4 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e1ff      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003930:	4b3f      	ldr	r3, [pc, #252]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f0      	bne.n	800391e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d036      	beq.n	80039b6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d019      	beq.n	8003984 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003950:	4b37      	ldr	r3, [pc, #220]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a36      	ldr	r2, [pc, #216]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003956:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800395a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800395c:	f7fe fbb2 	bl	80020c4 <HAL_GetTick>
 8003960:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003964:	f7fe fbae 	bl	80020c4 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e1dc      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003976:	4b2e      	ldr	r3, [pc, #184]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x3d8>
 8003982:	e018      	b.n	80039b6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003984:	4b2a      	ldr	r3, [pc, #168]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a29      	ldr	r2, [pc, #164]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 800398a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800398e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003990:	f7fe fb98 	bl	80020c4 <HAL_GetTick>
 8003994:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003998:	f7fe fb94 	bl	80020c4 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e1c2      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039aa:	4b21      	ldr	r3, [pc, #132]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8086 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039d0:	f7fe fb78 	bl	80020c4 <HAL_GetTick>
 80039d4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7fe fb74 	bl	80020c4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	@ 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1a2      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ea:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d106      	bne.n	8003a0c <HAL_RCC_OscConfig+0x480>
 80039fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a02:	4a0b      	ldr	r2, [pc, #44]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0a:	e032      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e6>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d111      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4ac>
 8003a14:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a18:	4a05      	ldr	r2, [pc, #20]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a20:	4b03      	ldr	r3, [pc, #12]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a24:	4a02      	ldr	r2, [pc, #8]	@ (8003a30 <HAL_RCC_OscConfig+0x4a4>)
 8003a26:	f023 0304 	bic.w	r3, r3, #4
 8003a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2c:	e021      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e6>
 8003a2e:	bf00      	nop
 8003a30:	58024400 	.word	0x58024400
 8003a34:	58024800 	.word	0x58024800
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b05      	cmp	r3, #5
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4ce>
 8003a40:	4b83      	ldr	r3, [pc, #524]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a44:	4a82      	ldr	r2, [pc, #520]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003a46:	f043 0304 	orr.w	r3, r3, #4
 8003a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4c:	4b80      	ldr	r3, [pc, #512]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a50:	4a7f      	ldr	r2, [pc, #508]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a58:	e00b      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e6>
 8003a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a66:	4b7a      	ldr	r3, [pc, #488]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6a:	4a79      	ldr	r2, [pc, #484]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003a6c:	f023 0304 	bic.w	r3, r3, #4
 8003a70:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d015      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7a:	f7fe fb23 	bl	80020c4 <HAL_GetTick>
 8003a7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fe fb1f 	bl	80020c4 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e14b      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a98:	4b6d      	ldr	r3, [pc, #436]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ee      	beq.n	8003a82 <HAL_RCC_OscConfig+0x4f6>
 8003aa4:	e014      	b.n	8003ad0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa6:	f7fe fb0d 	bl	80020c4 <HAL_GetTick>
 8003aaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fe fb09 	bl	80020c4 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e135      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ac4:	4b62      	ldr	r3, [pc, #392]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ee      	bne.n	8003aae <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 812a 	beq.w	8003d2e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ada:	4b5d      	ldr	r3, [pc, #372]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ae2:	2b18      	cmp	r3, #24
 8003ae4:	f000 80ba 	beq.w	8003c5c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	f040 8095 	bne.w	8003c1c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af2:	4b57      	ldr	r3, [pc, #348]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a56      	ldr	r2, [pc, #344]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003af8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fe fae1 	bl	80020c4 <HAL_GetTick>
 8003b02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fe fadd 	bl	80020c4 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e10b      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b18:	4b4d      	ldr	r3, [pc, #308]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b24:	4b4a      	ldr	r3, [pc, #296]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003b26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b28:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <HAL_RCC_OscConfig+0x6c8>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b34:	0112      	lsls	r2, r2, #4
 8003b36:	430a      	orrs	r2, r1
 8003b38:	4945      	ldr	r1, [pc, #276]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	3b01      	subs	r3, #1
 8003b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	025b      	lsls	r3, r3, #9
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	041b      	lsls	r3, r3, #16
 8003b5c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b66:	3b01      	subs	r3, #1
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003b6e:	4938      	ldr	r1, [pc, #224]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003b74:	4b36      	ldr	r3, [pc, #216]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	4a35      	ldr	r2, [pc, #212]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b80:	4b33      	ldr	r3, [pc, #204]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b84:	4b34      	ldr	r3, [pc, #208]	@ (8003c58 <HAL_RCC_OscConfig+0x6cc>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b8c:	00d2      	lsls	r2, r2, #3
 8003b8e:	4930      	ldr	r1, [pc, #192]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b94:	4b2e      	ldr	r3, [pc, #184]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	f023 020c 	bic.w	r2, r3, #12
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	492b      	ldr	r1, [pc, #172]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	f023 0202 	bic.w	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	4927      	ldr	r1, [pc, #156]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bb8:	4b25      	ldr	r3, [pc, #148]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	4a24      	ldr	r2, [pc, #144]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc4:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	4a21      	ldr	r2, [pc, #132]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003bd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be8:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a18      	ldr	r2, [pc, #96]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fa66 	bl	80020c4 <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fe fa62 	bl	80020c4 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e090      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c0e:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x670>
 8003c1a:	e088      	b.n	8003d2e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0b      	ldr	r2, [pc, #44]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe fa4c 	bl	80020c4 <HAL_GetTick>
 8003c2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fe fa48 	bl	80020c4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e076      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c42:	4b03      	ldr	r3, [pc, #12]	@ (8003c50 <HAL_RCC_OscConfig+0x6c4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x6a4>
 8003c4e:	e06e      	b.n	8003d2e <HAL_RCC_OscConfig+0x7a2>
 8003c50:	58024400 	.word	0x58024400
 8003c54:	fffffc0c 	.word	0xfffffc0c
 8003c58:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c5c:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <HAL_RCC_OscConfig+0x7ac>)
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c62:	4b35      	ldr	r3, [pc, #212]	@ (8003d38 <HAL_RCC_OscConfig+0x7ac>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d031      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f003 0203 	and.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d12a      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d122      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d11a      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	0a5b      	lsrs	r3, r3, #9
 8003ca2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003caa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d111      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d108      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	0e1b      	lsrs	r3, r3, #24
 8003cc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e02b      	b.n	8003d30 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003cd8:	4b17      	ldr	r3, [pc, #92]	@ (8003d38 <HAL_RCC_OscConfig+0x7ac>)
 8003cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cdc:	08db      	lsrs	r3, r3, #3
 8003cde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ce2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d01f      	beq.n	8003d2e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003cee:	4b12      	ldr	r3, [pc, #72]	@ (8003d38 <HAL_RCC_OscConfig+0x7ac>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	4a11      	ldr	r2, [pc, #68]	@ (8003d38 <HAL_RCC_OscConfig+0x7ac>)
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cfa:	f7fe f9e3 	bl	80020c4 <HAL_GetTick>
 8003cfe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d00:	bf00      	nop
 8003d02:	f7fe f9df 	bl	80020c4 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d0f9      	beq.n	8003d02 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <HAL_RCC_OscConfig+0x7ac>)
 8003d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d12:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <HAL_RCC_OscConfig+0x7b0>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d1a:	00d2      	lsls	r2, r2, #3
 8003d1c:	4906      	ldr	r1, [pc, #24]	@ (8003d38 <HAL_RCC_OscConfig+0x7ac>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d22:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCC_OscConfig+0x7ac>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	4a04      	ldr	r2, [pc, #16]	@ (8003d38 <HAL_RCC_OscConfig+0x7ac>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3730      	adds	r7, #48	@ 0x30
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	ffff0007 	.word	0xffff0007

08003d40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e19c      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d54:	4b8a      	ldr	r3, [pc, #552]	@ (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d910      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b87      	ldr	r3, [pc, #540]	@ (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	4985      	ldr	r1, [pc, #532]	@ (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b83      	ldr	r3, [pc, #524]	@ (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e184      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d010      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	4b7b      	ldr	r3, [pc, #492]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d908      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003da0:	4b78      	ldr	r3, [pc, #480]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	4975      	ldr	r1, [pc, #468]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d010      	beq.n	8003de0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	4b70      	ldr	r3, [pc, #448]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d908      	bls.n	8003de0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dce:	4b6d      	ldr	r3, [pc, #436]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	496a      	ldr	r1, [pc, #424]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d010      	beq.n	8003e0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699a      	ldr	r2, [r3, #24]
 8003df0:	4b64      	ldr	r3, [pc, #400]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d908      	bls.n	8003e0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003dfc:	4b61      	ldr	r3, [pc, #388]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	495e      	ldr	r1, [pc, #376]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69da      	ldr	r2, [r3, #28]
 8003e1e:	4b59      	ldr	r3, [pc, #356]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d908      	bls.n	8003e3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e2a:	4b56      	ldr	r3, [pc, #344]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4953      	ldr	r1, [pc, #332]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d010      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d908      	bls.n	8003e6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e58:	4b4a      	ldr	r3, [pc, #296]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f023 020f 	bic.w	r2, r3, #15
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4947      	ldr	r1, [pc, #284]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d055      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e76:	4b43      	ldr	r3, [pc, #268]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	4940      	ldr	r1, [pc, #256]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e90:	4b3c      	ldr	r3, [pc, #240]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d121      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0f6      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d107      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ea8:	4b36      	ldr	r3, [pc, #216]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d115      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0ea      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d107      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ec0:	4b30      	ldr	r3, [pc, #192]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0de      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0d6      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ee0:	4b28      	ldr	r3, [pc, #160]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f023 0207 	bic.w	r2, r3, #7
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4925      	ldr	r1, [pc, #148]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef2:	f7fe f8e7 	bl	80020c4 <HAL_GetTick>
 8003ef6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efa:	f7fe f8e3 	bl	80020c4 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0be      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f10:	4b1c      	ldr	r3, [pc, #112]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d1eb      	bne.n	8003efa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d208      	bcs.n	8003f50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3e:	4b11      	ldr	r3, [pc, #68]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f023 020f 	bic.w	r2, r3, #15
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	490e      	ldr	r1, [pc, #56]	@ (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f50:	4b0b      	ldr	r3, [pc, #44]	@ (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d214      	bcs.n	8003f88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b08      	ldr	r3, [pc, #32]	@ (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 020f 	bic.w	r2, r3, #15
 8003f66:	4906      	ldr	r1, [pc, #24]	@ (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e086      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
 8003f80:	52002000 	.word	0x52002000
 8003f84:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	4b3f      	ldr	r3, [pc, #252]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d208      	bcs.n	8003fb6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	4939      	ldr	r1, [pc, #228]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d010      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	4b34      	ldr	r3, [pc, #208]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d208      	bcs.n	8003fe4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fd2:	4b31      	ldr	r3, [pc, #196]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	492e      	ldr	r1, [pc, #184]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d010      	beq.n	8004012 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	4b28      	ldr	r3, [pc, #160]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d208      	bcs.n	8004012 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004000:	4b25      	ldr	r3, [pc, #148]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	4922      	ldr	r1, [pc, #136]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 800400e:	4313      	orrs	r3, r2
 8004010:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d010      	beq.n	8004040 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	4b1d      	ldr	r3, [pc, #116]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800402a:	429a      	cmp	r2, r3
 800402c:	d208      	bcs.n	8004040 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800402e:	4b1a      	ldr	r3, [pc, #104]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	4917      	ldr	r1, [pc, #92]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 800403c:	4313      	orrs	r3, r2
 800403e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004040:	f000 f834 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8004044:	4602      	mov	r2, r0
 8004046:	4b14      	ldr	r3, [pc, #80]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	4912      	ldr	r1, [pc, #72]	@ (800409c <HAL_RCC_ClockConfig+0x35c>)
 8004052:	5ccb      	ldrb	r3, [r1, r3]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
 800405c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800405e:	4b0e      	ldr	r3, [pc, #56]	@ (8004098 <HAL_RCC_ClockConfig+0x358>)
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	4a0d      	ldr	r2, [pc, #52]	@ (800409c <HAL_RCC_ClockConfig+0x35c>)
 8004068:	5cd3      	ldrb	r3, [r2, r3]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
 8004074:	4a0a      	ldr	r2, [pc, #40]	@ (80040a0 <HAL_RCC_ClockConfig+0x360>)
 8004076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004078:	4a0a      	ldr	r2, [pc, #40]	@ (80040a4 <HAL_RCC_ClockConfig+0x364>)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800407e:	4b0a      	ldr	r3, [pc, #40]	@ (80040a8 <HAL_RCC_ClockConfig+0x368>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd ffd4 	bl	8002030 <HAL_InitTick>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	58024400 	.word	0x58024400
 800409c:	080108c4 	.word	0x080108c4
 80040a0:	24000004 	.word	0x24000004
 80040a4:	24000000 	.word	0x24000000
 80040a8:	24000008 	.word	0x24000008

080040ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	@ 0x24
 80040b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b2:	4bb3      	ldr	r3, [pc, #716]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040ba:	2b18      	cmp	r3, #24
 80040bc:	f200 8155 	bhi.w	800436a <HAL_RCC_GetSysClockFreq+0x2be>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	0800412d 	.word	0x0800412d
 80040cc:	0800436b 	.word	0x0800436b
 80040d0:	0800436b 	.word	0x0800436b
 80040d4:	0800436b 	.word	0x0800436b
 80040d8:	0800436b 	.word	0x0800436b
 80040dc:	0800436b 	.word	0x0800436b
 80040e0:	0800436b 	.word	0x0800436b
 80040e4:	0800436b 	.word	0x0800436b
 80040e8:	08004153 	.word	0x08004153
 80040ec:	0800436b 	.word	0x0800436b
 80040f0:	0800436b 	.word	0x0800436b
 80040f4:	0800436b 	.word	0x0800436b
 80040f8:	0800436b 	.word	0x0800436b
 80040fc:	0800436b 	.word	0x0800436b
 8004100:	0800436b 	.word	0x0800436b
 8004104:	0800436b 	.word	0x0800436b
 8004108:	08004159 	.word	0x08004159
 800410c:	0800436b 	.word	0x0800436b
 8004110:	0800436b 	.word	0x0800436b
 8004114:	0800436b 	.word	0x0800436b
 8004118:	0800436b 	.word	0x0800436b
 800411c:	0800436b 	.word	0x0800436b
 8004120:	0800436b 	.word	0x0800436b
 8004124:	0800436b 	.word	0x0800436b
 8004128:	0800415f 	.word	0x0800415f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800412c:	4b94      	ldr	r3, [pc, #592]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d009      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004138:	4b91      	ldr	r3, [pc, #580]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	08db      	lsrs	r3, r3, #3
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	4a90      	ldr	r2, [pc, #576]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
 8004148:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800414a:	e111      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800414c:	4b8d      	ldr	r3, [pc, #564]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800414e:	61bb      	str	r3, [r7, #24]
      break;
 8004150:	e10e      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004152:	4b8d      	ldr	r3, [pc, #564]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004154:	61bb      	str	r3, [r7, #24]
      break;
 8004156:	e10b      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004158:	4b8c      	ldr	r3, [pc, #560]	@ (800438c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800415a:	61bb      	str	r3, [r7, #24]
      break;
 800415c:	e108      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800415e:	4b88      	ldr	r3, [pc, #544]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004168:	4b85      	ldr	r3, [pc, #532]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004172:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004174:	4b82      	ldr	r3, [pc, #520]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800417e:	4b80      	ldr	r3, [pc, #512]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004182:	08db      	lsrs	r3, r3, #3
 8004184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80e1 	beq.w	8004364 <HAL_RCC_GetSysClockFreq+0x2b8>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	f000 8083 	beq.w	80042b0 <HAL_RCC_GetSysClockFreq+0x204>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	f200 80a1 	bhi.w	80042f4 <HAL_RCC_GetSysClockFreq+0x248>
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x114>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d056      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x1c0>
 80041be:	e099      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d02d      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	08db      	lsrs	r3, r3, #3
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
 80041dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f6:	4b62      	ldr	r3, [pc, #392]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004206:	ed97 6a02 	vldr	s12, [r7, #8]
 800420a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004390 <HAL_RCC_GetSysClockFreq+0x2e4>
 800420e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800421a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800421e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004222:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004226:	e087      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004394 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800423a:	4b51      	ldr	r3, [pc, #324]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800424a:	ed97 6a02 	vldr	s12, [r7, #8]
 800424e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004390 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800425a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800425e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800426a:	e065      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004398 <HAL_RCC_GetSysClockFreq+0x2ec>
 800427a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427e:	4b40      	ldr	r3, [pc, #256]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004292:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004390 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800429a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042ae:	e043      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800439c <HAL_RCC_GetSysClockFreq+0x2f0>
 80042be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004390 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042f2:	e021      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004398 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004306:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004316:	ed97 6a02 	vldr	s12, [r7, #8]
 800431a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004390 <HAL_RCC_GetSysClockFreq+0x2e4>
 800431e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800432a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004336:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004338:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433c:	0a5b      	lsrs	r3, r3, #9
 800433e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004342:	3301      	adds	r3, #1
 8004344:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004350:	edd7 6a07 	vldr	s13, [r7, #28]
 8004354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435c:	ee17 3a90 	vmov	r3, s15
 8004360:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004362:	e005      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	61bb      	str	r3, [r7, #24]
      break;
 8004368:	e002      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800436a:	4b07      	ldr	r3, [pc, #28]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800436c:	61bb      	str	r3, [r7, #24]
      break;
 800436e:	bf00      	nop
  }

  return sysclockfreq;
 8004370:	69bb      	ldr	r3, [r7, #24]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3724      	adds	r7, #36	@ 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	58024400 	.word	0x58024400
 8004384:	03d09000 	.word	0x03d09000
 8004388:	003d0900 	.word	0x003d0900
 800438c:	02dc6c00 	.word	0x02dc6c00
 8004390:	46000000 	.word	0x46000000
 8004394:	4c742400 	.word	0x4c742400
 8004398:	4a742400 	.word	0x4a742400
 800439c:	4c371b00 	.word	0x4c371b00

080043a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043a6:	f7ff fe81 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 80043aa:	4602      	mov	r2, r0
 80043ac:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	0a1b      	lsrs	r3, r3, #8
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	490f      	ldr	r1, [pc, #60]	@ (80043f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80043b8:	5ccb      	ldrb	r3, [r1, r3]
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043c4:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80043ce:	5cd3      	ldrb	r3, [r2, r3]
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	fa22 f303 	lsr.w	r3, r2, r3
 80043da:	4a07      	ldr	r2, [pc, #28]	@ (80043f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80043dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043de:	4a07      	ldr	r2, [pc, #28]	@ (80043fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80043e4:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	58024400 	.word	0x58024400
 80043f4:	080108c4 	.word	0x080108c4
 80043f8:	24000004 	.word	0x24000004
 80043fc:	24000000 	.word	0x24000000

08004400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004404:	f7ff ffcc 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4904      	ldr	r1, [pc, #16]	@ (8004428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	58024400 	.word	0x58024400
 8004428:	080108c4 	.word	0x080108c4

0800442c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004430:	f7ff ffb6 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4904      	ldr	r1, [pc, #16]	@ (8004454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	58024400 	.word	0x58024400
 8004454:	080108c4 	.word	0x080108c4

08004458 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800445c:	b0c6      	sub	sp, #280	@ 0x118
 800445e:	af00      	add	r7, sp, #0
 8004460:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800446a:	2300      	movs	r3, #0
 800446c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800447c:	2500      	movs	r5, #0
 800447e:	ea54 0305 	orrs.w	r3, r4, r5
 8004482:	d049      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800448a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800448e:	d02f      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004490:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004494:	d828      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004496:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800449a:	d01a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800449c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044a0:	d822      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044aa:	d007      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044ac:	e01c      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ae:	4bab      	ldr	r3, [pc, #684]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	4aaa      	ldr	r2, [pc, #680]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044ba:	e01a      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c0:	3308      	adds	r3, #8
 80044c2:	2102      	movs	r1, #2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f002 fa49 	bl	800695c <RCCEx_PLL2_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044d0:	e00f      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d6:	3328      	adds	r3, #40	@ 0x28
 80044d8:	2102      	movs	r1, #2
 80044da:	4618      	mov	r0, r3
 80044dc:	f002 faf0 	bl	8006ac0 <RCCEx_PLL3_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044e6:	e004      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044ee:	e000      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80044f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044fa:	4b98      	ldr	r3, [pc, #608]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004508:	4a94      	ldr	r2, [pc, #592]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800450a:	430b      	orrs	r3, r1
 800450c:	6513      	str	r3, [r2, #80]	@ 0x50
 800450e:	e003      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004524:	f04f 0900 	mov.w	r9, #0
 8004528:	ea58 0309 	orrs.w	r3, r8, r9
 800452c:	d047      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800452e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004534:	2b04      	cmp	r3, #4
 8004536:	d82a      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004538:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004555 	.word	0x08004555
 8004544:	08004563 	.word	0x08004563
 8004548:	08004579 	.word	0x08004579
 800454c:	08004597 	.word	0x08004597
 8004550:	08004597 	.word	0x08004597
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004554:	4b81      	ldr	r3, [pc, #516]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	4a80      	ldr	r2, [pc, #512]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800455a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800455e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004560:	e01a      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004566:	3308      	adds	r3, #8
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f002 f9f6 	bl	800695c <RCCEx_PLL2_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004576:	e00f      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800457c:	3328      	adds	r3, #40	@ 0x28
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f002 fa9d 	bl	8006ac0 <RCCEx_PLL3_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800458c:	e004      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a0:	4b6e      	ldr	r3, [pc, #440]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a4:	f023 0107 	bic.w	r1, r3, #7
 80045a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ae:	4a6b      	ldr	r2, [pc, #428]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80045b4:	e003      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80045be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80045ca:	f04f 0b00 	mov.w	fp, #0
 80045ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80045d2:	d05b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80045d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045dc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80045e0:	d03b      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80045e2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80045e6:	d834      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80045e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045ec:	d037      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80045ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045f2:	d82e      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80045f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80045f8:	d033      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80045fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80045fe:	d828      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004604:	d01a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004606:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800460a:	d822      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004610:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004614:	d007      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004616:	e01c      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004618:	4b50      	ldr	r3, [pc, #320]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	4a4f      	ldr	r2, [pc, #316]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800461e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004624:	e01e      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800462a:	3308      	adds	r3, #8
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f002 f994 	bl	800695c <RCCEx_PLL2_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800463a:	e013      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800463c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004640:	3328      	adds	r3, #40	@ 0x28
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f002 fa3b 	bl	8006ac0 <RCCEx_PLL3_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004650:	e008      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004658:	e004      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800466c:	4b3b      	ldr	r3, [pc, #236]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800466e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004670:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004678:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800467c:	4a37      	ldr	r2, [pc, #220]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800467e:	430b      	orrs	r3, r1
 8004680:	6593      	str	r3, [r2, #88]	@ 0x58
 8004682:	e003      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004688:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800468c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80046a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80046a6:	460b      	mov	r3, r1
 80046a8:	4313      	orrs	r3, r2
 80046aa:	d05d      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80046ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80046b4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80046b8:	d03b      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80046ba:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80046be:	d834      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80046c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046c4:	d037      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80046c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046ca:	d82e      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80046cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046d0:	d033      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80046d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046d6:	d828      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80046d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046dc:	d01a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80046de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046e2:	d822      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80046e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046ec:	d007      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80046ee:	e01c      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f0:	4b1a      	ldr	r3, [pc, #104]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	4a19      	ldr	r2, [pc, #100]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046fc:	e01e      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004702:	3308      	adds	r3, #8
 8004704:	2100      	movs	r1, #0
 8004706:	4618      	mov	r0, r3
 8004708:	f002 f928 	bl	800695c <RCCEx_PLL2_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004712:	e013      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004718:	3328      	adds	r3, #40	@ 0x28
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f002 f9cf 	bl	8006ac0 <RCCEx_PLL3_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004728:	e008      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004730:	e004      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004732:	bf00      	nop
 8004734:	e002      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004736:	bf00      	nop
 8004738:	e000      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800473a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10d      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004744:	4b05      	ldr	r3, [pc, #20]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004750:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004754:	4a01      	ldr	r2, [pc, #4]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004756:	430b      	orrs	r3, r1
 8004758:	6593      	str	r3, [r2, #88]	@ 0x58
 800475a:	e005      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800475c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004764:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004774:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800477e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	d03a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800478c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478e:	2b30      	cmp	r3, #48	@ 0x30
 8004790:	d01f      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004792:	2b30      	cmp	r3, #48	@ 0x30
 8004794:	d819      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004796:	2b20      	cmp	r3, #32
 8004798:	d00c      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800479a:	2b20      	cmp	r3, #32
 800479c:	d815      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x372>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d019      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d111      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a6:	4baa      	ldr	r3, [pc, #680]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047aa:	4aa9      	ldr	r2, [pc, #676]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80047b2:	e011      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b8:	3308      	adds	r3, #8
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f002 f8cd 	bl	800695c <RCCEx_PLL2_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80047c8:	e006      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047d0:	e002      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80047d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80047e0:	4b9b      	ldr	r3, [pc, #620]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80047e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ee:	4a98      	ldr	r2, [pc, #608]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047f0:	430b      	orrs	r3, r1
 80047f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047f4:	e003      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800480a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004814:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004818:	460b      	mov	r3, r1
 800481a:	4313      	orrs	r3, r2
 800481c:	d051      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800481e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004828:	d035      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800482a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800482e:	d82e      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004830:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004834:	d031      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004836:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800483a:	d828      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800483c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004840:	d01a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004846:	d822      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800484c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004850:	d007      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004852:	e01c      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004854:	4b7e      	ldr	r3, [pc, #504]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004858:	4a7d      	ldr	r2, [pc, #500]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800485a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800485e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004860:	e01c      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004866:	3308      	adds	r3, #8
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f002 f876 	bl	800695c <RCCEx_PLL2_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004876:	e011      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800487c:	3328      	adds	r3, #40	@ 0x28
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f002 f91d 	bl	8006ac0 <RCCEx_PLL3_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800488c:	e006      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004894:	e002      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004896:	bf00      	nop
 8004898:	e000      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800489a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80048a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80048ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b2:	4a67      	ldr	r2, [pc, #412]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80048c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80048ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048d2:	2300      	movs	r3, #0
 80048d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048d8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80048dc:	460b      	mov	r3, r1
 80048de:	4313      	orrs	r3, r2
 80048e0:	d053      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80048e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048ec:	d033      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80048ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048f2:	d82c      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80048f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048f8:	d02f      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80048fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048fe:	d826      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004900:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004904:	d02b      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004906:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800490a:	d820      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800490c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004910:	d012      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004912:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004916:	d81a      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d022      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d115      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004926:	3308      	adds	r3, #8
 8004928:	2101      	movs	r1, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f002 f816 	bl	800695c <RCCEx_PLL2_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004936:	e015      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800493c:	3328      	adds	r3, #40	@ 0x28
 800493e:	2101      	movs	r1, #1
 8004940:	4618      	mov	r0, r3
 8004942:	f002 f8bd 	bl	8006ac0 <RCCEx_PLL3_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800494c:	e00a      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004954:	e006      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004956:	bf00      	nop
 8004958:	e004      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800495a:	bf00      	nop
 800495c:	e002      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800496c:	4b38      	ldr	r3, [pc, #224]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800496e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004970:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800497a:	4a35      	ldr	r2, [pc, #212]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800497c:	430b      	orrs	r3, r1
 800497e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004980:	e003      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800499a:	2300      	movs	r3, #0
 800499c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80049a0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049a4:	460b      	mov	r3, r1
 80049a6:	4313      	orrs	r3, r2
 80049a8:	d058      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80049aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049b6:	d033      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80049b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049bc:	d82c      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80049be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c2:	d02f      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c8:	d826      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80049ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049ce:	d02b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80049d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049d4:	d820      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80049d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049da:	d012      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049e0:	d81a      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d022      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80049e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ea:	d115      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f0:	3308      	adds	r3, #8
 80049f2:	2101      	movs	r1, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 ffb1 	bl	800695c <RCCEx_PLL2_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a00:	e015      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a06:	3328      	adds	r3, #40	@ 0x28
 8004a08:	2101      	movs	r1, #1
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f002 f858 	bl	8006ac0 <RCCEx_PLL3_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a16:	e00a      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a1e:	e006      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004a20:	bf00      	nop
 8004a22:	e004      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004a24:	bf00      	nop
 8004a26:	e002      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004a28:	bf00      	nop
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10e      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a36:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a46:	4a02      	ldr	r2, [pc, #8]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a4c:	e006      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004a4e:	bf00      	nop
 8004a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004a68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004a72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	d037      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a86:	d00e      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a8c:	d816      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d018      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004a92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a96:	d111      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a98:	4bc4      	ldr	r3, [pc, #784]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	4ac3      	ldr	r2, [pc, #780]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004aa4:	e00f      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aaa:	3308      	adds	r3, #8
 8004aac:	2101      	movs	r1, #1
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 ff54 	bl	800695c <RCCEx_PLL2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004aba:	e004      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ace:	4bb7      	ldr	r3, [pc, #732]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004adc:	4ab3      	ldr	r2, [pc, #716]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ae2:	e003      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ae8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004af8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b06:	460b      	mov	r3, r1
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	d039      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d81c      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004b16:	a201      	add	r2, pc, #4	@ (adr r2, 8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b59 	.word	0x08004b59
 8004b20:	08004b2d 	.word	0x08004b2d
 8004b24:	08004b3b 	.word	0x08004b3b
 8004b28:	08004b59 	.word	0x08004b59
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2c:	4b9f      	ldr	r3, [pc, #636]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	4a9e      	ldr	r2, [pc, #632]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004b38:	e00f      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3e:	3308      	adds	r3, #8
 8004b40:	2102      	movs	r1, #2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 ff0a 	bl	800695c <RCCEx_PLL2_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004b4e:	e004      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b56:	e000      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b62:	4b92      	ldr	r3, [pc, #584]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b66:	f023 0103 	bic.w	r1, r3, #3
 8004b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b70:	4a8e      	ldr	r2, [pc, #568]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b72:	430b      	orrs	r3, r1
 8004b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b76:	e003      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b96:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f000 8099 	beq.w	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba2:	4b83      	ldr	r3, [pc, #524]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a82      	ldr	r2, [pc, #520]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bae:	f7fd fa89 	bl	80020c4 <HAL_GetTick>
 8004bb2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bb6:	e00b      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb8:	f7fd fa84 	bl	80020c4 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b64      	cmp	r3, #100	@ 0x64
 8004bc6:	d903      	bls.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bce:	e005      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bd0:	4b77      	ldr	r3, [pc, #476]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ed      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d173      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004be4:	4b71      	ldr	r3, [pc, #452]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004be6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bf0:	4053      	eors	r3, r2
 8004bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d015      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bfa:	4b6c      	ldr	r3, [pc, #432]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c06:	4b69      	ldr	r3, [pc, #420]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0a:	4a68      	ldr	r2, [pc, #416]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c10:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c12:	4b66      	ldr	r3, [pc, #408]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c16:	4a65      	ldr	r2, [pc, #404]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c1c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c1e:	4a63      	ldr	r2, [pc, #396]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c24:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c32:	d118      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd fa46 	bl	80020c4 <HAL_GetTick>
 8004c38:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c3c:	e00d      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fd fa41 	bl	80020c4 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c48:	1ad2      	subs	r2, r2, r3
 8004c4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d903      	bls.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004c58:	e005      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c5a:	4b54      	ldr	r3, [pc, #336]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0eb      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004c66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d129      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c7e:	d10e      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004c80:	4b4a      	ldr	r3, [pc, #296]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c90:	091a      	lsrs	r2, r3, #4
 8004c92:	4b48      	ldr	r3, [pc, #288]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	4a45      	ldr	r2, [pc, #276]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6113      	str	r3, [r2, #16]
 8004c9c:	e005      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004c9e:	4b43      	ldr	r3, [pc, #268]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	4a42      	ldr	r2, [pc, #264]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ca4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ca8:	6113      	str	r3, [r2, #16]
 8004caa:	4b40      	ldr	r3, [pc, #256]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cac:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cba:	4a3c      	ldr	r2, [pc, #240]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004cca:	e003      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f002 0301 	and.w	r3, r2, #1
 8004ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004cea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f000 808f 	beq.w	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cfc:	2b28      	cmp	r3, #40	@ 0x28
 8004cfe:	d871      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004d00:	a201      	add	r2, pc, #4	@ (adr r2, 8004d08 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d06:	bf00      	nop
 8004d08:	08004ded 	.word	0x08004ded
 8004d0c:	08004de5 	.word	0x08004de5
 8004d10:	08004de5 	.word	0x08004de5
 8004d14:	08004de5 	.word	0x08004de5
 8004d18:	08004de5 	.word	0x08004de5
 8004d1c:	08004de5 	.word	0x08004de5
 8004d20:	08004de5 	.word	0x08004de5
 8004d24:	08004de5 	.word	0x08004de5
 8004d28:	08004db9 	.word	0x08004db9
 8004d2c:	08004de5 	.word	0x08004de5
 8004d30:	08004de5 	.word	0x08004de5
 8004d34:	08004de5 	.word	0x08004de5
 8004d38:	08004de5 	.word	0x08004de5
 8004d3c:	08004de5 	.word	0x08004de5
 8004d40:	08004de5 	.word	0x08004de5
 8004d44:	08004de5 	.word	0x08004de5
 8004d48:	08004dcf 	.word	0x08004dcf
 8004d4c:	08004de5 	.word	0x08004de5
 8004d50:	08004de5 	.word	0x08004de5
 8004d54:	08004de5 	.word	0x08004de5
 8004d58:	08004de5 	.word	0x08004de5
 8004d5c:	08004de5 	.word	0x08004de5
 8004d60:	08004de5 	.word	0x08004de5
 8004d64:	08004de5 	.word	0x08004de5
 8004d68:	08004ded 	.word	0x08004ded
 8004d6c:	08004de5 	.word	0x08004de5
 8004d70:	08004de5 	.word	0x08004de5
 8004d74:	08004de5 	.word	0x08004de5
 8004d78:	08004de5 	.word	0x08004de5
 8004d7c:	08004de5 	.word	0x08004de5
 8004d80:	08004de5 	.word	0x08004de5
 8004d84:	08004de5 	.word	0x08004de5
 8004d88:	08004ded 	.word	0x08004ded
 8004d8c:	08004de5 	.word	0x08004de5
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004de5 	.word	0x08004de5
 8004d98:	08004de5 	.word	0x08004de5
 8004d9c:	08004de5 	.word	0x08004de5
 8004da0:	08004de5 	.word	0x08004de5
 8004da4:	08004de5 	.word	0x08004de5
 8004da8:	08004ded 	.word	0x08004ded
 8004dac:	58024400 	.word	0x58024400
 8004db0:	58024800 	.word	0x58024800
 8004db4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f001 fdcb 	bl	800695c <RCCEx_PLL2_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004dcc:	e00f      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd2:	3328      	adds	r3, #40	@ 0x28
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 fe72 	bl	8006ac0 <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004de2:	e004      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004df6:	4bbf      	ldr	r3, [pc, #764]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e04:	4abb      	ldr	r2, [pc, #748]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e06:	430b      	orrs	r3, r1
 8004e08:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e0a:	e003      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f002 0302 	and.w	r3, r2, #2
 8004e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e24:	2300      	movs	r3, #0
 8004e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4313      	orrs	r3, r2
 8004e32:	d041      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3a:	2b05      	cmp	r3, #5
 8004e3c:	d824      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e44 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e91 	.word	0x08004e91
 8004e48:	08004e5d 	.word	0x08004e5d
 8004e4c:	08004e73 	.word	0x08004e73
 8004e50:	08004e91 	.word	0x08004e91
 8004e54:	08004e91 	.word	0x08004e91
 8004e58:	08004e91 	.word	0x08004e91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e60:	3308      	adds	r3, #8
 8004e62:	2101      	movs	r1, #1
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 fd79 	bl	800695c <RCCEx_PLL2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e70:	e00f      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e76:	3328      	adds	r3, #40	@ 0x28
 8004e78:	2101      	movs	r1, #1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f001 fe20 	bl	8006ac0 <RCCEx_PLL3_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e86:	e004      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e8e:	e000      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e9a:	4b96      	ldr	r3, [pc, #600]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	f023 0107 	bic.w	r1, r3, #7
 8004ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea8:	4a92      	ldr	r2, [pc, #584]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	6553      	str	r3, [r2, #84]	@ 0x54
 8004eae:	e003      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f002 0304 	and.w	r3, r2, #4
 8004ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ece:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	d044      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee0:	2b05      	cmp	r3, #5
 8004ee2:	d825      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8004eec <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f39 	.word	0x08004f39
 8004ef0:	08004f05 	.word	0x08004f05
 8004ef4:	08004f1b 	.word	0x08004f1b
 8004ef8:	08004f39 	.word	0x08004f39
 8004efc:	08004f39 	.word	0x08004f39
 8004f00:	08004f39 	.word	0x08004f39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f08:	3308      	adds	r3, #8
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 fd25 	bl	800695c <RCCEx_PLL2_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f18:	e00f      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1e:	3328      	adds	r3, #40	@ 0x28
 8004f20:	2101      	movs	r1, #1
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 fdcc 	bl	8006ac0 <RCCEx_PLL3_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f2e:	e004      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f42:	4b6c      	ldr	r3, [pc, #432]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f46:	f023 0107 	bic.w	r1, r3, #7
 8004f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f52:	4a68      	ldr	r2, [pc, #416]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f58:	e003      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f002 0320 	and.w	r3, r2, #32
 8004f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f72:	2300      	movs	r3, #0
 8004f74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	d055      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f8e:	d033      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f94:	d82c      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9a:	d02f      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa0:	d826      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004fa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004fa6:	d02b      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004fa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004fac:	d820      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fb2:	d012      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fb8:	d81a      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d022      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fc2:	d115      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc8:	3308      	adds	r3, #8
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 fcc5 	bl	800695c <RCCEx_PLL2_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004fd8:	e015      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fde:	3328      	adds	r3, #40	@ 0x28
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 fd6c 	bl	8006ac0 <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004fee:	e00a      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ff6:	e006      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004ff8:	bf00      	nop
 8004ffa:	e004      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004ffc:	bf00      	nop
 8004ffe:	e002      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005000:	bf00      	nop
 8005002:	e000      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005006:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800500e:	4b39      	ldr	r3, [pc, #228]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005012:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800501e:	4a35      	ldr	r2, [pc, #212]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005020:	430b      	orrs	r3, r1
 8005022:	6553      	str	r3, [r2, #84]	@ 0x54
 8005024:	e003      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005026:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800502a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800502e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800503a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800503e:	2300      	movs	r3, #0
 8005040:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005044:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005048:	460b      	mov	r3, r1
 800504a:	4313      	orrs	r3, r2
 800504c:	d058      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800504e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005052:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005056:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800505a:	d033      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800505c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005060:	d82c      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005066:	d02f      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506c:	d826      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800506e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005072:	d02b      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005074:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005078:	d820      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800507a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800507e:	d012      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005084:	d81a      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d022      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800508a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508e:	d115      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005094:	3308      	adds	r3, #8
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f001 fc5f 	bl	800695c <RCCEx_PLL2_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80050a4:	e015      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050aa:	3328      	adds	r3, #40	@ 0x28
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 fd06 	bl	8006ac0 <RCCEx_PLL3_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80050ba:	e00a      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050c2:	e006      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80050c4:	bf00      	nop
 80050c6:	e004      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80050d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10e      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050da:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050de:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050ea:	4a02      	ldr	r2, [pc, #8]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050ec:	430b      	orrs	r3, r1
 80050ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80050f0:	e006      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80050f2:	bf00      	nop
 80050f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800510c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005110:	2300      	movs	r3, #0
 8005112:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005116:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800511a:	460b      	mov	r3, r1
 800511c:	4313      	orrs	r3, r2
 800511e:	d055      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005124:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005128:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800512c:	d033      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800512e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005132:	d82c      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005138:	d02f      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800513a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800513e:	d826      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005140:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005144:	d02b      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005146:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800514a:	d820      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800514c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005150:	d012      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005152:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005156:	d81a      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d022      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800515c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005160:	d115      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005166:	3308      	adds	r3, #8
 8005168:	2100      	movs	r1, #0
 800516a:	4618      	mov	r0, r3
 800516c:	f001 fbf6 	bl	800695c <RCCEx_PLL2_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005176:	e015      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800517c:	3328      	adds	r3, #40	@ 0x28
 800517e:	2102      	movs	r1, #2
 8005180:	4618      	mov	r0, r3
 8005182:	f001 fc9d 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800518c:	e00a      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005196:	bf00      	nop
 8005198:	e004      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800519a:	bf00      	nop
 800519c:	e002      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80051a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10b      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80051ac:	4ba0      	ldr	r3, [pc, #640]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80051b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051bc:	4a9c      	ldr	r2, [pc, #624]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051be:	430b      	orrs	r3, r1
 80051c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80051c2:	e003      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f002 0308 	and.w	r3, r2, #8
 80051d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051e2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80051e6:	460b      	mov	r3, r1
 80051e8:	4313      	orrs	r3, r2
 80051ea:	d01e      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80051ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f8:	d10c      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fe:	3328      	adds	r3, #40	@ 0x28
 8005200:	2102      	movs	r1, #2
 8005202:	4618      	mov	r0, r3
 8005204:	f001 fc5c 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005214:	4b86      	ldr	r3, [pc, #536]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005218:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800521c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005224:	4a82      	ldr	r2, [pc, #520]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005226:	430b      	orrs	r3, r1
 8005228:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800522a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f002 0310 	and.w	r3, r2, #16
 8005236:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800523a:	2300      	movs	r3, #0
 800523c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005240:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005244:	460b      	mov	r3, r1
 8005246:	4313      	orrs	r3, r2
 8005248:	d01e      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800524a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005256:	d10c      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800525c:	3328      	adds	r3, #40	@ 0x28
 800525e:	2102      	movs	r1, #2
 8005260:	4618      	mov	r0, r3
 8005262:	f001 fc2d 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005272:	4b6f      	ldr	r3, [pc, #444]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005276:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800527a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005282:	4a6b      	ldr	r2, [pc, #428]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005284:	430b      	orrs	r3, r1
 8005286:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005294:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005296:	2300      	movs	r3, #0
 8005298:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800529a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800529e:	460b      	mov	r3, r1
 80052a0:	4313      	orrs	r3, r2
 80052a2:	d03e      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b0:	d022      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80052b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b6:	d81b      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80052bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c0:	d00b      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80052c2:	e015      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c8:	3308      	adds	r3, #8
 80052ca:	2100      	movs	r1, #0
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 fb45 	bl	800695c <RCCEx_PLL2_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80052d8:	e00f      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052de:	3328      	adds	r3, #40	@ 0x28
 80052e0:	2102      	movs	r1, #2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f001 fbec 	bl	8006ac0 <RCCEx_PLL3_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80052ee:	e004      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052f6:	e000      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80052f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10b      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005302:	4b4b      	ldr	r3, [pc, #300]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005306:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005312:	4a47      	ldr	r2, [pc, #284]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005314:	430b      	orrs	r3, r1
 8005316:	6593      	str	r3, [r2, #88]	@ 0x58
 8005318:	e003      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800531e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800532e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005330:	2300      	movs	r3, #0
 8005332:	677b      	str	r3, [r7, #116]	@ 0x74
 8005334:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005338:	460b      	mov	r3, r1
 800533a:	4313      	orrs	r3, r2
 800533c:	d03b      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005346:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800534a:	d01f      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800534c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005350:	d818      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005356:	d003      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005358:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800535c:	d007      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800535e:	e011      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005360:	4b33      	ldr	r3, [pc, #204]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	4a32      	ldr	r2, [pc, #200]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800536a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800536c:	e00f      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800536e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005372:	3328      	adds	r3, #40	@ 0x28
 8005374:	2101      	movs	r1, #1
 8005376:	4618      	mov	r0, r3
 8005378:	f001 fba2 	bl	8006ac0 <RCCEx_PLL3_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005382:	e004      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800538a:	e000      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800538c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10b      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005396:	4b26      	ldr	r3, [pc, #152]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800539e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a6:	4a22      	ldr	r2, [pc, #136]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80053ac:	e003      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80053c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053c4:	2300      	movs	r3, #0
 80053c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053c8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80053cc:	460b      	mov	r3, r1
 80053ce:	4313      	orrs	r3, r2
 80053d0:	d034      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80053d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80053dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e0:	d007      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80053e2:	e011      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e4:	4b12      	ldr	r3, [pc, #72]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e8:	4a11      	ldr	r2, [pc, #68]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80053f0:	e00e      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f6:	3308      	adds	r3, #8
 80053f8:	2102      	movs	r1, #2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 faae 	bl	800695c <RCCEx_PLL2_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005406:	e003      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800540e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10d      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005418:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800541a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800541c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005426:	4a02      	ldr	r2, [pc, #8]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005428:	430b      	orrs	r3, r1
 800542a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800542c:	e006      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800542e:	bf00      	nop
 8005430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005438:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800543c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005448:	663b      	str	r3, [r7, #96]	@ 0x60
 800544a:	2300      	movs	r3, #0
 800544c:	667b      	str	r3, [r7, #100]	@ 0x64
 800544e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005452:	460b      	mov	r3, r1
 8005454:	4313      	orrs	r3, r2
 8005456:	d00c      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545c:	3328      	adds	r3, #40	@ 0x28
 800545e:	2102      	movs	r1, #2
 8005460:	4618      	mov	r0, r3
 8005462:	f001 fb2d 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800547e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005480:	2300      	movs	r3, #0
 8005482:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005484:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005488:	460b      	mov	r3, r1
 800548a:	4313      	orrs	r3, r2
 800548c:	d036      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800548e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005492:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005494:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005498:	d018      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800549a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549e:	d811      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80054a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054a4:	d014      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80054a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054aa:	d80b      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d011      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80054b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b4:	d106      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b6:	4bb7      	ldr	r3, [pc, #732]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	4ab6      	ldr	r2, [pc, #728]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80054c2:	e008      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054ca:	e004      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80054cc:	bf00      	nop
 80054ce:	e002      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80054d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054de:	4bad      	ldr	r3, [pc, #692]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054ec:	4aa9      	ldr	r2, [pc, #676]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054ee:	430b      	orrs	r3, r1
 80054f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80054f2:	e003      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005508:	653b      	str	r3, [r7, #80]	@ 0x50
 800550a:	2300      	movs	r3, #0
 800550c:	657b      	str	r3, [r7, #84]	@ 0x54
 800550e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005512:	460b      	mov	r3, r1
 8005514:	4313      	orrs	r3, r2
 8005516:	d009      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005518:	4b9e      	ldr	r3, [pc, #632]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800551a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800551c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005526:	4a9b      	ldr	r2, [pc, #620]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005528:	430b      	orrs	r3, r1
 800552a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800553a:	2300      	movs	r3, #0
 800553c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800553e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005542:	460b      	mov	r3, r1
 8005544:	4313      	orrs	r3, r2
 8005546:	d009      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005548:	4b92      	ldr	r3, [pc, #584]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800554a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800554c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005554:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005556:	4a8f      	ldr	r2, [pc, #572]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005558:	430b      	orrs	r3, r1
 800555a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800555c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005568:	643b      	str	r3, [r7, #64]	@ 0x40
 800556a:	2300      	movs	r3, #0
 800556c:	647b      	str	r3, [r7, #68]	@ 0x44
 800556e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005572:	460b      	mov	r3, r1
 8005574:	4313      	orrs	r3, r2
 8005576:	d00e      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005578:	4b86      	ldr	r3, [pc, #536]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	4a85      	ldr	r2, [pc, #532]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800557e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005582:	6113      	str	r3, [r2, #16]
 8005584:	4b83      	ldr	r3, [pc, #524]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005586:	6919      	ldr	r1, [r3, #16]
 8005588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005590:	4a80      	ldr	r2, [pc, #512]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005592:	430b      	orrs	r3, r1
 8005594:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80055a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055a4:	2300      	movs	r3, #0
 80055a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055a8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80055ac:	460b      	mov	r3, r1
 80055ae:	4313      	orrs	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80055b2:	4b78      	ldr	r3, [pc, #480]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80055ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c0:	4a74      	ldr	r2, [pc, #464]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055c2:	430b      	orrs	r3, r1
 80055c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80055d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d4:	2300      	movs	r3, #0
 80055d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d00a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055e2:	4b6c      	ldr	r3, [pc, #432]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80055ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f2:	4a68      	ldr	r2, [pc, #416]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80055f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	2100      	movs	r1, #0
 8005602:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800560a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800560e:	460b      	mov	r3, r1
 8005610:	4313      	orrs	r3, r2
 8005612:	d011      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005618:	3308      	adds	r3, #8
 800561a:	2100      	movs	r1, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f001 f99d 	bl	800695c <RCCEx_PLL2_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005634:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	2100      	movs	r1, #0
 8005642:	6239      	str	r1, [r7, #32]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	627b      	str	r3, [r7, #36]	@ 0x24
 800564a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d011      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005658:	3308      	adds	r3, #8
 800565a:	2101      	movs	r1, #1
 800565c:	4618      	mov	r0, r3
 800565e:	f001 f97d 	bl	800695c <RCCEx_PLL2_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005674:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	2100      	movs	r1, #0
 8005682:	61b9      	str	r1, [r7, #24]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800568e:	460b      	mov	r3, r1
 8005690:	4313      	orrs	r3, r2
 8005692:	d011      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005698:	3308      	adds	r3, #8
 800569a:	2102      	movs	r1, #2
 800569c:	4618      	mov	r0, r3
 800569e:	f001 f95d 	bl	800695c <RCCEx_PLL2_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80056a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80056b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	2100      	movs	r1, #0
 80056c2:	6139      	str	r1, [r7, #16]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80056ce:	460b      	mov	r3, r1
 80056d0:	4313      	orrs	r3, r2
 80056d2:	d011      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d8:	3328      	adds	r3, #40	@ 0x28
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 f9ef 	bl	8006ac0 <RCCEx_PLL3_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80056e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80056f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	2100      	movs	r1, #0
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800570e:	460b      	mov	r3, r1
 8005710:	4313      	orrs	r3, r2
 8005712:	d011      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005718:	3328      	adds	r3, #40	@ 0x28
 800571a:	2101      	movs	r1, #1
 800571c:	4618      	mov	r0, r3
 800571e:	f001 f9cf 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005734:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	2100      	movs	r1, #0
 8005742:	6039      	str	r1, [r7, #0]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	607b      	str	r3, [r7, #4]
 800574a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800574e:	460b      	mov	r3, r1
 8005750:	4313      	orrs	r3, r2
 8005752:	d011      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005758:	3328      	adds	r3, #40	@ 0x28
 800575a:	2102      	movs	r1, #2
 800575c:	4618      	mov	r0, r3
 800575e:	f001 f9af 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005774:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005778:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
}
 8005786:	4618      	mov	r0, r3
 8005788:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800578c:	46bd      	mov	sp, r7
 800578e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005792:	bf00      	nop
 8005794:	58024400 	.word	0x58024400

08005798 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b090      	sub	sp, #64	@ 0x40
 800579c:	af00      	add	r7, sp, #0
 800579e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80057a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80057aa:	430b      	orrs	r3, r1
 80057ac:	f040 8094 	bne.w	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80057b0:	4b9b      	ldr	r3, [pc, #620]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80057ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057bc:	2b04      	cmp	r3, #4
 80057be:	f200 8087 	bhi.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057dd 	.word	0x080057dd
 80057cc:	08005805 	.word	0x08005805
 80057d0:	0800582d 	.word	0x0800582d
 80057d4:	080058c9 	.word	0x080058c9
 80057d8:	08005855 	.word	0x08005855
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057dc:	4b90      	ldr	r3, [pc, #576]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057e8:	d108      	bne.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 ff62 	bl	80066b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057f8:	f000 bc93 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005800:	f000 bc8f 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005804:	4b86      	ldr	r3, [pc, #536]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800580c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005810:	d108      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005812:	f107 0318 	add.w	r3, r7, #24
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fca6 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005820:	f000 bc7f 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005828:	f000 bc7b 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800582c:	4b7c      	ldr	r3, [pc, #496]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005838:	d108      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800583a:	f107 030c 	add.w	r3, r7, #12
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fde6 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005848:	f000 bc6b 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005850:	f000 bc67 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005854:	4b72      	ldr	r3, [pc, #456]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005858:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800585e:	4b70      	ldr	r3, [pc, #448]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b04      	cmp	r3, #4
 8005868:	d10c      	bne.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800586a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005870:	4b6b      	ldr	r3, [pc, #428]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	08db      	lsrs	r3, r3, #3
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	4a6a      	ldr	r2, [pc, #424]	@ (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005882:	e01f      	b.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005884:	4b66      	ldr	r3, [pc, #408]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005890:	d106      	bne.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005898:	d102      	bne.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800589a:	4b63      	ldr	r3, [pc, #396]	@ (8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800589c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800589e:	e011      	b.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058a0:	4b5f      	ldr	r3, [pc, #380]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058ac:	d106      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80058ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058b4:	d102      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80058b6:	4b5d      	ldr	r3, [pc, #372]	@ (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058ba:	e003      	b.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80058c0:	f000 bc2f 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80058c4:	f000 bc2d 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80058c8:	4b59      	ldr	r3, [pc, #356]	@ (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058cc:	f000 bc29 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d4:	f000 bc25 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80058d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058dc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80058e0:	430b      	orrs	r3, r1
 80058e2:	f040 80a7 	bne.w	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80058e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ea:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80058ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058f6:	d054      	beq.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058fe:	f200 808b 	bhi.w	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005908:	f000 8083 	beq.w	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005912:	f200 8081 	bhi.w	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800591c:	d02f      	beq.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005924:	d878      	bhi.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800592c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005932:	d012      	beq.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8005934:	e070      	b.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005936:	4b3a      	ldr	r3, [pc, #232]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800593e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005942:	d107      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005948:	4618      	mov	r0, r3
 800594a:	f000 feb5 	bl	80066b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005952:	e3e6      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005958:	e3e3      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800595a:	4b31      	ldr	r3, [pc, #196]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005962:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005966:	d107      	bne.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005968:	f107 0318 	add.w	r3, r7, #24
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fbfb 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005976:	e3d4      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800597c:	e3d1      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800597e:	4b28      	ldr	r3, [pc, #160]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800598a:	d107      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800598c:	f107 030c 	add.w	r3, r7, #12
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fd3d 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800599a:	e3c2      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a0:	e3bf      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80059a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d10c      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80059b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059be:	4b18      	ldr	r3, [pc, #96]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	08db      	lsrs	r3, r3, #3
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	4a16      	ldr	r2, [pc, #88]	@ (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80059ca:	fa22 f303 	lsr.w	r3, r2, r3
 80059ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d0:	e01e      	b.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059d2:	4b13      	ldr	r3, [pc, #76]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059de:	d106      	bne.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80059e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059e6:	d102      	bne.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80059ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059ec:	e010      	b.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059fa:	d106      	bne.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80059fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a02:	d102      	bne.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a04:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a08:	e002      	b.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005a0e:	e388      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a10:	e387      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a12:	4b07      	ldr	r3, [pc, #28]	@ (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a16:	e384      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a1c:	e381      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
 8005a24:	03d09000 	.word	0x03d09000
 8005a28:	003d0900 	.word	0x003d0900
 8005a2c:	02dc6c00 	.word	0x02dc6c00
 8005a30:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a38:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	f040 809c 	bne.w	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005a42:	4b9e      	ldr	r3, [pc, #632]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a46:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005a4a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a52:	d054      	beq.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a5a:	f200 808b 	bhi.w	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a64:	f000 8083 	beq.w	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a6e:	f200 8081 	bhi.w	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a78:	d02f      	beq.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a80:	d878      	bhi.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a8e:	d012      	beq.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005a90:	e070      	b.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a92:	4b8a      	ldr	r3, [pc, #552]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a9e:	d107      	bne.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fe07 	bl	80066b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aae:	e338      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab4:	e335      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ab6:	4b81      	ldr	r3, [pc, #516]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005abe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ac2:	d107      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ac4:	f107 0318 	add.w	r3, r7, #24
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fb4d 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ad2:	e326      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad8:	e323      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ada:	4b78      	ldr	r3, [pc, #480]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ae6:	d107      	bne.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ae8:	f107 030c 	add.w	r3, r7, #12
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fc8f 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005af6:	e314      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005afc:	e311      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005afe:	4b6f      	ldr	r3, [pc, #444]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b06:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b08:	4b6c      	ldr	r3, [pc, #432]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d10c      	bne.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b1a:	4b68      	ldr	r3, [pc, #416]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	08db      	lsrs	r3, r3, #3
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	4a66      	ldr	r2, [pc, #408]	@ (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005b26:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b2c:	e01e      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b2e:	4b63      	ldr	r3, [pc, #396]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b3a:	d106      	bne.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b42:	d102      	bne.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b44:	4b5f      	ldr	r3, [pc, #380]	@ (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b48:	e010      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b56:	d106      	bne.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8005b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b5e:	d102      	bne.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b60:	4b59      	ldr	r3, [pc, #356]	@ (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b64:	e002      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b6a:	e2da      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005b6c:	e2d9      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b6e:	4b57      	ldr	r3, [pc, #348]	@ (8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b72:	e2d6      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b78:	e2d3      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b7e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005b82:	430b      	orrs	r3, r1
 8005b84:	f040 80a7 	bne.w	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005b88:	4b4c      	ldr	r3, [pc, #304]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b8c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005b90:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b98:	d055      	beq.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ba0:	f200 8096 	bhi.w	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005baa:	f000 8084 	beq.w	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bb4:	f200 808c 	bhi.w	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bbe:	d030      	beq.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc6:	f200 8083 	bhi.w	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd6:	d012      	beq.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005bd8:	e07a      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bda:	4b38      	ldr	r3, [pc, #224]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005be6:	d107      	bne.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fd63 	bl	80066b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bf6:	e294      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bfc:	e291      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c0a:	d107      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c0c:	f107 0318 	add.w	r3, r7, #24
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 faa9 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c1a:	e282      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c20:	e27f      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c22:	4b26      	ldr	r3, [pc, #152]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c2e:	d107      	bne.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c30:	f107 030c 	add.w	r3, r7, #12
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fbeb 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c3e:	e270      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c44:	e26d      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c46:	4b1d      	ldr	r3, [pc, #116]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c4e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c50:	4b1a      	ldr	r3, [pc, #104]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d10c      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d109      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c62:	4b16      	ldr	r3, [pc, #88]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	08db      	lsrs	r3, r3, #3
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	4a14      	ldr	r2, [pc, #80]	@ (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c74:	e01e      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c76:	4b11      	ldr	r3, [pc, #68]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c82:	d106      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c8a:	d102      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c90:	e010      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c92:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c9e:	d106      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ca6:	d102      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ca8:	4b07      	ldr	r3, [pc, #28]	@ (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cac:	e002      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005cb2:	e236      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005cb4:	e235      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005cb6:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cba:	e232      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005cbc:	58024400 	.word	0x58024400
 8005cc0:	03d09000 	.word	0x03d09000
 8005cc4:	003d0900 	.word	0x003d0900
 8005cc8:	02dc6c00 	.word	0x02dc6c00
 8005ccc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd4:	e225      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cda:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	f040 8085 	bne.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005ce4:	4b9c      	ldr	r3, [pc, #624]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005cec:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cf4:	d06b      	beq.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cfc:	d874      	bhi.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d04:	d056      	beq.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d0c:	d86c      	bhi.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d14:	d03b      	beq.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d1c:	d864      	bhi.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d24:	d021      	beq.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8005d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d2c:	d85c      	bhi.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8005d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d3a:	d004      	beq.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8005d3c:	e054      	b.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005d3e:	f7fe fb5f 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8005d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d44:	e1ed      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d46:	4b84      	ldr	r3, [pc, #528]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d52:	d107      	bne.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d54:	f107 0318 	add.w	r3, r7, #24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fa05 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d62:	e1de      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d68:	e1db      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d76:	d107      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d78:	f107 030c 	add.w	r3, r7, #12
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fb47 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d86:	e1cc      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d8c:	e1c9      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d8e:	4b72      	ldr	r3, [pc, #456]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d109      	bne.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d9a:	4b6f      	ldr	r3, [pc, #444]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	08db      	lsrs	r3, r3, #3
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	4a6d      	ldr	r2, [pc, #436]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dac:	e1b9      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005db2:	e1b6      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005db4:	4b68      	ldr	r3, [pc, #416]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc0:	d102      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8005dc2:	4b67      	ldr	r3, [pc, #412]	@ (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dc6:	e1ac      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dcc:	e1a9      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005dce:	4b62      	ldr	r3, [pc, #392]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dda:	d102      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8005ddc:	4b61      	ldr	r3, [pc, #388]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005de0:	e19f      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005de6:	e19c      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dec:	e199      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005df6:	430b      	orrs	r3, r1
 8005df8:	d173      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005dfa:	4b57      	ldr	r3, [pc, #348]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e02:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e0a:	d02f      	beq.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e12:	d863      	bhi.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8005e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e20:	d012      	beq.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8005e22:	e05b      	b.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e24:	4b4c      	ldr	r3, [pc, #304]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e30:	d107      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e32:	f107 0318 	add.w	r3, r7, #24
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f996 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e40:	e16f      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e46:	e16c      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e48:	4b43      	ldr	r3, [pc, #268]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e54:	d107      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e56:	f107 030c 	add.w	r3, r7, #12
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fad8 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e64:	e15d      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e6a:	e15a      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e74:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e76:	4b38      	ldr	r3, [pc, #224]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d10c      	bne.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e88:	4b33      	ldr	r3, [pc, #204]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	08db      	lsrs	r3, r3, #3
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	4a32      	ldr	r2, [pc, #200]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
 8005e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e9a:	e01e      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea8:	d106      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005eb0:	d102      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eb6:	e010      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005eb8:	4b27      	ldr	r3, [pc, #156]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec4:	d106      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ecc:	d102      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ece:	4b25      	ldr	r3, [pc, #148]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ed2:	e002      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005ed8:	e123      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005eda:	e122      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee0:	e11f      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005eea:	430b      	orrs	r3, r1
 8005eec:	d13c      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005eee:	4b1a      	ldr	r3, [pc, #104]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ef6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d004      	beq.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f04:	d012      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005f06:	e023      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f08:	4b13      	ldr	r3, [pc, #76]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f14:	d107      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fbcc 	bl	80066b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f24:	e0fd      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f2a:	e0fa      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f38:	d107      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3a:	f107 0318 	add.w	r3, r7, #24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 f912 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f48:	e0eb      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f4e:	e0e8      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f54:	e0e5      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005f56:	bf00      	nop
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	03d09000 	.word	0x03d09000
 8005f60:	003d0900 	.word	0x003d0900
 8005f64:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005f70:	430b      	orrs	r3, r1
 8005f72:	f040 8085 	bne.w	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005f76:	4b6d      	ldr	r3, [pc, #436]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f7a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005f7e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f86:	d06b      	beq.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f8e:	d874      	bhi.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f96:	d056      	beq.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9e:	d86c      	bhi.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fa6:	d03b      	beq.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fae:	d864      	bhi.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fb6:	d021      	beq.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fbe:	d85c      	bhi.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fcc:	d004      	beq.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005fce:	e054      	b.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005fd0:	f000 f8b4 	bl	800613c <HAL_RCCEx_GetD3PCLK1Freq>
 8005fd4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fd6:	e0a4      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fd8:	4b54      	ldr	r3, [pc, #336]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fe4:	d107      	bne.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fe6:	f107 0318 	add.w	r3, r7, #24
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 f8bc 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ff4:	e095      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ffa:	e092      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006008:	d107      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800600a:	f107 030c 	add.w	r3, r7, #12
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f9fe 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006018:	e083      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800601e:	e080      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006020:	4b42      	ldr	r3, [pc, #264]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b04      	cmp	r3, #4
 800602a:	d109      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800602c:	4b3f      	ldr	r3, [pc, #252]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	08db      	lsrs	r3, r3, #3
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	4a3e      	ldr	r2, [pc, #248]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
 800603c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800603e:	e070      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006044:	e06d      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006046:	4b39      	ldr	r3, [pc, #228]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006052:	d102      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006054:	4b37      	ldr	r3, [pc, #220]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006058:	e063      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800605e:	e060      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006060:	4b32      	ldr	r3, [pc, #200]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006068:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800606c:	d102      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800606e:	4b32      	ldr	r3, [pc, #200]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006072:	e056      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006078:	e053      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800607e:	e050      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006084:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006088:	430b      	orrs	r3, r1
 800608a:	d148      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800608c:	4b27      	ldr	r3, [pc, #156]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800608e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006090:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006094:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800609c:	d02a      	beq.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800609e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a4:	d838      	bhi.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80060a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060b2:	d00d      	beq.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80060b4:	e030      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060b6:	4b1d      	ldr	r3, [pc, #116]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060c2:	d102      	bne.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80060c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80060c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060c8:	e02b      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ce:	e028      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060d0:	4b16      	ldr	r3, [pc, #88]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060dc:	d107      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fae8 	bl	80066b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060ec:	e019      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060f2:	e016      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060f4:	4b0d      	ldr	r3, [pc, #52]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006100:	d107      	bne.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006102:	f107 0318 	add.w	r3, r7, #24
 8006106:	4618      	mov	r0, r3
 8006108:	f000 f82e 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006110:	e007      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006116:	e004      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800611c:	e001      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006124:	4618      	mov	r0, r3
 8006126:	3740      	adds	r7, #64	@ 0x40
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	58024400 	.word	0x58024400
 8006130:	03d09000 	.word	0x03d09000
 8006134:	003d0900 	.word	0x003d0900
 8006138:	02dc6c00 	.word	0x02dc6c00

0800613c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006140:	f7fe f92e 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 8006144:	4602      	mov	r2, r0
 8006146:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	091b      	lsrs	r3, r3, #4
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	4904      	ldr	r1, [pc, #16]	@ (8006164 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006152:	5ccb      	ldrb	r3, [r1, r3]
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800615c:	4618      	mov	r0, r3
 800615e:	bd80      	pop	{r7, pc}
 8006160:	58024400 	.word	0x58024400
 8006164:	080108c4 	.word	0x080108c4

08006168 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006168:	b480      	push	{r7}
 800616a:	b089      	sub	sp, #36	@ 0x24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006170:	4ba1      	ldr	r3, [pc, #644]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	f003 0303 	and.w	r3, r3, #3
 8006178:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800617a:	4b9f      	ldr	r3, [pc, #636]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800617c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617e:	0b1b      	lsrs	r3, r3, #12
 8006180:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006184:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006186:	4b9c      	ldr	r3, [pc, #624]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618a:	091b      	lsrs	r3, r3, #4
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006192:	4b99      	ldr	r3, [pc, #612]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006196:	08db      	lsrs	r3, r3, #3
 8006198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 8111 	beq.w	80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	f000 8083 	beq.w	80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	f200 80a1 	bhi.w	8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d056      	beq.n	8006280 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80061d2:	e099      	b.n	8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061d4:	4b88      	ldr	r3, [pc, #544]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d02d      	beq.n	800623c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061e0:	4b85      	ldr	r3, [pc, #532]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	08db      	lsrs	r3, r3, #3
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	4a84      	ldr	r2, [pc, #528]	@ (80063fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
 80061f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620a:	4b7b      	ldr	r3, [pc, #492]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800620c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621a:	ed97 6a03 	vldr	s12, [r7, #12]
 800621e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800622e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006236:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800623a:	e087      	b.n	800634c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006246:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800624a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624e:	4b6a      	ldr	r3, [pc, #424]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006262:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800627e:	e065      	b.n	800634c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800628e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006292:	4b59      	ldr	r3, [pc, #356]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062c2:	e043      	b.n	800634c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80062d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d6:	4b48      	ldr	r3, [pc, #288]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006306:	e021      	b.n	800634c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631a:	4b37      	ldr	r3, [pc, #220]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632a:	ed97 6a03 	vldr	s12, [r7, #12]
 800632e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800633e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800634a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800634c:	4b2a      	ldr	r3, [pc, #168]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800634e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006350:	0a5b      	lsrs	r3, r3, #9
 8006352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006362:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006366:	edd7 6a07 	vldr	s13, [r7, #28]
 800636a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800636e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006372:	ee17 2a90 	vmov	r2, s15
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800637a:	4b1f      	ldr	r3, [pc, #124]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800637c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637e:	0c1b      	lsrs	r3, r3, #16
 8006380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006384:	ee07 3a90 	vmov	s15, r3
 8006388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006390:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006394:	edd7 6a07 	vldr	s13, [r7, #28]
 8006398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800639c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a0:	ee17 2a90 	vmov	r2, s15
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80063a8:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	0e1b      	lsrs	r3, r3, #24
 80063ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ce:	ee17 2a90 	vmov	r2, s15
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063d6:	e008      	b.n	80063ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	609a      	str	r2, [r3, #8]
}
 80063ea:	bf00      	nop
 80063ec:	3724      	adds	r7, #36	@ 0x24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	58024400 	.word	0x58024400
 80063fc:	03d09000 	.word	0x03d09000
 8006400:	46000000 	.word	0x46000000
 8006404:	4c742400 	.word	0x4c742400
 8006408:	4a742400 	.word	0x4a742400
 800640c:	4c371b00 	.word	0x4c371b00

08006410 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006410:	b480      	push	{r7}
 8006412:	b089      	sub	sp, #36	@ 0x24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006418:	4ba1      	ldr	r3, [pc, #644]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006422:	4b9f      	ldr	r3, [pc, #636]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006426:	0d1b      	lsrs	r3, r3, #20
 8006428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800642c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800642e:	4b9c      	ldr	r3, [pc, #624]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800643a:	4b99      	ldr	r3, [pc, #612]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	08db      	lsrs	r3, r3, #3
 8006440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006452:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8111 	beq.w	8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b02      	cmp	r3, #2
 8006462:	f000 8083 	beq.w	800656c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b02      	cmp	r3, #2
 800646a:	f200 80a1 	bhi.w	80065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d056      	beq.n	8006528 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800647a:	e099      	b.n	80065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800647c:	4b88      	ldr	r3, [pc, #544]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d02d      	beq.n	80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006488:	4b85      	ldr	r3, [pc, #532]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	08db      	lsrs	r3, r3, #3
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	4a84      	ldr	r2, [pc, #528]	@ (80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
 8006498:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	ee07 3a90 	vmov	s15, r3
 80064a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b2:	4b7b      	ldr	r3, [pc, #492]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80066a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064e2:	e087      	b.n	80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80064f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f6:	4b6a      	ldr	r3, [pc, #424]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006506:	ed97 6a03 	vldr	s12, [r7, #12]
 800650a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80066a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800650e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800651a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006526:	e065      	b.n	80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006532:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800653a:	4b59      	ldr	r3, [pc, #356]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800654a:	ed97 6a03 	vldr	s12, [r7, #12]
 800654e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80066a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800655a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800655e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800656a:	e043      	b.n	80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006576:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80066b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800657a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657e:	4b48      	ldr	r3, [pc, #288]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006592:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80066a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800659a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ae:	e021      	b.n	80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80066b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c2:	4b37      	ldr	r3, [pc, #220]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80066a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80065f4:	4b2a      	ldr	r3, [pc, #168]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	0a5b      	lsrs	r3, r3, #9
 80065fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006606:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800660a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800660e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800661a:	ee17 2a90 	vmov	r2, s15
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006622:	4b1f      	ldr	r3, [pc, #124]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006626:	0c1b      	lsrs	r3, r3, #16
 8006628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006634:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006638:	ee37 7a87 	vadd.f32	s14, s15, s14
 800663c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006648:	ee17 2a90 	vmov	r2, s15
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006650:	4b13      	ldr	r3, [pc, #76]	@ (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006654:	0e1b      	lsrs	r3, r3, #24
 8006656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006662:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800666a:	edd7 6a07 	vldr	s13, [r7, #28]
 800666e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006676:	ee17 2a90 	vmov	r2, s15
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800667e:	e008      	b.n	8006692 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	609a      	str	r2, [r3, #8]
}
 8006692:	bf00      	nop
 8006694:	3724      	adds	r7, #36	@ 0x24
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	58024400 	.word	0x58024400
 80066a4:	03d09000 	.word	0x03d09000
 80066a8:	46000000 	.word	0x46000000
 80066ac:	4c742400 	.word	0x4c742400
 80066b0:	4a742400 	.word	0x4a742400
 80066b4:	4c371b00 	.word	0x4c371b00

080066b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b089      	sub	sp, #36	@ 0x24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066c0:	4ba0      	ldr	r3, [pc, #640]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80066ca:	4b9e      	ldr	r3, [pc, #632]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ce:	091b      	lsrs	r3, r3, #4
 80066d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80066d6:	4b9b      	ldr	r3, [pc, #620]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066e0:	4b98      	ldr	r3, [pc, #608]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e4:	08db      	lsrs	r3, r3, #3
 80066e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	fb02 f303 	mul.w	r3, r2, r3
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 8111 	beq.w	8006926 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b02      	cmp	r3, #2
 8006708:	f000 8083 	beq.w	8006812 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b02      	cmp	r3, #2
 8006710:	f200 80a1 	bhi.w	8006856 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d056      	beq.n	80067ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006720:	e099      	b.n	8006856 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006722:	4b88      	ldr	r3, [pc, #544]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d02d      	beq.n	800678a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800672e:	4b85      	ldr	r3, [pc, #532]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	08db      	lsrs	r3, r3, #3
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	4a83      	ldr	r2, [pc, #524]	@ (8006948 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800673a:	fa22 f303 	lsr.w	r3, r2, r3
 800673e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006758:	4b7a      	ldr	r3, [pc, #488]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800675a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006760:	ee07 3a90 	vmov	s15, r3
 8006764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006768:	ed97 6a03 	vldr	s12, [r7, #12]
 800676c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800694c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800677c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006784:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006788:	e087      	b.n	800689a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	ee07 3a90 	vmov	s15, r3
 8006790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006794:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006950 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800679c:	4b69      	ldr	r3, [pc, #420]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a4:	ee07 3a90 	vmov	s15, r3
 80067a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80067b0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800694c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067cc:	e065      	b.n	800689a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006954 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80067dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e0:	4b58      	ldr	r3, [pc, #352]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e8:	ee07 3a90 	vmov	s15, r3
 80067ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80067f4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800694c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006810:	e043      	b.n	800689a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006958 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006824:	4b47      	ldr	r3, [pc, #284]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682c:	ee07 3a90 	vmov	s15, r3
 8006830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006834:	ed97 6a03 	vldr	s12, [r7, #12]
 8006838:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800694c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800683c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006850:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006854:	e021      	b.n	800689a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	ee07 3a90 	vmov	s15, r3
 800685c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006860:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006950 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006868:	4b36      	ldr	r3, [pc, #216]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800686a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006870:	ee07 3a90 	vmov	s15, r3
 8006874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006878:	ed97 6a03 	vldr	s12, [r7, #12]
 800687c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800694c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800688c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006894:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006898:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800689a:	4b2a      	ldr	r3, [pc, #168]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689e:	0a5b      	lsrs	r3, r3, #9
 80068a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068a4:	ee07 3a90 	vmov	s15, r3
 80068a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068c0:	ee17 2a90 	vmov	r2, s15
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80068c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068cc:	0c1b      	lsrs	r3, r3, #16
 80068ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ee:	ee17 2a90 	vmov	r2, s15
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80068f6:	4b13      	ldr	r3, [pc, #76]	@ (8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fa:	0e1b      	lsrs	r3, r3, #24
 80068fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006908:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800690c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006910:	edd7 6a07 	vldr	s13, [r7, #28]
 8006914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800691c:	ee17 2a90 	vmov	r2, s15
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006924:	e008      	b.n	8006938 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	609a      	str	r2, [r3, #8]
}
 8006938:	bf00      	nop
 800693a:	3724      	adds	r7, #36	@ 0x24
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	58024400 	.word	0x58024400
 8006948:	03d09000 	.word	0x03d09000
 800694c:	46000000 	.word	0x46000000
 8006950:	4c742400 	.word	0x4c742400
 8006954:	4a742400 	.word	0x4a742400
 8006958:	4c371b00 	.word	0x4c371b00

0800695c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800696a:	4b53      	ldr	r3, [pc, #332]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 800696c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d101      	bne.n	800697a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e099      	b.n	8006aae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800697a:	4b4f      	ldr	r3, [pc, #316]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a4e      	ldr	r2, [pc, #312]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006980:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006986:	f7fb fb9d 	bl	80020c4 <HAL_GetTick>
 800698a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800698c:	e008      	b.n	80069a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800698e:	f7fb fb99 	bl	80020c4 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e086      	b.n	8006aae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069a0:	4b45      	ldr	r3, [pc, #276]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f0      	bne.n	800698e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069ac:	4b42      	ldr	r3, [pc, #264]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 80069ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	031b      	lsls	r3, r3, #12
 80069ba:	493f      	ldr	r1, [pc, #252]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	628b      	str	r3, [r1, #40]	@ 0x28
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	025b      	lsls	r3, r3, #9
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	3b01      	subs	r3, #1
 80069dc:	041b      	lsls	r3, r3, #16
 80069de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	061b      	lsls	r3, r3, #24
 80069ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069f0:	4931      	ldr	r1, [pc, #196]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069f6:	4b30      	ldr	r3, [pc, #192]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	492d      	ldr	r1, [pc, #180]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a08:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	f023 0220 	bic.w	r2, r3, #32
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	4928      	ldr	r1, [pc, #160]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a1a:	4b27      	ldr	r3, [pc, #156]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	4a26      	ldr	r2, [pc, #152]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a20:	f023 0310 	bic.w	r3, r3, #16
 8006a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a26:	4b24      	ldr	r3, [pc, #144]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a2a:	4b24      	ldr	r3, [pc, #144]	@ (8006abc <RCCEx_PLL2_Config+0x160>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	69d2      	ldr	r2, [r2, #28]
 8006a32:	00d2      	lsls	r2, r2, #3
 8006a34:	4920      	ldr	r1, [pc, #128]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a40:	f043 0310 	orr.w	r3, r3, #16
 8006a44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a50:	4a19      	ldr	r2, [pc, #100]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a58:	e00f      	b.n	8006a7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d106      	bne.n	8006a6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a60:	4b15      	ldr	r3, [pc, #84]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a64:	4a14      	ldr	r2, [pc, #80]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a6c:	e005      	b.n	8006a7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a6e:	4b12      	ldr	r3, [pc, #72]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	4a11      	ldr	r2, [pc, #68]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a86:	f7fb fb1d 	bl	80020c4 <HAL_GetTick>
 8006a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a8c:	e008      	b.n	8006aa0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a8e:	f7fb fb19 	bl	80020c4 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e006      	b.n	8006aae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006aa0:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f0      	beq.n	8006a8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	ffff0007 	.word	0xffff0007

08006ac0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ace:	4b53      	ldr	r3, [pc, #332]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d101      	bne.n	8006ade <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e099      	b.n	8006c12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ade:	4b4f      	ldr	r3, [pc, #316]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a4e      	ldr	r2, [pc, #312]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aea:	f7fb faeb 	bl	80020c4 <HAL_GetTick>
 8006aee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006af0:	e008      	b.n	8006b04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006af2:	f7fb fae7 	bl	80020c4 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e086      	b.n	8006c12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b04:	4b45      	ldr	r3, [pc, #276]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1f0      	bne.n	8006af2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b10:	4b42      	ldr	r3, [pc, #264]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b14:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	051b      	lsls	r3, r3, #20
 8006b1e:	493f      	ldr	r1, [pc, #252]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	025b      	lsls	r3, r3, #9
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	041b      	lsls	r3, r3, #16
 8006b42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	061b      	lsls	r3, r3, #24
 8006b50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b54:	4931      	ldr	r1, [pc, #196]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b5a:	4b30      	ldr	r3, [pc, #192]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	492d      	ldr	r1, [pc, #180]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b70:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	4928      	ldr	r1, [pc, #160]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b7e:	4b27      	ldr	r3, [pc, #156]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b82:	4a26      	ldr	r2, [pc, #152]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b8a:	4b24      	ldr	r3, [pc, #144]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b8e:	4b24      	ldr	r3, [pc, #144]	@ (8006c20 <RCCEx_PLL3_Config+0x160>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	69d2      	ldr	r2, [r2, #28]
 8006b96:	00d2      	lsls	r2, r2, #3
 8006b98:	4920      	ldr	r1, [pc, #128]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb4:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006bba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bbc:	e00f      	b.n	8006bde <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d106      	bne.n	8006bd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006bc4:	4b15      	ldr	r3, [pc, #84]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc8:	4a14      	ldr	r2, [pc, #80]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006bce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bd0:	e005      	b.n	8006bde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bd2:	4b12      	ldr	r3, [pc, #72]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd6:	4a11      	ldr	r2, [pc, #68]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bde:	4b0f      	ldr	r3, [pc, #60]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a0e      	ldr	r2, [pc, #56]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bea:	f7fb fa6b 	bl	80020c4 <HAL_GetTick>
 8006bee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bf0:	e008      	b.n	8006c04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bf2:	f7fb fa67 	bl	80020c4 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e006      	b.n	8006c12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c04:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0f0      	beq.n	8006bf2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	ffff0007 	.word	0xffff0007

08006c24 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08a      	sub	sp, #40	@ 0x28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e075      	b.n	8006d22 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d105      	bne.n	8006c4e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7fa fcef 	bl	800162c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2204      	movs	r2, #4
 8006c52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f868 	bl	8006d2c <HAL_SD_InitCard>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e05d      	b.n	8006d22 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006c66:	f107 0308 	add.w	r3, r7, #8
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fdb5 	bl	80077dc <HAL_SD_GetCardStatus>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e052      	b.n	8006d22 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006c7c:	7e3b      	ldrb	r3, [r7, #24]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006c82:	7e7b      	ldrb	r3, [r7, #25]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d10a      	bne.n	8006ca6 <HAL_SD_Init+0x82>
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <HAL_SD_Init+0x78>
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ca2:	659a      	str	r2, [r3, #88]	@ 0x58
 8006ca4:	e00b      	b.n	8006cbe <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d104      	bne.n	8006cb8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8006cb6:	e002      	b.n	8006cbe <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fe73 	bl	80079b0 <HAL_SD_ConfigWideBusOperation>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e026      	b.n	8006d22 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006cd4:	f7fb f9f6 	bl	80020c4 <HAL_GetTick>
 8006cd8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006cda:	e011      	b.n	8006d00 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006cdc:	f7fb f9f2 	bl	80020c4 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cea:	d109      	bne.n	8006d00 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006cf2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e010      	b.n	8006d22 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 ff67 	bl	8007bd4 <HAL_SD_GetCardState>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d1e7      	bne.n	8006cdc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3728      	adds	r7, #40	@ 0x28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d2c:	b590      	push	{r4, r7, lr}
 8006d2e:	b08d      	sub	sp, #52	@ 0x34
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006d44:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006d48:	f04f 0100 	mov.w	r1, #0
 8006d4c:	f7fe fd24 	bl	8005798 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d50:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006d66:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e070      	b.n	8006e4e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	4a39      	ldr	r2, [pc, #228]	@ (8006e58 <HAL_SD_InitCard+0x12c>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	091b      	lsrs	r3, r3, #4
 8006d78:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681c      	ldr	r4, [r3, #0]
 8006d7e:	466a      	mov	r2, sp
 8006d80:	f107 0318 	add.w	r3, r7, #24
 8006d84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d88:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d8c:	f107 030c 	add.w	r3, r7, #12
 8006d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d92:	4620      	mov	r0, r4
 8006d94:	f004 fa46 	bl	800b224 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f004 fa89 	bl	800b2b4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006dba:	4a28      	ldr	r2, [pc, #160]	@ (8006e5c <HAL_SD_InitCard+0x130>)
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fb f989 	bl	80020dc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fff0 	bl	8007db0 <SD_PowerON>
 8006dd0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e02e      	b.n	8006e4e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 ff0f 	bl	8007c14 <SD_InitCard>
 8006df6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e01b      	b.n	8006e4e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f004 fade 	bl	800b3e0 <SDMMC_CmdBlockLength>
 8006e24:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00f      	beq.n	8006e4c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0b      	ldr	r2, [pc, #44]	@ (8006e60 <HAL_SD_InitCard+0x134>)
 8006e32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	372c      	adds	r7, #44	@ 0x2c
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd90      	pop	{r4, r7, pc}
 8006e56:	bf00      	nop
 8006e58:	014f8b59 	.word	0x014f8b59
 8006e5c:	00012110 	.word	0x00012110
 8006e60:	1fe00fff 	.word	0x1fe00fff

08006e64 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b092      	sub	sp, #72	@ 0x48
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e72:	f7fb f927 	bl	80020c4 <HAL_GetTick>
 8006e76:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d107      	bne.n	8006e96 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e167      	b.n	8007166 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	f040 815a 	bne.w	8007158 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006eaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	441a      	add	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d907      	bls.n	8006ec8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ebc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e14e      	b.n	8007166 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2203      	movs	r2, #3
 8006ecc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d002      	beq.n	8006ee6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee2:	025b      	lsls	r3, r3, #9
 8006ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eea:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	025b      	lsls	r3, r3, #9
 8006ef0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006ef2:	2390      	movs	r3, #144	@ 0x90
 8006ef4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f107 0214 	add.w	r2, r7, #20
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f004 fa3b 	bl	800b388 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f20:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d90a      	bls.n	8006f3e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f34:	4618      	mov	r0, r3
 8006f36:	f004 fa99 	bl	800b46c <SDMMC_CmdReadMultiBlock>
 8006f3a:	6478      	str	r0, [r7, #68]	@ 0x44
 8006f3c:	e009      	b.n	8006f52 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f004 fa6b 	bl	800b426 <SDMMC_CmdReadSingleBlock>
 8006f50:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d012      	beq.n	8006f7e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a84      	ldr	r2, [pc, #528]	@ (8007170 <HAL_SD_ReadBlocks+0x30c>)
 8006f5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f66:	431a      	orrs	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e0f3      	b.n	8007166 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006f82:	e058      	b.n	8007036 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d033      	beq.n	8006ffa <HAL_SD_ReadBlocks+0x196>
 8006f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f94:	2b1f      	cmp	r3, #31
 8006f96:	d930      	bls.n	8006ffa <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f9c:	e027      	b.n	8006fee <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f004 f968 	bl	800b278 <SDMMC_ReadFIFO>
 8006fa8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	0a1b      	lsrs	r3, r3, #8
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fca:	0c1b      	lsrs	r3, r3, #16
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fda:	0e1b      	lsrs	r3, r3, #24
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8006fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fea:	3301      	adds	r3, #1
 8006fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ff0:	2b07      	cmp	r3, #7
 8006ff2:	d9d4      	bls.n	8006f9e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ff6:	3b20      	subs	r3, #32
 8006ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006ffa:	f7fb f863 	bl	80020c4 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007006:	429a      	cmp	r2, r3
 8007008:	d902      	bls.n	8007010 <HAL_SD_ReadBlocks+0x1ac>
 800700a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800700c:	2b00      	cmp	r3, #0
 800700e:	d112      	bne.n	8007036 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a56      	ldr	r2, [pc, #344]	@ (8007170 <HAL_SD_ReadBlocks+0x30c>)
 8007016:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800701c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e097      	b.n	8007166 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007040:	2b00      	cmp	r3, #0
 8007042:	d09f      	beq.n	8006f84 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007052:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705e:	2b00      	cmp	r3, #0
 8007060:	d022      	beq.n	80070a8 <HAL_SD_ReadBlocks+0x244>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d91f      	bls.n	80070a8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706c:	2b03      	cmp	r3, #3
 800706e:	d01b      	beq.n	80070a8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f004 fa63 	bl	800b540 <SDMMC_CmdStopTransfer>
 800707a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800707c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800707e:	2b00      	cmp	r3, #0
 8007080:	d012      	beq.n	80070a8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a3a      	ldr	r2, [pc, #232]	@ (8007170 <HAL_SD_ReadBlocks+0x30c>)
 8007088:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800708e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007090:	431a      	orrs	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e05e      	b.n	8007166 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d012      	beq.n	80070dc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007170 <HAL_SD_ReadBlocks+0x30c>)
 80070bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070c2:	f043 0208 	orr.w	r2, r3, #8
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e044      	b.n	8007166 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d012      	beq.n	8007110 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a20      	ldr	r2, [pc, #128]	@ (8007170 <HAL_SD_ReadBlocks+0x30c>)
 80070f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070f6:	f043 0202 	orr.w	r2, r3, #2
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e02a      	b.n	8007166 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d012      	beq.n	8007144 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a13      	ldr	r2, [pc, #76]	@ (8007170 <HAL_SD_ReadBlocks+0x30c>)
 8007124:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800712a:	f043 0220 	orr.w	r2, r3, #32
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e010      	b.n	8007166 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a0a      	ldr	r2, [pc, #40]	@ (8007174 <HAL_SD_ReadBlocks+0x310>)
 800714a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e006      	b.n	8007166 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800715c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
  }
}
 8007166:	4618      	mov	r0, r3
 8007168:	3748      	adds	r7, #72	@ 0x48
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	1fe00fff 	.word	0x1fe00fff
 8007174:	18000f3a 	.word	0x18000f3a

08007178 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b092      	sub	sp, #72	@ 0x48
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007186:	f7fa ff9d 	bl	80020c4 <HAL_GetTick>
 800718a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d107      	bne.n	80071aa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800719e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e16b      	b.n	8007482 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	f040 815e 	bne.w	8007474 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80071be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	441a      	add	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d907      	bls.n	80071dc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e152      	b.n	8007482 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2203      	movs	r2, #3
 80071e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2200      	movs	r2, #0
 80071ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d002      	beq.n	80071fa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80071f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f6:	025b      	lsls	r3, r3, #9
 80071f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071fa:	f04f 33ff 	mov.w	r3, #4294967295
 80071fe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	025b      	lsls	r3, r3, #9
 8007204:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007206:	2390      	movs	r3, #144	@ 0x90
 8007208:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800720e:	2300      	movs	r3, #0
 8007210:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007212:	2300      	movs	r3, #0
 8007214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f107 0218 	add.w	r2, r7, #24
 800721e:	4611      	mov	r1, r2
 8007220:	4618      	mov	r0, r3
 8007222:	f004 f8b1 	bl	800b388 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007234:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d90a      	bls.n	8007252 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007248:	4618      	mov	r0, r3
 800724a:	f004 f955 	bl	800b4f8 <SDMMC_CmdWriteMultiBlock>
 800724e:	6478      	str	r0, [r7, #68]	@ 0x44
 8007250:	e009      	b.n	8007266 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2210      	movs	r2, #16
 8007256:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800725e:	4618      	mov	r0, r3
 8007260:	f004 f927 	bl	800b4b2 <SDMMC_CmdWriteSingleBlock>
 8007264:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007268:	2b00      	cmp	r3, #0
 800726a:	d012      	beq.n	8007292 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a86      	ldr	r2, [pc, #536]	@ (800748c <HAL_SD_WriteBlocks+0x314>)
 8007272:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800727a:	431a      	orrs	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e0f7      	b.n	8007482 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007296:	e05c      	b.n	8007352 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800729e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d037      	beq.n	8007316 <HAL_SD_WriteBlocks+0x19e>
 80072a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a8:	2b1f      	cmp	r3, #31
 80072aa:	d934      	bls.n	8007316 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80072ac:	2300      	movs	r3, #0
 80072ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80072b0:	e02b      	b.n	800730a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80072b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80072b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ba:	3301      	adds	r3, #1
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80072be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	021a      	lsls	r2, r3, #8
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80072ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072cc:	3301      	adds	r3, #1
 80072ce:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80072d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	041a      	lsls	r2, r3, #16
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80072dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072de:	3301      	adds	r3, #1
 80072e0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80072e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	061a      	lsls	r2, r3, #24
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80072ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f0:	3301      	adds	r3, #1
 80072f2:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f107 0214 	add.w	r2, r7, #20
 80072fc:	4611      	mov	r1, r2
 80072fe:	4618      	mov	r0, r3
 8007300:	f003 ffc7 	bl	800b292 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8007304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007306:	3301      	adds	r3, #1
 8007308:	643b      	str	r3, [r7, #64]	@ 0x40
 800730a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800730c:	2b07      	cmp	r3, #7
 800730e:	d9d0      	bls.n	80072b2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007312:	3b20      	subs	r3, #32
 8007314:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007316:	f7fa fed5 	bl	80020c4 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007322:	429a      	cmp	r2, r3
 8007324:	d902      	bls.n	800732c <HAL_SD_WriteBlocks+0x1b4>
 8007326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007328:	2b00      	cmp	r3, #0
 800732a:	d112      	bne.n	8007352 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a56      	ldr	r2, [pc, #344]	@ (800748c <HAL_SD_WriteBlocks+0x314>)
 8007332:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800733a:	431a      	orrs	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e097      	b.n	8007482 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007358:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800735c:	2b00      	cmp	r3, #0
 800735e:	d09b      	beq.n	8007298 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800736e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800737a:	2b00      	cmp	r3, #0
 800737c:	d022      	beq.n	80073c4 <HAL_SD_WriteBlocks+0x24c>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d91f      	bls.n	80073c4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007388:	2b03      	cmp	r3, #3
 800738a:	d01b      	beq.n	80073c4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4618      	mov	r0, r3
 8007392:	f004 f8d5 	bl	800b540 <SDMMC_CmdStopTransfer>
 8007396:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800739a:	2b00      	cmp	r3, #0
 800739c:	d012      	beq.n	80073c4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a3a      	ldr	r2, [pc, #232]	@ (800748c <HAL_SD_WriteBlocks+0x314>)
 80073a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ac:	431a      	orrs	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e05e      	b.n	8007482 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d012      	beq.n	80073f8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a2d      	ldr	r2, [pc, #180]	@ (800748c <HAL_SD_WriteBlocks+0x314>)
 80073d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073de:	f043 0208 	orr.w	r2, r3, #8
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e044      	b.n	8007482 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d012      	beq.n	800742c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a20      	ldr	r2, [pc, #128]	@ (800748c <HAL_SD_WriteBlocks+0x314>)
 800740c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007412:	f043 0202 	orr.w	r2, r3, #2
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e02a      	b.n	8007482 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b00      	cmp	r3, #0
 8007438:	d012      	beq.n	8007460 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a13      	ldr	r2, [pc, #76]	@ (800748c <HAL_SD_WriteBlocks+0x314>)
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007446:	f043 0210 	orr.w	r2, r3, #16
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e010      	b.n	8007482 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a0a      	ldr	r2, [pc, #40]	@ (8007490 <HAL_SD_WriteBlocks+0x318>)
 8007466:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	e006      	b.n	8007482 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007478:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
  }
}
 8007482:	4618      	mov	r0, r3
 8007484:	3748      	adds	r7, #72	@ 0x48
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	1fe00fff 	.word	0x1fe00fff
 8007490:	18000f3a 	.word	0x18000f3a

08007494 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074a2:	0f9b      	lsrs	r3, r3, #30
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ae:	0e9b      	lsrs	r3, r3, #26
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074c0:	0e1b      	lsrs	r3, r3, #24
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 0303 	and.w	r3, r3, #3
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074de:	0a1b      	lsrs	r3, r3, #8
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074f4:	0d1b      	lsrs	r3, r3, #20
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007500:	0c1b      	lsrs	r3, r3, #16
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	b2da      	uxtb	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007512:	0bdb      	lsrs	r3, r3, #15
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	b2da      	uxtb	r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007524:	0b9b      	lsrs	r3, r3, #14
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	b2da      	uxtb	r2, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007536:	0b5b      	lsrs	r3, r3, #13
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007548:	0b1b      	lsrs	r3, r3, #12
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	b2da      	uxtb	r2, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2200      	movs	r2, #0
 800755a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007560:	2b00      	cmp	r3, #0
 8007562:	d163      	bne.n	800762c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007568:	009a      	lsls	r2, r3, #2
 800756a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800756e:	4013      	ands	r3, r2
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8007574:	0f92      	lsrs	r2, r2, #30
 8007576:	431a      	orrs	r2, r3
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007580:	0edb      	lsrs	r3, r3, #27
 8007582:	b2db      	uxtb	r3, r3
 8007584:	f003 0307 	and.w	r3, r3, #7
 8007588:	b2da      	uxtb	r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007592:	0e1b      	lsrs	r3, r3, #24
 8007594:	b2db      	uxtb	r3, r3
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	b2da      	uxtb	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075a4:	0d5b      	lsrs	r3, r3, #21
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b6:	0c9b      	lsrs	r3, r3, #18
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075c8:	0bdb      	lsrs	r3, r3, #15
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	7e1b      	ldrb	r3, [r3, #24]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	3302      	adds	r3, #2
 80075ec:	2201      	movs	r2, #1
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075f6:	fb03 f202 	mul.w	r2, r3, r2
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	7a1b      	ldrb	r3, [r3, #8]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	2201      	movs	r2, #1
 800760a:	409a      	lsls	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007618:	0a52      	lsrs	r2, r2, #9
 800761a:	fb03 f202 	mul.w	r2, r3, r2
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007628:	655a      	str	r2, [r3, #84]	@ 0x54
 800762a:	e031      	b.n	8007690 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	2b01      	cmp	r3, #1
 8007632:	d11d      	bne.n	8007670 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007638:	041b      	lsls	r3, r3, #16
 800763a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007642:	0c1b      	lsrs	r3, r3, #16
 8007644:	431a      	orrs	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	3301      	adds	r3, #1
 8007650:	029a      	lsls	r2, r3, #10
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007664:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	655a      	str	r2, [r3, #84]	@ 0x54
 800766e:	e00f      	b.n	8007690 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a58      	ldr	r2, [pc, #352]	@ (80077d8 <HAL_SD_GetCardCSD+0x344>)
 8007676:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800767c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e09d      	b.n	80077cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007694:	0b9b      	lsrs	r3, r3, #14
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	b2da      	uxtb	r2, r3
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076a6:	09db      	lsrs	r3, r3, #7
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076c8:	0fdb      	lsrs	r3, r3, #31
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076d4:	0f5b      	lsrs	r3, r3, #29
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076e6:	0e9b      	lsrs	r3, r3, #26
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076f8:	0d9b      	lsrs	r3, r3, #22
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	b2da      	uxtb	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800770a:	0d5b      	lsrs	r3, r3, #21
 800770c:	b2db      	uxtb	r3, r3
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	b2da      	uxtb	r2, r3
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007726:	0c1b      	lsrs	r3, r3, #16
 8007728:	b2db      	uxtb	r3, r3
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	b2da      	uxtb	r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800773a:	0bdb      	lsrs	r3, r3, #15
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	b2da      	uxtb	r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800774e:	0b9b      	lsrs	r3, r3, #14
 8007750:	b2db      	uxtb	r3, r3
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	b2da      	uxtb	r2, r3
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007762:	0b5b      	lsrs	r3, r3, #13
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	b2da      	uxtb	r2, r3
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007776:	0b1b      	lsrs	r3, r3, #12
 8007778:	b2db      	uxtb	r3, r3
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	b2da      	uxtb	r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800778a:	0a9b      	lsrs	r3, r3, #10
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	b2da      	uxtb	r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	1fe00fff 	.word	0x1fe00fff

080077dc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b094      	sub	sp, #80	@ 0x50
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d101      	bne.n	80077fc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e0a7      	b.n	800794c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80077fc:	f107 0308 	add.w	r3, r7, #8
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fb62 	bl	8007ecc <SD_SendSDStatus>
 8007808:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800780a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800780c:	2b00      	cmp	r3, #0
 800780e:	d011      	beq.n	8007834 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a4f      	ldr	r2, [pc, #316]	@ (8007954 <HAL_SD_GetCardStatus+0x178>)
 8007816:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800781c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007832:	e070      	b.n	8007916 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	099b      	lsrs	r3, r3, #6
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f003 0303 	and.w	r3, r3, #3
 800783e:	b2da      	uxtb	r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	095b      	lsrs	r3, r3, #5
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	b2da      	uxtb	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	b29b      	uxth	r3, r3
 800785a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800785e:	b29a      	uxth	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	0e1b      	lsrs	r3, r3, #24
 8007864:	b29b      	uxth	r3, r3
 8007866:	4313      	orrs	r3, r2
 8007868:	b29a      	uxth	r2, r3
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	061a      	lsls	r2, r3, #24
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	021b      	lsls	r3, r3, #8
 8007876:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800787a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0a1b      	lsrs	r3, r3, #8
 8007880:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007884:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	0e1b      	lsrs	r3, r3, #24
 800788a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	0a1b      	lsrs	r3, r3, #8
 800789c:	b2da      	uxtb	r2, r3
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	0d1b      	lsrs	r3, r3, #20
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80078bc:	b29a      	uxth	r2, r3
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	4313      	orrs	r3, r2
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	0a9b      	lsrs	r3, r3, #10
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	0a1b      	lsrs	r3, r3, #8
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	091b      	lsrs	r3, r3, #4
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	b2da      	uxtb	r2, r3
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	0e1b      	lsrs	r3, r3, #24
 8007910:	b2da      	uxtb	r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800791e:	4618      	mov	r0, r3
 8007920:	f003 fd5e 	bl	800b3e0 <SDMMC_CmdBlockLength>
 8007924:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00d      	beq.n	8007948 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a08      	ldr	r2, [pc, #32]	@ (8007954 <HAL_SD_GetCardStatus+0x178>)
 8007932:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007938:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8007948:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800794c:	4618      	mov	r0, r3
 800794e:	3750      	adds	r7, #80	@ 0x50
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	1fe00fff 	.word	0x1fe00fff

08007958 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80079b0:	b590      	push	{r4, r7, lr}
 80079b2:	b08d      	sub	sp, #52	@ 0x34
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2203      	movs	r2, #3
 80079c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d02e      	beq.n	8007a2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079d6:	d106      	bne.n	80079e6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80079e4:	e029      	b.n	8007a3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079ec:	d10a      	bne.n	8007a04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fb64 	bl	80080bc <SD_WideBus_Enable>
 80079f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a02:	e01a      	b.n	8007a3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fba1 	bl	8008152 <SD_WideBus_Disable>
 8007a10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a1e:	e00c      	b.n	8007a3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a24:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a2c:	e005      	b.n	8007a3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a32:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d007      	beq.n	8007a52 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a5f      	ldr	r2, [pc, #380]	@ (8007bc4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007a48:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007a50:	e096      	b.n	8007b80 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007a52:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007a56:	f04f 0100 	mov.w	r1, #0
 8007a5a:	f7fd fe9d 	bl	8005798 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a5e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8083 	beq.w	8007b6e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695a      	ldr	r2, [r3, #20]
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	4950      	ldr	r1, [pc, #320]	@ (8007bc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a86:	fba1 1303 	umull	r1, r3, r1, r3
 8007a8a:	0e1b      	lsrs	r3, r3, #24
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d303      	bcc.n	8007a98 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	e05a      	b.n	8007b4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa0:	d103      	bne.n	8007aaa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	e051      	b.n	8007b4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab2:	d126      	bne.n	8007b02 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10e      	bne.n	8007ada <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	4a43      	ldr	r2, [pc, #268]	@ (8007bcc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d906      	bls.n	8007ad2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	4a40      	ldr	r2, [pc, #256]	@ (8007bc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	0e5b      	lsrs	r3, r3, #25
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	e03d      	b.n	8007b4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	61bb      	str	r3, [r7, #24]
 8007ad8:	e039      	b.n	8007b4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	69fa      	ldr	r2, [r7, #28]
 8007ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae6:	4a39      	ldr	r2, [pc, #228]	@ (8007bcc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d906      	bls.n	8007afa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4a36      	ldr	r2, [pc, #216]	@ (8007bc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007af0:	fba2 2303 	umull	r2, r3, r2, r3
 8007af4:	0e5b      	lsrs	r3, r3, #25
 8007af6:	61bb      	str	r3, [r7, #24]
 8007af8:	e029      	b.n	8007b4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	61bb      	str	r3, [r7, #24]
 8007b00:	e025      	b.n	8007b4e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10e      	bne.n	8007b28 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4a30      	ldr	r2, [pc, #192]	@ (8007bd0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d906      	bls.n	8007b20 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	4a2c      	ldr	r2, [pc, #176]	@ (8007bc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007b16:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1a:	0e1b      	lsrs	r3, r3, #24
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	e016      	b.n	8007b4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	e012      	b.n	8007b4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b34:	4a26      	ldr	r2, [pc, #152]	@ (8007bd0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d906      	bls.n	8007b48 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	4a22      	ldr	r2, [pc, #136]	@ (8007bc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b42:	0e1b      	lsrs	r3, r3, #24
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	e002      	b.n	8007b4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681c      	ldr	r4, [r3, #0]
 8007b52:	466a      	mov	r2, sp
 8007b54:	f107 0314 	add.w	r3, r7, #20
 8007b58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b5c:	e882 0003 	stmia.w	r2, {r0, r1}
 8007b60:	f107 0308 	add.w	r3, r7, #8
 8007b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b66:	4620      	mov	r0, r4
 8007b68:	f003 fb5c 	bl	800b224 <SDMMC_Init>
 8007b6c:	e008      	b.n	8007b80 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b72:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f003 fc29 	bl	800b3e0 <SDMMC_CmdBlockLength>
 8007b8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00c      	beq.n	8007bb0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8007bc4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007b9c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	372c      	adds	r7, #44	@ 0x2c
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd90      	pop	{r4, r7, pc}
 8007bc4:	1fe00fff 	.word	0x1fe00fff
 8007bc8:	55e63b89 	.word	0x55e63b89
 8007bcc:	02faf080 	.word	0x02faf080
 8007bd0:	017d7840 	.word	0x017d7840

08007bd4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007be0:	f107 030c 	add.w	r3, r7, #12
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fa40 	bl	800806c <SD_SendStatus>
 8007bec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	0a5b      	lsrs	r3, r3, #9
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007c0a:	693b      	ldr	r3, [r7, #16]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b090      	sub	sp, #64	@ 0x40
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007c20:	f7fa fa50 	bl	80020c4 <HAL_GetTick>
 8007c24:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f003 fb53 	bl	800b2d6 <SDMMC_GetPowerState>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d102      	bne.n	8007c3c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c36:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007c3a:	e0b5      	b.n	8007da8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d02e      	beq.n	8007ca2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f003 fd9e 	bl	800b78a <SDMMC_CmdSendCID>
 8007c4e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <SD_InitCard+0x46>
    {
      return errorstate;
 8007c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c58:	e0a6      	b.n	8007da8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4618      	mov	r0, r3
 8007c62:	f003 fb7e 	bl	800b362 <SDMMC_GetResponse>
 8007c66:	4602      	mov	r2, r0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2104      	movs	r1, #4
 8007c72:	4618      	mov	r0, r3
 8007c74:	f003 fb75 	bl	800b362 <SDMMC_GetResponse>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2108      	movs	r1, #8
 8007c84:	4618      	mov	r0, r3
 8007c86:	f003 fb6c 	bl	800b362 <SDMMC_GetResponse>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	210c      	movs	r1, #12
 8007c96:	4618      	mov	r0, r3
 8007c98:	f003 fb63 	bl	800b362 <SDMMC_GetResponse>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d01d      	beq.n	8007ce6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007caa:	e019      	b.n	8007ce0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f107 020a 	add.w	r2, r7, #10
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f003 fda6 	bl	800b808 <SDMMC_CmdSetRelAdd>
 8007cbc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc6:	e06f      	b.n	8007da8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007cc8:	f7fa f9fc 	bl	80020c4 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d902      	bls.n	8007ce0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007cda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007cde:	e063      	b.n	8007da8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007ce0:	897b      	ldrh	r3, [r7, #10]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0e2      	beq.n	8007cac <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d036      	beq.n	8007d5c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007cee:	897b      	ldrh	r3, [r7, #10]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfe:	041b      	lsls	r3, r3, #16
 8007d00:	4619      	mov	r1, r3
 8007d02:	4610      	mov	r0, r2
 8007d04:	f003 fd60 	bl	800b7c8 <SDMMC_CmdSendCSD>
 8007d08:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <SD_InitCard+0x100>
    {
      return errorstate;
 8007d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d12:	e049      	b.n	8007da8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f003 fb21 	bl	800b362 <SDMMC_GetResponse>
 8007d20:	4602      	mov	r2, r0
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2104      	movs	r1, #4
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f003 fb18 	bl	800b362 <SDMMC_GetResponse>
 8007d32:	4602      	mov	r2, r0
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2108      	movs	r1, #8
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f003 fb0f 	bl	800b362 <SDMMC_GetResponse>
 8007d44:	4602      	mov	r2, r0
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	210c      	movs	r1, #12
 8007d50:	4618      	mov	r0, r3
 8007d52:	f003 fb06 	bl	800b362 <SDMMC_GetResponse>
 8007d56:	4602      	mov	r2, r0
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2104      	movs	r1, #4
 8007d62:	4618      	mov	r0, r3
 8007d64:	f003 fafd 	bl	800b362 <SDMMC_GetResponse>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	0d1a      	lsrs	r2, r3, #20
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007d70:	f107 030c 	add.w	r3, r7, #12
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff fb8c 	bl	8007494 <HAL_SD_GetCardCSD>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d002      	beq.n	8007d88 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d82:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d86:	e00f      	b.n	8007da8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d90:	041b      	lsls	r3, r3, #16
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f003 fc0f 	bl	800b5b8 <SDMMC_CmdSelDesel>
 8007d9a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <SD_InitCard+0x192>
  {
    return errorstate;
 8007da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da4:	e000      	b.n	8007da8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3740      	adds	r7, #64	@ 0x40
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f003 fc18 	bl	800b5fe <SDMMC_CmdGoIdleState>
 8007dce:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <SD_PowerON+0x2a>
  {
    return errorstate;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	e072      	b.n	8007ec0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f003 fc2b 	bl	800b63a <SDMMC_CmdOperCond>
 8007de4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dec:	d10d      	bne.n	8007e0a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f003 fc00 	bl	800b5fe <SDMMC_CmdGoIdleState>
 8007dfe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d004      	beq.n	8007e10 <SD_PowerON+0x60>
    {
      return errorstate;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	e05a      	b.n	8007ec0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d137      	bne.n	8007e88 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f003 fc2b 	bl	800b67a <SDMMC_CmdAppCommand>
 8007e24:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d02d      	beq.n	8007e88 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e30:	e046      	b.n	8007ec0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2100      	movs	r1, #0
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f003 fc1e 	bl	800b67a <SDMMC_CmdAppCommand>
 8007e3e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <SD_PowerON+0x9a>
    {
      return errorstate;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	e03a      	b.n	8007ec0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	491e      	ldr	r1, [pc, #120]	@ (8007ec8 <SD_PowerON+0x118>)
 8007e50:	4618      	mov	r0, r3
 8007e52:	f003 fc35 	bl	800b6c0 <SDMMC_CmdAppOperCommand>
 8007e56:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e62:	e02d      	b.n	8007ec0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f003 fa79 	bl	800b362 <SDMMC_GetResponse>
 8007e70:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	0fdb      	lsrs	r3, r3, #31
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d101      	bne.n	8007e7e <SD_PowerON+0xce>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e000      	b.n	8007e80 <SD_PowerON+0xd0>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]

    count++;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	3301      	adds	r3, #1
 8007e86:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d802      	bhi.n	8007e98 <SD_PowerON+0xe8>
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0cc      	beq.n	8007e32 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d902      	bls.n	8007ea8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ea2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ea6:	e00b      	b.n	8007ec0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	c1100000 	.word	0xc1100000

08007ecc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08c      	sub	sp, #48	@ 0x30
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ed6:	f7fa f8f5 	bl	80020c4 <HAL_GetTick>
 8007eda:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f003 fa3b 	bl	800b362 <SDMMC_GetResponse>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ef6:	d102      	bne.n	8007efe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ef8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007efc:	e0b0      	b.n	8008060 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2140      	movs	r1, #64	@ 0x40
 8007f04:	4618      	mov	r0, r3
 8007f06:	f003 fa6b 	bl	800b3e0 <SDMMC_CmdBlockLength>
 8007f0a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	e0a0      	b.n	8008060 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	f003 fba5 	bl	800b67a <SDMMC_CmdAppCommand>
 8007f30:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	e08d      	b.n	8008060 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f44:	f04f 33ff 	mov.w	r3, #4294967295
 8007f48:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007f4a:	2340      	movs	r3, #64	@ 0x40
 8007f4c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007f4e:	2360      	movs	r3, #96	@ 0x60
 8007f50:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f52:	2302      	movs	r3, #2
 8007f54:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f107 0208 	add.w	r2, r7, #8
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f003 fa0d 	bl	800b388 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f003 fc8d 	bl	800b892 <SDMMC_CmdStatusRegister>
 8007f78:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d02b      	beq.n	8007fd8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	e069      	b.n	8008060 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d013      	beq.n	8007fc2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f9e:	e00d      	b.n	8007fbc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f003 f967 	bl	800b278 <SDMMC_ReadFIFO>
 8007faa:	4602      	mov	r2, r0
 8007fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fae:	601a      	str	r2, [r3, #0]
        pData++;
 8007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8007fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb8:	3301      	adds	r3, #1
 8007fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fbe:	2b07      	cmp	r3, #7
 8007fc0:	d9ee      	bls.n	8007fa0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007fc2:	f7fa f87f 	bl	80020c4 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd0:	d102      	bne.n	8007fd8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007fd2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007fd6:	e043      	b.n	8008060 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fde:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0d2      	beq.n	8007f8c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	e033      	b.n	8008060 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008006:	2302      	movs	r3, #2
 8008008:	e02a      	b.n	8008060 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008010:	f003 0320 	and.w	r3, r3, #32
 8008014:	2b00      	cmp	r3, #0
 8008016:	d017      	beq.n	8008048 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008018:	2320      	movs	r3, #32
 800801a:	e021      	b.n	8008060 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4618      	mov	r0, r3
 8008022:	f003 f929 	bl	800b278 <SDMMC_ReadFIFO>
 8008026:	4602      	mov	r2, r0
 8008028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802a:	601a      	str	r2, [r3, #0]
    pData++;
 800802c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802e:	3304      	adds	r3, #4
 8008030:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008032:	f7fa f847 	bl	80020c4 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008040:	d102      	bne.n	8008048 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008042:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008046:	e00b      	b.n	8008060 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800804e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e2      	bne.n	800801c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a03      	ldr	r2, [pc, #12]	@ (8008068 <SD_SendSDStatus+0x19c>)
 800805c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3730      	adds	r7, #48	@ 0x30
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	18000f3a 	.word	0x18000f3a

0800806c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800807c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008080:	e018      	b.n	80080b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800808a:	041b      	lsls	r3, r3, #16
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f003 fbdc 	bl	800b84c <SDMMC_CmdSendStatus>
 8008094:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	e009      	b.n	80080b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2100      	movs	r1, #0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f003 f95b 	bl	800b362 <SDMMC_GetResponse>
 80080ac:	4602      	mov	r2, r0
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	2300      	movs	r3, #0
 80080ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2100      	movs	r1, #0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f003 f945 	bl	800b362 <SDMMC_GetResponse>
 80080d8:	4603      	mov	r3, r0
 80080da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080e2:	d102      	bne.n	80080ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80080e8:	e02f      	b.n	800814a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080ea:	f107 030c 	add.w	r3, r7, #12
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f879 	bl	80081e8 <SD_FindSCR>
 80080f6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	e023      	b.n	800814a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01c      	beq.n	8008146 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008114:	041b      	lsls	r3, r3, #16
 8008116:	4619      	mov	r1, r3
 8008118:	4610      	mov	r0, r2
 800811a:	f003 faae 	bl	800b67a <SDMMC_CmdAppCommand>
 800811e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	e00f      	b.n	800814a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2102      	movs	r1, #2
 8008130:	4618      	mov	r0, r3
 8008132:	f003 fae5 	bl	800b700 <SDMMC_CmdBusWidth>
 8008136:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	e003      	b.n	800814a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008142:	2300      	movs	r3, #0
 8008144:	e001      	b.n	800814a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008146:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b086      	sub	sp, #24
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	2300      	movs	r3, #0
 8008160:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2100      	movs	r1, #0
 8008168:	4618      	mov	r0, r3
 800816a:	f003 f8fa 	bl	800b362 <SDMMC_GetResponse>
 800816e:	4603      	mov	r3, r0
 8008170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008178:	d102      	bne.n	8008180 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800817a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800817e:	e02f      	b.n	80081e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008180:	f107 030c 	add.w	r3, r7, #12
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f82e 	bl	80081e8 <SD_FindSCR>
 800818c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	e023      	b.n	80081e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d01c      	beq.n	80081dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	4619      	mov	r1, r3
 80081ae:	4610      	mov	r0, r2
 80081b0:	f003 fa63 	bl	800b67a <SDMMC_CmdAppCommand>
 80081b4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	e00f      	b.n	80081e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2100      	movs	r1, #0
 80081c6:	4618      	mov	r0, r3
 80081c8:	f003 fa9a 	bl	800b700 <SDMMC_CmdBusWidth>
 80081cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	e003      	b.n	80081e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80081d8:	2300      	movs	r3, #0
 80081da:	e001      	b.n	80081e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08e      	sub	sp, #56	@ 0x38
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081f2:	f7f9 ff67 	bl	80020c4 <HAL_GetTick>
 80081f6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80081fc:	2300      	movs	r3, #0
 80081fe:	60bb      	str	r3, [r7, #8]
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2108      	movs	r1, #8
 800820e:	4618      	mov	r0, r3
 8008210:	f003 f8e6 	bl	800b3e0 <SDMMC_CmdBlockLength>
 8008214:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <SD_FindSCR+0x38>
  {
    return errorstate;
 800821c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821e:	e0ad      	b.n	800837c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008228:	041b      	lsls	r3, r3, #16
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f003 fa24 	bl	800b67a <SDMMC_CmdAppCommand>
 8008232:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <SD_FindSCR+0x56>
  {
    return errorstate;
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	e09e      	b.n	800837c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800823e:	f04f 33ff 	mov.w	r3, #4294967295
 8008242:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008244:	2308      	movs	r3, #8
 8008246:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008248:	2330      	movs	r3, #48	@ 0x30
 800824a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800824c:	2302      	movs	r3, #2
 800824e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008250:	2300      	movs	r3, #0
 8008252:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008254:	2301      	movs	r3, #1
 8008256:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f107 0210 	add.w	r2, r7, #16
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f003 f890 	bl	800b388 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4618      	mov	r0, r3
 800826e:	f003 fa6a 	bl	800b746 <SDMMC_CmdSendSCR>
 8008272:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d027      	beq.n	80082ca <SD_FindSCR+0xe2>
  {
    return errorstate;
 800827a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827c:	e07e      	b.n	800837c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008284:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d113      	bne.n	80082b4 <SD_FindSCR+0xcc>
 800828c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828e:	2b00      	cmp	r3, #0
 8008290:	d110      	bne.n	80082b4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4618      	mov	r0, r3
 8008298:	f002 ffee 	bl	800b278 <SDMMC_ReadFIFO>
 800829c:	4603      	mov	r3, r0
 800829e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f002 ffe7 	bl	800b278 <SDMMC_ReadFIFO>
 80082aa:	4603      	mov	r3, r0
 80082ac:	60fb      	str	r3, [r7, #12]
      index++;
 80082ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b0:	3301      	adds	r3, #1
 80082b2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082b4:	f7f9 ff06 	bl	80020c4 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c2:	d102      	bne.n	80082ca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80082c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80082c8:	e058      	b.n	800837c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082d0:	f240 532a 	movw	r3, #1322	@ 0x52a
 80082d4:	4013      	ands	r3, r2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0d1      	beq.n	800827e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2208      	movs	r2, #8
 80082ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80082f0:	2308      	movs	r3, #8
 80082f2:	e043      	b.n	800837c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d005      	beq.n	800830e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2202      	movs	r2, #2
 8008308:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800830a:	2302      	movs	r3, #2
 800830c:	e036      	b.n	800837c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008314:	f003 0320 	and.w	r3, r3, #32
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2220      	movs	r2, #32
 8008322:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008324:	2320      	movs	r3, #32
 8008326:	e029      	b.n	800837c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a15      	ldr	r2, [pc, #84]	@ (8008384 <SD_FindSCR+0x19c>)
 800832e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	061a      	lsls	r2, r3, #24
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800833c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008346:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	0e1b      	lsrs	r3, r3, #24
 800834c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800834e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008350:	601a      	str	r2, [r3, #0]
    scr++;
 8008352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008354:	3304      	adds	r3, #4
 8008356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	061a      	lsls	r2, r3, #24
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	021b      	lsls	r3, r3, #8
 8008360:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008364:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	0a1b      	lsrs	r3, r3, #8
 800836a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800836e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	0e1b      	lsrs	r3, r3, #24
 8008374:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008378:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3738      	adds	r7, #56	@ 0x38
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	18000f3a 	.word	0x18000f3a

08008388 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e10f      	b.n	80085ba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a87      	ldr	r2, [pc, #540]	@ (80085c4 <HAL_SPI_Init+0x23c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d00f      	beq.n	80083ca <HAL_SPI_Init+0x42>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a86      	ldr	r2, [pc, #536]	@ (80085c8 <HAL_SPI_Init+0x240>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00a      	beq.n	80083ca <HAL_SPI_Init+0x42>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a84      	ldr	r2, [pc, #528]	@ (80085cc <HAL_SPI_Init+0x244>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d005      	beq.n	80083ca <HAL_SPI_Init+0x42>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	2b0f      	cmp	r3, #15
 80083c4:	d901      	bls.n	80083ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e0f7      	b.n	80085ba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f900 	bl	80085d0 <SPI_GetPacketSize>
 80083d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a7b      	ldr	r2, [pc, #492]	@ (80085c4 <HAL_SPI_Init+0x23c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00c      	beq.n	80083f6 <HAL_SPI_Init+0x6e>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a79      	ldr	r2, [pc, #484]	@ (80085c8 <HAL_SPI_Init+0x240>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d007      	beq.n	80083f6 <HAL_SPI_Init+0x6e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a78      	ldr	r2, [pc, #480]	@ (80085cc <HAL_SPI_Init+0x244>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d002      	beq.n	80083f6 <HAL_SPI_Init+0x6e>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b08      	cmp	r3, #8
 80083f4:	d811      	bhi.n	800841a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083fa:	4a72      	ldr	r2, [pc, #456]	@ (80085c4 <HAL_SPI_Init+0x23c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d009      	beq.n	8008414 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a70      	ldr	r2, [pc, #448]	@ (80085c8 <HAL_SPI_Init+0x240>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d004      	beq.n	8008414 <HAL_SPI_Init+0x8c>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a6f      	ldr	r2, [pc, #444]	@ (80085cc <HAL_SPI_Init+0x244>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d104      	bne.n	800841e <HAL_SPI_Init+0x96>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b10      	cmp	r3, #16
 8008418:	d901      	bls.n	800841e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e0cd      	b.n	80085ba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7f9 f988 	bl	8001748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f022 0201 	bic.w	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800845a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008464:	d119      	bne.n	800849a <HAL_SPI_Init+0x112>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800846e:	d103      	bne.n	8008478 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008474:	2b00      	cmp	r3, #0
 8008476:	d008      	beq.n	800848a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10c      	bne.n	800849a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008488:	d107      	bne.n	800849a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008498:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00f      	beq.n	80084c6 <HAL_SPI_Init+0x13e>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	2b06      	cmp	r3, #6
 80084ac:	d90b      	bls.n	80084c6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e007      	b.n	80084d6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69da      	ldr	r2, [r3, #28]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084de:	431a      	orrs	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084e8:	ea42 0103 	orr.w	r1, r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68da      	ldr	r2, [r3, #12]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	431a      	orrs	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	431a      	orrs	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800852a:	431a      	orrs	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008536:	ea42 0103 	orr.w	r1, r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d113      	bne.n	8008576 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008560:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008574:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0201 	bic.w	r2, r2, #1
 8008584:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00a      	beq.n	80085a8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	40013000 	.word	0x40013000
 80085c8:	40003800 	.word	0x40003800
 80085cc:	40003c00 	.word	0x40003c00

080085d0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085dc:	095b      	lsrs	r3, r3, #5
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	3301      	adds	r3, #1
 80085e8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	3307      	adds	r3, #7
 80085ee:	08db      	lsrs	r3, r3, #3
 80085f0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	fb02 f303 	mul.w	r3, r2, r3
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e042      	b.n	800869e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7f9 f9e0 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2224      	movs	r2, #36	@ 0x24
 8008634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 fa6f 	bl	8009b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fc00 	bl	8008e5c <UART_SetConfig>
 800865c:	4603      	mov	r3, r0
 800865e:	2b01      	cmp	r3, #1
 8008660:	d101      	bne.n	8008666 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e01b      	b.n	800869e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008674:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008684:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 0201 	orr.w	r2, r2, #1
 8008694:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 faee 	bl	8009c78 <UART_CheckIdleState>
 800869c:	4603      	mov	r3, r0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b0ba      	sub	sp, #232	@ 0xe8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80086d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80086d6:	4013      	ands	r3, r2
 80086d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80086dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d11b      	bne.n	800871c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e8:	f003 0320 	and.w	r3, r3, #32
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d015      	beq.n	800871c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f4:	f003 0320 	and.w	r3, r3, #32
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d105      	bne.n	8008708 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d009      	beq.n	800871c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 8377 	beq.w	8008e00 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
      }
      return;
 800871a:	e371      	b.n	8008e00 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800871c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 8123 	beq.w	800896c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008726:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800872a:	4b8d      	ldr	r3, [pc, #564]	@ (8008960 <HAL_UART_IRQHandler+0x2b8>)
 800872c:	4013      	ands	r3, r2
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008732:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008736:	4b8b      	ldr	r3, [pc, #556]	@ (8008964 <HAL_UART_IRQHandler+0x2bc>)
 8008738:	4013      	ands	r3, r2
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 8116 	beq.w	800896c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	d011      	beq.n	8008770 <HAL_UART_IRQHandler+0xc8>
 800874c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2201      	movs	r2, #1
 800875e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008766:	f043 0201 	orr.w	r2, r3, #1
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d011      	beq.n	80087a0 <HAL_UART_IRQHandler+0xf8>
 800877c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00b      	beq.n	80087a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2202      	movs	r2, #2
 800878e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008796:	f043 0204 	orr.w	r2, r3, #4
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d011      	beq.n	80087d0 <HAL_UART_IRQHandler+0x128>
 80087ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2204      	movs	r2, #4
 80087be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c6:	f043 0202 	orr.w	r2, r3, #2
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d4:	f003 0308 	and.w	r3, r3, #8
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d017      	beq.n	800880c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087e0:	f003 0320 	and.w	r3, r3, #32
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d105      	bne.n	80087f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80087e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80087ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008960 <HAL_UART_IRQHandler+0x2b8>)
 80087ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2208      	movs	r2, #8
 80087fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008802:	f043 0208 	orr.w	r2, r3, #8
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800880c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008814:	2b00      	cmp	r3, #0
 8008816:	d012      	beq.n	800883e <HAL_UART_IRQHandler+0x196>
 8008818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800881c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00c      	beq.n	800883e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800882c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008834:	f043 0220 	orr.w	r2, r3, #32
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 82dd 	beq.w	8008e04 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	d013      	beq.n	800887e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800885a:	f003 0320 	and.w	r3, r3, #32
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d007      	beq.n	800887e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008884:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008892:	2b40      	cmp	r3, #64	@ 0x40
 8008894:	d005      	beq.n	80088a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800889a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d054      	beq.n	800894c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 fb00 	bl	8009ea8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b2:	2b40      	cmp	r3, #64	@ 0x40
 80088b4:	d146      	bne.n	8008944 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3308      	adds	r3, #8
 80088bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3308      	adds	r3, #8
 80088de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80088e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80088e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80088ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80088fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1d9      	bne.n	80088b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008908:	2b00      	cmp	r3, #0
 800890a:	d017      	beq.n	800893c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008912:	4a15      	ldr	r2, [pc, #84]	@ (8008968 <HAL_UART_IRQHandler+0x2c0>)
 8008914:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800891c:	4618      	mov	r0, r3
 800891e:	f7fa f8a7 	bl	8002a70 <HAL_DMA_Abort_IT>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d019      	beq.n	800895c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800892e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008936:	4610      	mov	r0, r2
 8008938:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800893a:	e00f      	b.n	800895c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fa77 	bl	8008e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008942:	e00b      	b.n	800895c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fa73 	bl	8008e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800894a:	e007      	b.n	800895c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fa6f 	bl	8008e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800895a:	e253      	b.n	8008e04 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	bf00      	nop
    return;
 800895e:	e251      	b.n	8008e04 <HAL_UART_IRQHandler+0x75c>
 8008960:	10000001 	.word	0x10000001
 8008964:	04000120 	.word	0x04000120
 8008968:	08009f75 	.word	0x08009f75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008970:	2b01      	cmp	r3, #1
 8008972:	f040 81e7 	bne.w	8008d44 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800897a:	f003 0310 	and.w	r3, r3, #16
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 81e0 	beq.w	8008d44 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 81d9 	beq.w	8008d44 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2210      	movs	r2, #16
 8008998:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089a4:	2b40      	cmp	r3, #64	@ 0x40
 80089a6:	f040 8151 	bne.w	8008c4c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a96      	ldr	r2, [pc, #600]	@ (8008c0c <HAL_UART_IRQHandler+0x564>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d068      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a93      	ldr	r2, [pc, #588]	@ (8008c10 <HAL_UART_IRQHandler+0x568>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d061      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a91      	ldr	r2, [pc, #580]	@ (8008c14 <HAL_UART_IRQHandler+0x56c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d05a      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a8e      	ldr	r2, [pc, #568]	@ (8008c18 <HAL_UART_IRQHandler+0x570>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d053      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a8c      	ldr	r2, [pc, #560]	@ (8008c1c <HAL_UART_IRQHandler+0x574>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d04c      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a89      	ldr	r2, [pc, #548]	@ (8008c20 <HAL_UART_IRQHandler+0x578>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d045      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a87      	ldr	r2, [pc, #540]	@ (8008c24 <HAL_UART_IRQHandler+0x57c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d03e      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a84      	ldr	r2, [pc, #528]	@ (8008c28 <HAL_UART_IRQHandler+0x580>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d037      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a82      	ldr	r2, [pc, #520]	@ (8008c2c <HAL_UART_IRQHandler+0x584>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d030      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a7f      	ldr	r2, [pc, #508]	@ (8008c30 <HAL_UART_IRQHandler+0x588>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d029      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a7d      	ldr	r2, [pc, #500]	@ (8008c34 <HAL_UART_IRQHandler+0x58c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d022      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a7a      	ldr	r2, [pc, #488]	@ (8008c38 <HAL_UART_IRQHandler+0x590>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d01b      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a78      	ldr	r2, [pc, #480]	@ (8008c3c <HAL_UART_IRQHandler+0x594>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d014      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a75      	ldr	r2, [pc, #468]	@ (8008c40 <HAL_UART_IRQHandler+0x598>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00d      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a73      	ldr	r2, [pc, #460]	@ (8008c44 <HAL_UART_IRQHandler+0x59c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d006      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3e2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a70      	ldr	r2, [pc, #448]	@ (8008c48 <HAL_UART_IRQHandler+0x5a0>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d106      	bne.n	8008a98 <HAL_UART_IRQHandler+0x3f0>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	e005      	b.n	8008aa4 <HAL_UART_IRQHandler+0x3fc>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 81ab 	beq.w	8008e08 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ab8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008abc:	429a      	cmp	r2, r3
 8008abe:	f080 81a3 	bcs.w	8008e08 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ac8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ad8:	f000 8087 	beq.w	8008bea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	461a      	mov	r2, r3
 8008b02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1da      	bne.n	8008adc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b38:	f023 0301 	bic.w	r3, r3, #1
 8008b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3308      	adds	r3, #8
 8008b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e1      	bne.n	8008b26 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3308      	adds	r3, #8
 8008b68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3308      	adds	r3, #8
 8008b82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e3      	bne.n	8008b62 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bb8:	f023 0310 	bic.w	r3, r3, #16
 8008bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bcc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008bd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bd2:	e841 2300 	strex	r3, r2, [r1]
 8008bd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1e4      	bne.n	8008ba8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7f9 fc25 	bl	8002434 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2202      	movs	r2, #2
 8008bee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f91d 	bl	8008e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c0a:	e0fd      	b.n	8008e08 <HAL_UART_IRQHandler+0x760>
 8008c0c:	40020010 	.word	0x40020010
 8008c10:	40020028 	.word	0x40020028
 8008c14:	40020040 	.word	0x40020040
 8008c18:	40020058 	.word	0x40020058
 8008c1c:	40020070 	.word	0x40020070
 8008c20:	40020088 	.word	0x40020088
 8008c24:	400200a0 	.word	0x400200a0
 8008c28:	400200b8 	.word	0x400200b8
 8008c2c:	40020410 	.word	0x40020410
 8008c30:	40020428 	.word	0x40020428
 8008c34:	40020440 	.word	0x40020440
 8008c38:	40020458 	.word	0x40020458
 8008c3c:	40020470 	.word	0x40020470
 8008c40:	40020488 	.word	0x40020488
 8008c44:	400204a0 	.word	0x400204a0
 8008c48:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 80cf 	beq.w	8008e0c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 80ca 	beq.w	8008e0c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c9c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ca0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e4      	bne.n	8008c78 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008cbe:	6a3a      	ldr	r2, [r7, #32]
 8008cc0:	4b55      	ldr	r3, [pc, #340]	@ (8008e18 <HAL_UART_IRQHandler+0x770>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3308      	adds	r3, #8
 8008cce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008cd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cda:	e841 2300 	strex	r3, r2, [r1]
 8008cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1e3      	bne.n	8008cae <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0310 	bic.w	r3, r3, #16
 8008d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008d1c:	61fb      	str	r3, [r7, #28]
 8008d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	69b9      	ldr	r1, [r7, #24]
 8008d22:	69fa      	ldr	r2, [r7, #28]
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	617b      	str	r3, [r7, #20]
   return(result);
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e4      	bne.n	8008cfa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f881 	bl	8008e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d42:	e063      	b.n	8008e0c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00e      	beq.n	8008d6e <HAL_UART_IRQHandler+0x6c6>
 8008d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d008      	beq.n	8008d6e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008d64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 f945 	bl	8009ff6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d6c:	e051      	b.n	8008e12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d014      	beq.n	8008da4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d105      	bne.n	8008d92 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d008      	beq.n	8008da4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d03a      	beq.n	8008e10 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
    }
    return;
 8008da2:	e035      	b.n	8008e10 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d009      	beq.n	8008dc4 <HAL_UART_IRQHandler+0x71c>
 8008db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 f8ef 	bl	8009fa0 <UART_EndTransmit_IT>
    return;
 8008dc2:	e026      	b.n	8008e12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d009      	beq.n	8008de4 <HAL_UART_IRQHandler+0x73c>
 8008dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dd4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 f91e 	bl	800a01e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008de2:	e016      	b.n	8008e12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d010      	beq.n	8008e12 <HAL_UART_IRQHandler+0x76a>
 8008df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da0c      	bge.n	8008e12 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 f906 	bl	800a00a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dfe:	e008      	b.n	8008e12 <HAL_UART_IRQHandler+0x76a>
      return;
 8008e00:	bf00      	nop
 8008e02:	e006      	b.n	8008e12 <HAL_UART_IRQHandler+0x76a>
    return;
 8008e04:	bf00      	nop
 8008e06:	e004      	b.n	8008e12 <HAL_UART_IRQHandler+0x76a>
      return;
 8008e08:	bf00      	nop
 8008e0a:	e002      	b.n	8008e12 <HAL_UART_IRQHandler+0x76a>
      return;
 8008e0c:	bf00      	nop
 8008e0e:	e000      	b.n	8008e12 <HAL_UART_IRQHandler+0x76a>
    return;
 8008e10:	bf00      	nop
  }
}
 8008e12:	37e8      	adds	r7, #232	@ 0xe8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	effffffe 	.word	0xeffffffe

08008e1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e60:	b092      	sub	sp, #72	@ 0x48
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	431a      	orrs	r2, r3
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4bbe      	ldr	r3, [pc, #760]	@ (8009184 <UART_SetConfig+0x328>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e94:	430b      	orrs	r3, r1
 8008e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4ab3      	ldr	r2, [pc, #716]	@ (8009188 <UART_SetConfig+0x32c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d004      	beq.n	8008ec8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689a      	ldr	r2, [r3, #8]
 8008ece:	4baf      	ldr	r3, [pc, #700]	@ (800918c <UART_SetConfig+0x330>)
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	6812      	ldr	r2, [r2, #0]
 8008ed6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee2:	f023 010f 	bic.w	r1, r3, #15
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4aa6      	ldr	r2, [pc, #664]	@ (8009190 <UART_SetConfig+0x334>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d177      	bne.n	8008fec <UART_SetConfig+0x190>
 8008efc:	4ba5      	ldr	r3, [pc, #660]	@ (8009194 <UART_SetConfig+0x338>)
 8008efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f04:	2b28      	cmp	r3, #40	@ 0x28
 8008f06:	d86d      	bhi.n	8008fe4 <UART_SetConfig+0x188>
 8008f08:	a201      	add	r2, pc, #4	@ (adr r2, 8008f10 <UART_SetConfig+0xb4>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008fb5 	.word	0x08008fb5
 8008f14:	08008fe5 	.word	0x08008fe5
 8008f18:	08008fe5 	.word	0x08008fe5
 8008f1c:	08008fe5 	.word	0x08008fe5
 8008f20:	08008fe5 	.word	0x08008fe5
 8008f24:	08008fe5 	.word	0x08008fe5
 8008f28:	08008fe5 	.word	0x08008fe5
 8008f2c:	08008fe5 	.word	0x08008fe5
 8008f30:	08008fbd 	.word	0x08008fbd
 8008f34:	08008fe5 	.word	0x08008fe5
 8008f38:	08008fe5 	.word	0x08008fe5
 8008f3c:	08008fe5 	.word	0x08008fe5
 8008f40:	08008fe5 	.word	0x08008fe5
 8008f44:	08008fe5 	.word	0x08008fe5
 8008f48:	08008fe5 	.word	0x08008fe5
 8008f4c:	08008fe5 	.word	0x08008fe5
 8008f50:	08008fc5 	.word	0x08008fc5
 8008f54:	08008fe5 	.word	0x08008fe5
 8008f58:	08008fe5 	.word	0x08008fe5
 8008f5c:	08008fe5 	.word	0x08008fe5
 8008f60:	08008fe5 	.word	0x08008fe5
 8008f64:	08008fe5 	.word	0x08008fe5
 8008f68:	08008fe5 	.word	0x08008fe5
 8008f6c:	08008fe5 	.word	0x08008fe5
 8008f70:	08008fcd 	.word	0x08008fcd
 8008f74:	08008fe5 	.word	0x08008fe5
 8008f78:	08008fe5 	.word	0x08008fe5
 8008f7c:	08008fe5 	.word	0x08008fe5
 8008f80:	08008fe5 	.word	0x08008fe5
 8008f84:	08008fe5 	.word	0x08008fe5
 8008f88:	08008fe5 	.word	0x08008fe5
 8008f8c:	08008fe5 	.word	0x08008fe5
 8008f90:	08008fd5 	.word	0x08008fd5
 8008f94:	08008fe5 	.word	0x08008fe5
 8008f98:	08008fe5 	.word	0x08008fe5
 8008f9c:	08008fe5 	.word	0x08008fe5
 8008fa0:	08008fe5 	.word	0x08008fe5
 8008fa4:	08008fe5 	.word	0x08008fe5
 8008fa8:	08008fe5 	.word	0x08008fe5
 8008fac:	08008fe5 	.word	0x08008fe5
 8008fb0:	08008fdd 	.word	0x08008fdd
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e326      	b.n	800960a <UART_SetConfig+0x7ae>
 8008fbc:	2304      	movs	r3, #4
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e322      	b.n	800960a <UART_SetConfig+0x7ae>
 8008fc4:	2308      	movs	r3, #8
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e31e      	b.n	800960a <UART_SetConfig+0x7ae>
 8008fcc:	2310      	movs	r3, #16
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e31a      	b.n	800960a <UART_SetConfig+0x7ae>
 8008fd4:	2320      	movs	r3, #32
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e316      	b.n	800960a <UART_SetConfig+0x7ae>
 8008fdc:	2340      	movs	r3, #64	@ 0x40
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	e312      	b.n	800960a <UART_SetConfig+0x7ae>
 8008fe4:	2380      	movs	r3, #128	@ 0x80
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fea:	e30e      	b.n	800960a <UART_SetConfig+0x7ae>
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a69      	ldr	r2, [pc, #420]	@ (8009198 <UART_SetConfig+0x33c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d130      	bne.n	8009058 <UART_SetConfig+0x1fc>
 8008ff6:	4b67      	ldr	r3, [pc, #412]	@ (8009194 <UART_SetConfig+0x338>)
 8008ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	2b05      	cmp	r3, #5
 8009000:	d826      	bhi.n	8009050 <UART_SetConfig+0x1f4>
 8009002:	a201      	add	r2, pc, #4	@ (adr r2, 8009008 <UART_SetConfig+0x1ac>)
 8009004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009008:	08009021 	.word	0x08009021
 800900c:	08009029 	.word	0x08009029
 8009010:	08009031 	.word	0x08009031
 8009014:	08009039 	.word	0x08009039
 8009018:	08009041 	.word	0x08009041
 800901c:	08009049 	.word	0x08009049
 8009020:	2300      	movs	r3, #0
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e2f0      	b.n	800960a <UART_SetConfig+0x7ae>
 8009028:	2304      	movs	r3, #4
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e2ec      	b.n	800960a <UART_SetConfig+0x7ae>
 8009030:	2308      	movs	r3, #8
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e2e8      	b.n	800960a <UART_SetConfig+0x7ae>
 8009038:	2310      	movs	r3, #16
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903e:	e2e4      	b.n	800960a <UART_SetConfig+0x7ae>
 8009040:	2320      	movs	r3, #32
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e2e0      	b.n	800960a <UART_SetConfig+0x7ae>
 8009048:	2340      	movs	r3, #64	@ 0x40
 800904a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904e:	e2dc      	b.n	800960a <UART_SetConfig+0x7ae>
 8009050:	2380      	movs	r3, #128	@ 0x80
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009056:	e2d8      	b.n	800960a <UART_SetConfig+0x7ae>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a4f      	ldr	r2, [pc, #316]	@ (800919c <UART_SetConfig+0x340>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d130      	bne.n	80090c4 <UART_SetConfig+0x268>
 8009062:	4b4c      	ldr	r3, [pc, #304]	@ (8009194 <UART_SetConfig+0x338>)
 8009064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	2b05      	cmp	r3, #5
 800906c:	d826      	bhi.n	80090bc <UART_SetConfig+0x260>
 800906e:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <UART_SetConfig+0x218>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	0800908d 	.word	0x0800908d
 8009078:	08009095 	.word	0x08009095
 800907c:	0800909d 	.word	0x0800909d
 8009080:	080090a5 	.word	0x080090a5
 8009084:	080090ad 	.word	0x080090ad
 8009088:	080090b5 	.word	0x080090b5
 800908c:	2300      	movs	r3, #0
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e2ba      	b.n	800960a <UART_SetConfig+0x7ae>
 8009094:	2304      	movs	r3, #4
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909a:	e2b6      	b.n	800960a <UART_SetConfig+0x7ae>
 800909c:	2308      	movs	r3, #8
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a2:	e2b2      	b.n	800960a <UART_SetConfig+0x7ae>
 80090a4:	2310      	movs	r3, #16
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090aa:	e2ae      	b.n	800960a <UART_SetConfig+0x7ae>
 80090ac:	2320      	movs	r3, #32
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b2:	e2aa      	b.n	800960a <UART_SetConfig+0x7ae>
 80090b4:	2340      	movs	r3, #64	@ 0x40
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ba:	e2a6      	b.n	800960a <UART_SetConfig+0x7ae>
 80090bc:	2380      	movs	r3, #128	@ 0x80
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e2a2      	b.n	800960a <UART_SetConfig+0x7ae>
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a35      	ldr	r2, [pc, #212]	@ (80091a0 <UART_SetConfig+0x344>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d130      	bne.n	8009130 <UART_SetConfig+0x2d4>
 80090ce:	4b31      	ldr	r3, [pc, #196]	@ (8009194 <UART_SetConfig+0x338>)
 80090d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	2b05      	cmp	r3, #5
 80090d8:	d826      	bhi.n	8009128 <UART_SetConfig+0x2cc>
 80090da:	a201      	add	r2, pc, #4	@ (adr r2, 80090e0 <UART_SetConfig+0x284>)
 80090dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e0:	080090f9 	.word	0x080090f9
 80090e4:	08009101 	.word	0x08009101
 80090e8:	08009109 	.word	0x08009109
 80090ec:	08009111 	.word	0x08009111
 80090f0:	08009119 	.word	0x08009119
 80090f4:	08009121 	.word	0x08009121
 80090f8:	2300      	movs	r3, #0
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e284      	b.n	800960a <UART_SetConfig+0x7ae>
 8009100:	2304      	movs	r3, #4
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e280      	b.n	800960a <UART_SetConfig+0x7ae>
 8009108:	2308      	movs	r3, #8
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e27c      	b.n	800960a <UART_SetConfig+0x7ae>
 8009110:	2310      	movs	r3, #16
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e278      	b.n	800960a <UART_SetConfig+0x7ae>
 8009118:	2320      	movs	r3, #32
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e274      	b.n	800960a <UART_SetConfig+0x7ae>
 8009120:	2340      	movs	r3, #64	@ 0x40
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009126:	e270      	b.n	800960a <UART_SetConfig+0x7ae>
 8009128:	2380      	movs	r3, #128	@ 0x80
 800912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912e:	e26c      	b.n	800960a <UART_SetConfig+0x7ae>
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a1b      	ldr	r2, [pc, #108]	@ (80091a4 <UART_SetConfig+0x348>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d142      	bne.n	80091c0 <UART_SetConfig+0x364>
 800913a:	4b16      	ldr	r3, [pc, #88]	@ (8009194 <UART_SetConfig+0x338>)
 800913c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	2b05      	cmp	r3, #5
 8009144:	d838      	bhi.n	80091b8 <UART_SetConfig+0x35c>
 8009146:	a201      	add	r2, pc, #4	@ (adr r2, 800914c <UART_SetConfig+0x2f0>)
 8009148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914c:	08009165 	.word	0x08009165
 8009150:	0800916d 	.word	0x0800916d
 8009154:	08009175 	.word	0x08009175
 8009158:	0800917d 	.word	0x0800917d
 800915c:	080091a9 	.word	0x080091a9
 8009160:	080091b1 	.word	0x080091b1
 8009164:	2300      	movs	r3, #0
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e24e      	b.n	800960a <UART_SetConfig+0x7ae>
 800916c:	2304      	movs	r3, #4
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009172:	e24a      	b.n	800960a <UART_SetConfig+0x7ae>
 8009174:	2308      	movs	r3, #8
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917a:	e246      	b.n	800960a <UART_SetConfig+0x7ae>
 800917c:	2310      	movs	r3, #16
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009182:	e242      	b.n	800960a <UART_SetConfig+0x7ae>
 8009184:	cfff69f3 	.word	0xcfff69f3
 8009188:	58000c00 	.word	0x58000c00
 800918c:	11fff4ff 	.word	0x11fff4ff
 8009190:	40011000 	.word	0x40011000
 8009194:	58024400 	.word	0x58024400
 8009198:	40004400 	.word	0x40004400
 800919c:	40004800 	.word	0x40004800
 80091a0:	40004c00 	.word	0x40004c00
 80091a4:	40005000 	.word	0x40005000
 80091a8:	2320      	movs	r3, #32
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e22c      	b.n	800960a <UART_SetConfig+0x7ae>
 80091b0:	2340      	movs	r3, #64	@ 0x40
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e228      	b.n	800960a <UART_SetConfig+0x7ae>
 80091b8:	2380      	movs	r3, #128	@ 0x80
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e224      	b.n	800960a <UART_SetConfig+0x7ae>
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4ab1      	ldr	r2, [pc, #708]	@ (800948c <UART_SetConfig+0x630>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d176      	bne.n	80092b8 <UART_SetConfig+0x45c>
 80091ca:	4bb1      	ldr	r3, [pc, #708]	@ (8009490 <UART_SetConfig+0x634>)
 80091cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091d2:	2b28      	cmp	r3, #40	@ 0x28
 80091d4:	d86c      	bhi.n	80092b0 <UART_SetConfig+0x454>
 80091d6:	a201      	add	r2, pc, #4	@ (adr r2, 80091dc <UART_SetConfig+0x380>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	08009281 	.word	0x08009281
 80091e0:	080092b1 	.word	0x080092b1
 80091e4:	080092b1 	.word	0x080092b1
 80091e8:	080092b1 	.word	0x080092b1
 80091ec:	080092b1 	.word	0x080092b1
 80091f0:	080092b1 	.word	0x080092b1
 80091f4:	080092b1 	.word	0x080092b1
 80091f8:	080092b1 	.word	0x080092b1
 80091fc:	08009289 	.word	0x08009289
 8009200:	080092b1 	.word	0x080092b1
 8009204:	080092b1 	.word	0x080092b1
 8009208:	080092b1 	.word	0x080092b1
 800920c:	080092b1 	.word	0x080092b1
 8009210:	080092b1 	.word	0x080092b1
 8009214:	080092b1 	.word	0x080092b1
 8009218:	080092b1 	.word	0x080092b1
 800921c:	08009291 	.word	0x08009291
 8009220:	080092b1 	.word	0x080092b1
 8009224:	080092b1 	.word	0x080092b1
 8009228:	080092b1 	.word	0x080092b1
 800922c:	080092b1 	.word	0x080092b1
 8009230:	080092b1 	.word	0x080092b1
 8009234:	080092b1 	.word	0x080092b1
 8009238:	080092b1 	.word	0x080092b1
 800923c:	08009299 	.word	0x08009299
 8009240:	080092b1 	.word	0x080092b1
 8009244:	080092b1 	.word	0x080092b1
 8009248:	080092b1 	.word	0x080092b1
 800924c:	080092b1 	.word	0x080092b1
 8009250:	080092b1 	.word	0x080092b1
 8009254:	080092b1 	.word	0x080092b1
 8009258:	080092b1 	.word	0x080092b1
 800925c:	080092a1 	.word	0x080092a1
 8009260:	080092b1 	.word	0x080092b1
 8009264:	080092b1 	.word	0x080092b1
 8009268:	080092b1 	.word	0x080092b1
 800926c:	080092b1 	.word	0x080092b1
 8009270:	080092b1 	.word	0x080092b1
 8009274:	080092b1 	.word	0x080092b1
 8009278:	080092b1 	.word	0x080092b1
 800927c:	080092a9 	.word	0x080092a9
 8009280:	2301      	movs	r3, #1
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e1c0      	b.n	800960a <UART_SetConfig+0x7ae>
 8009288:	2304      	movs	r3, #4
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e1bc      	b.n	800960a <UART_SetConfig+0x7ae>
 8009290:	2308      	movs	r3, #8
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e1b8      	b.n	800960a <UART_SetConfig+0x7ae>
 8009298:	2310      	movs	r3, #16
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929e:	e1b4      	b.n	800960a <UART_SetConfig+0x7ae>
 80092a0:	2320      	movs	r3, #32
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e1b0      	b.n	800960a <UART_SetConfig+0x7ae>
 80092a8:	2340      	movs	r3, #64	@ 0x40
 80092aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ae:	e1ac      	b.n	800960a <UART_SetConfig+0x7ae>
 80092b0:	2380      	movs	r3, #128	@ 0x80
 80092b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b6:	e1a8      	b.n	800960a <UART_SetConfig+0x7ae>
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a75      	ldr	r2, [pc, #468]	@ (8009494 <UART_SetConfig+0x638>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d130      	bne.n	8009324 <UART_SetConfig+0x4c8>
 80092c2:	4b73      	ldr	r3, [pc, #460]	@ (8009490 <UART_SetConfig+0x634>)
 80092c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	d826      	bhi.n	800931c <UART_SetConfig+0x4c0>
 80092ce:	a201      	add	r2, pc, #4	@ (adr r2, 80092d4 <UART_SetConfig+0x478>)
 80092d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d4:	080092ed 	.word	0x080092ed
 80092d8:	080092f5 	.word	0x080092f5
 80092dc:	080092fd 	.word	0x080092fd
 80092e0:	08009305 	.word	0x08009305
 80092e4:	0800930d 	.word	0x0800930d
 80092e8:	08009315 	.word	0x08009315
 80092ec:	2300      	movs	r3, #0
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e18a      	b.n	800960a <UART_SetConfig+0x7ae>
 80092f4:	2304      	movs	r3, #4
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fa:	e186      	b.n	800960a <UART_SetConfig+0x7ae>
 80092fc:	2308      	movs	r3, #8
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e182      	b.n	800960a <UART_SetConfig+0x7ae>
 8009304:	2310      	movs	r3, #16
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930a:	e17e      	b.n	800960a <UART_SetConfig+0x7ae>
 800930c:	2320      	movs	r3, #32
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e17a      	b.n	800960a <UART_SetConfig+0x7ae>
 8009314:	2340      	movs	r3, #64	@ 0x40
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931a:	e176      	b.n	800960a <UART_SetConfig+0x7ae>
 800931c:	2380      	movs	r3, #128	@ 0x80
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009322:	e172      	b.n	800960a <UART_SetConfig+0x7ae>
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a5b      	ldr	r2, [pc, #364]	@ (8009498 <UART_SetConfig+0x63c>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d130      	bne.n	8009390 <UART_SetConfig+0x534>
 800932e:	4b58      	ldr	r3, [pc, #352]	@ (8009490 <UART_SetConfig+0x634>)
 8009330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	2b05      	cmp	r3, #5
 8009338:	d826      	bhi.n	8009388 <UART_SetConfig+0x52c>
 800933a:	a201      	add	r2, pc, #4	@ (adr r2, 8009340 <UART_SetConfig+0x4e4>)
 800933c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009340:	08009359 	.word	0x08009359
 8009344:	08009361 	.word	0x08009361
 8009348:	08009369 	.word	0x08009369
 800934c:	08009371 	.word	0x08009371
 8009350:	08009379 	.word	0x08009379
 8009354:	08009381 	.word	0x08009381
 8009358:	2300      	movs	r3, #0
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e154      	b.n	800960a <UART_SetConfig+0x7ae>
 8009360:	2304      	movs	r3, #4
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009366:	e150      	b.n	800960a <UART_SetConfig+0x7ae>
 8009368:	2308      	movs	r3, #8
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936e:	e14c      	b.n	800960a <UART_SetConfig+0x7ae>
 8009370:	2310      	movs	r3, #16
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009376:	e148      	b.n	800960a <UART_SetConfig+0x7ae>
 8009378:	2320      	movs	r3, #32
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e144      	b.n	800960a <UART_SetConfig+0x7ae>
 8009380:	2340      	movs	r3, #64	@ 0x40
 8009382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009386:	e140      	b.n	800960a <UART_SetConfig+0x7ae>
 8009388:	2380      	movs	r3, #128	@ 0x80
 800938a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938e:	e13c      	b.n	800960a <UART_SetConfig+0x7ae>
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a41      	ldr	r2, [pc, #260]	@ (800949c <UART_SetConfig+0x640>)
 8009396:	4293      	cmp	r3, r2
 8009398:	f040 8082 	bne.w	80094a0 <UART_SetConfig+0x644>
 800939c:	4b3c      	ldr	r3, [pc, #240]	@ (8009490 <UART_SetConfig+0x634>)
 800939e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093a4:	2b28      	cmp	r3, #40	@ 0x28
 80093a6:	d86d      	bhi.n	8009484 <UART_SetConfig+0x628>
 80093a8:	a201      	add	r2, pc, #4	@ (adr r2, 80093b0 <UART_SetConfig+0x554>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	08009455 	.word	0x08009455
 80093b4:	08009485 	.word	0x08009485
 80093b8:	08009485 	.word	0x08009485
 80093bc:	08009485 	.word	0x08009485
 80093c0:	08009485 	.word	0x08009485
 80093c4:	08009485 	.word	0x08009485
 80093c8:	08009485 	.word	0x08009485
 80093cc:	08009485 	.word	0x08009485
 80093d0:	0800945d 	.word	0x0800945d
 80093d4:	08009485 	.word	0x08009485
 80093d8:	08009485 	.word	0x08009485
 80093dc:	08009485 	.word	0x08009485
 80093e0:	08009485 	.word	0x08009485
 80093e4:	08009485 	.word	0x08009485
 80093e8:	08009485 	.word	0x08009485
 80093ec:	08009485 	.word	0x08009485
 80093f0:	08009465 	.word	0x08009465
 80093f4:	08009485 	.word	0x08009485
 80093f8:	08009485 	.word	0x08009485
 80093fc:	08009485 	.word	0x08009485
 8009400:	08009485 	.word	0x08009485
 8009404:	08009485 	.word	0x08009485
 8009408:	08009485 	.word	0x08009485
 800940c:	08009485 	.word	0x08009485
 8009410:	0800946d 	.word	0x0800946d
 8009414:	08009485 	.word	0x08009485
 8009418:	08009485 	.word	0x08009485
 800941c:	08009485 	.word	0x08009485
 8009420:	08009485 	.word	0x08009485
 8009424:	08009485 	.word	0x08009485
 8009428:	08009485 	.word	0x08009485
 800942c:	08009485 	.word	0x08009485
 8009430:	08009475 	.word	0x08009475
 8009434:	08009485 	.word	0x08009485
 8009438:	08009485 	.word	0x08009485
 800943c:	08009485 	.word	0x08009485
 8009440:	08009485 	.word	0x08009485
 8009444:	08009485 	.word	0x08009485
 8009448:	08009485 	.word	0x08009485
 800944c:	08009485 	.word	0x08009485
 8009450:	0800947d 	.word	0x0800947d
 8009454:	2301      	movs	r3, #1
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e0d6      	b.n	800960a <UART_SetConfig+0x7ae>
 800945c:	2304      	movs	r3, #4
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e0d2      	b.n	800960a <UART_SetConfig+0x7ae>
 8009464:	2308      	movs	r3, #8
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e0ce      	b.n	800960a <UART_SetConfig+0x7ae>
 800946c:	2310      	movs	r3, #16
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e0ca      	b.n	800960a <UART_SetConfig+0x7ae>
 8009474:	2320      	movs	r3, #32
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e0c6      	b.n	800960a <UART_SetConfig+0x7ae>
 800947c:	2340      	movs	r3, #64	@ 0x40
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e0c2      	b.n	800960a <UART_SetConfig+0x7ae>
 8009484:	2380      	movs	r3, #128	@ 0x80
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e0be      	b.n	800960a <UART_SetConfig+0x7ae>
 800948c:	40011400 	.word	0x40011400
 8009490:	58024400 	.word	0x58024400
 8009494:	40007800 	.word	0x40007800
 8009498:	40007c00 	.word	0x40007c00
 800949c:	40011800 	.word	0x40011800
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4aad      	ldr	r2, [pc, #692]	@ (800975c <UART_SetConfig+0x900>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d176      	bne.n	8009598 <UART_SetConfig+0x73c>
 80094aa:	4bad      	ldr	r3, [pc, #692]	@ (8009760 <UART_SetConfig+0x904>)
 80094ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094b2:	2b28      	cmp	r3, #40	@ 0x28
 80094b4:	d86c      	bhi.n	8009590 <UART_SetConfig+0x734>
 80094b6:	a201      	add	r2, pc, #4	@ (adr r2, 80094bc <UART_SetConfig+0x660>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	08009561 	.word	0x08009561
 80094c0:	08009591 	.word	0x08009591
 80094c4:	08009591 	.word	0x08009591
 80094c8:	08009591 	.word	0x08009591
 80094cc:	08009591 	.word	0x08009591
 80094d0:	08009591 	.word	0x08009591
 80094d4:	08009591 	.word	0x08009591
 80094d8:	08009591 	.word	0x08009591
 80094dc:	08009569 	.word	0x08009569
 80094e0:	08009591 	.word	0x08009591
 80094e4:	08009591 	.word	0x08009591
 80094e8:	08009591 	.word	0x08009591
 80094ec:	08009591 	.word	0x08009591
 80094f0:	08009591 	.word	0x08009591
 80094f4:	08009591 	.word	0x08009591
 80094f8:	08009591 	.word	0x08009591
 80094fc:	08009571 	.word	0x08009571
 8009500:	08009591 	.word	0x08009591
 8009504:	08009591 	.word	0x08009591
 8009508:	08009591 	.word	0x08009591
 800950c:	08009591 	.word	0x08009591
 8009510:	08009591 	.word	0x08009591
 8009514:	08009591 	.word	0x08009591
 8009518:	08009591 	.word	0x08009591
 800951c:	08009579 	.word	0x08009579
 8009520:	08009591 	.word	0x08009591
 8009524:	08009591 	.word	0x08009591
 8009528:	08009591 	.word	0x08009591
 800952c:	08009591 	.word	0x08009591
 8009530:	08009591 	.word	0x08009591
 8009534:	08009591 	.word	0x08009591
 8009538:	08009591 	.word	0x08009591
 800953c:	08009581 	.word	0x08009581
 8009540:	08009591 	.word	0x08009591
 8009544:	08009591 	.word	0x08009591
 8009548:	08009591 	.word	0x08009591
 800954c:	08009591 	.word	0x08009591
 8009550:	08009591 	.word	0x08009591
 8009554:	08009591 	.word	0x08009591
 8009558:	08009591 	.word	0x08009591
 800955c:	08009589 	.word	0x08009589
 8009560:	2301      	movs	r3, #1
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e050      	b.n	800960a <UART_SetConfig+0x7ae>
 8009568:	2304      	movs	r3, #4
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e04c      	b.n	800960a <UART_SetConfig+0x7ae>
 8009570:	2308      	movs	r3, #8
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e048      	b.n	800960a <UART_SetConfig+0x7ae>
 8009578:	2310      	movs	r3, #16
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e044      	b.n	800960a <UART_SetConfig+0x7ae>
 8009580:	2320      	movs	r3, #32
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e040      	b.n	800960a <UART_SetConfig+0x7ae>
 8009588:	2340      	movs	r3, #64	@ 0x40
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e03c      	b.n	800960a <UART_SetConfig+0x7ae>
 8009590:	2380      	movs	r3, #128	@ 0x80
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e038      	b.n	800960a <UART_SetConfig+0x7ae>
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a71      	ldr	r2, [pc, #452]	@ (8009764 <UART_SetConfig+0x908>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d130      	bne.n	8009604 <UART_SetConfig+0x7a8>
 80095a2:	4b6f      	ldr	r3, [pc, #444]	@ (8009760 <UART_SetConfig+0x904>)
 80095a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b05      	cmp	r3, #5
 80095ac:	d826      	bhi.n	80095fc <UART_SetConfig+0x7a0>
 80095ae:	a201      	add	r2, pc, #4	@ (adr r2, 80095b4 <UART_SetConfig+0x758>)
 80095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b4:	080095cd 	.word	0x080095cd
 80095b8:	080095d5 	.word	0x080095d5
 80095bc:	080095dd 	.word	0x080095dd
 80095c0:	080095e5 	.word	0x080095e5
 80095c4:	080095ed 	.word	0x080095ed
 80095c8:	080095f5 	.word	0x080095f5
 80095cc:	2302      	movs	r3, #2
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d2:	e01a      	b.n	800960a <UART_SetConfig+0x7ae>
 80095d4:	2304      	movs	r3, #4
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e016      	b.n	800960a <UART_SetConfig+0x7ae>
 80095dc:	2308      	movs	r3, #8
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e012      	b.n	800960a <UART_SetConfig+0x7ae>
 80095e4:	2310      	movs	r3, #16
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e00e      	b.n	800960a <UART_SetConfig+0x7ae>
 80095ec:	2320      	movs	r3, #32
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e00a      	b.n	800960a <UART_SetConfig+0x7ae>
 80095f4:	2340      	movs	r3, #64	@ 0x40
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e006      	b.n	800960a <UART_SetConfig+0x7ae>
 80095fc:	2380      	movs	r3, #128	@ 0x80
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e002      	b.n	800960a <UART_SetConfig+0x7ae>
 8009604:	2380      	movs	r3, #128	@ 0x80
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a55      	ldr	r2, [pc, #340]	@ (8009764 <UART_SetConfig+0x908>)
 8009610:	4293      	cmp	r3, r2
 8009612:	f040 80f8 	bne.w	8009806 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009616:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800961a:	2b20      	cmp	r3, #32
 800961c:	dc46      	bgt.n	80096ac <UART_SetConfig+0x850>
 800961e:	2b02      	cmp	r3, #2
 8009620:	db75      	blt.n	800970e <UART_SetConfig+0x8b2>
 8009622:	3b02      	subs	r3, #2
 8009624:	2b1e      	cmp	r3, #30
 8009626:	d872      	bhi.n	800970e <UART_SetConfig+0x8b2>
 8009628:	a201      	add	r2, pc, #4	@ (adr r2, 8009630 <UART_SetConfig+0x7d4>)
 800962a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962e:	bf00      	nop
 8009630:	080096b3 	.word	0x080096b3
 8009634:	0800970f 	.word	0x0800970f
 8009638:	080096bb 	.word	0x080096bb
 800963c:	0800970f 	.word	0x0800970f
 8009640:	0800970f 	.word	0x0800970f
 8009644:	0800970f 	.word	0x0800970f
 8009648:	080096cb 	.word	0x080096cb
 800964c:	0800970f 	.word	0x0800970f
 8009650:	0800970f 	.word	0x0800970f
 8009654:	0800970f 	.word	0x0800970f
 8009658:	0800970f 	.word	0x0800970f
 800965c:	0800970f 	.word	0x0800970f
 8009660:	0800970f 	.word	0x0800970f
 8009664:	0800970f 	.word	0x0800970f
 8009668:	080096db 	.word	0x080096db
 800966c:	0800970f 	.word	0x0800970f
 8009670:	0800970f 	.word	0x0800970f
 8009674:	0800970f 	.word	0x0800970f
 8009678:	0800970f 	.word	0x0800970f
 800967c:	0800970f 	.word	0x0800970f
 8009680:	0800970f 	.word	0x0800970f
 8009684:	0800970f 	.word	0x0800970f
 8009688:	0800970f 	.word	0x0800970f
 800968c:	0800970f 	.word	0x0800970f
 8009690:	0800970f 	.word	0x0800970f
 8009694:	0800970f 	.word	0x0800970f
 8009698:	0800970f 	.word	0x0800970f
 800969c:	0800970f 	.word	0x0800970f
 80096a0:	0800970f 	.word	0x0800970f
 80096a4:	0800970f 	.word	0x0800970f
 80096a8:	08009701 	.word	0x08009701
 80096ac:	2b40      	cmp	r3, #64	@ 0x40
 80096ae:	d02a      	beq.n	8009706 <UART_SetConfig+0x8aa>
 80096b0:	e02d      	b.n	800970e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096b2:	f7fc fd43 	bl	800613c <HAL_RCCEx_GetD3PCLK1Freq>
 80096b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096b8:	e02f      	b.n	800971a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fc fd52 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c8:	e027      	b.n	800971a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096ca:	f107 0318 	add.w	r3, r7, #24
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fc fe9e 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d8:	e01f      	b.n	800971a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096da:	4b21      	ldr	r3, [pc, #132]	@ (8009760 <UART_SetConfig+0x904>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d009      	beq.n	80096fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009760 <UART_SetConfig+0x904>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	08db      	lsrs	r3, r3, #3
 80096ec:	f003 0303 	and.w	r3, r3, #3
 80096f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009768 <UART_SetConfig+0x90c>)
 80096f2:	fa22 f303 	lsr.w	r3, r2, r3
 80096f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096f8:	e00f      	b.n	800971a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80096fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009768 <UART_SetConfig+0x90c>)
 80096fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096fe:	e00c      	b.n	800971a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009700:	4b1a      	ldr	r3, [pc, #104]	@ (800976c <UART_SetConfig+0x910>)
 8009702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009704:	e009      	b.n	800971a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800970a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800970c:	e005      	b.n	800971a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800970e:	2300      	movs	r3, #0
 8009710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800971a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 81ee 	beq.w	8009afe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009726:	4a12      	ldr	r2, [pc, #72]	@ (8009770 <UART_SetConfig+0x914>)
 8009728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800972c:	461a      	mov	r2, r3
 800972e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009730:	fbb3 f3f2 	udiv	r3, r3, r2
 8009734:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	4613      	mov	r3, r2
 800973c:	005b      	lsls	r3, r3, #1
 800973e:	4413      	add	r3, r2
 8009740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009742:	429a      	cmp	r2, r3
 8009744:	d305      	bcc.n	8009752 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800974c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800974e:	429a      	cmp	r2, r3
 8009750:	d910      	bls.n	8009774 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009758:	e1d1      	b.n	8009afe <UART_SetConfig+0xca2>
 800975a:	bf00      	nop
 800975c:	40011c00 	.word	0x40011c00
 8009760:	58024400 	.word	0x58024400
 8009764:	58000c00 	.word	0x58000c00
 8009768:	03d09000 	.word	0x03d09000
 800976c:	003d0900 	.word	0x003d0900
 8009770:	080108d4 	.word	0x080108d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009776:	2200      	movs	r2, #0
 8009778:	60bb      	str	r3, [r7, #8]
 800977a:	60fa      	str	r2, [r7, #12]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009780:	4ac0      	ldr	r2, [pc, #768]	@ (8009a84 <UART_SetConfig+0xc28>)
 8009782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009786:	b29b      	uxth	r3, r3
 8009788:	2200      	movs	r2, #0
 800978a:	603b      	str	r3, [r7, #0]
 800978c:	607a      	str	r2, [r7, #4]
 800978e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009796:	f7f6 ffcf 	bl	8000738 <__aeabi_uldivmod>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4610      	mov	r0, r2
 80097a0:	4619      	mov	r1, r3
 80097a2:	f04f 0200 	mov.w	r2, #0
 80097a6:	f04f 0300 	mov.w	r3, #0
 80097aa:	020b      	lsls	r3, r1, #8
 80097ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097b0:	0202      	lsls	r2, r0, #8
 80097b2:	6979      	ldr	r1, [r7, #20]
 80097b4:	6849      	ldr	r1, [r1, #4]
 80097b6:	0849      	lsrs	r1, r1, #1
 80097b8:	2000      	movs	r0, #0
 80097ba:	460c      	mov	r4, r1
 80097bc:	4605      	mov	r5, r0
 80097be:	eb12 0804 	adds.w	r8, r2, r4
 80097c2:	eb43 0905 	adc.w	r9, r3, r5
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	469a      	mov	sl, r3
 80097ce:	4693      	mov	fp, r2
 80097d0:	4652      	mov	r2, sl
 80097d2:	465b      	mov	r3, fp
 80097d4:	4640      	mov	r0, r8
 80097d6:	4649      	mov	r1, r9
 80097d8:	f7f6 ffae 	bl	8000738 <__aeabi_uldivmod>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	4613      	mov	r3, r2
 80097e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097ea:	d308      	bcc.n	80097fe <UART_SetConfig+0x9a2>
 80097ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097f2:	d204      	bcs.n	80097fe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097fa:	60da      	str	r2, [r3, #12]
 80097fc:	e17f      	b.n	8009afe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009804:	e17b      	b.n	8009afe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800980e:	f040 80bd 	bne.w	800998c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009812:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009816:	2b20      	cmp	r3, #32
 8009818:	dc48      	bgt.n	80098ac <UART_SetConfig+0xa50>
 800981a:	2b00      	cmp	r3, #0
 800981c:	db7b      	blt.n	8009916 <UART_SetConfig+0xaba>
 800981e:	2b20      	cmp	r3, #32
 8009820:	d879      	bhi.n	8009916 <UART_SetConfig+0xaba>
 8009822:	a201      	add	r2, pc, #4	@ (adr r2, 8009828 <UART_SetConfig+0x9cc>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	080098b3 	.word	0x080098b3
 800982c:	080098bb 	.word	0x080098bb
 8009830:	08009917 	.word	0x08009917
 8009834:	08009917 	.word	0x08009917
 8009838:	080098c3 	.word	0x080098c3
 800983c:	08009917 	.word	0x08009917
 8009840:	08009917 	.word	0x08009917
 8009844:	08009917 	.word	0x08009917
 8009848:	080098d3 	.word	0x080098d3
 800984c:	08009917 	.word	0x08009917
 8009850:	08009917 	.word	0x08009917
 8009854:	08009917 	.word	0x08009917
 8009858:	08009917 	.word	0x08009917
 800985c:	08009917 	.word	0x08009917
 8009860:	08009917 	.word	0x08009917
 8009864:	08009917 	.word	0x08009917
 8009868:	080098e3 	.word	0x080098e3
 800986c:	08009917 	.word	0x08009917
 8009870:	08009917 	.word	0x08009917
 8009874:	08009917 	.word	0x08009917
 8009878:	08009917 	.word	0x08009917
 800987c:	08009917 	.word	0x08009917
 8009880:	08009917 	.word	0x08009917
 8009884:	08009917 	.word	0x08009917
 8009888:	08009917 	.word	0x08009917
 800988c:	08009917 	.word	0x08009917
 8009890:	08009917 	.word	0x08009917
 8009894:	08009917 	.word	0x08009917
 8009898:	08009917 	.word	0x08009917
 800989c:	08009917 	.word	0x08009917
 80098a0:	08009917 	.word	0x08009917
 80098a4:	08009917 	.word	0x08009917
 80098a8:	08009909 	.word	0x08009909
 80098ac:	2b40      	cmp	r3, #64	@ 0x40
 80098ae:	d02e      	beq.n	800990e <UART_SetConfig+0xab2>
 80098b0:	e031      	b.n	8009916 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098b2:	f7fa fda5 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 80098b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098b8:	e033      	b.n	8009922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098ba:	f7fa fdb7 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 80098be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098c0:	e02f      	b.n	8009922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fc fc4e 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d0:	e027      	b.n	8009922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098d2:	f107 0318 	add.w	r3, r7, #24
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fc fd9a 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e0:	e01f      	b.n	8009922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e2:	4b69      	ldr	r3, [pc, #420]	@ (8009a88 <UART_SetConfig+0xc2c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 0320 	and.w	r3, r3, #32
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d009      	beq.n	8009902 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098ee:	4b66      	ldr	r3, [pc, #408]	@ (8009a88 <UART_SetConfig+0xc2c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	08db      	lsrs	r3, r3, #3
 80098f4:	f003 0303 	and.w	r3, r3, #3
 80098f8:	4a64      	ldr	r2, [pc, #400]	@ (8009a8c <UART_SetConfig+0xc30>)
 80098fa:	fa22 f303 	lsr.w	r3, r2, r3
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009900:	e00f      	b.n	8009922 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009902:	4b62      	ldr	r3, [pc, #392]	@ (8009a8c <UART_SetConfig+0xc30>)
 8009904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009906:	e00c      	b.n	8009922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009908:	4b61      	ldr	r3, [pc, #388]	@ (8009a90 <UART_SetConfig+0xc34>)
 800990a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800990c:	e009      	b.n	8009922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800990e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009914:	e005      	b.n	8009922 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 80ea 	beq.w	8009afe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800992e:	4a55      	ldr	r2, [pc, #340]	@ (8009a84 <UART_SetConfig+0xc28>)
 8009930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009934:	461a      	mov	r2, r3
 8009936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009938:	fbb3 f3f2 	udiv	r3, r3, r2
 800993c:	005a      	lsls	r2, r3, #1
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	085b      	lsrs	r3, r3, #1
 8009944:	441a      	add	r2, r3
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	fbb2 f3f3 	udiv	r3, r2, r3
 800994e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009952:	2b0f      	cmp	r3, #15
 8009954:	d916      	bls.n	8009984 <UART_SetConfig+0xb28>
 8009956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800995c:	d212      	bcs.n	8009984 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800995e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009960:	b29b      	uxth	r3, r3
 8009962:	f023 030f 	bic.w	r3, r3, #15
 8009966:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996a:	085b      	lsrs	r3, r3, #1
 800996c:	b29b      	uxth	r3, r3
 800996e:	f003 0307 	and.w	r3, r3, #7
 8009972:	b29a      	uxth	r2, r3
 8009974:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009976:	4313      	orrs	r3, r2
 8009978:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009980:	60da      	str	r2, [r3, #12]
 8009982:	e0bc      	b.n	8009afe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800998a:	e0b8      	b.n	8009afe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800998c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009990:	2b20      	cmp	r3, #32
 8009992:	dc4b      	bgt.n	8009a2c <UART_SetConfig+0xbd0>
 8009994:	2b00      	cmp	r3, #0
 8009996:	f2c0 8087 	blt.w	8009aa8 <UART_SetConfig+0xc4c>
 800999a:	2b20      	cmp	r3, #32
 800999c:	f200 8084 	bhi.w	8009aa8 <UART_SetConfig+0xc4c>
 80099a0:	a201      	add	r2, pc, #4	@ (adr r2, 80099a8 <UART_SetConfig+0xb4c>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	08009a33 	.word	0x08009a33
 80099ac:	08009a3b 	.word	0x08009a3b
 80099b0:	08009aa9 	.word	0x08009aa9
 80099b4:	08009aa9 	.word	0x08009aa9
 80099b8:	08009a43 	.word	0x08009a43
 80099bc:	08009aa9 	.word	0x08009aa9
 80099c0:	08009aa9 	.word	0x08009aa9
 80099c4:	08009aa9 	.word	0x08009aa9
 80099c8:	08009a53 	.word	0x08009a53
 80099cc:	08009aa9 	.word	0x08009aa9
 80099d0:	08009aa9 	.word	0x08009aa9
 80099d4:	08009aa9 	.word	0x08009aa9
 80099d8:	08009aa9 	.word	0x08009aa9
 80099dc:	08009aa9 	.word	0x08009aa9
 80099e0:	08009aa9 	.word	0x08009aa9
 80099e4:	08009aa9 	.word	0x08009aa9
 80099e8:	08009a63 	.word	0x08009a63
 80099ec:	08009aa9 	.word	0x08009aa9
 80099f0:	08009aa9 	.word	0x08009aa9
 80099f4:	08009aa9 	.word	0x08009aa9
 80099f8:	08009aa9 	.word	0x08009aa9
 80099fc:	08009aa9 	.word	0x08009aa9
 8009a00:	08009aa9 	.word	0x08009aa9
 8009a04:	08009aa9 	.word	0x08009aa9
 8009a08:	08009aa9 	.word	0x08009aa9
 8009a0c:	08009aa9 	.word	0x08009aa9
 8009a10:	08009aa9 	.word	0x08009aa9
 8009a14:	08009aa9 	.word	0x08009aa9
 8009a18:	08009aa9 	.word	0x08009aa9
 8009a1c:	08009aa9 	.word	0x08009aa9
 8009a20:	08009aa9 	.word	0x08009aa9
 8009a24:	08009aa9 	.word	0x08009aa9
 8009a28:	08009a9b 	.word	0x08009a9b
 8009a2c:	2b40      	cmp	r3, #64	@ 0x40
 8009a2e:	d037      	beq.n	8009aa0 <UART_SetConfig+0xc44>
 8009a30:	e03a      	b.n	8009aa8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a32:	f7fa fce5 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8009a36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a38:	e03c      	b.n	8009ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a3a:	f7fa fcf7 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 8009a3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a40:	e038      	b.n	8009ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fc fb8e 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a50:	e030      	b.n	8009ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a52:	f107 0318 	add.w	r3, r7, #24
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fc fcda 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a60:	e028      	b.n	8009ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a62:	4b09      	ldr	r3, [pc, #36]	@ (8009a88 <UART_SetConfig+0xc2c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0320 	and.w	r3, r3, #32
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d012      	beq.n	8009a94 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a6e:	4b06      	ldr	r3, [pc, #24]	@ (8009a88 <UART_SetConfig+0xc2c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	08db      	lsrs	r3, r3, #3
 8009a74:	f003 0303 	and.w	r3, r3, #3
 8009a78:	4a04      	ldr	r2, [pc, #16]	@ (8009a8c <UART_SetConfig+0xc30>)
 8009a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a80:	e018      	b.n	8009ab4 <UART_SetConfig+0xc58>
 8009a82:	bf00      	nop
 8009a84:	080108d4 	.word	0x080108d4
 8009a88:	58024400 	.word	0x58024400
 8009a8c:	03d09000 	.word	0x03d09000
 8009a90:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009a94:	4b24      	ldr	r3, [pc, #144]	@ (8009b28 <UART_SetConfig+0xccc>)
 8009a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a98:	e00c      	b.n	8009ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a9a:	4b24      	ldr	r3, [pc, #144]	@ (8009b2c <UART_SetConfig+0xcd0>)
 8009a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a9e:	e009      	b.n	8009ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa6:	e005      	b.n	8009ab4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ab2:	bf00      	nop
    }

    if (pclk != 0U)
 8009ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d021      	beq.n	8009afe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009abe:	4a1c      	ldr	r2, [pc, #112]	@ (8009b30 <UART_SetConfig+0xcd4>)
 8009ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac8:	fbb3 f2f2 	udiv	r2, r3, r2
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	085b      	lsrs	r3, r3, #1
 8009ad2:	441a      	add	r2, r3
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009adc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	2b0f      	cmp	r3, #15
 8009ae2:	d909      	bls.n	8009af8 <UART_SetConfig+0xc9c>
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009aea:	d205      	bcs.n	8009af8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	60da      	str	r2, [r3, #12]
 8009af6:	e002      	b.n	8009afe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2200      	movs	r2, #0
 8009b12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2200      	movs	r2, #0
 8009b18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b1a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3748      	adds	r7, #72	@ 0x48
 8009b22:	46bd      	mov	sp, r7
 8009b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b28:	03d09000 	.word	0x03d09000
 8009b2c:	003d0900 	.word	0x003d0900
 8009b30:	080108d4 	.word	0x080108d4

08009b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b40:	f003 0308 	and.w	r3, r3, #8
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00a      	beq.n	8009b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b84:	f003 0302 	and.w	r3, r3, #2
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00a      	beq.n	8009ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc8:	f003 0310 	and.w	r3, r3, #16
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00a      	beq.n	8009be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00a      	beq.n	8009c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	430a      	orrs	r2, r1
 8009c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01a      	beq.n	8009c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c32:	d10a      	bne.n	8009c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	605a      	str	r2, [r3, #4]
  }
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b098      	sub	sp, #96	@ 0x60
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c88:	f7f8 fa1c 	bl	80020c4 <HAL_GetTick>
 8009c8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 0308 	and.w	r3, r3, #8
 8009c98:	2b08      	cmp	r3, #8
 8009c9a:	d12f      	bne.n	8009cfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f88e 	bl	8009dcc <UART_WaitOnFlagUntilTimeout>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d022      	beq.n	8009cfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbe:	e853 3f00 	ldrex	r3, [r3]
 8009cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cca:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cdc:	e841 2300 	strex	r3, r2, [r1]
 8009ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1e6      	bne.n	8009cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e063      	b.n	8009dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0304 	and.w	r3, r3, #4
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	d149      	bne.n	8009d9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d12:	2200      	movs	r2, #0
 8009d14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f857 	bl	8009dcc <UART_WaitOnFlagUntilTimeout>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d03c      	beq.n	8009d9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2c:	e853 3f00 	ldrex	r3, [r3]
 8009d30:	623b      	str	r3, [r7, #32]
   return(result);
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d4a:	e841 2300 	strex	r3, r2, [r1]
 8009d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1e6      	bne.n	8009d24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f023 0301 	bic.w	r3, r3, #1
 8009d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3308      	adds	r3, #8
 8009d74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d76:	61fa      	str	r2, [r7, #28]
 8009d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	69b9      	ldr	r1, [r7, #24]
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	e841 2300 	strex	r3, r2, [r1]
 8009d82:	617b      	str	r3, [r7, #20]
   return(result);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1e5      	bne.n	8009d56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e012      	b.n	8009dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2220      	movs	r2, #32
 8009da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2220      	movs	r2, #32
 8009daa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3758      	adds	r7, #88	@ 0x58
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	603b      	str	r3, [r7, #0]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ddc:	e04f      	b.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de4:	d04b      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009de6:	f7f8 f96d 	bl	80020c4 <HAL_GetTick>
 8009dea:	4602      	mov	r2, r0
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d302      	bcc.n	8009dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e04e      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0304 	and.w	r3, r3, #4
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d037      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b80      	cmp	r3, #128	@ 0x80
 8009e12:	d034      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b40      	cmp	r3, #64	@ 0x40
 8009e18:	d031      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f003 0308 	and.w	r3, r3, #8
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d110      	bne.n	8009e4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2208      	movs	r2, #8
 8009e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 f839 	bl	8009ea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2208      	movs	r2, #8
 8009e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e029      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e58:	d111      	bne.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 f81f 	bl	8009ea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e00f      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4013      	ands	r3, r2
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	bf0c      	ite	eq
 8009e8e:	2301      	moveq	r3, #1
 8009e90:	2300      	movne	r3, #0
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	461a      	mov	r2, r3
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d0a0      	beq.n	8009dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b095      	sub	sp, #84	@ 0x54
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb8:	e853 3f00 	ldrex	r3, [r3]
 8009ebc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ece:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ed0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ed4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1e6      	bne.n	8009eb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8009f70 <UART_EndRxTransfer+0xc8>)
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3308      	adds	r3, #8
 8009f00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e5      	bne.n	8009ee2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d118      	bne.n	8009f50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	e853 3f00 	ldrex	r3, [r3]
 8009f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f023 0310 	bic.w	r3, r3, #16
 8009f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f3c:	61bb      	str	r3, [r7, #24]
 8009f3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f40:	6979      	ldr	r1, [r7, #20]
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	e841 2300 	strex	r3, r2, [r1]
 8009f48:	613b      	str	r3, [r7, #16]
   return(result);
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1e6      	bne.n	8009f1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2220      	movs	r2, #32
 8009f54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f64:	bf00      	nop
 8009f66:	3754      	adds	r7, #84	@ 0x54
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	effffffe 	.word	0xeffffffe

08009f74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7fe ff4c 	bl	8008e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f98:	bf00      	nop
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b088      	sub	sp, #32
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fbc:	61fb      	str	r3, [r7, #28]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	61bb      	str	r3, [r7, #24]
 8009fc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6979      	ldr	r1, [r7, #20]
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e6      	bne.n	8009fa8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2220      	movs	r2, #32
 8009fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7fe ff17 	bl	8008e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fee:	bf00      	nop
 8009ff0:	3720      	adds	r7, #32
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b083      	sub	sp, #12
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ffe:	bf00      	nop
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a012:	bf00      	nop
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a032:	b480      	push	{r7}
 800a034:	b085      	sub	sp, #20
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a040:	2b01      	cmp	r3, #1
 800a042:	d101      	bne.n	800a048 <HAL_UARTEx_DisableFifoMode+0x16>
 800a044:	2302      	movs	r3, #2
 800a046:	e027      	b.n	800a098 <HAL_UARTEx_DisableFifoMode+0x66>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2224      	movs	r2, #36	@ 0x24
 800a054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f022 0201 	bic.w	r2, r2, #1
 800a06e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a076:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2220      	movs	r2, #32
 800a08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d101      	bne.n	800a0bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e02d      	b.n	800a118 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2224      	movs	r2, #36	@ 0x24
 800a0c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 0201 	bic.w	r2, r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f84f 	bl	800a19c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2220      	movs	r2, #32
 800a10a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a130:	2b01      	cmp	r3, #1
 800a132:	d101      	bne.n	800a138 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a134:	2302      	movs	r3, #2
 800a136:	e02d      	b.n	800a194 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2224      	movs	r2, #36	@ 0x24
 800a144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f022 0201 	bic.w	r2, r2, #1
 800a15e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	430a      	orrs	r2, r1
 800a172:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f811 	bl	800a19c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2220      	movs	r2, #32
 800a186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d108      	bne.n	800a1be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1bc:	e031      	b.n	800a222 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1be:	2310      	movs	r3, #16
 800a1c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1c2:	2310      	movs	r3, #16
 800a1c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	0e5b      	lsrs	r3, r3, #25
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	f003 0307 	and.w	r3, r3, #7
 800a1d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	0f5b      	lsrs	r3, r3, #29
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 0307 	and.w	r3, r3, #7
 800a1e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1e6:	7bbb      	ldrb	r3, [r7, #14]
 800a1e8:	7b3a      	ldrb	r2, [r7, #12]
 800a1ea:	4911      	ldr	r1, [pc, #68]	@ (800a230 <UARTEx_SetNbDataToProcess+0x94>)
 800a1ec:	5c8a      	ldrb	r2, [r1, r2]
 800a1ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1f2:	7b3a      	ldrb	r2, [r7, #12]
 800a1f4:	490f      	ldr	r1, [pc, #60]	@ (800a234 <UARTEx_SetNbDataToProcess+0x98>)
 800a1f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	7b7a      	ldrb	r2, [r7, #13]
 800a208:	4909      	ldr	r1, [pc, #36]	@ (800a230 <UARTEx_SetNbDataToProcess+0x94>)
 800a20a:	5c8a      	ldrb	r2, [r1, r2]
 800a20c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a210:	7b7a      	ldrb	r2, [r7, #13]
 800a212:	4908      	ldr	r1, [pc, #32]	@ (800a234 <UARTEx_SetNbDataToProcess+0x98>)
 800a214:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a216:	fb93 f3f2 	sdiv	r3, r3, r2
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a222:	bf00      	nop
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	080108ec 	.word	0x080108ec
 800a234:	080108f4 	.word	0x080108f4

0800a238 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e03c      	b.n	800a2c4 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d106      	bne.n	800a264 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7f7 fc36 	bl	8001ad0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2202      	movs	r2, #2
 800a268:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f022 0201 	bic.w	r2, r2, #1
 800a27a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f85b 	bl	800a338 <USART_SetConfig>
 800a282:	4603      	mov	r3, r0
 800a284:	2b01      	cmp	r3, #1
 800a286:	d101      	bne.n	800a28c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e01b      	b.n	800a2c4 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a29a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689a      	ldr	r2, [r3, #8]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2aa:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f042 0201 	orr.w	r2, r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fddd 	bl	800ae7c <USART_CheckIdleState>
 800a2c2:	4603      	mov	r3, r0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800a2dc:	e018      	b.n	800a310 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e4:	d014      	beq.n	800a310 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2e6:	f7f7 feed 	bl	80020c4 <HAL_GetTick>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	69ba      	ldr	r2, [r7, #24]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d302      	bcc.n	800a2fc <USART_WaitOnFlagUntilTimeout+0x30>
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d109      	bne.n	800a310 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e00f      	b.n	800a330 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	69da      	ldr	r2, [r3, #28]
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	4013      	ands	r3, r2
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	bf0c      	ite	eq
 800a320:	2301      	moveq	r3, #1
 800a322:	2300      	movne	r3, #0
 800a324:	b2db      	uxtb	r3, r3
 800a326:	461a      	mov	r2, r3
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d0d7      	beq.n	800a2de <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b08e      	sub	sp, #56	@ 0x38
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800a346:	2300      	movs	r3, #0
 800a348:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	689a      	ldr	r2, [r3, #8]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	431a      	orrs	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	4313      	orrs	r3, r2
 800a35a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	4bc9      	ldr	r3, [pc, #804]	@ (800a68c <USART_SetConfig+0x354>)
 800a368:	4013      	ands	r3, r2
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	6812      	ldr	r2, [r2, #0]
 800a36e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a370:	430b      	orrs	r3, r1
 800a372:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800a374:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a380:	4313      	orrs	r3, r2
 800a382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699a      	ldr	r2, [r3, #24]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a390:	4313      	orrs	r3, r2
 800a392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a39a:	4313      	orrs	r3, r2
 800a39c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	4bba      	ldr	r3, [pc, #744]	@ (800a690 <USART_SetConfig+0x358>)
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3ae:	430b      	orrs	r3, r1
 800a3b0:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b8:	f023 010f 	bic.w	r1, r3, #15
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4ab1      	ldr	r2, [pc, #708]	@ (800a694 <USART_SetConfig+0x35c>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d176      	bne.n	800a4c0 <USART_SetConfig+0x188>
 800a3d2:	4bb1      	ldr	r3, [pc, #708]	@ (800a698 <USART_SetConfig+0x360>)
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a3da:	2b28      	cmp	r3, #40	@ 0x28
 800a3dc:	d86c      	bhi.n	800a4b8 <USART_SetConfig+0x180>
 800a3de:	a201      	add	r2, pc, #4	@ (adr r2, 800a3e4 <USART_SetConfig+0xac>)
 800a3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e4:	0800a489 	.word	0x0800a489
 800a3e8:	0800a4b9 	.word	0x0800a4b9
 800a3ec:	0800a4b9 	.word	0x0800a4b9
 800a3f0:	0800a4b9 	.word	0x0800a4b9
 800a3f4:	0800a4b9 	.word	0x0800a4b9
 800a3f8:	0800a4b9 	.word	0x0800a4b9
 800a3fc:	0800a4b9 	.word	0x0800a4b9
 800a400:	0800a4b9 	.word	0x0800a4b9
 800a404:	0800a491 	.word	0x0800a491
 800a408:	0800a4b9 	.word	0x0800a4b9
 800a40c:	0800a4b9 	.word	0x0800a4b9
 800a410:	0800a4b9 	.word	0x0800a4b9
 800a414:	0800a4b9 	.word	0x0800a4b9
 800a418:	0800a4b9 	.word	0x0800a4b9
 800a41c:	0800a4b9 	.word	0x0800a4b9
 800a420:	0800a4b9 	.word	0x0800a4b9
 800a424:	0800a499 	.word	0x0800a499
 800a428:	0800a4b9 	.word	0x0800a4b9
 800a42c:	0800a4b9 	.word	0x0800a4b9
 800a430:	0800a4b9 	.word	0x0800a4b9
 800a434:	0800a4b9 	.word	0x0800a4b9
 800a438:	0800a4b9 	.word	0x0800a4b9
 800a43c:	0800a4b9 	.word	0x0800a4b9
 800a440:	0800a4b9 	.word	0x0800a4b9
 800a444:	0800a4a1 	.word	0x0800a4a1
 800a448:	0800a4b9 	.word	0x0800a4b9
 800a44c:	0800a4b9 	.word	0x0800a4b9
 800a450:	0800a4b9 	.word	0x0800a4b9
 800a454:	0800a4b9 	.word	0x0800a4b9
 800a458:	0800a4b9 	.word	0x0800a4b9
 800a45c:	0800a4b9 	.word	0x0800a4b9
 800a460:	0800a4b9 	.word	0x0800a4b9
 800a464:	0800a4a9 	.word	0x0800a4a9
 800a468:	0800a4b9 	.word	0x0800a4b9
 800a46c:	0800a4b9 	.word	0x0800a4b9
 800a470:	0800a4b9 	.word	0x0800a4b9
 800a474:	0800a4b9 	.word	0x0800a4b9
 800a478:	0800a4b9 	.word	0x0800a4b9
 800a47c:	0800a4b9 	.word	0x0800a4b9
 800a480:	0800a4b9 	.word	0x0800a4b9
 800a484:	0800a4b1 	.word	0x0800a4b1
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a48e:	e18e      	b.n	800a7ae <USART_SetConfig+0x476>
 800a490:	2302      	movs	r3, #2
 800a492:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a496:	e18a      	b.n	800a7ae <USART_SetConfig+0x476>
 800a498:	2304      	movs	r3, #4
 800a49a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a49e:	e186      	b.n	800a7ae <USART_SetConfig+0x476>
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a4a6:	e182      	b.n	800a7ae <USART_SetConfig+0x476>
 800a4a8:	2310      	movs	r3, #16
 800a4aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a4ae:	e17e      	b.n	800a7ae <USART_SetConfig+0x476>
 800a4b0:	2320      	movs	r3, #32
 800a4b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a4b6:	e17a      	b.n	800a7ae <USART_SetConfig+0x476>
 800a4b8:	2340      	movs	r3, #64	@ 0x40
 800a4ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a4be:	e176      	b.n	800a7ae <USART_SetConfig+0x476>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a75      	ldr	r2, [pc, #468]	@ (800a69c <USART_SetConfig+0x364>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d130      	bne.n	800a52c <USART_SetConfig+0x1f4>
 800a4ca:	4b73      	ldr	r3, [pc, #460]	@ (800a698 <USART_SetConfig+0x360>)
 800a4cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ce:	f003 0307 	and.w	r3, r3, #7
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	d826      	bhi.n	800a524 <USART_SetConfig+0x1ec>
 800a4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4dc <USART_SetConfig+0x1a4>)
 800a4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4dc:	0800a4f5 	.word	0x0800a4f5
 800a4e0:	0800a4fd 	.word	0x0800a4fd
 800a4e4:	0800a505 	.word	0x0800a505
 800a4e8:	0800a50d 	.word	0x0800a50d
 800a4ec:	0800a515 	.word	0x0800a515
 800a4f0:	0800a51d 	.word	0x0800a51d
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a4fa:	e158      	b.n	800a7ae <USART_SetConfig+0x476>
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a502:	e154      	b.n	800a7ae <USART_SetConfig+0x476>
 800a504:	2304      	movs	r3, #4
 800a506:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a50a:	e150      	b.n	800a7ae <USART_SetConfig+0x476>
 800a50c:	2308      	movs	r3, #8
 800a50e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a512:	e14c      	b.n	800a7ae <USART_SetConfig+0x476>
 800a514:	2310      	movs	r3, #16
 800a516:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a51a:	e148      	b.n	800a7ae <USART_SetConfig+0x476>
 800a51c:	2320      	movs	r3, #32
 800a51e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a522:	e144      	b.n	800a7ae <USART_SetConfig+0x476>
 800a524:	2340      	movs	r3, #64	@ 0x40
 800a526:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a52a:	e140      	b.n	800a7ae <USART_SetConfig+0x476>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a5b      	ldr	r2, [pc, #364]	@ (800a6a0 <USART_SetConfig+0x368>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d130      	bne.n	800a598 <USART_SetConfig+0x260>
 800a536:	4b58      	ldr	r3, [pc, #352]	@ (800a698 <USART_SetConfig+0x360>)
 800a538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a53a:	f003 0307 	and.w	r3, r3, #7
 800a53e:	2b05      	cmp	r3, #5
 800a540:	d826      	bhi.n	800a590 <USART_SetConfig+0x258>
 800a542:	a201      	add	r2, pc, #4	@ (adr r2, 800a548 <USART_SetConfig+0x210>)
 800a544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a548:	0800a561 	.word	0x0800a561
 800a54c:	0800a569 	.word	0x0800a569
 800a550:	0800a571 	.word	0x0800a571
 800a554:	0800a579 	.word	0x0800a579
 800a558:	0800a581 	.word	0x0800a581
 800a55c:	0800a589 	.word	0x0800a589
 800a560:	2300      	movs	r3, #0
 800a562:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a566:	e122      	b.n	800a7ae <USART_SetConfig+0x476>
 800a568:	2302      	movs	r3, #2
 800a56a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a56e:	e11e      	b.n	800a7ae <USART_SetConfig+0x476>
 800a570:	2304      	movs	r3, #4
 800a572:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a576:	e11a      	b.n	800a7ae <USART_SetConfig+0x476>
 800a578:	2308      	movs	r3, #8
 800a57a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a57e:	e116      	b.n	800a7ae <USART_SetConfig+0x476>
 800a580:	2310      	movs	r3, #16
 800a582:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a586:	e112      	b.n	800a7ae <USART_SetConfig+0x476>
 800a588:	2320      	movs	r3, #32
 800a58a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a58e:	e10e      	b.n	800a7ae <USART_SetConfig+0x476>
 800a590:	2340      	movs	r3, #64	@ 0x40
 800a592:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a596:	e10a      	b.n	800a7ae <USART_SetConfig+0x476>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a41      	ldr	r2, [pc, #260]	@ (800a6a4 <USART_SetConfig+0x36c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	f040 8086 	bne.w	800a6b0 <USART_SetConfig+0x378>
 800a5a4:	4b3c      	ldr	r3, [pc, #240]	@ (800a698 <USART_SetConfig+0x360>)
 800a5a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5ac:	2b28      	cmp	r3, #40	@ 0x28
 800a5ae:	d87b      	bhi.n	800a6a8 <USART_SetConfig+0x370>
 800a5b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b8 <USART_SetConfig+0x280>)
 800a5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b6:	bf00      	nop
 800a5b8:	0800a65d 	.word	0x0800a65d
 800a5bc:	0800a6a9 	.word	0x0800a6a9
 800a5c0:	0800a6a9 	.word	0x0800a6a9
 800a5c4:	0800a6a9 	.word	0x0800a6a9
 800a5c8:	0800a6a9 	.word	0x0800a6a9
 800a5cc:	0800a6a9 	.word	0x0800a6a9
 800a5d0:	0800a6a9 	.word	0x0800a6a9
 800a5d4:	0800a6a9 	.word	0x0800a6a9
 800a5d8:	0800a665 	.word	0x0800a665
 800a5dc:	0800a6a9 	.word	0x0800a6a9
 800a5e0:	0800a6a9 	.word	0x0800a6a9
 800a5e4:	0800a6a9 	.word	0x0800a6a9
 800a5e8:	0800a6a9 	.word	0x0800a6a9
 800a5ec:	0800a6a9 	.word	0x0800a6a9
 800a5f0:	0800a6a9 	.word	0x0800a6a9
 800a5f4:	0800a6a9 	.word	0x0800a6a9
 800a5f8:	0800a66d 	.word	0x0800a66d
 800a5fc:	0800a6a9 	.word	0x0800a6a9
 800a600:	0800a6a9 	.word	0x0800a6a9
 800a604:	0800a6a9 	.word	0x0800a6a9
 800a608:	0800a6a9 	.word	0x0800a6a9
 800a60c:	0800a6a9 	.word	0x0800a6a9
 800a610:	0800a6a9 	.word	0x0800a6a9
 800a614:	0800a6a9 	.word	0x0800a6a9
 800a618:	0800a675 	.word	0x0800a675
 800a61c:	0800a6a9 	.word	0x0800a6a9
 800a620:	0800a6a9 	.word	0x0800a6a9
 800a624:	0800a6a9 	.word	0x0800a6a9
 800a628:	0800a6a9 	.word	0x0800a6a9
 800a62c:	0800a6a9 	.word	0x0800a6a9
 800a630:	0800a6a9 	.word	0x0800a6a9
 800a634:	0800a6a9 	.word	0x0800a6a9
 800a638:	0800a67d 	.word	0x0800a67d
 800a63c:	0800a6a9 	.word	0x0800a6a9
 800a640:	0800a6a9 	.word	0x0800a6a9
 800a644:	0800a6a9 	.word	0x0800a6a9
 800a648:	0800a6a9 	.word	0x0800a6a9
 800a64c:	0800a6a9 	.word	0x0800a6a9
 800a650:	0800a6a9 	.word	0x0800a6a9
 800a654:	0800a6a9 	.word	0x0800a6a9
 800a658:	0800a685 	.word	0x0800a685
 800a65c:	2301      	movs	r3, #1
 800a65e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a662:	e0a4      	b.n	800a7ae <USART_SetConfig+0x476>
 800a664:	2302      	movs	r3, #2
 800a666:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a66a:	e0a0      	b.n	800a7ae <USART_SetConfig+0x476>
 800a66c:	2304      	movs	r3, #4
 800a66e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a672:	e09c      	b.n	800a7ae <USART_SetConfig+0x476>
 800a674:	2308      	movs	r3, #8
 800a676:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a67a:	e098      	b.n	800a7ae <USART_SetConfig+0x476>
 800a67c:	2310      	movs	r3, #16
 800a67e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a682:	e094      	b.n	800a7ae <USART_SetConfig+0x476>
 800a684:	2320      	movs	r3, #32
 800a686:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a68a:	e090      	b.n	800a7ae <USART_SetConfig+0x476>
 800a68c:	cfff69f3 	.word	0xcfff69f3
 800a690:	ffffc0f6 	.word	0xffffc0f6
 800a694:	40011000 	.word	0x40011000
 800a698:	58024400 	.word	0x58024400
 800a69c:	40004400 	.word	0x40004400
 800a6a0:	40004800 	.word	0x40004800
 800a6a4:	40011400 	.word	0x40011400
 800a6a8:	2340      	movs	r3, #64	@ 0x40
 800a6aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a6ae:	e07e      	b.n	800a7ae <USART_SetConfig+0x476>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4ab5      	ldr	r2, [pc, #724]	@ (800a98c <USART_SetConfig+0x654>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d176      	bne.n	800a7a8 <USART_SetConfig+0x470>
 800a6ba:	4bb5      	ldr	r3, [pc, #724]	@ (800a990 <USART_SetConfig+0x658>)
 800a6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6c2:	2b28      	cmp	r3, #40	@ 0x28
 800a6c4:	d86c      	bhi.n	800a7a0 <USART_SetConfig+0x468>
 800a6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6cc <USART_SetConfig+0x394>)
 800a6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6cc:	0800a771 	.word	0x0800a771
 800a6d0:	0800a7a1 	.word	0x0800a7a1
 800a6d4:	0800a7a1 	.word	0x0800a7a1
 800a6d8:	0800a7a1 	.word	0x0800a7a1
 800a6dc:	0800a7a1 	.word	0x0800a7a1
 800a6e0:	0800a7a1 	.word	0x0800a7a1
 800a6e4:	0800a7a1 	.word	0x0800a7a1
 800a6e8:	0800a7a1 	.word	0x0800a7a1
 800a6ec:	0800a779 	.word	0x0800a779
 800a6f0:	0800a7a1 	.word	0x0800a7a1
 800a6f4:	0800a7a1 	.word	0x0800a7a1
 800a6f8:	0800a7a1 	.word	0x0800a7a1
 800a6fc:	0800a7a1 	.word	0x0800a7a1
 800a700:	0800a7a1 	.word	0x0800a7a1
 800a704:	0800a7a1 	.word	0x0800a7a1
 800a708:	0800a7a1 	.word	0x0800a7a1
 800a70c:	0800a781 	.word	0x0800a781
 800a710:	0800a7a1 	.word	0x0800a7a1
 800a714:	0800a7a1 	.word	0x0800a7a1
 800a718:	0800a7a1 	.word	0x0800a7a1
 800a71c:	0800a7a1 	.word	0x0800a7a1
 800a720:	0800a7a1 	.word	0x0800a7a1
 800a724:	0800a7a1 	.word	0x0800a7a1
 800a728:	0800a7a1 	.word	0x0800a7a1
 800a72c:	0800a789 	.word	0x0800a789
 800a730:	0800a7a1 	.word	0x0800a7a1
 800a734:	0800a7a1 	.word	0x0800a7a1
 800a738:	0800a7a1 	.word	0x0800a7a1
 800a73c:	0800a7a1 	.word	0x0800a7a1
 800a740:	0800a7a1 	.word	0x0800a7a1
 800a744:	0800a7a1 	.word	0x0800a7a1
 800a748:	0800a7a1 	.word	0x0800a7a1
 800a74c:	0800a791 	.word	0x0800a791
 800a750:	0800a7a1 	.word	0x0800a7a1
 800a754:	0800a7a1 	.word	0x0800a7a1
 800a758:	0800a7a1 	.word	0x0800a7a1
 800a75c:	0800a7a1 	.word	0x0800a7a1
 800a760:	0800a7a1 	.word	0x0800a7a1
 800a764:	0800a7a1 	.word	0x0800a7a1
 800a768:	0800a7a1 	.word	0x0800a7a1
 800a76c:	0800a799 	.word	0x0800a799
 800a770:	2301      	movs	r3, #1
 800a772:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a776:	e01a      	b.n	800a7ae <USART_SetConfig+0x476>
 800a778:	2302      	movs	r3, #2
 800a77a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a77e:	e016      	b.n	800a7ae <USART_SetConfig+0x476>
 800a780:	2304      	movs	r3, #4
 800a782:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a786:	e012      	b.n	800a7ae <USART_SetConfig+0x476>
 800a788:	2308      	movs	r3, #8
 800a78a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a78e:	e00e      	b.n	800a7ae <USART_SetConfig+0x476>
 800a790:	2310      	movs	r3, #16
 800a792:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a796:	e00a      	b.n	800a7ae <USART_SetConfig+0x476>
 800a798:	2320      	movs	r3, #32
 800a79a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a79e:	e006      	b.n	800a7ae <USART_SetConfig+0x476>
 800a7a0:	2340      	movs	r3, #64	@ 0x40
 800a7a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a7a6:	e002      	b.n	800a7ae <USART_SetConfig+0x476>
 800a7a8:	2340      	movs	r3, #64	@ 0x40
 800a7aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800a7ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a7b2:	2b20      	cmp	r3, #32
 800a7b4:	f200 832f 	bhi.w	800ae16 <USART_SetConfig+0xade>
 800a7b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c0 <USART_SetConfig+0x488>)
 800a7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7be:	bf00      	nop
 800a7c0:	0800a845 	.word	0x0800a845
 800a7c4:	0800a8fb 	.word	0x0800a8fb
 800a7c8:	0800a9bb 	.word	0x0800a9bb
 800a7cc:	0800ae17 	.word	0x0800ae17
 800a7d0:	0800aa75 	.word	0x0800aa75
 800a7d4:	0800ae17 	.word	0x0800ae17
 800a7d8:	0800ae17 	.word	0x0800ae17
 800a7dc:	0800ae17 	.word	0x0800ae17
 800a7e0:	0800ab2f 	.word	0x0800ab2f
 800a7e4:	0800ae17 	.word	0x0800ae17
 800a7e8:	0800ae17 	.word	0x0800ae17
 800a7ec:	0800ae17 	.word	0x0800ae17
 800a7f0:	0800ae17 	.word	0x0800ae17
 800a7f4:	0800ae17 	.word	0x0800ae17
 800a7f8:	0800ae17 	.word	0x0800ae17
 800a7fc:	0800ae17 	.word	0x0800ae17
 800a800:	0800aca7 	.word	0x0800aca7
 800a804:	0800ae17 	.word	0x0800ae17
 800a808:	0800ae17 	.word	0x0800ae17
 800a80c:	0800ae17 	.word	0x0800ae17
 800a810:	0800ae17 	.word	0x0800ae17
 800a814:	0800ae17 	.word	0x0800ae17
 800a818:	0800ae17 	.word	0x0800ae17
 800a81c:	0800ae17 	.word	0x0800ae17
 800a820:	0800ae17 	.word	0x0800ae17
 800a824:	0800ae17 	.word	0x0800ae17
 800a828:	0800ae17 	.word	0x0800ae17
 800a82c:	0800ae17 	.word	0x0800ae17
 800a830:	0800ae17 	.word	0x0800ae17
 800a834:	0800ae17 	.word	0x0800ae17
 800a838:	0800ae17 	.word	0x0800ae17
 800a83c:	0800ae17 	.word	0x0800ae17
 800a840:	0800ad65 	.word	0x0800ad65
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800a844:	f7f9 fddc 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 800a848:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d044      	beq.n	800a8dc <USART_SetConfig+0x5a4>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a856:	2b01      	cmp	r3, #1
 800a858:	d03e      	beq.n	800a8d8 <USART_SetConfig+0x5a0>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d038      	beq.n	800a8d4 <USART_SetConfig+0x59c>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a866:	2b03      	cmp	r3, #3
 800a868:	d032      	beq.n	800a8d0 <USART_SetConfig+0x598>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d02c      	beq.n	800a8cc <USART_SetConfig+0x594>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a876:	2b05      	cmp	r3, #5
 800a878:	d026      	beq.n	800a8c8 <USART_SetConfig+0x590>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87e:	2b06      	cmp	r3, #6
 800a880:	d020      	beq.n	800a8c4 <USART_SetConfig+0x58c>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a886:	2b07      	cmp	r3, #7
 800a888:	d01a      	beq.n	800a8c0 <USART_SetConfig+0x588>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88e:	2b08      	cmp	r3, #8
 800a890:	d014      	beq.n	800a8bc <USART_SetConfig+0x584>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a896:	2b09      	cmp	r3, #9
 800a898:	d00e      	beq.n	800a8b8 <USART_SetConfig+0x580>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89e:	2b0a      	cmp	r3, #10
 800a8a0:	d008      	beq.n	800a8b4 <USART_SetConfig+0x57c>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a6:	2b0b      	cmp	r3, #11
 800a8a8:	d102      	bne.n	800a8b0 <USART_SetConfig+0x578>
 800a8aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8ae:	e016      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e014      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8b4:	2380      	movs	r3, #128	@ 0x80
 800a8b6:	e012      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8b8:	2340      	movs	r3, #64	@ 0x40
 800a8ba:	e010      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8bc:	2320      	movs	r3, #32
 800a8be:	e00e      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8c0:	2310      	movs	r3, #16
 800a8c2:	e00c      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8c4:	230c      	movs	r3, #12
 800a8c6:	e00a      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8c8:	230a      	movs	r3, #10
 800a8ca:	e008      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	e006      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8d0:	2306      	movs	r3, #6
 800a8d2:	e004      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8d4:	2304      	movs	r3, #4
 800a8d6:	e002      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e000      	b.n	800a8de <USART_SetConfig+0x5a6>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e4:	005a      	lsls	r2, r3, #1
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	085b      	lsrs	r3, r3, #1
 800a8ec:	441a      	add	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a8f8:	e291      	b.n	800ae1e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8fa:	f7f9 fd97 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 800a8fe:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a904:	2b00      	cmp	r3, #0
 800a906:	d049      	beq.n	800a99c <USART_SetConfig+0x664>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d043      	beq.n	800a998 <USART_SetConfig+0x660>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a914:	2b02      	cmp	r3, #2
 800a916:	d03d      	beq.n	800a994 <USART_SetConfig+0x65c>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a91c:	2b03      	cmp	r3, #3
 800a91e:	d032      	beq.n	800a986 <USART_SetConfig+0x64e>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a924:	2b04      	cmp	r3, #4
 800a926:	d02c      	beq.n	800a982 <USART_SetConfig+0x64a>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92c:	2b05      	cmp	r3, #5
 800a92e:	d026      	beq.n	800a97e <USART_SetConfig+0x646>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a934:	2b06      	cmp	r3, #6
 800a936:	d020      	beq.n	800a97a <USART_SetConfig+0x642>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93c:	2b07      	cmp	r3, #7
 800a93e:	d01a      	beq.n	800a976 <USART_SetConfig+0x63e>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a944:	2b08      	cmp	r3, #8
 800a946:	d014      	beq.n	800a972 <USART_SetConfig+0x63a>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94c:	2b09      	cmp	r3, #9
 800a94e:	d00e      	beq.n	800a96e <USART_SetConfig+0x636>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a954:	2b0a      	cmp	r3, #10
 800a956:	d008      	beq.n	800a96a <USART_SetConfig+0x632>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a95c:	2b0b      	cmp	r3, #11
 800a95e:	d102      	bne.n	800a966 <USART_SetConfig+0x62e>
 800a960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a964:	e01b      	b.n	800a99e <USART_SetConfig+0x666>
 800a966:	2301      	movs	r3, #1
 800a968:	e019      	b.n	800a99e <USART_SetConfig+0x666>
 800a96a:	2380      	movs	r3, #128	@ 0x80
 800a96c:	e017      	b.n	800a99e <USART_SetConfig+0x666>
 800a96e:	2340      	movs	r3, #64	@ 0x40
 800a970:	e015      	b.n	800a99e <USART_SetConfig+0x666>
 800a972:	2320      	movs	r3, #32
 800a974:	e013      	b.n	800a99e <USART_SetConfig+0x666>
 800a976:	2310      	movs	r3, #16
 800a978:	e011      	b.n	800a99e <USART_SetConfig+0x666>
 800a97a:	230c      	movs	r3, #12
 800a97c:	e00f      	b.n	800a99e <USART_SetConfig+0x666>
 800a97e:	230a      	movs	r3, #10
 800a980:	e00d      	b.n	800a99e <USART_SetConfig+0x666>
 800a982:	2308      	movs	r3, #8
 800a984:	e00b      	b.n	800a99e <USART_SetConfig+0x666>
 800a986:	2306      	movs	r3, #6
 800a988:	e009      	b.n	800a99e <USART_SetConfig+0x666>
 800a98a:	bf00      	nop
 800a98c:	40011c00 	.word	0x40011c00
 800a990:	58024400 	.word	0x58024400
 800a994:	2304      	movs	r3, #4
 800a996:	e002      	b.n	800a99e <USART_SetConfig+0x666>
 800a998:	2302      	movs	r3, #2
 800a99a:	e000      	b.n	800a99e <USART_SetConfig+0x666>
 800a99c:	2301      	movs	r3, #1
 800a99e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a4:	005a      	lsls	r2, r3, #1
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	085b      	lsrs	r3, r3, #1
 800a9ac:	441a      	add	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a9b8:	e231      	b.n	800ae1e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ba:	f107 0318 	add.w	r3, r7, #24
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fb fbd2 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800a9c4:	69fa      	ldr	r2, [r7, #28]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d044      	beq.n	800aa58 <USART_SetConfig+0x720>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d03e      	beq.n	800aa54 <USART_SetConfig+0x71c>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d038      	beq.n	800aa50 <USART_SetConfig+0x718>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d032      	beq.n	800aa4c <USART_SetConfig+0x714>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d02c      	beq.n	800aa48 <USART_SetConfig+0x710>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f2:	2b05      	cmp	r3, #5
 800a9f4:	d026      	beq.n	800aa44 <USART_SetConfig+0x70c>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fa:	2b06      	cmp	r3, #6
 800a9fc:	d020      	beq.n	800aa40 <USART_SetConfig+0x708>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa02:	2b07      	cmp	r3, #7
 800aa04:	d01a      	beq.n	800aa3c <USART_SetConfig+0x704>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa0a:	2b08      	cmp	r3, #8
 800aa0c:	d014      	beq.n	800aa38 <USART_SetConfig+0x700>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa12:	2b09      	cmp	r3, #9
 800aa14:	d00e      	beq.n	800aa34 <USART_SetConfig+0x6fc>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1a:	2b0a      	cmp	r3, #10
 800aa1c:	d008      	beq.n	800aa30 <USART_SetConfig+0x6f8>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa22:	2b0b      	cmp	r3, #11
 800aa24:	d102      	bne.n	800aa2c <USART_SetConfig+0x6f4>
 800aa26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa2a:	e016      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e014      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa30:	2380      	movs	r3, #128	@ 0x80
 800aa32:	e012      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa34:	2340      	movs	r3, #64	@ 0x40
 800aa36:	e010      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa38:	2320      	movs	r3, #32
 800aa3a:	e00e      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa3c:	2310      	movs	r3, #16
 800aa3e:	e00c      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa40:	230c      	movs	r3, #12
 800aa42:	e00a      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa44:	230a      	movs	r3, #10
 800aa46:	e008      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa48:	2308      	movs	r3, #8
 800aa4a:	e006      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa4c:	2306      	movs	r3, #6
 800aa4e:	e004      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa50:	2304      	movs	r3, #4
 800aa52:	e002      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa54:	2302      	movs	r3, #2
 800aa56:	e000      	b.n	800aa5a <USART_SetConfig+0x722>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa5e:	005a      	lsls	r2, r3, #1
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	085b      	lsrs	r3, r3, #1
 800aa66:	441a      	add	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa70:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800aa72:	e1d4      	b.n	800ae1e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa74:	f107 030c 	add.w	r3, r7, #12
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fb fcc9 	bl	8006410 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d044      	beq.n	800ab12 <USART_SetConfig+0x7da>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d03e      	beq.n	800ab0e <USART_SetConfig+0x7d6>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d038      	beq.n	800ab0a <USART_SetConfig+0x7d2>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	d032      	beq.n	800ab06 <USART_SetConfig+0x7ce>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa4:	2b04      	cmp	r3, #4
 800aaa6:	d02c      	beq.n	800ab02 <USART_SetConfig+0x7ca>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaac:	2b05      	cmp	r3, #5
 800aaae:	d026      	beq.n	800aafe <USART_SetConfig+0x7c6>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab4:	2b06      	cmp	r3, #6
 800aab6:	d020      	beq.n	800aafa <USART_SetConfig+0x7c2>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aabc:	2b07      	cmp	r3, #7
 800aabe:	d01a      	beq.n	800aaf6 <USART_SetConfig+0x7be>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac4:	2b08      	cmp	r3, #8
 800aac6:	d014      	beq.n	800aaf2 <USART_SetConfig+0x7ba>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aacc:	2b09      	cmp	r3, #9
 800aace:	d00e      	beq.n	800aaee <USART_SetConfig+0x7b6>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	2b0a      	cmp	r3, #10
 800aad6:	d008      	beq.n	800aaea <USART_SetConfig+0x7b2>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aadc:	2b0b      	cmp	r3, #11
 800aade:	d102      	bne.n	800aae6 <USART_SetConfig+0x7ae>
 800aae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aae4:	e016      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e014      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800aaea:	2380      	movs	r3, #128	@ 0x80
 800aaec:	e012      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800aaee:	2340      	movs	r3, #64	@ 0x40
 800aaf0:	e010      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800aaf2:	2320      	movs	r3, #32
 800aaf4:	e00e      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800aaf6:	2310      	movs	r3, #16
 800aaf8:	e00c      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800aafa:	230c      	movs	r3, #12
 800aafc:	e00a      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800aafe:	230a      	movs	r3, #10
 800ab00:	e008      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800ab02:	2308      	movs	r3, #8
 800ab04:	e006      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800ab06:	2306      	movs	r3, #6
 800ab08:	e004      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800ab0a:	2304      	movs	r3, #4
 800ab0c:	e002      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800ab0e:	2302      	movs	r3, #2
 800ab10:	e000      	b.n	800ab14 <USART_SetConfig+0x7dc>
 800ab12:	2301      	movs	r3, #1
 800ab14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab18:	005a      	lsls	r2, r3, #1
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	085b      	lsrs	r3, r3, #1
 800ab20:	441a      	add	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2a:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800ab2c:	e177      	b.n	800ae1e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab2e:	4b8a      	ldr	r3, [pc, #552]	@ (800ad58 <USART_SetConfig+0xa20>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0320 	and.w	r3, r3, #32
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d05d      	beq.n	800abf6 <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800ab3a:	4b87      	ldr	r3, [pc, #540]	@ (800ad58 <USART_SetConfig+0xa20>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	08db      	lsrs	r3, r3, #3
 800ab40:	f003 0303 	and.w	r3, r3, #3
 800ab44:	4a85      	ldr	r2, [pc, #532]	@ (800ad5c <USART_SetConfig+0xa24>)
 800ab46:	40da      	lsrs	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d044      	beq.n	800abda <USART_SetConfig+0x8a2>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d03e      	beq.n	800abd6 <USART_SetConfig+0x89e>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d038      	beq.n	800abd2 <USART_SetConfig+0x89a>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab64:	2b03      	cmp	r3, #3
 800ab66:	d032      	beq.n	800abce <USART_SetConfig+0x896>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6c:	2b04      	cmp	r3, #4
 800ab6e:	d02c      	beq.n	800abca <USART_SetConfig+0x892>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab74:	2b05      	cmp	r3, #5
 800ab76:	d026      	beq.n	800abc6 <USART_SetConfig+0x88e>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab7c:	2b06      	cmp	r3, #6
 800ab7e:	d020      	beq.n	800abc2 <USART_SetConfig+0x88a>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab84:	2b07      	cmp	r3, #7
 800ab86:	d01a      	beq.n	800abbe <USART_SetConfig+0x886>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab8c:	2b08      	cmp	r3, #8
 800ab8e:	d014      	beq.n	800abba <USART_SetConfig+0x882>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d00e      	beq.n	800abb6 <USART_SetConfig+0x87e>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9c:	2b0a      	cmp	r3, #10
 800ab9e:	d008      	beq.n	800abb2 <USART_SetConfig+0x87a>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba4:	2b0b      	cmp	r3, #11
 800aba6:	d102      	bne.n	800abae <USART_SetConfig+0x876>
 800aba8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abac:	e016      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abae:	2301      	movs	r3, #1
 800abb0:	e014      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abb2:	2380      	movs	r3, #128	@ 0x80
 800abb4:	e012      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abb6:	2340      	movs	r3, #64	@ 0x40
 800abb8:	e010      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abba:	2320      	movs	r3, #32
 800abbc:	e00e      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abbe:	2310      	movs	r3, #16
 800abc0:	e00c      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abc2:	230c      	movs	r3, #12
 800abc4:	e00a      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abc6:	230a      	movs	r3, #10
 800abc8:	e008      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abca:	2308      	movs	r3, #8
 800abcc:	e006      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abce:	2306      	movs	r3, #6
 800abd0:	e004      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abd2:	2304      	movs	r3, #4
 800abd4:	e002      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abd6:	2302      	movs	r3, #2
 800abd8:	e000      	b.n	800abdc <USART_SetConfig+0x8a4>
 800abda:	2301      	movs	r3, #1
 800abdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe0:	005a      	lsls	r2, r3, #1
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	085b      	lsrs	r3, r3, #1
 800abe8:	441a      	add	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf2:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800abf4:	e113      	b.n	800ae1e <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d044      	beq.n	800ac88 <USART_SetConfig+0x950>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d03e      	beq.n	800ac84 <USART_SetConfig+0x94c>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d038      	beq.n	800ac80 <USART_SetConfig+0x948>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d032      	beq.n	800ac7c <USART_SetConfig+0x944>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	d02c      	beq.n	800ac78 <USART_SetConfig+0x940>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac22:	2b05      	cmp	r3, #5
 800ac24:	d026      	beq.n	800ac74 <USART_SetConfig+0x93c>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac2a:	2b06      	cmp	r3, #6
 800ac2c:	d020      	beq.n	800ac70 <USART_SetConfig+0x938>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac32:	2b07      	cmp	r3, #7
 800ac34:	d01a      	beq.n	800ac6c <USART_SetConfig+0x934>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3a:	2b08      	cmp	r3, #8
 800ac3c:	d014      	beq.n	800ac68 <USART_SetConfig+0x930>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac42:	2b09      	cmp	r3, #9
 800ac44:	d00e      	beq.n	800ac64 <USART_SetConfig+0x92c>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac4a:	2b0a      	cmp	r3, #10
 800ac4c:	d008      	beq.n	800ac60 <USART_SetConfig+0x928>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac52:	2b0b      	cmp	r3, #11
 800ac54:	d102      	bne.n	800ac5c <USART_SetConfig+0x924>
 800ac56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac5a:	e016      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e014      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac60:	2380      	movs	r3, #128	@ 0x80
 800ac62:	e012      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac64:	2340      	movs	r3, #64	@ 0x40
 800ac66:	e010      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac68:	2320      	movs	r3, #32
 800ac6a:	e00e      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac6c:	2310      	movs	r3, #16
 800ac6e:	e00c      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac70:	230c      	movs	r3, #12
 800ac72:	e00a      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac74:	230a      	movs	r3, #10
 800ac76:	e008      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac78:	2308      	movs	r3, #8
 800ac7a:	e006      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac7c:	2306      	movs	r3, #6
 800ac7e:	e004      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac80:	2304      	movs	r3, #4
 800ac82:	e002      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac84:	2302      	movs	r3, #2
 800ac86:	e000      	b.n	800ac8a <USART_SetConfig+0x952>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	4a34      	ldr	r2, [pc, #208]	@ (800ad5c <USART_SetConfig+0xa24>)
 800ac8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac90:	005a      	lsls	r2, r3, #1
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	085b      	lsrs	r3, r3, #1
 800ac98:	441a      	add	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800aca4:	e0bb      	b.n	800ae1e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d044      	beq.n	800ad38 <USART_SetConfig+0xa00>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d03e      	beq.n	800ad34 <USART_SetConfig+0x9fc>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d038      	beq.n	800ad30 <USART_SetConfig+0x9f8>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	d032      	beq.n	800ad2c <USART_SetConfig+0x9f4>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acca:	2b04      	cmp	r3, #4
 800accc:	d02c      	beq.n	800ad28 <USART_SetConfig+0x9f0>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd2:	2b05      	cmp	r3, #5
 800acd4:	d026      	beq.n	800ad24 <USART_SetConfig+0x9ec>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acda:	2b06      	cmp	r3, #6
 800acdc:	d020      	beq.n	800ad20 <USART_SetConfig+0x9e8>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace2:	2b07      	cmp	r3, #7
 800ace4:	d01a      	beq.n	800ad1c <USART_SetConfig+0x9e4>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acea:	2b08      	cmp	r3, #8
 800acec:	d014      	beq.n	800ad18 <USART_SetConfig+0x9e0>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf2:	2b09      	cmp	r3, #9
 800acf4:	d00e      	beq.n	800ad14 <USART_SetConfig+0x9dc>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfa:	2b0a      	cmp	r3, #10
 800acfc:	d008      	beq.n	800ad10 <USART_SetConfig+0x9d8>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad02:	2b0b      	cmp	r3, #11
 800ad04:	d102      	bne.n	800ad0c <USART_SetConfig+0x9d4>
 800ad06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad0a:	e016      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e014      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad10:	2380      	movs	r3, #128	@ 0x80
 800ad12:	e012      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad14:	2340      	movs	r3, #64	@ 0x40
 800ad16:	e010      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad18:	2320      	movs	r3, #32
 800ad1a:	e00e      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad1c:	2310      	movs	r3, #16
 800ad1e:	e00c      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad20:	230c      	movs	r3, #12
 800ad22:	e00a      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad24:	230a      	movs	r3, #10
 800ad26:	e008      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad28:	2308      	movs	r3, #8
 800ad2a:	e006      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad2c:	2306      	movs	r3, #6
 800ad2e:	e004      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad30:	2304      	movs	r3, #4
 800ad32:	e002      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad34:	2302      	movs	r3, #2
 800ad36:	e000      	b.n	800ad3a <USART_SetConfig+0xa02>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	4a09      	ldr	r2, [pc, #36]	@ (800ad60 <USART_SetConfig+0xa28>)
 800ad3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad40:	005a      	lsls	r2, r3, #1
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	085b      	lsrs	r3, r3, #1
 800ad48:	441a      	add	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad52:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ad54:	e063      	b.n	800ae1e <USART_SetConfig+0xae6>
 800ad56:	bf00      	nop
 800ad58:	58024400 	.word	0x58024400
 800ad5c:	03d09000 	.word	0x03d09000
 800ad60:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d044      	beq.n	800adf6 <USART_SetConfig+0xabe>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d03e      	beq.n	800adf2 <USART_SetConfig+0xaba>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d038      	beq.n	800adee <USART_SetConfig+0xab6>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad80:	2b03      	cmp	r3, #3
 800ad82:	d032      	beq.n	800adea <USART_SetConfig+0xab2>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad88:	2b04      	cmp	r3, #4
 800ad8a:	d02c      	beq.n	800ade6 <USART_SetConfig+0xaae>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad90:	2b05      	cmp	r3, #5
 800ad92:	d026      	beq.n	800ade2 <USART_SetConfig+0xaaa>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad98:	2b06      	cmp	r3, #6
 800ad9a:	d020      	beq.n	800adde <USART_SetConfig+0xaa6>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada0:	2b07      	cmp	r3, #7
 800ada2:	d01a      	beq.n	800adda <USART_SetConfig+0xaa2>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada8:	2b08      	cmp	r3, #8
 800adaa:	d014      	beq.n	800add6 <USART_SetConfig+0xa9e>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb0:	2b09      	cmp	r3, #9
 800adb2:	d00e      	beq.n	800add2 <USART_SetConfig+0xa9a>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb8:	2b0a      	cmp	r3, #10
 800adba:	d008      	beq.n	800adce <USART_SetConfig+0xa96>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc0:	2b0b      	cmp	r3, #11
 800adc2:	d102      	bne.n	800adca <USART_SetConfig+0xa92>
 800adc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adc8:	e016      	b.n	800adf8 <USART_SetConfig+0xac0>
 800adca:	2301      	movs	r3, #1
 800adcc:	e014      	b.n	800adf8 <USART_SetConfig+0xac0>
 800adce:	2380      	movs	r3, #128	@ 0x80
 800add0:	e012      	b.n	800adf8 <USART_SetConfig+0xac0>
 800add2:	2340      	movs	r3, #64	@ 0x40
 800add4:	e010      	b.n	800adf8 <USART_SetConfig+0xac0>
 800add6:	2320      	movs	r3, #32
 800add8:	e00e      	b.n	800adf8 <USART_SetConfig+0xac0>
 800adda:	2310      	movs	r3, #16
 800addc:	e00c      	b.n	800adf8 <USART_SetConfig+0xac0>
 800adde:	230c      	movs	r3, #12
 800ade0:	e00a      	b.n	800adf8 <USART_SetConfig+0xac0>
 800ade2:	230a      	movs	r3, #10
 800ade4:	e008      	b.n	800adf8 <USART_SetConfig+0xac0>
 800ade6:	2308      	movs	r3, #8
 800ade8:	e006      	b.n	800adf8 <USART_SetConfig+0xac0>
 800adea:	2306      	movs	r3, #6
 800adec:	e004      	b.n	800adf8 <USART_SetConfig+0xac0>
 800adee:	2304      	movs	r3, #4
 800adf0:	e002      	b.n	800adf8 <USART_SetConfig+0xac0>
 800adf2:	2302      	movs	r3, #2
 800adf4:	e000      	b.n	800adf8 <USART_SetConfig+0xac0>
 800adf6:	2301      	movs	r3, #1
 800adf8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800adfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae00:	005a      	lsls	r2, r3, #1
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	085b      	lsrs	r3, r3, #1
 800ae08:	441a      	add	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae12:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ae14:	e003      	b.n	800ae1e <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800ae1c:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae20:	2b0f      	cmp	r3, #15
 800ae22:	d916      	bls.n	800ae52 <USART_SetConfig+0xb1a>
 800ae24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae2a:	d212      	bcs.n	800ae52 <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f023 030f 	bic.w	r3, r3, #15
 800ae34:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae38:	085b      	lsrs	r3, r3, #1
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	f003 0307 	and.w	r3, r3, #7
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ae44:	4313      	orrs	r3, r2
 800ae46:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ae4e:	60da      	str	r2, [r3, #12]
 800ae50:	e002      	b.n	800ae58 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800ae70:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3738      	adds	r7, #56	@ 0x38
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae8a:	f7f7 f91b 	bl	80020c4 <HAL_GetTick>
 800ae8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b08      	cmp	r3, #8
 800ae9c:	d10e      	bne.n	800aebc <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800ae9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff fa0d 	bl	800a2cc <USART_WaitOnFlagUntilTimeout>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e01e      	b.n	800aefa <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 0304 	and.w	r3, r3, #4
 800aec6:	2b04      	cmp	r3, #4
 800aec8:	d10e      	bne.n	800aee8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800aeca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7ff f9f7 	bl	800a2cc <USART_WaitOnFlagUntilTimeout>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e008      	b.n	800aefa <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800af02:	b480      	push	{r7}
 800af04:	b085      	sub	sp, #20
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800af10:	2b01      	cmp	r3, #1
 800af12:	d101      	bne.n	800af18 <HAL_USARTEx_EnableSlaveMode+0x16>
 800af14:	2302      	movs	r3, #2
 800af16:	e043      	b.n	800afa0 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2202      	movs	r2, #2
 800af24:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f022 0201 	bic.w	r2, r2, #1
 800af3e:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	689a      	ldr	r2, [r3, #8]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af5e:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f042 0201 	orr.w	r2, r2, #1
 800af6e:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f042 0201 	orr.w	r2, r2, #1
 800af94:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d101      	bne.n	800afc4 <HAL_USARTEx_ConfigNSS+0x18>
 800afc0:	2302      	movs	r3, #2
 800afc2:	e02a      	b.n	800b01a <HAL_USARTEx_ConfigNSS+0x6e>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f022 0201 	bic.w	r2, r2, #1
 800afea:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f023 0108 	bic.w	r1, r3, #8
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	430a      	orrs	r2, r1
 800affe:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr

0800b026 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800b026:	b480      	push	{r7}
 800b028:	b085      	sub	sp, #20
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b034:	2b01      	cmp	r3, #1
 800b036:	d101      	bne.n	800b03c <HAL_USARTEx_DisableFifoMode+0x16>
 800b038:	2302      	movs	r3, #2
 800b03a:	e027      	b.n	800b08c <HAL_USARTEx_DisableFifoMode+0x66>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2202      	movs	r2, #2
 800b048:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 0201 	bic.w	r2, r2, #1
 800b062:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b06a:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d101      	bne.n	800b0b0 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e02d      	b.n	800b10c <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f022 0201 	bic.w	r2, r2, #1
 800b0d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	683a      	ldr	r2, [r7, #0]
 800b0e8:	430a      	orrs	r2, r1
 800b0ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f84f 	bl	800b190 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b124:	2b01      	cmp	r3, #1
 800b126:	d101      	bne.n	800b12c <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800b128:	2302      	movs	r3, #2
 800b12a:	e02d      	b.n	800b188 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2202      	movs	r2, #2
 800b138:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f022 0201 	bic.w	r2, r2, #1
 800b152:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f811 	bl	800b190 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d106      	bne.n	800b1ae <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1ac:	e02f      	b.n	800b20e <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1ae:	2310      	movs	r3, #16
 800b1b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1b2:	2310      	movs	r3, #16
 800b1b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800b1bc:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	f003 0307 	and.w	r3, r3, #7
 800b1c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800b1cc:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	f003 0307 	and.w	r3, r3, #7
 800b1d4:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	7b3a      	ldrb	r2, [r7, #12]
 800b1da:	4910      	ldr	r1, [pc, #64]	@ (800b21c <USARTEx_SetNbDataToProcess+0x8c>)
 800b1dc:	5c8a      	ldrb	r2, [r1, r2]
 800b1de:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800b1e2:	7b3a      	ldrb	r2, [r7, #12]
 800b1e4:	490e      	ldr	r1, [pc, #56]	@ (800b220 <USARTEx_SetNbDataToProcess+0x90>)
 800b1e6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	7b7a      	ldrb	r2, [r7, #13]
 800b1f6:	4909      	ldr	r1, [pc, #36]	@ (800b21c <USARTEx_SetNbDataToProcess+0x8c>)
 800b1f8:	5c8a      	ldrb	r2, [r1, r2]
 800b1fa:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800b1fe:	7b7a      	ldrb	r2, [r7, #13]
 800b200:	4907      	ldr	r1, [pc, #28]	@ (800b220 <USARTEx_SetNbDataToProcess+0x90>)
 800b202:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b204:	fb93 f3f2 	sdiv	r3, r3, r2
 800b208:	b29a      	uxth	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800b20e:	bf00      	nop
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	080108fc 	.word	0x080108fc
 800b220:	08010904 	.word	0x08010904

0800b224 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b224:	b084      	sub	sp, #16
 800b226:	b480      	push	{r7}
 800b228:	b085      	sub	sp, #20
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	f107 001c 	add.w	r0, r7, #28
 800b232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b23a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b23c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b23e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b242:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b246:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b24a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4313      	orrs	r3, r2
 800b250:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	4b07      	ldr	r3, [pc, #28]	@ (800b274 <SDMMC_Init+0x50>)
 800b258:	4013      	ands	r3, r2
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	431a      	orrs	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	b004      	add	sp, #16
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	ffc02c00 	.word	0xffc02c00

0800b278 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b286:	4618      	mov	r0, r3
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b292:	b480      	push	{r7}
 800b294:	b083      	sub	sp, #12
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f043 0203 	orr.w	r2, r3, #3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0303 	and.w	r3, r3, #3
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
	...

0800b2f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b312:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b318:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b31e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	4b06      	ldr	r3, [pc, #24]	@ (800b344 <SDMMC_SendCommand+0x50>)
 800b32c:	4013      	ands	r3, r2
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	431a      	orrs	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	fffee0c0 	.word	0xfffee0c0

0800b348 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	b2db      	uxtb	r3, r3
}
 800b356:	4618      	mov	r0, r3
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b362:	b480      	push	{r7}
 800b364:	b085      	sub	sp, #20
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3314      	adds	r3, #20
 800b370:	461a      	mov	r2, r3
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	4413      	add	r3, r2
 800b376:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b3ae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b3b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b3ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0

}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b088      	sub	sp, #32
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b3ee:	2310      	movs	r3, #16
 800b3f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b400:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b402:	f107 0308 	add.w	r3, r7, #8
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7ff ff73 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b40e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b412:	2110      	movs	r1, #16
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fa5f 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b41a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b41c:	69fb      	ldr	r3, [r7, #28]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3720      	adds	r7, #32
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b088      	sub	sp, #32
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b434:	2311      	movs	r3, #17
 800b436:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b438:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b43c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b43e:	2300      	movs	r3, #0
 800b440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b442:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b446:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b448:	f107 0308 	add.w	r3, r7, #8
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7ff ff50 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b454:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b458:	2111      	movs	r1, #17
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fa3c 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b462:	69fb      	ldr	r3, [r7, #28]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3720      	adds	r7, #32
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b47a:	2312      	movs	r3, #18
 800b47c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b47e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b484:	2300      	movs	r3, #0
 800b486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b488:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b48c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b48e:	f107 0308 	add.w	r3, r7, #8
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7ff ff2d 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b49a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b49e:	2112      	movs	r1, #18
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fa19 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b4a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4a8:	69fb      	ldr	r3, [r7, #28]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3720      	adds	r7, #32
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b088      	sub	sp, #32
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b4c0:	2318      	movs	r3, #24
 800b4c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4d4:	f107 0308 	add.w	r3, r7, #8
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7ff ff0a 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b4e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4e4:	2118      	movs	r1, #24
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f9f6 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b4ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4ee:	69fb      	ldr	r3, [r7, #28]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3720      	adds	r7, #32
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b088      	sub	sp, #32
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b506:	2319      	movs	r3, #25
 800b508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b50a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b50e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b510:	2300      	movs	r3, #0
 800b512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b518:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b51a:	f107 0308 	add.w	r3, r7, #8
 800b51e:	4619      	mov	r1, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff fee7 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b52a:	2119      	movs	r1, #25
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f9d3 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b532:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b534:	69fb      	ldr	r3, [r7, #28]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3720      	adds	r7, #32
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
	...

0800b540 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b088      	sub	sp, #32
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b548:	2300      	movs	r3, #0
 800b54a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b54c:	230c      	movs	r3, #12
 800b54e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b550:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b556:	2300      	movs	r3, #0
 800b558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b55a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b55e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b578:	f107 0308 	add.w	r3, r7, #8
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7ff feb8 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b584:	4a0b      	ldr	r2, [pc, #44]	@ (800b5b4 <SDMMC_CmdStopTransfer+0x74>)
 800b586:	210c      	movs	r1, #12
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f9a5 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b58e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5a2:	d101      	bne.n	800b5a8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b5a8:	69fb      	ldr	r3, [r7, #28]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3720      	adds	r7, #32
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	05f5e100 	.word	0x05f5e100

0800b5b8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b088      	sub	sp, #32
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b5c6:	2307      	movs	r3, #7
 800b5c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5da:	f107 0308 	add.w	r3, r7, #8
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7ff fe87 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b5e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5ea:	2107      	movs	r1, #7
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f973 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b5f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5f4:	69fb      	ldr	r3, [r7, #28]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3720      	adds	r7, #32
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b088      	sub	sp, #32
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b606:	2300      	movs	r3, #0
 800b608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b60e:	2300      	movs	r3, #0
 800b610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b61a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b61c:	f107 0308 	add.w	r3, r7, #8
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fe66 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fb97 	bl	800bd5c <SDMMC_GetCmdError>
 800b62e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b630:	69fb      	ldr	r3, [r7, #28]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3720      	adds	r7, #32
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b088      	sub	sp, #32
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b642:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b648:	2308      	movs	r3, #8
 800b64a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b64c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b652:	2300      	movs	r3, #0
 800b654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b65a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b65c:	f107 0308 	add.w	r3, r7, #8
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff fe46 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fb29 	bl	800bcc0 <SDMMC_GetCmdResp7>
 800b66e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b670:	69fb      	ldr	r3, [r7, #28]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3720      	adds	r7, #32
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b088      	sub	sp, #32
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b688:	2337      	movs	r3, #55	@ 0x37
 800b68a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b68c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b692:	2300      	movs	r3, #0
 800b694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b69a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b69c:	f107 0308 	add.w	r3, r7, #8
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7ff fe26 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b6a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6ac:	2137      	movs	r1, #55	@ 0x37
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f912 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b6b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6b6:	69fb      	ldr	r3, [r7, #28]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3720      	adds	r7, #32
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b088      	sub	sp, #32
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b6ce:	2329      	movs	r3, #41	@ 0x29
 800b6d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6e2:	f107 0308 	add.w	r3, r7, #8
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7ff fe03 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa2e 	bl	800bb50 <SDMMC_GetCmdResp3>
 800b6f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f6:	69fb      	ldr	r3, [r7, #28]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3720      	adds	r7, #32
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b70e:	2306      	movs	r3, #6
 800b710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b712:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b718:	2300      	movs	r3, #0
 800b71a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b71c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b720:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b722:	f107 0308 	add.w	r3, r7, #8
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7ff fde3 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b72e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b732:	2106      	movs	r1, #6
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f8cf 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b73a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b73c:	69fb      	ldr	r3, [r7, #28]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3720      	adds	r7, #32
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b088      	sub	sp, #32
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b74e:	2300      	movs	r3, #0
 800b750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b752:	2333      	movs	r3, #51	@ 0x33
 800b754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b756:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b75a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b75c:	2300      	movs	r3, #0
 800b75e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b764:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b766:	f107 0308 	add.w	r3, r7, #8
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff fdc1 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b772:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b776:	2133      	movs	r1, #51	@ 0x33
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f8ad 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b77e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b780:	69fb      	ldr	r3, [r7, #28]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3720      	adds	r7, #32
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b088      	sub	sp, #32
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b796:	2302      	movs	r3, #2
 800b798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b79a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b79e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7aa:	f107 0308 	add.w	r3, r7, #8
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff fd9f 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f980 	bl	800babc <SDMMC_GetCmdResp2>
 800b7bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7be:	69fb      	ldr	r3, [r7, #28]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3720      	adds	r7, #32
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b7d6:	2309      	movs	r3, #9
 800b7d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b7da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b7de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7ea:	f107 0308 	add.w	r3, r7, #8
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff fd7f 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f960 	bl	800babc <SDMMC_GetCmdResp2>
 800b7fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7fe:	69fb      	ldr	r3, [r7, #28]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3720      	adds	r7, #32
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b088      	sub	sp, #32
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b816:	2303      	movs	r3, #3
 800b818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b81a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b81e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b820:	2300      	movs	r3, #0
 800b822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b828:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b82a:	f107 0308 	add.w	r3, r7, #8
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff fd5f 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	2103      	movs	r1, #3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 f9c8 	bl	800bbd0 <SDMMC_GetCmdResp6>
 800b840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b842:	69fb      	ldr	r3, [r7, #28]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3720      	adds	r7, #32
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b088      	sub	sp, #32
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b85a:	230d      	movs	r3, #13
 800b85c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b85e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b864:	2300      	movs	r3, #0
 800b866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b86c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b86e:	f107 0308 	add.w	r3, r7, #8
 800b872:	4619      	mov	r1, r3
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f7ff fd3d 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b87a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b87e:	210d      	movs	r1, #13
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f829 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b886:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b888:	69fb      	ldr	r3, [r7, #28]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3720      	adds	r7, #32
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b088      	sub	sp, #32
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b89a:	2300      	movs	r3, #0
 800b89c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b89e:	230d      	movs	r3, #13
 800b8a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b8a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8b2:	f107 0308 	add.w	r3, r7, #8
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff fd1b 	bl	800b2f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b8be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8c2:	210d      	movs	r1, #13
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f807 	bl	800b8d8 <SDMMC_GetCmdResp1>
 800b8ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8cc:	69fb      	ldr	r3, [r7, #28]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3720      	adds	r7, #32
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
	...

0800b8d8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b8e6:	4b70      	ldr	r3, [pc, #448]	@ (800baa8 <SDMMC_GetCmdResp1+0x1d0>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a70      	ldr	r2, [pc, #448]	@ (800baac <SDMMC_GetCmdResp1+0x1d4>)
 800b8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f0:	0a5a      	lsrs	r2, r3, #9
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	fb02 f303 	mul.w	r3, r2, r3
 800b8f8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	1e5a      	subs	r2, r3, #1
 800b8fe:	61fa      	str	r2, [r7, #28]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d102      	bne.n	800b90a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b904:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b908:	e0c9      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b90e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b910:	69ba      	ldr	r2, [r7, #24]
 800b912:	4b67      	ldr	r3, [pc, #412]	@ (800bab0 <SDMMC_GetCmdResp1+0x1d8>)
 800b914:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b916:	2b00      	cmp	r3, #0
 800b918:	d0ef      	beq.n	800b8fa <SDMMC_GetCmdResp1+0x22>
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1ea      	bne.n	800b8fa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b928:	f003 0304 	and.w	r3, r3, #4
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d004      	beq.n	800b93a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2204      	movs	r2, #4
 800b934:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b936:	2304      	movs	r3, #4
 800b938:	e0b1      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b93e:	f003 0301 	and.w	r3, r3, #1
 800b942:	2b00      	cmp	r3, #0
 800b944:	d004      	beq.n	800b950 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2201      	movs	r2, #1
 800b94a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b94c:	2301      	movs	r3, #1
 800b94e:	e0a6      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4a58      	ldr	r2, [pc, #352]	@ (800bab4 <SDMMC_GetCmdResp1+0x1dc>)
 800b954:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f7ff fcf6 	bl	800b348 <SDMMC_GetCommandResponse>
 800b95c:	4603      	mov	r3, r0
 800b95e:	461a      	mov	r2, r3
 800b960:	7afb      	ldrb	r3, [r7, #11]
 800b962:	4293      	cmp	r3, r2
 800b964:	d001      	beq.n	800b96a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b966:	2301      	movs	r3, #1
 800b968:	e099      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b96a:	2100      	movs	r1, #0
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f7ff fcf8 	bl	800b362 <SDMMC_GetResponse>
 800b972:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	4b50      	ldr	r3, [pc, #320]	@ (800bab8 <SDMMC_GetCmdResp1+0x1e0>)
 800b978:	4013      	ands	r3, r2
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b97e:	2300      	movs	r3, #0
 800b980:	e08d      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2b00      	cmp	r3, #0
 800b986:	da02      	bge.n	800b98e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b988:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b98c:	e087      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d001      	beq.n	800b99c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b998:	2340      	movs	r3, #64	@ 0x40
 800b99a:	e080      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b9a6:	2380      	movs	r3, #128	@ 0x80
 800b9a8:	e079      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b9b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b9b8:	e071      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b9c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b9c8:	e069      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b9d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9d8:	e061      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b9e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b9e8:	e059      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b9f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b9f8:	e051      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba08:	e049      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ba18:	e041      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ba24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba28:	e039      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ba38:	e031      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ba44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ba48:	e029      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d002      	beq.n	800ba5a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ba54:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ba58:	e021      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ba68:	e019      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba74:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ba78:	e011      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba84:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ba88:	e009      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f003 0308 	and.w	r3, r3, #8
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba94:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ba98:	e001      	b.n	800ba9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3720      	adds	r7, #32
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	24000000 	.word	0x24000000
 800baac:	10624dd3 	.word	0x10624dd3
 800bab0:	00200045 	.word	0x00200045
 800bab4:	002000c5 	.word	0x002000c5
 800bab8:	fdffe008 	.word	0xfdffe008

0800babc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bac4:	4b1f      	ldr	r3, [pc, #124]	@ (800bb44 <SDMMC_GetCmdResp2+0x88>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a1f      	ldr	r2, [pc, #124]	@ (800bb48 <SDMMC_GetCmdResp2+0x8c>)
 800baca:	fba2 2303 	umull	r2, r3, r2, r3
 800bace:	0a5b      	lsrs	r3, r3, #9
 800bad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bad4:	fb02 f303 	mul.w	r3, r2, r3
 800bad8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	1e5a      	subs	r2, r3, #1
 800bade:	60fa      	str	r2, [r7, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d102      	bne.n	800baea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bae4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bae8:	e026      	b.n	800bb38 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d0ef      	beq.n	800bada <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1ea      	bne.n	800bada <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb08:	f003 0304 	and.w	r3, r3, #4
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d004      	beq.n	800bb1a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2204      	movs	r2, #4
 800bb14:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb16:	2304      	movs	r3, #4
 800bb18:	e00e      	b.n	800bb38 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d004      	beq.n	800bb30 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e003      	b.n	800bb38 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a06      	ldr	r2, [pc, #24]	@ (800bb4c <SDMMC_GetCmdResp2+0x90>)
 800bb34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	24000000 	.word	0x24000000
 800bb48:	10624dd3 	.word	0x10624dd3
 800bb4c:	002000c5 	.word	0x002000c5

0800bb50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb58:	4b1a      	ldr	r3, [pc, #104]	@ (800bbc4 <SDMMC_GetCmdResp3+0x74>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a1a      	ldr	r2, [pc, #104]	@ (800bbc8 <SDMMC_GetCmdResp3+0x78>)
 800bb5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb62:	0a5b      	lsrs	r3, r3, #9
 800bb64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb68:	fb02 f303 	mul.w	r3, r2, r3
 800bb6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	1e5a      	subs	r2, r3, #1
 800bb72:	60fa      	str	r2, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d102      	bne.n	800bb7e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb7c:	e01b      	b.n	800bbb6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb82:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d0ef      	beq.n	800bb6e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1ea      	bne.n	800bb6e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb9c:	f003 0304 	and.w	r3, r3, #4
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d004      	beq.n	800bbae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2204      	movs	r2, #4
 800bba8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbaa:	2304      	movs	r3, #4
 800bbac:	e003      	b.n	800bbb6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a06      	ldr	r2, [pc, #24]	@ (800bbcc <SDMMC_GetCmdResp3+0x7c>)
 800bbb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3714      	adds	r7, #20
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	24000000 	.word	0x24000000
 800bbc8:	10624dd3 	.word	0x10624dd3
 800bbcc:	002000c5 	.word	0x002000c5

0800bbd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b088      	sub	sp, #32
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	607a      	str	r2, [r7, #4]
 800bbdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bbde:	4b35      	ldr	r3, [pc, #212]	@ (800bcb4 <SDMMC_GetCmdResp6+0xe4>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a35      	ldr	r2, [pc, #212]	@ (800bcb8 <SDMMC_GetCmdResp6+0xe8>)
 800bbe4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe8:	0a5b      	lsrs	r3, r3, #9
 800bbea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbee:	fb02 f303 	mul.w	r3, r2, r3
 800bbf2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	1e5a      	subs	r2, r3, #1
 800bbf8:	61fa      	str	r2, [r7, #28]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d102      	bne.n	800bc04 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbfe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bc02:	e052      	b.n	800bcaa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc08:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d0ef      	beq.n	800bbf4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1ea      	bne.n	800bbf4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc22:	f003 0304 	and.w	r3, r3, #4
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d004      	beq.n	800bc34 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2204      	movs	r2, #4
 800bc2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc30:	2304      	movs	r3, #4
 800bc32:	e03a      	b.n	800bcaa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d004      	beq.n	800bc4a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2201      	movs	r2, #1
 800bc44:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e02f      	b.n	800bcaa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f7ff fb7c 	bl	800b348 <SDMMC_GetCommandResponse>
 800bc50:	4603      	mov	r3, r0
 800bc52:	461a      	mov	r2, r3
 800bc54:	7afb      	ldrb	r3, [r7, #11]
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d001      	beq.n	800bc5e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e025      	b.n	800bcaa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	4a16      	ldr	r2, [pc, #88]	@ (800bcbc <SDMMC_GetCmdResp6+0xec>)
 800bc62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bc64:	2100      	movs	r1, #0
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f7ff fb7b 	bl	800b362 <SDMMC_GetResponse>
 800bc6c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d106      	bne.n	800bc86 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	0c1b      	lsrs	r3, r3, #16
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bc82:	2300      	movs	r3, #0
 800bc84:	e011      	b.n	800bcaa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bc94:	e009      	b.n	800bcaa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bca4:	e001      	b.n	800bcaa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bca6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3720      	adds	r7, #32
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	24000000 	.word	0x24000000
 800bcb8:	10624dd3 	.word	0x10624dd3
 800bcbc:	002000c5 	.word	0x002000c5

0800bcc0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcc8:	4b22      	ldr	r3, [pc, #136]	@ (800bd54 <SDMMC_GetCmdResp7+0x94>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a22      	ldr	r2, [pc, #136]	@ (800bd58 <SDMMC_GetCmdResp7+0x98>)
 800bcce:	fba2 2303 	umull	r2, r3, r2, r3
 800bcd2:	0a5b      	lsrs	r3, r3, #9
 800bcd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcd8:	fb02 f303 	mul.w	r3, r2, r3
 800bcdc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	1e5a      	subs	r2, r3, #1
 800bce2:	60fa      	str	r2, [r7, #12]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d102      	bne.n	800bcee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bce8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bcec:	e02c      	b.n	800bd48 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcf2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d0ef      	beq.n	800bcde <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1ea      	bne.n	800bcde <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd0c:	f003 0304 	and.w	r3, r3, #4
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d004      	beq.n	800bd1e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2204      	movs	r2, #4
 800bd18:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd1a:	2304      	movs	r3, #4
 800bd1c:	e014      	b.n	800bd48 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd22:	f003 0301 	and.w	r3, r3, #1
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d004      	beq.n	800bd34 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e009      	b.n	800bd48 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2240      	movs	r2, #64	@ 0x40
 800bd44:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd46:	2300      	movs	r3, #0

}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr
 800bd54:	24000000 	.word	0x24000000
 800bd58:	10624dd3 	.word	0x10624dd3

0800bd5c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd64:	4b11      	ldr	r3, [pc, #68]	@ (800bdac <SDMMC_GetCmdError+0x50>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a11      	ldr	r2, [pc, #68]	@ (800bdb0 <SDMMC_GetCmdError+0x54>)
 800bd6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd6e:	0a5b      	lsrs	r3, r3, #9
 800bd70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd74:	fb02 f303 	mul.w	r3, r2, r3
 800bd78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	1e5a      	subs	r2, r3, #1
 800bd7e:	60fa      	str	r2, [r7, #12]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d102      	bne.n	800bd8a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bd88:	e009      	b.n	800bd9e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d0f1      	beq.n	800bd7a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a06      	ldr	r2, [pc, #24]	@ (800bdb4 <SDMMC_GetCmdError+0x58>)
 800bd9a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	24000000 	.word	0x24000000
 800bdb0:	10624dd3 	.word	0x10624dd3
 800bdb4:	002000c5 	.word	0x002000c5

0800bdb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bdbc:	4904      	ldr	r1, [pc, #16]	@ (800bdd0 <MX_FATFS_Init+0x18>)
 800bdbe:	4805      	ldr	r0, [pc, #20]	@ (800bdd4 <MX_FATFS_Init+0x1c>)
 800bdc0:	f000 f9e4 	bl	800c18c <FATFS_LinkDriver>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	4b03      	ldr	r3, [pc, #12]	@ (800bdd8 <MX_FATFS_Init+0x20>)
 800bdca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bdcc:	bf00      	nop
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	240009b8 	.word	0x240009b8
 800bdd4:	0801090c 	.word	0x0801090c
 800bdd8:	240009b4 	.word	0x240009b4

0800bddc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bde6:	f000 f879 	bl	800bedc <BSP_SD_IsDetected>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d001      	beq.n	800bdf4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	e012      	b.n	800be1a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bdf4:	480b      	ldr	r0, [pc, #44]	@ (800be24 <BSP_SD_Init+0x48>)
 800bdf6:	f7fa ff15 	bl	8006c24 <HAL_SD_Init>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d109      	bne.n	800be18 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800be04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800be08:	4806      	ldr	r0, [pc, #24]	@ (800be24 <BSP_SD_Init+0x48>)
 800be0a:	f7fb fdd1 	bl	80079b0 <HAL_SD_ConfigWideBusOperation>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d001      	beq.n	800be18 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800be18:	79fb      	ldrb	r3, [r7, #7]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	240002f0 	.word	0x240002f0

0800be28 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b088      	sub	sp, #32
 800be2c:	af02      	add	r7, sp, #8
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	607a      	str	r2, [r7, #4]
 800be34:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	68f9      	ldr	r1, [r7, #12]
 800be44:	4806      	ldr	r0, [pc, #24]	@ (800be60 <BSP_SD_ReadBlocks+0x38>)
 800be46:	f7fb f80d 	bl	8006e64 <HAL_SD_ReadBlocks>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d001      	beq.n	800be54 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be54:	7dfb      	ldrb	r3, [r7, #23]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	240002f0 	.word	0x240002f0

0800be64 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b088      	sub	sp, #32
 800be68:	af02      	add	r7, sp, #8
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
 800be70:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800be72:	2300      	movs	r3, #0
 800be74:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	68f9      	ldr	r1, [r7, #12]
 800be80:	4806      	ldr	r0, [pc, #24]	@ (800be9c <BSP_SD_WriteBlocks+0x38>)
 800be82:	f7fb f979 	bl	8007178 <HAL_SD_WriteBlocks>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be90:	7dfb      	ldrb	r3, [r7, #23]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	240002f0 	.word	0x240002f0

0800bea0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bea4:	4805      	ldr	r0, [pc, #20]	@ (800bebc <BSP_SD_GetCardState+0x1c>)
 800bea6:	f7fb fe95 	bl	8007bd4 <HAL_SD_GetCardState>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b04      	cmp	r3, #4
 800beae:	bf14      	ite	ne
 800beb0:	2301      	movne	r3, #1
 800beb2:	2300      	moveq	r3, #0
 800beb4:	b2db      	uxtb	r3, r3
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	240002f0 	.word	0x240002f0

0800bec0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bec8:	6879      	ldr	r1, [r7, #4]
 800beca:	4803      	ldr	r0, [pc, #12]	@ (800bed8 <BSP_SD_GetCardInfo+0x18>)
 800becc:	f7fb fd44 	bl	8007958 <HAL_SD_GetCardInfo>
}
 800bed0:	bf00      	nop
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	240002f0 	.word	0x240002f0

0800bedc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bee2:	2301      	movs	r3, #1
 800bee4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bee6:	f000 f80b 	bl	800bf00 <BSP_PlatformIsDetected>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bef0:	2300      	movs	r3, #0
 800bef2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bef4:	79fb      	ldrb	r3, [r7, #7]
 800bef6:	b2db      	uxtb	r3, r3
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bf06:	2301      	movs	r3, #1
 800bf08:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bf0a:	2180      	movs	r1, #128	@ 0x80
 800bf0c:	4806      	ldr	r0, [pc, #24]	@ (800bf28 <BSP_PlatformIsDetected+0x28>)
 800bf0e:	f7f7 f99d 	bl	800324c <HAL_GPIO_ReadPin>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d001      	beq.n	800bf1c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	58020800 	.word	0x58020800

0800bf2c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	4603      	mov	r3, r0
 800bf34:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bf36:	4b0b      	ldr	r3, [pc, #44]	@ (800bf64 <SD_CheckStatus+0x38>)
 800bf38:	2201      	movs	r2, #1
 800bf3a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bf3c:	f7ff ffb0 	bl	800bea0 <BSP_SD_GetCardState>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d107      	bne.n	800bf56 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bf46:	4b07      	ldr	r3, [pc, #28]	@ (800bf64 <SD_CheckStatus+0x38>)
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	f023 0301 	bic.w	r3, r3, #1
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	4b04      	ldr	r3, [pc, #16]	@ (800bf64 <SD_CheckStatus+0x38>)
 800bf54:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bf56:	4b03      	ldr	r3, [pc, #12]	@ (800bf64 <SD_CheckStatus+0x38>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	b2db      	uxtb	r3, r3
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	2400000d 	.word	0x2400000d

0800bf68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	4603      	mov	r3, r0
 800bf70:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bf72:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa0 <SD_initialize+0x38>)
 800bf74:	2201      	movs	r2, #1
 800bf76:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bf78:	f7ff ff30 	bl	800bddc <BSP_SD_Init>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d107      	bne.n	800bf92 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bf82:	79fb      	ldrb	r3, [r7, #7]
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7ff ffd1 	bl	800bf2c <SD_CheckStatus>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4b04      	ldr	r3, [pc, #16]	@ (800bfa0 <SD_initialize+0x38>)
 800bf90:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bf92:	4b03      	ldr	r3, [pc, #12]	@ (800bfa0 <SD_initialize+0x38>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	b2db      	uxtb	r3, r3
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	2400000d 	.word	0x2400000d

0800bfa4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	4603      	mov	r3, r0
 800bfac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff ffbb 	bl	800bf2c <SD_CheckStatus>
 800bfb6:	4603      	mov	r3, r0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3708      	adds	r7, #8
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60b9      	str	r1, [r7, #8]
 800bfc8:	607a      	str	r2, [r7, #4]
 800bfca:	603b      	str	r3, [r7, #0]
 800bfcc:	4603      	mov	r3, r0
 800bfce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bfd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	6879      	ldr	r1, [r7, #4]
 800bfdc:	68b8      	ldr	r0, [r7, #8]
 800bfde:	f7ff ff23 	bl	800be28 <BSP_SD_ReadBlocks>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d107      	bne.n	800bff8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bfe8:	bf00      	nop
 800bfea:	f7ff ff59 	bl	800bea0 <BSP_SD_GetCardState>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1fa      	bne.n	800bfea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3718      	adds	r7, #24
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b086      	sub	sp, #24
 800c006:	af00      	add	r7, sp, #0
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
 800c00c:	603b      	str	r3, [r7, #0]
 800c00e:	4603      	mov	r3, r0
 800c010:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c016:	f04f 33ff 	mov.w	r3, #4294967295
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	6879      	ldr	r1, [r7, #4]
 800c01e:	68b8      	ldr	r0, [r7, #8]
 800c020:	f7ff ff20 	bl	800be64 <BSP_SD_WriteBlocks>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d107      	bne.n	800c03a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c02a:	bf00      	nop
 800c02c:	f7ff ff38 	bl	800bea0 <BSP_SD_GetCardState>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1fa      	bne.n	800c02c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c036:	2300      	movs	r3, #0
 800c038:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b08c      	sub	sp, #48	@ 0x30
 800c048:	af00      	add	r7, sp, #0
 800c04a:	4603      	mov	r3, r0
 800c04c:	603a      	str	r2, [r7, #0]
 800c04e:	71fb      	strb	r3, [r7, #7]
 800c050:	460b      	mov	r3, r1
 800c052:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c05a:	4b25      	ldr	r3, [pc, #148]	@ (800c0f0 <SD_ioctl+0xac>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	f003 0301 	and.w	r3, r3, #1
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <SD_ioctl+0x28>
 800c068:	2303      	movs	r3, #3
 800c06a:	e03c      	b.n	800c0e6 <SD_ioctl+0xa2>

  switch (cmd)
 800c06c:	79bb      	ldrb	r3, [r7, #6]
 800c06e:	2b03      	cmp	r3, #3
 800c070:	d834      	bhi.n	800c0dc <SD_ioctl+0x98>
 800c072:	a201      	add	r2, pc, #4	@ (adr r2, 800c078 <SD_ioctl+0x34>)
 800c074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c078:	0800c089 	.word	0x0800c089
 800c07c:	0800c091 	.word	0x0800c091
 800c080:	0800c0a9 	.word	0x0800c0a9
 800c084:	0800c0c3 	.word	0x0800c0c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c08e:	e028      	b.n	800c0e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c090:	f107 0308 	add.w	r3, r7, #8
 800c094:	4618      	mov	r0, r3
 800c096:	f7ff ff13 	bl	800bec0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c09a:	6a3a      	ldr	r2, [r7, #32]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c0a6:	e01c      	b.n	800c0e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0a8:	f107 0308 	add.w	r3, r7, #8
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7ff ff07 	bl	800bec0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c0c0:	e00f      	b.n	800c0e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0c2:	f107 0308 	add.w	r3, r7, #8
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7ff fefa 	bl	800bec0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ce:	0a5a      	lsrs	r2, r3, #9
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c0da:	e002      	b.n	800c0e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c0dc:	2304      	movs	r3, #4
 800c0de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3730      	adds	r7, #48	@ 0x30
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	2400000d 	.word	0x2400000d

0800c0f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b087      	sub	sp, #28
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	4613      	mov	r3, r2
 800c100:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c102:	2301      	movs	r3, #1
 800c104:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c10a:	4b1f      	ldr	r3, [pc, #124]	@ (800c188 <FATFS_LinkDriverEx+0x94>)
 800c10c:	7a5b      	ldrb	r3, [r3, #9]
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d131      	bne.n	800c178 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c114:	4b1c      	ldr	r3, [pc, #112]	@ (800c188 <FATFS_LinkDriverEx+0x94>)
 800c116:	7a5b      	ldrb	r3, [r3, #9]
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	461a      	mov	r2, r3
 800c11c:	4b1a      	ldr	r3, [pc, #104]	@ (800c188 <FATFS_LinkDriverEx+0x94>)
 800c11e:	2100      	movs	r1, #0
 800c120:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c122:	4b19      	ldr	r3, [pc, #100]	@ (800c188 <FATFS_LinkDriverEx+0x94>)
 800c124:	7a5b      	ldrb	r3, [r3, #9]
 800c126:	b2db      	uxtb	r3, r3
 800c128:	4a17      	ldr	r2, [pc, #92]	@ (800c188 <FATFS_LinkDriverEx+0x94>)
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c132:	4b15      	ldr	r3, [pc, #84]	@ (800c188 <FATFS_LinkDriverEx+0x94>)
 800c134:	7a5b      	ldrb	r3, [r3, #9]
 800c136:	b2db      	uxtb	r3, r3
 800c138:	461a      	mov	r2, r3
 800c13a:	4b13      	ldr	r3, [pc, #76]	@ (800c188 <FATFS_LinkDriverEx+0x94>)
 800c13c:	4413      	add	r3, r2
 800c13e:	79fa      	ldrb	r2, [r7, #7]
 800c140:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c142:	4b11      	ldr	r3, [pc, #68]	@ (800c188 <FATFS_LinkDriverEx+0x94>)
 800c144:	7a5b      	ldrb	r3, [r3, #9]
 800c146:	b2db      	uxtb	r3, r3
 800c148:	1c5a      	adds	r2, r3, #1
 800c14a:	b2d1      	uxtb	r1, r2
 800c14c:	4a0e      	ldr	r2, [pc, #56]	@ (800c188 <FATFS_LinkDriverEx+0x94>)
 800c14e:	7251      	strb	r1, [r2, #9]
 800c150:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c152:	7dbb      	ldrb	r3, [r7, #22]
 800c154:	3330      	adds	r3, #48	@ 0x30
 800c156:	b2da      	uxtb	r2, r3
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	3301      	adds	r3, #1
 800c160:	223a      	movs	r2, #58	@ 0x3a
 800c162:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	3302      	adds	r3, #2
 800c168:	222f      	movs	r2, #47	@ 0x2f
 800c16a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	3303      	adds	r3, #3
 800c170:	2200      	movs	r2, #0
 800c172:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c174:	2300      	movs	r3, #0
 800c176:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c178:	7dfb      	ldrb	r3, [r7, #23]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	371c      	adds	r7, #28
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	240009bc 	.word	0x240009bc

0800c18c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c196:	2200      	movs	r2, #0
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7ff ffaa 	bl	800c0f4 <FATFS_LinkDriverEx>
 800c1a0:	4603      	mov	r3, r0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <__cvt>:
 800c1aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ac:	ed2d 8b02 	vpush	{d8}
 800c1b0:	eeb0 8b40 	vmov.f64	d8, d0
 800c1b4:	b085      	sub	sp, #20
 800c1b6:	4617      	mov	r7, r2
 800c1b8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c1ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c1bc:	ee18 2a90 	vmov	r2, s17
 800c1c0:	f025 0520 	bic.w	r5, r5, #32
 800c1c4:	2a00      	cmp	r2, #0
 800c1c6:	bfb6      	itet	lt
 800c1c8:	222d      	movlt	r2, #45	@ 0x2d
 800c1ca:	2200      	movge	r2, #0
 800c1cc:	eeb1 8b40 	vneglt.f64	d8, d0
 800c1d0:	2d46      	cmp	r5, #70	@ 0x46
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	701a      	strb	r2, [r3, #0]
 800c1d6:	d004      	beq.n	800c1e2 <__cvt+0x38>
 800c1d8:	2d45      	cmp	r5, #69	@ 0x45
 800c1da:	d100      	bne.n	800c1de <__cvt+0x34>
 800c1dc:	3401      	adds	r4, #1
 800c1de:	2102      	movs	r1, #2
 800c1e0:	e000      	b.n	800c1e4 <__cvt+0x3a>
 800c1e2:	2103      	movs	r1, #3
 800c1e4:	ab03      	add	r3, sp, #12
 800c1e6:	9301      	str	r3, [sp, #4]
 800c1e8:	ab02      	add	r3, sp, #8
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	4633      	mov	r3, r6
 800c1f0:	eeb0 0b48 	vmov.f64	d0, d8
 800c1f4:	f001 f964 	bl	800d4c0 <_dtoa_r>
 800c1f8:	2d47      	cmp	r5, #71	@ 0x47
 800c1fa:	d114      	bne.n	800c226 <__cvt+0x7c>
 800c1fc:	07fb      	lsls	r3, r7, #31
 800c1fe:	d50a      	bpl.n	800c216 <__cvt+0x6c>
 800c200:	1902      	adds	r2, r0, r4
 800c202:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20a:	bf08      	it	eq
 800c20c:	9203      	streq	r2, [sp, #12]
 800c20e:	2130      	movs	r1, #48	@ 0x30
 800c210:	9b03      	ldr	r3, [sp, #12]
 800c212:	4293      	cmp	r3, r2
 800c214:	d319      	bcc.n	800c24a <__cvt+0xa0>
 800c216:	9b03      	ldr	r3, [sp, #12]
 800c218:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c21a:	1a1b      	subs	r3, r3, r0
 800c21c:	6013      	str	r3, [r2, #0]
 800c21e:	b005      	add	sp, #20
 800c220:	ecbd 8b02 	vpop	{d8}
 800c224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c226:	2d46      	cmp	r5, #70	@ 0x46
 800c228:	eb00 0204 	add.w	r2, r0, r4
 800c22c:	d1e9      	bne.n	800c202 <__cvt+0x58>
 800c22e:	7803      	ldrb	r3, [r0, #0]
 800c230:	2b30      	cmp	r3, #48	@ 0x30
 800c232:	d107      	bne.n	800c244 <__cvt+0x9a>
 800c234:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23c:	bf1c      	itt	ne
 800c23e:	f1c4 0401 	rsbne	r4, r4, #1
 800c242:	6034      	strne	r4, [r6, #0]
 800c244:	6833      	ldr	r3, [r6, #0]
 800c246:	441a      	add	r2, r3
 800c248:	e7db      	b.n	800c202 <__cvt+0x58>
 800c24a:	1c5c      	adds	r4, r3, #1
 800c24c:	9403      	str	r4, [sp, #12]
 800c24e:	7019      	strb	r1, [r3, #0]
 800c250:	e7de      	b.n	800c210 <__cvt+0x66>

0800c252 <__exponent>:
 800c252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c254:	2900      	cmp	r1, #0
 800c256:	bfba      	itte	lt
 800c258:	4249      	neglt	r1, r1
 800c25a:	232d      	movlt	r3, #45	@ 0x2d
 800c25c:	232b      	movge	r3, #43	@ 0x2b
 800c25e:	2909      	cmp	r1, #9
 800c260:	7002      	strb	r2, [r0, #0]
 800c262:	7043      	strb	r3, [r0, #1]
 800c264:	dd29      	ble.n	800c2ba <__exponent+0x68>
 800c266:	f10d 0307 	add.w	r3, sp, #7
 800c26a:	461d      	mov	r5, r3
 800c26c:	270a      	movs	r7, #10
 800c26e:	461a      	mov	r2, r3
 800c270:	fbb1 f6f7 	udiv	r6, r1, r7
 800c274:	fb07 1416 	mls	r4, r7, r6, r1
 800c278:	3430      	adds	r4, #48	@ 0x30
 800c27a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c27e:	460c      	mov	r4, r1
 800c280:	2c63      	cmp	r4, #99	@ 0x63
 800c282:	f103 33ff 	add.w	r3, r3, #4294967295
 800c286:	4631      	mov	r1, r6
 800c288:	dcf1      	bgt.n	800c26e <__exponent+0x1c>
 800c28a:	3130      	adds	r1, #48	@ 0x30
 800c28c:	1e94      	subs	r4, r2, #2
 800c28e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c292:	1c41      	adds	r1, r0, #1
 800c294:	4623      	mov	r3, r4
 800c296:	42ab      	cmp	r3, r5
 800c298:	d30a      	bcc.n	800c2b0 <__exponent+0x5e>
 800c29a:	f10d 0309 	add.w	r3, sp, #9
 800c29e:	1a9b      	subs	r3, r3, r2
 800c2a0:	42ac      	cmp	r4, r5
 800c2a2:	bf88      	it	hi
 800c2a4:	2300      	movhi	r3, #0
 800c2a6:	3302      	adds	r3, #2
 800c2a8:	4403      	add	r3, r0
 800c2aa:	1a18      	subs	r0, r3, r0
 800c2ac:	b003      	add	sp, #12
 800c2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c2b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c2b8:	e7ed      	b.n	800c296 <__exponent+0x44>
 800c2ba:	2330      	movs	r3, #48	@ 0x30
 800c2bc:	3130      	adds	r1, #48	@ 0x30
 800c2be:	7083      	strb	r3, [r0, #2]
 800c2c0:	70c1      	strb	r1, [r0, #3]
 800c2c2:	1d03      	adds	r3, r0, #4
 800c2c4:	e7f1      	b.n	800c2aa <__exponent+0x58>
	...

0800c2c8 <_printf_float>:
 800c2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2cc:	b08d      	sub	sp, #52	@ 0x34
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c2d4:	4616      	mov	r6, r2
 800c2d6:	461f      	mov	r7, r3
 800c2d8:	4605      	mov	r5, r0
 800c2da:	f000 ffdb 	bl	800d294 <_localeconv_r>
 800c2de:	f8d0 b000 	ldr.w	fp, [r0]
 800c2e2:	4658      	mov	r0, fp
 800c2e4:	f7f4 f864 	bl	80003b0 <strlen>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800c2f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c2f4:	6822      	ldr	r2, [r4, #0]
 800c2f6:	9005      	str	r0, [sp, #20]
 800c2f8:	3307      	adds	r3, #7
 800c2fa:	f023 0307 	bic.w	r3, r3, #7
 800c2fe:	f103 0108 	add.w	r1, r3, #8
 800c302:	f8c8 1000 	str.w	r1, [r8]
 800c306:	ed93 0b00 	vldr	d0, [r3]
 800c30a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c568 <_printf_float+0x2a0>
 800c30e:	eeb0 7bc0 	vabs.f64	d7, d0
 800c312:	eeb4 7b46 	vcmp.f64	d7, d6
 800c316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c31a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c31e:	dd24      	ble.n	800c36a <_printf_float+0xa2>
 800c320:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c328:	d502      	bpl.n	800c330 <_printf_float+0x68>
 800c32a:	232d      	movs	r3, #45	@ 0x2d
 800c32c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c330:	498f      	ldr	r1, [pc, #572]	@ (800c570 <_printf_float+0x2a8>)
 800c332:	4b90      	ldr	r3, [pc, #576]	@ (800c574 <_printf_float+0x2ac>)
 800c334:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c338:	bf94      	ite	ls
 800c33a:	4688      	movls	r8, r1
 800c33c:	4698      	movhi	r8, r3
 800c33e:	f022 0204 	bic.w	r2, r2, #4
 800c342:	2303      	movs	r3, #3
 800c344:	6123      	str	r3, [r4, #16]
 800c346:	6022      	str	r2, [r4, #0]
 800c348:	f04f 0a00 	mov.w	sl, #0
 800c34c:	9700      	str	r7, [sp, #0]
 800c34e:	4633      	mov	r3, r6
 800c350:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c352:	4621      	mov	r1, r4
 800c354:	4628      	mov	r0, r5
 800c356:	f000 f9d1 	bl	800c6fc <_printf_common>
 800c35a:	3001      	adds	r0, #1
 800c35c:	f040 8089 	bne.w	800c472 <_printf_float+0x1aa>
 800c360:	f04f 30ff 	mov.w	r0, #4294967295
 800c364:	b00d      	add	sp, #52	@ 0x34
 800c366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c372:	d709      	bvc.n	800c388 <_printf_float+0xc0>
 800c374:	ee10 3a90 	vmov	r3, s1
 800c378:	2b00      	cmp	r3, #0
 800c37a:	bfbc      	itt	lt
 800c37c:	232d      	movlt	r3, #45	@ 0x2d
 800c37e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c382:	497d      	ldr	r1, [pc, #500]	@ (800c578 <_printf_float+0x2b0>)
 800c384:	4b7d      	ldr	r3, [pc, #500]	@ (800c57c <_printf_float+0x2b4>)
 800c386:	e7d5      	b.n	800c334 <_printf_float+0x6c>
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	1c59      	adds	r1, r3, #1
 800c38c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c390:	d139      	bne.n	800c406 <_printf_float+0x13e>
 800c392:	2306      	movs	r3, #6
 800c394:	6063      	str	r3, [r4, #4]
 800c396:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c39a:	2300      	movs	r3, #0
 800c39c:	6022      	str	r2, [r4, #0]
 800c39e:	9303      	str	r3, [sp, #12]
 800c3a0:	ab0a      	add	r3, sp, #40	@ 0x28
 800c3a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c3a6:	ab09      	add	r3, sp, #36	@ 0x24
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	6861      	ldr	r1, [r4, #4]
 800c3ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	f7ff fefa 	bl	800c1aa <__cvt>
 800c3b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c3ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3bc:	4680      	mov	r8, r0
 800c3be:	d129      	bne.n	800c414 <_printf_float+0x14c>
 800c3c0:	1cc8      	adds	r0, r1, #3
 800c3c2:	db02      	blt.n	800c3ca <_printf_float+0x102>
 800c3c4:	6863      	ldr	r3, [r4, #4]
 800c3c6:	4299      	cmp	r1, r3
 800c3c8:	dd41      	ble.n	800c44e <_printf_float+0x186>
 800c3ca:	f1a9 0902 	sub.w	r9, r9, #2
 800c3ce:	fa5f f989 	uxtb.w	r9, r9
 800c3d2:	3901      	subs	r1, #1
 800c3d4:	464a      	mov	r2, r9
 800c3d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c3da:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3dc:	f7ff ff39 	bl	800c252 <__exponent>
 800c3e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3e2:	1813      	adds	r3, r2, r0
 800c3e4:	2a01      	cmp	r2, #1
 800c3e6:	4682      	mov	sl, r0
 800c3e8:	6123      	str	r3, [r4, #16]
 800c3ea:	dc02      	bgt.n	800c3f2 <_printf_float+0x12a>
 800c3ec:	6822      	ldr	r2, [r4, #0]
 800c3ee:	07d2      	lsls	r2, r2, #31
 800c3f0:	d501      	bpl.n	800c3f6 <_printf_float+0x12e>
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	6123      	str	r3, [r4, #16]
 800c3f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d0a6      	beq.n	800c34c <_printf_float+0x84>
 800c3fe:	232d      	movs	r3, #45	@ 0x2d
 800c400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c404:	e7a2      	b.n	800c34c <_printf_float+0x84>
 800c406:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c40a:	d1c4      	bne.n	800c396 <_printf_float+0xce>
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1c2      	bne.n	800c396 <_printf_float+0xce>
 800c410:	2301      	movs	r3, #1
 800c412:	e7bf      	b.n	800c394 <_printf_float+0xcc>
 800c414:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c418:	d9db      	bls.n	800c3d2 <_printf_float+0x10a>
 800c41a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c41e:	d118      	bne.n	800c452 <_printf_float+0x18a>
 800c420:	2900      	cmp	r1, #0
 800c422:	6863      	ldr	r3, [r4, #4]
 800c424:	dd0b      	ble.n	800c43e <_printf_float+0x176>
 800c426:	6121      	str	r1, [r4, #16]
 800c428:	b913      	cbnz	r3, 800c430 <_printf_float+0x168>
 800c42a:	6822      	ldr	r2, [r4, #0]
 800c42c:	07d0      	lsls	r0, r2, #31
 800c42e:	d502      	bpl.n	800c436 <_printf_float+0x16e>
 800c430:	3301      	adds	r3, #1
 800c432:	440b      	add	r3, r1
 800c434:	6123      	str	r3, [r4, #16]
 800c436:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c438:	f04f 0a00 	mov.w	sl, #0
 800c43c:	e7db      	b.n	800c3f6 <_printf_float+0x12e>
 800c43e:	b913      	cbnz	r3, 800c446 <_printf_float+0x17e>
 800c440:	6822      	ldr	r2, [r4, #0]
 800c442:	07d2      	lsls	r2, r2, #31
 800c444:	d501      	bpl.n	800c44a <_printf_float+0x182>
 800c446:	3302      	adds	r3, #2
 800c448:	e7f4      	b.n	800c434 <_printf_float+0x16c>
 800c44a:	2301      	movs	r3, #1
 800c44c:	e7f2      	b.n	800c434 <_printf_float+0x16c>
 800c44e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c454:	4299      	cmp	r1, r3
 800c456:	db05      	blt.n	800c464 <_printf_float+0x19c>
 800c458:	6823      	ldr	r3, [r4, #0]
 800c45a:	6121      	str	r1, [r4, #16]
 800c45c:	07d8      	lsls	r0, r3, #31
 800c45e:	d5ea      	bpl.n	800c436 <_printf_float+0x16e>
 800c460:	1c4b      	adds	r3, r1, #1
 800c462:	e7e7      	b.n	800c434 <_printf_float+0x16c>
 800c464:	2900      	cmp	r1, #0
 800c466:	bfd4      	ite	le
 800c468:	f1c1 0202 	rsble	r2, r1, #2
 800c46c:	2201      	movgt	r2, #1
 800c46e:	4413      	add	r3, r2
 800c470:	e7e0      	b.n	800c434 <_printf_float+0x16c>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	055a      	lsls	r2, r3, #21
 800c476:	d407      	bmi.n	800c488 <_printf_float+0x1c0>
 800c478:	6923      	ldr	r3, [r4, #16]
 800c47a:	4642      	mov	r2, r8
 800c47c:	4631      	mov	r1, r6
 800c47e:	4628      	mov	r0, r5
 800c480:	47b8      	blx	r7
 800c482:	3001      	adds	r0, #1
 800c484:	d12a      	bne.n	800c4dc <_printf_float+0x214>
 800c486:	e76b      	b.n	800c360 <_printf_float+0x98>
 800c488:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c48c:	f240 80e0 	bls.w	800c650 <_printf_float+0x388>
 800c490:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c494:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c49c:	d133      	bne.n	800c506 <_printf_float+0x23e>
 800c49e:	4a38      	ldr	r2, [pc, #224]	@ (800c580 <_printf_float+0x2b8>)
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	4631      	mov	r1, r6
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	47b8      	blx	r7
 800c4a8:	3001      	adds	r0, #1
 800c4aa:	f43f af59 	beq.w	800c360 <_printf_float+0x98>
 800c4ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c4b2:	4543      	cmp	r3, r8
 800c4b4:	db02      	blt.n	800c4bc <_printf_float+0x1f4>
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	07d8      	lsls	r0, r3, #31
 800c4ba:	d50f      	bpl.n	800c4dc <_printf_float+0x214>
 800c4bc:	9b05      	ldr	r3, [sp, #20]
 800c4be:	465a      	mov	r2, fp
 800c4c0:	4631      	mov	r1, r6
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	47b8      	blx	r7
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	f43f af4a 	beq.w	800c360 <_printf_float+0x98>
 800c4cc:	f04f 0900 	mov.w	r9, #0
 800c4d0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4d4:	f104 0a1a 	add.w	sl, r4, #26
 800c4d8:	45c8      	cmp	r8, r9
 800c4da:	dc09      	bgt.n	800c4f0 <_printf_float+0x228>
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	079b      	lsls	r3, r3, #30
 800c4e0:	f100 8107 	bmi.w	800c6f2 <_printf_float+0x42a>
 800c4e4:	68e0      	ldr	r0, [r4, #12]
 800c4e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4e8:	4298      	cmp	r0, r3
 800c4ea:	bfb8      	it	lt
 800c4ec:	4618      	movlt	r0, r3
 800c4ee:	e739      	b.n	800c364 <_printf_float+0x9c>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	4652      	mov	r2, sl
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	47b8      	blx	r7
 800c4fa:	3001      	adds	r0, #1
 800c4fc:	f43f af30 	beq.w	800c360 <_printf_float+0x98>
 800c500:	f109 0901 	add.w	r9, r9, #1
 800c504:	e7e8      	b.n	800c4d8 <_printf_float+0x210>
 800c506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	dc3b      	bgt.n	800c584 <_printf_float+0x2bc>
 800c50c:	4a1c      	ldr	r2, [pc, #112]	@ (800c580 <_printf_float+0x2b8>)
 800c50e:	2301      	movs	r3, #1
 800c510:	4631      	mov	r1, r6
 800c512:	4628      	mov	r0, r5
 800c514:	47b8      	blx	r7
 800c516:	3001      	adds	r0, #1
 800c518:	f43f af22 	beq.w	800c360 <_printf_float+0x98>
 800c51c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c520:	ea59 0303 	orrs.w	r3, r9, r3
 800c524:	d102      	bne.n	800c52c <_printf_float+0x264>
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	07d9      	lsls	r1, r3, #31
 800c52a:	d5d7      	bpl.n	800c4dc <_printf_float+0x214>
 800c52c:	9b05      	ldr	r3, [sp, #20]
 800c52e:	465a      	mov	r2, fp
 800c530:	4631      	mov	r1, r6
 800c532:	4628      	mov	r0, r5
 800c534:	47b8      	blx	r7
 800c536:	3001      	adds	r0, #1
 800c538:	f43f af12 	beq.w	800c360 <_printf_float+0x98>
 800c53c:	f04f 0a00 	mov.w	sl, #0
 800c540:	f104 0b1a 	add.w	fp, r4, #26
 800c544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c546:	425b      	negs	r3, r3
 800c548:	4553      	cmp	r3, sl
 800c54a:	dc01      	bgt.n	800c550 <_printf_float+0x288>
 800c54c:	464b      	mov	r3, r9
 800c54e:	e794      	b.n	800c47a <_printf_float+0x1b2>
 800c550:	2301      	movs	r3, #1
 800c552:	465a      	mov	r2, fp
 800c554:	4631      	mov	r1, r6
 800c556:	4628      	mov	r0, r5
 800c558:	47b8      	blx	r7
 800c55a:	3001      	adds	r0, #1
 800c55c:	f43f af00 	beq.w	800c360 <_printf_float+0x98>
 800c560:	f10a 0a01 	add.w	sl, sl, #1
 800c564:	e7ee      	b.n	800c544 <_printf_float+0x27c>
 800c566:	bf00      	nop
 800c568:	ffffffff 	.word	0xffffffff
 800c56c:	7fefffff 	.word	0x7fefffff
 800c570:	08010920 	.word	0x08010920
 800c574:	08010924 	.word	0x08010924
 800c578:	08010928 	.word	0x08010928
 800c57c:	0801092c 	.word	0x0801092c
 800c580:	08010930 	.word	0x08010930
 800c584:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c586:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c58a:	4553      	cmp	r3, sl
 800c58c:	bfa8      	it	ge
 800c58e:	4653      	movge	r3, sl
 800c590:	2b00      	cmp	r3, #0
 800c592:	4699      	mov	r9, r3
 800c594:	dc37      	bgt.n	800c606 <_printf_float+0x33e>
 800c596:	2300      	movs	r3, #0
 800c598:	9307      	str	r3, [sp, #28]
 800c59a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c59e:	f104 021a 	add.w	r2, r4, #26
 800c5a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c5a4:	9907      	ldr	r1, [sp, #28]
 800c5a6:	9306      	str	r3, [sp, #24]
 800c5a8:	eba3 0309 	sub.w	r3, r3, r9
 800c5ac:	428b      	cmp	r3, r1
 800c5ae:	dc31      	bgt.n	800c614 <_printf_float+0x34c>
 800c5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b2:	459a      	cmp	sl, r3
 800c5b4:	dc3b      	bgt.n	800c62e <_printf_float+0x366>
 800c5b6:	6823      	ldr	r3, [r4, #0]
 800c5b8:	07da      	lsls	r2, r3, #31
 800c5ba:	d438      	bmi.n	800c62e <_printf_float+0x366>
 800c5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5be:	ebaa 0903 	sub.w	r9, sl, r3
 800c5c2:	9b06      	ldr	r3, [sp, #24]
 800c5c4:	ebaa 0303 	sub.w	r3, sl, r3
 800c5c8:	4599      	cmp	r9, r3
 800c5ca:	bfa8      	it	ge
 800c5cc:	4699      	movge	r9, r3
 800c5ce:	f1b9 0f00 	cmp.w	r9, #0
 800c5d2:	dc34      	bgt.n	800c63e <_printf_float+0x376>
 800c5d4:	f04f 0800 	mov.w	r8, #0
 800c5d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5dc:	f104 0b1a 	add.w	fp, r4, #26
 800c5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e2:	ebaa 0303 	sub.w	r3, sl, r3
 800c5e6:	eba3 0309 	sub.w	r3, r3, r9
 800c5ea:	4543      	cmp	r3, r8
 800c5ec:	f77f af76 	ble.w	800c4dc <_printf_float+0x214>
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	465a      	mov	r2, fp
 800c5f4:	4631      	mov	r1, r6
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	47b8      	blx	r7
 800c5fa:	3001      	adds	r0, #1
 800c5fc:	f43f aeb0 	beq.w	800c360 <_printf_float+0x98>
 800c600:	f108 0801 	add.w	r8, r8, #1
 800c604:	e7ec      	b.n	800c5e0 <_printf_float+0x318>
 800c606:	4642      	mov	r2, r8
 800c608:	4631      	mov	r1, r6
 800c60a:	4628      	mov	r0, r5
 800c60c:	47b8      	blx	r7
 800c60e:	3001      	adds	r0, #1
 800c610:	d1c1      	bne.n	800c596 <_printf_float+0x2ce>
 800c612:	e6a5      	b.n	800c360 <_printf_float+0x98>
 800c614:	2301      	movs	r3, #1
 800c616:	4631      	mov	r1, r6
 800c618:	4628      	mov	r0, r5
 800c61a:	9206      	str	r2, [sp, #24]
 800c61c:	47b8      	blx	r7
 800c61e:	3001      	adds	r0, #1
 800c620:	f43f ae9e 	beq.w	800c360 <_printf_float+0x98>
 800c624:	9b07      	ldr	r3, [sp, #28]
 800c626:	9a06      	ldr	r2, [sp, #24]
 800c628:	3301      	adds	r3, #1
 800c62a:	9307      	str	r3, [sp, #28]
 800c62c:	e7b9      	b.n	800c5a2 <_printf_float+0x2da>
 800c62e:	9b05      	ldr	r3, [sp, #20]
 800c630:	465a      	mov	r2, fp
 800c632:	4631      	mov	r1, r6
 800c634:	4628      	mov	r0, r5
 800c636:	47b8      	blx	r7
 800c638:	3001      	adds	r0, #1
 800c63a:	d1bf      	bne.n	800c5bc <_printf_float+0x2f4>
 800c63c:	e690      	b.n	800c360 <_printf_float+0x98>
 800c63e:	9a06      	ldr	r2, [sp, #24]
 800c640:	464b      	mov	r3, r9
 800c642:	4442      	add	r2, r8
 800c644:	4631      	mov	r1, r6
 800c646:	4628      	mov	r0, r5
 800c648:	47b8      	blx	r7
 800c64a:	3001      	adds	r0, #1
 800c64c:	d1c2      	bne.n	800c5d4 <_printf_float+0x30c>
 800c64e:	e687      	b.n	800c360 <_printf_float+0x98>
 800c650:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c654:	f1b9 0f01 	cmp.w	r9, #1
 800c658:	dc01      	bgt.n	800c65e <_printf_float+0x396>
 800c65a:	07db      	lsls	r3, r3, #31
 800c65c:	d536      	bpl.n	800c6cc <_printf_float+0x404>
 800c65e:	2301      	movs	r3, #1
 800c660:	4642      	mov	r2, r8
 800c662:	4631      	mov	r1, r6
 800c664:	4628      	mov	r0, r5
 800c666:	47b8      	blx	r7
 800c668:	3001      	adds	r0, #1
 800c66a:	f43f ae79 	beq.w	800c360 <_printf_float+0x98>
 800c66e:	9b05      	ldr	r3, [sp, #20]
 800c670:	465a      	mov	r2, fp
 800c672:	4631      	mov	r1, r6
 800c674:	4628      	mov	r0, r5
 800c676:	47b8      	blx	r7
 800c678:	3001      	adds	r0, #1
 800c67a:	f43f ae71 	beq.w	800c360 <_printf_float+0x98>
 800c67e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c682:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c68a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c68e:	d018      	beq.n	800c6c2 <_printf_float+0x3fa>
 800c690:	464b      	mov	r3, r9
 800c692:	f108 0201 	add.w	r2, r8, #1
 800c696:	4631      	mov	r1, r6
 800c698:	4628      	mov	r0, r5
 800c69a:	47b8      	blx	r7
 800c69c:	3001      	adds	r0, #1
 800c69e:	d10c      	bne.n	800c6ba <_printf_float+0x3f2>
 800c6a0:	e65e      	b.n	800c360 <_printf_float+0x98>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	465a      	mov	r2, fp
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	47b8      	blx	r7
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	f43f ae57 	beq.w	800c360 <_printf_float+0x98>
 800c6b2:	f108 0801 	add.w	r8, r8, #1
 800c6b6:	45c8      	cmp	r8, r9
 800c6b8:	dbf3      	blt.n	800c6a2 <_printf_float+0x3da>
 800c6ba:	4653      	mov	r3, sl
 800c6bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c6c0:	e6dc      	b.n	800c47c <_printf_float+0x1b4>
 800c6c2:	f04f 0800 	mov.w	r8, #0
 800c6c6:	f104 0b1a 	add.w	fp, r4, #26
 800c6ca:	e7f4      	b.n	800c6b6 <_printf_float+0x3ee>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	4642      	mov	r2, r8
 800c6d0:	e7e1      	b.n	800c696 <_printf_float+0x3ce>
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	464a      	mov	r2, r9
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	4628      	mov	r0, r5
 800c6da:	47b8      	blx	r7
 800c6dc:	3001      	adds	r0, #1
 800c6de:	f43f ae3f 	beq.w	800c360 <_printf_float+0x98>
 800c6e2:	f108 0801 	add.w	r8, r8, #1
 800c6e6:	68e3      	ldr	r3, [r4, #12]
 800c6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6ea:	1a5b      	subs	r3, r3, r1
 800c6ec:	4543      	cmp	r3, r8
 800c6ee:	dcf0      	bgt.n	800c6d2 <_printf_float+0x40a>
 800c6f0:	e6f8      	b.n	800c4e4 <_printf_float+0x21c>
 800c6f2:	f04f 0800 	mov.w	r8, #0
 800c6f6:	f104 0919 	add.w	r9, r4, #25
 800c6fa:	e7f4      	b.n	800c6e6 <_printf_float+0x41e>

0800c6fc <_printf_common>:
 800c6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c700:	4616      	mov	r6, r2
 800c702:	4698      	mov	r8, r3
 800c704:	688a      	ldr	r2, [r1, #8]
 800c706:	690b      	ldr	r3, [r1, #16]
 800c708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c70c:	4293      	cmp	r3, r2
 800c70e:	bfb8      	it	lt
 800c710:	4613      	movlt	r3, r2
 800c712:	6033      	str	r3, [r6, #0]
 800c714:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c718:	4607      	mov	r7, r0
 800c71a:	460c      	mov	r4, r1
 800c71c:	b10a      	cbz	r2, 800c722 <_printf_common+0x26>
 800c71e:	3301      	adds	r3, #1
 800c720:	6033      	str	r3, [r6, #0]
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	0699      	lsls	r1, r3, #26
 800c726:	bf42      	ittt	mi
 800c728:	6833      	ldrmi	r3, [r6, #0]
 800c72a:	3302      	addmi	r3, #2
 800c72c:	6033      	strmi	r3, [r6, #0]
 800c72e:	6825      	ldr	r5, [r4, #0]
 800c730:	f015 0506 	ands.w	r5, r5, #6
 800c734:	d106      	bne.n	800c744 <_printf_common+0x48>
 800c736:	f104 0a19 	add.w	sl, r4, #25
 800c73a:	68e3      	ldr	r3, [r4, #12]
 800c73c:	6832      	ldr	r2, [r6, #0]
 800c73e:	1a9b      	subs	r3, r3, r2
 800c740:	42ab      	cmp	r3, r5
 800c742:	dc26      	bgt.n	800c792 <_printf_common+0x96>
 800c744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c748:	6822      	ldr	r2, [r4, #0]
 800c74a:	3b00      	subs	r3, #0
 800c74c:	bf18      	it	ne
 800c74e:	2301      	movne	r3, #1
 800c750:	0692      	lsls	r2, r2, #26
 800c752:	d42b      	bmi.n	800c7ac <_printf_common+0xb0>
 800c754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c758:	4641      	mov	r1, r8
 800c75a:	4638      	mov	r0, r7
 800c75c:	47c8      	blx	r9
 800c75e:	3001      	adds	r0, #1
 800c760:	d01e      	beq.n	800c7a0 <_printf_common+0xa4>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	6922      	ldr	r2, [r4, #16]
 800c766:	f003 0306 	and.w	r3, r3, #6
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	bf02      	ittt	eq
 800c76e:	68e5      	ldreq	r5, [r4, #12]
 800c770:	6833      	ldreq	r3, [r6, #0]
 800c772:	1aed      	subeq	r5, r5, r3
 800c774:	68a3      	ldr	r3, [r4, #8]
 800c776:	bf0c      	ite	eq
 800c778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c77c:	2500      	movne	r5, #0
 800c77e:	4293      	cmp	r3, r2
 800c780:	bfc4      	itt	gt
 800c782:	1a9b      	subgt	r3, r3, r2
 800c784:	18ed      	addgt	r5, r5, r3
 800c786:	2600      	movs	r6, #0
 800c788:	341a      	adds	r4, #26
 800c78a:	42b5      	cmp	r5, r6
 800c78c:	d11a      	bne.n	800c7c4 <_printf_common+0xc8>
 800c78e:	2000      	movs	r0, #0
 800c790:	e008      	b.n	800c7a4 <_printf_common+0xa8>
 800c792:	2301      	movs	r3, #1
 800c794:	4652      	mov	r2, sl
 800c796:	4641      	mov	r1, r8
 800c798:	4638      	mov	r0, r7
 800c79a:	47c8      	blx	r9
 800c79c:	3001      	adds	r0, #1
 800c79e:	d103      	bne.n	800c7a8 <_printf_common+0xac>
 800c7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a8:	3501      	adds	r5, #1
 800c7aa:	e7c6      	b.n	800c73a <_printf_common+0x3e>
 800c7ac:	18e1      	adds	r1, r4, r3
 800c7ae:	1c5a      	adds	r2, r3, #1
 800c7b0:	2030      	movs	r0, #48	@ 0x30
 800c7b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7b6:	4422      	add	r2, r4
 800c7b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c7bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c7c0:	3302      	adds	r3, #2
 800c7c2:	e7c7      	b.n	800c754 <_printf_common+0x58>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	4622      	mov	r2, r4
 800c7c8:	4641      	mov	r1, r8
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	47c8      	blx	r9
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	d0e6      	beq.n	800c7a0 <_printf_common+0xa4>
 800c7d2:	3601      	adds	r6, #1
 800c7d4:	e7d9      	b.n	800c78a <_printf_common+0x8e>
	...

0800c7d8 <_printf_i>:
 800c7d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7dc:	7e0f      	ldrb	r7, [r1, #24]
 800c7de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7e0:	2f78      	cmp	r7, #120	@ 0x78
 800c7e2:	4691      	mov	r9, r2
 800c7e4:	4680      	mov	r8, r0
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	469a      	mov	sl, r3
 800c7ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7ee:	d807      	bhi.n	800c800 <_printf_i+0x28>
 800c7f0:	2f62      	cmp	r7, #98	@ 0x62
 800c7f2:	d80a      	bhi.n	800c80a <_printf_i+0x32>
 800c7f4:	2f00      	cmp	r7, #0
 800c7f6:	f000 80d2 	beq.w	800c99e <_printf_i+0x1c6>
 800c7fa:	2f58      	cmp	r7, #88	@ 0x58
 800c7fc:	f000 80b9 	beq.w	800c972 <_printf_i+0x19a>
 800c800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c808:	e03a      	b.n	800c880 <_printf_i+0xa8>
 800c80a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c80e:	2b15      	cmp	r3, #21
 800c810:	d8f6      	bhi.n	800c800 <_printf_i+0x28>
 800c812:	a101      	add	r1, pc, #4	@ (adr r1, 800c818 <_printf_i+0x40>)
 800c814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c818:	0800c871 	.word	0x0800c871
 800c81c:	0800c885 	.word	0x0800c885
 800c820:	0800c801 	.word	0x0800c801
 800c824:	0800c801 	.word	0x0800c801
 800c828:	0800c801 	.word	0x0800c801
 800c82c:	0800c801 	.word	0x0800c801
 800c830:	0800c885 	.word	0x0800c885
 800c834:	0800c801 	.word	0x0800c801
 800c838:	0800c801 	.word	0x0800c801
 800c83c:	0800c801 	.word	0x0800c801
 800c840:	0800c801 	.word	0x0800c801
 800c844:	0800c985 	.word	0x0800c985
 800c848:	0800c8af 	.word	0x0800c8af
 800c84c:	0800c93f 	.word	0x0800c93f
 800c850:	0800c801 	.word	0x0800c801
 800c854:	0800c801 	.word	0x0800c801
 800c858:	0800c9a7 	.word	0x0800c9a7
 800c85c:	0800c801 	.word	0x0800c801
 800c860:	0800c8af 	.word	0x0800c8af
 800c864:	0800c801 	.word	0x0800c801
 800c868:	0800c801 	.word	0x0800c801
 800c86c:	0800c947 	.word	0x0800c947
 800c870:	6833      	ldr	r3, [r6, #0]
 800c872:	1d1a      	adds	r2, r3, #4
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6032      	str	r2, [r6, #0]
 800c878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c87c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c880:	2301      	movs	r3, #1
 800c882:	e09d      	b.n	800c9c0 <_printf_i+0x1e8>
 800c884:	6833      	ldr	r3, [r6, #0]
 800c886:	6820      	ldr	r0, [r4, #0]
 800c888:	1d19      	adds	r1, r3, #4
 800c88a:	6031      	str	r1, [r6, #0]
 800c88c:	0606      	lsls	r6, r0, #24
 800c88e:	d501      	bpl.n	800c894 <_printf_i+0xbc>
 800c890:	681d      	ldr	r5, [r3, #0]
 800c892:	e003      	b.n	800c89c <_printf_i+0xc4>
 800c894:	0645      	lsls	r5, r0, #25
 800c896:	d5fb      	bpl.n	800c890 <_printf_i+0xb8>
 800c898:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c89c:	2d00      	cmp	r5, #0
 800c89e:	da03      	bge.n	800c8a8 <_printf_i+0xd0>
 800c8a0:	232d      	movs	r3, #45	@ 0x2d
 800c8a2:	426d      	negs	r5, r5
 800c8a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8a8:	4859      	ldr	r0, [pc, #356]	@ (800ca10 <_printf_i+0x238>)
 800c8aa:	230a      	movs	r3, #10
 800c8ac:	e011      	b.n	800c8d2 <_printf_i+0xfa>
 800c8ae:	6821      	ldr	r1, [r4, #0]
 800c8b0:	6833      	ldr	r3, [r6, #0]
 800c8b2:	0608      	lsls	r0, r1, #24
 800c8b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8b8:	d402      	bmi.n	800c8c0 <_printf_i+0xe8>
 800c8ba:	0649      	lsls	r1, r1, #25
 800c8bc:	bf48      	it	mi
 800c8be:	b2ad      	uxthmi	r5, r5
 800c8c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c8c2:	4853      	ldr	r0, [pc, #332]	@ (800ca10 <_printf_i+0x238>)
 800c8c4:	6033      	str	r3, [r6, #0]
 800c8c6:	bf14      	ite	ne
 800c8c8:	230a      	movne	r3, #10
 800c8ca:	2308      	moveq	r3, #8
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8d2:	6866      	ldr	r6, [r4, #4]
 800c8d4:	60a6      	str	r6, [r4, #8]
 800c8d6:	2e00      	cmp	r6, #0
 800c8d8:	bfa2      	ittt	ge
 800c8da:	6821      	ldrge	r1, [r4, #0]
 800c8dc:	f021 0104 	bicge.w	r1, r1, #4
 800c8e0:	6021      	strge	r1, [r4, #0]
 800c8e2:	b90d      	cbnz	r5, 800c8e8 <_printf_i+0x110>
 800c8e4:	2e00      	cmp	r6, #0
 800c8e6:	d04b      	beq.n	800c980 <_printf_i+0x1a8>
 800c8e8:	4616      	mov	r6, r2
 800c8ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8ee:	fb03 5711 	mls	r7, r3, r1, r5
 800c8f2:	5dc7      	ldrb	r7, [r0, r7]
 800c8f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8f8:	462f      	mov	r7, r5
 800c8fa:	42bb      	cmp	r3, r7
 800c8fc:	460d      	mov	r5, r1
 800c8fe:	d9f4      	bls.n	800c8ea <_printf_i+0x112>
 800c900:	2b08      	cmp	r3, #8
 800c902:	d10b      	bne.n	800c91c <_printf_i+0x144>
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	07df      	lsls	r7, r3, #31
 800c908:	d508      	bpl.n	800c91c <_printf_i+0x144>
 800c90a:	6923      	ldr	r3, [r4, #16]
 800c90c:	6861      	ldr	r1, [r4, #4]
 800c90e:	4299      	cmp	r1, r3
 800c910:	bfde      	ittt	le
 800c912:	2330      	movle	r3, #48	@ 0x30
 800c914:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c918:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c91c:	1b92      	subs	r2, r2, r6
 800c91e:	6122      	str	r2, [r4, #16]
 800c920:	f8cd a000 	str.w	sl, [sp]
 800c924:	464b      	mov	r3, r9
 800c926:	aa03      	add	r2, sp, #12
 800c928:	4621      	mov	r1, r4
 800c92a:	4640      	mov	r0, r8
 800c92c:	f7ff fee6 	bl	800c6fc <_printf_common>
 800c930:	3001      	adds	r0, #1
 800c932:	d14a      	bne.n	800c9ca <_printf_i+0x1f2>
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	b004      	add	sp, #16
 800c93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	f043 0320 	orr.w	r3, r3, #32
 800c944:	6023      	str	r3, [r4, #0]
 800c946:	4833      	ldr	r0, [pc, #204]	@ (800ca14 <_printf_i+0x23c>)
 800c948:	2778      	movs	r7, #120	@ 0x78
 800c94a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	6831      	ldr	r1, [r6, #0]
 800c952:	061f      	lsls	r7, r3, #24
 800c954:	f851 5b04 	ldr.w	r5, [r1], #4
 800c958:	d402      	bmi.n	800c960 <_printf_i+0x188>
 800c95a:	065f      	lsls	r7, r3, #25
 800c95c:	bf48      	it	mi
 800c95e:	b2ad      	uxthmi	r5, r5
 800c960:	6031      	str	r1, [r6, #0]
 800c962:	07d9      	lsls	r1, r3, #31
 800c964:	bf44      	itt	mi
 800c966:	f043 0320 	orrmi.w	r3, r3, #32
 800c96a:	6023      	strmi	r3, [r4, #0]
 800c96c:	b11d      	cbz	r5, 800c976 <_printf_i+0x19e>
 800c96e:	2310      	movs	r3, #16
 800c970:	e7ac      	b.n	800c8cc <_printf_i+0xf4>
 800c972:	4827      	ldr	r0, [pc, #156]	@ (800ca10 <_printf_i+0x238>)
 800c974:	e7e9      	b.n	800c94a <_printf_i+0x172>
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	f023 0320 	bic.w	r3, r3, #32
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	e7f6      	b.n	800c96e <_printf_i+0x196>
 800c980:	4616      	mov	r6, r2
 800c982:	e7bd      	b.n	800c900 <_printf_i+0x128>
 800c984:	6833      	ldr	r3, [r6, #0]
 800c986:	6825      	ldr	r5, [r4, #0]
 800c988:	6961      	ldr	r1, [r4, #20]
 800c98a:	1d18      	adds	r0, r3, #4
 800c98c:	6030      	str	r0, [r6, #0]
 800c98e:	062e      	lsls	r6, r5, #24
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	d501      	bpl.n	800c998 <_printf_i+0x1c0>
 800c994:	6019      	str	r1, [r3, #0]
 800c996:	e002      	b.n	800c99e <_printf_i+0x1c6>
 800c998:	0668      	lsls	r0, r5, #25
 800c99a:	d5fb      	bpl.n	800c994 <_printf_i+0x1bc>
 800c99c:	8019      	strh	r1, [r3, #0]
 800c99e:	2300      	movs	r3, #0
 800c9a0:	6123      	str	r3, [r4, #16]
 800c9a2:	4616      	mov	r6, r2
 800c9a4:	e7bc      	b.n	800c920 <_printf_i+0x148>
 800c9a6:	6833      	ldr	r3, [r6, #0]
 800c9a8:	1d1a      	adds	r2, r3, #4
 800c9aa:	6032      	str	r2, [r6, #0]
 800c9ac:	681e      	ldr	r6, [r3, #0]
 800c9ae:	6862      	ldr	r2, [r4, #4]
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7f3 fcac 	bl	8000310 <memchr>
 800c9b8:	b108      	cbz	r0, 800c9be <_printf_i+0x1e6>
 800c9ba:	1b80      	subs	r0, r0, r6
 800c9bc:	6060      	str	r0, [r4, #4]
 800c9be:	6863      	ldr	r3, [r4, #4]
 800c9c0:	6123      	str	r3, [r4, #16]
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9c8:	e7aa      	b.n	800c920 <_printf_i+0x148>
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	4632      	mov	r2, r6
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	4640      	mov	r0, r8
 800c9d2:	47d0      	blx	sl
 800c9d4:	3001      	adds	r0, #1
 800c9d6:	d0ad      	beq.n	800c934 <_printf_i+0x15c>
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	079b      	lsls	r3, r3, #30
 800c9dc:	d413      	bmi.n	800ca06 <_printf_i+0x22e>
 800c9de:	68e0      	ldr	r0, [r4, #12]
 800c9e0:	9b03      	ldr	r3, [sp, #12]
 800c9e2:	4298      	cmp	r0, r3
 800c9e4:	bfb8      	it	lt
 800c9e6:	4618      	movlt	r0, r3
 800c9e8:	e7a6      	b.n	800c938 <_printf_i+0x160>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	4640      	mov	r0, r8
 800c9f2:	47d0      	blx	sl
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	d09d      	beq.n	800c934 <_printf_i+0x15c>
 800c9f8:	3501      	adds	r5, #1
 800c9fa:	68e3      	ldr	r3, [r4, #12]
 800c9fc:	9903      	ldr	r1, [sp, #12]
 800c9fe:	1a5b      	subs	r3, r3, r1
 800ca00:	42ab      	cmp	r3, r5
 800ca02:	dcf2      	bgt.n	800c9ea <_printf_i+0x212>
 800ca04:	e7eb      	b.n	800c9de <_printf_i+0x206>
 800ca06:	2500      	movs	r5, #0
 800ca08:	f104 0619 	add.w	r6, r4, #25
 800ca0c:	e7f5      	b.n	800c9fa <_printf_i+0x222>
 800ca0e:	bf00      	nop
 800ca10:	08010932 	.word	0x08010932
 800ca14:	08010943 	.word	0x08010943

0800ca18 <_scanf_float>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	b087      	sub	sp, #28
 800ca1e:	4617      	mov	r7, r2
 800ca20:	9303      	str	r3, [sp, #12]
 800ca22:	688b      	ldr	r3, [r1, #8]
 800ca24:	1e5a      	subs	r2, r3, #1
 800ca26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ca2a:	bf81      	itttt	hi
 800ca2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ca30:	eb03 0b05 	addhi.w	fp, r3, r5
 800ca34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ca38:	608b      	strhi	r3, [r1, #8]
 800ca3a:	680b      	ldr	r3, [r1, #0]
 800ca3c:	460a      	mov	r2, r1
 800ca3e:	f04f 0500 	mov.w	r5, #0
 800ca42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ca46:	f842 3b1c 	str.w	r3, [r2], #28
 800ca4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ca4e:	4680      	mov	r8, r0
 800ca50:	460c      	mov	r4, r1
 800ca52:	bf98      	it	ls
 800ca54:	f04f 0b00 	movls.w	fp, #0
 800ca58:	9201      	str	r2, [sp, #4]
 800ca5a:	4616      	mov	r6, r2
 800ca5c:	46aa      	mov	sl, r5
 800ca5e:	46a9      	mov	r9, r5
 800ca60:	9502      	str	r5, [sp, #8]
 800ca62:	68a2      	ldr	r2, [r4, #8]
 800ca64:	b152      	cbz	r2, 800ca7c <_scanf_float+0x64>
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	2b4e      	cmp	r3, #78	@ 0x4e
 800ca6c:	d864      	bhi.n	800cb38 <_scanf_float+0x120>
 800ca6e:	2b40      	cmp	r3, #64	@ 0x40
 800ca70:	d83c      	bhi.n	800caec <_scanf_float+0xd4>
 800ca72:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ca76:	b2c8      	uxtb	r0, r1
 800ca78:	280e      	cmp	r0, #14
 800ca7a:	d93a      	bls.n	800caf2 <_scanf_float+0xda>
 800ca7c:	f1b9 0f00 	cmp.w	r9, #0
 800ca80:	d003      	beq.n	800ca8a <_scanf_float+0x72>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca8e:	f1ba 0f01 	cmp.w	sl, #1
 800ca92:	f200 8117 	bhi.w	800ccc4 <_scanf_float+0x2ac>
 800ca96:	9b01      	ldr	r3, [sp, #4]
 800ca98:	429e      	cmp	r6, r3
 800ca9a:	f200 8108 	bhi.w	800ccae <_scanf_float+0x296>
 800ca9e:	2001      	movs	r0, #1
 800caa0:	b007      	add	sp, #28
 800caa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800caaa:	2a0d      	cmp	r2, #13
 800caac:	d8e6      	bhi.n	800ca7c <_scanf_float+0x64>
 800caae:	a101      	add	r1, pc, #4	@ (adr r1, 800cab4 <_scanf_float+0x9c>)
 800cab0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cab4:	0800cbfb 	.word	0x0800cbfb
 800cab8:	0800ca7d 	.word	0x0800ca7d
 800cabc:	0800ca7d 	.word	0x0800ca7d
 800cac0:	0800ca7d 	.word	0x0800ca7d
 800cac4:	0800cc5b 	.word	0x0800cc5b
 800cac8:	0800cc33 	.word	0x0800cc33
 800cacc:	0800ca7d 	.word	0x0800ca7d
 800cad0:	0800ca7d 	.word	0x0800ca7d
 800cad4:	0800cc09 	.word	0x0800cc09
 800cad8:	0800ca7d 	.word	0x0800ca7d
 800cadc:	0800ca7d 	.word	0x0800ca7d
 800cae0:	0800ca7d 	.word	0x0800ca7d
 800cae4:	0800ca7d 	.word	0x0800ca7d
 800cae8:	0800cbc1 	.word	0x0800cbc1
 800caec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800caf0:	e7db      	b.n	800caaa <_scanf_float+0x92>
 800caf2:	290e      	cmp	r1, #14
 800caf4:	d8c2      	bhi.n	800ca7c <_scanf_float+0x64>
 800caf6:	a001      	add	r0, pc, #4	@ (adr r0, 800cafc <_scanf_float+0xe4>)
 800caf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cafc:	0800cbb1 	.word	0x0800cbb1
 800cb00:	0800ca7d 	.word	0x0800ca7d
 800cb04:	0800cbb1 	.word	0x0800cbb1
 800cb08:	0800cc47 	.word	0x0800cc47
 800cb0c:	0800ca7d 	.word	0x0800ca7d
 800cb10:	0800cb59 	.word	0x0800cb59
 800cb14:	0800cb97 	.word	0x0800cb97
 800cb18:	0800cb97 	.word	0x0800cb97
 800cb1c:	0800cb97 	.word	0x0800cb97
 800cb20:	0800cb97 	.word	0x0800cb97
 800cb24:	0800cb97 	.word	0x0800cb97
 800cb28:	0800cb97 	.word	0x0800cb97
 800cb2c:	0800cb97 	.word	0x0800cb97
 800cb30:	0800cb97 	.word	0x0800cb97
 800cb34:	0800cb97 	.word	0x0800cb97
 800cb38:	2b6e      	cmp	r3, #110	@ 0x6e
 800cb3a:	d809      	bhi.n	800cb50 <_scanf_float+0x138>
 800cb3c:	2b60      	cmp	r3, #96	@ 0x60
 800cb3e:	d8b2      	bhi.n	800caa6 <_scanf_float+0x8e>
 800cb40:	2b54      	cmp	r3, #84	@ 0x54
 800cb42:	d07b      	beq.n	800cc3c <_scanf_float+0x224>
 800cb44:	2b59      	cmp	r3, #89	@ 0x59
 800cb46:	d199      	bne.n	800ca7c <_scanf_float+0x64>
 800cb48:	2d07      	cmp	r5, #7
 800cb4a:	d197      	bne.n	800ca7c <_scanf_float+0x64>
 800cb4c:	2508      	movs	r5, #8
 800cb4e:	e02c      	b.n	800cbaa <_scanf_float+0x192>
 800cb50:	2b74      	cmp	r3, #116	@ 0x74
 800cb52:	d073      	beq.n	800cc3c <_scanf_float+0x224>
 800cb54:	2b79      	cmp	r3, #121	@ 0x79
 800cb56:	e7f6      	b.n	800cb46 <_scanf_float+0x12e>
 800cb58:	6821      	ldr	r1, [r4, #0]
 800cb5a:	05c8      	lsls	r0, r1, #23
 800cb5c:	d51b      	bpl.n	800cb96 <_scanf_float+0x17e>
 800cb5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cb62:	6021      	str	r1, [r4, #0]
 800cb64:	f109 0901 	add.w	r9, r9, #1
 800cb68:	f1bb 0f00 	cmp.w	fp, #0
 800cb6c:	d003      	beq.n	800cb76 <_scanf_float+0x15e>
 800cb6e:	3201      	adds	r2, #1
 800cb70:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb74:	60a2      	str	r2, [r4, #8]
 800cb76:	68a3      	ldr	r3, [r4, #8]
 800cb78:	3b01      	subs	r3, #1
 800cb7a:	60a3      	str	r3, [r4, #8]
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	6123      	str	r3, [r4, #16]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	3b01      	subs	r3, #1
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	607b      	str	r3, [r7, #4]
 800cb8a:	f340 8087 	ble.w	800cc9c <_scanf_float+0x284>
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	3301      	adds	r3, #1
 800cb92:	603b      	str	r3, [r7, #0]
 800cb94:	e765      	b.n	800ca62 <_scanf_float+0x4a>
 800cb96:	eb1a 0105 	adds.w	r1, sl, r5
 800cb9a:	f47f af6f 	bne.w	800ca7c <_scanf_float+0x64>
 800cb9e:	6822      	ldr	r2, [r4, #0]
 800cba0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cba4:	6022      	str	r2, [r4, #0]
 800cba6:	460d      	mov	r5, r1
 800cba8:	468a      	mov	sl, r1
 800cbaa:	f806 3b01 	strb.w	r3, [r6], #1
 800cbae:	e7e2      	b.n	800cb76 <_scanf_float+0x15e>
 800cbb0:	6822      	ldr	r2, [r4, #0]
 800cbb2:	0610      	lsls	r0, r2, #24
 800cbb4:	f57f af62 	bpl.w	800ca7c <_scanf_float+0x64>
 800cbb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cbbc:	6022      	str	r2, [r4, #0]
 800cbbe:	e7f4      	b.n	800cbaa <_scanf_float+0x192>
 800cbc0:	f1ba 0f00 	cmp.w	sl, #0
 800cbc4:	d10e      	bne.n	800cbe4 <_scanf_float+0x1cc>
 800cbc6:	f1b9 0f00 	cmp.w	r9, #0
 800cbca:	d10e      	bne.n	800cbea <_scanf_float+0x1d2>
 800cbcc:	6822      	ldr	r2, [r4, #0]
 800cbce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cbd2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cbd6:	d108      	bne.n	800cbea <_scanf_float+0x1d2>
 800cbd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cbdc:	6022      	str	r2, [r4, #0]
 800cbde:	f04f 0a01 	mov.w	sl, #1
 800cbe2:	e7e2      	b.n	800cbaa <_scanf_float+0x192>
 800cbe4:	f1ba 0f02 	cmp.w	sl, #2
 800cbe8:	d055      	beq.n	800cc96 <_scanf_float+0x27e>
 800cbea:	2d01      	cmp	r5, #1
 800cbec:	d002      	beq.n	800cbf4 <_scanf_float+0x1dc>
 800cbee:	2d04      	cmp	r5, #4
 800cbf0:	f47f af44 	bne.w	800ca7c <_scanf_float+0x64>
 800cbf4:	3501      	adds	r5, #1
 800cbf6:	b2ed      	uxtb	r5, r5
 800cbf8:	e7d7      	b.n	800cbaa <_scanf_float+0x192>
 800cbfa:	f1ba 0f01 	cmp.w	sl, #1
 800cbfe:	f47f af3d 	bne.w	800ca7c <_scanf_float+0x64>
 800cc02:	f04f 0a02 	mov.w	sl, #2
 800cc06:	e7d0      	b.n	800cbaa <_scanf_float+0x192>
 800cc08:	b97d      	cbnz	r5, 800cc2a <_scanf_float+0x212>
 800cc0a:	f1b9 0f00 	cmp.w	r9, #0
 800cc0e:	f47f af38 	bne.w	800ca82 <_scanf_float+0x6a>
 800cc12:	6822      	ldr	r2, [r4, #0]
 800cc14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc1c:	f040 8101 	bne.w	800ce22 <_scanf_float+0x40a>
 800cc20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc24:	6022      	str	r2, [r4, #0]
 800cc26:	2501      	movs	r5, #1
 800cc28:	e7bf      	b.n	800cbaa <_scanf_float+0x192>
 800cc2a:	2d03      	cmp	r5, #3
 800cc2c:	d0e2      	beq.n	800cbf4 <_scanf_float+0x1dc>
 800cc2e:	2d05      	cmp	r5, #5
 800cc30:	e7de      	b.n	800cbf0 <_scanf_float+0x1d8>
 800cc32:	2d02      	cmp	r5, #2
 800cc34:	f47f af22 	bne.w	800ca7c <_scanf_float+0x64>
 800cc38:	2503      	movs	r5, #3
 800cc3a:	e7b6      	b.n	800cbaa <_scanf_float+0x192>
 800cc3c:	2d06      	cmp	r5, #6
 800cc3e:	f47f af1d 	bne.w	800ca7c <_scanf_float+0x64>
 800cc42:	2507      	movs	r5, #7
 800cc44:	e7b1      	b.n	800cbaa <_scanf_float+0x192>
 800cc46:	6822      	ldr	r2, [r4, #0]
 800cc48:	0591      	lsls	r1, r2, #22
 800cc4a:	f57f af17 	bpl.w	800ca7c <_scanf_float+0x64>
 800cc4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cc52:	6022      	str	r2, [r4, #0]
 800cc54:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc58:	e7a7      	b.n	800cbaa <_scanf_float+0x192>
 800cc5a:	6822      	ldr	r2, [r4, #0]
 800cc5c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cc60:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cc64:	d006      	beq.n	800cc74 <_scanf_float+0x25c>
 800cc66:	0550      	lsls	r0, r2, #21
 800cc68:	f57f af08 	bpl.w	800ca7c <_scanf_float+0x64>
 800cc6c:	f1b9 0f00 	cmp.w	r9, #0
 800cc70:	f000 80d7 	beq.w	800ce22 <_scanf_float+0x40a>
 800cc74:	0591      	lsls	r1, r2, #22
 800cc76:	bf58      	it	pl
 800cc78:	9902      	ldrpl	r1, [sp, #8]
 800cc7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc7e:	bf58      	it	pl
 800cc80:	eba9 0101 	subpl.w	r1, r9, r1
 800cc84:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cc88:	bf58      	it	pl
 800cc8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cc8e:	6022      	str	r2, [r4, #0]
 800cc90:	f04f 0900 	mov.w	r9, #0
 800cc94:	e789      	b.n	800cbaa <_scanf_float+0x192>
 800cc96:	f04f 0a03 	mov.w	sl, #3
 800cc9a:	e786      	b.n	800cbaa <_scanf_float+0x192>
 800cc9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cca0:	4639      	mov	r1, r7
 800cca2:	4640      	mov	r0, r8
 800cca4:	4798      	blx	r3
 800cca6:	2800      	cmp	r0, #0
 800cca8:	f43f aedb 	beq.w	800ca62 <_scanf_float+0x4a>
 800ccac:	e6e6      	b.n	800ca7c <_scanf_float+0x64>
 800ccae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccb6:	463a      	mov	r2, r7
 800ccb8:	4640      	mov	r0, r8
 800ccba:	4798      	blx	r3
 800ccbc:	6923      	ldr	r3, [r4, #16]
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	6123      	str	r3, [r4, #16]
 800ccc2:	e6e8      	b.n	800ca96 <_scanf_float+0x7e>
 800ccc4:	1e6b      	subs	r3, r5, #1
 800ccc6:	2b06      	cmp	r3, #6
 800ccc8:	d824      	bhi.n	800cd14 <_scanf_float+0x2fc>
 800ccca:	2d02      	cmp	r5, #2
 800cccc:	d836      	bhi.n	800cd3c <_scanf_float+0x324>
 800ccce:	9b01      	ldr	r3, [sp, #4]
 800ccd0:	429e      	cmp	r6, r3
 800ccd2:	f67f aee4 	bls.w	800ca9e <_scanf_float+0x86>
 800ccd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccde:	463a      	mov	r2, r7
 800cce0:	4640      	mov	r0, r8
 800cce2:	4798      	blx	r3
 800cce4:	6923      	ldr	r3, [r4, #16]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	6123      	str	r3, [r4, #16]
 800ccea:	e7f0      	b.n	800ccce <_scanf_float+0x2b6>
 800ccec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccf0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ccf4:	463a      	mov	r2, r7
 800ccf6:	4640      	mov	r0, r8
 800ccf8:	4798      	blx	r3
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	6123      	str	r3, [r4, #16]
 800cd00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd04:	fa5f fa8a 	uxtb.w	sl, sl
 800cd08:	f1ba 0f02 	cmp.w	sl, #2
 800cd0c:	d1ee      	bne.n	800ccec <_scanf_float+0x2d4>
 800cd0e:	3d03      	subs	r5, #3
 800cd10:	b2ed      	uxtb	r5, r5
 800cd12:	1b76      	subs	r6, r6, r5
 800cd14:	6823      	ldr	r3, [r4, #0]
 800cd16:	05da      	lsls	r2, r3, #23
 800cd18:	d530      	bpl.n	800cd7c <_scanf_float+0x364>
 800cd1a:	055b      	lsls	r3, r3, #21
 800cd1c:	d511      	bpl.n	800cd42 <_scanf_float+0x32a>
 800cd1e:	9b01      	ldr	r3, [sp, #4]
 800cd20:	429e      	cmp	r6, r3
 800cd22:	f67f aebc 	bls.w	800ca9e <_scanf_float+0x86>
 800cd26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd2e:	463a      	mov	r2, r7
 800cd30:	4640      	mov	r0, r8
 800cd32:	4798      	blx	r3
 800cd34:	6923      	ldr	r3, [r4, #16]
 800cd36:	3b01      	subs	r3, #1
 800cd38:	6123      	str	r3, [r4, #16]
 800cd3a:	e7f0      	b.n	800cd1e <_scanf_float+0x306>
 800cd3c:	46aa      	mov	sl, r5
 800cd3e:	46b3      	mov	fp, r6
 800cd40:	e7de      	b.n	800cd00 <_scanf_float+0x2e8>
 800cd42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	2965      	cmp	r1, #101	@ 0x65
 800cd4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd4e:	f106 35ff 	add.w	r5, r6, #4294967295
 800cd52:	6123      	str	r3, [r4, #16]
 800cd54:	d00c      	beq.n	800cd70 <_scanf_float+0x358>
 800cd56:	2945      	cmp	r1, #69	@ 0x45
 800cd58:	d00a      	beq.n	800cd70 <_scanf_float+0x358>
 800cd5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd5e:	463a      	mov	r2, r7
 800cd60:	4640      	mov	r0, r8
 800cd62:	4798      	blx	r3
 800cd64:	6923      	ldr	r3, [r4, #16]
 800cd66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	1eb5      	subs	r5, r6, #2
 800cd6e:	6123      	str	r3, [r4, #16]
 800cd70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd74:	463a      	mov	r2, r7
 800cd76:	4640      	mov	r0, r8
 800cd78:	4798      	blx	r3
 800cd7a:	462e      	mov	r6, r5
 800cd7c:	6822      	ldr	r2, [r4, #0]
 800cd7e:	f012 0210 	ands.w	r2, r2, #16
 800cd82:	d001      	beq.n	800cd88 <_scanf_float+0x370>
 800cd84:	2000      	movs	r0, #0
 800cd86:	e68b      	b.n	800caa0 <_scanf_float+0x88>
 800cd88:	7032      	strb	r2, [r6, #0]
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cd90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd94:	d11a      	bne.n	800cdcc <_scanf_float+0x3b4>
 800cd96:	9b02      	ldr	r3, [sp, #8]
 800cd98:	454b      	cmp	r3, r9
 800cd9a:	eba3 0209 	sub.w	r2, r3, r9
 800cd9e:	d121      	bne.n	800cde4 <_scanf_float+0x3cc>
 800cda0:	9901      	ldr	r1, [sp, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	4640      	mov	r0, r8
 800cda6:	f002 fc41 	bl	800f62c <_strtod_r>
 800cdaa:	9b03      	ldr	r3, [sp, #12]
 800cdac:	6821      	ldr	r1, [r4, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f011 0f02 	tst.w	r1, #2
 800cdb4:	f103 0204 	add.w	r2, r3, #4
 800cdb8:	d01f      	beq.n	800cdfa <_scanf_float+0x3e2>
 800cdba:	9903      	ldr	r1, [sp, #12]
 800cdbc:	600a      	str	r2, [r1, #0]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	ed83 0b00 	vstr	d0, [r3]
 800cdc4:	68e3      	ldr	r3, [r4, #12]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	60e3      	str	r3, [r4, #12]
 800cdca:	e7db      	b.n	800cd84 <_scanf_float+0x36c>
 800cdcc:	9b04      	ldr	r3, [sp, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d0e6      	beq.n	800cda0 <_scanf_float+0x388>
 800cdd2:	9905      	ldr	r1, [sp, #20]
 800cdd4:	230a      	movs	r3, #10
 800cdd6:	3101      	adds	r1, #1
 800cdd8:	4640      	mov	r0, r8
 800cdda:	f002 fca7 	bl	800f72c <_strtol_r>
 800cdde:	9b04      	ldr	r3, [sp, #16]
 800cde0:	9e05      	ldr	r6, [sp, #20]
 800cde2:	1ac2      	subs	r2, r0, r3
 800cde4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cde8:	429e      	cmp	r6, r3
 800cdea:	bf28      	it	cs
 800cdec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cdf0:	490d      	ldr	r1, [pc, #52]	@ (800ce28 <_scanf_float+0x410>)
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f000 f94e 	bl	800d094 <siprintf>
 800cdf8:	e7d2      	b.n	800cda0 <_scanf_float+0x388>
 800cdfa:	f011 0f04 	tst.w	r1, #4
 800cdfe:	9903      	ldr	r1, [sp, #12]
 800ce00:	600a      	str	r2, [r1, #0]
 800ce02:	d1dc      	bne.n	800cdbe <_scanf_float+0x3a6>
 800ce04:	eeb4 0b40 	vcmp.f64	d0, d0
 800ce08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0c:	681d      	ldr	r5, [r3, #0]
 800ce0e:	d705      	bvc.n	800ce1c <_scanf_float+0x404>
 800ce10:	4806      	ldr	r0, [pc, #24]	@ (800ce2c <_scanf_float+0x414>)
 800ce12:	f000 fac5 	bl	800d3a0 <nanf>
 800ce16:	ed85 0a00 	vstr	s0, [r5]
 800ce1a:	e7d3      	b.n	800cdc4 <_scanf_float+0x3ac>
 800ce1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ce20:	e7f9      	b.n	800ce16 <_scanf_float+0x3fe>
 800ce22:	f04f 0900 	mov.w	r9, #0
 800ce26:	e630      	b.n	800ca8a <_scanf_float+0x72>
 800ce28:	08010954 	.word	0x08010954
 800ce2c:	08010ced 	.word	0x08010ced

0800ce30 <std>:
 800ce30:	2300      	movs	r3, #0
 800ce32:	b510      	push	{r4, lr}
 800ce34:	4604      	mov	r4, r0
 800ce36:	e9c0 3300 	strd	r3, r3, [r0]
 800ce3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce3e:	6083      	str	r3, [r0, #8]
 800ce40:	8181      	strh	r1, [r0, #12]
 800ce42:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce44:	81c2      	strh	r2, [r0, #14]
 800ce46:	6183      	str	r3, [r0, #24]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	2208      	movs	r2, #8
 800ce4c:	305c      	adds	r0, #92	@ 0x5c
 800ce4e:	f000 fa19 	bl	800d284 <memset>
 800ce52:	4b0d      	ldr	r3, [pc, #52]	@ (800ce88 <std+0x58>)
 800ce54:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce56:	4b0d      	ldr	r3, [pc, #52]	@ (800ce8c <std+0x5c>)
 800ce58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce90 <std+0x60>)
 800ce5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce94 <std+0x64>)
 800ce60:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce62:	4b0d      	ldr	r3, [pc, #52]	@ (800ce98 <std+0x68>)
 800ce64:	6224      	str	r4, [r4, #32]
 800ce66:	429c      	cmp	r4, r3
 800ce68:	d006      	beq.n	800ce78 <std+0x48>
 800ce6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce6e:	4294      	cmp	r4, r2
 800ce70:	d002      	beq.n	800ce78 <std+0x48>
 800ce72:	33d0      	adds	r3, #208	@ 0xd0
 800ce74:	429c      	cmp	r4, r3
 800ce76:	d105      	bne.n	800ce84 <std+0x54>
 800ce78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce80:	f000 ba7c 	b.w	800d37c <__retarget_lock_init_recursive>
 800ce84:	bd10      	pop	{r4, pc}
 800ce86:	bf00      	nop
 800ce88:	0800d0d5 	.word	0x0800d0d5
 800ce8c:	0800d0f7 	.word	0x0800d0f7
 800ce90:	0800d12f 	.word	0x0800d12f
 800ce94:	0800d153 	.word	0x0800d153
 800ce98:	240009c8 	.word	0x240009c8

0800ce9c <stdio_exit_handler>:
 800ce9c:	4a02      	ldr	r2, [pc, #8]	@ (800cea8 <stdio_exit_handler+0xc>)
 800ce9e:	4903      	ldr	r1, [pc, #12]	@ (800ceac <stdio_exit_handler+0x10>)
 800cea0:	4803      	ldr	r0, [pc, #12]	@ (800ceb0 <stdio_exit_handler+0x14>)
 800cea2:	f000 b869 	b.w	800cf78 <_fwalk_sglue>
 800cea6:	bf00      	nop
 800cea8:	24000010 	.word	0x24000010
 800ceac:	0800fd6d 	.word	0x0800fd6d
 800ceb0:	24000020 	.word	0x24000020

0800ceb4 <cleanup_stdio>:
 800ceb4:	6841      	ldr	r1, [r0, #4]
 800ceb6:	4b0c      	ldr	r3, [pc, #48]	@ (800cee8 <cleanup_stdio+0x34>)
 800ceb8:	4299      	cmp	r1, r3
 800ceba:	b510      	push	{r4, lr}
 800cebc:	4604      	mov	r4, r0
 800cebe:	d001      	beq.n	800cec4 <cleanup_stdio+0x10>
 800cec0:	f002 ff54 	bl	800fd6c <_fflush_r>
 800cec4:	68a1      	ldr	r1, [r4, #8]
 800cec6:	4b09      	ldr	r3, [pc, #36]	@ (800ceec <cleanup_stdio+0x38>)
 800cec8:	4299      	cmp	r1, r3
 800ceca:	d002      	beq.n	800ced2 <cleanup_stdio+0x1e>
 800cecc:	4620      	mov	r0, r4
 800cece:	f002 ff4d 	bl	800fd6c <_fflush_r>
 800ced2:	68e1      	ldr	r1, [r4, #12]
 800ced4:	4b06      	ldr	r3, [pc, #24]	@ (800cef0 <cleanup_stdio+0x3c>)
 800ced6:	4299      	cmp	r1, r3
 800ced8:	d004      	beq.n	800cee4 <cleanup_stdio+0x30>
 800ceda:	4620      	mov	r0, r4
 800cedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cee0:	f002 bf44 	b.w	800fd6c <_fflush_r>
 800cee4:	bd10      	pop	{r4, pc}
 800cee6:	bf00      	nop
 800cee8:	240009c8 	.word	0x240009c8
 800ceec:	24000a30 	.word	0x24000a30
 800cef0:	24000a98 	.word	0x24000a98

0800cef4 <global_stdio_init.part.0>:
 800cef4:	b510      	push	{r4, lr}
 800cef6:	4b0b      	ldr	r3, [pc, #44]	@ (800cf24 <global_stdio_init.part.0+0x30>)
 800cef8:	4c0b      	ldr	r4, [pc, #44]	@ (800cf28 <global_stdio_init.part.0+0x34>)
 800cefa:	4a0c      	ldr	r2, [pc, #48]	@ (800cf2c <global_stdio_init.part.0+0x38>)
 800cefc:	601a      	str	r2, [r3, #0]
 800cefe:	4620      	mov	r0, r4
 800cf00:	2200      	movs	r2, #0
 800cf02:	2104      	movs	r1, #4
 800cf04:	f7ff ff94 	bl	800ce30 <std>
 800cf08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	2109      	movs	r1, #9
 800cf10:	f7ff ff8e 	bl	800ce30 <std>
 800cf14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf18:	2202      	movs	r2, #2
 800cf1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf1e:	2112      	movs	r1, #18
 800cf20:	f7ff bf86 	b.w	800ce30 <std>
 800cf24:	24000b00 	.word	0x24000b00
 800cf28:	240009c8 	.word	0x240009c8
 800cf2c:	0800ce9d 	.word	0x0800ce9d

0800cf30 <__sfp_lock_acquire>:
 800cf30:	4801      	ldr	r0, [pc, #4]	@ (800cf38 <__sfp_lock_acquire+0x8>)
 800cf32:	f000 ba24 	b.w	800d37e <__retarget_lock_acquire_recursive>
 800cf36:	bf00      	nop
 800cf38:	24000b09 	.word	0x24000b09

0800cf3c <__sfp_lock_release>:
 800cf3c:	4801      	ldr	r0, [pc, #4]	@ (800cf44 <__sfp_lock_release+0x8>)
 800cf3e:	f000 ba1f 	b.w	800d380 <__retarget_lock_release_recursive>
 800cf42:	bf00      	nop
 800cf44:	24000b09 	.word	0x24000b09

0800cf48 <__sinit>:
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	f7ff fff0 	bl	800cf30 <__sfp_lock_acquire>
 800cf50:	6a23      	ldr	r3, [r4, #32]
 800cf52:	b11b      	cbz	r3, 800cf5c <__sinit+0x14>
 800cf54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf58:	f7ff bff0 	b.w	800cf3c <__sfp_lock_release>
 800cf5c:	4b04      	ldr	r3, [pc, #16]	@ (800cf70 <__sinit+0x28>)
 800cf5e:	6223      	str	r3, [r4, #32]
 800cf60:	4b04      	ldr	r3, [pc, #16]	@ (800cf74 <__sinit+0x2c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1f5      	bne.n	800cf54 <__sinit+0xc>
 800cf68:	f7ff ffc4 	bl	800cef4 <global_stdio_init.part.0>
 800cf6c:	e7f2      	b.n	800cf54 <__sinit+0xc>
 800cf6e:	bf00      	nop
 800cf70:	0800ceb5 	.word	0x0800ceb5
 800cf74:	24000b00 	.word	0x24000b00

0800cf78 <_fwalk_sglue>:
 800cf78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf7c:	4607      	mov	r7, r0
 800cf7e:	4688      	mov	r8, r1
 800cf80:	4614      	mov	r4, r2
 800cf82:	2600      	movs	r6, #0
 800cf84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf88:	f1b9 0901 	subs.w	r9, r9, #1
 800cf8c:	d505      	bpl.n	800cf9a <_fwalk_sglue+0x22>
 800cf8e:	6824      	ldr	r4, [r4, #0]
 800cf90:	2c00      	cmp	r4, #0
 800cf92:	d1f7      	bne.n	800cf84 <_fwalk_sglue+0xc>
 800cf94:	4630      	mov	r0, r6
 800cf96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9a:	89ab      	ldrh	r3, [r5, #12]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d907      	bls.n	800cfb0 <_fwalk_sglue+0x38>
 800cfa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	d003      	beq.n	800cfb0 <_fwalk_sglue+0x38>
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	4638      	mov	r0, r7
 800cfac:	47c0      	blx	r8
 800cfae:	4306      	orrs	r6, r0
 800cfb0:	3568      	adds	r5, #104	@ 0x68
 800cfb2:	e7e9      	b.n	800cf88 <_fwalk_sglue+0x10>

0800cfb4 <iprintf>:
 800cfb4:	b40f      	push	{r0, r1, r2, r3}
 800cfb6:	b507      	push	{r0, r1, r2, lr}
 800cfb8:	4906      	ldr	r1, [pc, #24]	@ (800cfd4 <iprintf+0x20>)
 800cfba:	ab04      	add	r3, sp, #16
 800cfbc:	6808      	ldr	r0, [r1, #0]
 800cfbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc2:	6881      	ldr	r1, [r0, #8]
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	f002 fd35 	bl	800fa34 <_vfiprintf_r>
 800cfca:	b003      	add	sp, #12
 800cfcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfd0:	b004      	add	sp, #16
 800cfd2:	4770      	bx	lr
 800cfd4:	2400001c 	.word	0x2400001c

0800cfd8 <_puts_r>:
 800cfd8:	6a03      	ldr	r3, [r0, #32]
 800cfda:	b570      	push	{r4, r5, r6, lr}
 800cfdc:	6884      	ldr	r4, [r0, #8]
 800cfde:	4605      	mov	r5, r0
 800cfe0:	460e      	mov	r6, r1
 800cfe2:	b90b      	cbnz	r3, 800cfe8 <_puts_r+0x10>
 800cfe4:	f7ff ffb0 	bl	800cf48 <__sinit>
 800cfe8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfea:	07db      	lsls	r3, r3, #31
 800cfec:	d405      	bmi.n	800cffa <_puts_r+0x22>
 800cfee:	89a3      	ldrh	r3, [r4, #12]
 800cff0:	0598      	lsls	r0, r3, #22
 800cff2:	d402      	bmi.n	800cffa <_puts_r+0x22>
 800cff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cff6:	f000 f9c2 	bl	800d37e <__retarget_lock_acquire_recursive>
 800cffa:	89a3      	ldrh	r3, [r4, #12]
 800cffc:	0719      	lsls	r1, r3, #28
 800cffe:	d502      	bpl.n	800d006 <_puts_r+0x2e>
 800d000:	6923      	ldr	r3, [r4, #16]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d135      	bne.n	800d072 <_puts_r+0x9a>
 800d006:	4621      	mov	r1, r4
 800d008:	4628      	mov	r0, r5
 800d00a:	f000 f8e5 	bl	800d1d8 <__swsetup_r>
 800d00e:	b380      	cbz	r0, 800d072 <_puts_r+0x9a>
 800d010:	f04f 35ff 	mov.w	r5, #4294967295
 800d014:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d016:	07da      	lsls	r2, r3, #31
 800d018:	d405      	bmi.n	800d026 <_puts_r+0x4e>
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	059b      	lsls	r3, r3, #22
 800d01e:	d402      	bmi.n	800d026 <_puts_r+0x4e>
 800d020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d022:	f000 f9ad 	bl	800d380 <__retarget_lock_release_recursive>
 800d026:	4628      	mov	r0, r5
 800d028:	bd70      	pop	{r4, r5, r6, pc}
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	da04      	bge.n	800d038 <_puts_r+0x60>
 800d02e:	69a2      	ldr	r2, [r4, #24]
 800d030:	429a      	cmp	r2, r3
 800d032:	dc17      	bgt.n	800d064 <_puts_r+0x8c>
 800d034:	290a      	cmp	r1, #10
 800d036:	d015      	beq.n	800d064 <_puts_r+0x8c>
 800d038:	6823      	ldr	r3, [r4, #0]
 800d03a:	1c5a      	adds	r2, r3, #1
 800d03c:	6022      	str	r2, [r4, #0]
 800d03e:	7019      	strb	r1, [r3, #0]
 800d040:	68a3      	ldr	r3, [r4, #8]
 800d042:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d046:	3b01      	subs	r3, #1
 800d048:	60a3      	str	r3, [r4, #8]
 800d04a:	2900      	cmp	r1, #0
 800d04c:	d1ed      	bne.n	800d02a <_puts_r+0x52>
 800d04e:	2b00      	cmp	r3, #0
 800d050:	da11      	bge.n	800d076 <_puts_r+0x9e>
 800d052:	4622      	mov	r2, r4
 800d054:	210a      	movs	r1, #10
 800d056:	4628      	mov	r0, r5
 800d058:	f000 f87f 	bl	800d15a <__swbuf_r>
 800d05c:	3001      	adds	r0, #1
 800d05e:	d0d7      	beq.n	800d010 <_puts_r+0x38>
 800d060:	250a      	movs	r5, #10
 800d062:	e7d7      	b.n	800d014 <_puts_r+0x3c>
 800d064:	4622      	mov	r2, r4
 800d066:	4628      	mov	r0, r5
 800d068:	f000 f877 	bl	800d15a <__swbuf_r>
 800d06c:	3001      	adds	r0, #1
 800d06e:	d1e7      	bne.n	800d040 <_puts_r+0x68>
 800d070:	e7ce      	b.n	800d010 <_puts_r+0x38>
 800d072:	3e01      	subs	r6, #1
 800d074:	e7e4      	b.n	800d040 <_puts_r+0x68>
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	1c5a      	adds	r2, r3, #1
 800d07a:	6022      	str	r2, [r4, #0]
 800d07c:	220a      	movs	r2, #10
 800d07e:	701a      	strb	r2, [r3, #0]
 800d080:	e7ee      	b.n	800d060 <_puts_r+0x88>
	...

0800d084 <puts>:
 800d084:	4b02      	ldr	r3, [pc, #8]	@ (800d090 <puts+0xc>)
 800d086:	4601      	mov	r1, r0
 800d088:	6818      	ldr	r0, [r3, #0]
 800d08a:	f7ff bfa5 	b.w	800cfd8 <_puts_r>
 800d08e:	bf00      	nop
 800d090:	2400001c 	.word	0x2400001c

0800d094 <siprintf>:
 800d094:	b40e      	push	{r1, r2, r3}
 800d096:	b500      	push	{lr}
 800d098:	b09c      	sub	sp, #112	@ 0x70
 800d09a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d09c:	9002      	str	r0, [sp, #8]
 800d09e:	9006      	str	r0, [sp, #24]
 800d0a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d0a4:	4809      	ldr	r0, [pc, #36]	@ (800d0cc <siprintf+0x38>)
 800d0a6:	9107      	str	r1, [sp, #28]
 800d0a8:	9104      	str	r1, [sp, #16]
 800d0aa:	4909      	ldr	r1, [pc, #36]	@ (800d0d0 <siprintf+0x3c>)
 800d0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b0:	9105      	str	r1, [sp, #20]
 800d0b2:	6800      	ldr	r0, [r0, #0]
 800d0b4:	9301      	str	r3, [sp, #4]
 800d0b6:	a902      	add	r1, sp, #8
 800d0b8:	f002 fb96 	bl	800f7e8 <_svfiprintf_r>
 800d0bc:	9b02      	ldr	r3, [sp, #8]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	b01c      	add	sp, #112	@ 0x70
 800d0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0c8:	b003      	add	sp, #12
 800d0ca:	4770      	bx	lr
 800d0cc:	2400001c 	.word	0x2400001c
 800d0d0:	ffff0208 	.word	0xffff0208

0800d0d4 <__sread>:
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0dc:	f000 f900 	bl	800d2e0 <_read_r>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	bfab      	itete	ge
 800d0e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d0e8:	181b      	addge	r3, r3, r0
 800d0ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0ee:	bfac      	ite	ge
 800d0f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0f2:	81a3      	strhlt	r3, [r4, #12]
 800d0f4:	bd10      	pop	{r4, pc}

0800d0f6 <__swrite>:
 800d0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fa:	461f      	mov	r7, r3
 800d0fc:	898b      	ldrh	r3, [r1, #12]
 800d0fe:	05db      	lsls	r3, r3, #23
 800d100:	4605      	mov	r5, r0
 800d102:	460c      	mov	r4, r1
 800d104:	4616      	mov	r6, r2
 800d106:	d505      	bpl.n	800d114 <__swrite+0x1e>
 800d108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d10c:	2302      	movs	r3, #2
 800d10e:	2200      	movs	r2, #0
 800d110:	f000 f8d4 	bl	800d2bc <_lseek_r>
 800d114:	89a3      	ldrh	r3, [r4, #12]
 800d116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d11a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d11e:	81a3      	strh	r3, [r4, #12]
 800d120:	4632      	mov	r2, r6
 800d122:	463b      	mov	r3, r7
 800d124:	4628      	mov	r0, r5
 800d126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d12a:	f000 b8eb 	b.w	800d304 <_write_r>

0800d12e <__sseek>:
 800d12e:	b510      	push	{r4, lr}
 800d130:	460c      	mov	r4, r1
 800d132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d136:	f000 f8c1 	bl	800d2bc <_lseek_r>
 800d13a:	1c43      	adds	r3, r0, #1
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	bf15      	itete	ne
 800d140:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d142:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d146:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d14a:	81a3      	strheq	r3, [r4, #12]
 800d14c:	bf18      	it	ne
 800d14e:	81a3      	strhne	r3, [r4, #12]
 800d150:	bd10      	pop	{r4, pc}

0800d152 <__sclose>:
 800d152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d156:	f000 b8a1 	b.w	800d29c <_close_r>

0800d15a <__swbuf_r>:
 800d15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15c:	460e      	mov	r6, r1
 800d15e:	4614      	mov	r4, r2
 800d160:	4605      	mov	r5, r0
 800d162:	b118      	cbz	r0, 800d16c <__swbuf_r+0x12>
 800d164:	6a03      	ldr	r3, [r0, #32]
 800d166:	b90b      	cbnz	r3, 800d16c <__swbuf_r+0x12>
 800d168:	f7ff feee 	bl	800cf48 <__sinit>
 800d16c:	69a3      	ldr	r3, [r4, #24]
 800d16e:	60a3      	str	r3, [r4, #8]
 800d170:	89a3      	ldrh	r3, [r4, #12]
 800d172:	071a      	lsls	r2, r3, #28
 800d174:	d501      	bpl.n	800d17a <__swbuf_r+0x20>
 800d176:	6923      	ldr	r3, [r4, #16]
 800d178:	b943      	cbnz	r3, 800d18c <__swbuf_r+0x32>
 800d17a:	4621      	mov	r1, r4
 800d17c:	4628      	mov	r0, r5
 800d17e:	f000 f82b 	bl	800d1d8 <__swsetup_r>
 800d182:	b118      	cbz	r0, 800d18c <__swbuf_r+0x32>
 800d184:	f04f 37ff 	mov.w	r7, #4294967295
 800d188:	4638      	mov	r0, r7
 800d18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d18c:	6823      	ldr	r3, [r4, #0]
 800d18e:	6922      	ldr	r2, [r4, #16]
 800d190:	1a98      	subs	r0, r3, r2
 800d192:	6963      	ldr	r3, [r4, #20]
 800d194:	b2f6      	uxtb	r6, r6
 800d196:	4283      	cmp	r3, r0
 800d198:	4637      	mov	r7, r6
 800d19a:	dc05      	bgt.n	800d1a8 <__swbuf_r+0x4e>
 800d19c:	4621      	mov	r1, r4
 800d19e:	4628      	mov	r0, r5
 800d1a0:	f002 fde4 	bl	800fd6c <_fflush_r>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d1ed      	bne.n	800d184 <__swbuf_r+0x2a>
 800d1a8:	68a3      	ldr	r3, [r4, #8]
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	60a3      	str	r3, [r4, #8]
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	1c5a      	adds	r2, r3, #1
 800d1b2:	6022      	str	r2, [r4, #0]
 800d1b4:	701e      	strb	r6, [r3, #0]
 800d1b6:	6962      	ldr	r2, [r4, #20]
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d004      	beq.n	800d1c8 <__swbuf_r+0x6e>
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	07db      	lsls	r3, r3, #31
 800d1c2:	d5e1      	bpl.n	800d188 <__swbuf_r+0x2e>
 800d1c4:	2e0a      	cmp	r6, #10
 800d1c6:	d1df      	bne.n	800d188 <__swbuf_r+0x2e>
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	f002 fdce 	bl	800fd6c <_fflush_r>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d0d9      	beq.n	800d188 <__swbuf_r+0x2e>
 800d1d4:	e7d6      	b.n	800d184 <__swbuf_r+0x2a>
	...

0800d1d8 <__swsetup_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4b29      	ldr	r3, [pc, #164]	@ (800d280 <__swsetup_r+0xa8>)
 800d1dc:	4605      	mov	r5, r0
 800d1de:	6818      	ldr	r0, [r3, #0]
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	b118      	cbz	r0, 800d1ec <__swsetup_r+0x14>
 800d1e4:	6a03      	ldr	r3, [r0, #32]
 800d1e6:	b90b      	cbnz	r3, 800d1ec <__swsetup_r+0x14>
 800d1e8:	f7ff feae 	bl	800cf48 <__sinit>
 800d1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1f0:	0719      	lsls	r1, r3, #28
 800d1f2:	d422      	bmi.n	800d23a <__swsetup_r+0x62>
 800d1f4:	06da      	lsls	r2, r3, #27
 800d1f6:	d407      	bmi.n	800d208 <__swsetup_r+0x30>
 800d1f8:	2209      	movs	r2, #9
 800d1fa:	602a      	str	r2, [r5, #0]
 800d1fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d200:	81a3      	strh	r3, [r4, #12]
 800d202:	f04f 30ff 	mov.w	r0, #4294967295
 800d206:	e033      	b.n	800d270 <__swsetup_r+0x98>
 800d208:	0758      	lsls	r0, r3, #29
 800d20a:	d512      	bpl.n	800d232 <__swsetup_r+0x5a>
 800d20c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d20e:	b141      	cbz	r1, 800d222 <__swsetup_r+0x4a>
 800d210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d214:	4299      	cmp	r1, r3
 800d216:	d002      	beq.n	800d21e <__swsetup_r+0x46>
 800d218:	4628      	mov	r0, r5
 800d21a:	f000 fea7 	bl	800df6c <_free_r>
 800d21e:	2300      	movs	r3, #0
 800d220:	6363      	str	r3, [r4, #52]	@ 0x34
 800d222:	89a3      	ldrh	r3, [r4, #12]
 800d224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d228:	81a3      	strh	r3, [r4, #12]
 800d22a:	2300      	movs	r3, #0
 800d22c:	6063      	str	r3, [r4, #4]
 800d22e:	6923      	ldr	r3, [r4, #16]
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	f043 0308 	orr.w	r3, r3, #8
 800d238:	81a3      	strh	r3, [r4, #12]
 800d23a:	6923      	ldr	r3, [r4, #16]
 800d23c:	b94b      	cbnz	r3, 800d252 <__swsetup_r+0x7a>
 800d23e:	89a3      	ldrh	r3, [r4, #12]
 800d240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d248:	d003      	beq.n	800d252 <__swsetup_r+0x7a>
 800d24a:	4621      	mov	r1, r4
 800d24c:	4628      	mov	r0, r5
 800d24e:	f002 fddb 	bl	800fe08 <__smakebuf_r>
 800d252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d256:	f013 0201 	ands.w	r2, r3, #1
 800d25a:	d00a      	beq.n	800d272 <__swsetup_r+0x9a>
 800d25c:	2200      	movs	r2, #0
 800d25e:	60a2      	str	r2, [r4, #8]
 800d260:	6962      	ldr	r2, [r4, #20]
 800d262:	4252      	negs	r2, r2
 800d264:	61a2      	str	r2, [r4, #24]
 800d266:	6922      	ldr	r2, [r4, #16]
 800d268:	b942      	cbnz	r2, 800d27c <__swsetup_r+0xa4>
 800d26a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d26e:	d1c5      	bne.n	800d1fc <__swsetup_r+0x24>
 800d270:	bd38      	pop	{r3, r4, r5, pc}
 800d272:	0799      	lsls	r1, r3, #30
 800d274:	bf58      	it	pl
 800d276:	6962      	ldrpl	r2, [r4, #20]
 800d278:	60a2      	str	r2, [r4, #8]
 800d27a:	e7f4      	b.n	800d266 <__swsetup_r+0x8e>
 800d27c:	2000      	movs	r0, #0
 800d27e:	e7f7      	b.n	800d270 <__swsetup_r+0x98>
 800d280:	2400001c 	.word	0x2400001c

0800d284 <memset>:
 800d284:	4402      	add	r2, r0
 800d286:	4603      	mov	r3, r0
 800d288:	4293      	cmp	r3, r2
 800d28a:	d100      	bne.n	800d28e <memset+0xa>
 800d28c:	4770      	bx	lr
 800d28e:	f803 1b01 	strb.w	r1, [r3], #1
 800d292:	e7f9      	b.n	800d288 <memset+0x4>

0800d294 <_localeconv_r>:
 800d294:	4800      	ldr	r0, [pc, #0]	@ (800d298 <_localeconv_r+0x4>)
 800d296:	4770      	bx	lr
 800d298:	2400015c 	.word	0x2400015c

0800d29c <_close_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4d06      	ldr	r5, [pc, #24]	@ (800d2b8 <_close_r+0x1c>)
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	4608      	mov	r0, r1
 800d2a6:	602b      	str	r3, [r5, #0]
 800d2a8:	f7f4 fcf6 	bl	8001c98 <_close>
 800d2ac:	1c43      	adds	r3, r0, #1
 800d2ae:	d102      	bne.n	800d2b6 <_close_r+0x1a>
 800d2b0:	682b      	ldr	r3, [r5, #0]
 800d2b2:	b103      	cbz	r3, 800d2b6 <_close_r+0x1a>
 800d2b4:	6023      	str	r3, [r4, #0]
 800d2b6:	bd38      	pop	{r3, r4, r5, pc}
 800d2b8:	24000b04 	.word	0x24000b04

0800d2bc <_lseek_r>:
 800d2bc:	b538      	push	{r3, r4, r5, lr}
 800d2be:	4d07      	ldr	r5, [pc, #28]	@ (800d2dc <_lseek_r+0x20>)
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	4608      	mov	r0, r1
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	602a      	str	r2, [r5, #0]
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	f7f4 fd0b 	bl	8001ce6 <_lseek>
 800d2d0:	1c43      	adds	r3, r0, #1
 800d2d2:	d102      	bne.n	800d2da <_lseek_r+0x1e>
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	b103      	cbz	r3, 800d2da <_lseek_r+0x1e>
 800d2d8:	6023      	str	r3, [r4, #0]
 800d2da:	bd38      	pop	{r3, r4, r5, pc}
 800d2dc:	24000b04 	.word	0x24000b04

0800d2e0 <_read_r>:
 800d2e0:	b538      	push	{r3, r4, r5, lr}
 800d2e2:	4d07      	ldr	r5, [pc, #28]	@ (800d300 <_read_r+0x20>)
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	4608      	mov	r0, r1
 800d2e8:	4611      	mov	r1, r2
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	602a      	str	r2, [r5, #0]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	f7f4 fcb5 	bl	8001c5e <_read>
 800d2f4:	1c43      	adds	r3, r0, #1
 800d2f6:	d102      	bne.n	800d2fe <_read_r+0x1e>
 800d2f8:	682b      	ldr	r3, [r5, #0]
 800d2fa:	b103      	cbz	r3, 800d2fe <_read_r+0x1e>
 800d2fc:	6023      	str	r3, [r4, #0]
 800d2fe:	bd38      	pop	{r3, r4, r5, pc}
 800d300:	24000b04 	.word	0x24000b04

0800d304 <_write_r>:
 800d304:	b538      	push	{r3, r4, r5, lr}
 800d306:	4d07      	ldr	r5, [pc, #28]	@ (800d324 <_write_r+0x20>)
 800d308:	4604      	mov	r4, r0
 800d30a:	4608      	mov	r0, r1
 800d30c:	4611      	mov	r1, r2
 800d30e:	2200      	movs	r2, #0
 800d310:	602a      	str	r2, [r5, #0]
 800d312:	461a      	mov	r2, r3
 800d314:	f7f3 fbe7 	bl	8000ae6 <_write>
 800d318:	1c43      	adds	r3, r0, #1
 800d31a:	d102      	bne.n	800d322 <_write_r+0x1e>
 800d31c:	682b      	ldr	r3, [r5, #0]
 800d31e:	b103      	cbz	r3, 800d322 <_write_r+0x1e>
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	bd38      	pop	{r3, r4, r5, pc}
 800d324:	24000b04 	.word	0x24000b04

0800d328 <__errno>:
 800d328:	4b01      	ldr	r3, [pc, #4]	@ (800d330 <__errno+0x8>)
 800d32a:	6818      	ldr	r0, [r3, #0]
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	2400001c 	.word	0x2400001c

0800d334 <__libc_init_array>:
 800d334:	b570      	push	{r4, r5, r6, lr}
 800d336:	4d0d      	ldr	r5, [pc, #52]	@ (800d36c <__libc_init_array+0x38>)
 800d338:	4c0d      	ldr	r4, [pc, #52]	@ (800d370 <__libc_init_array+0x3c>)
 800d33a:	1b64      	subs	r4, r4, r5
 800d33c:	10a4      	asrs	r4, r4, #2
 800d33e:	2600      	movs	r6, #0
 800d340:	42a6      	cmp	r6, r4
 800d342:	d109      	bne.n	800d358 <__libc_init_array+0x24>
 800d344:	4d0b      	ldr	r5, [pc, #44]	@ (800d374 <__libc_init_array+0x40>)
 800d346:	4c0c      	ldr	r4, [pc, #48]	@ (800d378 <__libc_init_array+0x44>)
 800d348:	f003 fa20 	bl	801078c <_init>
 800d34c:	1b64      	subs	r4, r4, r5
 800d34e:	10a4      	asrs	r4, r4, #2
 800d350:	2600      	movs	r6, #0
 800d352:	42a6      	cmp	r6, r4
 800d354:	d105      	bne.n	800d362 <__libc_init_array+0x2e>
 800d356:	bd70      	pop	{r4, r5, r6, pc}
 800d358:	f855 3b04 	ldr.w	r3, [r5], #4
 800d35c:	4798      	blx	r3
 800d35e:	3601      	adds	r6, #1
 800d360:	e7ee      	b.n	800d340 <__libc_init_array+0xc>
 800d362:	f855 3b04 	ldr.w	r3, [r5], #4
 800d366:	4798      	blx	r3
 800d368:	3601      	adds	r6, #1
 800d36a:	e7f2      	b.n	800d352 <__libc_init_array+0x1e>
 800d36c:	08010d58 	.word	0x08010d58
 800d370:	08010d58 	.word	0x08010d58
 800d374:	08010d58 	.word	0x08010d58
 800d378:	08010d5c 	.word	0x08010d5c

0800d37c <__retarget_lock_init_recursive>:
 800d37c:	4770      	bx	lr

0800d37e <__retarget_lock_acquire_recursive>:
 800d37e:	4770      	bx	lr

0800d380 <__retarget_lock_release_recursive>:
 800d380:	4770      	bx	lr

0800d382 <memcpy>:
 800d382:	440a      	add	r2, r1
 800d384:	4291      	cmp	r1, r2
 800d386:	f100 33ff 	add.w	r3, r0, #4294967295
 800d38a:	d100      	bne.n	800d38e <memcpy+0xc>
 800d38c:	4770      	bx	lr
 800d38e:	b510      	push	{r4, lr}
 800d390:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d394:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d398:	4291      	cmp	r1, r2
 800d39a:	d1f9      	bne.n	800d390 <memcpy+0xe>
 800d39c:	bd10      	pop	{r4, pc}
	...

0800d3a0 <nanf>:
 800d3a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d3a8 <nanf+0x8>
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	7fc00000 	.word	0x7fc00000

0800d3ac <quorem>:
 800d3ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b0:	6903      	ldr	r3, [r0, #16]
 800d3b2:	690c      	ldr	r4, [r1, #16]
 800d3b4:	42a3      	cmp	r3, r4
 800d3b6:	4607      	mov	r7, r0
 800d3b8:	db7e      	blt.n	800d4b8 <quorem+0x10c>
 800d3ba:	3c01      	subs	r4, #1
 800d3bc:	f101 0814 	add.w	r8, r1, #20
 800d3c0:	00a3      	lsls	r3, r4, #2
 800d3c2:	f100 0514 	add.w	r5, r0, #20
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3cc:	9301      	str	r3, [sp, #4]
 800d3ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3de:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3e2:	d32e      	bcc.n	800d442 <quorem+0x96>
 800d3e4:	f04f 0a00 	mov.w	sl, #0
 800d3e8:	46c4      	mov	ip, r8
 800d3ea:	46ae      	mov	lr, r5
 800d3ec:	46d3      	mov	fp, sl
 800d3ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3f2:	b298      	uxth	r0, r3
 800d3f4:	fb06 a000 	mla	r0, r6, r0, sl
 800d3f8:	0c02      	lsrs	r2, r0, #16
 800d3fa:	0c1b      	lsrs	r3, r3, #16
 800d3fc:	fb06 2303 	mla	r3, r6, r3, r2
 800d400:	f8de 2000 	ldr.w	r2, [lr]
 800d404:	b280      	uxth	r0, r0
 800d406:	b292      	uxth	r2, r2
 800d408:	1a12      	subs	r2, r2, r0
 800d40a:	445a      	add	r2, fp
 800d40c:	f8de 0000 	ldr.w	r0, [lr]
 800d410:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d414:	b29b      	uxth	r3, r3
 800d416:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d41a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d41e:	b292      	uxth	r2, r2
 800d420:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d424:	45e1      	cmp	r9, ip
 800d426:	f84e 2b04 	str.w	r2, [lr], #4
 800d42a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d42e:	d2de      	bcs.n	800d3ee <quorem+0x42>
 800d430:	9b00      	ldr	r3, [sp, #0]
 800d432:	58eb      	ldr	r3, [r5, r3]
 800d434:	b92b      	cbnz	r3, 800d442 <quorem+0x96>
 800d436:	9b01      	ldr	r3, [sp, #4]
 800d438:	3b04      	subs	r3, #4
 800d43a:	429d      	cmp	r5, r3
 800d43c:	461a      	mov	r2, r3
 800d43e:	d32f      	bcc.n	800d4a0 <quorem+0xf4>
 800d440:	613c      	str	r4, [r7, #16]
 800d442:	4638      	mov	r0, r7
 800d444:	f001 f956 	bl	800e6f4 <__mcmp>
 800d448:	2800      	cmp	r0, #0
 800d44a:	db25      	blt.n	800d498 <quorem+0xec>
 800d44c:	4629      	mov	r1, r5
 800d44e:	2000      	movs	r0, #0
 800d450:	f858 2b04 	ldr.w	r2, [r8], #4
 800d454:	f8d1 c000 	ldr.w	ip, [r1]
 800d458:	fa1f fe82 	uxth.w	lr, r2
 800d45c:	fa1f f38c 	uxth.w	r3, ip
 800d460:	eba3 030e 	sub.w	r3, r3, lr
 800d464:	4403      	add	r3, r0
 800d466:	0c12      	lsrs	r2, r2, #16
 800d468:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d46c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d470:	b29b      	uxth	r3, r3
 800d472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d476:	45c1      	cmp	r9, r8
 800d478:	f841 3b04 	str.w	r3, [r1], #4
 800d47c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d480:	d2e6      	bcs.n	800d450 <quorem+0xa4>
 800d482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d48a:	b922      	cbnz	r2, 800d496 <quorem+0xea>
 800d48c:	3b04      	subs	r3, #4
 800d48e:	429d      	cmp	r5, r3
 800d490:	461a      	mov	r2, r3
 800d492:	d30b      	bcc.n	800d4ac <quorem+0x100>
 800d494:	613c      	str	r4, [r7, #16]
 800d496:	3601      	adds	r6, #1
 800d498:	4630      	mov	r0, r6
 800d49a:	b003      	add	sp, #12
 800d49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a0:	6812      	ldr	r2, [r2, #0]
 800d4a2:	3b04      	subs	r3, #4
 800d4a4:	2a00      	cmp	r2, #0
 800d4a6:	d1cb      	bne.n	800d440 <quorem+0x94>
 800d4a8:	3c01      	subs	r4, #1
 800d4aa:	e7c6      	b.n	800d43a <quorem+0x8e>
 800d4ac:	6812      	ldr	r2, [r2, #0]
 800d4ae:	3b04      	subs	r3, #4
 800d4b0:	2a00      	cmp	r2, #0
 800d4b2:	d1ef      	bne.n	800d494 <quorem+0xe8>
 800d4b4:	3c01      	subs	r4, #1
 800d4b6:	e7ea      	b.n	800d48e <quorem+0xe2>
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	e7ee      	b.n	800d49a <quorem+0xee>
 800d4bc:	0000      	movs	r0, r0
	...

0800d4c0 <_dtoa_r>:
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	ed2d 8b02 	vpush	{d8}
 800d4c8:	69c7      	ldr	r7, [r0, #28]
 800d4ca:	b091      	sub	sp, #68	@ 0x44
 800d4cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d4d0:	ec55 4b10 	vmov	r4, r5, d0
 800d4d4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d4d6:	9107      	str	r1, [sp, #28]
 800d4d8:	4681      	mov	r9, r0
 800d4da:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4dc:	930d      	str	r3, [sp, #52]	@ 0x34
 800d4de:	b97f      	cbnz	r7, 800d500 <_dtoa_r+0x40>
 800d4e0:	2010      	movs	r0, #16
 800d4e2:	f000 fd8d 	bl	800e000 <malloc>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	f8c9 001c 	str.w	r0, [r9, #28]
 800d4ec:	b920      	cbnz	r0, 800d4f8 <_dtoa_r+0x38>
 800d4ee:	4ba0      	ldr	r3, [pc, #640]	@ (800d770 <_dtoa_r+0x2b0>)
 800d4f0:	21ef      	movs	r1, #239	@ 0xef
 800d4f2:	48a0      	ldr	r0, [pc, #640]	@ (800d774 <_dtoa_r+0x2b4>)
 800d4f4:	f002 fd2c 	bl	800ff50 <__assert_func>
 800d4f8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d4fc:	6007      	str	r7, [r0, #0]
 800d4fe:	60c7      	str	r7, [r0, #12]
 800d500:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d504:	6819      	ldr	r1, [r3, #0]
 800d506:	b159      	cbz	r1, 800d520 <_dtoa_r+0x60>
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	604a      	str	r2, [r1, #4]
 800d50c:	2301      	movs	r3, #1
 800d50e:	4093      	lsls	r3, r2
 800d510:	608b      	str	r3, [r1, #8]
 800d512:	4648      	mov	r0, r9
 800d514:	f000 fe6a 	bl	800e1ec <_Bfree>
 800d518:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d51c:	2200      	movs	r2, #0
 800d51e:	601a      	str	r2, [r3, #0]
 800d520:	1e2b      	subs	r3, r5, #0
 800d522:	bfbb      	ittet	lt
 800d524:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d528:	9303      	strlt	r3, [sp, #12]
 800d52a:	2300      	movge	r3, #0
 800d52c:	2201      	movlt	r2, #1
 800d52e:	bfac      	ite	ge
 800d530:	6033      	strge	r3, [r6, #0]
 800d532:	6032      	strlt	r2, [r6, #0]
 800d534:	4b90      	ldr	r3, [pc, #576]	@ (800d778 <_dtoa_r+0x2b8>)
 800d536:	9e03      	ldr	r6, [sp, #12]
 800d538:	43b3      	bics	r3, r6
 800d53a:	d110      	bne.n	800d55e <_dtoa_r+0x9e>
 800d53c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d53e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d548:	4323      	orrs	r3, r4
 800d54a:	f000 84de 	beq.w	800df0a <_dtoa_r+0xa4a>
 800d54e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d550:	4f8a      	ldr	r7, [pc, #552]	@ (800d77c <_dtoa_r+0x2bc>)
 800d552:	2b00      	cmp	r3, #0
 800d554:	f000 84e0 	beq.w	800df18 <_dtoa_r+0xa58>
 800d558:	1cfb      	adds	r3, r7, #3
 800d55a:	f000 bcdb 	b.w	800df14 <_dtoa_r+0xa54>
 800d55e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d562:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d56a:	d10a      	bne.n	800d582 <_dtoa_r+0xc2>
 800d56c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d56e:	2301      	movs	r3, #1
 800d570:	6013      	str	r3, [r2, #0]
 800d572:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d574:	b113      	cbz	r3, 800d57c <_dtoa_r+0xbc>
 800d576:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d578:	4b81      	ldr	r3, [pc, #516]	@ (800d780 <_dtoa_r+0x2c0>)
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	4f81      	ldr	r7, [pc, #516]	@ (800d784 <_dtoa_r+0x2c4>)
 800d57e:	f000 bccb 	b.w	800df18 <_dtoa_r+0xa58>
 800d582:	aa0e      	add	r2, sp, #56	@ 0x38
 800d584:	a90f      	add	r1, sp, #60	@ 0x3c
 800d586:	4648      	mov	r0, r9
 800d588:	eeb0 0b48 	vmov.f64	d0, d8
 800d58c:	f001 f9d2 	bl	800e934 <__d2b>
 800d590:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d594:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d596:	9001      	str	r0, [sp, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d045      	beq.n	800d628 <_dtoa_r+0x168>
 800d59c:	eeb0 7b48 	vmov.f64	d7, d8
 800d5a0:	ee18 1a90 	vmov	r1, s17
 800d5a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d5a8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d5ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d5b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d5b4:	2500      	movs	r5, #0
 800d5b6:	ee07 1a90 	vmov	s15, r1
 800d5ba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d5be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d758 <_dtoa_r+0x298>
 800d5c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d5c6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d760 <_dtoa_r+0x2a0>
 800d5ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d5ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d768 <_dtoa_r+0x2a8>
 800d5d2:	ee07 3a90 	vmov	s15, r3
 800d5d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d5da:	eeb0 7b46 	vmov.f64	d7, d6
 800d5de:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d5e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d5e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ee:	ee16 8a90 	vmov	r8, s13
 800d5f2:	d508      	bpl.n	800d606 <_dtoa_r+0x146>
 800d5f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d5f8:	eeb4 6b47 	vcmp.f64	d6, d7
 800d5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d600:	bf18      	it	ne
 800d602:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d606:	f1b8 0f16 	cmp.w	r8, #22
 800d60a:	d82b      	bhi.n	800d664 <_dtoa_r+0x1a4>
 800d60c:	495e      	ldr	r1, [pc, #376]	@ (800d788 <_dtoa_r+0x2c8>)
 800d60e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d612:	ed91 7b00 	vldr	d7, [r1]
 800d616:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d61e:	d501      	bpl.n	800d624 <_dtoa_r+0x164>
 800d620:	f108 38ff 	add.w	r8, r8, #4294967295
 800d624:	2100      	movs	r1, #0
 800d626:	e01e      	b.n	800d666 <_dtoa_r+0x1a6>
 800d628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d62a:	4413      	add	r3, r2
 800d62c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d630:	2920      	cmp	r1, #32
 800d632:	bfc1      	itttt	gt
 800d634:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d638:	408e      	lslgt	r6, r1
 800d63a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d63e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d642:	bfd6      	itet	le
 800d644:	f1c1 0120 	rsble	r1, r1, #32
 800d648:	4331      	orrgt	r1, r6
 800d64a:	fa04 f101 	lslle.w	r1, r4, r1
 800d64e:	ee07 1a90 	vmov	s15, r1
 800d652:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d656:	3b01      	subs	r3, #1
 800d658:	ee17 1a90 	vmov	r1, s15
 800d65c:	2501      	movs	r5, #1
 800d65e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d662:	e7a8      	b.n	800d5b6 <_dtoa_r+0xf6>
 800d664:	2101      	movs	r1, #1
 800d666:	1ad2      	subs	r2, r2, r3
 800d668:	1e53      	subs	r3, r2, #1
 800d66a:	9306      	str	r3, [sp, #24]
 800d66c:	bf45      	ittet	mi
 800d66e:	f1c2 0301 	rsbmi	r3, r2, #1
 800d672:	9305      	strmi	r3, [sp, #20]
 800d674:	2300      	movpl	r3, #0
 800d676:	2300      	movmi	r3, #0
 800d678:	bf4c      	ite	mi
 800d67a:	9306      	strmi	r3, [sp, #24]
 800d67c:	9305      	strpl	r3, [sp, #20]
 800d67e:	f1b8 0f00 	cmp.w	r8, #0
 800d682:	910c      	str	r1, [sp, #48]	@ 0x30
 800d684:	db18      	blt.n	800d6b8 <_dtoa_r+0x1f8>
 800d686:	9b06      	ldr	r3, [sp, #24]
 800d688:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d68c:	4443      	add	r3, r8
 800d68e:	9306      	str	r3, [sp, #24]
 800d690:	2300      	movs	r3, #0
 800d692:	9a07      	ldr	r2, [sp, #28]
 800d694:	2a09      	cmp	r2, #9
 800d696:	d849      	bhi.n	800d72c <_dtoa_r+0x26c>
 800d698:	2a05      	cmp	r2, #5
 800d69a:	bfc4      	itt	gt
 800d69c:	3a04      	subgt	r2, #4
 800d69e:	9207      	strgt	r2, [sp, #28]
 800d6a0:	9a07      	ldr	r2, [sp, #28]
 800d6a2:	f1a2 0202 	sub.w	r2, r2, #2
 800d6a6:	bfcc      	ite	gt
 800d6a8:	2400      	movgt	r4, #0
 800d6aa:	2401      	movle	r4, #1
 800d6ac:	2a03      	cmp	r2, #3
 800d6ae:	d848      	bhi.n	800d742 <_dtoa_r+0x282>
 800d6b0:	e8df f002 	tbb	[pc, r2]
 800d6b4:	3a2c2e0b 	.word	0x3a2c2e0b
 800d6b8:	9b05      	ldr	r3, [sp, #20]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	eba3 0308 	sub.w	r3, r3, r8
 800d6c0:	9305      	str	r3, [sp, #20]
 800d6c2:	920a      	str	r2, [sp, #40]	@ 0x28
 800d6c4:	f1c8 0300 	rsb	r3, r8, #0
 800d6c8:	e7e3      	b.n	800d692 <_dtoa_r+0x1d2>
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	9208      	str	r2, [sp, #32]
 800d6ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6d0:	2a00      	cmp	r2, #0
 800d6d2:	dc39      	bgt.n	800d748 <_dtoa_r+0x288>
 800d6d4:	f04f 0b01 	mov.w	fp, #1
 800d6d8:	46da      	mov	sl, fp
 800d6da:	465a      	mov	r2, fp
 800d6dc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d6e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d6e4:	2100      	movs	r1, #0
 800d6e6:	2004      	movs	r0, #4
 800d6e8:	f100 0614 	add.w	r6, r0, #20
 800d6ec:	4296      	cmp	r6, r2
 800d6ee:	d930      	bls.n	800d752 <_dtoa_r+0x292>
 800d6f0:	6079      	str	r1, [r7, #4]
 800d6f2:	4648      	mov	r0, r9
 800d6f4:	9304      	str	r3, [sp, #16]
 800d6f6:	f000 fd39 	bl	800e16c <_Balloc>
 800d6fa:	9b04      	ldr	r3, [sp, #16]
 800d6fc:	4607      	mov	r7, r0
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d146      	bne.n	800d790 <_dtoa_r+0x2d0>
 800d702:	4b22      	ldr	r3, [pc, #136]	@ (800d78c <_dtoa_r+0x2cc>)
 800d704:	4602      	mov	r2, r0
 800d706:	f240 11af 	movw	r1, #431	@ 0x1af
 800d70a:	e6f2      	b.n	800d4f2 <_dtoa_r+0x32>
 800d70c:	2201      	movs	r2, #1
 800d70e:	e7dd      	b.n	800d6cc <_dtoa_r+0x20c>
 800d710:	2200      	movs	r2, #0
 800d712:	9208      	str	r2, [sp, #32]
 800d714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d716:	eb08 0b02 	add.w	fp, r8, r2
 800d71a:	f10b 0a01 	add.w	sl, fp, #1
 800d71e:	4652      	mov	r2, sl
 800d720:	2a01      	cmp	r2, #1
 800d722:	bfb8      	it	lt
 800d724:	2201      	movlt	r2, #1
 800d726:	e7db      	b.n	800d6e0 <_dtoa_r+0x220>
 800d728:	2201      	movs	r2, #1
 800d72a:	e7f2      	b.n	800d712 <_dtoa_r+0x252>
 800d72c:	2401      	movs	r4, #1
 800d72e:	2200      	movs	r2, #0
 800d730:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d734:	f04f 3bff 	mov.w	fp, #4294967295
 800d738:	2100      	movs	r1, #0
 800d73a:	46da      	mov	sl, fp
 800d73c:	2212      	movs	r2, #18
 800d73e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d740:	e7ce      	b.n	800d6e0 <_dtoa_r+0x220>
 800d742:	2201      	movs	r2, #1
 800d744:	9208      	str	r2, [sp, #32]
 800d746:	e7f5      	b.n	800d734 <_dtoa_r+0x274>
 800d748:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800d74c:	46da      	mov	sl, fp
 800d74e:	465a      	mov	r2, fp
 800d750:	e7c6      	b.n	800d6e0 <_dtoa_r+0x220>
 800d752:	3101      	adds	r1, #1
 800d754:	0040      	lsls	r0, r0, #1
 800d756:	e7c7      	b.n	800d6e8 <_dtoa_r+0x228>
 800d758:	636f4361 	.word	0x636f4361
 800d75c:	3fd287a7 	.word	0x3fd287a7
 800d760:	8b60c8b3 	.word	0x8b60c8b3
 800d764:	3fc68a28 	.word	0x3fc68a28
 800d768:	509f79fb 	.word	0x509f79fb
 800d76c:	3fd34413 	.word	0x3fd34413
 800d770:	08010966 	.word	0x08010966
 800d774:	0801097d 	.word	0x0801097d
 800d778:	7ff00000 	.word	0x7ff00000
 800d77c:	08010962 	.word	0x08010962
 800d780:	08010931 	.word	0x08010931
 800d784:	08010930 	.word	0x08010930
 800d788:	08010a78 	.word	0x08010a78
 800d78c:	080109d5 	.word	0x080109d5
 800d790:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d794:	f1ba 0f0e 	cmp.w	sl, #14
 800d798:	6010      	str	r0, [r2, #0]
 800d79a:	d86f      	bhi.n	800d87c <_dtoa_r+0x3bc>
 800d79c:	2c00      	cmp	r4, #0
 800d79e:	d06d      	beq.n	800d87c <_dtoa_r+0x3bc>
 800d7a0:	f1b8 0f00 	cmp.w	r8, #0
 800d7a4:	f340 80c2 	ble.w	800d92c <_dtoa_r+0x46c>
 800d7a8:	4aca      	ldr	r2, [pc, #808]	@ (800dad4 <_dtoa_r+0x614>)
 800d7aa:	f008 010f 	and.w	r1, r8, #15
 800d7ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d7b2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d7b6:	ed92 7b00 	vldr	d7, [r2]
 800d7ba:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d7be:	f000 80a9 	beq.w	800d914 <_dtoa_r+0x454>
 800d7c2:	4ac5      	ldr	r2, [pc, #788]	@ (800dad8 <_dtoa_r+0x618>)
 800d7c4:	ed92 6b08 	vldr	d6, [r2, #32]
 800d7c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d7cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d7d0:	f001 010f 	and.w	r1, r1, #15
 800d7d4:	2203      	movs	r2, #3
 800d7d6:	48c0      	ldr	r0, [pc, #768]	@ (800dad8 <_dtoa_r+0x618>)
 800d7d8:	2900      	cmp	r1, #0
 800d7da:	f040 809d 	bne.w	800d918 <_dtoa_r+0x458>
 800d7de:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d7e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d7e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d7ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7f0:	2900      	cmp	r1, #0
 800d7f2:	f000 80c1 	beq.w	800d978 <_dtoa_r+0x4b8>
 800d7f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d7fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d802:	f140 80b9 	bpl.w	800d978 <_dtoa_r+0x4b8>
 800d806:	f1ba 0f00 	cmp.w	sl, #0
 800d80a:	f000 80b5 	beq.w	800d978 <_dtoa_r+0x4b8>
 800d80e:	f1bb 0f00 	cmp.w	fp, #0
 800d812:	dd31      	ble.n	800d878 <_dtoa_r+0x3b8>
 800d814:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d818:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d81c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d820:	f108 31ff 	add.w	r1, r8, #4294967295
 800d824:	9104      	str	r1, [sp, #16]
 800d826:	3201      	adds	r2, #1
 800d828:	465c      	mov	r4, fp
 800d82a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d82e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d832:	ee07 2a90 	vmov	s15, r2
 800d836:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d83a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d83e:	ee15 2a90 	vmov	r2, s11
 800d842:	ec51 0b15 	vmov	r0, r1, d5
 800d846:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d84a:	2c00      	cmp	r4, #0
 800d84c:	f040 8098 	bne.w	800d980 <_dtoa_r+0x4c0>
 800d850:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d854:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d858:	ec41 0b17 	vmov	d7, r0, r1
 800d85c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d864:	f300 8261 	bgt.w	800dd2a <_dtoa_r+0x86a>
 800d868:	eeb1 7b47 	vneg.f64	d7, d7
 800d86c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d874:	f100 80f5 	bmi.w	800da62 <_dtoa_r+0x5a2>
 800d878:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d87c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d87e:	2a00      	cmp	r2, #0
 800d880:	f2c0 812c 	blt.w	800dadc <_dtoa_r+0x61c>
 800d884:	f1b8 0f0e 	cmp.w	r8, #14
 800d888:	f300 8128 	bgt.w	800dadc <_dtoa_r+0x61c>
 800d88c:	4b91      	ldr	r3, [pc, #580]	@ (800dad4 <_dtoa_r+0x614>)
 800d88e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d892:	ed93 6b00 	vldr	d6, [r3]
 800d896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d898:	2b00      	cmp	r3, #0
 800d89a:	da03      	bge.n	800d8a4 <_dtoa_r+0x3e4>
 800d89c:	f1ba 0f00 	cmp.w	sl, #0
 800d8a0:	f340 80d2 	ble.w	800da48 <_dtoa_r+0x588>
 800d8a4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d8a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8ac:	463e      	mov	r6, r7
 800d8ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d8b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d8b6:	ee15 3a10 	vmov	r3, s10
 800d8ba:	3330      	adds	r3, #48	@ 0x30
 800d8bc:	f806 3b01 	strb.w	r3, [r6], #1
 800d8c0:	1bf3      	subs	r3, r6, r7
 800d8c2:	459a      	cmp	sl, r3
 800d8c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d8c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d8cc:	f040 80f8 	bne.w	800dac0 <_dtoa_r+0x600>
 800d8d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d8d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8dc:	f300 80dd 	bgt.w	800da9a <_dtoa_r+0x5da>
 800d8e0:	eeb4 7b46 	vcmp.f64	d7, d6
 800d8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e8:	d104      	bne.n	800d8f4 <_dtoa_r+0x434>
 800d8ea:	ee15 3a10 	vmov	r3, s10
 800d8ee:	07db      	lsls	r3, r3, #31
 800d8f0:	f100 80d3 	bmi.w	800da9a <_dtoa_r+0x5da>
 800d8f4:	9901      	ldr	r1, [sp, #4]
 800d8f6:	4648      	mov	r0, r9
 800d8f8:	f000 fc78 	bl	800e1ec <_Bfree>
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d900:	7033      	strb	r3, [r6, #0]
 800d902:	f108 0301 	add.w	r3, r8, #1
 800d906:	6013      	str	r3, [r2, #0]
 800d908:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f000 8304 	beq.w	800df18 <_dtoa_r+0xa58>
 800d910:	601e      	str	r6, [r3, #0]
 800d912:	e301      	b.n	800df18 <_dtoa_r+0xa58>
 800d914:	2202      	movs	r2, #2
 800d916:	e75e      	b.n	800d7d6 <_dtoa_r+0x316>
 800d918:	07cc      	lsls	r4, r1, #31
 800d91a:	d504      	bpl.n	800d926 <_dtoa_r+0x466>
 800d91c:	ed90 6b00 	vldr	d6, [r0]
 800d920:	3201      	adds	r2, #1
 800d922:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d926:	1049      	asrs	r1, r1, #1
 800d928:	3008      	adds	r0, #8
 800d92a:	e755      	b.n	800d7d8 <_dtoa_r+0x318>
 800d92c:	d022      	beq.n	800d974 <_dtoa_r+0x4b4>
 800d92e:	f1c8 0100 	rsb	r1, r8, #0
 800d932:	4a68      	ldr	r2, [pc, #416]	@ (800dad4 <_dtoa_r+0x614>)
 800d934:	f001 000f 	and.w	r0, r1, #15
 800d938:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d93c:	ed92 7b00 	vldr	d7, [r2]
 800d940:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d944:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d948:	4863      	ldr	r0, [pc, #396]	@ (800dad8 <_dtoa_r+0x618>)
 800d94a:	1109      	asrs	r1, r1, #4
 800d94c:	2400      	movs	r4, #0
 800d94e:	2202      	movs	r2, #2
 800d950:	b929      	cbnz	r1, 800d95e <_dtoa_r+0x49e>
 800d952:	2c00      	cmp	r4, #0
 800d954:	f43f af49 	beq.w	800d7ea <_dtoa_r+0x32a>
 800d958:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d95c:	e745      	b.n	800d7ea <_dtoa_r+0x32a>
 800d95e:	07ce      	lsls	r6, r1, #31
 800d960:	d505      	bpl.n	800d96e <_dtoa_r+0x4ae>
 800d962:	ed90 6b00 	vldr	d6, [r0]
 800d966:	3201      	adds	r2, #1
 800d968:	2401      	movs	r4, #1
 800d96a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d96e:	1049      	asrs	r1, r1, #1
 800d970:	3008      	adds	r0, #8
 800d972:	e7ed      	b.n	800d950 <_dtoa_r+0x490>
 800d974:	2202      	movs	r2, #2
 800d976:	e738      	b.n	800d7ea <_dtoa_r+0x32a>
 800d978:	f8cd 8010 	str.w	r8, [sp, #16]
 800d97c:	4654      	mov	r4, sl
 800d97e:	e754      	b.n	800d82a <_dtoa_r+0x36a>
 800d980:	4a54      	ldr	r2, [pc, #336]	@ (800dad4 <_dtoa_r+0x614>)
 800d982:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d986:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d98a:	9a08      	ldr	r2, [sp, #32]
 800d98c:	ec41 0b17 	vmov	d7, r0, r1
 800d990:	443c      	add	r4, r7
 800d992:	b34a      	cbz	r2, 800d9e8 <_dtoa_r+0x528>
 800d994:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d998:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d99c:	463e      	mov	r6, r7
 800d99e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d9a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d9a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d9aa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d9ae:	ee14 2a90 	vmov	r2, s9
 800d9b2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d9b6:	3230      	adds	r2, #48	@ 0x30
 800d9b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d9bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c4:	f806 2b01 	strb.w	r2, [r6], #1
 800d9c8:	d438      	bmi.n	800da3c <_dtoa_r+0x57c>
 800d9ca:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d9ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d6:	d462      	bmi.n	800da9e <_dtoa_r+0x5de>
 800d9d8:	42a6      	cmp	r6, r4
 800d9da:	f43f af4d 	beq.w	800d878 <_dtoa_r+0x3b8>
 800d9de:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d9e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d9e6:	e7e0      	b.n	800d9aa <_dtoa_r+0x4ea>
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	463e      	mov	r6, r7
 800d9ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d9f0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d9f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d9f8:	ee14 2a90 	vmov	r2, s9
 800d9fc:	3230      	adds	r2, #48	@ 0x30
 800d9fe:	f806 2b01 	strb.w	r2, [r6], #1
 800da02:	42a6      	cmp	r6, r4
 800da04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800da08:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da0c:	d119      	bne.n	800da42 <_dtoa_r+0x582>
 800da0e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800da12:	ee37 4b05 	vadd.f64	d4, d7, d5
 800da16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800da1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1e:	dc3e      	bgt.n	800da9e <_dtoa_r+0x5de>
 800da20:	ee35 5b47 	vsub.f64	d5, d5, d7
 800da24:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800da28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da2c:	f57f af24 	bpl.w	800d878 <_dtoa_r+0x3b8>
 800da30:	460e      	mov	r6, r1
 800da32:	3901      	subs	r1, #1
 800da34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da38:	2b30      	cmp	r3, #48	@ 0x30
 800da3a:	d0f9      	beq.n	800da30 <_dtoa_r+0x570>
 800da3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800da40:	e758      	b.n	800d8f4 <_dtoa_r+0x434>
 800da42:	ee26 6b03 	vmul.f64	d6, d6, d3
 800da46:	e7d5      	b.n	800d9f4 <_dtoa_r+0x534>
 800da48:	d10b      	bne.n	800da62 <_dtoa_r+0x5a2>
 800da4a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800da4e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800da52:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5e:	f2c0 8161 	blt.w	800dd24 <_dtoa_r+0x864>
 800da62:	2400      	movs	r4, #0
 800da64:	4625      	mov	r5, r4
 800da66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da68:	43db      	mvns	r3, r3
 800da6a:	9304      	str	r3, [sp, #16]
 800da6c:	463e      	mov	r6, r7
 800da6e:	f04f 0800 	mov.w	r8, #0
 800da72:	4621      	mov	r1, r4
 800da74:	4648      	mov	r0, r9
 800da76:	f000 fbb9 	bl	800e1ec <_Bfree>
 800da7a:	2d00      	cmp	r5, #0
 800da7c:	d0de      	beq.n	800da3c <_dtoa_r+0x57c>
 800da7e:	f1b8 0f00 	cmp.w	r8, #0
 800da82:	d005      	beq.n	800da90 <_dtoa_r+0x5d0>
 800da84:	45a8      	cmp	r8, r5
 800da86:	d003      	beq.n	800da90 <_dtoa_r+0x5d0>
 800da88:	4641      	mov	r1, r8
 800da8a:	4648      	mov	r0, r9
 800da8c:	f000 fbae 	bl	800e1ec <_Bfree>
 800da90:	4629      	mov	r1, r5
 800da92:	4648      	mov	r0, r9
 800da94:	f000 fbaa 	bl	800e1ec <_Bfree>
 800da98:	e7d0      	b.n	800da3c <_dtoa_r+0x57c>
 800da9a:	f8cd 8010 	str.w	r8, [sp, #16]
 800da9e:	4633      	mov	r3, r6
 800daa0:	461e      	mov	r6, r3
 800daa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800daa6:	2a39      	cmp	r2, #57	@ 0x39
 800daa8:	d106      	bne.n	800dab8 <_dtoa_r+0x5f8>
 800daaa:	429f      	cmp	r7, r3
 800daac:	d1f8      	bne.n	800daa0 <_dtoa_r+0x5e0>
 800daae:	9a04      	ldr	r2, [sp, #16]
 800dab0:	3201      	adds	r2, #1
 800dab2:	9204      	str	r2, [sp, #16]
 800dab4:	2230      	movs	r2, #48	@ 0x30
 800dab6:	703a      	strb	r2, [r7, #0]
 800dab8:	781a      	ldrb	r2, [r3, #0]
 800daba:	3201      	adds	r2, #1
 800dabc:	701a      	strb	r2, [r3, #0]
 800dabe:	e7bd      	b.n	800da3c <_dtoa_r+0x57c>
 800dac0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dac4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dacc:	f47f aeef 	bne.w	800d8ae <_dtoa_r+0x3ee>
 800dad0:	e710      	b.n	800d8f4 <_dtoa_r+0x434>
 800dad2:	bf00      	nop
 800dad4:	08010a78 	.word	0x08010a78
 800dad8:	08010a50 	.word	0x08010a50
 800dadc:	9908      	ldr	r1, [sp, #32]
 800dade:	2900      	cmp	r1, #0
 800dae0:	f000 80e3 	beq.w	800dcaa <_dtoa_r+0x7ea>
 800dae4:	9907      	ldr	r1, [sp, #28]
 800dae6:	2901      	cmp	r1, #1
 800dae8:	f300 80c8 	bgt.w	800dc7c <_dtoa_r+0x7bc>
 800daec:	2d00      	cmp	r5, #0
 800daee:	f000 80c1 	beq.w	800dc74 <_dtoa_r+0x7b4>
 800daf2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800daf6:	9e05      	ldr	r6, [sp, #20]
 800daf8:	461c      	mov	r4, r3
 800dafa:	9304      	str	r3, [sp, #16]
 800dafc:	9b05      	ldr	r3, [sp, #20]
 800dafe:	4413      	add	r3, r2
 800db00:	9305      	str	r3, [sp, #20]
 800db02:	9b06      	ldr	r3, [sp, #24]
 800db04:	2101      	movs	r1, #1
 800db06:	4413      	add	r3, r2
 800db08:	4648      	mov	r0, r9
 800db0a:	9306      	str	r3, [sp, #24]
 800db0c:	f000 fc6c 	bl	800e3e8 <__i2b>
 800db10:	9b04      	ldr	r3, [sp, #16]
 800db12:	4605      	mov	r5, r0
 800db14:	b166      	cbz	r6, 800db30 <_dtoa_r+0x670>
 800db16:	9a06      	ldr	r2, [sp, #24]
 800db18:	2a00      	cmp	r2, #0
 800db1a:	dd09      	ble.n	800db30 <_dtoa_r+0x670>
 800db1c:	42b2      	cmp	r2, r6
 800db1e:	9905      	ldr	r1, [sp, #20]
 800db20:	bfa8      	it	ge
 800db22:	4632      	movge	r2, r6
 800db24:	1a89      	subs	r1, r1, r2
 800db26:	9105      	str	r1, [sp, #20]
 800db28:	9906      	ldr	r1, [sp, #24]
 800db2a:	1ab6      	subs	r6, r6, r2
 800db2c:	1a8a      	subs	r2, r1, r2
 800db2e:	9206      	str	r2, [sp, #24]
 800db30:	b1fb      	cbz	r3, 800db72 <_dtoa_r+0x6b2>
 800db32:	9a08      	ldr	r2, [sp, #32]
 800db34:	2a00      	cmp	r2, #0
 800db36:	f000 80bc 	beq.w	800dcb2 <_dtoa_r+0x7f2>
 800db3a:	b19c      	cbz	r4, 800db64 <_dtoa_r+0x6a4>
 800db3c:	4629      	mov	r1, r5
 800db3e:	4622      	mov	r2, r4
 800db40:	4648      	mov	r0, r9
 800db42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db44:	f000 fd10 	bl	800e568 <__pow5mult>
 800db48:	9a01      	ldr	r2, [sp, #4]
 800db4a:	4601      	mov	r1, r0
 800db4c:	4605      	mov	r5, r0
 800db4e:	4648      	mov	r0, r9
 800db50:	f000 fc60 	bl	800e414 <__multiply>
 800db54:	9901      	ldr	r1, [sp, #4]
 800db56:	9004      	str	r0, [sp, #16]
 800db58:	4648      	mov	r0, r9
 800db5a:	f000 fb47 	bl	800e1ec <_Bfree>
 800db5e:	9a04      	ldr	r2, [sp, #16]
 800db60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db62:	9201      	str	r2, [sp, #4]
 800db64:	1b1a      	subs	r2, r3, r4
 800db66:	d004      	beq.n	800db72 <_dtoa_r+0x6b2>
 800db68:	9901      	ldr	r1, [sp, #4]
 800db6a:	4648      	mov	r0, r9
 800db6c:	f000 fcfc 	bl	800e568 <__pow5mult>
 800db70:	9001      	str	r0, [sp, #4]
 800db72:	2101      	movs	r1, #1
 800db74:	4648      	mov	r0, r9
 800db76:	f000 fc37 	bl	800e3e8 <__i2b>
 800db7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db7c:	4604      	mov	r4, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 81d0 	beq.w	800df24 <_dtoa_r+0xa64>
 800db84:	461a      	mov	r2, r3
 800db86:	4601      	mov	r1, r0
 800db88:	4648      	mov	r0, r9
 800db8a:	f000 fced 	bl	800e568 <__pow5mult>
 800db8e:	9b07      	ldr	r3, [sp, #28]
 800db90:	2b01      	cmp	r3, #1
 800db92:	4604      	mov	r4, r0
 800db94:	f300 8095 	bgt.w	800dcc2 <_dtoa_r+0x802>
 800db98:	9b02      	ldr	r3, [sp, #8]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f040 808b 	bne.w	800dcb6 <_dtoa_r+0x7f6>
 800dba0:	9b03      	ldr	r3, [sp, #12]
 800dba2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dba6:	2a00      	cmp	r2, #0
 800dba8:	f040 8087 	bne.w	800dcba <_dtoa_r+0x7fa>
 800dbac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dbb0:	0d12      	lsrs	r2, r2, #20
 800dbb2:	0512      	lsls	r2, r2, #20
 800dbb4:	2a00      	cmp	r2, #0
 800dbb6:	f000 8082 	beq.w	800dcbe <_dtoa_r+0x7fe>
 800dbba:	9b05      	ldr	r3, [sp, #20]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	9305      	str	r3, [sp, #20]
 800dbc0:	9b06      	ldr	r3, [sp, #24]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	9306      	str	r3, [sp, #24]
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f000 81af 	beq.w	800df30 <_dtoa_r+0xa70>
 800dbd2:	6922      	ldr	r2, [r4, #16]
 800dbd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dbd8:	6910      	ldr	r0, [r2, #16]
 800dbda:	f000 fbb9 	bl	800e350 <__hi0bits>
 800dbde:	f1c0 0020 	rsb	r0, r0, #32
 800dbe2:	9b06      	ldr	r3, [sp, #24]
 800dbe4:	4418      	add	r0, r3
 800dbe6:	f010 001f 	ands.w	r0, r0, #31
 800dbea:	d076      	beq.n	800dcda <_dtoa_r+0x81a>
 800dbec:	f1c0 0220 	rsb	r2, r0, #32
 800dbf0:	2a04      	cmp	r2, #4
 800dbf2:	dd69      	ble.n	800dcc8 <_dtoa_r+0x808>
 800dbf4:	9b05      	ldr	r3, [sp, #20]
 800dbf6:	f1c0 001c 	rsb	r0, r0, #28
 800dbfa:	4403      	add	r3, r0
 800dbfc:	9305      	str	r3, [sp, #20]
 800dbfe:	9b06      	ldr	r3, [sp, #24]
 800dc00:	4406      	add	r6, r0
 800dc02:	4403      	add	r3, r0
 800dc04:	9306      	str	r3, [sp, #24]
 800dc06:	9b05      	ldr	r3, [sp, #20]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	dd05      	ble.n	800dc18 <_dtoa_r+0x758>
 800dc0c:	9901      	ldr	r1, [sp, #4]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	4648      	mov	r0, r9
 800dc12:	f000 fd03 	bl	800e61c <__lshift>
 800dc16:	9001      	str	r0, [sp, #4]
 800dc18:	9b06      	ldr	r3, [sp, #24]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	dd05      	ble.n	800dc2a <_dtoa_r+0x76a>
 800dc1e:	4621      	mov	r1, r4
 800dc20:	461a      	mov	r2, r3
 800dc22:	4648      	mov	r0, r9
 800dc24:	f000 fcfa 	bl	800e61c <__lshift>
 800dc28:	4604      	mov	r4, r0
 800dc2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d056      	beq.n	800dcde <_dtoa_r+0x81e>
 800dc30:	9801      	ldr	r0, [sp, #4]
 800dc32:	4621      	mov	r1, r4
 800dc34:	f000 fd5e 	bl	800e6f4 <__mcmp>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	da50      	bge.n	800dcde <_dtoa_r+0x81e>
 800dc3c:	f108 33ff 	add.w	r3, r8, #4294967295
 800dc40:	9304      	str	r3, [sp, #16]
 800dc42:	9901      	ldr	r1, [sp, #4]
 800dc44:	2300      	movs	r3, #0
 800dc46:	220a      	movs	r2, #10
 800dc48:	4648      	mov	r0, r9
 800dc4a:	f000 faf1 	bl	800e230 <__multadd>
 800dc4e:	9b08      	ldr	r3, [sp, #32]
 800dc50:	9001      	str	r0, [sp, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 816e 	beq.w	800df34 <_dtoa_r+0xa74>
 800dc58:	4629      	mov	r1, r5
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	220a      	movs	r2, #10
 800dc5e:	4648      	mov	r0, r9
 800dc60:	f000 fae6 	bl	800e230 <__multadd>
 800dc64:	f1bb 0f00 	cmp.w	fp, #0
 800dc68:	4605      	mov	r5, r0
 800dc6a:	dc64      	bgt.n	800dd36 <_dtoa_r+0x876>
 800dc6c:	9b07      	ldr	r3, [sp, #28]
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	dc3e      	bgt.n	800dcf0 <_dtoa_r+0x830>
 800dc72:	e060      	b.n	800dd36 <_dtoa_r+0x876>
 800dc74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dc7a:	e73c      	b.n	800daf6 <_dtoa_r+0x636>
 800dc7c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800dc80:	42a3      	cmp	r3, r4
 800dc82:	bfbf      	itttt	lt
 800dc84:	1ae2      	sublt	r2, r4, r3
 800dc86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dc88:	189b      	addlt	r3, r3, r2
 800dc8a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800dc8c:	bfae      	itee	ge
 800dc8e:	1b1c      	subge	r4, r3, r4
 800dc90:	4623      	movlt	r3, r4
 800dc92:	2400      	movlt	r4, #0
 800dc94:	f1ba 0f00 	cmp.w	sl, #0
 800dc98:	bfb5      	itete	lt
 800dc9a:	9a05      	ldrlt	r2, [sp, #20]
 800dc9c:	9e05      	ldrge	r6, [sp, #20]
 800dc9e:	eba2 060a 	sublt.w	r6, r2, sl
 800dca2:	4652      	movge	r2, sl
 800dca4:	bfb8      	it	lt
 800dca6:	2200      	movlt	r2, #0
 800dca8:	e727      	b.n	800dafa <_dtoa_r+0x63a>
 800dcaa:	9e05      	ldr	r6, [sp, #20]
 800dcac:	9d08      	ldr	r5, [sp, #32]
 800dcae:	461c      	mov	r4, r3
 800dcb0:	e730      	b.n	800db14 <_dtoa_r+0x654>
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	e758      	b.n	800db68 <_dtoa_r+0x6a8>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	e786      	b.n	800dbc8 <_dtoa_r+0x708>
 800dcba:	9b02      	ldr	r3, [sp, #8]
 800dcbc:	e784      	b.n	800dbc8 <_dtoa_r+0x708>
 800dcbe:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dcc0:	e783      	b.n	800dbca <_dtoa_r+0x70a>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcc6:	e784      	b.n	800dbd2 <_dtoa_r+0x712>
 800dcc8:	d09d      	beq.n	800dc06 <_dtoa_r+0x746>
 800dcca:	9b05      	ldr	r3, [sp, #20]
 800dccc:	321c      	adds	r2, #28
 800dcce:	4413      	add	r3, r2
 800dcd0:	9305      	str	r3, [sp, #20]
 800dcd2:	9b06      	ldr	r3, [sp, #24]
 800dcd4:	4416      	add	r6, r2
 800dcd6:	4413      	add	r3, r2
 800dcd8:	e794      	b.n	800dc04 <_dtoa_r+0x744>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	e7f5      	b.n	800dcca <_dtoa_r+0x80a>
 800dcde:	f1ba 0f00 	cmp.w	sl, #0
 800dce2:	f8cd 8010 	str.w	r8, [sp, #16]
 800dce6:	46d3      	mov	fp, sl
 800dce8:	dc21      	bgt.n	800dd2e <_dtoa_r+0x86e>
 800dcea:	9b07      	ldr	r3, [sp, #28]
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	dd1e      	ble.n	800dd2e <_dtoa_r+0x86e>
 800dcf0:	f1bb 0f00 	cmp.w	fp, #0
 800dcf4:	f47f aeb7 	bne.w	800da66 <_dtoa_r+0x5a6>
 800dcf8:	4621      	mov	r1, r4
 800dcfa:	465b      	mov	r3, fp
 800dcfc:	2205      	movs	r2, #5
 800dcfe:	4648      	mov	r0, r9
 800dd00:	f000 fa96 	bl	800e230 <__multadd>
 800dd04:	4601      	mov	r1, r0
 800dd06:	4604      	mov	r4, r0
 800dd08:	9801      	ldr	r0, [sp, #4]
 800dd0a:	f000 fcf3 	bl	800e6f4 <__mcmp>
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	f77f aea9 	ble.w	800da66 <_dtoa_r+0x5a6>
 800dd14:	463e      	mov	r6, r7
 800dd16:	2331      	movs	r3, #49	@ 0x31
 800dd18:	f806 3b01 	strb.w	r3, [r6], #1
 800dd1c:	9b04      	ldr	r3, [sp, #16]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	9304      	str	r3, [sp, #16]
 800dd22:	e6a4      	b.n	800da6e <_dtoa_r+0x5ae>
 800dd24:	f8cd 8010 	str.w	r8, [sp, #16]
 800dd28:	4654      	mov	r4, sl
 800dd2a:	4625      	mov	r5, r4
 800dd2c:	e7f2      	b.n	800dd14 <_dtoa_r+0x854>
 800dd2e:	9b08      	ldr	r3, [sp, #32]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f000 8103 	beq.w	800df3c <_dtoa_r+0xa7c>
 800dd36:	2e00      	cmp	r6, #0
 800dd38:	dd05      	ble.n	800dd46 <_dtoa_r+0x886>
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	4632      	mov	r2, r6
 800dd3e:	4648      	mov	r0, r9
 800dd40:	f000 fc6c 	bl	800e61c <__lshift>
 800dd44:	4605      	mov	r5, r0
 800dd46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d058      	beq.n	800ddfe <_dtoa_r+0x93e>
 800dd4c:	6869      	ldr	r1, [r5, #4]
 800dd4e:	4648      	mov	r0, r9
 800dd50:	f000 fa0c 	bl	800e16c <_Balloc>
 800dd54:	4606      	mov	r6, r0
 800dd56:	b928      	cbnz	r0, 800dd64 <_dtoa_r+0x8a4>
 800dd58:	4b82      	ldr	r3, [pc, #520]	@ (800df64 <_dtoa_r+0xaa4>)
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dd60:	f7ff bbc7 	b.w	800d4f2 <_dtoa_r+0x32>
 800dd64:	692a      	ldr	r2, [r5, #16]
 800dd66:	3202      	adds	r2, #2
 800dd68:	0092      	lsls	r2, r2, #2
 800dd6a:	f105 010c 	add.w	r1, r5, #12
 800dd6e:	300c      	adds	r0, #12
 800dd70:	f7ff fb07 	bl	800d382 <memcpy>
 800dd74:	2201      	movs	r2, #1
 800dd76:	4631      	mov	r1, r6
 800dd78:	4648      	mov	r0, r9
 800dd7a:	f000 fc4f 	bl	800e61c <__lshift>
 800dd7e:	1c7b      	adds	r3, r7, #1
 800dd80:	9305      	str	r3, [sp, #20]
 800dd82:	eb07 030b 	add.w	r3, r7, fp
 800dd86:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd88:	9b02      	ldr	r3, [sp, #8]
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	46a8      	mov	r8, r5
 800dd90:	9308      	str	r3, [sp, #32]
 800dd92:	4605      	mov	r5, r0
 800dd94:	9b05      	ldr	r3, [sp, #20]
 800dd96:	9801      	ldr	r0, [sp, #4]
 800dd98:	4621      	mov	r1, r4
 800dd9a:	f103 3bff 	add.w	fp, r3, #4294967295
 800dd9e:	f7ff fb05 	bl	800d3ac <quorem>
 800dda2:	4641      	mov	r1, r8
 800dda4:	9002      	str	r0, [sp, #8]
 800dda6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ddaa:	9801      	ldr	r0, [sp, #4]
 800ddac:	f000 fca2 	bl	800e6f4 <__mcmp>
 800ddb0:	462a      	mov	r2, r5
 800ddb2:	9006      	str	r0, [sp, #24]
 800ddb4:	4621      	mov	r1, r4
 800ddb6:	4648      	mov	r0, r9
 800ddb8:	f000 fcb8 	bl	800e72c <__mdiff>
 800ddbc:	68c2      	ldr	r2, [r0, #12]
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	b9fa      	cbnz	r2, 800de02 <_dtoa_r+0x942>
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	9801      	ldr	r0, [sp, #4]
 800ddc6:	f000 fc95 	bl	800e6f4 <__mcmp>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	4631      	mov	r1, r6
 800ddce:	4648      	mov	r0, r9
 800ddd0:	920a      	str	r2, [sp, #40]	@ 0x28
 800ddd2:	f000 fa0b 	bl	800e1ec <_Bfree>
 800ddd6:	9b07      	ldr	r3, [sp, #28]
 800ddd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ddda:	9e05      	ldr	r6, [sp, #20]
 800dddc:	ea43 0102 	orr.w	r1, r3, r2
 800dde0:	9b08      	ldr	r3, [sp, #32]
 800dde2:	4319      	orrs	r1, r3
 800dde4:	d10f      	bne.n	800de06 <_dtoa_r+0x946>
 800dde6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ddea:	d028      	beq.n	800de3e <_dtoa_r+0x97e>
 800ddec:	9b06      	ldr	r3, [sp, #24]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	dd02      	ble.n	800ddf8 <_dtoa_r+0x938>
 800ddf2:	9b02      	ldr	r3, [sp, #8]
 800ddf4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800ddf8:	f88b a000 	strb.w	sl, [fp]
 800ddfc:	e639      	b.n	800da72 <_dtoa_r+0x5b2>
 800ddfe:	4628      	mov	r0, r5
 800de00:	e7bd      	b.n	800dd7e <_dtoa_r+0x8be>
 800de02:	2201      	movs	r2, #1
 800de04:	e7e2      	b.n	800ddcc <_dtoa_r+0x90c>
 800de06:	9b06      	ldr	r3, [sp, #24]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	db04      	blt.n	800de16 <_dtoa_r+0x956>
 800de0c:	9907      	ldr	r1, [sp, #28]
 800de0e:	430b      	orrs	r3, r1
 800de10:	9908      	ldr	r1, [sp, #32]
 800de12:	430b      	orrs	r3, r1
 800de14:	d120      	bne.n	800de58 <_dtoa_r+0x998>
 800de16:	2a00      	cmp	r2, #0
 800de18:	ddee      	ble.n	800ddf8 <_dtoa_r+0x938>
 800de1a:	9901      	ldr	r1, [sp, #4]
 800de1c:	2201      	movs	r2, #1
 800de1e:	4648      	mov	r0, r9
 800de20:	f000 fbfc 	bl	800e61c <__lshift>
 800de24:	4621      	mov	r1, r4
 800de26:	9001      	str	r0, [sp, #4]
 800de28:	f000 fc64 	bl	800e6f4 <__mcmp>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	dc03      	bgt.n	800de38 <_dtoa_r+0x978>
 800de30:	d1e2      	bne.n	800ddf8 <_dtoa_r+0x938>
 800de32:	f01a 0f01 	tst.w	sl, #1
 800de36:	d0df      	beq.n	800ddf8 <_dtoa_r+0x938>
 800de38:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800de3c:	d1d9      	bne.n	800ddf2 <_dtoa_r+0x932>
 800de3e:	2339      	movs	r3, #57	@ 0x39
 800de40:	f88b 3000 	strb.w	r3, [fp]
 800de44:	4633      	mov	r3, r6
 800de46:	461e      	mov	r6, r3
 800de48:	3b01      	subs	r3, #1
 800de4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800de4e:	2a39      	cmp	r2, #57	@ 0x39
 800de50:	d053      	beq.n	800defa <_dtoa_r+0xa3a>
 800de52:	3201      	adds	r2, #1
 800de54:	701a      	strb	r2, [r3, #0]
 800de56:	e60c      	b.n	800da72 <_dtoa_r+0x5b2>
 800de58:	2a00      	cmp	r2, #0
 800de5a:	dd07      	ble.n	800de6c <_dtoa_r+0x9ac>
 800de5c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800de60:	d0ed      	beq.n	800de3e <_dtoa_r+0x97e>
 800de62:	f10a 0301 	add.w	r3, sl, #1
 800de66:	f88b 3000 	strb.w	r3, [fp]
 800de6a:	e602      	b.n	800da72 <_dtoa_r+0x5b2>
 800de6c:	9b05      	ldr	r3, [sp, #20]
 800de6e:	9a05      	ldr	r2, [sp, #20]
 800de70:	f803 ac01 	strb.w	sl, [r3, #-1]
 800de74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de76:	4293      	cmp	r3, r2
 800de78:	d029      	beq.n	800dece <_dtoa_r+0xa0e>
 800de7a:	9901      	ldr	r1, [sp, #4]
 800de7c:	2300      	movs	r3, #0
 800de7e:	220a      	movs	r2, #10
 800de80:	4648      	mov	r0, r9
 800de82:	f000 f9d5 	bl	800e230 <__multadd>
 800de86:	45a8      	cmp	r8, r5
 800de88:	9001      	str	r0, [sp, #4]
 800de8a:	f04f 0300 	mov.w	r3, #0
 800de8e:	f04f 020a 	mov.w	r2, #10
 800de92:	4641      	mov	r1, r8
 800de94:	4648      	mov	r0, r9
 800de96:	d107      	bne.n	800dea8 <_dtoa_r+0x9e8>
 800de98:	f000 f9ca 	bl	800e230 <__multadd>
 800de9c:	4680      	mov	r8, r0
 800de9e:	4605      	mov	r5, r0
 800dea0:	9b05      	ldr	r3, [sp, #20]
 800dea2:	3301      	adds	r3, #1
 800dea4:	9305      	str	r3, [sp, #20]
 800dea6:	e775      	b.n	800dd94 <_dtoa_r+0x8d4>
 800dea8:	f000 f9c2 	bl	800e230 <__multadd>
 800deac:	4629      	mov	r1, r5
 800deae:	4680      	mov	r8, r0
 800deb0:	2300      	movs	r3, #0
 800deb2:	220a      	movs	r2, #10
 800deb4:	4648      	mov	r0, r9
 800deb6:	f000 f9bb 	bl	800e230 <__multadd>
 800deba:	4605      	mov	r5, r0
 800debc:	e7f0      	b.n	800dea0 <_dtoa_r+0x9e0>
 800debe:	f1bb 0f00 	cmp.w	fp, #0
 800dec2:	bfcc      	ite	gt
 800dec4:	465e      	movgt	r6, fp
 800dec6:	2601      	movle	r6, #1
 800dec8:	443e      	add	r6, r7
 800deca:	f04f 0800 	mov.w	r8, #0
 800dece:	9901      	ldr	r1, [sp, #4]
 800ded0:	2201      	movs	r2, #1
 800ded2:	4648      	mov	r0, r9
 800ded4:	f000 fba2 	bl	800e61c <__lshift>
 800ded8:	4621      	mov	r1, r4
 800deda:	9001      	str	r0, [sp, #4]
 800dedc:	f000 fc0a 	bl	800e6f4 <__mcmp>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	dcaf      	bgt.n	800de44 <_dtoa_r+0x984>
 800dee4:	d102      	bne.n	800deec <_dtoa_r+0xa2c>
 800dee6:	f01a 0f01 	tst.w	sl, #1
 800deea:	d1ab      	bne.n	800de44 <_dtoa_r+0x984>
 800deec:	4633      	mov	r3, r6
 800deee:	461e      	mov	r6, r3
 800def0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800def4:	2a30      	cmp	r2, #48	@ 0x30
 800def6:	d0fa      	beq.n	800deee <_dtoa_r+0xa2e>
 800def8:	e5bb      	b.n	800da72 <_dtoa_r+0x5b2>
 800defa:	429f      	cmp	r7, r3
 800defc:	d1a3      	bne.n	800de46 <_dtoa_r+0x986>
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	3301      	adds	r3, #1
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	2331      	movs	r3, #49	@ 0x31
 800df06:	703b      	strb	r3, [r7, #0]
 800df08:	e5b3      	b.n	800da72 <_dtoa_r+0x5b2>
 800df0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800df0c:	4f16      	ldr	r7, [pc, #88]	@ (800df68 <_dtoa_r+0xaa8>)
 800df0e:	b11b      	cbz	r3, 800df18 <_dtoa_r+0xa58>
 800df10:	f107 0308 	add.w	r3, r7, #8
 800df14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800df16:	6013      	str	r3, [r2, #0]
 800df18:	4638      	mov	r0, r7
 800df1a:	b011      	add	sp, #68	@ 0x44
 800df1c:	ecbd 8b02 	vpop	{d8}
 800df20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df24:	9b07      	ldr	r3, [sp, #28]
 800df26:	2b01      	cmp	r3, #1
 800df28:	f77f ae36 	ble.w	800db98 <_dtoa_r+0x6d8>
 800df2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df30:	2001      	movs	r0, #1
 800df32:	e656      	b.n	800dbe2 <_dtoa_r+0x722>
 800df34:	f1bb 0f00 	cmp.w	fp, #0
 800df38:	f77f aed7 	ble.w	800dcea <_dtoa_r+0x82a>
 800df3c:	463e      	mov	r6, r7
 800df3e:	9801      	ldr	r0, [sp, #4]
 800df40:	4621      	mov	r1, r4
 800df42:	f7ff fa33 	bl	800d3ac <quorem>
 800df46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800df4a:	f806 ab01 	strb.w	sl, [r6], #1
 800df4e:	1bf2      	subs	r2, r6, r7
 800df50:	4593      	cmp	fp, r2
 800df52:	ddb4      	ble.n	800debe <_dtoa_r+0x9fe>
 800df54:	9901      	ldr	r1, [sp, #4]
 800df56:	2300      	movs	r3, #0
 800df58:	220a      	movs	r2, #10
 800df5a:	4648      	mov	r0, r9
 800df5c:	f000 f968 	bl	800e230 <__multadd>
 800df60:	9001      	str	r0, [sp, #4]
 800df62:	e7ec      	b.n	800df3e <_dtoa_r+0xa7e>
 800df64:	080109d5 	.word	0x080109d5
 800df68:	08010959 	.word	0x08010959

0800df6c <_free_r>:
 800df6c:	b538      	push	{r3, r4, r5, lr}
 800df6e:	4605      	mov	r5, r0
 800df70:	2900      	cmp	r1, #0
 800df72:	d041      	beq.n	800dff8 <_free_r+0x8c>
 800df74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df78:	1f0c      	subs	r4, r1, #4
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	bfb8      	it	lt
 800df7e:	18e4      	addlt	r4, r4, r3
 800df80:	f000 f8e8 	bl	800e154 <__malloc_lock>
 800df84:	4a1d      	ldr	r2, [pc, #116]	@ (800dffc <_free_r+0x90>)
 800df86:	6813      	ldr	r3, [r2, #0]
 800df88:	b933      	cbnz	r3, 800df98 <_free_r+0x2c>
 800df8a:	6063      	str	r3, [r4, #4]
 800df8c:	6014      	str	r4, [r2, #0]
 800df8e:	4628      	mov	r0, r5
 800df90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df94:	f000 b8e4 	b.w	800e160 <__malloc_unlock>
 800df98:	42a3      	cmp	r3, r4
 800df9a:	d908      	bls.n	800dfae <_free_r+0x42>
 800df9c:	6820      	ldr	r0, [r4, #0]
 800df9e:	1821      	adds	r1, r4, r0
 800dfa0:	428b      	cmp	r3, r1
 800dfa2:	bf01      	itttt	eq
 800dfa4:	6819      	ldreq	r1, [r3, #0]
 800dfa6:	685b      	ldreq	r3, [r3, #4]
 800dfa8:	1809      	addeq	r1, r1, r0
 800dfaa:	6021      	streq	r1, [r4, #0]
 800dfac:	e7ed      	b.n	800df8a <_free_r+0x1e>
 800dfae:	461a      	mov	r2, r3
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	b10b      	cbz	r3, 800dfb8 <_free_r+0x4c>
 800dfb4:	42a3      	cmp	r3, r4
 800dfb6:	d9fa      	bls.n	800dfae <_free_r+0x42>
 800dfb8:	6811      	ldr	r1, [r2, #0]
 800dfba:	1850      	adds	r0, r2, r1
 800dfbc:	42a0      	cmp	r0, r4
 800dfbe:	d10b      	bne.n	800dfd8 <_free_r+0x6c>
 800dfc0:	6820      	ldr	r0, [r4, #0]
 800dfc2:	4401      	add	r1, r0
 800dfc4:	1850      	adds	r0, r2, r1
 800dfc6:	4283      	cmp	r3, r0
 800dfc8:	6011      	str	r1, [r2, #0]
 800dfca:	d1e0      	bne.n	800df8e <_free_r+0x22>
 800dfcc:	6818      	ldr	r0, [r3, #0]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	6053      	str	r3, [r2, #4]
 800dfd2:	4408      	add	r0, r1
 800dfd4:	6010      	str	r0, [r2, #0]
 800dfd6:	e7da      	b.n	800df8e <_free_r+0x22>
 800dfd8:	d902      	bls.n	800dfe0 <_free_r+0x74>
 800dfda:	230c      	movs	r3, #12
 800dfdc:	602b      	str	r3, [r5, #0]
 800dfde:	e7d6      	b.n	800df8e <_free_r+0x22>
 800dfe0:	6820      	ldr	r0, [r4, #0]
 800dfe2:	1821      	adds	r1, r4, r0
 800dfe4:	428b      	cmp	r3, r1
 800dfe6:	bf04      	itt	eq
 800dfe8:	6819      	ldreq	r1, [r3, #0]
 800dfea:	685b      	ldreq	r3, [r3, #4]
 800dfec:	6063      	str	r3, [r4, #4]
 800dfee:	bf04      	itt	eq
 800dff0:	1809      	addeq	r1, r1, r0
 800dff2:	6021      	streq	r1, [r4, #0]
 800dff4:	6054      	str	r4, [r2, #4]
 800dff6:	e7ca      	b.n	800df8e <_free_r+0x22>
 800dff8:	bd38      	pop	{r3, r4, r5, pc}
 800dffa:	bf00      	nop
 800dffc:	24000b10 	.word	0x24000b10

0800e000 <malloc>:
 800e000:	4b02      	ldr	r3, [pc, #8]	@ (800e00c <malloc+0xc>)
 800e002:	4601      	mov	r1, r0
 800e004:	6818      	ldr	r0, [r3, #0]
 800e006:	f000 b825 	b.w	800e054 <_malloc_r>
 800e00a:	bf00      	nop
 800e00c:	2400001c 	.word	0x2400001c

0800e010 <sbrk_aligned>:
 800e010:	b570      	push	{r4, r5, r6, lr}
 800e012:	4e0f      	ldr	r6, [pc, #60]	@ (800e050 <sbrk_aligned+0x40>)
 800e014:	460c      	mov	r4, r1
 800e016:	6831      	ldr	r1, [r6, #0]
 800e018:	4605      	mov	r5, r0
 800e01a:	b911      	cbnz	r1, 800e022 <sbrk_aligned+0x12>
 800e01c:	f001 ff7e 	bl	800ff1c <_sbrk_r>
 800e020:	6030      	str	r0, [r6, #0]
 800e022:	4621      	mov	r1, r4
 800e024:	4628      	mov	r0, r5
 800e026:	f001 ff79 	bl	800ff1c <_sbrk_r>
 800e02a:	1c43      	adds	r3, r0, #1
 800e02c:	d103      	bne.n	800e036 <sbrk_aligned+0x26>
 800e02e:	f04f 34ff 	mov.w	r4, #4294967295
 800e032:	4620      	mov	r0, r4
 800e034:	bd70      	pop	{r4, r5, r6, pc}
 800e036:	1cc4      	adds	r4, r0, #3
 800e038:	f024 0403 	bic.w	r4, r4, #3
 800e03c:	42a0      	cmp	r0, r4
 800e03e:	d0f8      	beq.n	800e032 <sbrk_aligned+0x22>
 800e040:	1a21      	subs	r1, r4, r0
 800e042:	4628      	mov	r0, r5
 800e044:	f001 ff6a 	bl	800ff1c <_sbrk_r>
 800e048:	3001      	adds	r0, #1
 800e04a:	d1f2      	bne.n	800e032 <sbrk_aligned+0x22>
 800e04c:	e7ef      	b.n	800e02e <sbrk_aligned+0x1e>
 800e04e:	bf00      	nop
 800e050:	24000b0c 	.word	0x24000b0c

0800e054 <_malloc_r>:
 800e054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e058:	1ccd      	adds	r5, r1, #3
 800e05a:	f025 0503 	bic.w	r5, r5, #3
 800e05e:	3508      	adds	r5, #8
 800e060:	2d0c      	cmp	r5, #12
 800e062:	bf38      	it	cc
 800e064:	250c      	movcc	r5, #12
 800e066:	2d00      	cmp	r5, #0
 800e068:	4606      	mov	r6, r0
 800e06a:	db01      	blt.n	800e070 <_malloc_r+0x1c>
 800e06c:	42a9      	cmp	r1, r5
 800e06e:	d904      	bls.n	800e07a <_malloc_r+0x26>
 800e070:	230c      	movs	r3, #12
 800e072:	6033      	str	r3, [r6, #0]
 800e074:	2000      	movs	r0, #0
 800e076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e07a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e150 <_malloc_r+0xfc>
 800e07e:	f000 f869 	bl	800e154 <__malloc_lock>
 800e082:	f8d8 3000 	ldr.w	r3, [r8]
 800e086:	461c      	mov	r4, r3
 800e088:	bb44      	cbnz	r4, 800e0dc <_malloc_r+0x88>
 800e08a:	4629      	mov	r1, r5
 800e08c:	4630      	mov	r0, r6
 800e08e:	f7ff ffbf 	bl	800e010 <sbrk_aligned>
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	4604      	mov	r4, r0
 800e096:	d158      	bne.n	800e14a <_malloc_r+0xf6>
 800e098:	f8d8 4000 	ldr.w	r4, [r8]
 800e09c:	4627      	mov	r7, r4
 800e09e:	2f00      	cmp	r7, #0
 800e0a0:	d143      	bne.n	800e12a <_malloc_r+0xd6>
 800e0a2:	2c00      	cmp	r4, #0
 800e0a4:	d04b      	beq.n	800e13e <_malloc_r+0xea>
 800e0a6:	6823      	ldr	r3, [r4, #0]
 800e0a8:	4639      	mov	r1, r7
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	eb04 0903 	add.w	r9, r4, r3
 800e0b0:	f001 ff34 	bl	800ff1c <_sbrk_r>
 800e0b4:	4581      	cmp	r9, r0
 800e0b6:	d142      	bne.n	800e13e <_malloc_r+0xea>
 800e0b8:	6821      	ldr	r1, [r4, #0]
 800e0ba:	1a6d      	subs	r5, r5, r1
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f7ff ffa6 	bl	800e010 <sbrk_aligned>
 800e0c4:	3001      	adds	r0, #1
 800e0c6:	d03a      	beq.n	800e13e <_malloc_r+0xea>
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	442b      	add	r3, r5
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e0d2:	685a      	ldr	r2, [r3, #4]
 800e0d4:	bb62      	cbnz	r2, 800e130 <_malloc_r+0xdc>
 800e0d6:	f8c8 7000 	str.w	r7, [r8]
 800e0da:	e00f      	b.n	800e0fc <_malloc_r+0xa8>
 800e0dc:	6822      	ldr	r2, [r4, #0]
 800e0de:	1b52      	subs	r2, r2, r5
 800e0e0:	d420      	bmi.n	800e124 <_malloc_r+0xd0>
 800e0e2:	2a0b      	cmp	r2, #11
 800e0e4:	d917      	bls.n	800e116 <_malloc_r+0xc2>
 800e0e6:	1961      	adds	r1, r4, r5
 800e0e8:	42a3      	cmp	r3, r4
 800e0ea:	6025      	str	r5, [r4, #0]
 800e0ec:	bf18      	it	ne
 800e0ee:	6059      	strne	r1, [r3, #4]
 800e0f0:	6863      	ldr	r3, [r4, #4]
 800e0f2:	bf08      	it	eq
 800e0f4:	f8c8 1000 	streq.w	r1, [r8]
 800e0f8:	5162      	str	r2, [r4, r5]
 800e0fa:	604b      	str	r3, [r1, #4]
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	f000 f82f 	bl	800e160 <__malloc_unlock>
 800e102:	f104 000b 	add.w	r0, r4, #11
 800e106:	1d23      	adds	r3, r4, #4
 800e108:	f020 0007 	bic.w	r0, r0, #7
 800e10c:	1ac2      	subs	r2, r0, r3
 800e10e:	bf1c      	itt	ne
 800e110:	1a1b      	subne	r3, r3, r0
 800e112:	50a3      	strne	r3, [r4, r2]
 800e114:	e7af      	b.n	800e076 <_malloc_r+0x22>
 800e116:	6862      	ldr	r2, [r4, #4]
 800e118:	42a3      	cmp	r3, r4
 800e11a:	bf0c      	ite	eq
 800e11c:	f8c8 2000 	streq.w	r2, [r8]
 800e120:	605a      	strne	r2, [r3, #4]
 800e122:	e7eb      	b.n	800e0fc <_malloc_r+0xa8>
 800e124:	4623      	mov	r3, r4
 800e126:	6864      	ldr	r4, [r4, #4]
 800e128:	e7ae      	b.n	800e088 <_malloc_r+0x34>
 800e12a:	463c      	mov	r4, r7
 800e12c:	687f      	ldr	r7, [r7, #4]
 800e12e:	e7b6      	b.n	800e09e <_malloc_r+0x4a>
 800e130:	461a      	mov	r2, r3
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	42a3      	cmp	r3, r4
 800e136:	d1fb      	bne.n	800e130 <_malloc_r+0xdc>
 800e138:	2300      	movs	r3, #0
 800e13a:	6053      	str	r3, [r2, #4]
 800e13c:	e7de      	b.n	800e0fc <_malloc_r+0xa8>
 800e13e:	230c      	movs	r3, #12
 800e140:	6033      	str	r3, [r6, #0]
 800e142:	4630      	mov	r0, r6
 800e144:	f000 f80c 	bl	800e160 <__malloc_unlock>
 800e148:	e794      	b.n	800e074 <_malloc_r+0x20>
 800e14a:	6005      	str	r5, [r0, #0]
 800e14c:	e7d6      	b.n	800e0fc <_malloc_r+0xa8>
 800e14e:	bf00      	nop
 800e150:	24000b10 	.word	0x24000b10

0800e154 <__malloc_lock>:
 800e154:	4801      	ldr	r0, [pc, #4]	@ (800e15c <__malloc_lock+0x8>)
 800e156:	f7ff b912 	b.w	800d37e <__retarget_lock_acquire_recursive>
 800e15a:	bf00      	nop
 800e15c:	24000b08 	.word	0x24000b08

0800e160 <__malloc_unlock>:
 800e160:	4801      	ldr	r0, [pc, #4]	@ (800e168 <__malloc_unlock+0x8>)
 800e162:	f7ff b90d 	b.w	800d380 <__retarget_lock_release_recursive>
 800e166:	bf00      	nop
 800e168:	24000b08 	.word	0x24000b08

0800e16c <_Balloc>:
 800e16c:	b570      	push	{r4, r5, r6, lr}
 800e16e:	69c6      	ldr	r6, [r0, #28]
 800e170:	4604      	mov	r4, r0
 800e172:	460d      	mov	r5, r1
 800e174:	b976      	cbnz	r6, 800e194 <_Balloc+0x28>
 800e176:	2010      	movs	r0, #16
 800e178:	f7ff ff42 	bl	800e000 <malloc>
 800e17c:	4602      	mov	r2, r0
 800e17e:	61e0      	str	r0, [r4, #28]
 800e180:	b920      	cbnz	r0, 800e18c <_Balloc+0x20>
 800e182:	4b18      	ldr	r3, [pc, #96]	@ (800e1e4 <_Balloc+0x78>)
 800e184:	4818      	ldr	r0, [pc, #96]	@ (800e1e8 <_Balloc+0x7c>)
 800e186:	216b      	movs	r1, #107	@ 0x6b
 800e188:	f001 fee2 	bl	800ff50 <__assert_func>
 800e18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e190:	6006      	str	r6, [r0, #0]
 800e192:	60c6      	str	r6, [r0, #12]
 800e194:	69e6      	ldr	r6, [r4, #28]
 800e196:	68f3      	ldr	r3, [r6, #12]
 800e198:	b183      	cbz	r3, 800e1bc <_Balloc+0x50>
 800e19a:	69e3      	ldr	r3, [r4, #28]
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e1a2:	b9b8      	cbnz	r0, 800e1d4 <_Balloc+0x68>
 800e1a4:	2101      	movs	r1, #1
 800e1a6:	fa01 f605 	lsl.w	r6, r1, r5
 800e1aa:	1d72      	adds	r2, r6, #5
 800e1ac:	0092      	lsls	r2, r2, #2
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f001 feec 	bl	800ff8c <_calloc_r>
 800e1b4:	b160      	cbz	r0, 800e1d0 <_Balloc+0x64>
 800e1b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e1ba:	e00e      	b.n	800e1da <_Balloc+0x6e>
 800e1bc:	2221      	movs	r2, #33	@ 0x21
 800e1be:	2104      	movs	r1, #4
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f001 fee3 	bl	800ff8c <_calloc_r>
 800e1c6:	69e3      	ldr	r3, [r4, #28]
 800e1c8:	60f0      	str	r0, [r6, #12]
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1e4      	bne.n	800e19a <_Balloc+0x2e>
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	bd70      	pop	{r4, r5, r6, pc}
 800e1d4:	6802      	ldr	r2, [r0, #0]
 800e1d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1e0:	e7f7      	b.n	800e1d2 <_Balloc+0x66>
 800e1e2:	bf00      	nop
 800e1e4:	08010966 	.word	0x08010966
 800e1e8:	080109e6 	.word	0x080109e6

0800e1ec <_Bfree>:
 800e1ec:	b570      	push	{r4, r5, r6, lr}
 800e1ee:	69c6      	ldr	r6, [r0, #28]
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	b976      	cbnz	r6, 800e214 <_Bfree+0x28>
 800e1f6:	2010      	movs	r0, #16
 800e1f8:	f7ff ff02 	bl	800e000 <malloc>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	61e8      	str	r0, [r5, #28]
 800e200:	b920      	cbnz	r0, 800e20c <_Bfree+0x20>
 800e202:	4b09      	ldr	r3, [pc, #36]	@ (800e228 <_Bfree+0x3c>)
 800e204:	4809      	ldr	r0, [pc, #36]	@ (800e22c <_Bfree+0x40>)
 800e206:	218f      	movs	r1, #143	@ 0x8f
 800e208:	f001 fea2 	bl	800ff50 <__assert_func>
 800e20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e210:	6006      	str	r6, [r0, #0]
 800e212:	60c6      	str	r6, [r0, #12]
 800e214:	b13c      	cbz	r4, 800e226 <_Bfree+0x3a>
 800e216:	69eb      	ldr	r3, [r5, #28]
 800e218:	6862      	ldr	r2, [r4, #4]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e220:	6021      	str	r1, [r4, #0]
 800e222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e226:	bd70      	pop	{r4, r5, r6, pc}
 800e228:	08010966 	.word	0x08010966
 800e22c:	080109e6 	.word	0x080109e6

0800e230 <__multadd>:
 800e230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e234:	690d      	ldr	r5, [r1, #16]
 800e236:	4607      	mov	r7, r0
 800e238:	460c      	mov	r4, r1
 800e23a:	461e      	mov	r6, r3
 800e23c:	f101 0c14 	add.w	ip, r1, #20
 800e240:	2000      	movs	r0, #0
 800e242:	f8dc 3000 	ldr.w	r3, [ip]
 800e246:	b299      	uxth	r1, r3
 800e248:	fb02 6101 	mla	r1, r2, r1, r6
 800e24c:	0c1e      	lsrs	r6, r3, #16
 800e24e:	0c0b      	lsrs	r3, r1, #16
 800e250:	fb02 3306 	mla	r3, r2, r6, r3
 800e254:	b289      	uxth	r1, r1
 800e256:	3001      	adds	r0, #1
 800e258:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e25c:	4285      	cmp	r5, r0
 800e25e:	f84c 1b04 	str.w	r1, [ip], #4
 800e262:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e266:	dcec      	bgt.n	800e242 <__multadd+0x12>
 800e268:	b30e      	cbz	r6, 800e2ae <__multadd+0x7e>
 800e26a:	68a3      	ldr	r3, [r4, #8]
 800e26c:	42ab      	cmp	r3, r5
 800e26e:	dc19      	bgt.n	800e2a4 <__multadd+0x74>
 800e270:	6861      	ldr	r1, [r4, #4]
 800e272:	4638      	mov	r0, r7
 800e274:	3101      	adds	r1, #1
 800e276:	f7ff ff79 	bl	800e16c <_Balloc>
 800e27a:	4680      	mov	r8, r0
 800e27c:	b928      	cbnz	r0, 800e28a <__multadd+0x5a>
 800e27e:	4602      	mov	r2, r0
 800e280:	4b0c      	ldr	r3, [pc, #48]	@ (800e2b4 <__multadd+0x84>)
 800e282:	480d      	ldr	r0, [pc, #52]	@ (800e2b8 <__multadd+0x88>)
 800e284:	21ba      	movs	r1, #186	@ 0xba
 800e286:	f001 fe63 	bl	800ff50 <__assert_func>
 800e28a:	6922      	ldr	r2, [r4, #16]
 800e28c:	3202      	adds	r2, #2
 800e28e:	f104 010c 	add.w	r1, r4, #12
 800e292:	0092      	lsls	r2, r2, #2
 800e294:	300c      	adds	r0, #12
 800e296:	f7ff f874 	bl	800d382 <memcpy>
 800e29a:	4621      	mov	r1, r4
 800e29c:	4638      	mov	r0, r7
 800e29e:	f7ff ffa5 	bl	800e1ec <_Bfree>
 800e2a2:	4644      	mov	r4, r8
 800e2a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2a8:	3501      	adds	r5, #1
 800e2aa:	615e      	str	r6, [r3, #20]
 800e2ac:	6125      	str	r5, [r4, #16]
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b4:	080109d5 	.word	0x080109d5
 800e2b8:	080109e6 	.word	0x080109e6

0800e2bc <__s2b>:
 800e2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	4615      	mov	r5, r2
 800e2c4:	461f      	mov	r7, r3
 800e2c6:	2209      	movs	r2, #9
 800e2c8:	3308      	adds	r3, #8
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	db09      	blt.n	800e2ec <__s2b+0x30>
 800e2d8:	4630      	mov	r0, r6
 800e2da:	f7ff ff47 	bl	800e16c <_Balloc>
 800e2de:	b940      	cbnz	r0, 800e2f2 <__s2b+0x36>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	4b19      	ldr	r3, [pc, #100]	@ (800e348 <__s2b+0x8c>)
 800e2e4:	4819      	ldr	r0, [pc, #100]	@ (800e34c <__s2b+0x90>)
 800e2e6:	21d3      	movs	r1, #211	@ 0xd3
 800e2e8:	f001 fe32 	bl	800ff50 <__assert_func>
 800e2ec:	0052      	lsls	r2, r2, #1
 800e2ee:	3101      	adds	r1, #1
 800e2f0:	e7f0      	b.n	800e2d4 <__s2b+0x18>
 800e2f2:	9b08      	ldr	r3, [sp, #32]
 800e2f4:	6143      	str	r3, [r0, #20]
 800e2f6:	2d09      	cmp	r5, #9
 800e2f8:	f04f 0301 	mov.w	r3, #1
 800e2fc:	6103      	str	r3, [r0, #16]
 800e2fe:	dd16      	ble.n	800e32e <__s2b+0x72>
 800e300:	f104 0909 	add.w	r9, r4, #9
 800e304:	46c8      	mov	r8, r9
 800e306:	442c      	add	r4, r5
 800e308:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e30c:	4601      	mov	r1, r0
 800e30e:	3b30      	subs	r3, #48	@ 0x30
 800e310:	220a      	movs	r2, #10
 800e312:	4630      	mov	r0, r6
 800e314:	f7ff ff8c 	bl	800e230 <__multadd>
 800e318:	45a0      	cmp	r8, r4
 800e31a:	d1f5      	bne.n	800e308 <__s2b+0x4c>
 800e31c:	f1a5 0408 	sub.w	r4, r5, #8
 800e320:	444c      	add	r4, r9
 800e322:	1b2d      	subs	r5, r5, r4
 800e324:	1963      	adds	r3, r4, r5
 800e326:	42bb      	cmp	r3, r7
 800e328:	db04      	blt.n	800e334 <__s2b+0x78>
 800e32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e32e:	340a      	adds	r4, #10
 800e330:	2509      	movs	r5, #9
 800e332:	e7f6      	b.n	800e322 <__s2b+0x66>
 800e334:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e338:	4601      	mov	r1, r0
 800e33a:	3b30      	subs	r3, #48	@ 0x30
 800e33c:	220a      	movs	r2, #10
 800e33e:	4630      	mov	r0, r6
 800e340:	f7ff ff76 	bl	800e230 <__multadd>
 800e344:	e7ee      	b.n	800e324 <__s2b+0x68>
 800e346:	bf00      	nop
 800e348:	080109d5 	.word	0x080109d5
 800e34c:	080109e6 	.word	0x080109e6

0800e350 <__hi0bits>:
 800e350:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e354:	4603      	mov	r3, r0
 800e356:	bf36      	itet	cc
 800e358:	0403      	lslcc	r3, r0, #16
 800e35a:	2000      	movcs	r0, #0
 800e35c:	2010      	movcc	r0, #16
 800e35e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e362:	bf3c      	itt	cc
 800e364:	021b      	lslcc	r3, r3, #8
 800e366:	3008      	addcc	r0, #8
 800e368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e36c:	bf3c      	itt	cc
 800e36e:	011b      	lslcc	r3, r3, #4
 800e370:	3004      	addcc	r0, #4
 800e372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e376:	bf3c      	itt	cc
 800e378:	009b      	lslcc	r3, r3, #2
 800e37a:	3002      	addcc	r0, #2
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	db05      	blt.n	800e38c <__hi0bits+0x3c>
 800e380:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e384:	f100 0001 	add.w	r0, r0, #1
 800e388:	bf08      	it	eq
 800e38a:	2020      	moveq	r0, #32
 800e38c:	4770      	bx	lr

0800e38e <__lo0bits>:
 800e38e:	6803      	ldr	r3, [r0, #0]
 800e390:	4602      	mov	r2, r0
 800e392:	f013 0007 	ands.w	r0, r3, #7
 800e396:	d00b      	beq.n	800e3b0 <__lo0bits+0x22>
 800e398:	07d9      	lsls	r1, r3, #31
 800e39a:	d421      	bmi.n	800e3e0 <__lo0bits+0x52>
 800e39c:	0798      	lsls	r0, r3, #30
 800e39e:	bf49      	itett	mi
 800e3a0:	085b      	lsrmi	r3, r3, #1
 800e3a2:	089b      	lsrpl	r3, r3, #2
 800e3a4:	2001      	movmi	r0, #1
 800e3a6:	6013      	strmi	r3, [r2, #0]
 800e3a8:	bf5c      	itt	pl
 800e3aa:	6013      	strpl	r3, [r2, #0]
 800e3ac:	2002      	movpl	r0, #2
 800e3ae:	4770      	bx	lr
 800e3b0:	b299      	uxth	r1, r3
 800e3b2:	b909      	cbnz	r1, 800e3b8 <__lo0bits+0x2a>
 800e3b4:	0c1b      	lsrs	r3, r3, #16
 800e3b6:	2010      	movs	r0, #16
 800e3b8:	b2d9      	uxtb	r1, r3
 800e3ba:	b909      	cbnz	r1, 800e3c0 <__lo0bits+0x32>
 800e3bc:	3008      	adds	r0, #8
 800e3be:	0a1b      	lsrs	r3, r3, #8
 800e3c0:	0719      	lsls	r1, r3, #28
 800e3c2:	bf04      	itt	eq
 800e3c4:	091b      	lsreq	r3, r3, #4
 800e3c6:	3004      	addeq	r0, #4
 800e3c8:	0799      	lsls	r1, r3, #30
 800e3ca:	bf04      	itt	eq
 800e3cc:	089b      	lsreq	r3, r3, #2
 800e3ce:	3002      	addeq	r0, #2
 800e3d0:	07d9      	lsls	r1, r3, #31
 800e3d2:	d403      	bmi.n	800e3dc <__lo0bits+0x4e>
 800e3d4:	085b      	lsrs	r3, r3, #1
 800e3d6:	f100 0001 	add.w	r0, r0, #1
 800e3da:	d003      	beq.n	800e3e4 <__lo0bits+0x56>
 800e3dc:	6013      	str	r3, [r2, #0]
 800e3de:	4770      	bx	lr
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	4770      	bx	lr
 800e3e4:	2020      	movs	r0, #32
 800e3e6:	4770      	bx	lr

0800e3e8 <__i2b>:
 800e3e8:	b510      	push	{r4, lr}
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	2101      	movs	r1, #1
 800e3ee:	f7ff febd 	bl	800e16c <_Balloc>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	b928      	cbnz	r0, 800e402 <__i2b+0x1a>
 800e3f6:	4b05      	ldr	r3, [pc, #20]	@ (800e40c <__i2b+0x24>)
 800e3f8:	4805      	ldr	r0, [pc, #20]	@ (800e410 <__i2b+0x28>)
 800e3fa:	f240 1145 	movw	r1, #325	@ 0x145
 800e3fe:	f001 fda7 	bl	800ff50 <__assert_func>
 800e402:	2301      	movs	r3, #1
 800e404:	6144      	str	r4, [r0, #20]
 800e406:	6103      	str	r3, [r0, #16]
 800e408:	bd10      	pop	{r4, pc}
 800e40a:	bf00      	nop
 800e40c:	080109d5 	.word	0x080109d5
 800e410:	080109e6 	.word	0x080109e6

0800e414 <__multiply>:
 800e414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e418:	4614      	mov	r4, r2
 800e41a:	690a      	ldr	r2, [r1, #16]
 800e41c:	6923      	ldr	r3, [r4, #16]
 800e41e:	429a      	cmp	r2, r3
 800e420:	bfa8      	it	ge
 800e422:	4623      	movge	r3, r4
 800e424:	460f      	mov	r7, r1
 800e426:	bfa4      	itt	ge
 800e428:	460c      	movge	r4, r1
 800e42a:	461f      	movge	r7, r3
 800e42c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e430:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e434:	68a3      	ldr	r3, [r4, #8]
 800e436:	6861      	ldr	r1, [r4, #4]
 800e438:	eb0a 0609 	add.w	r6, sl, r9
 800e43c:	42b3      	cmp	r3, r6
 800e43e:	b085      	sub	sp, #20
 800e440:	bfb8      	it	lt
 800e442:	3101      	addlt	r1, #1
 800e444:	f7ff fe92 	bl	800e16c <_Balloc>
 800e448:	b930      	cbnz	r0, 800e458 <__multiply+0x44>
 800e44a:	4602      	mov	r2, r0
 800e44c:	4b44      	ldr	r3, [pc, #272]	@ (800e560 <__multiply+0x14c>)
 800e44e:	4845      	ldr	r0, [pc, #276]	@ (800e564 <__multiply+0x150>)
 800e450:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e454:	f001 fd7c 	bl	800ff50 <__assert_func>
 800e458:	f100 0514 	add.w	r5, r0, #20
 800e45c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e460:	462b      	mov	r3, r5
 800e462:	2200      	movs	r2, #0
 800e464:	4543      	cmp	r3, r8
 800e466:	d321      	bcc.n	800e4ac <__multiply+0x98>
 800e468:	f107 0114 	add.w	r1, r7, #20
 800e46c:	f104 0214 	add.w	r2, r4, #20
 800e470:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e474:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e478:	9302      	str	r3, [sp, #8]
 800e47a:	1b13      	subs	r3, r2, r4
 800e47c:	3b15      	subs	r3, #21
 800e47e:	f023 0303 	bic.w	r3, r3, #3
 800e482:	3304      	adds	r3, #4
 800e484:	f104 0715 	add.w	r7, r4, #21
 800e488:	42ba      	cmp	r2, r7
 800e48a:	bf38      	it	cc
 800e48c:	2304      	movcc	r3, #4
 800e48e:	9301      	str	r3, [sp, #4]
 800e490:	9b02      	ldr	r3, [sp, #8]
 800e492:	9103      	str	r1, [sp, #12]
 800e494:	428b      	cmp	r3, r1
 800e496:	d80c      	bhi.n	800e4b2 <__multiply+0x9e>
 800e498:	2e00      	cmp	r6, #0
 800e49a:	dd03      	ble.n	800e4a4 <__multiply+0x90>
 800e49c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d05b      	beq.n	800e55c <__multiply+0x148>
 800e4a4:	6106      	str	r6, [r0, #16]
 800e4a6:	b005      	add	sp, #20
 800e4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ac:	f843 2b04 	str.w	r2, [r3], #4
 800e4b0:	e7d8      	b.n	800e464 <__multiply+0x50>
 800e4b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e4b6:	f1ba 0f00 	cmp.w	sl, #0
 800e4ba:	d024      	beq.n	800e506 <__multiply+0xf2>
 800e4bc:	f104 0e14 	add.w	lr, r4, #20
 800e4c0:	46a9      	mov	r9, r5
 800e4c2:	f04f 0c00 	mov.w	ip, #0
 800e4c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e4ca:	f8d9 3000 	ldr.w	r3, [r9]
 800e4ce:	fa1f fb87 	uxth.w	fp, r7
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800e4d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e4dc:	f8d9 7000 	ldr.w	r7, [r9]
 800e4e0:	4463      	add	r3, ip
 800e4e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800e4ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4f4:	4572      	cmp	r2, lr
 800e4f6:	f849 3b04 	str.w	r3, [r9], #4
 800e4fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4fe:	d8e2      	bhi.n	800e4c6 <__multiply+0xb2>
 800e500:	9b01      	ldr	r3, [sp, #4]
 800e502:	f845 c003 	str.w	ip, [r5, r3]
 800e506:	9b03      	ldr	r3, [sp, #12]
 800e508:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e50c:	3104      	adds	r1, #4
 800e50e:	f1b9 0f00 	cmp.w	r9, #0
 800e512:	d021      	beq.n	800e558 <__multiply+0x144>
 800e514:	682b      	ldr	r3, [r5, #0]
 800e516:	f104 0c14 	add.w	ip, r4, #20
 800e51a:	46ae      	mov	lr, r5
 800e51c:	f04f 0a00 	mov.w	sl, #0
 800e520:	f8bc b000 	ldrh.w	fp, [ip]
 800e524:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e528:	fb09 770b 	mla	r7, r9, fp, r7
 800e52c:	4457      	add	r7, sl
 800e52e:	b29b      	uxth	r3, r3
 800e530:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e534:	f84e 3b04 	str.w	r3, [lr], #4
 800e538:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e53c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e540:	f8be 3000 	ldrh.w	r3, [lr]
 800e544:	fb09 330a 	mla	r3, r9, sl, r3
 800e548:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e54c:	4562      	cmp	r2, ip
 800e54e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e552:	d8e5      	bhi.n	800e520 <__multiply+0x10c>
 800e554:	9f01      	ldr	r7, [sp, #4]
 800e556:	51eb      	str	r3, [r5, r7]
 800e558:	3504      	adds	r5, #4
 800e55a:	e799      	b.n	800e490 <__multiply+0x7c>
 800e55c:	3e01      	subs	r6, #1
 800e55e:	e79b      	b.n	800e498 <__multiply+0x84>
 800e560:	080109d5 	.word	0x080109d5
 800e564:	080109e6 	.word	0x080109e6

0800e568 <__pow5mult>:
 800e568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e56c:	4615      	mov	r5, r2
 800e56e:	f012 0203 	ands.w	r2, r2, #3
 800e572:	4607      	mov	r7, r0
 800e574:	460e      	mov	r6, r1
 800e576:	d007      	beq.n	800e588 <__pow5mult+0x20>
 800e578:	4c25      	ldr	r4, [pc, #148]	@ (800e610 <__pow5mult+0xa8>)
 800e57a:	3a01      	subs	r2, #1
 800e57c:	2300      	movs	r3, #0
 800e57e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e582:	f7ff fe55 	bl	800e230 <__multadd>
 800e586:	4606      	mov	r6, r0
 800e588:	10ad      	asrs	r5, r5, #2
 800e58a:	d03d      	beq.n	800e608 <__pow5mult+0xa0>
 800e58c:	69fc      	ldr	r4, [r7, #28]
 800e58e:	b97c      	cbnz	r4, 800e5b0 <__pow5mult+0x48>
 800e590:	2010      	movs	r0, #16
 800e592:	f7ff fd35 	bl	800e000 <malloc>
 800e596:	4602      	mov	r2, r0
 800e598:	61f8      	str	r0, [r7, #28]
 800e59a:	b928      	cbnz	r0, 800e5a8 <__pow5mult+0x40>
 800e59c:	4b1d      	ldr	r3, [pc, #116]	@ (800e614 <__pow5mult+0xac>)
 800e59e:	481e      	ldr	r0, [pc, #120]	@ (800e618 <__pow5mult+0xb0>)
 800e5a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e5a4:	f001 fcd4 	bl	800ff50 <__assert_func>
 800e5a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5ac:	6004      	str	r4, [r0, #0]
 800e5ae:	60c4      	str	r4, [r0, #12]
 800e5b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e5b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5b8:	b94c      	cbnz	r4, 800e5ce <__pow5mult+0x66>
 800e5ba:	f240 2171 	movw	r1, #625	@ 0x271
 800e5be:	4638      	mov	r0, r7
 800e5c0:	f7ff ff12 	bl	800e3e8 <__i2b>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	6003      	str	r3, [r0, #0]
 800e5ce:	f04f 0900 	mov.w	r9, #0
 800e5d2:	07eb      	lsls	r3, r5, #31
 800e5d4:	d50a      	bpl.n	800e5ec <__pow5mult+0x84>
 800e5d6:	4631      	mov	r1, r6
 800e5d8:	4622      	mov	r2, r4
 800e5da:	4638      	mov	r0, r7
 800e5dc:	f7ff ff1a 	bl	800e414 <__multiply>
 800e5e0:	4631      	mov	r1, r6
 800e5e2:	4680      	mov	r8, r0
 800e5e4:	4638      	mov	r0, r7
 800e5e6:	f7ff fe01 	bl	800e1ec <_Bfree>
 800e5ea:	4646      	mov	r6, r8
 800e5ec:	106d      	asrs	r5, r5, #1
 800e5ee:	d00b      	beq.n	800e608 <__pow5mult+0xa0>
 800e5f0:	6820      	ldr	r0, [r4, #0]
 800e5f2:	b938      	cbnz	r0, 800e604 <__pow5mult+0x9c>
 800e5f4:	4622      	mov	r2, r4
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	4638      	mov	r0, r7
 800e5fa:	f7ff ff0b 	bl	800e414 <__multiply>
 800e5fe:	6020      	str	r0, [r4, #0]
 800e600:	f8c0 9000 	str.w	r9, [r0]
 800e604:	4604      	mov	r4, r0
 800e606:	e7e4      	b.n	800e5d2 <__pow5mult+0x6a>
 800e608:	4630      	mov	r0, r6
 800e60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e60e:	bf00      	nop
 800e610:	08010a40 	.word	0x08010a40
 800e614:	08010966 	.word	0x08010966
 800e618:	080109e6 	.word	0x080109e6

0800e61c <__lshift>:
 800e61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e620:	460c      	mov	r4, r1
 800e622:	6849      	ldr	r1, [r1, #4]
 800e624:	6923      	ldr	r3, [r4, #16]
 800e626:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e62a:	68a3      	ldr	r3, [r4, #8]
 800e62c:	4607      	mov	r7, r0
 800e62e:	4691      	mov	r9, r2
 800e630:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e634:	f108 0601 	add.w	r6, r8, #1
 800e638:	42b3      	cmp	r3, r6
 800e63a:	db0b      	blt.n	800e654 <__lshift+0x38>
 800e63c:	4638      	mov	r0, r7
 800e63e:	f7ff fd95 	bl	800e16c <_Balloc>
 800e642:	4605      	mov	r5, r0
 800e644:	b948      	cbnz	r0, 800e65a <__lshift+0x3e>
 800e646:	4602      	mov	r2, r0
 800e648:	4b28      	ldr	r3, [pc, #160]	@ (800e6ec <__lshift+0xd0>)
 800e64a:	4829      	ldr	r0, [pc, #164]	@ (800e6f0 <__lshift+0xd4>)
 800e64c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e650:	f001 fc7e 	bl	800ff50 <__assert_func>
 800e654:	3101      	adds	r1, #1
 800e656:	005b      	lsls	r3, r3, #1
 800e658:	e7ee      	b.n	800e638 <__lshift+0x1c>
 800e65a:	2300      	movs	r3, #0
 800e65c:	f100 0114 	add.w	r1, r0, #20
 800e660:	f100 0210 	add.w	r2, r0, #16
 800e664:	4618      	mov	r0, r3
 800e666:	4553      	cmp	r3, sl
 800e668:	db33      	blt.n	800e6d2 <__lshift+0xb6>
 800e66a:	6920      	ldr	r0, [r4, #16]
 800e66c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e670:	f104 0314 	add.w	r3, r4, #20
 800e674:	f019 091f 	ands.w	r9, r9, #31
 800e678:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e67c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e680:	d02b      	beq.n	800e6da <__lshift+0xbe>
 800e682:	f1c9 0e20 	rsb	lr, r9, #32
 800e686:	468a      	mov	sl, r1
 800e688:	2200      	movs	r2, #0
 800e68a:	6818      	ldr	r0, [r3, #0]
 800e68c:	fa00 f009 	lsl.w	r0, r0, r9
 800e690:	4310      	orrs	r0, r2
 800e692:	f84a 0b04 	str.w	r0, [sl], #4
 800e696:	f853 2b04 	ldr.w	r2, [r3], #4
 800e69a:	459c      	cmp	ip, r3
 800e69c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e6a0:	d8f3      	bhi.n	800e68a <__lshift+0x6e>
 800e6a2:	ebac 0304 	sub.w	r3, ip, r4
 800e6a6:	3b15      	subs	r3, #21
 800e6a8:	f023 0303 	bic.w	r3, r3, #3
 800e6ac:	3304      	adds	r3, #4
 800e6ae:	f104 0015 	add.w	r0, r4, #21
 800e6b2:	4584      	cmp	ip, r0
 800e6b4:	bf38      	it	cc
 800e6b6:	2304      	movcc	r3, #4
 800e6b8:	50ca      	str	r2, [r1, r3]
 800e6ba:	b10a      	cbz	r2, 800e6c0 <__lshift+0xa4>
 800e6bc:	f108 0602 	add.w	r6, r8, #2
 800e6c0:	3e01      	subs	r6, #1
 800e6c2:	4638      	mov	r0, r7
 800e6c4:	612e      	str	r6, [r5, #16]
 800e6c6:	4621      	mov	r1, r4
 800e6c8:	f7ff fd90 	bl	800e1ec <_Bfree>
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	e7c5      	b.n	800e666 <__lshift+0x4a>
 800e6da:	3904      	subs	r1, #4
 800e6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6e4:	459c      	cmp	ip, r3
 800e6e6:	d8f9      	bhi.n	800e6dc <__lshift+0xc0>
 800e6e8:	e7ea      	b.n	800e6c0 <__lshift+0xa4>
 800e6ea:	bf00      	nop
 800e6ec:	080109d5 	.word	0x080109d5
 800e6f0:	080109e6 	.word	0x080109e6

0800e6f4 <__mcmp>:
 800e6f4:	690a      	ldr	r2, [r1, #16]
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	6900      	ldr	r0, [r0, #16]
 800e6fa:	1a80      	subs	r0, r0, r2
 800e6fc:	b530      	push	{r4, r5, lr}
 800e6fe:	d10e      	bne.n	800e71e <__mcmp+0x2a>
 800e700:	3314      	adds	r3, #20
 800e702:	3114      	adds	r1, #20
 800e704:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e708:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e70c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e710:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e714:	4295      	cmp	r5, r2
 800e716:	d003      	beq.n	800e720 <__mcmp+0x2c>
 800e718:	d205      	bcs.n	800e726 <__mcmp+0x32>
 800e71a:	f04f 30ff 	mov.w	r0, #4294967295
 800e71e:	bd30      	pop	{r4, r5, pc}
 800e720:	42a3      	cmp	r3, r4
 800e722:	d3f3      	bcc.n	800e70c <__mcmp+0x18>
 800e724:	e7fb      	b.n	800e71e <__mcmp+0x2a>
 800e726:	2001      	movs	r0, #1
 800e728:	e7f9      	b.n	800e71e <__mcmp+0x2a>
	...

0800e72c <__mdiff>:
 800e72c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e730:	4689      	mov	r9, r1
 800e732:	4606      	mov	r6, r0
 800e734:	4611      	mov	r1, r2
 800e736:	4648      	mov	r0, r9
 800e738:	4614      	mov	r4, r2
 800e73a:	f7ff ffdb 	bl	800e6f4 <__mcmp>
 800e73e:	1e05      	subs	r5, r0, #0
 800e740:	d112      	bne.n	800e768 <__mdiff+0x3c>
 800e742:	4629      	mov	r1, r5
 800e744:	4630      	mov	r0, r6
 800e746:	f7ff fd11 	bl	800e16c <_Balloc>
 800e74a:	4602      	mov	r2, r0
 800e74c:	b928      	cbnz	r0, 800e75a <__mdiff+0x2e>
 800e74e:	4b3f      	ldr	r3, [pc, #252]	@ (800e84c <__mdiff+0x120>)
 800e750:	f240 2137 	movw	r1, #567	@ 0x237
 800e754:	483e      	ldr	r0, [pc, #248]	@ (800e850 <__mdiff+0x124>)
 800e756:	f001 fbfb 	bl	800ff50 <__assert_func>
 800e75a:	2301      	movs	r3, #1
 800e75c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e760:	4610      	mov	r0, r2
 800e762:	b003      	add	sp, #12
 800e764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e768:	bfbc      	itt	lt
 800e76a:	464b      	movlt	r3, r9
 800e76c:	46a1      	movlt	r9, r4
 800e76e:	4630      	mov	r0, r6
 800e770:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e774:	bfba      	itte	lt
 800e776:	461c      	movlt	r4, r3
 800e778:	2501      	movlt	r5, #1
 800e77a:	2500      	movge	r5, #0
 800e77c:	f7ff fcf6 	bl	800e16c <_Balloc>
 800e780:	4602      	mov	r2, r0
 800e782:	b918      	cbnz	r0, 800e78c <__mdiff+0x60>
 800e784:	4b31      	ldr	r3, [pc, #196]	@ (800e84c <__mdiff+0x120>)
 800e786:	f240 2145 	movw	r1, #581	@ 0x245
 800e78a:	e7e3      	b.n	800e754 <__mdiff+0x28>
 800e78c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e790:	6926      	ldr	r6, [r4, #16]
 800e792:	60c5      	str	r5, [r0, #12]
 800e794:	f109 0310 	add.w	r3, r9, #16
 800e798:	f109 0514 	add.w	r5, r9, #20
 800e79c:	f104 0e14 	add.w	lr, r4, #20
 800e7a0:	f100 0b14 	add.w	fp, r0, #20
 800e7a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e7a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e7ac:	9301      	str	r3, [sp, #4]
 800e7ae:	46d9      	mov	r9, fp
 800e7b0:	f04f 0c00 	mov.w	ip, #0
 800e7b4:	9b01      	ldr	r3, [sp, #4]
 800e7b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e7ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e7be:	9301      	str	r3, [sp, #4]
 800e7c0:	fa1f f38a 	uxth.w	r3, sl
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	b283      	uxth	r3, r0
 800e7c8:	1acb      	subs	r3, r1, r3
 800e7ca:	0c00      	lsrs	r0, r0, #16
 800e7cc:	4463      	add	r3, ip
 800e7ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e7d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e7dc:	4576      	cmp	r6, lr
 800e7de:	f849 3b04 	str.w	r3, [r9], #4
 800e7e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7e6:	d8e5      	bhi.n	800e7b4 <__mdiff+0x88>
 800e7e8:	1b33      	subs	r3, r6, r4
 800e7ea:	3b15      	subs	r3, #21
 800e7ec:	f023 0303 	bic.w	r3, r3, #3
 800e7f0:	3415      	adds	r4, #21
 800e7f2:	3304      	adds	r3, #4
 800e7f4:	42a6      	cmp	r6, r4
 800e7f6:	bf38      	it	cc
 800e7f8:	2304      	movcc	r3, #4
 800e7fa:	441d      	add	r5, r3
 800e7fc:	445b      	add	r3, fp
 800e7fe:	461e      	mov	r6, r3
 800e800:	462c      	mov	r4, r5
 800e802:	4544      	cmp	r4, r8
 800e804:	d30e      	bcc.n	800e824 <__mdiff+0xf8>
 800e806:	f108 0103 	add.w	r1, r8, #3
 800e80a:	1b49      	subs	r1, r1, r5
 800e80c:	f021 0103 	bic.w	r1, r1, #3
 800e810:	3d03      	subs	r5, #3
 800e812:	45a8      	cmp	r8, r5
 800e814:	bf38      	it	cc
 800e816:	2100      	movcc	r1, #0
 800e818:	440b      	add	r3, r1
 800e81a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e81e:	b191      	cbz	r1, 800e846 <__mdiff+0x11a>
 800e820:	6117      	str	r7, [r2, #16]
 800e822:	e79d      	b.n	800e760 <__mdiff+0x34>
 800e824:	f854 1b04 	ldr.w	r1, [r4], #4
 800e828:	46e6      	mov	lr, ip
 800e82a:	0c08      	lsrs	r0, r1, #16
 800e82c:	fa1c fc81 	uxtah	ip, ip, r1
 800e830:	4471      	add	r1, lr
 800e832:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e836:	b289      	uxth	r1, r1
 800e838:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e83c:	f846 1b04 	str.w	r1, [r6], #4
 800e840:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e844:	e7dd      	b.n	800e802 <__mdiff+0xd6>
 800e846:	3f01      	subs	r7, #1
 800e848:	e7e7      	b.n	800e81a <__mdiff+0xee>
 800e84a:	bf00      	nop
 800e84c:	080109d5 	.word	0x080109d5
 800e850:	080109e6 	.word	0x080109e6

0800e854 <__ulp>:
 800e854:	b082      	sub	sp, #8
 800e856:	ed8d 0b00 	vstr	d0, [sp]
 800e85a:	9a01      	ldr	r2, [sp, #4]
 800e85c:	4b0f      	ldr	r3, [pc, #60]	@ (800e89c <__ulp+0x48>)
 800e85e:	4013      	ands	r3, r2
 800e860:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e864:	2b00      	cmp	r3, #0
 800e866:	dc08      	bgt.n	800e87a <__ulp+0x26>
 800e868:	425b      	negs	r3, r3
 800e86a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e86e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e872:	da04      	bge.n	800e87e <__ulp+0x2a>
 800e874:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e878:	4113      	asrs	r3, r2
 800e87a:	2200      	movs	r2, #0
 800e87c:	e008      	b.n	800e890 <__ulp+0x3c>
 800e87e:	f1a2 0314 	sub.w	r3, r2, #20
 800e882:	2b1e      	cmp	r3, #30
 800e884:	bfda      	itte	le
 800e886:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e88a:	40da      	lsrle	r2, r3
 800e88c:	2201      	movgt	r2, #1
 800e88e:	2300      	movs	r3, #0
 800e890:	4619      	mov	r1, r3
 800e892:	4610      	mov	r0, r2
 800e894:	ec41 0b10 	vmov	d0, r0, r1
 800e898:	b002      	add	sp, #8
 800e89a:	4770      	bx	lr
 800e89c:	7ff00000 	.word	0x7ff00000

0800e8a0 <__b2d>:
 800e8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8a4:	6906      	ldr	r6, [r0, #16]
 800e8a6:	f100 0814 	add.w	r8, r0, #20
 800e8aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e8ae:	1f37      	subs	r7, r6, #4
 800e8b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	f7ff fd4b 	bl	800e350 <__hi0bits>
 800e8ba:	f1c0 0320 	rsb	r3, r0, #32
 800e8be:	280a      	cmp	r0, #10
 800e8c0:	600b      	str	r3, [r1, #0]
 800e8c2:	491b      	ldr	r1, [pc, #108]	@ (800e930 <__b2d+0x90>)
 800e8c4:	dc15      	bgt.n	800e8f2 <__b2d+0x52>
 800e8c6:	f1c0 0c0b 	rsb	ip, r0, #11
 800e8ca:	fa22 f30c 	lsr.w	r3, r2, ip
 800e8ce:	45b8      	cmp	r8, r7
 800e8d0:	ea43 0501 	orr.w	r5, r3, r1
 800e8d4:	bf34      	ite	cc
 800e8d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e8da:	2300      	movcs	r3, #0
 800e8dc:	3015      	adds	r0, #21
 800e8de:	fa02 f000 	lsl.w	r0, r2, r0
 800e8e2:	fa23 f30c 	lsr.w	r3, r3, ip
 800e8e6:	4303      	orrs	r3, r0
 800e8e8:	461c      	mov	r4, r3
 800e8ea:	ec45 4b10 	vmov	d0, r4, r5
 800e8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f2:	45b8      	cmp	r8, r7
 800e8f4:	bf3a      	itte	cc
 800e8f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e8fa:	f1a6 0708 	subcc.w	r7, r6, #8
 800e8fe:	2300      	movcs	r3, #0
 800e900:	380b      	subs	r0, #11
 800e902:	d012      	beq.n	800e92a <__b2d+0x8a>
 800e904:	f1c0 0120 	rsb	r1, r0, #32
 800e908:	fa23 f401 	lsr.w	r4, r3, r1
 800e90c:	4082      	lsls	r2, r0
 800e90e:	4322      	orrs	r2, r4
 800e910:	4547      	cmp	r7, r8
 800e912:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e916:	bf8c      	ite	hi
 800e918:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e91c:	2200      	movls	r2, #0
 800e91e:	4083      	lsls	r3, r0
 800e920:	40ca      	lsrs	r2, r1
 800e922:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e926:	4313      	orrs	r3, r2
 800e928:	e7de      	b.n	800e8e8 <__b2d+0x48>
 800e92a:	ea42 0501 	orr.w	r5, r2, r1
 800e92e:	e7db      	b.n	800e8e8 <__b2d+0x48>
 800e930:	3ff00000 	.word	0x3ff00000

0800e934 <__d2b>:
 800e934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e938:	460f      	mov	r7, r1
 800e93a:	2101      	movs	r1, #1
 800e93c:	ec59 8b10 	vmov	r8, r9, d0
 800e940:	4616      	mov	r6, r2
 800e942:	f7ff fc13 	bl	800e16c <_Balloc>
 800e946:	4604      	mov	r4, r0
 800e948:	b930      	cbnz	r0, 800e958 <__d2b+0x24>
 800e94a:	4602      	mov	r2, r0
 800e94c:	4b23      	ldr	r3, [pc, #140]	@ (800e9dc <__d2b+0xa8>)
 800e94e:	4824      	ldr	r0, [pc, #144]	@ (800e9e0 <__d2b+0xac>)
 800e950:	f240 310f 	movw	r1, #783	@ 0x30f
 800e954:	f001 fafc 	bl	800ff50 <__assert_func>
 800e958:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e95c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e960:	b10d      	cbz	r5, 800e966 <__d2b+0x32>
 800e962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e966:	9301      	str	r3, [sp, #4]
 800e968:	f1b8 0300 	subs.w	r3, r8, #0
 800e96c:	d023      	beq.n	800e9b6 <__d2b+0x82>
 800e96e:	4668      	mov	r0, sp
 800e970:	9300      	str	r3, [sp, #0]
 800e972:	f7ff fd0c 	bl	800e38e <__lo0bits>
 800e976:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e97a:	b1d0      	cbz	r0, 800e9b2 <__d2b+0x7e>
 800e97c:	f1c0 0320 	rsb	r3, r0, #32
 800e980:	fa02 f303 	lsl.w	r3, r2, r3
 800e984:	430b      	orrs	r3, r1
 800e986:	40c2      	lsrs	r2, r0
 800e988:	6163      	str	r3, [r4, #20]
 800e98a:	9201      	str	r2, [sp, #4]
 800e98c:	9b01      	ldr	r3, [sp, #4]
 800e98e:	61a3      	str	r3, [r4, #24]
 800e990:	2b00      	cmp	r3, #0
 800e992:	bf0c      	ite	eq
 800e994:	2201      	moveq	r2, #1
 800e996:	2202      	movne	r2, #2
 800e998:	6122      	str	r2, [r4, #16]
 800e99a:	b1a5      	cbz	r5, 800e9c6 <__d2b+0x92>
 800e99c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e9a0:	4405      	add	r5, r0
 800e9a2:	603d      	str	r5, [r7, #0]
 800e9a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e9a8:	6030      	str	r0, [r6, #0]
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	b003      	add	sp, #12
 800e9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9b2:	6161      	str	r1, [r4, #20]
 800e9b4:	e7ea      	b.n	800e98c <__d2b+0x58>
 800e9b6:	a801      	add	r0, sp, #4
 800e9b8:	f7ff fce9 	bl	800e38e <__lo0bits>
 800e9bc:	9b01      	ldr	r3, [sp, #4]
 800e9be:	6163      	str	r3, [r4, #20]
 800e9c0:	3020      	adds	r0, #32
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	e7e8      	b.n	800e998 <__d2b+0x64>
 800e9c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e9ce:	6038      	str	r0, [r7, #0]
 800e9d0:	6918      	ldr	r0, [r3, #16]
 800e9d2:	f7ff fcbd 	bl	800e350 <__hi0bits>
 800e9d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9da:	e7e5      	b.n	800e9a8 <__d2b+0x74>
 800e9dc:	080109d5 	.word	0x080109d5
 800e9e0:	080109e6 	.word	0x080109e6

0800e9e4 <__ratio>:
 800e9e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e8:	4688      	mov	r8, r1
 800e9ea:	4669      	mov	r1, sp
 800e9ec:	4681      	mov	r9, r0
 800e9ee:	f7ff ff57 	bl	800e8a0 <__b2d>
 800e9f2:	a901      	add	r1, sp, #4
 800e9f4:	4640      	mov	r0, r8
 800e9f6:	ec55 4b10 	vmov	r4, r5, d0
 800e9fa:	f7ff ff51 	bl	800e8a0 <__b2d>
 800e9fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ea02:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ea06:	1ad2      	subs	r2, r2, r3
 800ea08:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ea0c:	1a5b      	subs	r3, r3, r1
 800ea0e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ea12:	ec57 6b10 	vmov	r6, r7, d0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	bfd6      	itet	le
 800ea1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea1e:	462a      	movgt	r2, r5
 800ea20:	463a      	movle	r2, r7
 800ea22:	46ab      	mov	fp, r5
 800ea24:	46a2      	mov	sl, r4
 800ea26:	bfce      	itee	gt
 800ea28:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ea2c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ea30:	ee00 3a90 	vmovle	s1, r3
 800ea34:	ec4b ab17 	vmov	d7, sl, fp
 800ea38:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ea3c:	b003      	add	sp, #12
 800ea3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea42 <__copybits>:
 800ea42:	3901      	subs	r1, #1
 800ea44:	b570      	push	{r4, r5, r6, lr}
 800ea46:	1149      	asrs	r1, r1, #5
 800ea48:	6914      	ldr	r4, [r2, #16]
 800ea4a:	3101      	adds	r1, #1
 800ea4c:	f102 0314 	add.w	r3, r2, #20
 800ea50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea58:	1f05      	subs	r5, r0, #4
 800ea5a:	42a3      	cmp	r3, r4
 800ea5c:	d30c      	bcc.n	800ea78 <__copybits+0x36>
 800ea5e:	1aa3      	subs	r3, r4, r2
 800ea60:	3b11      	subs	r3, #17
 800ea62:	f023 0303 	bic.w	r3, r3, #3
 800ea66:	3211      	adds	r2, #17
 800ea68:	42a2      	cmp	r2, r4
 800ea6a:	bf88      	it	hi
 800ea6c:	2300      	movhi	r3, #0
 800ea6e:	4418      	add	r0, r3
 800ea70:	2300      	movs	r3, #0
 800ea72:	4288      	cmp	r0, r1
 800ea74:	d305      	bcc.n	800ea82 <__copybits+0x40>
 800ea76:	bd70      	pop	{r4, r5, r6, pc}
 800ea78:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea7c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea80:	e7eb      	b.n	800ea5a <__copybits+0x18>
 800ea82:	f840 3b04 	str.w	r3, [r0], #4
 800ea86:	e7f4      	b.n	800ea72 <__copybits+0x30>

0800ea88 <__any_on>:
 800ea88:	f100 0214 	add.w	r2, r0, #20
 800ea8c:	6900      	ldr	r0, [r0, #16]
 800ea8e:	114b      	asrs	r3, r1, #5
 800ea90:	4298      	cmp	r0, r3
 800ea92:	b510      	push	{r4, lr}
 800ea94:	db11      	blt.n	800eaba <__any_on+0x32>
 800ea96:	dd0a      	ble.n	800eaae <__any_on+0x26>
 800ea98:	f011 011f 	ands.w	r1, r1, #31
 800ea9c:	d007      	beq.n	800eaae <__any_on+0x26>
 800ea9e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eaa2:	fa24 f001 	lsr.w	r0, r4, r1
 800eaa6:	fa00 f101 	lsl.w	r1, r0, r1
 800eaaa:	428c      	cmp	r4, r1
 800eaac:	d10b      	bne.n	800eac6 <__any_on+0x3e>
 800eaae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d803      	bhi.n	800eabe <__any_on+0x36>
 800eab6:	2000      	movs	r0, #0
 800eab8:	bd10      	pop	{r4, pc}
 800eaba:	4603      	mov	r3, r0
 800eabc:	e7f7      	b.n	800eaae <__any_on+0x26>
 800eabe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eac2:	2900      	cmp	r1, #0
 800eac4:	d0f5      	beq.n	800eab2 <__any_on+0x2a>
 800eac6:	2001      	movs	r0, #1
 800eac8:	e7f6      	b.n	800eab8 <__any_on+0x30>

0800eaca <sulp>:
 800eaca:	b570      	push	{r4, r5, r6, lr}
 800eacc:	4604      	mov	r4, r0
 800eace:	460d      	mov	r5, r1
 800ead0:	4616      	mov	r6, r2
 800ead2:	ec45 4b10 	vmov	d0, r4, r5
 800ead6:	f7ff febd 	bl	800e854 <__ulp>
 800eada:	b17e      	cbz	r6, 800eafc <sulp+0x32>
 800eadc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eae0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	dd09      	ble.n	800eafc <sulp+0x32>
 800eae8:	051b      	lsls	r3, r3, #20
 800eaea:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800eaee:	2000      	movs	r0, #0
 800eaf0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800eaf4:	ec41 0b17 	vmov	d7, r0, r1
 800eaf8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb00 <_strtod_l>:
 800eb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb04:	ed2d 8b0a 	vpush	{d8-d12}
 800eb08:	b097      	sub	sp, #92	@ 0x5c
 800eb0a:	4688      	mov	r8, r1
 800eb0c:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb0e:	2200      	movs	r2, #0
 800eb10:	9212      	str	r2, [sp, #72]	@ 0x48
 800eb12:	9005      	str	r0, [sp, #20]
 800eb14:	f04f 0a00 	mov.w	sl, #0
 800eb18:	f04f 0b00 	mov.w	fp, #0
 800eb1c:	460a      	mov	r2, r1
 800eb1e:	9211      	str	r2, [sp, #68]	@ 0x44
 800eb20:	7811      	ldrb	r1, [r2, #0]
 800eb22:	292b      	cmp	r1, #43	@ 0x2b
 800eb24:	d04c      	beq.n	800ebc0 <_strtod_l+0xc0>
 800eb26:	d839      	bhi.n	800eb9c <_strtod_l+0x9c>
 800eb28:	290d      	cmp	r1, #13
 800eb2a:	d833      	bhi.n	800eb94 <_strtod_l+0x94>
 800eb2c:	2908      	cmp	r1, #8
 800eb2e:	d833      	bhi.n	800eb98 <_strtod_l+0x98>
 800eb30:	2900      	cmp	r1, #0
 800eb32:	d03c      	beq.n	800ebae <_strtod_l+0xae>
 800eb34:	2200      	movs	r2, #0
 800eb36:	9208      	str	r2, [sp, #32]
 800eb38:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800eb3a:	782a      	ldrb	r2, [r5, #0]
 800eb3c:	2a30      	cmp	r2, #48	@ 0x30
 800eb3e:	f040 80b5 	bne.w	800ecac <_strtod_l+0x1ac>
 800eb42:	786a      	ldrb	r2, [r5, #1]
 800eb44:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eb48:	2a58      	cmp	r2, #88	@ 0x58
 800eb4a:	d170      	bne.n	800ec2e <_strtod_l+0x12e>
 800eb4c:	9302      	str	r3, [sp, #8]
 800eb4e:	9b08      	ldr	r3, [sp, #32]
 800eb50:	9301      	str	r3, [sp, #4]
 800eb52:	ab12      	add	r3, sp, #72	@ 0x48
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	4a8b      	ldr	r2, [pc, #556]	@ (800ed84 <_strtod_l+0x284>)
 800eb58:	9805      	ldr	r0, [sp, #20]
 800eb5a:	ab13      	add	r3, sp, #76	@ 0x4c
 800eb5c:	a911      	add	r1, sp, #68	@ 0x44
 800eb5e:	f001 fa91 	bl	8010084 <__gethex>
 800eb62:	f010 060f 	ands.w	r6, r0, #15
 800eb66:	4604      	mov	r4, r0
 800eb68:	d005      	beq.n	800eb76 <_strtod_l+0x76>
 800eb6a:	2e06      	cmp	r6, #6
 800eb6c:	d12a      	bne.n	800ebc4 <_strtod_l+0xc4>
 800eb6e:	3501      	adds	r5, #1
 800eb70:	2300      	movs	r3, #0
 800eb72:	9511      	str	r5, [sp, #68]	@ 0x44
 800eb74:	9308      	str	r3, [sp, #32]
 800eb76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f040 852f 	bne.w	800f5dc <_strtod_l+0xadc>
 800eb7e:	9b08      	ldr	r3, [sp, #32]
 800eb80:	ec4b ab10 	vmov	d0, sl, fp
 800eb84:	b1cb      	cbz	r3, 800ebba <_strtod_l+0xba>
 800eb86:	eeb1 0b40 	vneg.f64	d0, d0
 800eb8a:	b017      	add	sp, #92	@ 0x5c
 800eb8c:	ecbd 8b0a 	vpop	{d8-d12}
 800eb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb94:	2920      	cmp	r1, #32
 800eb96:	d1cd      	bne.n	800eb34 <_strtod_l+0x34>
 800eb98:	3201      	adds	r2, #1
 800eb9a:	e7c0      	b.n	800eb1e <_strtod_l+0x1e>
 800eb9c:	292d      	cmp	r1, #45	@ 0x2d
 800eb9e:	d1c9      	bne.n	800eb34 <_strtod_l+0x34>
 800eba0:	2101      	movs	r1, #1
 800eba2:	9108      	str	r1, [sp, #32]
 800eba4:	1c51      	adds	r1, r2, #1
 800eba6:	9111      	str	r1, [sp, #68]	@ 0x44
 800eba8:	7852      	ldrb	r2, [r2, #1]
 800ebaa:	2a00      	cmp	r2, #0
 800ebac:	d1c4      	bne.n	800eb38 <_strtod_l+0x38>
 800ebae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebb0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f040 850f 	bne.w	800f5d8 <_strtod_l+0xad8>
 800ebba:	ec4b ab10 	vmov	d0, sl, fp
 800ebbe:	e7e4      	b.n	800eb8a <_strtod_l+0x8a>
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	e7ee      	b.n	800eba2 <_strtod_l+0xa2>
 800ebc4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ebc6:	b13a      	cbz	r2, 800ebd8 <_strtod_l+0xd8>
 800ebc8:	2135      	movs	r1, #53	@ 0x35
 800ebca:	a814      	add	r0, sp, #80	@ 0x50
 800ebcc:	f7ff ff39 	bl	800ea42 <__copybits>
 800ebd0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ebd2:	9805      	ldr	r0, [sp, #20]
 800ebd4:	f7ff fb0a 	bl	800e1ec <_Bfree>
 800ebd8:	1e73      	subs	r3, r6, #1
 800ebda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ebdc:	2b04      	cmp	r3, #4
 800ebde:	d806      	bhi.n	800ebee <_strtod_l+0xee>
 800ebe0:	e8df f003 	tbb	[pc, r3]
 800ebe4:	201d0314 	.word	0x201d0314
 800ebe8:	14          	.byte	0x14
 800ebe9:	00          	.byte	0x00
 800ebea:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800ebee:	05e3      	lsls	r3, r4, #23
 800ebf0:	bf48      	it	mi
 800ebf2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ebf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ebfa:	0d1b      	lsrs	r3, r3, #20
 800ebfc:	051b      	lsls	r3, r3, #20
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d1b9      	bne.n	800eb76 <_strtod_l+0x76>
 800ec02:	f7fe fb91 	bl	800d328 <__errno>
 800ec06:	2322      	movs	r3, #34	@ 0x22
 800ec08:	6003      	str	r3, [r0, #0]
 800ec0a:	e7b4      	b.n	800eb76 <_strtod_l+0x76>
 800ec0c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800ec10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ec14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ec18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ec1c:	e7e7      	b.n	800ebee <_strtod_l+0xee>
 800ec1e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800ed8c <_strtod_l+0x28c>
 800ec22:	e7e4      	b.n	800ebee <_strtod_l+0xee>
 800ec24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ec28:	f04f 3aff 	mov.w	sl, #4294967295
 800ec2c:	e7df      	b.n	800ebee <_strtod_l+0xee>
 800ec2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	9211      	str	r2, [sp, #68]	@ 0x44
 800ec34:	785b      	ldrb	r3, [r3, #1]
 800ec36:	2b30      	cmp	r3, #48	@ 0x30
 800ec38:	d0f9      	beq.n	800ec2e <_strtod_l+0x12e>
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d09b      	beq.n	800eb76 <_strtod_l+0x76>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	2600      	movs	r6, #0
 800ec42:	9307      	str	r3, [sp, #28]
 800ec44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec48:	46b1      	mov	r9, r6
 800ec4a:	4635      	mov	r5, r6
 800ec4c:	220a      	movs	r2, #10
 800ec4e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800ec50:	7804      	ldrb	r4, [r0, #0]
 800ec52:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800ec56:	b2d9      	uxtb	r1, r3
 800ec58:	2909      	cmp	r1, #9
 800ec5a:	d929      	bls.n	800ecb0 <_strtod_l+0x1b0>
 800ec5c:	494a      	ldr	r1, [pc, #296]	@ (800ed88 <_strtod_l+0x288>)
 800ec5e:	2201      	movs	r2, #1
 800ec60:	f001 f928 	bl	800feb4 <strncmp>
 800ec64:	b378      	cbz	r0, 800ecc6 <_strtod_l+0x1c6>
 800ec66:	2000      	movs	r0, #0
 800ec68:	4622      	mov	r2, r4
 800ec6a:	462b      	mov	r3, r5
 800ec6c:	4607      	mov	r7, r0
 800ec6e:	9006      	str	r0, [sp, #24]
 800ec70:	2a65      	cmp	r2, #101	@ 0x65
 800ec72:	d001      	beq.n	800ec78 <_strtod_l+0x178>
 800ec74:	2a45      	cmp	r2, #69	@ 0x45
 800ec76:	d117      	bne.n	800eca8 <_strtod_l+0x1a8>
 800ec78:	b91b      	cbnz	r3, 800ec82 <_strtod_l+0x182>
 800ec7a:	9b07      	ldr	r3, [sp, #28]
 800ec7c:	4303      	orrs	r3, r0
 800ec7e:	d096      	beq.n	800ebae <_strtod_l+0xae>
 800ec80:	2300      	movs	r3, #0
 800ec82:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800ec86:	f108 0201 	add.w	r2, r8, #1
 800ec8a:	9211      	str	r2, [sp, #68]	@ 0x44
 800ec8c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ec90:	2a2b      	cmp	r2, #43	@ 0x2b
 800ec92:	d06b      	beq.n	800ed6c <_strtod_l+0x26c>
 800ec94:	2a2d      	cmp	r2, #45	@ 0x2d
 800ec96:	d071      	beq.n	800ed7c <_strtod_l+0x27c>
 800ec98:	f04f 0e00 	mov.w	lr, #0
 800ec9c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800eca0:	2c09      	cmp	r4, #9
 800eca2:	d979      	bls.n	800ed98 <_strtod_l+0x298>
 800eca4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800eca8:	2400      	movs	r4, #0
 800ecaa:	e094      	b.n	800edd6 <_strtod_l+0x2d6>
 800ecac:	2300      	movs	r3, #0
 800ecae:	e7c7      	b.n	800ec40 <_strtod_l+0x140>
 800ecb0:	2d08      	cmp	r5, #8
 800ecb2:	f100 0001 	add.w	r0, r0, #1
 800ecb6:	bfd4      	ite	le
 800ecb8:	fb02 3909 	mlale	r9, r2, r9, r3
 800ecbc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800ecc0:	3501      	adds	r5, #1
 800ecc2:	9011      	str	r0, [sp, #68]	@ 0x44
 800ecc4:	e7c3      	b.n	800ec4e <_strtod_l+0x14e>
 800ecc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ecc8:	1c5a      	adds	r2, r3, #1
 800ecca:	9211      	str	r2, [sp, #68]	@ 0x44
 800eccc:	785a      	ldrb	r2, [r3, #1]
 800ecce:	b375      	cbz	r5, 800ed2e <_strtod_l+0x22e>
 800ecd0:	4607      	mov	r7, r0
 800ecd2:	462b      	mov	r3, r5
 800ecd4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ecd8:	2909      	cmp	r1, #9
 800ecda:	d913      	bls.n	800ed04 <_strtod_l+0x204>
 800ecdc:	2101      	movs	r1, #1
 800ecde:	9106      	str	r1, [sp, #24]
 800ece0:	e7c6      	b.n	800ec70 <_strtod_l+0x170>
 800ece2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ece4:	1c5a      	adds	r2, r3, #1
 800ece6:	9211      	str	r2, [sp, #68]	@ 0x44
 800ece8:	785a      	ldrb	r2, [r3, #1]
 800ecea:	3001      	adds	r0, #1
 800ecec:	2a30      	cmp	r2, #48	@ 0x30
 800ecee:	d0f8      	beq.n	800ece2 <_strtod_l+0x1e2>
 800ecf0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ecf4:	2b08      	cmp	r3, #8
 800ecf6:	f200 8476 	bhi.w	800f5e6 <_strtod_l+0xae6>
 800ecfa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ecfc:	930a      	str	r3, [sp, #40]	@ 0x28
 800ecfe:	4607      	mov	r7, r0
 800ed00:	2000      	movs	r0, #0
 800ed02:	4603      	mov	r3, r0
 800ed04:	3a30      	subs	r2, #48	@ 0x30
 800ed06:	f100 0101 	add.w	r1, r0, #1
 800ed0a:	d023      	beq.n	800ed54 <_strtod_l+0x254>
 800ed0c:	440f      	add	r7, r1
 800ed0e:	eb00 0c03 	add.w	ip, r0, r3
 800ed12:	4619      	mov	r1, r3
 800ed14:	240a      	movs	r4, #10
 800ed16:	4561      	cmp	r1, ip
 800ed18:	d10b      	bne.n	800ed32 <_strtod_l+0x232>
 800ed1a:	1c5c      	adds	r4, r3, #1
 800ed1c:	4403      	add	r3, r0
 800ed1e:	2b08      	cmp	r3, #8
 800ed20:	4404      	add	r4, r0
 800ed22:	dc11      	bgt.n	800ed48 <_strtod_l+0x248>
 800ed24:	230a      	movs	r3, #10
 800ed26:	fb03 2909 	mla	r9, r3, r9, r2
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	e013      	b.n	800ed56 <_strtod_l+0x256>
 800ed2e:	4628      	mov	r0, r5
 800ed30:	e7dc      	b.n	800ecec <_strtod_l+0x1ec>
 800ed32:	2908      	cmp	r1, #8
 800ed34:	f101 0101 	add.w	r1, r1, #1
 800ed38:	dc02      	bgt.n	800ed40 <_strtod_l+0x240>
 800ed3a:	fb04 f909 	mul.w	r9, r4, r9
 800ed3e:	e7ea      	b.n	800ed16 <_strtod_l+0x216>
 800ed40:	2910      	cmp	r1, #16
 800ed42:	bfd8      	it	le
 800ed44:	4366      	mulle	r6, r4
 800ed46:	e7e6      	b.n	800ed16 <_strtod_l+0x216>
 800ed48:	2b0f      	cmp	r3, #15
 800ed4a:	dcee      	bgt.n	800ed2a <_strtod_l+0x22a>
 800ed4c:	230a      	movs	r3, #10
 800ed4e:	fb03 2606 	mla	r6, r3, r6, r2
 800ed52:	e7ea      	b.n	800ed2a <_strtod_l+0x22a>
 800ed54:	461c      	mov	r4, r3
 800ed56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ed58:	1c5a      	adds	r2, r3, #1
 800ed5a:	9211      	str	r2, [sp, #68]	@ 0x44
 800ed5c:	785a      	ldrb	r2, [r3, #1]
 800ed5e:	4608      	mov	r0, r1
 800ed60:	4623      	mov	r3, r4
 800ed62:	e7b7      	b.n	800ecd4 <_strtod_l+0x1d4>
 800ed64:	2301      	movs	r3, #1
 800ed66:	2700      	movs	r7, #0
 800ed68:	9306      	str	r3, [sp, #24]
 800ed6a:	e786      	b.n	800ec7a <_strtod_l+0x17a>
 800ed6c:	f04f 0e00 	mov.w	lr, #0
 800ed70:	f108 0202 	add.w	r2, r8, #2
 800ed74:	9211      	str	r2, [sp, #68]	@ 0x44
 800ed76:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ed7a:	e78f      	b.n	800ec9c <_strtod_l+0x19c>
 800ed7c:	f04f 0e01 	mov.w	lr, #1
 800ed80:	e7f6      	b.n	800ed70 <_strtod_l+0x270>
 800ed82:	bf00      	nop
 800ed84:	08010b58 	.word	0x08010b58
 800ed88:	08010b40 	.word	0x08010b40
 800ed8c:	7ff00000 	.word	0x7ff00000
 800ed90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ed92:	1c54      	adds	r4, r2, #1
 800ed94:	9411      	str	r4, [sp, #68]	@ 0x44
 800ed96:	7852      	ldrb	r2, [r2, #1]
 800ed98:	2a30      	cmp	r2, #48	@ 0x30
 800ed9a:	d0f9      	beq.n	800ed90 <_strtod_l+0x290>
 800ed9c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800eda0:	2c08      	cmp	r4, #8
 800eda2:	d881      	bhi.n	800eca8 <_strtod_l+0x1a8>
 800eda4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800eda8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800edaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800edac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800edae:	1c51      	adds	r1, r2, #1
 800edb0:	9111      	str	r1, [sp, #68]	@ 0x44
 800edb2:	7852      	ldrb	r2, [r2, #1]
 800edb4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800edb8:	2c09      	cmp	r4, #9
 800edba:	d938      	bls.n	800ee2e <_strtod_l+0x32e>
 800edbc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800edbe:	1b0c      	subs	r4, r1, r4
 800edc0:	2c08      	cmp	r4, #8
 800edc2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800edc6:	dc02      	bgt.n	800edce <_strtod_l+0x2ce>
 800edc8:	4564      	cmp	r4, ip
 800edca:	bfa8      	it	ge
 800edcc:	4664      	movge	r4, ip
 800edce:	f1be 0f00 	cmp.w	lr, #0
 800edd2:	d000      	beq.n	800edd6 <_strtod_l+0x2d6>
 800edd4:	4264      	negs	r4, r4
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d14e      	bne.n	800ee78 <_strtod_l+0x378>
 800edda:	9b07      	ldr	r3, [sp, #28]
 800eddc:	4318      	orrs	r0, r3
 800edde:	f47f aeca 	bne.w	800eb76 <_strtod_l+0x76>
 800ede2:	9b06      	ldr	r3, [sp, #24]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	f47f aee2 	bne.w	800ebae <_strtod_l+0xae>
 800edea:	2a69      	cmp	r2, #105	@ 0x69
 800edec:	d027      	beq.n	800ee3e <_strtod_l+0x33e>
 800edee:	dc24      	bgt.n	800ee3a <_strtod_l+0x33a>
 800edf0:	2a49      	cmp	r2, #73	@ 0x49
 800edf2:	d024      	beq.n	800ee3e <_strtod_l+0x33e>
 800edf4:	2a4e      	cmp	r2, #78	@ 0x4e
 800edf6:	f47f aeda 	bne.w	800ebae <_strtod_l+0xae>
 800edfa:	4997      	ldr	r1, [pc, #604]	@ (800f058 <_strtod_l+0x558>)
 800edfc:	a811      	add	r0, sp, #68	@ 0x44
 800edfe:	f001 fb63 	bl	80104c8 <__match>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	f43f aed3 	beq.w	800ebae <_strtod_l+0xae>
 800ee08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b28      	cmp	r3, #40	@ 0x28
 800ee0e:	d12d      	bne.n	800ee6c <_strtod_l+0x36c>
 800ee10:	4992      	ldr	r1, [pc, #584]	@ (800f05c <_strtod_l+0x55c>)
 800ee12:	aa14      	add	r2, sp, #80	@ 0x50
 800ee14:	a811      	add	r0, sp, #68	@ 0x44
 800ee16:	f001 fb6b 	bl	80104f0 <__hexnan>
 800ee1a:	2805      	cmp	r0, #5
 800ee1c:	d126      	bne.n	800ee6c <_strtod_l+0x36c>
 800ee1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ee20:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800ee24:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ee28:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ee2c:	e6a3      	b.n	800eb76 <_strtod_l+0x76>
 800ee2e:	240a      	movs	r4, #10
 800ee30:	fb04 2c0c 	mla	ip, r4, ip, r2
 800ee34:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800ee38:	e7b8      	b.n	800edac <_strtod_l+0x2ac>
 800ee3a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ee3c:	e7db      	b.n	800edf6 <_strtod_l+0x2f6>
 800ee3e:	4988      	ldr	r1, [pc, #544]	@ (800f060 <_strtod_l+0x560>)
 800ee40:	a811      	add	r0, sp, #68	@ 0x44
 800ee42:	f001 fb41 	bl	80104c8 <__match>
 800ee46:	2800      	cmp	r0, #0
 800ee48:	f43f aeb1 	beq.w	800ebae <_strtod_l+0xae>
 800ee4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ee4e:	4985      	ldr	r1, [pc, #532]	@ (800f064 <_strtod_l+0x564>)
 800ee50:	3b01      	subs	r3, #1
 800ee52:	a811      	add	r0, sp, #68	@ 0x44
 800ee54:	9311      	str	r3, [sp, #68]	@ 0x44
 800ee56:	f001 fb37 	bl	80104c8 <__match>
 800ee5a:	b910      	cbnz	r0, 800ee62 <_strtod_l+0x362>
 800ee5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ee5e:	3301      	adds	r3, #1
 800ee60:	9311      	str	r3, [sp, #68]	@ 0x44
 800ee62:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800f078 <_strtod_l+0x578>
 800ee66:	f04f 0a00 	mov.w	sl, #0
 800ee6a:	e684      	b.n	800eb76 <_strtod_l+0x76>
 800ee6c:	487e      	ldr	r0, [pc, #504]	@ (800f068 <_strtod_l+0x568>)
 800ee6e:	f001 f867 	bl	800ff40 <nan>
 800ee72:	ec5b ab10 	vmov	sl, fp, d0
 800ee76:	e67e      	b.n	800eb76 <_strtod_l+0x76>
 800ee78:	ee07 9a90 	vmov	s15, r9
 800ee7c:	1be2      	subs	r2, r4, r7
 800ee7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ee82:	2d00      	cmp	r5, #0
 800ee84:	bf08      	it	eq
 800ee86:	461d      	moveq	r5, r3
 800ee88:	2b10      	cmp	r3, #16
 800ee8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	bfa8      	it	ge
 800ee90:	2210      	movge	r2, #16
 800ee92:	2b09      	cmp	r3, #9
 800ee94:	ec5b ab17 	vmov	sl, fp, d7
 800ee98:	dc15      	bgt.n	800eec6 <_strtod_l+0x3c6>
 800ee9a:	1be1      	subs	r1, r4, r7
 800ee9c:	2900      	cmp	r1, #0
 800ee9e:	f43f ae6a 	beq.w	800eb76 <_strtod_l+0x76>
 800eea2:	eba4 0107 	sub.w	r1, r4, r7
 800eea6:	dd72      	ble.n	800ef8e <_strtod_l+0x48e>
 800eea8:	2916      	cmp	r1, #22
 800eeaa:	dc59      	bgt.n	800ef60 <_strtod_l+0x460>
 800eeac:	4b6f      	ldr	r3, [pc, #444]	@ (800f06c <_strtod_l+0x56c>)
 800eeae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eeb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eeb4:	ed93 7b00 	vldr	d7, [r3]
 800eeb8:	ec4b ab16 	vmov	d6, sl, fp
 800eebc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eec0:	ec5b ab17 	vmov	sl, fp, d7
 800eec4:	e657      	b.n	800eb76 <_strtod_l+0x76>
 800eec6:	4969      	ldr	r1, [pc, #420]	@ (800f06c <_strtod_l+0x56c>)
 800eec8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800eecc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800eed0:	ee06 6a90 	vmov	s13, r6
 800eed4:	2b0f      	cmp	r3, #15
 800eed6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800eeda:	eea7 6b05 	vfma.f64	d6, d7, d5
 800eede:	ec5b ab16 	vmov	sl, fp, d6
 800eee2:	ddda      	ble.n	800ee9a <_strtod_l+0x39a>
 800eee4:	1a9a      	subs	r2, r3, r2
 800eee6:	1be1      	subs	r1, r4, r7
 800eee8:	440a      	add	r2, r1
 800eeea:	2a00      	cmp	r2, #0
 800eeec:	f340 8094 	ble.w	800f018 <_strtod_l+0x518>
 800eef0:	f012 000f 	ands.w	r0, r2, #15
 800eef4:	d00a      	beq.n	800ef0c <_strtod_l+0x40c>
 800eef6:	495d      	ldr	r1, [pc, #372]	@ (800f06c <_strtod_l+0x56c>)
 800eef8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800eefc:	ed91 7b00 	vldr	d7, [r1]
 800ef00:	ec4b ab16 	vmov	d6, sl, fp
 800ef04:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ef08:	ec5b ab17 	vmov	sl, fp, d7
 800ef0c:	f032 020f 	bics.w	r2, r2, #15
 800ef10:	d073      	beq.n	800effa <_strtod_l+0x4fa>
 800ef12:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800ef16:	dd47      	ble.n	800efa8 <_strtod_l+0x4a8>
 800ef18:	2400      	movs	r4, #0
 800ef1a:	4625      	mov	r5, r4
 800ef1c:	9407      	str	r4, [sp, #28]
 800ef1e:	4626      	mov	r6, r4
 800ef20:	9a05      	ldr	r2, [sp, #20]
 800ef22:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f078 <_strtod_l+0x578>
 800ef26:	2322      	movs	r3, #34	@ 0x22
 800ef28:	6013      	str	r3, [r2, #0]
 800ef2a:	f04f 0a00 	mov.w	sl, #0
 800ef2e:	9b07      	ldr	r3, [sp, #28]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f43f ae20 	beq.w	800eb76 <_strtod_l+0x76>
 800ef36:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ef38:	9805      	ldr	r0, [sp, #20]
 800ef3a:	f7ff f957 	bl	800e1ec <_Bfree>
 800ef3e:	9805      	ldr	r0, [sp, #20]
 800ef40:	4631      	mov	r1, r6
 800ef42:	f7ff f953 	bl	800e1ec <_Bfree>
 800ef46:	9805      	ldr	r0, [sp, #20]
 800ef48:	4629      	mov	r1, r5
 800ef4a:	f7ff f94f 	bl	800e1ec <_Bfree>
 800ef4e:	9907      	ldr	r1, [sp, #28]
 800ef50:	9805      	ldr	r0, [sp, #20]
 800ef52:	f7ff f94b 	bl	800e1ec <_Bfree>
 800ef56:	9805      	ldr	r0, [sp, #20]
 800ef58:	4621      	mov	r1, r4
 800ef5a:	f7ff f947 	bl	800e1ec <_Bfree>
 800ef5e:	e60a      	b.n	800eb76 <_strtod_l+0x76>
 800ef60:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ef64:	1be0      	subs	r0, r4, r7
 800ef66:	4281      	cmp	r1, r0
 800ef68:	dbbc      	blt.n	800eee4 <_strtod_l+0x3e4>
 800ef6a:	4a40      	ldr	r2, [pc, #256]	@ (800f06c <_strtod_l+0x56c>)
 800ef6c:	f1c3 030f 	rsb	r3, r3, #15
 800ef70:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ef74:	ed91 7b00 	vldr	d7, [r1]
 800ef78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef7a:	ec4b ab16 	vmov	d6, sl, fp
 800ef7e:	1acb      	subs	r3, r1, r3
 800ef80:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ef84:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ef88:	ed92 6b00 	vldr	d6, [r2]
 800ef8c:	e796      	b.n	800eebc <_strtod_l+0x3bc>
 800ef8e:	3116      	adds	r1, #22
 800ef90:	dba8      	blt.n	800eee4 <_strtod_l+0x3e4>
 800ef92:	4b36      	ldr	r3, [pc, #216]	@ (800f06c <_strtod_l+0x56c>)
 800ef94:	1b3c      	subs	r4, r7, r4
 800ef96:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ef9a:	ed94 7b00 	vldr	d7, [r4]
 800ef9e:	ec4b ab16 	vmov	d6, sl, fp
 800efa2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800efa6:	e78b      	b.n	800eec0 <_strtod_l+0x3c0>
 800efa8:	2000      	movs	r0, #0
 800efaa:	ec4b ab17 	vmov	d7, sl, fp
 800efae:	4e30      	ldr	r6, [pc, #192]	@ (800f070 <_strtod_l+0x570>)
 800efb0:	1112      	asrs	r2, r2, #4
 800efb2:	4601      	mov	r1, r0
 800efb4:	2a01      	cmp	r2, #1
 800efb6:	dc23      	bgt.n	800f000 <_strtod_l+0x500>
 800efb8:	b108      	cbz	r0, 800efbe <_strtod_l+0x4be>
 800efba:	ec5b ab17 	vmov	sl, fp, d7
 800efbe:	4a2c      	ldr	r2, [pc, #176]	@ (800f070 <_strtod_l+0x570>)
 800efc0:	482c      	ldr	r0, [pc, #176]	@ (800f074 <_strtod_l+0x574>)
 800efc2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800efc6:	ed92 7b00 	vldr	d7, [r2]
 800efca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800efce:	ec4b ab16 	vmov	d6, sl, fp
 800efd2:	4a29      	ldr	r2, [pc, #164]	@ (800f078 <_strtod_l+0x578>)
 800efd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800efd8:	ee17 1a90 	vmov	r1, s15
 800efdc:	400a      	ands	r2, r1
 800efde:	4282      	cmp	r2, r0
 800efe0:	ec5b ab17 	vmov	sl, fp, d7
 800efe4:	d898      	bhi.n	800ef18 <_strtod_l+0x418>
 800efe6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800efea:	4282      	cmp	r2, r0
 800efec:	bf86      	itte	hi
 800efee:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800f07c <_strtod_l+0x57c>
 800eff2:	f04f 3aff 	movhi.w	sl, #4294967295
 800eff6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800effa:	2200      	movs	r2, #0
 800effc:	9206      	str	r2, [sp, #24]
 800effe:	e076      	b.n	800f0ee <_strtod_l+0x5ee>
 800f000:	f012 0f01 	tst.w	r2, #1
 800f004:	d004      	beq.n	800f010 <_strtod_l+0x510>
 800f006:	ed96 6b00 	vldr	d6, [r6]
 800f00a:	2001      	movs	r0, #1
 800f00c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f010:	3101      	adds	r1, #1
 800f012:	1052      	asrs	r2, r2, #1
 800f014:	3608      	adds	r6, #8
 800f016:	e7cd      	b.n	800efb4 <_strtod_l+0x4b4>
 800f018:	d0ef      	beq.n	800effa <_strtod_l+0x4fa>
 800f01a:	4252      	negs	r2, r2
 800f01c:	f012 000f 	ands.w	r0, r2, #15
 800f020:	d00a      	beq.n	800f038 <_strtod_l+0x538>
 800f022:	4912      	ldr	r1, [pc, #72]	@ (800f06c <_strtod_l+0x56c>)
 800f024:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f028:	ed91 7b00 	vldr	d7, [r1]
 800f02c:	ec4b ab16 	vmov	d6, sl, fp
 800f030:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f034:	ec5b ab17 	vmov	sl, fp, d7
 800f038:	1112      	asrs	r2, r2, #4
 800f03a:	d0de      	beq.n	800effa <_strtod_l+0x4fa>
 800f03c:	2a1f      	cmp	r2, #31
 800f03e:	dd1f      	ble.n	800f080 <_strtod_l+0x580>
 800f040:	2400      	movs	r4, #0
 800f042:	4625      	mov	r5, r4
 800f044:	9407      	str	r4, [sp, #28]
 800f046:	4626      	mov	r6, r4
 800f048:	9a05      	ldr	r2, [sp, #20]
 800f04a:	2322      	movs	r3, #34	@ 0x22
 800f04c:	f04f 0a00 	mov.w	sl, #0
 800f050:	f04f 0b00 	mov.w	fp, #0
 800f054:	6013      	str	r3, [r2, #0]
 800f056:	e76a      	b.n	800ef2e <_strtod_l+0x42e>
 800f058:	0801092d 	.word	0x0801092d
 800f05c:	08010b44 	.word	0x08010b44
 800f060:	08010925 	.word	0x08010925
 800f064:	0801095c 	.word	0x0801095c
 800f068:	08010ced 	.word	0x08010ced
 800f06c:	08010a78 	.word	0x08010a78
 800f070:	08010a50 	.word	0x08010a50
 800f074:	7ca00000 	.word	0x7ca00000
 800f078:	7ff00000 	.word	0x7ff00000
 800f07c:	7fefffff 	.word	0x7fefffff
 800f080:	f012 0110 	ands.w	r1, r2, #16
 800f084:	bf18      	it	ne
 800f086:	216a      	movne	r1, #106	@ 0x6a
 800f088:	9106      	str	r1, [sp, #24]
 800f08a:	ec4b ab17 	vmov	d7, sl, fp
 800f08e:	49b0      	ldr	r1, [pc, #704]	@ (800f350 <_strtod_l+0x850>)
 800f090:	2000      	movs	r0, #0
 800f092:	07d6      	lsls	r6, r2, #31
 800f094:	d504      	bpl.n	800f0a0 <_strtod_l+0x5a0>
 800f096:	ed91 6b00 	vldr	d6, [r1]
 800f09a:	2001      	movs	r0, #1
 800f09c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f0a0:	1052      	asrs	r2, r2, #1
 800f0a2:	f101 0108 	add.w	r1, r1, #8
 800f0a6:	d1f4      	bne.n	800f092 <_strtod_l+0x592>
 800f0a8:	b108      	cbz	r0, 800f0ae <_strtod_l+0x5ae>
 800f0aa:	ec5b ab17 	vmov	sl, fp, d7
 800f0ae:	9a06      	ldr	r2, [sp, #24]
 800f0b0:	b1b2      	cbz	r2, 800f0e0 <_strtod_l+0x5e0>
 800f0b2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800f0b6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800f0ba:	2a00      	cmp	r2, #0
 800f0bc:	4658      	mov	r0, fp
 800f0be:	dd0f      	ble.n	800f0e0 <_strtod_l+0x5e0>
 800f0c0:	2a1f      	cmp	r2, #31
 800f0c2:	dd55      	ble.n	800f170 <_strtod_l+0x670>
 800f0c4:	2a34      	cmp	r2, #52	@ 0x34
 800f0c6:	bfde      	ittt	le
 800f0c8:	f04f 32ff 	movle.w	r2, #4294967295
 800f0cc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800f0d0:	408a      	lslle	r2, r1
 800f0d2:	f04f 0a00 	mov.w	sl, #0
 800f0d6:	bfcc      	ite	gt
 800f0d8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f0dc:	ea02 0b00 	andle.w	fp, r2, r0
 800f0e0:	ec4b ab17 	vmov	d7, sl, fp
 800f0e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ec:	d0a8      	beq.n	800f040 <_strtod_l+0x540>
 800f0ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f0f0:	9805      	ldr	r0, [sp, #20]
 800f0f2:	f8cd 9000 	str.w	r9, [sp]
 800f0f6:	462a      	mov	r2, r5
 800f0f8:	f7ff f8e0 	bl	800e2bc <__s2b>
 800f0fc:	9007      	str	r0, [sp, #28]
 800f0fe:	2800      	cmp	r0, #0
 800f100:	f43f af0a 	beq.w	800ef18 <_strtod_l+0x418>
 800f104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f106:	1b3f      	subs	r7, r7, r4
 800f108:	2b00      	cmp	r3, #0
 800f10a:	bfb4      	ite	lt
 800f10c:	463b      	movlt	r3, r7
 800f10e:	2300      	movge	r3, #0
 800f110:	930a      	str	r3, [sp, #40]	@ 0x28
 800f112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f114:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800f340 <_strtod_l+0x840>
 800f118:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f11c:	2400      	movs	r4, #0
 800f11e:	930d      	str	r3, [sp, #52]	@ 0x34
 800f120:	4625      	mov	r5, r4
 800f122:	9b07      	ldr	r3, [sp, #28]
 800f124:	9805      	ldr	r0, [sp, #20]
 800f126:	6859      	ldr	r1, [r3, #4]
 800f128:	f7ff f820 	bl	800e16c <_Balloc>
 800f12c:	4606      	mov	r6, r0
 800f12e:	2800      	cmp	r0, #0
 800f130:	f43f aef6 	beq.w	800ef20 <_strtod_l+0x420>
 800f134:	9b07      	ldr	r3, [sp, #28]
 800f136:	691a      	ldr	r2, [r3, #16]
 800f138:	ec4b ab19 	vmov	d9, sl, fp
 800f13c:	3202      	adds	r2, #2
 800f13e:	f103 010c 	add.w	r1, r3, #12
 800f142:	0092      	lsls	r2, r2, #2
 800f144:	300c      	adds	r0, #12
 800f146:	f7fe f91c 	bl	800d382 <memcpy>
 800f14a:	eeb0 0b49 	vmov.f64	d0, d9
 800f14e:	9805      	ldr	r0, [sp, #20]
 800f150:	aa14      	add	r2, sp, #80	@ 0x50
 800f152:	a913      	add	r1, sp, #76	@ 0x4c
 800f154:	f7ff fbee 	bl	800e934 <__d2b>
 800f158:	9012      	str	r0, [sp, #72]	@ 0x48
 800f15a:	2800      	cmp	r0, #0
 800f15c:	f43f aee0 	beq.w	800ef20 <_strtod_l+0x420>
 800f160:	9805      	ldr	r0, [sp, #20]
 800f162:	2101      	movs	r1, #1
 800f164:	f7ff f940 	bl	800e3e8 <__i2b>
 800f168:	4605      	mov	r5, r0
 800f16a:	b940      	cbnz	r0, 800f17e <_strtod_l+0x67e>
 800f16c:	2500      	movs	r5, #0
 800f16e:	e6d7      	b.n	800ef20 <_strtod_l+0x420>
 800f170:	f04f 31ff 	mov.w	r1, #4294967295
 800f174:	fa01 f202 	lsl.w	r2, r1, r2
 800f178:	ea02 0a0a 	and.w	sl, r2, sl
 800f17c:	e7b0      	b.n	800f0e0 <_strtod_l+0x5e0>
 800f17e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800f180:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f182:	2f00      	cmp	r7, #0
 800f184:	bfab      	itete	ge
 800f186:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800f188:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800f18a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800f18e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800f192:	bfac      	ite	ge
 800f194:	eb07 0903 	addge.w	r9, r7, r3
 800f198:	eba3 0807 	sublt.w	r8, r3, r7
 800f19c:	9b06      	ldr	r3, [sp, #24]
 800f19e:	1aff      	subs	r7, r7, r3
 800f1a0:	4417      	add	r7, r2
 800f1a2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800f1a6:	4a6b      	ldr	r2, [pc, #428]	@ (800f354 <_strtod_l+0x854>)
 800f1a8:	3f01      	subs	r7, #1
 800f1aa:	4297      	cmp	r7, r2
 800f1ac:	da51      	bge.n	800f252 <_strtod_l+0x752>
 800f1ae:	1bd1      	subs	r1, r2, r7
 800f1b0:	291f      	cmp	r1, #31
 800f1b2:	eba3 0301 	sub.w	r3, r3, r1
 800f1b6:	f04f 0201 	mov.w	r2, #1
 800f1ba:	dc3e      	bgt.n	800f23a <_strtod_l+0x73a>
 800f1bc:	408a      	lsls	r2, r1
 800f1be:	920c      	str	r2, [sp, #48]	@ 0x30
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f1c4:	eb09 0703 	add.w	r7, r9, r3
 800f1c8:	4498      	add	r8, r3
 800f1ca:	9b06      	ldr	r3, [sp, #24]
 800f1cc:	45b9      	cmp	r9, r7
 800f1ce:	4498      	add	r8, r3
 800f1d0:	464b      	mov	r3, r9
 800f1d2:	bfa8      	it	ge
 800f1d4:	463b      	movge	r3, r7
 800f1d6:	4543      	cmp	r3, r8
 800f1d8:	bfa8      	it	ge
 800f1da:	4643      	movge	r3, r8
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	bfc2      	ittt	gt
 800f1e0:	1aff      	subgt	r7, r7, r3
 800f1e2:	eba8 0803 	subgt.w	r8, r8, r3
 800f1e6:	eba9 0903 	subgt.w	r9, r9, r3
 800f1ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	dd16      	ble.n	800f21e <_strtod_l+0x71e>
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	9805      	ldr	r0, [sp, #20]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	f7ff f9b7 	bl	800e568 <__pow5mult>
 800f1fa:	4605      	mov	r5, r0
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d0b5      	beq.n	800f16c <_strtod_l+0x66c>
 800f200:	4601      	mov	r1, r0
 800f202:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f204:	9805      	ldr	r0, [sp, #20]
 800f206:	f7ff f905 	bl	800e414 <__multiply>
 800f20a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f20c:	2800      	cmp	r0, #0
 800f20e:	f43f ae87 	beq.w	800ef20 <_strtod_l+0x420>
 800f212:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f214:	9805      	ldr	r0, [sp, #20]
 800f216:	f7fe ffe9 	bl	800e1ec <_Bfree>
 800f21a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f21c:	9312      	str	r3, [sp, #72]	@ 0x48
 800f21e:	2f00      	cmp	r7, #0
 800f220:	dc1b      	bgt.n	800f25a <_strtod_l+0x75a>
 800f222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f224:	2b00      	cmp	r3, #0
 800f226:	dd21      	ble.n	800f26c <_strtod_l+0x76c>
 800f228:	4631      	mov	r1, r6
 800f22a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f22c:	9805      	ldr	r0, [sp, #20]
 800f22e:	f7ff f99b 	bl	800e568 <__pow5mult>
 800f232:	4606      	mov	r6, r0
 800f234:	b9d0      	cbnz	r0, 800f26c <_strtod_l+0x76c>
 800f236:	2600      	movs	r6, #0
 800f238:	e672      	b.n	800ef20 <_strtod_l+0x420>
 800f23a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800f23e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800f242:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800f246:	37e2      	adds	r7, #226	@ 0xe2
 800f248:	fa02 f107 	lsl.w	r1, r2, r7
 800f24c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f24e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f250:	e7b8      	b.n	800f1c4 <_strtod_l+0x6c4>
 800f252:	2200      	movs	r2, #0
 800f254:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f256:	2201      	movs	r2, #1
 800f258:	e7f9      	b.n	800f24e <_strtod_l+0x74e>
 800f25a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f25c:	9805      	ldr	r0, [sp, #20]
 800f25e:	463a      	mov	r2, r7
 800f260:	f7ff f9dc 	bl	800e61c <__lshift>
 800f264:	9012      	str	r0, [sp, #72]	@ 0x48
 800f266:	2800      	cmp	r0, #0
 800f268:	d1db      	bne.n	800f222 <_strtod_l+0x722>
 800f26a:	e659      	b.n	800ef20 <_strtod_l+0x420>
 800f26c:	f1b8 0f00 	cmp.w	r8, #0
 800f270:	dd07      	ble.n	800f282 <_strtod_l+0x782>
 800f272:	4631      	mov	r1, r6
 800f274:	9805      	ldr	r0, [sp, #20]
 800f276:	4642      	mov	r2, r8
 800f278:	f7ff f9d0 	bl	800e61c <__lshift>
 800f27c:	4606      	mov	r6, r0
 800f27e:	2800      	cmp	r0, #0
 800f280:	d0d9      	beq.n	800f236 <_strtod_l+0x736>
 800f282:	f1b9 0f00 	cmp.w	r9, #0
 800f286:	dd08      	ble.n	800f29a <_strtod_l+0x79a>
 800f288:	4629      	mov	r1, r5
 800f28a:	9805      	ldr	r0, [sp, #20]
 800f28c:	464a      	mov	r2, r9
 800f28e:	f7ff f9c5 	bl	800e61c <__lshift>
 800f292:	4605      	mov	r5, r0
 800f294:	2800      	cmp	r0, #0
 800f296:	f43f ae43 	beq.w	800ef20 <_strtod_l+0x420>
 800f29a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f29c:	9805      	ldr	r0, [sp, #20]
 800f29e:	4632      	mov	r2, r6
 800f2a0:	f7ff fa44 	bl	800e72c <__mdiff>
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	f43f ae3a 	beq.w	800ef20 <_strtod_l+0x420>
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800f2b2:	60c3      	str	r3, [r0, #12]
 800f2b4:	4629      	mov	r1, r5
 800f2b6:	f7ff fa1d 	bl	800e6f4 <__mcmp>
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	da4e      	bge.n	800f35c <_strtod_l+0x85c>
 800f2be:	ea58 080a 	orrs.w	r8, r8, sl
 800f2c2:	d174      	bne.n	800f3ae <_strtod_l+0x8ae>
 800f2c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d170      	bne.n	800f3ae <_strtod_l+0x8ae>
 800f2cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f2d0:	0d1b      	lsrs	r3, r3, #20
 800f2d2:	051b      	lsls	r3, r3, #20
 800f2d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f2d8:	d969      	bls.n	800f3ae <_strtod_l+0x8ae>
 800f2da:	6963      	ldr	r3, [r4, #20]
 800f2dc:	b913      	cbnz	r3, 800f2e4 <_strtod_l+0x7e4>
 800f2de:	6923      	ldr	r3, [r4, #16]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	dd64      	ble.n	800f3ae <_strtod_l+0x8ae>
 800f2e4:	4621      	mov	r1, r4
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	9805      	ldr	r0, [sp, #20]
 800f2ea:	f7ff f997 	bl	800e61c <__lshift>
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	f7ff f9ff 	bl	800e6f4 <__mcmp>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	dd59      	ble.n	800f3ae <_strtod_l+0x8ae>
 800f2fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f2fe:	9a06      	ldr	r2, [sp, #24]
 800f300:	0d1b      	lsrs	r3, r3, #20
 800f302:	051b      	lsls	r3, r3, #20
 800f304:	2a00      	cmp	r2, #0
 800f306:	d070      	beq.n	800f3ea <_strtod_l+0x8ea>
 800f308:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f30c:	d86d      	bhi.n	800f3ea <_strtod_l+0x8ea>
 800f30e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f312:	f67f ae99 	bls.w	800f048 <_strtod_l+0x548>
 800f316:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800f348 <_strtod_l+0x848>
 800f31a:	ec4b ab16 	vmov	d6, sl, fp
 800f31e:	4b0e      	ldr	r3, [pc, #56]	@ (800f358 <_strtod_l+0x858>)
 800f320:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f324:	ee17 2a90 	vmov	r2, s15
 800f328:	4013      	ands	r3, r2
 800f32a:	ec5b ab17 	vmov	sl, fp, d7
 800f32e:	2b00      	cmp	r3, #0
 800f330:	f47f ae01 	bne.w	800ef36 <_strtod_l+0x436>
 800f334:	9a05      	ldr	r2, [sp, #20]
 800f336:	2322      	movs	r3, #34	@ 0x22
 800f338:	6013      	str	r3, [r2, #0]
 800f33a:	e5fc      	b.n	800ef36 <_strtod_l+0x436>
 800f33c:	f3af 8000 	nop.w
 800f340:	ffc00000 	.word	0xffc00000
 800f344:	41dfffff 	.word	0x41dfffff
 800f348:	00000000 	.word	0x00000000
 800f34c:	39500000 	.word	0x39500000
 800f350:	08010b70 	.word	0x08010b70
 800f354:	fffffc02 	.word	0xfffffc02
 800f358:	7ff00000 	.word	0x7ff00000
 800f35c:	46d9      	mov	r9, fp
 800f35e:	d15d      	bne.n	800f41c <_strtod_l+0x91c>
 800f360:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f364:	f1b8 0f00 	cmp.w	r8, #0
 800f368:	d02a      	beq.n	800f3c0 <_strtod_l+0x8c0>
 800f36a:	4aab      	ldr	r2, [pc, #684]	@ (800f618 <_strtod_l+0xb18>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d12a      	bne.n	800f3c6 <_strtod_l+0x8c6>
 800f370:	9b06      	ldr	r3, [sp, #24]
 800f372:	4652      	mov	r2, sl
 800f374:	b1fb      	cbz	r3, 800f3b6 <_strtod_l+0x8b6>
 800f376:	4ba9      	ldr	r3, [pc, #676]	@ (800f61c <_strtod_l+0xb1c>)
 800f378:	ea0b 0303 	and.w	r3, fp, r3
 800f37c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f380:	f04f 31ff 	mov.w	r1, #4294967295
 800f384:	d81a      	bhi.n	800f3bc <_strtod_l+0x8bc>
 800f386:	0d1b      	lsrs	r3, r3, #20
 800f388:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f38c:	fa01 f303 	lsl.w	r3, r1, r3
 800f390:	429a      	cmp	r2, r3
 800f392:	d118      	bne.n	800f3c6 <_strtod_l+0x8c6>
 800f394:	4ba2      	ldr	r3, [pc, #648]	@ (800f620 <_strtod_l+0xb20>)
 800f396:	4599      	cmp	r9, r3
 800f398:	d102      	bne.n	800f3a0 <_strtod_l+0x8a0>
 800f39a:	3201      	adds	r2, #1
 800f39c:	f43f adc0 	beq.w	800ef20 <_strtod_l+0x420>
 800f3a0:	4b9e      	ldr	r3, [pc, #632]	@ (800f61c <_strtod_l+0xb1c>)
 800f3a2:	ea09 0303 	and.w	r3, r9, r3
 800f3a6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800f3aa:	f04f 0a00 	mov.w	sl, #0
 800f3ae:	9b06      	ldr	r3, [sp, #24]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1b0      	bne.n	800f316 <_strtod_l+0x816>
 800f3b4:	e5bf      	b.n	800ef36 <_strtod_l+0x436>
 800f3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ba:	e7e9      	b.n	800f390 <_strtod_l+0x890>
 800f3bc:	460b      	mov	r3, r1
 800f3be:	e7e7      	b.n	800f390 <_strtod_l+0x890>
 800f3c0:	ea53 030a 	orrs.w	r3, r3, sl
 800f3c4:	d099      	beq.n	800f2fa <_strtod_l+0x7fa>
 800f3c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3c8:	b1c3      	cbz	r3, 800f3fc <_strtod_l+0x8fc>
 800f3ca:	ea13 0f09 	tst.w	r3, r9
 800f3ce:	d0ee      	beq.n	800f3ae <_strtod_l+0x8ae>
 800f3d0:	9a06      	ldr	r2, [sp, #24]
 800f3d2:	4650      	mov	r0, sl
 800f3d4:	4659      	mov	r1, fp
 800f3d6:	f1b8 0f00 	cmp.w	r8, #0
 800f3da:	d013      	beq.n	800f404 <_strtod_l+0x904>
 800f3dc:	f7ff fb75 	bl	800eaca <sulp>
 800f3e0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800f3e4:	ec5b ab17 	vmov	sl, fp, d7
 800f3e8:	e7e1      	b.n	800f3ae <_strtod_l+0x8ae>
 800f3ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f3ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f3f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f3f6:	f04f 3aff 	mov.w	sl, #4294967295
 800f3fa:	e7d8      	b.n	800f3ae <_strtod_l+0x8ae>
 800f3fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3fe:	ea13 0f0a 	tst.w	r3, sl
 800f402:	e7e4      	b.n	800f3ce <_strtod_l+0x8ce>
 800f404:	f7ff fb61 	bl	800eaca <sulp>
 800f408:	ee39 0b40 	vsub.f64	d0, d9, d0
 800f40c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f414:	ec5b ab10 	vmov	sl, fp, d0
 800f418:	d1c9      	bne.n	800f3ae <_strtod_l+0x8ae>
 800f41a:	e615      	b.n	800f048 <_strtod_l+0x548>
 800f41c:	4629      	mov	r1, r5
 800f41e:	4620      	mov	r0, r4
 800f420:	f7ff fae0 	bl	800e9e4 <__ratio>
 800f424:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800f428:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f430:	d85d      	bhi.n	800f4ee <_strtod_l+0x9ee>
 800f432:	f1b8 0f00 	cmp.w	r8, #0
 800f436:	d164      	bne.n	800f502 <_strtod_l+0xa02>
 800f438:	f1ba 0f00 	cmp.w	sl, #0
 800f43c:	d14b      	bne.n	800f4d6 <_strtod_l+0x9d6>
 800f43e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f442:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d160      	bne.n	800f50c <_strtod_l+0xa0c>
 800f44a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800f44e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f456:	d401      	bmi.n	800f45c <_strtod_l+0x95c>
 800f458:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f45c:	eeb1 ab48 	vneg.f64	d10, d8
 800f460:	486e      	ldr	r0, [pc, #440]	@ (800f61c <_strtod_l+0xb1c>)
 800f462:	4970      	ldr	r1, [pc, #448]	@ (800f624 <_strtod_l+0xb24>)
 800f464:	ea09 0700 	and.w	r7, r9, r0
 800f468:	428f      	cmp	r7, r1
 800f46a:	ec53 2b1a 	vmov	r2, r3, d10
 800f46e:	d17d      	bne.n	800f56c <_strtod_l+0xa6c>
 800f470:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800f474:	ec4b ab1c 	vmov	d12, sl, fp
 800f478:	eeb0 0b4c 	vmov.f64	d0, d12
 800f47c:	f7ff f9ea 	bl	800e854 <__ulp>
 800f480:	4866      	ldr	r0, [pc, #408]	@ (800f61c <_strtod_l+0xb1c>)
 800f482:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800f486:	ee1c 3a90 	vmov	r3, s25
 800f48a:	4a67      	ldr	r2, [pc, #412]	@ (800f628 <_strtod_l+0xb28>)
 800f48c:	ea03 0100 	and.w	r1, r3, r0
 800f490:	4291      	cmp	r1, r2
 800f492:	ec5b ab1c 	vmov	sl, fp, d12
 800f496:	d93c      	bls.n	800f512 <_strtod_l+0xa12>
 800f498:	ee19 2a90 	vmov	r2, s19
 800f49c:	4b60      	ldr	r3, [pc, #384]	@ (800f620 <_strtod_l+0xb20>)
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d104      	bne.n	800f4ac <_strtod_l+0x9ac>
 800f4a2:	ee19 3a10 	vmov	r3, s18
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	f43f ad3a 	beq.w	800ef20 <_strtod_l+0x420>
 800f4ac:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800f620 <_strtod_l+0xb20>
 800f4b0:	f04f 3aff 	mov.w	sl, #4294967295
 800f4b4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f4b6:	9805      	ldr	r0, [sp, #20]
 800f4b8:	f7fe fe98 	bl	800e1ec <_Bfree>
 800f4bc:	9805      	ldr	r0, [sp, #20]
 800f4be:	4631      	mov	r1, r6
 800f4c0:	f7fe fe94 	bl	800e1ec <_Bfree>
 800f4c4:	9805      	ldr	r0, [sp, #20]
 800f4c6:	4629      	mov	r1, r5
 800f4c8:	f7fe fe90 	bl	800e1ec <_Bfree>
 800f4cc:	9805      	ldr	r0, [sp, #20]
 800f4ce:	4621      	mov	r1, r4
 800f4d0:	f7fe fe8c 	bl	800e1ec <_Bfree>
 800f4d4:	e625      	b.n	800f122 <_strtod_l+0x622>
 800f4d6:	f1ba 0f01 	cmp.w	sl, #1
 800f4da:	d103      	bne.n	800f4e4 <_strtod_l+0x9e4>
 800f4dc:	f1bb 0f00 	cmp.w	fp, #0
 800f4e0:	f43f adb2 	beq.w	800f048 <_strtod_l+0x548>
 800f4e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800f4e8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f4ec:	e7b8      	b.n	800f460 <_strtod_l+0x960>
 800f4ee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f4f2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f4f6:	f1b8 0f00 	cmp.w	r8, #0
 800f4fa:	d0af      	beq.n	800f45c <_strtod_l+0x95c>
 800f4fc:	eeb0 ab48 	vmov.f64	d10, d8
 800f500:	e7ae      	b.n	800f460 <_strtod_l+0x960>
 800f502:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800f506:	eeb0 8b4a 	vmov.f64	d8, d10
 800f50a:	e7a9      	b.n	800f460 <_strtod_l+0x960>
 800f50c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800f510:	e7a6      	b.n	800f460 <_strtod_l+0x960>
 800f512:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f516:	9b06      	ldr	r3, [sp, #24]
 800f518:	46d9      	mov	r9, fp
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1ca      	bne.n	800f4b4 <_strtod_l+0x9b4>
 800f51e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f522:	0d1b      	lsrs	r3, r3, #20
 800f524:	051b      	lsls	r3, r3, #20
 800f526:	429f      	cmp	r7, r3
 800f528:	d1c4      	bne.n	800f4b4 <_strtod_l+0x9b4>
 800f52a:	ec51 0b18 	vmov	r0, r1, d8
 800f52e:	f7f1 f91b 	bl	8000768 <__aeabi_d2lz>
 800f532:	f7f1 f8d3 	bl	80006dc <__aeabi_l2d>
 800f536:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800f53a:	ec41 0b17 	vmov	d7, r0, r1
 800f53e:	ea49 090a 	orr.w	r9, r9, sl
 800f542:	ea59 0908 	orrs.w	r9, r9, r8
 800f546:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f54a:	d03c      	beq.n	800f5c6 <_strtod_l+0xac6>
 800f54c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f600 <_strtod_l+0xb00>
 800f550:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f558:	f53f aced 	bmi.w	800ef36 <_strtod_l+0x436>
 800f55c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f608 <_strtod_l+0xb08>
 800f560:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f568:	dda4      	ble.n	800f4b4 <_strtod_l+0x9b4>
 800f56a:	e4e4      	b.n	800ef36 <_strtod_l+0x436>
 800f56c:	9906      	ldr	r1, [sp, #24]
 800f56e:	b1e1      	cbz	r1, 800f5aa <_strtod_l+0xaaa>
 800f570:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800f574:	d819      	bhi.n	800f5aa <_strtod_l+0xaaa>
 800f576:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800f57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57e:	d811      	bhi.n	800f5a4 <_strtod_l+0xaa4>
 800f580:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800f584:	ee18 3a10 	vmov	r3, s16
 800f588:	2b01      	cmp	r3, #1
 800f58a:	bf38      	it	cc
 800f58c:	2301      	movcc	r3, #1
 800f58e:	ee08 3a10 	vmov	s16, r3
 800f592:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800f596:	f1b8 0f00 	cmp.w	r8, #0
 800f59a:	d111      	bne.n	800f5c0 <_strtod_l+0xac0>
 800f59c:	eeb1 7b48 	vneg.f64	d7, d8
 800f5a0:	ec53 2b17 	vmov	r2, r3, d7
 800f5a4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800f5a8:	1bcb      	subs	r3, r1, r7
 800f5aa:	eeb0 0b49 	vmov.f64	d0, d9
 800f5ae:	ec43 2b1a 	vmov	d10, r2, r3
 800f5b2:	f7ff f94f 	bl	800e854 <__ulp>
 800f5b6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800f5ba:	ec5b ab19 	vmov	sl, fp, d9
 800f5be:	e7aa      	b.n	800f516 <_strtod_l+0xa16>
 800f5c0:	eeb0 7b48 	vmov.f64	d7, d8
 800f5c4:	e7ec      	b.n	800f5a0 <_strtod_l+0xaa0>
 800f5c6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800f610 <_strtod_l+0xb10>
 800f5ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d2:	f57f af6f 	bpl.w	800f4b4 <_strtod_l+0x9b4>
 800f5d6:	e4ae      	b.n	800ef36 <_strtod_l+0x436>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	9308      	str	r3, [sp, #32]
 800f5dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f5e0:	6013      	str	r3, [r2, #0]
 800f5e2:	f7ff bacc 	b.w	800eb7e <_strtod_l+0x7e>
 800f5e6:	2a65      	cmp	r2, #101	@ 0x65
 800f5e8:	f43f abbc 	beq.w	800ed64 <_strtod_l+0x264>
 800f5ec:	2a45      	cmp	r2, #69	@ 0x45
 800f5ee:	f43f abb9 	beq.w	800ed64 <_strtod_l+0x264>
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	9306      	str	r3, [sp, #24]
 800f5f6:	f7ff bbf0 	b.w	800edda <_strtod_l+0x2da>
 800f5fa:	bf00      	nop
 800f5fc:	f3af 8000 	nop.w
 800f600:	94a03595 	.word	0x94a03595
 800f604:	3fdfffff 	.word	0x3fdfffff
 800f608:	35afe535 	.word	0x35afe535
 800f60c:	3fe00000 	.word	0x3fe00000
 800f610:	94a03595 	.word	0x94a03595
 800f614:	3fcfffff 	.word	0x3fcfffff
 800f618:	000fffff 	.word	0x000fffff
 800f61c:	7ff00000 	.word	0x7ff00000
 800f620:	7fefffff 	.word	0x7fefffff
 800f624:	7fe00000 	.word	0x7fe00000
 800f628:	7c9fffff 	.word	0x7c9fffff

0800f62c <_strtod_r>:
 800f62c:	4b01      	ldr	r3, [pc, #4]	@ (800f634 <_strtod_r+0x8>)
 800f62e:	f7ff ba67 	b.w	800eb00 <_strtod_l>
 800f632:	bf00      	nop
 800f634:	2400006c 	.word	0x2400006c

0800f638 <_strtol_l.constprop.0>:
 800f638:	2b24      	cmp	r3, #36	@ 0x24
 800f63a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f63e:	4686      	mov	lr, r0
 800f640:	4690      	mov	r8, r2
 800f642:	d801      	bhi.n	800f648 <_strtol_l.constprop.0+0x10>
 800f644:	2b01      	cmp	r3, #1
 800f646:	d106      	bne.n	800f656 <_strtol_l.constprop.0+0x1e>
 800f648:	f7fd fe6e 	bl	800d328 <__errno>
 800f64c:	2316      	movs	r3, #22
 800f64e:	6003      	str	r3, [r0, #0]
 800f650:	2000      	movs	r0, #0
 800f652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f656:	4834      	ldr	r0, [pc, #208]	@ (800f728 <_strtol_l.constprop.0+0xf0>)
 800f658:	460d      	mov	r5, r1
 800f65a:	462a      	mov	r2, r5
 800f65c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f660:	5d06      	ldrb	r6, [r0, r4]
 800f662:	f016 0608 	ands.w	r6, r6, #8
 800f666:	d1f8      	bne.n	800f65a <_strtol_l.constprop.0+0x22>
 800f668:	2c2d      	cmp	r4, #45	@ 0x2d
 800f66a:	d12d      	bne.n	800f6c8 <_strtol_l.constprop.0+0x90>
 800f66c:	782c      	ldrb	r4, [r5, #0]
 800f66e:	2601      	movs	r6, #1
 800f670:	1c95      	adds	r5, r2, #2
 800f672:	f033 0210 	bics.w	r2, r3, #16
 800f676:	d109      	bne.n	800f68c <_strtol_l.constprop.0+0x54>
 800f678:	2c30      	cmp	r4, #48	@ 0x30
 800f67a:	d12a      	bne.n	800f6d2 <_strtol_l.constprop.0+0x9a>
 800f67c:	782a      	ldrb	r2, [r5, #0]
 800f67e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f682:	2a58      	cmp	r2, #88	@ 0x58
 800f684:	d125      	bne.n	800f6d2 <_strtol_l.constprop.0+0x9a>
 800f686:	786c      	ldrb	r4, [r5, #1]
 800f688:	2310      	movs	r3, #16
 800f68a:	3502      	adds	r5, #2
 800f68c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f690:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f694:	2200      	movs	r2, #0
 800f696:	fbbc f9f3 	udiv	r9, ip, r3
 800f69a:	4610      	mov	r0, r2
 800f69c:	fb03 ca19 	mls	sl, r3, r9, ip
 800f6a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f6a4:	2f09      	cmp	r7, #9
 800f6a6:	d81b      	bhi.n	800f6e0 <_strtol_l.constprop.0+0xa8>
 800f6a8:	463c      	mov	r4, r7
 800f6aa:	42a3      	cmp	r3, r4
 800f6ac:	dd27      	ble.n	800f6fe <_strtol_l.constprop.0+0xc6>
 800f6ae:	1c57      	adds	r7, r2, #1
 800f6b0:	d007      	beq.n	800f6c2 <_strtol_l.constprop.0+0x8a>
 800f6b2:	4581      	cmp	r9, r0
 800f6b4:	d320      	bcc.n	800f6f8 <_strtol_l.constprop.0+0xc0>
 800f6b6:	d101      	bne.n	800f6bc <_strtol_l.constprop.0+0x84>
 800f6b8:	45a2      	cmp	sl, r4
 800f6ba:	db1d      	blt.n	800f6f8 <_strtol_l.constprop.0+0xc0>
 800f6bc:	fb00 4003 	mla	r0, r0, r3, r4
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f6c6:	e7eb      	b.n	800f6a0 <_strtol_l.constprop.0+0x68>
 800f6c8:	2c2b      	cmp	r4, #43	@ 0x2b
 800f6ca:	bf04      	itt	eq
 800f6cc:	782c      	ldrbeq	r4, [r5, #0]
 800f6ce:	1c95      	addeq	r5, r2, #2
 800f6d0:	e7cf      	b.n	800f672 <_strtol_l.constprop.0+0x3a>
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1da      	bne.n	800f68c <_strtol_l.constprop.0+0x54>
 800f6d6:	2c30      	cmp	r4, #48	@ 0x30
 800f6d8:	bf0c      	ite	eq
 800f6da:	2308      	moveq	r3, #8
 800f6dc:	230a      	movne	r3, #10
 800f6de:	e7d5      	b.n	800f68c <_strtol_l.constprop.0+0x54>
 800f6e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f6e4:	2f19      	cmp	r7, #25
 800f6e6:	d801      	bhi.n	800f6ec <_strtol_l.constprop.0+0xb4>
 800f6e8:	3c37      	subs	r4, #55	@ 0x37
 800f6ea:	e7de      	b.n	800f6aa <_strtol_l.constprop.0+0x72>
 800f6ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f6f0:	2f19      	cmp	r7, #25
 800f6f2:	d804      	bhi.n	800f6fe <_strtol_l.constprop.0+0xc6>
 800f6f4:	3c57      	subs	r4, #87	@ 0x57
 800f6f6:	e7d8      	b.n	800f6aa <_strtol_l.constprop.0+0x72>
 800f6f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f6fc:	e7e1      	b.n	800f6c2 <_strtol_l.constprop.0+0x8a>
 800f6fe:	1c53      	adds	r3, r2, #1
 800f700:	d108      	bne.n	800f714 <_strtol_l.constprop.0+0xdc>
 800f702:	2322      	movs	r3, #34	@ 0x22
 800f704:	f8ce 3000 	str.w	r3, [lr]
 800f708:	4660      	mov	r0, ip
 800f70a:	f1b8 0f00 	cmp.w	r8, #0
 800f70e:	d0a0      	beq.n	800f652 <_strtol_l.constprop.0+0x1a>
 800f710:	1e69      	subs	r1, r5, #1
 800f712:	e006      	b.n	800f722 <_strtol_l.constprop.0+0xea>
 800f714:	b106      	cbz	r6, 800f718 <_strtol_l.constprop.0+0xe0>
 800f716:	4240      	negs	r0, r0
 800f718:	f1b8 0f00 	cmp.w	r8, #0
 800f71c:	d099      	beq.n	800f652 <_strtol_l.constprop.0+0x1a>
 800f71e:	2a00      	cmp	r2, #0
 800f720:	d1f6      	bne.n	800f710 <_strtol_l.constprop.0+0xd8>
 800f722:	f8c8 1000 	str.w	r1, [r8]
 800f726:	e794      	b.n	800f652 <_strtol_l.constprop.0+0x1a>
 800f728:	08010b99 	.word	0x08010b99

0800f72c <_strtol_r>:
 800f72c:	f7ff bf84 	b.w	800f638 <_strtol_l.constprop.0>

0800f730 <__ssputs_r>:
 800f730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f734:	688e      	ldr	r6, [r1, #8]
 800f736:	461f      	mov	r7, r3
 800f738:	42be      	cmp	r6, r7
 800f73a:	680b      	ldr	r3, [r1, #0]
 800f73c:	4682      	mov	sl, r0
 800f73e:	460c      	mov	r4, r1
 800f740:	4690      	mov	r8, r2
 800f742:	d82d      	bhi.n	800f7a0 <__ssputs_r+0x70>
 800f744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f748:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f74c:	d026      	beq.n	800f79c <__ssputs_r+0x6c>
 800f74e:	6965      	ldr	r5, [r4, #20]
 800f750:	6909      	ldr	r1, [r1, #16]
 800f752:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f756:	eba3 0901 	sub.w	r9, r3, r1
 800f75a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f75e:	1c7b      	adds	r3, r7, #1
 800f760:	444b      	add	r3, r9
 800f762:	106d      	asrs	r5, r5, #1
 800f764:	429d      	cmp	r5, r3
 800f766:	bf38      	it	cc
 800f768:	461d      	movcc	r5, r3
 800f76a:	0553      	lsls	r3, r2, #21
 800f76c:	d527      	bpl.n	800f7be <__ssputs_r+0x8e>
 800f76e:	4629      	mov	r1, r5
 800f770:	f7fe fc70 	bl	800e054 <_malloc_r>
 800f774:	4606      	mov	r6, r0
 800f776:	b360      	cbz	r0, 800f7d2 <__ssputs_r+0xa2>
 800f778:	6921      	ldr	r1, [r4, #16]
 800f77a:	464a      	mov	r2, r9
 800f77c:	f7fd fe01 	bl	800d382 <memcpy>
 800f780:	89a3      	ldrh	r3, [r4, #12]
 800f782:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f78a:	81a3      	strh	r3, [r4, #12]
 800f78c:	6126      	str	r6, [r4, #16]
 800f78e:	6165      	str	r5, [r4, #20]
 800f790:	444e      	add	r6, r9
 800f792:	eba5 0509 	sub.w	r5, r5, r9
 800f796:	6026      	str	r6, [r4, #0]
 800f798:	60a5      	str	r5, [r4, #8]
 800f79a:	463e      	mov	r6, r7
 800f79c:	42be      	cmp	r6, r7
 800f79e:	d900      	bls.n	800f7a2 <__ssputs_r+0x72>
 800f7a0:	463e      	mov	r6, r7
 800f7a2:	6820      	ldr	r0, [r4, #0]
 800f7a4:	4632      	mov	r2, r6
 800f7a6:	4641      	mov	r1, r8
 800f7a8:	f000 fb6a 	bl	800fe80 <memmove>
 800f7ac:	68a3      	ldr	r3, [r4, #8]
 800f7ae:	1b9b      	subs	r3, r3, r6
 800f7b0:	60a3      	str	r3, [r4, #8]
 800f7b2:	6823      	ldr	r3, [r4, #0]
 800f7b4:	4433      	add	r3, r6
 800f7b6:	6023      	str	r3, [r4, #0]
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7be:	462a      	mov	r2, r5
 800f7c0:	f000 ff43 	bl	801064a <_realloc_r>
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d1e0      	bne.n	800f78c <__ssputs_r+0x5c>
 800f7ca:	6921      	ldr	r1, [r4, #16]
 800f7cc:	4650      	mov	r0, sl
 800f7ce:	f7fe fbcd 	bl	800df6c <_free_r>
 800f7d2:	230c      	movs	r3, #12
 800f7d4:	f8ca 3000 	str.w	r3, [sl]
 800f7d8:	89a3      	ldrh	r3, [r4, #12]
 800f7da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7de:	81a3      	strh	r3, [r4, #12]
 800f7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7e4:	e7e9      	b.n	800f7ba <__ssputs_r+0x8a>
	...

0800f7e8 <_svfiprintf_r>:
 800f7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ec:	4698      	mov	r8, r3
 800f7ee:	898b      	ldrh	r3, [r1, #12]
 800f7f0:	061b      	lsls	r3, r3, #24
 800f7f2:	b09d      	sub	sp, #116	@ 0x74
 800f7f4:	4607      	mov	r7, r0
 800f7f6:	460d      	mov	r5, r1
 800f7f8:	4614      	mov	r4, r2
 800f7fa:	d510      	bpl.n	800f81e <_svfiprintf_r+0x36>
 800f7fc:	690b      	ldr	r3, [r1, #16]
 800f7fe:	b973      	cbnz	r3, 800f81e <_svfiprintf_r+0x36>
 800f800:	2140      	movs	r1, #64	@ 0x40
 800f802:	f7fe fc27 	bl	800e054 <_malloc_r>
 800f806:	6028      	str	r0, [r5, #0]
 800f808:	6128      	str	r0, [r5, #16]
 800f80a:	b930      	cbnz	r0, 800f81a <_svfiprintf_r+0x32>
 800f80c:	230c      	movs	r3, #12
 800f80e:	603b      	str	r3, [r7, #0]
 800f810:	f04f 30ff 	mov.w	r0, #4294967295
 800f814:	b01d      	add	sp, #116	@ 0x74
 800f816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81a:	2340      	movs	r3, #64	@ 0x40
 800f81c:	616b      	str	r3, [r5, #20]
 800f81e:	2300      	movs	r3, #0
 800f820:	9309      	str	r3, [sp, #36]	@ 0x24
 800f822:	2320      	movs	r3, #32
 800f824:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f828:	f8cd 800c 	str.w	r8, [sp, #12]
 800f82c:	2330      	movs	r3, #48	@ 0x30
 800f82e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f9cc <_svfiprintf_r+0x1e4>
 800f832:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f836:	f04f 0901 	mov.w	r9, #1
 800f83a:	4623      	mov	r3, r4
 800f83c:	469a      	mov	sl, r3
 800f83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f842:	b10a      	cbz	r2, 800f848 <_svfiprintf_r+0x60>
 800f844:	2a25      	cmp	r2, #37	@ 0x25
 800f846:	d1f9      	bne.n	800f83c <_svfiprintf_r+0x54>
 800f848:	ebba 0b04 	subs.w	fp, sl, r4
 800f84c:	d00b      	beq.n	800f866 <_svfiprintf_r+0x7e>
 800f84e:	465b      	mov	r3, fp
 800f850:	4622      	mov	r2, r4
 800f852:	4629      	mov	r1, r5
 800f854:	4638      	mov	r0, r7
 800f856:	f7ff ff6b 	bl	800f730 <__ssputs_r>
 800f85a:	3001      	adds	r0, #1
 800f85c:	f000 80a7 	beq.w	800f9ae <_svfiprintf_r+0x1c6>
 800f860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f862:	445a      	add	r2, fp
 800f864:	9209      	str	r2, [sp, #36]	@ 0x24
 800f866:	f89a 3000 	ldrb.w	r3, [sl]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f000 809f 	beq.w	800f9ae <_svfiprintf_r+0x1c6>
 800f870:	2300      	movs	r3, #0
 800f872:	f04f 32ff 	mov.w	r2, #4294967295
 800f876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f87a:	f10a 0a01 	add.w	sl, sl, #1
 800f87e:	9304      	str	r3, [sp, #16]
 800f880:	9307      	str	r3, [sp, #28]
 800f882:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f886:	931a      	str	r3, [sp, #104]	@ 0x68
 800f888:	4654      	mov	r4, sl
 800f88a:	2205      	movs	r2, #5
 800f88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f890:	484e      	ldr	r0, [pc, #312]	@ (800f9cc <_svfiprintf_r+0x1e4>)
 800f892:	f7f0 fd3d 	bl	8000310 <memchr>
 800f896:	9a04      	ldr	r2, [sp, #16]
 800f898:	b9d8      	cbnz	r0, 800f8d2 <_svfiprintf_r+0xea>
 800f89a:	06d0      	lsls	r0, r2, #27
 800f89c:	bf44      	itt	mi
 800f89e:	2320      	movmi	r3, #32
 800f8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8a4:	0711      	lsls	r1, r2, #28
 800f8a6:	bf44      	itt	mi
 800f8a8:	232b      	movmi	r3, #43	@ 0x2b
 800f8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800f8b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8b4:	d015      	beq.n	800f8e2 <_svfiprintf_r+0xfa>
 800f8b6:	9a07      	ldr	r2, [sp, #28]
 800f8b8:	4654      	mov	r4, sl
 800f8ba:	2000      	movs	r0, #0
 800f8bc:	f04f 0c0a 	mov.w	ip, #10
 800f8c0:	4621      	mov	r1, r4
 800f8c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8c6:	3b30      	subs	r3, #48	@ 0x30
 800f8c8:	2b09      	cmp	r3, #9
 800f8ca:	d94b      	bls.n	800f964 <_svfiprintf_r+0x17c>
 800f8cc:	b1b0      	cbz	r0, 800f8fc <_svfiprintf_r+0x114>
 800f8ce:	9207      	str	r2, [sp, #28]
 800f8d0:	e014      	b.n	800f8fc <_svfiprintf_r+0x114>
 800f8d2:	eba0 0308 	sub.w	r3, r0, r8
 800f8d6:	fa09 f303 	lsl.w	r3, r9, r3
 800f8da:	4313      	orrs	r3, r2
 800f8dc:	9304      	str	r3, [sp, #16]
 800f8de:	46a2      	mov	sl, r4
 800f8e0:	e7d2      	b.n	800f888 <_svfiprintf_r+0xa0>
 800f8e2:	9b03      	ldr	r3, [sp, #12]
 800f8e4:	1d19      	adds	r1, r3, #4
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	9103      	str	r1, [sp, #12]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	bfbb      	ittet	lt
 800f8ee:	425b      	neglt	r3, r3
 800f8f0:	f042 0202 	orrlt.w	r2, r2, #2
 800f8f4:	9307      	strge	r3, [sp, #28]
 800f8f6:	9307      	strlt	r3, [sp, #28]
 800f8f8:	bfb8      	it	lt
 800f8fa:	9204      	strlt	r2, [sp, #16]
 800f8fc:	7823      	ldrb	r3, [r4, #0]
 800f8fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800f900:	d10a      	bne.n	800f918 <_svfiprintf_r+0x130>
 800f902:	7863      	ldrb	r3, [r4, #1]
 800f904:	2b2a      	cmp	r3, #42	@ 0x2a
 800f906:	d132      	bne.n	800f96e <_svfiprintf_r+0x186>
 800f908:	9b03      	ldr	r3, [sp, #12]
 800f90a:	1d1a      	adds	r2, r3, #4
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	9203      	str	r2, [sp, #12]
 800f910:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f914:	3402      	adds	r4, #2
 800f916:	9305      	str	r3, [sp, #20]
 800f918:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f9dc <_svfiprintf_r+0x1f4>
 800f91c:	7821      	ldrb	r1, [r4, #0]
 800f91e:	2203      	movs	r2, #3
 800f920:	4650      	mov	r0, sl
 800f922:	f7f0 fcf5 	bl	8000310 <memchr>
 800f926:	b138      	cbz	r0, 800f938 <_svfiprintf_r+0x150>
 800f928:	9b04      	ldr	r3, [sp, #16]
 800f92a:	eba0 000a 	sub.w	r0, r0, sl
 800f92e:	2240      	movs	r2, #64	@ 0x40
 800f930:	4082      	lsls	r2, r0
 800f932:	4313      	orrs	r3, r2
 800f934:	3401      	adds	r4, #1
 800f936:	9304      	str	r3, [sp, #16]
 800f938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f93c:	4824      	ldr	r0, [pc, #144]	@ (800f9d0 <_svfiprintf_r+0x1e8>)
 800f93e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f942:	2206      	movs	r2, #6
 800f944:	f7f0 fce4 	bl	8000310 <memchr>
 800f948:	2800      	cmp	r0, #0
 800f94a:	d036      	beq.n	800f9ba <_svfiprintf_r+0x1d2>
 800f94c:	4b21      	ldr	r3, [pc, #132]	@ (800f9d4 <_svfiprintf_r+0x1ec>)
 800f94e:	bb1b      	cbnz	r3, 800f998 <_svfiprintf_r+0x1b0>
 800f950:	9b03      	ldr	r3, [sp, #12]
 800f952:	3307      	adds	r3, #7
 800f954:	f023 0307 	bic.w	r3, r3, #7
 800f958:	3308      	adds	r3, #8
 800f95a:	9303      	str	r3, [sp, #12]
 800f95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f95e:	4433      	add	r3, r6
 800f960:	9309      	str	r3, [sp, #36]	@ 0x24
 800f962:	e76a      	b.n	800f83a <_svfiprintf_r+0x52>
 800f964:	fb0c 3202 	mla	r2, ip, r2, r3
 800f968:	460c      	mov	r4, r1
 800f96a:	2001      	movs	r0, #1
 800f96c:	e7a8      	b.n	800f8c0 <_svfiprintf_r+0xd8>
 800f96e:	2300      	movs	r3, #0
 800f970:	3401      	adds	r4, #1
 800f972:	9305      	str	r3, [sp, #20]
 800f974:	4619      	mov	r1, r3
 800f976:	f04f 0c0a 	mov.w	ip, #10
 800f97a:	4620      	mov	r0, r4
 800f97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f980:	3a30      	subs	r2, #48	@ 0x30
 800f982:	2a09      	cmp	r2, #9
 800f984:	d903      	bls.n	800f98e <_svfiprintf_r+0x1a6>
 800f986:	2b00      	cmp	r3, #0
 800f988:	d0c6      	beq.n	800f918 <_svfiprintf_r+0x130>
 800f98a:	9105      	str	r1, [sp, #20]
 800f98c:	e7c4      	b.n	800f918 <_svfiprintf_r+0x130>
 800f98e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f992:	4604      	mov	r4, r0
 800f994:	2301      	movs	r3, #1
 800f996:	e7f0      	b.n	800f97a <_svfiprintf_r+0x192>
 800f998:	ab03      	add	r3, sp, #12
 800f99a:	9300      	str	r3, [sp, #0]
 800f99c:	462a      	mov	r2, r5
 800f99e:	4b0e      	ldr	r3, [pc, #56]	@ (800f9d8 <_svfiprintf_r+0x1f0>)
 800f9a0:	a904      	add	r1, sp, #16
 800f9a2:	4638      	mov	r0, r7
 800f9a4:	f7fc fc90 	bl	800c2c8 <_printf_float>
 800f9a8:	1c42      	adds	r2, r0, #1
 800f9aa:	4606      	mov	r6, r0
 800f9ac:	d1d6      	bne.n	800f95c <_svfiprintf_r+0x174>
 800f9ae:	89ab      	ldrh	r3, [r5, #12]
 800f9b0:	065b      	lsls	r3, r3, #25
 800f9b2:	f53f af2d 	bmi.w	800f810 <_svfiprintf_r+0x28>
 800f9b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f9b8:	e72c      	b.n	800f814 <_svfiprintf_r+0x2c>
 800f9ba:	ab03      	add	r3, sp, #12
 800f9bc:	9300      	str	r3, [sp, #0]
 800f9be:	462a      	mov	r2, r5
 800f9c0:	4b05      	ldr	r3, [pc, #20]	@ (800f9d8 <_svfiprintf_r+0x1f0>)
 800f9c2:	a904      	add	r1, sp, #16
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	f7fc ff07 	bl	800c7d8 <_printf_i>
 800f9ca:	e7ed      	b.n	800f9a8 <_svfiprintf_r+0x1c0>
 800f9cc:	08010c99 	.word	0x08010c99
 800f9d0:	08010ca3 	.word	0x08010ca3
 800f9d4:	0800c2c9 	.word	0x0800c2c9
 800f9d8:	0800f731 	.word	0x0800f731
 800f9dc:	08010c9f 	.word	0x08010c9f

0800f9e0 <__sfputc_r>:
 800f9e0:	6893      	ldr	r3, [r2, #8]
 800f9e2:	3b01      	subs	r3, #1
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	b410      	push	{r4}
 800f9e8:	6093      	str	r3, [r2, #8]
 800f9ea:	da08      	bge.n	800f9fe <__sfputc_r+0x1e>
 800f9ec:	6994      	ldr	r4, [r2, #24]
 800f9ee:	42a3      	cmp	r3, r4
 800f9f0:	db01      	blt.n	800f9f6 <__sfputc_r+0x16>
 800f9f2:	290a      	cmp	r1, #10
 800f9f4:	d103      	bne.n	800f9fe <__sfputc_r+0x1e>
 800f9f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9fa:	f7fd bbae 	b.w	800d15a <__swbuf_r>
 800f9fe:	6813      	ldr	r3, [r2, #0]
 800fa00:	1c58      	adds	r0, r3, #1
 800fa02:	6010      	str	r0, [r2, #0]
 800fa04:	7019      	strb	r1, [r3, #0]
 800fa06:	4608      	mov	r0, r1
 800fa08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa0c:	4770      	bx	lr

0800fa0e <__sfputs_r>:
 800fa0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa10:	4606      	mov	r6, r0
 800fa12:	460f      	mov	r7, r1
 800fa14:	4614      	mov	r4, r2
 800fa16:	18d5      	adds	r5, r2, r3
 800fa18:	42ac      	cmp	r4, r5
 800fa1a:	d101      	bne.n	800fa20 <__sfputs_r+0x12>
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	e007      	b.n	800fa30 <__sfputs_r+0x22>
 800fa20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa24:	463a      	mov	r2, r7
 800fa26:	4630      	mov	r0, r6
 800fa28:	f7ff ffda 	bl	800f9e0 <__sfputc_r>
 800fa2c:	1c43      	adds	r3, r0, #1
 800fa2e:	d1f3      	bne.n	800fa18 <__sfputs_r+0xa>
 800fa30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa34 <_vfiprintf_r>:
 800fa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa38:	460d      	mov	r5, r1
 800fa3a:	b09d      	sub	sp, #116	@ 0x74
 800fa3c:	4614      	mov	r4, r2
 800fa3e:	4698      	mov	r8, r3
 800fa40:	4606      	mov	r6, r0
 800fa42:	b118      	cbz	r0, 800fa4c <_vfiprintf_r+0x18>
 800fa44:	6a03      	ldr	r3, [r0, #32]
 800fa46:	b90b      	cbnz	r3, 800fa4c <_vfiprintf_r+0x18>
 800fa48:	f7fd fa7e 	bl	800cf48 <__sinit>
 800fa4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa4e:	07d9      	lsls	r1, r3, #31
 800fa50:	d405      	bmi.n	800fa5e <_vfiprintf_r+0x2a>
 800fa52:	89ab      	ldrh	r3, [r5, #12]
 800fa54:	059a      	lsls	r2, r3, #22
 800fa56:	d402      	bmi.n	800fa5e <_vfiprintf_r+0x2a>
 800fa58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa5a:	f7fd fc90 	bl	800d37e <__retarget_lock_acquire_recursive>
 800fa5e:	89ab      	ldrh	r3, [r5, #12]
 800fa60:	071b      	lsls	r3, r3, #28
 800fa62:	d501      	bpl.n	800fa68 <_vfiprintf_r+0x34>
 800fa64:	692b      	ldr	r3, [r5, #16]
 800fa66:	b99b      	cbnz	r3, 800fa90 <_vfiprintf_r+0x5c>
 800fa68:	4629      	mov	r1, r5
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	f7fd fbb4 	bl	800d1d8 <__swsetup_r>
 800fa70:	b170      	cbz	r0, 800fa90 <_vfiprintf_r+0x5c>
 800fa72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa74:	07dc      	lsls	r4, r3, #31
 800fa76:	d504      	bpl.n	800fa82 <_vfiprintf_r+0x4e>
 800fa78:	f04f 30ff 	mov.w	r0, #4294967295
 800fa7c:	b01d      	add	sp, #116	@ 0x74
 800fa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa82:	89ab      	ldrh	r3, [r5, #12]
 800fa84:	0598      	lsls	r0, r3, #22
 800fa86:	d4f7      	bmi.n	800fa78 <_vfiprintf_r+0x44>
 800fa88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa8a:	f7fd fc79 	bl	800d380 <__retarget_lock_release_recursive>
 800fa8e:	e7f3      	b.n	800fa78 <_vfiprintf_r+0x44>
 800fa90:	2300      	movs	r3, #0
 800fa92:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa94:	2320      	movs	r3, #32
 800fa96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa9e:	2330      	movs	r3, #48	@ 0x30
 800faa0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fc50 <_vfiprintf_r+0x21c>
 800faa4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800faa8:	f04f 0901 	mov.w	r9, #1
 800faac:	4623      	mov	r3, r4
 800faae:	469a      	mov	sl, r3
 800fab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fab4:	b10a      	cbz	r2, 800faba <_vfiprintf_r+0x86>
 800fab6:	2a25      	cmp	r2, #37	@ 0x25
 800fab8:	d1f9      	bne.n	800faae <_vfiprintf_r+0x7a>
 800faba:	ebba 0b04 	subs.w	fp, sl, r4
 800fabe:	d00b      	beq.n	800fad8 <_vfiprintf_r+0xa4>
 800fac0:	465b      	mov	r3, fp
 800fac2:	4622      	mov	r2, r4
 800fac4:	4629      	mov	r1, r5
 800fac6:	4630      	mov	r0, r6
 800fac8:	f7ff ffa1 	bl	800fa0e <__sfputs_r>
 800facc:	3001      	adds	r0, #1
 800face:	f000 80a7 	beq.w	800fc20 <_vfiprintf_r+0x1ec>
 800fad2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fad4:	445a      	add	r2, fp
 800fad6:	9209      	str	r2, [sp, #36]	@ 0x24
 800fad8:	f89a 3000 	ldrb.w	r3, [sl]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	f000 809f 	beq.w	800fc20 <_vfiprintf_r+0x1ec>
 800fae2:	2300      	movs	r3, #0
 800fae4:	f04f 32ff 	mov.w	r2, #4294967295
 800fae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800faec:	f10a 0a01 	add.w	sl, sl, #1
 800faf0:	9304      	str	r3, [sp, #16]
 800faf2:	9307      	str	r3, [sp, #28]
 800faf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800faf8:	931a      	str	r3, [sp, #104]	@ 0x68
 800fafa:	4654      	mov	r4, sl
 800fafc:	2205      	movs	r2, #5
 800fafe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb02:	4853      	ldr	r0, [pc, #332]	@ (800fc50 <_vfiprintf_r+0x21c>)
 800fb04:	f7f0 fc04 	bl	8000310 <memchr>
 800fb08:	9a04      	ldr	r2, [sp, #16]
 800fb0a:	b9d8      	cbnz	r0, 800fb44 <_vfiprintf_r+0x110>
 800fb0c:	06d1      	lsls	r1, r2, #27
 800fb0e:	bf44      	itt	mi
 800fb10:	2320      	movmi	r3, #32
 800fb12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb16:	0713      	lsls	r3, r2, #28
 800fb18:	bf44      	itt	mi
 800fb1a:	232b      	movmi	r3, #43	@ 0x2b
 800fb1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb20:	f89a 3000 	ldrb.w	r3, [sl]
 800fb24:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb26:	d015      	beq.n	800fb54 <_vfiprintf_r+0x120>
 800fb28:	9a07      	ldr	r2, [sp, #28]
 800fb2a:	4654      	mov	r4, sl
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	f04f 0c0a 	mov.w	ip, #10
 800fb32:	4621      	mov	r1, r4
 800fb34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb38:	3b30      	subs	r3, #48	@ 0x30
 800fb3a:	2b09      	cmp	r3, #9
 800fb3c:	d94b      	bls.n	800fbd6 <_vfiprintf_r+0x1a2>
 800fb3e:	b1b0      	cbz	r0, 800fb6e <_vfiprintf_r+0x13a>
 800fb40:	9207      	str	r2, [sp, #28]
 800fb42:	e014      	b.n	800fb6e <_vfiprintf_r+0x13a>
 800fb44:	eba0 0308 	sub.w	r3, r0, r8
 800fb48:	fa09 f303 	lsl.w	r3, r9, r3
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	9304      	str	r3, [sp, #16]
 800fb50:	46a2      	mov	sl, r4
 800fb52:	e7d2      	b.n	800fafa <_vfiprintf_r+0xc6>
 800fb54:	9b03      	ldr	r3, [sp, #12]
 800fb56:	1d19      	adds	r1, r3, #4
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	9103      	str	r1, [sp, #12]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	bfbb      	ittet	lt
 800fb60:	425b      	neglt	r3, r3
 800fb62:	f042 0202 	orrlt.w	r2, r2, #2
 800fb66:	9307      	strge	r3, [sp, #28]
 800fb68:	9307      	strlt	r3, [sp, #28]
 800fb6a:	bfb8      	it	lt
 800fb6c:	9204      	strlt	r2, [sp, #16]
 800fb6e:	7823      	ldrb	r3, [r4, #0]
 800fb70:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb72:	d10a      	bne.n	800fb8a <_vfiprintf_r+0x156>
 800fb74:	7863      	ldrb	r3, [r4, #1]
 800fb76:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb78:	d132      	bne.n	800fbe0 <_vfiprintf_r+0x1ac>
 800fb7a:	9b03      	ldr	r3, [sp, #12]
 800fb7c:	1d1a      	adds	r2, r3, #4
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	9203      	str	r2, [sp, #12]
 800fb82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb86:	3402      	adds	r4, #2
 800fb88:	9305      	str	r3, [sp, #20]
 800fb8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fc60 <_vfiprintf_r+0x22c>
 800fb8e:	7821      	ldrb	r1, [r4, #0]
 800fb90:	2203      	movs	r2, #3
 800fb92:	4650      	mov	r0, sl
 800fb94:	f7f0 fbbc 	bl	8000310 <memchr>
 800fb98:	b138      	cbz	r0, 800fbaa <_vfiprintf_r+0x176>
 800fb9a:	9b04      	ldr	r3, [sp, #16]
 800fb9c:	eba0 000a 	sub.w	r0, r0, sl
 800fba0:	2240      	movs	r2, #64	@ 0x40
 800fba2:	4082      	lsls	r2, r0
 800fba4:	4313      	orrs	r3, r2
 800fba6:	3401      	adds	r4, #1
 800fba8:	9304      	str	r3, [sp, #16]
 800fbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbae:	4829      	ldr	r0, [pc, #164]	@ (800fc54 <_vfiprintf_r+0x220>)
 800fbb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fbb4:	2206      	movs	r2, #6
 800fbb6:	f7f0 fbab 	bl	8000310 <memchr>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	d03f      	beq.n	800fc3e <_vfiprintf_r+0x20a>
 800fbbe:	4b26      	ldr	r3, [pc, #152]	@ (800fc58 <_vfiprintf_r+0x224>)
 800fbc0:	bb1b      	cbnz	r3, 800fc0a <_vfiprintf_r+0x1d6>
 800fbc2:	9b03      	ldr	r3, [sp, #12]
 800fbc4:	3307      	adds	r3, #7
 800fbc6:	f023 0307 	bic.w	r3, r3, #7
 800fbca:	3308      	adds	r3, #8
 800fbcc:	9303      	str	r3, [sp, #12]
 800fbce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbd0:	443b      	add	r3, r7
 800fbd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbd4:	e76a      	b.n	800faac <_vfiprintf_r+0x78>
 800fbd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbda:	460c      	mov	r4, r1
 800fbdc:	2001      	movs	r0, #1
 800fbde:	e7a8      	b.n	800fb32 <_vfiprintf_r+0xfe>
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	3401      	adds	r4, #1
 800fbe4:	9305      	str	r3, [sp, #20]
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	f04f 0c0a 	mov.w	ip, #10
 800fbec:	4620      	mov	r0, r4
 800fbee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbf2:	3a30      	subs	r2, #48	@ 0x30
 800fbf4:	2a09      	cmp	r2, #9
 800fbf6:	d903      	bls.n	800fc00 <_vfiprintf_r+0x1cc>
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d0c6      	beq.n	800fb8a <_vfiprintf_r+0x156>
 800fbfc:	9105      	str	r1, [sp, #20]
 800fbfe:	e7c4      	b.n	800fb8a <_vfiprintf_r+0x156>
 800fc00:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc04:	4604      	mov	r4, r0
 800fc06:	2301      	movs	r3, #1
 800fc08:	e7f0      	b.n	800fbec <_vfiprintf_r+0x1b8>
 800fc0a:	ab03      	add	r3, sp, #12
 800fc0c:	9300      	str	r3, [sp, #0]
 800fc0e:	462a      	mov	r2, r5
 800fc10:	4b12      	ldr	r3, [pc, #72]	@ (800fc5c <_vfiprintf_r+0x228>)
 800fc12:	a904      	add	r1, sp, #16
 800fc14:	4630      	mov	r0, r6
 800fc16:	f7fc fb57 	bl	800c2c8 <_printf_float>
 800fc1a:	4607      	mov	r7, r0
 800fc1c:	1c78      	adds	r0, r7, #1
 800fc1e:	d1d6      	bne.n	800fbce <_vfiprintf_r+0x19a>
 800fc20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc22:	07d9      	lsls	r1, r3, #31
 800fc24:	d405      	bmi.n	800fc32 <_vfiprintf_r+0x1fe>
 800fc26:	89ab      	ldrh	r3, [r5, #12]
 800fc28:	059a      	lsls	r2, r3, #22
 800fc2a:	d402      	bmi.n	800fc32 <_vfiprintf_r+0x1fe>
 800fc2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc2e:	f7fd fba7 	bl	800d380 <__retarget_lock_release_recursive>
 800fc32:	89ab      	ldrh	r3, [r5, #12]
 800fc34:	065b      	lsls	r3, r3, #25
 800fc36:	f53f af1f 	bmi.w	800fa78 <_vfiprintf_r+0x44>
 800fc3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc3c:	e71e      	b.n	800fa7c <_vfiprintf_r+0x48>
 800fc3e:	ab03      	add	r3, sp, #12
 800fc40:	9300      	str	r3, [sp, #0]
 800fc42:	462a      	mov	r2, r5
 800fc44:	4b05      	ldr	r3, [pc, #20]	@ (800fc5c <_vfiprintf_r+0x228>)
 800fc46:	a904      	add	r1, sp, #16
 800fc48:	4630      	mov	r0, r6
 800fc4a:	f7fc fdc5 	bl	800c7d8 <_printf_i>
 800fc4e:	e7e4      	b.n	800fc1a <_vfiprintf_r+0x1e6>
 800fc50:	08010c99 	.word	0x08010c99
 800fc54:	08010ca3 	.word	0x08010ca3
 800fc58:	0800c2c9 	.word	0x0800c2c9
 800fc5c:	0800fa0f 	.word	0x0800fa0f
 800fc60:	08010c9f 	.word	0x08010c9f

0800fc64 <__sflush_r>:
 800fc64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc6c:	0716      	lsls	r6, r2, #28
 800fc6e:	4605      	mov	r5, r0
 800fc70:	460c      	mov	r4, r1
 800fc72:	d454      	bmi.n	800fd1e <__sflush_r+0xba>
 800fc74:	684b      	ldr	r3, [r1, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	dc02      	bgt.n	800fc80 <__sflush_r+0x1c>
 800fc7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	dd48      	ble.n	800fd12 <__sflush_r+0xae>
 800fc80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc82:	2e00      	cmp	r6, #0
 800fc84:	d045      	beq.n	800fd12 <__sflush_r+0xae>
 800fc86:	2300      	movs	r3, #0
 800fc88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fc8c:	682f      	ldr	r7, [r5, #0]
 800fc8e:	6a21      	ldr	r1, [r4, #32]
 800fc90:	602b      	str	r3, [r5, #0]
 800fc92:	d030      	beq.n	800fcf6 <__sflush_r+0x92>
 800fc94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fc96:	89a3      	ldrh	r3, [r4, #12]
 800fc98:	0759      	lsls	r1, r3, #29
 800fc9a:	d505      	bpl.n	800fca8 <__sflush_r+0x44>
 800fc9c:	6863      	ldr	r3, [r4, #4]
 800fc9e:	1ad2      	subs	r2, r2, r3
 800fca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fca2:	b10b      	cbz	r3, 800fca8 <__sflush_r+0x44>
 800fca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fca6:	1ad2      	subs	r2, r2, r3
 800fca8:	2300      	movs	r3, #0
 800fcaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fcac:	6a21      	ldr	r1, [r4, #32]
 800fcae:	4628      	mov	r0, r5
 800fcb0:	47b0      	blx	r6
 800fcb2:	1c43      	adds	r3, r0, #1
 800fcb4:	89a3      	ldrh	r3, [r4, #12]
 800fcb6:	d106      	bne.n	800fcc6 <__sflush_r+0x62>
 800fcb8:	6829      	ldr	r1, [r5, #0]
 800fcba:	291d      	cmp	r1, #29
 800fcbc:	d82b      	bhi.n	800fd16 <__sflush_r+0xb2>
 800fcbe:	4a2a      	ldr	r2, [pc, #168]	@ (800fd68 <__sflush_r+0x104>)
 800fcc0:	410a      	asrs	r2, r1
 800fcc2:	07d6      	lsls	r6, r2, #31
 800fcc4:	d427      	bmi.n	800fd16 <__sflush_r+0xb2>
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	6062      	str	r2, [r4, #4]
 800fcca:	04d9      	lsls	r1, r3, #19
 800fccc:	6922      	ldr	r2, [r4, #16]
 800fcce:	6022      	str	r2, [r4, #0]
 800fcd0:	d504      	bpl.n	800fcdc <__sflush_r+0x78>
 800fcd2:	1c42      	adds	r2, r0, #1
 800fcd4:	d101      	bne.n	800fcda <__sflush_r+0x76>
 800fcd6:	682b      	ldr	r3, [r5, #0]
 800fcd8:	b903      	cbnz	r3, 800fcdc <__sflush_r+0x78>
 800fcda:	6560      	str	r0, [r4, #84]	@ 0x54
 800fcdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcde:	602f      	str	r7, [r5, #0]
 800fce0:	b1b9      	cbz	r1, 800fd12 <__sflush_r+0xae>
 800fce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fce6:	4299      	cmp	r1, r3
 800fce8:	d002      	beq.n	800fcf0 <__sflush_r+0x8c>
 800fcea:	4628      	mov	r0, r5
 800fcec:	f7fe f93e 	bl	800df6c <_free_r>
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800fcf4:	e00d      	b.n	800fd12 <__sflush_r+0xae>
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	47b0      	blx	r6
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	1c50      	adds	r0, r2, #1
 800fd00:	d1c9      	bne.n	800fc96 <__sflush_r+0x32>
 800fd02:	682b      	ldr	r3, [r5, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d0c6      	beq.n	800fc96 <__sflush_r+0x32>
 800fd08:	2b1d      	cmp	r3, #29
 800fd0a:	d001      	beq.n	800fd10 <__sflush_r+0xac>
 800fd0c:	2b16      	cmp	r3, #22
 800fd0e:	d11e      	bne.n	800fd4e <__sflush_r+0xea>
 800fd10:	602f      	str	r7, [r5, #0]
 800fd12:	2000      	movs	r0, #0
 800fd14:	e022      	b.n	800fd5c <__sflush_r+0xf8>
 800fd16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd1a:	b21b      	sxth	r3, r3
 800fd1c:	e01b      	b.n	800fd56 <__sflush_r+0xf2>
 800fd1e:	690f      	ldr	r7, [r1, #16]
 800fd20:	2f00      	cmp	r7, #0
 800fd22:	d0f6      	beq.n	800fd12 <__sflush_r+0xae>
 800fd24:	0793      	lsls	r3, r2, #30
 800fd26:	680e      	ldr	r6, [r1, #0]
 800fd28:	bf08      	it	eq
 800fd2a:	694b      	ldreq	r3, [r1, #20]
 800fd2c:	600f      	str	r7, [r1, #0]
 800fd2e:	bf18      	it	ne
 800fd30:	2300      	movne	r3, #0
 800fd32:	eba6 0807 	sub.w	r8, r6, r7
 800fd36:	608b      	str	r3, [r1, #8]
 800fd38:	f1b8 0f00 	cmp.w	r8, #0
 800fd3c:	dde9      	ble.n	800fd12 <__sflush_r+0xae>
 800fd3e:	6a21      	ldr	r1, [r4, #32]
 800fd40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fd42:	4643      	mov	r3, r8
 800fd44:	463a      	mov	r2, r7
 800fd46:	4628      	mov	r0, r5
 800fd48:	47b0      	blx	r6
 800fd4a:	2800      	cmp	r0, #0
 800fd4c:	dc08      	bgt.n	800fd60 <__sflush_r+0xfc>
 800fd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd56:	81a3      	strh	r3, [r4, #12]
 800fd58:	f04f 30ff 	mov.w	r0, #4294967295
 800fd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd60:	4407      	add	r7, r0
 800fd62:	eba8 0800 	sub.w	r8, r8, r0
 800fd66:	e7e7      	b.n	800fd38 <__sflush_r+0xd4>
 800fd68:	dfbffffe 	.word	0xdfbffffe

0800fd6c <_fflush_r>:
 800fd6c:	b538      	push	{r3, r4, r5, lr}
 800fd6e:	690b      	ldr	r3, [r1, #16]
 800fd70:	4605      	mov	r5, r0
 800fd72:	460c      	mov	r4, r1
 800fd74:	b913      	cbnz	r3, 800fd7c <_fflush_r+0x10>
 800fd76:	2500      	movs	r5, #0
 800fd78:	4628      	mov	r0, r5
 800fd7a:	bd38      	pop	{r3, r4, r5, pc}
 800fd7c:	b118      	cbz	r0, 800fd86 <_fflush_r+0x1a>
 800fd7e:	6a03      	ldr	r3, [r0, #32]
 800fd80:	b90b      	cbnz	r3, 800fd86 <_fflush_r+0x1a>
 800fd82:	f7fd f8e1 	bl	800cf48 <__sinit>
 800fd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d0f3      	beq.n	800fd76 <_fflush_r+0xa>
 800fd8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fd90:	07d0      	lsls	r0, r2, #31
 800fd92:	d404      	bmi.n	800fd9e <_fflush_r+0x32>
 800fd94:	0599      	lsls	r1, r3, #22
 800fd96:	d402      	bmi.n	800fd9e <_fflush_r+0x32>
 800fd98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd9a:	f7fd faf0 	bl	800d37e <__retarget_lock_acquire_recursive>
 800fd9e:	4628      	mov	r0, r5
 800fda0:	4621      	mov	r1, r4
 800fda2:	f7ff ff5f 	bl	800fc64 <__sflush_r>
 800fda6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fda8:	07da      	lsls	r2, r3, #31
 800fdaa:	4605      	mov	r5, r0
 800fdac:	d4e4      	bmi.n	800fd78 <_fflush_r+0xc>
 800fdae:	89a3      	ldrh	r3, [r4, #12]
 800fdb0:	059b      	lsls	r3, r3, #22
 800fdb2:	d4e1      	bmi.n	800fd78 <_fflush_r+0xc>
 800fdb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fdb6:	f7fd fae3 	bl	800d380 <__retarget_lock_release_recursive>
 800fdba:	e7dd      	b.n	800fd78 <_fflush_r+0xc>

0800fdbc <__swhatbuf_r>:
 800fdbc:	b570      	push	{r4, r5, r6, lr}
 800fdbe:	460c      	mov	r4, r1
 800fdc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdc4:	2900      	cmp	r1, #0
 800fdc6:	b096      	sub	sp, #88	@ 0x58
 800fdc8:	4615      	mov	r5, r2
 800fdca:	461e      	mov	r6, r3
 800fdcc:	da0d      	bge.n	800fdea <__swhatbuf_r+0x2e>
 800fdce:	89a3      	ldrh	r3, [r4, #12]
 800fdd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fdd4:	f04f 0100 	mov.w	r1, #0
 800fdd8:	bf14      	ite	ne
 800fdda:	2340      	movne	r3, #64	@ 0x40
 800fddc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fde0:	2000      	movs	r0, #0
 800fde2:	6031      	str	r1, [r6, #0]
 800fde4:	602b      	str	r3, [r5, #0]
 800fde6:	b016      	add	sp, #88	@ 0x58
 800fde8:	bd70      	pop	{r4, r5, r6, pc}
 800fdea:	466a      	mov	r2, sp
 800fdec:	f000 f874 	bl	800fed8 <_fstat_r>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	dbec      	blt.n	800fdce <__swhatbuf_r+0x12>
 800fdf4:	9901      	ldr	r1, [sp, #4]
 800fdf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fdfa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fdfe:	4259      	negs	r1, r3
 800fe00:	4159      	adcs	r1, r3
 800fe02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe06:	e7eb      	b.n	800fde0 <__swhatbuf_r+0x24>

0800fe08 <__smakebuf_r>:
 800fe08:	898b      	ldrh	r3, [r1, #12]
 800fe0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe0c:	079d      	lsls	r5, r3, #30
 800fe0e:	4606      	mov	r6, r0
 800fe10:	460c      	mov	r4, r1
 800fe12:	d507      	bpl.n	800fe24 <__smakebuf_r+0x1c>
 800fe14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fe18:	6023      	str	r3, [r4, #0]
 800fe1a:	6123      	str	r3, [r4, #16]
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	6163      	str	r3, [r4, #20]
 800fe20:	b003      	add	sp, #12
 800fe22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe24:	ab01      	add	r3, sp, #4
 800fe26:	466a      	mov	r2, sp
 800fe28:	f7ff ffc8 	bl	800fdbc <__swhatbuf_r>
 800fe2c:	9f00      	ldr	r7, [sp, #0]
 800fe2e:	4605      	mov	r5, r0
 800fe30:	4639      	mov	r1, r7
 800fe32:	4630      	mov	r0, r6
 800fe34:	f7fe f90e 	bl	800e054 <_malloc_r>
 800fe38:	b948      	cbnz	r0, 800fe4e <__smakebuf_r+0x46>
 800fe3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe3e:	059a      	lsls	r2, r3, #22
 800fe40:	d4ee      	bmi.n	800fe20 <__smakebuf_r+0x18>
 800fe42:	f023 0303 	bic.w	r3, r3, #3
 800fe46:	f043 0302 	orr.w	r3, r3, #2
 800fe4a:	81a3      	strh	r3, [r4, #12]
 800fe4c:	e7e2      	b.n	800fe14 <__smakebuf_r+0xc>
 800fe4e:	89a3      	ldrh	r3, [r4, #12]
 800fe50:	6020      	str	r0, [r4, #0]
 800fe52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe56:	81a3      	strh	r3, [r4, #12]
 800fe58:	9b01      	ldr	r3, [sp, #4]
 800fe5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fe5e:	b15b      	cbz	r3, 800fe78 <__smakebuf_r+0x70>
 800fe60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe64:	4630      	mov	r0, r6
 800fe66:	f000 f849 	bl	800fefc <_isatty_r>
 800fe6a:	b128      	cbz	r0, 800fe78 <__smakebuf_r+0x70>
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	f023 0303 	bic.w	r3, r3, #3
 800fe72:	f043 0301 	orr.w	r3, r3, #1
 800fe76:	81a3      	strh	r3, [r4, #12]
 800fe78:	89a3      	ldrh	r3, [r4, #12]
 800fe7a:	431d      	orrs	r5, r3
 800fe7c:	81a5      	strh	r5, [r4, #12]
 800fe7e:	e7cf      	b.n	800fe20 <__smakebuf_r+0x18>

0800fe80 <memmove>:
 800fe80:	4288      	cmp	r0, r1
 800fe82:	b510      	push	{r4, lr}
 800fe84:	eb01 0402 	add.w	r4, r1, r2
 800fe88:	d902      	bls.n	800fe90 <memmove+0x10>
 800fe8a:	4284      	cmp	r4, r0
 800fe8c:	4623      	mov	r3, r4
 800fe8e:	d807      	bhi.n	800fea0 <memmove+0x20>
 800fe90:	1e43      	subs	r3, r0, #1
 800fe92:	42a1      	cmp	r1, r4
 800fe94:	d008      	beq.n	800fea8 <memmove+0x28>
 800fe96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe9e:	e7f8      	b.n	800fe92 <memmove+0x12>
 800fea0:	4402      	add	r2, r0
 800fea2:	4601      	mov	r1, r0
 800fea4:	428a      	cmp	r2, r1
 800fea6:	d100      	bne.n	800feaa <memmove+0x2a>
 800fea8:	bd10      	pop	{r4, pc}
 800feaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800feae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800feb2:	e7f7      	b.n	800fea4 <memmove+0x24>

0800feb4 <strncmp>:
 800feb4:	b510      	push	{r4, lr}
 800feb6:	b16a      	cbz	r2, 800fed4 <strncmp+0x20>
 800feb8:	3901      	subs	r1, #1
 800feba:	1884      	adds	r4, r0, r2
 800febc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fec0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d103      	bne.n	800fed0 <strncmp+0x1c>
 800fec8:	42a0      	cmp	r0, r4
 800feca:	d001      	beq.n	800fed0 <strncmp+0x1c>
 800fecc:	2a00      	cmp	r2, #0
 800fece:	d1f5      	bne.n	800febc <strncmp+0x8>
 800fed0:	1ad0      	subs	r0, r2, r3
 800fed2:	bd10      	pop	{r4, pc}
 800fed4:	4610      	mov	r0, r2
 800fed6:	e7fc      	b.n	800fed2 <strncmp+0x1e>

0800fed8 <_fstat_r>:
 800fed8:	b538      	push	{r3, r4, r5, lr}
 800feda:	4d07      	ldr	r5, [pc, #28]	@ (800fef8 <_fstat_r+0x20>)
 800fedc:	2300      	movs	r3, #0
 800fede:	4604      	mov	r4, r0
 800fee0:	4608      	mov	r0, r1
 800fee2:	4611      	mov	r1, r2
 800fee4:	602b      	str	r3, [r5, #0]
 800fee6:	f7f1 fee3 	bl	8001cb0 <_fstat>
 800feea:	1c43      	adds	r3, r0, #1
 800feec:	d102      	bne.n	800fef4 <_fstat_r+0x1c>
 800feee:	682b      	ldr	r3, [r5, #0]
 800fef0:	b103      	cbz	r3, 800fef4 <_fstat_r+0x1c>
 800fef2:	6023      	str	r3, [r4, #0]
 800fef4:	bd38      	pop	{r3, r4, r5, pc}
 800fef6:	bf00      	nop
 800fef8:	24000b04 	.word	0x24000b04

0800fefc <_isatty_r>:
 800fefc:	b538      	push	{r3, r4, r5, lr}
 800fefe:	4d06      	ldr	r5, [pc, #24]	@ (800ff18 <_isatty_r+0x1c>)
 800ff00:	2300      	movs	r3, #0
 800ff02:	4604      	mov	r4, r0
 800ff04:	4608      	mov	r0, r1
 800ff06:	602b      	str	r3, [r5, #0]
 800ff08:	f7f1 fee2 	bl	8001cd0 <_isatty>
 800ff0c:	1c43      	adds	r3, r0, #1
 800ff0e:	d102      	bne.n	800ff16 <_isatty_r+0x1a>
 800ff10:	682b      	ldr	r3, [r5, #0]
 800ff12:	b103      	cbz	r3, 800ff16 <_isatty_r+0x1a>
 800ff14:	6023      	str	r3, [r4, #0]
 800ff16:	bd38      	pop	{r3, r4, r5, pc}
 800ff18:	24000b04 	.word	0x24000b04

0800ff1c <_sbrk_r>:
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	4d06      	ldr	r5, [pc, #24]	@ (800ff38 <_sbrk_r+0x1c>)
 800ff20:	2300      	movs	r3, #0
 800ff22:	4604      	mov	r4, r0
 800ff24:	4608      	mov	r0, r1
 800ff26:	602b      	str	r3, [r5, #0]
 800ff28:	f7f1 feea 	bl	8001d00 <_sbrk>
 800ff2c:	1c43      	adds	r3, r0, #1
 800ff2e:	d102      	bne.n	800ff36 <_sbrk_r+0x1a>
 800ff30:	682b      	ldr	r3, [r5, #0]
 800ff32:	b103      	cbz	r3, 800ff36 <_sbrk_r+0x1a>
 800ff34:	6023      	str	r3, [r4, #0]
 800ff36:	bd38      	pop	{r3, r4, r5, pc}
 800ff38:	24000b04 	.word	0x24000b04
 800ff3c:	00000000 	.word	0x00000000

0800ff40 <nan>:
 800ff40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ff48 <nan+0x8>
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	00000000 	.word	0x00000000
 800ff4c:	7ff80000 	.word	0x7ff80000

0800ff50 <__assert_func>:
 800ff50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff52:	4614      	mov	r4, r2
 800ff54:	461a      	mov	r2, r3
 800ff56:	4b09      	ldr	r3, [pc, #36]	@ (800ff7c <__assert_func+0x2c>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	4605      	mov	r5, r0
 800ff5c:	68d8      	ldr	r0, [r3, #12]
 800ff5e:	b954      	cbnz	r4, 800ff76 <__assert_func+0x26>
 800ff60:	4b07      	ldr	r3, [pc, #28]	@ (800ff80 <__assert_func+0x30>)
 800ff62:	461c      	mov	r4, r3
 800ff64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff68:	9100      	str	r1, [sp, #0]
 800ff6a:	462b      	mov	r3, r5
 800ff6c:	4905      	ldr	r1, [pc, #20]	@ (800ff84 <__assert_func+0x34>)
 800ff6e:	f000 fba7 	bl	80106c0 <fiprintf>
 800ff72:	f000 fbb7 	bl	80106e4 <abort>
 800ff76:	4b04      	ldr	r3, [pc, #16]	@ (800ff88 <__assert_func+0x38>)
 800ff78:	e7f4      	b.n	800ff64 <__assert_func+0x14>
 800ff7a:	bf00      	nop
 800ff7c:	2400001c 	.word	0x2400001c
 800ff80:	08010ced 	.word	0x08010ced
 800ff84:	08010cbf 	.word	0x08010cbf
 800ff88:	08010cb2 	.word	0x08010cb2

0800ff8c <_calloc_r>:
 800ff8c:	b570      	push	{r4, r5, r6, lr}
 800ff8e:	fba1 5402 	umull	r5, r4, r1, r2
 800ff92:	b93c      	cbnz	r4, 800ffa4 <_calloc_r+0x18>
 800ff94:	4629      	mov	r1, r5
 800ff96:	f7fe f85d 	bl	800e054 <_malloc_r>
 800ff9a:	4606      	mov	r6, r0
 800ff9c:	b928      	cbnz	r0, 800ffaa <_calloc_r+0x1e>
 800ff9e:	2600      	movs	r6, #0
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	bd70      	pop	{r4, r5, r6, pc}
 800ffa4:	220c      	movs	r2, #12
 800ffa6:	6002      	str	r2, [r0, #0]
 800ffa8:	e7f9      	b.n	800ff9e <_calloc_r+0x12>
 800ffaa:	462a      	mov	r2, r5
 800ffac:	4621      	mov	r1, r4
 800ffae:	f7fd f969 	bl	800d284 <memset>
 800ffb2:	e7f5      	b.n	800ffa0 <_calloc_r+0x14>

0800ffb4 <rshift>:
 800ffb4:	6903      	ldr	r3, [r0, #16]
 800ffb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ffba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ffc2:	f100 0414 	add.w	r4, r0, #20
 800ffc6:	dd45      	ble.n	8010054 <rshift+0xa0>
 800ffc8:	f011 011f 	ands.w	r1, r1, #31
 800ffcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ffd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ffd4:	d10c      	bne.n	800fff0 <rshift+0x3c>
 800ffd6:	f100 0710 	add.w	r7, r0, #16
 800ffda:	4629      	mov	r1, r5
 800ffdc:	42b1      	cmp	r1, r6
 800ffde:	d334      	bcc.n	801004a <rshift+0x96>
 800ffe0:	1a9b      	subs	r3, r3, r2
 800ffe2:	009b      	lsls	r3, r3, #2
 800ffe4:	1eea      	subs	r2, r5, #3
 800ffe6:	4296      	cmp	r6, r2
 800ffe8:	bf38      	it	cc
 800ffea:	2300      	movcc	r3, #0
 800ffec:	4423      	add	r3, r4
 800ffee:	e015      	b.n	801001c <rshift+0x68>
 800fff0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fff4:	f1c1 0820 	rsb	r8, r1, #32
 800fff8:	40cf      	lsrs	r7, r1
 800fffa:	f105 0e04 	add.w	lr, r5, #4
 800fffe:	46a1      	mov	r9, r4
 8010000:	4576      	cmp	r6, lr
 8010002:	46f4      	mov	ip, lr
 8010004:	d815      	bhi.n	8010032 <rshift+0x7e>
 8010006:	1a9a      	subs	r2, r3, r2
 8010008:	0092      	lsls	r2, r2, #2
 801000a:	3a04      	subs	r2, #4
 801000c:	3501      	adds	r5, #1
 801000e:	42ae      	cmp	r6, r5
 8010010:	bf38      	it	cc
 8010012:	2200      	movcc	r2, #0
 8010014:	18a3      	adds	r3, r4, r2
 8010016:	50a7      	str	r7, [r4, r2]
 8010018:	b107      	cbz	r7, 801001c <rshift+0x68>
 801001a:	3304      	adds	r3, #4
 801001c:	1b1a      	subs	r2, r3, r4
 801001e:	42a3      	cmp	r3, r4
 8010020:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010024:	bf08      	it	eq
 8010026:	2300      	moveq	r3, #0
 8010028:	6102      	str	r2, [r0, #16]
 801002a:	bf08      	it	eq
 801002c:	6143      	streq	r3, [r0, #20]
 801002e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010032:	f8dc c000 	ldr.w	ip, [ip]
 8010036:	fa0c fc08 	lsl.w	ip, ip, r8
 801003a:	ea4c 0707 	orr.w	r7, ip, r7
 801003e:	f849 7b04 	str.w	r7, [r9], #4
 8010042:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010046:	40cf      	lsrs	r7, r1
 8010048:	e7da      	b.n	8010000 <rshift+0x4c>
 801004a:	f851 cb04 	ldr.w	ip, [r1], #4
 801004e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010052:	e7c3      	b.n	800ffdc <rshift+0x28>
 8010054:	4623      	mov	r3, r4
 8010056:	e7e1      	b.n	801001c <rshift+0x68>

08010058 <__hexdig_fun>:
 8010058:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801005c:	2b09      	cmp	r3, #9
 801005e:	d802      	bhi.n	8010066 <__hexdig_fun+0xe>
 8010060:	3820      	subs	r0, #32
 8010062:	b2c0      	uxtb	r0, r0
 8010064:	4770      	bx	lr
 8010066:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801006a:	2b05      	cmp	r3, #5
 801006c:	d801      	bhi.n	8010072 <__hexdig_fun+0x1a>
 801006e:	3847      	subs	r0, #71	@ 0x47
 8010070:	e7f7      	b.n	8010062 <__hexdig_fun+0xa>
 8010072:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010076:	2b05      	cmp	r3, #5
 8010078:	d801      	bhi.n	801007e <__hexdig_fun+0x26>
 801007a:	3827      	subs	r0, #39	@ 0x27
 801007c:	e7f1      	b.n	8010062 <__hexdig_fun+0xa>
 801007e:	2000      	movs	r0, #0
 8010080:	4770      	bx	lr
	...

08010084 <__gethex>:
 8010084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010088:	b085      	sub	sp, #20
 801008a:	468a      	mov	sl, r1
 801008c:	9302      	str	r3, [sp, #8]
 801008e:	680b      	ldr	r3, [r1, #0]
 8010090:	9001      	str	r0, [sp, #4]
 8010092:	4690      	mov	r8, r2
 8010094:	1c9c      	adds	r4, r3, #2
 8010096:	46a1      	mov	r9, r4
 8010098:	f814 0b01 	ldrb.w	r0, [r4], #1
 801009c:	2830      	cmp	r0, #48	@ 0x30
 801009e:	d0fa      	beq.n	8010096 <__gethex+0x12>
 80100a0:	eba9 0303 	sub.w	r3, r9, r3
 80100a4:	f1a3 0b02 	sub.w	fp, r3, #2
 80100a8:	f7ff ffd6 	bl	8010058 <__hexdig_fun>
 80100ac:	4605      	mov	r5, r0
 80100ae:	2800      	cmp	r0, #0
 80100b0:	d168      	bne.n	8010184 <__gethex+0x100>
 80100b2:	49a0      	ldr	r1, [pc, #640]	@ (8010334 <__gethex+0x2b0>)
 80100b4:	2201      	movs	r2, #1
 80100b6:	4648      	mov	r0, r9
 80100b8:	f7ff fefc 	bl	800feb4 <strncmp>
 80100bc:	4607      	mov	r7, r0
 80100be:	2800      	cmp	r0, #0
 80100c0:	d167      	bne.n	8010192 <__gethex+0x10e>
 80100c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80100c6:	4626      	mov	r6, r4
 80100c8:	f7ff ffc6 	bl	8010058 <__hexdig_fun>
 80100cc:	2800      	cmp	r0, #0
 80100ce:	d062      	beq.n	8010196 <__gethex+0x112>
 80100d0:	4623      	mov	r3, r4
 80100d2:	7818      	ldrb	r0, [r3, #0]
 80100d4:	2830      	cmp	r0, #48	@ 0x30
 80100d6:	4699      	mov	r9, r3
 80100d8:	f103 0301 	add.w	r3, r3, #1
 80100dc:	d0f9      	beq.n	80100d2 <__gethex+0x4e>
 80100de:	f7ff ffbb 	bl	8010058 <__hexdig_fun>
 80100e2:	fab0 f580 	clz	r5, r0
 80100e6:	096d      	lsrs	r5, r5, #5
 80100e8:	f04f 0b01 	mov.w	fp, #1
 80100ec:	464a      	mov	r2, r9
 80100ee:	4616      	mov	r6, r2
 80100f0:	3201      	adds	r2, #1
 80100f2:	7830      	ldrb	r0, [r6, #0]
 80100f4:	f7ff ffb0 	bl	8010058 <__hexdig_fun>
 80100f8:	2800      	cmp	r0, #0
 80100fa:	d1f8      	bne.n	80100ee <__gethex+0x6a>
 80100fc:	498d      	ldr	r1, [pc, #564]	@ (8010334 <__gethex+0x2b0>)
 80100fe:	2201      	movs	r2, #1
 8010100:	4630      	mov	r0, r6
 8010102:	f7ff fed7 	bl	800feb4 <strncmp>
 8010106:	2800      	cmp	r0, #0
 8010108:	d13f      	bne.n	801018a <__gethex+0x106>
 801010a:	b944      	cbnz	r4, 801011e <__gethex+0x9a>
 801010c:	1c74      	adds	r4, r6, #1
 801010e:	4622      	mov	r2, r4
 8010110:	4616      	mov	r6, r2
 8010112:	3201      	adds	r2, #1
 8010114:	7830      	ldrb	r0, [r6, #0]
 8010116:	f7ff ff9f 	bl	8010058 <__hexdig_fun>
 801011a:	2800      	cmp	r0, #0
 801011c:	d1f8      	bne.n	8010110 <__gethex+0x8c>
 801011e:	1ba4      	subs	r4, r4, r6
 8010120:	00a7      	lsls	r7, r4, #2
 8010122:	7833      	ldrb	r3, [r6, #0]
 8010124:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010128:	2b50      	cmp	r3, #80	@ 0x50
 801012a:	d13e      	bne.n	80101aa <__gethex+0x126>
 801012c:	7873      	ldrb	r3, [r6, #1]
 801012e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010130:	d033      	beq.n	801019a <__gethex+0x116>
 8010132:	2b2d      	cmp	r3, #45	@ 0x2d
 8010134:	d034      	beq.n	80101a0 <__gethex+0x11c>
 8010136:	1c71      	adds	r1, r6, #1
 8010138:	2400      	movs	r4, #0
 801013a:	7808      	ldrb	r0, [r1, #0]
 801013c:	f7ff ff8c 	bl	8010058 <__hexdig_fun>
 8010140:	1e43      	subs	r3, r0, #1
 8010142:	b2db      	uxtb	r3, r3
 8010144:	2b18      	cmp	r3, #24
 8010146:	d830      	bhi.n	80101aa <__gethex+0x126>
 8010148:	f1a0 0210 	sub.w	r2, r0, #16
 801014c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010150:	f7ff ff82 	bl	8010058 <__hexdig_fun>
 8010154:	f100 3cff 	add.w	ip, r0, #4294967295
 8010158:	fa5f fc8c 	uxtb.w	ip, ip
 801015c:	f1bc 0f18 	cmp.w	ip, #24
 8010160:	f04f 030a 	mov.w	r3, #10
 8010164:	d91e      	bls.n	80101a4 <__gethex+0x120>
 8010166:	b104      	cbz	r4, 801016a <__gethex+0xe6>
 8010168:	4252      	negs	r2, r2
 801016a:	4417      	add	r7, r2
 801016c:	f8ca 1000 	str.w	r1, [sl]
 8010170:	b1ed      	cbz	r5, 80101ae <__gethex+0x12a>
 8010172:	f1bb 0f00 	cmp.w	fp, #0
 8010176:	bf0c      	ite	eq
 8010178:	2506      	moveq	r5, #6
 801017a:	2500      	movne	r5, #0
 801017c:	4628      	mov	r0, r5
 801017e:	b005      	add	sp, #20
 8010180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010184:	2500      	movs	r5, #0
 8010186:	462c      	mov	r4, r5
 8010188:	e7b0      	b.n	80100ec <__gethex+0x68>
 801018a:	2c00      	cmp	r4, #0
 801018c:	d1c7      	bne.n	801011e <__gethex+0x9a>
 801018e:	4627      	mov	r7, r4
 8010190:	e7c7      	b.n	8010122 <__gethex+0x9e>
 8010192:	464e      	mov	r6, r9
 8010194:	462f      	mov	r7, r5
 8010196:	2501      	movs	r5, #1
 8010198:	e7c3      	b.n	8010122 <__gethex+0x9e>
 801019a:	2400      	movs	r4, #0
 801019c:	1cb1      	adds	r1, r6, #2
 801019e:	e7cc      	b.n	801013a <__gethex+0xb6>
 80101a0:	2401      	movs	r4, #1
 80101a2:	e7fb      	b.n	801019c <__gethex+0x118>
 80101a4:	fb03 0002 	mla	r0, r3, r2, r0
 80101a8:	e7ce      	b.n	8010148 <__gethex+0xc4>
 80101aa:	4631      	mov	r1, r6
 80101ac:	e7de      	b.n	801016c <__gethex+0xe8>
 80101ae:	eba6 0309 	sub.w	r3, r6, r9
 80101b2:	3b01      	subs	r3, #1
 80101b4:	4629      	mov	r1, r5
 80101b6:	2b07      	cmp	r3, #7
 80101b8:	dc0a      	bgt.n	80101d0 <__gethex+0x14c>
 80101ba:	9801      	ldr	r0, [sp, #4]
 80101bc:	f7fd ffd6 	bl	800e16c <_Balloc>
 80101c0:	4604      	mov	r4, r0
 80101c2:	b940      	cbnz	r0, 80101d6 <__gethex+0x152>
 80101c4:	4b5c      	ldr	r3, [pc, #368]	@ (8010338 <__gethex+0x2b4>)
 80101c6:	4602      	mov	r2, r0
 80101c8:	21e4      	movs	r1, #228	@ 0xe4
 80101ca:	485c      	ldr	r0, [pc, #368]	@ (801033c <__gethex+0x2b8>)
 80101cc:	f7ff fec0 	bl	800ff50 <__assert_func>
 80101d0:	3101      	adds	r1, #1
 80101d2:	105b      	asrs	r3, r3, #1
 80101d4:	e7ef      	b.n	80101b6 <__gethex+0x132>
 80101d6:	f100 0a14 	add.w	sl, r0, #20
 80101da:	2300      	movs	r3, #0
 80101dc:	4655      	mov	r5, sl
 80101de:	469b      	mov	fp, r3
 80101e0:	45b1      	cmp	r9, r6
 80101e2:	d337      	bcc.n	8010254 <__gethex+0x1d0>
 80101e4:	f845 bb04 	str.w	fp, [r5], #4
 80101e8:	eba5 050a 	sub.w	r5, r5, sl
 80101ec:	10ad      	asrs	r5, r5, #2
 80101ee:	6125      	str	r5, [r4, #16]
 80101f0:	4658      	mov	r0, fp
 80101f2:	f7fe f8ad 	bl	800e350 <__hi0bits>
 80101f6:	016d      	lsls	r5, r5, #5
 80101f8:	f8d8 6000 	ldr.w	r6, [r8]
 80101fc:	1a2d      	subs	r5, r5, r0
 80101fe:	42b5      	cmp	r5, r6
 8010200:	dd54      	ble.n	80102ac <__gethex+0x228>
 8010202:	1bad      	subs	r5, r5, r6
 8010204:	4629      	mov	r1, r5
 8010206:	4620      	mov	r0, r4
 8010208:	f7fe fc3e 	bl	800ea88 <__any_on>
 801020c:	4681      	mov	r9, r0
 801020e:	b178      	cbz	r0, 8010230 <__gethex+0x1ac>
 8010210:	1e6b      	subs	r3, r5, #1
 8010212:	1159      	asrs	r1, r3, #5
 8010214:	f003 021f 	and.w	r2, r3, #31
 8010218:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801021c:	f04f 0901 	mov.w	r9, #1
 8010220:	fa09 f202 	lsl.w	r2, r9, r2
 8010224:	420a      	tst	r2, r1
 8010226:	d003      	beq.n	8010230 <__gethex+0x1ac>
 8010228:	454b      	cmp	r3, r9
 801022a:	dc36      	bgt.n	801029a <__gethex+0x216>
 801022c:	f04f 0902 	mov.w	r9, #2
 8010230:	4629      	mov	r1, r5
 8010232:	4620      	mov	r0, r4
 8010234:	f7ff febe 	bl	800ffb4 <rshift>
 8010238:	442f      	add	r7, r5
 801023a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801023e:	42bb      	cmp	r3, r7
 8010240:	da42      	bge.n	80102c8 <__gethex+0x244>
 8010242:	9801      	ldr	r0, [sp, #4]
 8010244:	4621      	mov	r1, r4
 8010246:	f7fd ffd1 	bl	800e1ec <_Bfree>
 801024a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801024c:	2300      	movs	r3, #0
 801024e:	6013      	str	r3, [r2, #0]
 8010250:	25a3      	movs	r5, #163	@ 0xa3
 8010252:	e793      	b.n	801017c <__gethex+0xf8>
 8010254:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010258:	2a2e      	cmp	r2, #46	@ 0x2e
 801025a:	d012      	beq.n	8010282 <__gethex+0x1fe>
 801025c:	2b20      	cmp	r3, #32
 801025e:	d104      	bne.n	801026a <__gethex+0x1e6>
 8010260:	f845 bb04 	str.w	fp, [r5], #4
 8010264:	f04f 0b00 	mov.w	fp, #0
 8010268:	465b      	mov	r3, fp
 801026a:	7830      	ldrb	r0, [r6, #0]
 801026c:	9303      	str	r3, [sp, #12]
 801026e:	f7ff fef3 	bl	8010058 <__hexdig_fun>
 8010272:	9b03      	ldr	r3, [sp, #12]
 8010274:	f000 000f 	and.w	r0, r0, #15
 8010278:	4098      	lsls	r0, r3
 801027a:	ea4b 0b00 	orr.w	fp, fp, r0
 801027e:	3304      	adds	r3, #4
 8010280:	e7ae      	b.n	80101e0 <__gethex+0x15c>
 8010282:	45b1      	cmp	r9, r6
 8010284:	d8ea      	bhi.n	801025c <__gethex+0x1d8>
 8010286:	492b      	ldr	r1, [pc, #172]	@ (8010334 <__gethex+0x2b0>)
 8010288:	9303      	str	r3, [sp, #12]
 801028a:	2201      	movs	r2, #1
 801028c:	4630      	mov	r0, r6
 801028e:	f7ff fe11 	bl	800feb4 <strncmp>
 8010292:	9b03      	ldr	r3, [sp, #12]
 8010294:	2800      	cmp	r0, #0
 8010296:	d1e1      	bne.n	801025c <__gethex+0x1d8>
 8010298:	e7a2      	b.n	80101e0 <__gethex+0x15c>
 801029a:	1ea9      	subs	r1, r5, #2
 801029c:	4620      	mov	r0, r4
 801029e:	f7fe fbf3 	bl	800ea88 <__any_on>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d0c2      	beq.n	801022c <__gethex+0x1a8>
 80102a6:	f04f 0903 	mov.w	r9, #3
 80102aa:	e7c1      	b.n	8010230 <__gethex+0x1ac>
 80102ac:	da09      	bge.n	80102c2 <__gethex+0x23e>
 80102ae:	1b75      	subs	r5, r6, r5
 80102b0:	4621      	mov	r1, r4
 80102b2:	9801      	ldr	r0, [sp, #4]
 80102b4:	462a      	mov	r2, r5
 80102b6:	f7fe f9b1 	bl	800e61c <__lshift>
 80102ba:	1b7f      	subs	r7, r7, r5
 80102bc:	4604      	mov	r4, r0
 80102be:	f100 0a14 	add.w	sl, r0, #20
 80102c2:	f04f 0900 	mov.w	r9, #0
 80102c6:	e7b8      	b.n	801023a <__gethex+0x1b6>
 80102c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80102cc:	42bd      	cmp	r5, r7
 80102ce:	dd6f      	ble.n	80103b0 <__gethex+0x32c>
 80102d0:	1bed      	subs	r5, r5, r7
 80102d2:	42ae      	cmp	r6, r5
 80102d4:	dc34      	bgt.n	8010340 <__gethex+0x2bc>
 80102d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80102da:	2b02      	cmp	r3, #2
 80102dc:	d022      	beq.n	8010324 <__gethex+0x2a0>
 80102de:	2b03      	cmp	r3, #3
 80102e0:	d024      	beq.n	801032c <__gethex+0x2a8>
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d115      	bne.n	8010312 <__gethex+0x28e>
 80102e6:	42ae      	cmp	r6, r5
 80102e8:	d113      	bne.n	8010312 <__gethex+0x28e>
 80102ea:	2e01      	cmp	r6, #1
 80102ec:	d10b      	bne.n	8010306 <__gethex+0x282>
 80102ee:	9a02      	ldr	r2, [sp, #8]
 80102f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80102f4:	6013      	str	r3, [r2, #0]
 80102f6:	2301      	movs	r3, #1
 80102f8:	6123      	str	r3, [r4, #16]
 80102fa:	f8ca 3000 	str.w	r3, [sl]
 80102fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010300:	2562      	movs	r5, #98	@ 0x62
 8010302:	601c      	str	r4, [r3, #0]
 8010304:	e73a      	b.n	801017c <__gethex+0xf8>
 8010306:	1e71      	subs	r1, r6, #1
 8010308:	4620      	mov	r0, r4
 801030a:	f7fe fbbd 	bl	800ea88 <__any_on>
 801030e:	2800      	cmp	r0, #0
 8010310:	d1ed      	bne.n	80102ee <__gethex+0x26a>
 8010312:	9801      	ldr	r0, [sp, #4]
 8010314:	4621      	mov	r1, r4
 8010316:	f7fd ff69 	bl	800e1ec <_Bfree>
 801031a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801031c:	2300      	movs	r3, #0
 801031e:	6013      	str	r3, [r2, #0]
 8010320:	2550      	movs	r5, #80	@ 0x50
 8010322:	e72b      	b.n	801017c <__gethex+0xf8>
 8010324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010326:	2b00      	cmp	r3, #0
 8010328:	d1f3      	bne.n	8010312 <__gethex+0x28e>
 801032a:	e7e0      	b.n	80102ee <__gethex+0x26a>
 801032c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1dd      	bne.n	80102ee <__gethex+0x26a>
 8010332:	e7ee      	b.n	8010312 <__gethex+0x28e>
 8010334:	08010b40 	.word	0x08010b40
 8010338:	080109d5 	.word	0x080109d5
 801033c:	08010cee 	.word	0x08010cee
 8010340:	1e6f      	subs	r7, r5, #1
 8010342:	f1b9 0f00 	cmp.w	r9, #0
 8010346:	d130      	bne.n	80103aa <__gethex+0x326>
 8010348:	b127      	cbz	r7, 8010354 <__gethex+0x2d0>
 801034a:	4639      	mov	r1, r7
 801034c:	4620      	mov	r0, r4
 801034e:	f7fe fb9b 	bl	800ea88 <__any_on>
 8010352:	4681      	mov	r9, r0
 8010354:	117a      	asrs	r2, r7, #5
 8010356:	2301      	movs	r3, #1
 8010358:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801035c:	f007 071f 	and.w	r7, r7, #31
 8010360:	40bb      	lsls	r3, r7
 8010362:	4213      	tst	r3, r2
 8010364:	4629      	mov	r1, r5
 8010366:	4620      	mov	r0, r4
 8010368:	bf18      	it	ne
 801036a:	f049 0902 	orrne.w	r9, r9, #2
 801036e:	f7ff fe21 	bl	800ffb4 <rshift>
 8010372:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010376:	1b76      	subs	r6, r6, r5
 8010378:	2502      	movs	r5, #2
 801037a:	f1b9 0f00 	cmp.w	r9, #0
 801037e:	d047      	beq.n	8010410 <__gethex+0x38c>
 8010380:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010384:	2b02      	cmp	r3, #2
 8010386:	d015      	beq.n	80103b4 <__gethex+0x330>
 8010388:	2b03      	cmp	r3, #3
 801038a:	d017      	beq.n	80103bc <__gethex+0x338>
 801038c:	2b01      	cmp	r3, #1
 801038e:	d109      	bne.n	80103a4 <__gethex+0x320>
 8010390:	f019 0f02 	tst.w	r9, #2
 8010394:	d006      	beq.n	80103a4 <__gethex+0x320>
 8010396:	f8da 3000 	ldr.w	r3, [sl]
 801039a:	ea49 0903 	orr.w	r9, r9, r3
 801039e:	f019 0f01 	tst.w	r9, #1
 80103a2:	d10e      	bne.n	80103c2 <__gethex+0x33e>
 80103a4:	f045 0510 	orr.w	r5, r5, #16
 80103a8:	e032      	b.n	8010410 <__gethex+0x38c>
 80103aa:	f04f 0901 	mov.w	r9, #1
 80103ae:	e7d1      	b.n	8010354 <__gethex+0x2d0>
 80103b0:	2501      	movs	r5, #1
 80103b2:	e7e2      	b.n	801037a <__gethex+0x2f6>
 80103b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103b6:	f1c3 0301 	rsb	r3, r3, #1
 80103ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80103bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d0f0      	beq.n	80103a4 <__gethex+0x320>
 80103c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80103c6:	f104 0314 	add.w	r3, r4, #20
 80103ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80103ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80103d2:	f04f 0c00 	mov.w	ip, #0
 80103d6:	4618      	mov	r0, r3
 80103d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80103dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80103e0:	d01b      	beq.n	801041a <__gethex+0x396>
 80103e2:	3201      	adds	r2, #1
 80103e4:	6002      	str	r2, [r0, #0]
 80103e6:	2d02      	cmp	r5, #2
 80103e8:	f104 0314 	add.w	r3, r4, #20
 80103ec:	d13c      	bne.n	8010468 <__gethex+0x3e4>
 80103ee:	f8d8 2000 	ldr.w	r2, [r8]
 80103f2:	3a01      	subs	r2, #1
 80103f4:	42b2      	cmp	r2, r6
 80103f6:	d109      	bne.n	801040c <__gethex+0x388>
 80103f8:	1171      	asrs	r1, r6, #5
 80103fa:	2201      	movs	r2, #1
 80103fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010400:	f006 061f 	and.w	r6, r6, #31
 8010404:	fa02 f606 	lsl.w	r6, r2, r6
 8010408:	421e      	tst	r6, r3
 801040a:	d13a      	bne.n	8010482 <__gethex+0x3fe>
 801040c:	f045 0520 	orr.w	r5, r5, #32
 8010410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010412:	601c      	str	r4, [r3, #0]
 8010414:	9b02      	ldr	r3, [sp, #8]
 8010416:	601f      	str	r7, [r3, #0]
 8010418:	e6b0      	b.n	801017c <__gethex+0xf8>
 801041a:	4299      	cmp	r1, r3
 801041c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010420:	d8d9      	bhi.n	80103d6 <__gethex+0x352>
 8010422:	68a3      	ldr	r3, [r4, #8]
 8010424:	459b      	cmp	fp, r3
 8010426:	db17      	blt.n	8010458 <__gethex+0x3d4>
 8010428:	6861      	ldr	r1, [r4, #4]
 801042a:	9801      	ldr	r0, [sp, #4]
 801042c:	3101      	adds	r1, #1
 801042e:	f7fd fe9d 	bl	800e16c <_Balloc>
 8010432:	4681      	mov	r9, r0
 8010434:	b918      	cbnz	r0, 801043e <__gethex+0x3ba>
 8010436:	4b1a      	ldr	r3, [pc, #104]	@ (80104a0 <__gethex+0x41c>)
 8010438:	4602      	mov	r2, r0
 801043a:	2184      	movs	r1, #132	@ 0x84
 801043c:	e6c5      	b.n	80101ca <__gethex+0x146>
 801043e:	6922      	ldr	r2, [r4, #16]
 8010440:	3202      	adds	r2, #2
 8010442:	f104 010c 	add.w	r1, r4, #12
 8010446:	0092      	lsls	r2, r2, #2
 8010448:	300c      	adds	r0, #12
 801044a:	f7fc ff9a 	bl	800d382 <memcpy>
 801044e:	4621      	mov	r1, r4
 8010450:	9801      	ldr	r0, [sp, #4]
 8010452:	f7fd fecb 	bl	800e1ec <_Bfree>
 8010456:	464c      	mov	r4, r9
 8010458:	6923      	ldr	r3, [r4, #16]
 801045a:	1c5a      	adds	r2, r3, #1
 801045c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010460:	6122      	str	r2, [r4, #16]
 8010462:	2201      	movs	r2, #1
 8010464:	615a      	str	r2, [r3, #20]
 8010466:	e7be      	b.n	80103e6 <__gethex+0x362>
 8010468:	6922      	ldr	r2, [r4, #16]
 801046a:	455a      	cmp	r2, fp
 801046c:	dd0b      	ble.n	8010486 <__gethex+0x402>
 801046e:	2101      	movs	r1, #1
 8010470:	4620      	mov	r0, r4
 8010472:	f7ff fd9f 	bl	800ffb4 <rshift>
 8010476:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801047a:	3701      	adds	r7, #1
 801047c:	42bb      	cmp	r3, r7
 801047e:	f6ff aee0 	blt.w	8010242 <__gethex+0x1be>
 8010482:	2501      	movs	r5, #1
 8010484:	e7c2      	b.n	801040c <__gethex+0x388>
 8010486:	f016 061f 	ands.w	r6, r6, #31
 801048a:	d0fa      	beq.n	8010482 <__gethex+0x3fe>
 801048c:	4453      	add	r3, sl
 801048e:	f1c6 0620 	rsb	r6, r6, #32
 8010492:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010496:	f7fd ff5b 	bl	800e350 <__hi0bits>
 801049a:	42b0      	cmp	r0, r6
 801049c:	dbe7      	blt.n	801046e <__gethex+0x3ea>
 801049e:	e7f0      	b.n	8010482 <__gethex+0x3fe>
 80104a0:	080109d5 	.word	0x080109d5

080104a4 <L_shift>:
 80104a4:	f1c2 0208 	rsb	r2, r2, #8
 80104a8:	0092      	lsls	r2, r2, #2
 80104aa:	b570      	push	{r4, r5, r6, lr}
 80104ac:	f1c2 0620 	rsb	r6, r2, #32
 80104b0:	6843      	ldr	r3, [r0, #4]
 80104b2:	6804      	ldr	r4, [r0, #0]
 80104b4:	fa03 f506 	lsl.w	r5, r3, r6
 80104b8:	432c      	orrs	r4, r5
 80104ba:	40d3      	lsrs	r3, r2
 80104bc:	6004      	str	r4, [r0, #0]
 80104be:	f840 3f04 	str.w	r3, [r0, #4]!
 80104c2:	4288      	cmp	r0, r1
 80104c4:	d3f4      	bcc.n	80104b0 <L_shift+0xc>
 80104c6:	bd70      	pop	{r4, r5, r6, pc}

080104c8 <__match>:
 80104c8:	b530      	push	{r4, r5, lr}
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	3301      	adds	r3, #1
 80104ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104d2:	b914      	cbnz	r4, 80104da <__match+0x12>
 80104d4:	6003      	str	r3, [r0, #0]
 80104d6:	2001      	movs	r0, #1
 80104d8:	bd30      	pop	{r4, r5, pc}
 80104da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80104e2:	2d19      	cmp	r5, #25
 80104e4:	bf98      	it	ls
 80104e6:	3220      	addls	r2, #32
 80104e8:	42a2      	cmp	r2, r4
 80104ea:	d0f0      	beq.n	80104ce <__match+0x6>
 80104ec:	2000      	movs	r0, #0
 80104ee:	e7f3      	b.n	80104d8 <__match+0x10>

080104f0 <__hexnan>:
 80104f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f4:	680b      	ldr	r3, [r1, #0]
 80104f6:	6801      	ldr	r1, [r0, #0]
 80104f8:	115e      	asrs	r6, r3, #5
 80104fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80104fe:	f013 031f 	ands.w	r3, r3, #31
 8010502:	b087      	sub	sp, #28
 8010504:	bf18      	it	ne
 8010506:	3604      	addne	r6, #4
 8010508:	2500      	movs	r5, #0
 801050a:	1f37      	subs	r7, r6, #4
 801050c:	4682      	mov	sl, r0
 801050e:	4690      	mov	r8, r2
 8010510:	9301      	str	r3, [sp, #4]
 8010512:	f846 5c04 	str.w	r5, [r6, #-4]
 8010516:	46b9      	mov	r9, r7
 8010518:	463c      	mov	r4, r7
 801051a:	9502      	str	r5, [sp, #8]
 801051c:	46ab      	mov	fp, r5
 801051e:	784a      	ldrb	r2, [r1, #1]
 8010520:	1c4b      	adds	r3, r1, #1
 8010522:	9303      	str	r3, [sp, #12]
 8010524:	b342      	cbz	r2, 8010578 <__hexnan+0x88>
 8010526:	4610      	mov	r0, r2
 8010528:	9105      	str	r1, [sp, #20]
 801052a:	9204      	str	r2, [sp, #16]
 801052c:	f7ff fd94 	bl	8010058 <__hexdig_fun>
 8010530:	2800      	cmp	r0, #0
 8010532:	d151      	bne.n	80105d8 <__hexnan+0xe8>
 8010534:	9a04      	ldr	r2, [sp, #16]
 8010536:	9905      	ldr	r1, [sp, #20]
 8010538:	2a20      	cmp	r2, #32
 801053a:	d818      	bhi.n	801056e <__hexnan+0x7e>
 801053c:	9b02      	ldr	r3, [sp, #8]
 801053e:	459b      	cmp	fp, r3
 8010540:	dd13      	ble.n	801056a <__hexnan+0x7a>
 8010542:	454c      	cmp	r4, r9
 8010544:	d206      	bcs.n	8010554 <__hexnan+0x64>
 8010546:	2d07      	cmp	r5, #7
 8010548:	dc04      	bgt.n	8010554 <__hexnan+0x64>
 801054a:	462a      	mov	r2, r5
 801054c:	4649      	mov	r1, r9
 801054e:	4620      	mov	r0, r4
 8010550:	f7ff ffa8 	bl	80104a4 <L_shift>
 8010554:	4544      	cmp	r4, r8
 8010556:	d952      	bls.n	80105fe <__hexnan+0x10e>
 8010558:	2300      	movs	r3, #0
 801055a:	f1a4 0904 	sub.w	r9, r4, #4
 801055e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010562:	f8cd b008 	str.w	fp, [sp, #8]
 8010566:	464c      	mov	r4, r9
 8010568:	461d      	mov	r5, r3
 801056a:	9903      	ldr	r1, [sp, #12]
 801056c:	e7d7      	b.n	801051e <__hexnan+0x2e>
 801056e:	2a29      	cmp	r2, #41	@ 0x29
 8010570:	d157      	bne.n	8010622 <__hexnan+0x132>
 8010572:	3102      	adds	r1, #2
 8010574:	f8ca 1000 	str.w	r1, [sl]
 8010578:	f1bb 0f00 	cmp.w	fp, #0
 801057c:	d051      	beq.n	8010622 <__hexnan+0x132>
 801057e:	454c      	cmp	r4, r9
 8010580:	d206      	bcs.n	8010590 <__hexnan+0xa0>
 8010582:	2d07      	cmp	r5, #7
 8010584:	dc04      	bgt.n	8010590 <__hexnan+0xa0>
 8010586:	462a      	mov	r2, r5
 8010588:	4649      	mov	r1, r9
 801058a:	4620      	mov	r0, r4
 801058c:	f7ff ff8a 	bl	80104a4 <L_shift>
 8010590:	4544      	cmp	r4, r8
 8010592:	d936      	bls.n	8010602 <__hexnan+0x112>
 8010594:	f1a8 0204 	sub.w	r2, r8, #4
 8010598:	4623      	mov	r3, r4
 801059a:	f853 1b04 	ldr.w	r1, [r3], #4
 801059e:	f842 1f04 	str.w	r1, [r2, #4]!
 80105a2:	429f      	cmp	r7, r3
 80105a4:	d2f9      	bcs.n	801059a <__hexnan+0xaa>
 80105a6:	1b3b      	subs	r3, r7, r4
 80105a8:	f023 0303 	bic.w	r3, r3, #3
 80105ac:	3304      	adds	r3, #4
 80105ae:	3401      	adds	r4, #1
 80105b0:	3e03      	subs	r6, #3
 80105b2:	42b4      	cmp	r4, r6
 80105b4:	bf88      	it	hi
 80105b6:	2304      	movhi	r3, #4
 80105b8:	4443      	add	r3, r8
 80105ba:	2200      	movs	r2, #0
 80105bc:	f843 2b04 	str.w	r2, [r3], #4
 80105c0:	429f      	cmp	r7, r3
 80105c2:	d2fb      	bcs.n	80105bc <__hexnan+0xcc>
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	b91b      	cbnz	r3, 80105d0 <__hexnan+0xe0>
 80105c8:	4547      	cmp	r7, r8
 80105ca:	d128      	bne.n	801061e <__hexnan+0x12e>
 80105cc:	2301      	movs	r3, #1
 80105ce:	603b      	str	r3, [r7, #0]
 80105d0:	2005      	movs	r0, #5
 80105d2:	b007      	add	sp, #28
 80105d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d8:	3501      	adds	r5, #1
 80105da:	2d08      	cmp	r5, #8
 80105dc:	f10b 0b01 	add.w	fp, fp, #1
 80105e0:	dd06      	ble.n	80105f0 <__hexnan+0x100>
 80105e2:	4544      	cmp	r4, r8
 80105e4:	d9c1      	bls.n	801056a <__hexnan+0x7a>
 80105e6:	2300      	movs	r3, #0
 80105e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80105ec:	2501      	movs	r5, #1
 80105ee:	3c04      	subs	r4, #4
 80105f0:	6822      	ldr	r2, [r4, #0]
 80105f2:	f000 000f 	and.w	r0, r0, #15
 80105f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80105fa:	6020      	str	r0, [r4, #0]
 80105fc:	e7b5      	b.n	801056a <__hexnan+0x7a>
 80105fe:	2508      	movs	r5, #8
 8010600:	e7b3      	b.n	801056a <__hexnan+0x7a>
 8010602:	9b01      	ldr	r3, [sp, #4]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d0dd      	beq.n	80105c4 <__hexnan+0xd4>
 8010608:	f1c3 0320 	rsb	r3, r3, #32
 801060c:	f04f 32ff 	mov.w	r2, #4294967295
 8010610:	40da      	lsrs	r2, r3
 8010612:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010616:	4013      	ands	r3, r2
 8010618:	f846 3c04 	str.w	r3, [r6, #-4]
 801061c:	e7d2      	b.n	80105c4 <__hexnan+0xd4>
 801061e:	3f04      	subs	r7, #4
 8010620:	e7d0      	b.n	80105c4 <__hexnan+0xd4>
 8010622:	2004      	movs	r0, #4
 8010624:	e7d5      	b.n	80105d2 <__hexnan+0xe2>

08010626 <__ascii_mbtowc>:
 8010626:	b082      	sub	sp, #8
 8010628:	b901      	cbnz	r1, 801062c <__ascii_mbtowc+0x6>
 801062a:	a901      	add	r1, sp, #4
 801062c:	b142      	cbz	r2, 8010640 <__ascii_mbtowc+0x1a>
 801062e:	b14b      	cbz	r3, 8010644 <__ascii_mbtowc+0x1e>
 8010630:	7813      	ldrb	r3, [r2, #0]
 8010632:	600b      	str	r3, [r1, #0]
 8010634:	7812      	ldrb	r2, [r2, #0]
 8010636:	1e10      	subs	r0, r2, #0
 8010638:	bf18      	it	ne
 801063a:	2001      	movne	r0, #1
 801063c:	b002      	add	sp, #8
 801063e:	4770      	bx	lr
 8010640:	4610      	mov	r0, r2
 8010642:	e7fb      	b.n	801063c <__ascii_mbtowc+0x16>
 8010644:	f06f 0001 	mvn.w	r0, #1
 8010648:	e7f8      	b.n	801063c <__ascii_mbtowc+0x16>

0801064a <_realloc_r>:
 801064a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801064e:	4680      	mov	r8, r0
 8010650:	4615      	mov	r5, r2
 8010652:	460c      	mov	r4, r1
 8010654:	b921      	cbnz	r1, 8010660 <_realloc_r+0x16>
 8010656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801065a:	4611      	mov	r1, r2
 801065c:	f7fd bcfa 	b.w	800e054 <_malloc_r>
 8010660:	b92a      	cbnz	r2, 801066e <_realloc_r+0x24>
 8010662:	f7fd fc83 	bl	800df6c <_free_r>
 8010666:	2400      	movs	r4, #0
 8010668:	4620      	mov	r0, r4
 801066a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801066e:	f000 f840 	bl	80106f2 <_malloc_usable_size_r>
 8010672:	4285      	cmp	r5, r0
 8010674:	4606      	mov	r6, r0
 8010676:	d802      	bhi.n	801067e <_realloc_r+0x34>
 8010678:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801067c:	d8f4      	bhi.n	8010668 <_realloc_r+0x1e>
 801067e:	4629      	mov	r1, r5
 8010680:	4640      	mov	r0, r8
 8010682:	f7fd fce7 	bl	800e054 <_malloc_r>
 8010686:	4607      	mov	r7, r0
 8010688:	2800      	cmp	r0, #0
 801068a:	d0ec      	beq.n	8010666 <_realloc_r+0x1c>
 801068c:	42b5      	cmp	r5, r6
 801068e:	462a      	mov	r2, r5
 8010690:	4621      	mov	r1, r4
 8010692:	bf28      	it	cs
 8010694:	4632      	movcs	r2, r6
 8010696:	f7fc fe74 	bl	800d382 <memcpy>
 801069a:	4621      	mov	r1, r4
 801069c:	4640      	mov	r0, r8
 801069e:	f7fd fc65 	bl	800df6c <_free_r>
 80106a2:	463c      	mov	r4, r7
 80106a4:	e7e0      	b.n	8010668 <_realloc_r+0x1e>

080106a6 <__ascii_wctomb>:
 80106a6:	4603      	mov	r3, r0
 80106a8:	4608      	mov	r0, r1
 80106aa:	b141      	cbz	r1, 80106be <__ascii_wctomb+0x18>
 80106ac:	2aff      	cmp	r2, #255	@ 0xff
 80106ae:	d904      	bls.n	80106ba <__ascii_wctomb+0x14>
 80106b0:	228a      	movs	r2, #138	@ 0x8a
 80106b2:	601a      	str	r2, [r3, #0]
 80106b4:	f04f 30ff 	mov.w	r0, #4294967295
 80106b8:	4770      	bx	lr
 80106ba:	700a      	strb	r2, [r1, #0]
 80106bc:	2001      	movs	r0, #1
 80106be:	4770      	bx	lr

080106c0 <fiprintf>:
 80106c0:	b40e      	push	{r1, r2, r3}
 80106c2:	b503      	push	{r0, r1, lr}
 80106c4:	4601      	mov	r1, r0
 80106c6:	ab03      	add	r3, sp, #12
 80106c8:	4805      	ldr	r0, [pc, #20]	@ (80106e0 <fiprintf+0x20>)
 80106ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80106ce:	6800      	ldr	r0, [r0, #0]
 80106d0:	9301      	str	r3, [sp, #4]
 80106d2:	f7ff f9af 	bl	800fa34 <_vfiprintf_r>
 80106d6:	b002      	add	sp, #8
 80106d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80106dc:	b003      	add	sp, #12
 80106de:	4770      	bx	lr
 80106e0:	2400001c 	.word	0x2400001c

080106e4 <abort>:
 80106e4:	b508      	push	{r3, lr}
 80106e6:	2006      	movs	r0, #6
 80106e8:	f000 f834 	bl	8010754 <raise>
 80106ec:	2001      	movs	r0, #1
 80106ee:	f7f1 faab 	bl	8001c48 <_exit>

080106f2 <_malloc_usable_size_r>:
 80106f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106f6:	1f18      	subs	r0, r3, #4
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	bfbc      	itt	lt
 80106fc:	580b      	ldrlt	r3, [r1, r0]
 80106fe:	18c0      	addlt	r0, r0, r3
 8010700:	4770      	bx	lr

08010702 <_raise_r>:
 8010702:	291f      	cmp	r1, #31
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	4605      	mov	r5, r0
 8010708:	460c      	mov	r4, r1
 801070a:	d904      	bls.n	8010716 <_raise_r+0x14>
 801070c:	2316      	movs	r3, #22
 801070e:	6003      	str	r3, [r0, #0]
 8010710:	f04f 30ff 	mov.w	r0, #4294967295
 8010714:	bd38      	pop	{r3, r4, r5, pc}
 8010716:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010718:	b112      	cbz	r2, 8010720 <_raise_r+0x1e>
 801071a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801071e:	b94b      	cbnz	r3, 8010734 <_raise_r+0x32>
 8010720:	4628      	mov	r0, r5
 8010722:	f000 f831 	bl	8010788 <_getpid_r>
 8010726:	4622      	mov	r2, r4
 8010728:	4601      	mov	r1, r0
 801072a:	4628      	mov	r0, r5
 801072c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010730:	f000 b818 	b.w	8010764 <_kill_r>
 8010734:	2b01      	cmp	r3, #1
 8010736:	d00a      	beq.n	801074e <_raise_r+0x4c>
 8010738:	1c59      	adds	r1, r3, #1
 801073a:	d103      	bne.n	8010744 <_raise_r+0x42>
 801073c:	2316      	movs	r3, #22
 801073e:	6003      	str	r3, [r0, #0]
 8010740:	2001      	movs	r0, #1
 8010742:	e7e7      	b.n	8010714 <_raise_r+0x12>
 8010744:	2100      	movs	r1, #0
 8010746:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801074a:	4620      	mov	r0, r4
 801074c:	4798      	blx	r3
 801074e:	2000      	movs	r0, #0
 8010750:	e7e0      	b.n	8010714 <_raise_r+0x12>
	...

08010754 <raise>:
 8010754:	4b02      	ldr	r3, [pc, #8]	@ (8010760 <raise+0xc>)
 8010756:	4601      	mov	r1, r0
 8010758:	6818      	ldr	r0, [r3, #0]
 801075a:	f7ff bfd2 	b.w	8010702 <_raise_r>
 801075e:	bf00      	nop
 8010760:	2400001c 	.word	0x2400001c

08010764 <_kill_r>:
 8010764:	b538      	push	{r3, r4, r5, lr}
 8010766:	4d07      	ldr	r5, [pc, #28]	@ (8010784 <_kill_r+0x20>)
 8010768:	2300      	movs	r3, #0
 801076a:	4604      	mov	r4, r0
 801076c:	4608      	mov	r0, r1
 801076e:	4611      	mov	r1, r2
 8010770:	602b      	str	r3, [r5, #0]
 8010772:	f7f1 fa59 	bl	8001c28 <_kill>
 8010776:	1c43      	adds	r3, r0, #1
 8010778:	d102      	bne.n	8010780 <_kill_r+0x1c>
 801077a:	682b      	ldr	r3, [r5, #0]
 801077c:	b103      	cbz	r3, 8010780 <_kill_r+0x1c>
 801077e:	6023      	str	r3, [r4, #0]
 8010780:	bd38      	pop	{r3, r4, r5, pc}
 8010782:	bf00      	nop
 8010784:	24000b04 	.word	0x24000b04

08010788 <_getpid_r>:
 8010788:	f7f1 ba46 	b.w	8001c18 <_getpid>

0801078c <_init>:
 801078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801078e:	bf00      	nop
 8010790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010792:	bc08      	pop	{r3}
 8010794:	469e      	mov	lr, r3
 8010796:	4770      	bx	lr

08010798 <_fini>:
 8010798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801079a:	bf00      	nop
 801079c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801079e:	bc08      	pop	{r3}
 80107a0:	469e      	mov	lr, r3
 80107a2:	4770      	bx	lr
