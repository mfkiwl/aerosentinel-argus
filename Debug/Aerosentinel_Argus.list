
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ada4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  0801b078  0801b078  0001c078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b738  0801b738  0001c738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b740  0801b740  0001c740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b744  0801b744  0001c744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000354  24000000  0801b748  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e50  24000358  0801ba9c  0001d358  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240011a8  0801ba9c  0001e1a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d354  2**0
                  CONTENTS, READONLY
 10 .debug_info   00042cd8  00000000  00000000  0001d382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006294  00000000  00000000  0006005a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003a28  00000000  00000000  000662f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002df7  00000000  00000000  00069d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000409f9  00000000  00000000  0006cb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00045bd9  00000000  00000000  000ad508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00192fcf  00000000  00000000  000f30e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002860b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000113f8  00000000  00000000  002860f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  002974ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000358 	.word	0x24000358
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801b05c 	.word	0x0801b05c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400035c 	.word	0x2400035c
 800030c:	0801b05c 	.word	0x0801b05c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <asm330lhh_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t asm330lhh_platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af04      	add	r7, sp, #16
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	72fb      	strb	r3, [r7, #11]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef status;
    uint32_t errorCode;

    // Perform the I2C read operation using HAL_I2C_Mem_Read
    status = HAL_I2C_Mem_Read(&hi2c4, ASM330LHH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8000aac:	7afb      	ldrb	r3, [r7, #11]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	2364      	movs	r3, #100	@ 0x64
 8000ab2:	9302      	str	r3, [sp, #8]
 8000ab4:	893b      	ldrh	r3, [r7, #8]
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	21d5      	movs	r1, #213	@ 0xd5
 8000ac0:	482b      	ldr	r0, [pc, #172]	@ (8000b70 <asm330lhh_platform_read+0xd8>)
 8000ac2:	f009 f965 	bl	8009d90 <HAL_I2C_Mem_Read>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	75fb      	strb	r3, [r7, #23]

    // Check the status and print detailed error information
    if (status != HAL_OK) {
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d03d      	beq.n	8000b4c <asm330lhh_platform_read+0xb4>
        // Get the error code
        errorCode = HAL_I2C_GetError(handle);
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f009 fc18 	bl	800a306 <HAL_I2C_GetError>
 8000ad6:	6138      	str	r0, [r7, #16]
        printf("I2C Read Status: %d\n", status);
 8000ad8:	7dfb      	ldrb	r3, [r7, #23]
 8000ada:	4619      	mov	r1, r3
 8000adc:	4825      	ldr	r0, [pc, #148]	@ (8000b74 <asm330lhh_platform_read+0xdc>)
 8000ade:	f016 fed1 	bl	8017884 <iprintf>
        printf("I2C Error Code: 0x%08lX\n", errorCode);
 8000ae2:	6939      	ldr	r1, [r7, #16]
 8000ae4:	4824      	ldr	r0, [pc, #144]	@ (8000b78 <asm330lhh_platform_read+0xe0>)
 8000ae6:	f016 fecd 	bl	8017884 <iprintf>

        // Print specific error details
        if (errorCode & HAL_I2C_ERROR_BERR) {
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <asm330lhh_platform_read+0x62>
            printf("Error: Bus Error\n");
 8000af4:	4821      	ldr	r0, [pc, #132]	@ (8000b7c <asm330lhh_platform_read+0xe4>)
 8000af6:	f016 ff2d 	bl	8017954 <puts>
        }
        if (errorCode & HAL_I2C_ERROR_ARLO) {
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <asm330lhh_platform_read+0x72>
            printf("Error: Arbitration Lost\n");
 8000b04:	481e      	ldr	r0, [pc, #120]	@ (8000b80 <asm330lhh_platform_read+0xe8>)
 8000b06:	f016 ff25 	bl	8017954 <puts>
        }
        if (errorCode & HAL_I2C_ERROR_AF) {
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d002      	beq.n	8000b1a <asm330lhh_platform_read+0x82>
            printf("Error: Acknowledge Failure\n");
 8000b14:	481b      	ldr	r0, [pc, #108]	@ (8000b84 <asm330lhh_platform_read+0xec>)
 8000b16:	f016 ff1d 	bl	8017954 <puts>
        }
        if (errorCode & HAL_I2C_ERROR_OVR) {
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	f003 0308 	and.w	r3, r3, #8
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <asm330lhh_platform_read+0x92>
            printf("Error: Overrun/Underrun\n");
 8000b24:	4818      	ldr	r0, [pc, #96]	@ (8000b88 <asm330lhh_platform_read+0xf0>)
 8000b26:	f016 ff15 	bl	8017954 <puts>
        }
        if (errorCode & HAL_I2C_ERROR_DMA) {
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <asm330lhh_platform_read+0xa2>
            printf("Error: DMA Transfer Error\n");
 8000b34:	4815      	ldr	r0, [pc, #84]	@ (8000b8c <asm330lhh_platform_read+0xf4>)
 8000b36:	f016 ff0d 	bl	8017954 <puts>
        }
        if (errorCode & HAL_I2C_ERROR_TIMEOUT) {
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	f003 0320 	and.w	r3, r3, #32
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d009      	beq.n	8000b58 <asm330lhh_platform_read+0xc0>
            printf("Error: Timeout Error\n");
 8000b44:	4812      	ldr	r0, [pc, #72]	@ (8000b90 <asm330lhh_platform_read+0xf8>)
 8000b46:	f016 ff05 	bl	8017954 <puts>
 8000b4a:	e005      	b.n	8000b58 <asm330lhh_platform_read+0xc0>
        }
    } else {
        printf("I2C Read Success: %x\n", *bufp);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	4810      	ldr	r0, [pc, #64]	@ (8000b94 <asm330lhh_platform_read+0xfc>)
 8000b54:	f016 fe96 	bl	8017884 <iprintf>
    }

    // Return the appropriate value based on the HAL status
    return (status == HAL_OK) ? 0 : -1;
 8000b58:	7dfb      	ldrb	r3, [r7, #23]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <asm330lhh_platform_read+0xca>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e001      	b.n	8000b66 <asm330lhh_platform_read+0xce>
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	24000804 	.word	0x24000804
 8000b74:	0801b078 	.word	0x0801b078
 8000b78:	0801b090 	.word	0x0801b090
 8000b7c:	0801b0ac 	.word	0x0801b0ac
 8000b80:	0801b0c0 	.word	0x0801b0c0
 8000b84:	0801b0d8 	.word	0x0801b0d8
 8000b88:	0801b0f4 	.word	0x0801b0f4
 8000b8c:	0801b10c 	.word	0x0801b10c
 8000b90:	0801b128 	.word	0x0801b128
 8000b94:	0801b140 	.word	0x0801b140

08000b98 <asm330lhh_platform_write>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t asm330lhh_platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af04      	add	r7, sp, #16
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	72fb      	strb	r3, [r7, #11]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	813b      	strh	r3, [r7, #8]
  // Perform the I2C write operation using HAL_I2C_Mem_Write
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c4, (ASM330LHH_I2C_ADD_L << 1), reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)bufp, len, 100);
 8000bac:	7afb      	ldrb	r3, [r7, #11]
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	2364      	movs	r3, #100	@ 0x64
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	893b      	ldrh	r3, [r7, #8]
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000bc2:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <asm330lhh_platform_write+0x4c>)
 8000bc4:	f008 ffd0 	bl	8009b68 <HAL_I2C_Mem_Write>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <asm330lhh_platform_write+0x3e>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e001      	b.n	8000bda <asm330lhh_platform_write+0x42>
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	24000804 	.word	0x24000804

08000be8 <asm330lhh_delay_msec>:
  * @}
  *
  */

void asm330lhh_delay_msec(uint32_t msecs)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    HAL_Delay(msecs);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f006 fab1 	bl	8007158 <HAL_Delay>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <ASM330LHH_Init>:
  *
  * @param  asm330lhh_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
bool ASM330LHH_Init(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

	//Assign Read/Write functions to the device
	asm330lhh.read_reg = asm330lhh_platform_read;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <ASM330LHH_Init+0x40>)
 8000c08:	4a0e      	ldr	r2, [pc, #56]	@ (8000c44 <ASM330LHH_Init+0x44>)
 8000c0a:	605a      	str	r2, [r3, #4]
	asm330lhh.write_reg = asm330lhh_platform_write;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <ASM330LHH_Init+0x40>)
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c48 <ASM330LHH_Init+0x48>)
 8000c10:	601a      	str	r2, [r3, #0]
	//Assign I2C Port of device
	asm330lhh.handle =  &hi2c4;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <ASM330LHH_Init+0x40>)
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <ASM330LHH_Init+0x4c>)
 8000c16:	60da      	str	r2, [r3, #12]
	asm330lhh.mdelay = asm330lhh_delay_msec;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <ASM330LHH_Init+0x40>)
 8000c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <ASM330LHH_Init+0x50>)
 8000c1c:	609a      	str	r2, [r3, #8]


	/* Check device ID */
		whoamI = 0;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <ASM330LHH_Init+0x54>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]

//		if ( whoamI != ASM330LHH_ID ) {
//			printf("ASM330LHH ID Error!! Should be : %hhu \n",whoamI);
//			return 0;
//		}
		int32_t ret = asm330lhh_device_id_get(&asm330lhh, &whoamI);
 8000c24:	490b      	ldr	r1, [pc, #44]	@ (8000c54 <ASM330LHH_Init+0x54>)
 8000c26:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <ASM330LHH_Init+0x40>)
 8000c28:	f000 f836 	bl	8000c98 <asm330lhh_device_id_get>
 8000c2c:	6078      	str	r0, [r7, #4]

			printf("%d \n", ret);
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	4809      	ldr	r0, [pc, #36]	@ (8000c58 <ASM330LHH_Init+0x58>)
 8000c32:	f016 fe27 	bl	8017884 <iprintf>
			return 0;
 8000c36:	2300      	movs	r3, #0

		//TODO -> Configure the device if recognised successfully.
		//return 1;


}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	24000374 	.word	0x24000374
 8000c44:	08000a99 	.word	0x08000a99
 8000c48:	08000b99 	.word	0x08000b99
 8000c4c:	24000804 	.word	0x24000804
 8000c50:	08000be9 	.word	0x08000be9
 8000c54:	24000384 	.word	0x24000384
 8000c58:	0801b158 	.word	0x0801b158

08000c5c <asm330lhh_read_reg>:
  *
  */
int32_t __weak asm330lhh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	461a      	mov	r2, r3
 8000c68:	460b      	mov	r3, r1
 8000c6a:	72fb      	strb	r3, [r7, #11]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <asm330lhh_read_reg+0x20>
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <asm330lhh_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	685c      	ldr	r4, [r3, #4]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	68d8      	ldr	r0, [r3, #12]
 8000c84:	893b      	ldrh	r3, [r7, #8]
 8000c86:	7af9      	ldrb	r1, [r7, #11]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	47a0      	blx	r4
 8000c8c:	6178      	str	r0, [r7, #20]

  return ret;
 8000c8e:	697b      	ldr	r3, [r7, #20]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	371c      	adds	r7, #28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd90      	pop	{r4, r7, pc}

08000c98 <asm330lhh_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_WHO_AM_I, buff, 1);
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ffd7 	bl	8000c5c <asm330lhh_read_reg>
 8000cae:	60f8      	str	r0, [r7, #12]

  return ret;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <bme680_platform_read>:
  * @param  length       number of consecutive register to read
  * @param  intf_ptr     interface pointer
  * @retval              interface status (MANDATORY: return 0 -> no Error)
  *
  */
int8_t bme680_platform_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;

    status = HAL_SPI_Transmit((SPI_HandleTypeDef *)intf_ptr, &reg_addr, 1, 100);
 8000cca:	f107 010f 	add.w	r1, r7, #15
 8000cce:	2364      	movs	r3, #100	@ 0x64
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	6838      	ldr	r0, [r7, #0]
 8000cd4:	f00f fd18 	bl	8010708 <HAL_SPI_Transmit>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return -1;
 8000cdc:	7dfb      	ldrb	r3, [r7, #23]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <bme680_platform_read+0x2e>
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e00f      	b.n	8000d08 <bme680_platform_read+0x4e>

    status = HAL_SPI_Receive((SPI_HandleTypeDef *)intf_ptr, reg_data, length, 100);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	2364      	movs	r3, #100	@ 0x64
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	6838      	ldr	r0, [r7, #0]
 8000cf2:	f00f fef7 	bl	8010ae4 <HAL_SPI_Receive>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK) ? 0 : -1;
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <bme680_platform_read+0x4a>
 8000d00:	2300      	movs	r3, #0
 8000d02:	e001      	b.n	8000d08 <bme680_platform_read+0x4e>
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <bme680_platform_write>:
  * @param  length       number of consecutive register to read
  * @param  intf_ptr     interface pointer
  * @retval              interface status (MANDATORY: return 0 -> no Error)
  *
  */
int8_t bme680_platform_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 8000d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d14:	b089      	sub	sp, #36	@ 0x24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4603      	mov	r3, r0
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	466b      	mov	r3, sp
 8000d24:	461e      	mov	r6, r3
    uint8_t tx_buffer[length + 1];
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	1c59      	adds	r1, r3, #1
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	2300      	movs	r3, #0
 8000d32:	4688      	mov	r8, r1
 8000d34:	4699      	mov	r9, r3
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	460c      	mov	r4, r1
 8000d4e:	461d      	mov	r5, r3
 8000d50:	f04f 0200 	mov.w	r2, #0
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	00eb      	lsls	r3, r5, #3
 8000d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d5e:	00e2      	lsls	r2, r4, #3
 8000d60:	1dcb      	adds	r3, r1, #7
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	ebad 0d03 	sub.w	sp, sp, r3
 8000d6a:	466b      	mov	r3, sp
 8000d6c:	3300      	adds	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
    tx_buffer[0] = reg_addr;
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	701a      	strb	r2, [r3, #0]
    memcpy(&tx_buffer[1], reg_data, length);
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f016 ff67 	bl	8017c52 <memcpy>

    HAL_StatusTypeDef status = HAL_SPI_Transmit((SPI_HandleTypeDef *)intf_ptr, tx_buffer, length + 1, 100);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	2364      	movs	r3, #100	@ 0x64
 8000d8e:	69b9      	ldr	r1, [r7, #24]
 8000d90:	6838      	ldr	r0, [r7, #0]
 8000d92:	f00f fcb9 	bl	8010708 <HAL_SPI_Transmit>
 8000d96:	4603      	mov	r3, r0
 8000d98:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK) ? 0 : -1;
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <bme680_platform_write+0x94>
 8000da0:	2300      	movs	r3, #0
 8000da2:	e001      	b.n	8000da8 <bme680_platform_write+0x98>
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	46b5      	mov	sp, r6
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	@ 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000db4 <BME680_Init>:
  *
  * @param  bme680_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
bool BME680_Init(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

	//Device interface selection and assignment
    bme680.intf_ptr = &hspi2;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <BME680_Init+0x40>)
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <BME680_Init+0x44>)
 8000dbe:	605a      	str	r2, [r3, #4]
    bme680.intf = BME68X_SPI_INTF;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <BME680_Init+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	731a      	strb	r2, [r3, #12]

	//Assign Read/Write functions to the device
    bme680.read = bme680_platform_read;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <BME680_Init+0x40>)
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <BME680_Init+0x48>)
 8000dca:	641a      	str	r2, [r3, #64]	@ 0x40
    bme680.write = bme680_platform_write;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <BME680_Init+0x40>)
 8000dce:	4a0c      	ldr	r2, [pc, #48]	@ (8000e00 <BME680_Init+0x4c>)
 8000dd0:	645a      	str	r2, [r3, #68]	@ 0x44

    int8_t bme680_status = bme68x_init(&bme680);
 8000dd2:	4808      	ldr	r0, [pc, #32]	@ (8000df4 <BME680_Init+0x40>)
 8000dd4:	f000 f816 	bl	8000e04 <bme68x_init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]


    return !bme680_status;
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf0c      	ite	eq
 8000de4:	2301      	moveq	r3, #1
 8000de6:	2300      	movne	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	24000388 	.word	0x24000388
 8000df8:	2400095c 	.word	0x2400095c
 8000dfc:	08000cbb 	.word	0x08000cbb
 8000e00:	08000d11 	.word	0x08000d11

08000e04 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f8fb 	bl	8001008 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	20d0      	movs	r0, #208	@ 0xd0
 8000e1a:	f000 f8b1 	bl	8000f80 <bme68x_get_regs>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d114      	bne.n	8000e54 <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b61      	cmp	r3, #97	@ 0x61
 8000e30:	d10e      	bne.n	8000e50 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 fae2 	bl	80013fc <read_variant_id>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d107      	bne.n	8000e54 <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f9d5 	bl	80011f4 <get_calib_data>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e001      	b.n	8000e54 <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000e50:	23fd      	movs	r3, #253	@ 0xfd
 8000e52:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000e60:	b5b0      	push	{r4, r5, r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000e80:	6838      	ldr	r0, [r7, #0]
 8000e82:	f000 f998 	bl	80011b6 <null_ptr_check>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d16c      	bne.n	8000f6e <bme68x_set_regs+0x10e>
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d069      	beq.n	8000f6e <bme68x_set_regs+0x10e>
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d066      	beq.n	8000f6e <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d05d      	beq.n	8000f62 <bme68x_set_regs+0x102>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0a      	cmp	r3, #10
 8000eaa:	d85a      	bhi.n	8000f62 <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000eb0:	e034      	b.n	8000f1c <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	7b1b      	ldrb	r3, [r3, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d118      	bne.n	8000eec <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8000eba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f8e2 	bl	800108e <set_mem_page>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8000ed0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	3328      	adds	r3, #40	@ 0x28
 8000ee4:	443b      	add	r3, r7
 8000ee6:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000eea:	e009      	b.n	8000f00 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8000eec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	441a      	add	r2, r3
 8000ef2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	7812      	ldrb	r2, [r2, #0]
 8000ef8:	3328      	adds	r3, #40	@ 0x28
 8000efa:	443b      	add	r3, r7
 8000efc:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8000f00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	441a      	add	r2, r3
 8000f06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	7812      	ldrb	r2, [r2, #0]
 8000f0e:	3328      	adds	r3, #40	@ 0x28
 8000f10:	443b      	add	r3, r7
 8000f12:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8000f16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f18:	3301      	adds	r3, #1
 8000f1a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000f1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8c6      	bhi.n	8000eb2 <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8000f24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d11e      	bne.n	8000f6a <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8000f30:	7c38      	ldrb	r0, [r7, #16]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	1e5a      	subs	r2, r3, #1
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685d      	ldr	r5, [r3, #4]
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	1c59      	adds	r1, r3, #1
 8000f42:	462b      	mov	r3, r5
 8000f44:	47a0      	blx	r4
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d007      	beq.n	8000f6a <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8000f5a:	23fe      	movs	r3, #254	@ 0xfe
 8000f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8000f60:	e003      	b.n	8000f6a <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8000f62:	23fc      	movs	r3, #252	@ 0xfc
 8000f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000f68:	e004      	b.n	8000f74 <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8000f6a:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000f6c:	e002      	b.n	8000f74 <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8000f6e:	23ff      	movs	r3, #255	@ 0xff
 8000f70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8000f74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bdb0      	pop	{r4, r5, r7, pc}

08000f80 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f90:	6838      	ldr	r0, [r7, #0]
 8000f92:	f000 f910 	bl	80011b6 <null_ptr_check>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8000f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d12a      	bne.n	8000ff8 <bme68x_get_regs+0x78>
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d027      	beq.n	8000ff8 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	7b1b      	ldrb	r3, [r3, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10e      	bne.n	8000fce <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	6839      	ldr	r1, [r7, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f86a 	bl	800108e <set_mem_page>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8000fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d103      	bne.n	8000fce <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fcc:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	7bf8      	ldrb	r0, [r7, #15]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	47a0      	blx	r4
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8000ff2:	23fe      	movs	r3, #254	@ 0xfe
 8000ff4:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8000ff6:	e001      	b.n	8000ffc <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8000ff8:	23ff      	movs	r3, #255	@ 0xff
 8000ffa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001000:	4618      	mov	r0, r3
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd90      	pop	{r4, r7, pc}

08001008 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001010:	23e0      	movs	r3, #224	@ 0xe0
 8001012:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001014:	23b6      	movs	r3, #182	@ 0xb6
 8001016:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f8cc 	bl	80011b6 <null_ptr_check>
 800101e:	4603      	mov	r3, r0
 8001020:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d12b      	bne.n	8001082 <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7b1b      	ldrb	r3, [r3, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d104      	bne.n	800103c <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f890 	bl	8001158 <get_mem_page>
 8001038:	4603      	mov	r3, r0
 800103a:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d11e      	bne.n	8001082 <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001044:	f107 010d 	add.w	r1, r7, #13
 8001048:	f107 000e 	add.w	r0, r7, #14
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f7ff ff06 	bl	8000e60 <bme68x_set_regs>
 8001054:	4603      	mov	r3, r0
 8001056:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d110      	bne.n	8001082 <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6852      	ldr	r2, [r2, #4]
 8001068:	4611      	mov	r1, r2
 800106a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800106e:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7b1b      	ldrb	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d104      	bne.n	8001082 <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f86d 	bl	8001158 <get_mem_page>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <set_mem_page>:
    return rslt;
}

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 800108e:	b590      	push	{r4, r7, lr}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	6039      	str	r1, [r7, #0]
 8001098:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f000 f88b 	bl	80011b6 <null_ptr_check>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d14f      	bne.n	800114c <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da02      	bge.n	80010ba <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73bb      	strb	r3, [r7, #14]
 80010b8:	e001      	b.n	80010be <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80010ba:	2310      	movs	r3, #16
 80010bc:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	7b5b      	ldrb	r3, [r3, #13]
 80010c2:	7bba      	ldrb	r2, [r7, #14]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d041      	beq.n	800114c <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	7bba      	ldrb	r2, [r7, #14]
 80010cc:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f107 010d 	add.w	r1, r7, #13
 80010da:	2201      	movs	r2, #1
 80010dc:	20f3      	movs	r0, #243	@ 0xf3
 80010de:	47a0      	blx	r4
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 80010f4:	23fe      	movs	r3, #254	@ 0xfe
 80010f6:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 80010f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d125      	bne.n	800114c <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8001100:	7b7b      	ldrb	r3, [r7, #13]
 8001102:	f023 0310 	bic.w	r3, r3, #16
 8001106:	b2db      	uxtb	r3, r3
 8001108:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	7b5b      	ldrb	r3, [r3, #13]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	b25a      	sxtb	r2, r3
 8001116:	7b7b      	ldrb	r3, [r7, #13]
 8001118:	b25b      	sxtb	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f107 010d 	add.w	r1, r7, #13
 800112e:	2201      	movs	r2, #1
 8001130:	2073      	movs	r0, #115	@ 0x73
 8001132:	47a0      	blx	r4
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001148:	23fe      	movs	r3, #254	@ 0xfe
 800114a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}

08001158 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f828 	bl	80011b6 <null_ptr_check>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d11b      	bne.n	80011aa <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f107 010e 	add.w	r1, r7, #14
 800117e:	2201      	movs	r2, #1
 8001180:	20f3      	movs	r0, #243	@ 0xf3
 8001182:	47a0      	blx	r4
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8001198:	23fe      	movs	r3, #254	@ 0xfe
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e005      	b.n	80011aa <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 800119e:	7bbb      	ldrb	r3, [r7, #14]
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}

080011b6 <null_ptr_check>:
    return rslt;
}

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b085      	sub	sp, #20
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00b      	beq.n	80011e0 <null_ptr_check+0x2a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <null_ptr_check+0x2a>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <null_ptr_check+0x2a>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 80011e0:	23ff      	movs	r3, #255	@ 0xff
 80011e2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	@ 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 80011fc:	f107 010c 	add.w	r1, r7, #12
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2217      	movs	r2, #23
 8001204:	208a      	movs	r0, #138	@ 0x8a
 8001206:	f7ff febb 	bl	8000f80 <bme68x_get_regs>
 800120a:	4603      	mov	r3, r0
 800120c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 8001210:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10b      	bne.n	8001230 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	f103 0117 	add.w	r1, r3, #23
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	220e      	movs	r2, #14
 8001224:	20e1      	movs	r0, #225	@ 0xe1
 8001226:	f7ff feab 	bl	8000f80 <bme68x_get_regs>
 800122a:	4603      	mov	r3, r0
 800122c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 8001230:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10b      	bne.n	8001250 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2205      	movs	r2, #5
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff fe9b 	bl	8000f80 <bme68x_get_regs>
 800124a:	4603      	mov	r3, r0
 800124c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8001250:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001254:	2b00      	cmp	r3, #0
 8001256:	f040 80cb 	bne.w	80013f0 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 800125a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21b      	sxth	r3, r3
 800126c:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8001272:	7b7b      	ldrb	r3, [r7, #13]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21a      	sxth	r2, r3
 8001278:	7b3b      	ldrb	r3, [r7, #12]
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	b25a      	sxtb	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 800128e:	7c7b      	ldrb	r3, [r7, #17]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21a      	sxth	r2, r3
 8001294:	7c3b      	ldrb	r3, [r7, #16]
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21b      	sxth	r3, r3
 800129c:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 80012a2:	7cfb      	ldrb	r3, [r7, #19]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	7cbb      	ldrb	r3, [r7, #18]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 80012b4:	7d3b      	ldrb	r3, [r7, #20]
 80012b6:	b25a      	sxtb	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	7dbb      	ldrb	r3, [r7, #22]
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 80012d0:	7e7b      	ldrb	r3, [r7, #25]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7e3b      	ldrb	r3, [r7, #24]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 80012e2:	7efb      	ldrb	r3, [r7, #27]
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 80012ec:	7ebb      	ldrb	r3, [r7, #26]
 80012ee:	b25a      	sxtb	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 80012f6:	7ffb      	ldrb	r3, [r7, #31]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	7fbb      	ldrb	r3, [r7, #30]
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8001308:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 800131e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8001328:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8001330:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001334:	b21b      	sxth	r3, r3
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8001346:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	b21a      	sxth	r2, r3
 800134e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	b2db      	uxtb	r3, r3
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b21b      	sxth	r3, r3
 800135c:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8001362:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001366:	b25a      	sxtb	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 800136c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001370:	b25a      	sxtb	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8001376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800137a:	b25a      	sxtb	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8001380:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8001388:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800138c:	b25a      	sxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8001392:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001396:	b25a      	sxtb	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 800139c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 80013b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013b6:	b25a      	sxtb	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 80013bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	da00      	bge.n	80013ca <get_calib_data+0x1d6>
 80013c8:	330f      	adds	r3, #15
 80013ca:	111b      	asrs	r3, r3, #4
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 80013d4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80013d8:	b25a      	sxtb	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 80013e0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	111b      	asrs	r3, r3, #4
 80013e8:	b25a      	sxtb	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 80013f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3738      	adds	r7, #56	@ 0x38
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8001408:	f107 010e 	add.w	r1, r7, #14
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	20f0      	movs	r0, #240	@ 0xf0
 8001412:	f7ff fdb5 	bl	8000f80 <bme68x_get_regs>
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <bmi3_init>:
/*!
 * @brief This API is the entry point for bmi3 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi3_init(struct bmi3_dev *dev)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id[2] = { 0 };
 800143e:	2300      	movs	r3, #0
 8001440:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fd08 	bl	8001e58 <null_ptr_check>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 800144c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10d      	bne.n	8001470 <bmi3_init+0x3a>
    {
        dev->chip_id = 0;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI3_SPI_INTF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7a5b      	ldrb	r3, [r3, #9]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d103      	bne.n	800146a <bmi3_init+0x34>
        {
            dev->dummy_byte = 1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	72da      	strb	r2, [r3, #11]
 8001468:	e002      	b.n	8001470 <bmi3_init+0x3a>
        }
        else
        {
            dev->dummy_byte = 2;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2202      	movs	r2, #2
 800146e:	72da      	strb	r2, [r3, #11]
        }
    }

    if (rslt == BMI3_OK)
 8001470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d118      	bne.n	80014aa <bmi3_init+0x74>
    {
        /* Perform soft-reset to bring all register values to their default values */
        rslt = bmi3_soft_reset(dev);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f8d3 	bl	8001624 <bmi3_soft_reset>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10f      	bne.n	80014aa <bmi3_init+0x74>
        {
            /* Read chip-id of the BMI3 sensor */
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, chip_id, 2, dev);
 800148a:	f107 010c 	add.w	r1, r7, #12
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2202      	movs	r2, #2
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f821 	bl	80014da <bmi3_get_regs>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <bmi3_init+0x74>
            {
                dev->chip_id = chip_id[0];
 80014a4:	7b3a      	ldrb	r2, [r7, #12]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (rslt == BMI3_OK)
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10d      	bne.n	80014ce <bmi3_init+0x98>
    {
        if (((chip_id[1] & BMI3_REV_ID_MASK) >> BMI3_REV_ID_POS) == BMI3_ENABLE)
 80014b2:	7b7b      	ldrb	r3, [r7, #13]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d104      	bne.n	80014c6 <bmi3_init+0x90>
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_14_BIT_MASK;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 80014c2:	839a      	strh	r2, [r3, #28]
 80014c4:	e003      	b.n	80014ce <bmi3_init+0x98>
        }
        else
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_13_BIT_MASK;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80014cc:	839a      	strh	r2, [r3, #28]
        }
    }

    return rslt;
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <bmi3_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x03.
 */
int8_t bmi3_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 80014da:	b590      	push	{r4, r7, lr}
 80014dc:	b0a7      	sub	sp, #156	@ 0x9c
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	4613      	mov	r3, r2
 80014ea:	81bb      	strh	r3, [r7, #12]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI3_MAX_LEN];

    /* Variable to define loop */
    uint16_t index = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fcb0 	bl	8001e58 <null_ptr_check>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    if ((rslt == BMI3_OK) && (data != NULL))
 80014fe:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8001502:	2b00      	cmp	r3, #0
 8001504:	d145      	bne.n	8001592 <bmi3_get_regs+0xb8>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d042      	beq.n	8001592 <bmi3_get_regs+0xb8>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7a5b      	ldrb	r3, [r3, #9]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d103      	bne.n	800151c <bmi3_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI3_SPI_RD_MASK);
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800151a:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, len + dev->dummy_byte, dev->intf_ptr);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691c      	ldr	r4, [r3, #16]
 8001520:	89bb      	ldrh	r3, [r7, #12]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	7ad2      	ldrb	r2, [r2, #11]
 8001526:	4413      	add	r3, r2
 8001528:	461a      	mov	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f107 0114 	add.w	r1, r7, #20
 8001532:	7bf8      	ldrb	r0, [r7, #15]
 8001534:	47a0      	blx	r4
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6852      	ldr	r2, [r2, #4]
 8001546:	4611      	mov	r1, r2
 8001548:	2002      	movs	r0, #2
 800154a:	4798      	blx	r3

        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d119      	bne.n	800158a <bmi3_get_regs+0xb0>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8001556:	e012      	b.n	800157e <bmi3_get_regs+0xa4>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8001558:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	7ad2      	ldrb	r2, [r2, #11]
 8001560:	441a      	add	r2, r3
 8001562:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	440b      	add	r3, r1
 800156a:	3298      	adds	r2, #152	@ 0x98
 800156c:	443a      	add	r2, r7
 800156e:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8001572:	701a      	strb	r2, [r3, #0]
                index++;
 8001574:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001578:	3301      	adds	r3, #1
 800157a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 800157e:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8001582:	89bb      	ldrh	r3, [r7, #12]
 8001584:	429a      	cmp	r2, r3
 8001586:	d3e7      	bcc.n	8001558 <bmi3_get_regs+0x7e>
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001588:	e006      	b.n	8001598 <bmi3_get_regs+0xbe>
            }
        }
        else
        {
            rslt = BMI3_E_COM_FAIL;
 800158a:	23fe      	movs	r3, #254	@ 0xfe
 800158c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001590:	e002      	b.n	8001598 <bmi3_get_regs+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001592:	23ff      	movs	r3, #255	@ 0xff
 8001594:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8001598:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 800159c:	4618      	mov	r0, r3
 800159e:	379c      	adds	r7, #156	@ 0x9c
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}

080015a4 <bmi3_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi3 sensor.
 */
int8_t bmi3_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4603      	mov	r3, r0
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	4613      	mov	r3, r2
 80015b4:	81bb      	strh	r3, [r7, #12]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fc4e 	bl	8001e58 <null_ptr_check>
 80015bc:	4603      	mov	r3, r0
 80015be:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (data != NULL))
 80015c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d125      	bne.n	8001614 <bmi3_set_regs+0x70>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d022      	beq.n	8001614 <bmi3_set_regs+0x70>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7a5b      	ldrb	r3, [r3, #9]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d103      	bne.n	80015de <bmi3_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI3_SPI_WR_MASK);
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015dc:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695c      	ldr	r4, [r3, #20]
 80015e2:	89ba      	ldrh	r2, [r7, #12]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	7bf8      	ldrb	r0, [r7, #15]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	47a0      	blx	r4
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6852      	ldr	r2, [r2, #4]
 80015fe:	4611      	mov	r1, r2
 8001600:	2002      	movs	r0, #2
 8001602:	4798      	blx	r3

        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <bmi3_set_regs+0x74>
        {
            rslt = BMI3_E_COM_FAIL;
 800160e:	23fe      	movs	r3, #254	@ 0xfe
 8001610:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8001612:	e001      	b.n	8001618 <bmi3_set_regs+0x74>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001614:	23ff      	movs	r3, #255	@ 0xff
 8001616:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001618:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800161c:	4618      	mov	r0, r3
 800161e:	371c      	adds	r7, #28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}

08001624 <bmi3_soft_reset>:
/*!
 * @brief This API resets bmi3 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi3_soft_reset(struct bmi3_dev *dev)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to read the dummy byte */
    uint8_t dummy_byte[2] = { 0 };
 800162c:	2300      	movs	r3, #0
 800162e:	83bb      	strh	r3, [r7, #28]

    /* Variable to store feature data array */
    uint8_t feature_data[2] = { 0x2c, 0x01 };
 8001630:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001634:	833b      	strh	r3, [r7, #24]

    /* Variable to enable feature engine bit */
    uint8_t feature_engine_en[2] = { BMI3_ENABLE, 0 };
 8001636:	2301      	movs	r3, #1
 8001638:	82bb      	strh	r3, [r7, #20]

    /* Variable to store status value for feature engine enable */
    uint8_t reg_data[2] = { 0 };
 800163a:	2300      	movs	r3, #0
 800163c:	823b      	strh	r3, [r7, #16]

    /* Array variable to store feature IO status */
    uint8_t feature_io_status[2] = { BMI3_ENABLE, 0 };
 800163e:	2301      	movs	r3, #1
 8001640:	81bb      	strh	r3, [r7, #12]

    uint8_t loop = 1;
 8001642:	2301      	movs	r3, #1
 8001644:	77bb      	strb	r3, [r7, #30]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fc06 	bl	8001e58 <null_ptr_check>
 800164c:	4603      	mov	r3, r0
 800164e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI3_OK)
 8001650:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d16f      	bne.n	8001738 <bmi3_soft_reset+0x114>
    {
        /* Reset bmi3 device */
        rslt = bmi3_set_command_register(BMI3_CMD_SOFT_RESET, dev);
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	f64d 60af 	movw	r0, #57007	@ 0xdeaf
 800165e:	f000 f873 	bl	8001748 <bmi3_set_command_register>
 8001662:	4603      	mov	r3, r0
 8001664:	77fb      	strb	r3, [r7, #31]
        dev->delay_us(BMI3_SOFT_RESET_DELAY, dev->intf_ptr);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6852      	ldr	r2, [r2, #4]
 800166e:	4611      	mov	r1, r2
 8001670:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001674:	4798      	blx	r3

        /* Performing a dummy read after a soft-reset */
        if ((rslt == BMI3_OK) && (dev->intf == BMI3_SPI_INTF))
 8001676:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <bmi3_soft_reset+0x74>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7a5b      	ldrb	r3, [r3, #9]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <bmi3_soft_reset+0x74>
        {
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, dummy_byte, 2, dev);
 8001686:	f107 011c 	add.w	r1, r7, #28
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff ff23 	bl	80014da <bmi3_get_regs>
 8001694:	4603      	mov	r3, r0
 8001696:	77fb      	strb	r3, [r7, #31]
        }

        /* Enabling Feature engine */
        if (rslt == BMI3_OK)
 8001698:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d108      	bne.n	80016b2 <bmi3_soft_reset+0x8e>
        {
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO2, feature_data, 2, dev);
 80016a0:	f107 0118 	add.w	r1, r7, #24
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	2012      	movs	r0, #18
 80016aa:	f7ff ff7b 	bl	80015a4 <bmi3_set_regs>
 80016ae:	4603      	mov	r3, r0
 80016b0:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 80016b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d108      	bne.n	80016cc <bmi3_soft_reset+0xa8>
        {
            /* Enabling feature status bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO_STATUS, feature_io_status, 2, dev);
 80016ba:	f107 010c 	add.w	r1, r7, #12
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2202      	movs	r2, #2
 80016c2:	2014      	movs	r0, #20
 80016c4:	f7ff ff6e 	bl	80015a4 <bmi3_set_regs>
 80016c8:	4603      	mov	r3, r0
 80016ca:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 80016cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d108      	bne.n	80016e6 <bmi3_soft_reset+0xc2>
        {
            /* Enable feature engine bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_CTRL, feature_engine_en, 2, dev);
 80016d4:	f107 0114 	add.w	r1, r7, #20
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	2040      	movs	r0, #64	@ 0x40
 80016de:	f7ff ff61 	bl	80015a4 <bmi3_set_regs>
 80016e2:	4603      	mov	r3, r0
 80016e4:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 80016e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d124      	bne.n	8001738 <bmi3_soft_reset+0x114>
        {
            /* Checking the status bit for feature engine enable */
            while (loop <= 10)
 80016ee:	e020      	b.n	8001732 <bmi3_soft_reset+0x10e>
            {
                dev->delay_us(100000, dev->intf_ptr);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6852      	ldr	r2, [r2, #4]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4812      	ldr	r0, [pc, #72]	@ (8001744 <bmi3_soft_reset+0x120>)
 80016fc:	4798      	blx	r3

                rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO1, reg_data, 2, dev);
 80016fe:	f107 0110 	add.w	r1, r7, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2202      	movs	r2, #2
 8001706:	2011      	movs	r0, #17
 8001708:	f7ff fee7 	bl	80014da <bmi3_get_regs>
 800170c:	4603      	mov	r3, r0
 800170e:	77fb      	strb	r3, [r7, #31]

                if (rslt == BMI3_OK)
 8001710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d109      	bne.n	800172c <bmi3_soft_reset+0x108>
                {
                    if (reg_data[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK)
 8001718:	7c3b      	ldrb	r3, [r7, #16]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <bmi3_soft_reset+0x104>
                    {
                        rslt = BMI3_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	77fb      	strb	r3, [r7, #31]

                        break;
 8001726:	e007      	b.n	8001738 <bmi3_soft_reset+0x114>
                    }
                    else
                    {
                        rslt = BMI3_E_FEATURE_ENGINE_STATUS;
 8001728:	23f2      	movs	r3, #242	@ 0xf2
 800172a:	77fb      	strb	r3, [r7, #31]
                    }
                }

                loop++;
 800172c:	7fbb      	ldrb	r3, [r7, #30]
 800172e:	3301      	adds	r3, #1
 8001730:	77bb      	strb	r3, [r7, #30]
            while (loop <= 10)
 8001732:	7fbb      	ldrb	r3, [r7, #30]
 8001734:	2b0a      	cmp	r3, #10
 8001736:	d9db      	bls.n	80016f0 <bmi3_soft_reset+0xcc>
            }
        }
    }

    return rslt;
 8001738:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	000186a0 	.word	0x000186a0

08001748 <bmi3_set_command_register>:

/*!
 * @brief This API writes the available sensor specific commands to the sensor.
 */
int8_t bmi3_set_command_register(uint16_t command, struct bmi3_dev *dev)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store command value */
    uint8_t reg_data[2] = { 0 };
 8001754:	2300      	movs	r3, #0
 8001756:	81bb      	strh	r3, [r7, #12]

    reg_data[0] = (uint8_t)(command & BMI3_SET_LOW_BYTE);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	733b      	strb	r3, [r7, #12]
    reg_data[1] = (uint8_t)((command & BMI3_SET_HIGH_BYTE) >> 8);
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b29b      	uxth	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	737b      	strb	r3, [r7, #13]

    /* Set the command in the command register */
    rslt = bmi3_set_regs(BMI3_REG_CMD, reg_data, 2, dev);
 8001768:	f107 010c 	add.w	r1, r7, #12
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2202      	movs	r2, #2
 8001770:	207e      	movs	r0, #126	@ 0x7e
 8001772:	f7ff ff17 	bl	80015a4 <bmi3_set_regs>
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <bmi3_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi3_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	460b      	mov	r3, r1
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fb5e 	bl	8001e58 <null_ptr_check>
 800179c:	4603      	mov	r3, r0
 800179e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 80017a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f040 80f1 	bne.w	800198c <bmi3_set_sensor_config+0x204>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80ed 	beq.w	800198c <bmi3_set_sensor_config+0x204>
    {
        for (loop = 0; loop < n_sens; loop++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	75bb      	strb	r3, [r7, #22]
 80017b6:	e0e3      	b.n	8001980 <bmi3_set_sensor_config+0x1f8>
        {
            switch (sens_cfg[loop].type)
 80017b8:	7dbb      	ldrb	r3, [r7, #22]
 80017ba:	222e      	movs	r2, #46	@ 0x2e
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	f200 80d4 	bhi.w	8001974 <bmi3_set_sensor_config+0x1ec>
 80017cc:	a201      	add	r2, pc, #4	@ (adr r2, 80017d4 <bmi3_set_sensor_config+0x4c>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	08001809 	.word	0x08001809
 80017d8:	08001825 	.word	0x08001825
 80017dc:	08001879 	.word	0x08001879
 80017e0:	08001841 	.word	0x08001841
 80017e4:	0800185d 	.word	0x0800185d
 80017e8:	080018e9 	.word	0x080018e9
 80017ec:	080018b1 	.word	0x080018b1
 80017f0:	080018cd 	.word	0x080018cd
 80017f4:	08001895 	.word	0x08001895
 80017f8:	08001905 	.word	0x08001905
 80017fc:	08001921 	.word	0x08001921
 8001800:	0800193d 	.word	0x0800193d
 8001804:	08001959 	.word	0x08001959
            {
                case BMI3_ACCEL:
                    rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8001808:	7dbb      	ldrb	r3, [r7, #22]
 800180a:	222e      	movs	r2, #46	@ 0x2e
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	3302      	adds	r3, #2
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f8bf 	bl	800199c <set_accel_config>
 800181e:	4603      	mov	r3, r0
 8001820:	75fb      	strb	r3, [r7, #23]
                    break;
 8001822:	e0aa      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_GYRO:
                    rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8001824:	7dbb      	ldrb	r3, [r7, #22]
 8001826:	222e      	movs	r2, #46	@ 0x2e
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	3302      	adds	r3, #2
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fa07 	bl	8001c48 <set_gyro_config>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]
                    break;
 800183e:	e09c      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_ANY_MOTION:
                    rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8001840:	7dbb      	ldrb	r3, [r7, #22]
 8001842:	222e      	movs	r2, #46	@ 0x2e
 8001844:	fb02 f303 	mul.w	r3, r2, r3
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	3302      	adds	r3, #2
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fb21 	bl	8001e98 <set_any_motion_config>
 8001856:	4603      	mov	r3, r0
 8001858:	75fb      	strb	r3, [r7, #23]
                    break;
 800185a:	e08e      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_NO_MOTION:
                    rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 800185c:	7dbb      	ldrb	r3, [r7, #22]
 800185e:	222e      	movs	r2, #46	@ 0x2e
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	3302      	adds	r3, #2
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fbeb 	bl	8002048 <set_no_motion_config>
 8001872:	4603      	mov	r3, r0
 8001874:	75fb      	strb	r3, [r7, #23]
                    break;
 8001876:	e080      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_SIG_MOTION:
                    rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8001878:	7dbb      	ldrb	r3, [r7, #22]
 800187a:	222e      	movs	r2, #46	@ 0x2e
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	3302      	adds	r3, #2
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fd37 	bl	80022fc <set_sig_motion_config>
 800188e:	4603      	mov	r3, r0
 8001890:	75fb      	strb	r3, [r7, #23]
                    break;
 8001892:	e072      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_FLAT:
                    rslt = set_flat_config(&sens_cfg[loop].cfg.flat, dev);
 8001894:	7dbb      	ldrb	r3, [r7, #22]
 8001896:	222e      	movs	r2, #46	@ 0x2e
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	3302      	adds	r3, #2
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fca5 	bl	80021f4 <set_flat_config>
 80018aa:	4603      	mov	r3, r0
 80018ac:	75fb      	strb	r3, [r7, #23]
                    break;
 80018ae:	e064      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_TILT:
                    rslt = set_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 80018b0:	7dbb      	ldrb	r3, [r7, #22]
 80018b2:	222e      	movs	r2, #46	@ 0x2e
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	3302      	adds	r3, #2
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fdd7 	bl	8002474 <set_tilt_config>
 80018c6:	4603      	mov	r3, r0
 80018c8:	75fb      	strb	r3, [r7, #23]
                    break;
 80018ca:	e056      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_ORIENTATION:
                    rslt = set_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 80018cc:	7dbb      	ldrb	r3, [r7, #22]
 80018ce:	222e      	movs	r2, #46	@ 0x2e
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	3302      	adds	r3, #2
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fe2a 	bl	8002536 <set_orientation_config>
 80018e2:	4603      	mov	r3, r0
 80018e4:	75fb      	strb	r3, [r7, #23]
                    break;
 80018e6:	e048      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_STEP_COUNTER:
                    rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 80018e8:	7dbb      	ldrb	r3, [r7, #22]
 80018ea:	222e      	movs	r2, #46	@ 0x2e
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	3302      	adds	r3, #2
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fed5 	bl	80026a8 <set_step_config>
 80018fe:	4603      	mov	r3, r0
 8001900:	75fb      	strb	r3, [r7, #23]
                    break;
 8001902:	e03a      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_TAP:
                    rslt = set_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8001904:	7dbb      	ldrb	r3, [r7, #22]
 8001906:	222e      	movs	r2, #46	@ 0x2e
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	3302      	adds	r3, #2
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	f001 f949 	bl	8002bac <set_tap_config>
 800191a:	4603      	mov	r3, r0
 800191c:	75fb      	strb	r3, [r7, #23]
                    break;
 800191e:	e02c      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_ACCEL:
                    rslt = set_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 8001920:	7dbb      	ldrb	r3, [r7, #22]
 8001922:	222e      	movs	r2, #46	@ 0x2e
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	3302      	adds	r3, #2
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fa3d 	bl	8002db0 <set_alternate_accel_config>
 8001936:	4603      	mov	r3, r0
 8001938:	75fb      	strb	r3, [r7, #23]
                    break;
 800193a:	e01e      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_GYRO:
                    rslt = set_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 800193c:	7dbb      	ldrb	r3, [r7, #22]
 800193e:	222e      	movs	r2, #46	@ 0x2e
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	3302      	adds	r3, #2
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f001 fa7c 	bl	8002e4a <set_alternate_gyro_config>
 8001952:	4603      	mov	r3, r0
 8001954:	75fb      	strb	r3, [r7, #23]
                    break;
 8001956:	e010      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = set_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 8001958:	7dbb      	ldrb	r3, [r7, #22]
 800195a:	222e      	movs	r2, #46	@ 0x2e
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	3302      	adds	r3, #2
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	f001 fabb 	bl	8002ee4 <set_alternate_auto_config>
 800196e:	4603      	mov	r3, r0
 8001970:	75fb      	strb	r3, [r7, #23]
                    break;
 8001972:	e002      	b.n	800197a <bmi3_set_sensor_config+0x1f2>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8001974:	23fa      	movs	r3, #250	@ 0xfa
 8001976:	75fb      	strb	r3, [r7, #23]
                    break;
 8001978:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 800197a:	7dbb      	ldrb	r3, [r7, #22]
 800197c:	3301      	adds	r3, #1
 800197e:	75bb      	strb	r3, [r7, #22]
 8001980:	7dba      	ldrb	r2, [r7, #22]
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	429a      	cmp	r2, r3
 8001986:	f4ff af17 	bcc.w	80017b8 <bmi3_set_sensor_config+0x30>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 800198a:	e001      	b.n	8001990 <bmi3_set_sensor_config+0x208>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800198c:	23ff      	movs	r3, #255	@ 0xff
 800198e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001990:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR, accel mode,
 * bandwidth, average samples and range.
 */
static int8_t set_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 80019a6:	2300      	movs	r3, #0
 80019a8:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, acc_mode;

    if (config != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a3 	beq.w	8001af8 <set_accel_config+0x15c>
    {
        /* Validate bandwidth and averaging samples */
        rslt = validate_bw_avg_acc_mode(&config->bwp, &config->acc_mode, &config->avg_num, dev);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	1c58      	adds	r0, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	1c99      	adds	r1, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	1d1a      	adds	r2, r3, #4
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f000 f8a2 	bl	8001b08 <validate_bw_avg_acc_mode>
 80019c4:	4603      	mov	r3, r0
 80019c6:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 80019c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d108      	bne.n	80019e2 <set_accel_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_acc_odr_range(&config->odr, &config->range, dev);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3303      	adds	r3, #3
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f000 f8d0 	bl	8001b7e <validate_acc_odr_range>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 80019e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d11f      	bne.n	8001a2a <set_accel_config+0x8e>
        {
            if (config->acc_mode == BMI3_ACC_MODE_LOW_PWR)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	789b      	ldrb	r3, [r3, #2]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d109      	bne.n	8001a06 <set_accel_config+0x6a>
            {
                rslt = validate_acc_odr_avg(config->odr, config->avg_num);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	791b      	ldrb	r3, [r3, #4]
 80019fa:	4619      	mov	r1, r3
 80019fc:	4610      	mov	r0, r2
 80019fe:	f001 fabb 	bl	8002f78 <validate_acc_odr_avg>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75fb      	strb	r3, [r7, #23]
            }

            if ((config->acc_mode == BMI3_ACC_MODE_NORMAL) || (config->acc_mode == BMI3_ACC_MODE_HIGH_PERF))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	789b      	ldrb	r3, [r3, #2]
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d003      	beq.n	8001a16 <set_accel_config+0x7a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	789b      	ldrb	r3, [r3, #2]
 8001a12:	2b07      	cmp	r3, #7
 8001a14:	d109      	bne.n	8001a2a <set_accel_config+0x8e>
            {
                if ((config->odr >= BMI3_ACC_ODR_0_78HZ) && (config->odr <= BMI3_ACC_ODR_6_25HZ))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <set_accel_config+0x8e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d801      	bhi.n	8001a2a <set_accel_config+0x8e>
                {
                    rslt = BMI3_E_ACC_INVALID_CFG;
 8001a26:	23fc      	movs	r3, #252	@ 0xfc
 8001a28:	75fb      	strb	r3, [r7, #23]
                }
            }
        }

        if (rslt == BMI3_OK)
 8001a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d15f      	bne.n	8001af2 <set_accel_config+0x156>
        {
            /* Set accelerometer ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ACC_ODR, config->odr);
 8001a32:	7a3b      	ldrb	r3, [r7, #8]
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	f023 030f 	bic.w	r3, r3, #15
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	82bb      	strh	r3, [r7, #20]

            /* Set accelerometer range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_ACC_RANGE, config->range);
 8001a4e:	7a3b      	ldrb	r3, [r7, #8]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	78db      	ldrb	r3, [r3, #3]
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	827b      	strh	r3, [r7, #18]

            /* Set accelerometer bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_ACC_BW, config->bwp);
 8001a6c:	7a3b      	ldrb	r3, [r7, #8]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	785b      	ldrb	r3, [r3, #1]
 8001a7a:	01db      	lsls	r3, r3, #7
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	823b      	strh	r3, [r7, #16]

            /* Set accelerometer average number of samples */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ACC_AVG_NUM, config->avg_num);
 8001a88:	7a7b      	ldrb	r3, [r7, #9]
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	81fb      	strh	r3, [r7, #14]

            /* Set accelerometer accel mode */
            acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ACC_MODE, config->acc_mode);
 8001aa0:	7a7b      	ldrb	r3, [r7, #9]
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	789b      	ldrb	r3, [r3, #2]
 8001aa8:	031b      	lsls	r3, r3, #12
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001ab8:	8abb      	ldrh	r3, [r7, #20]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	8a7b      	ldrh	r3, [r7, #18]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	8a3b      	ldrh	r3, [r7, #16]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | acc_mode) >> 8);
 8001ace:	89fa      	ldrh	r2, [r7, #14]
 8001ad0:	89bb      	ldrh	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	727b      	strb	r3, [r7, #9]

            /* Set configurations for accel */
            rslt = bmi3_set_regs(BMI3_REG_ACC_CONF, reg_data, 2, dev);
 8001ade:	f107 0108 	add.w	r1, r7, #8
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	2020      	movs	r0, #32
 8001ae8:	f7ff fd5c 	bl	80015a4 <bmi3_set_regs>
 8001aec:	4603      	mov	r3, r0
 8001aee:	75fb      	strb	r3, [r7, #23]
 8001af0:	e004      	b.n	8001afc <set_accel_config+0x160>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 8001af2:	23fc      	movs	r3, #252	@ 0xfc
 8001af4:	75fb      	strb	r3, [r7, #23]
 8001af6:	e001      	b.n	8001afc <set_accel_config+0x160>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001af8:	23ff      	movs	r3, #255	@ 0xff
 8001afa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <validate_bw_avg_acc_mode>:
/*!
 * @brief This internal API validates bandwidth and accel mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_avg_acc_mode(uint8_t *bandwidth, uint8_t *acc_mode, uint8_t *avg_num, struct bmi3_dev *dev)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (acc_mode != NULL) && (avg_num != NULL))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d026      	beq.n	8001b6a <validate_bw_avg_acc_mode+0x62>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d023      	beq.n	8001b6a <validate_bw_avg_acc_mode+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <validate_bw_avg_acc_mode+0x62>
    {
        /* Validate and auto-correct accel mode */
        rslt = check_boundary_val(acc_mode, BMI3_ACC_MODE_DISABLE, BMI3_ACC_MODE_HIGH_PERF, dev);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	68b8      	ldr	r0, [r7, #8]
 8001b30:	f000 f84e 	bl	8001bd0 <check_boundary_val>
 8001b34:	4603      	mov	r3, r0
 8001b36:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d117      	bne.n	8001b70 <validate_bw_avg_acc_mode+0x68>
        {
            /* Validate for averaging number of samples */
            rslt = check_boundary_val(avg_num, BMI3_ACC_AVG1, BMI3_ACC_AVG64, dev);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2206      	movs	r2, #6
 8001b44:	2100      	movs	r1, #0
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f842 	bl	8001bd0 <check_boundary_val>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8001b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10b      	bne.n	8001b70 <validate_bw_avg_acc_mode+0x68>
            {
                /* Validate bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_ACC_BW_ODR_HALF, BMI3_ACC_BW_ODR_QUARTER, dev);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f836 	bl	8001bd0 <check_boundary_val>
 8001b64:	4603      	mov	r3, r0
 8001b66:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001b68:	e002      	b.n	8001b70 <validate_bw_avg_acc_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001b6a:	23ff      	movs	r3, #255	@ 0xff
 8001b6c:	75fb      	strb	r3, [r7, #23]
 8001b6e:	e000      	b.n	8001b72 <validate_bw_avg_acc_mode+0x6a>
        if (rslt == BMI3_OK)
 8001b70:	bf00      	nop
    }

    return rslt;
 8001b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <validate_acc_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_acc_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d017      	beq.n	8001bc0 <validate_acc_odr_range+0x42>
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d014      	beq.n	8001bc0 <validate_acc_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_ACC_ODR_0_78HZ, BMI3_ACC_ODR_6400HZ, dev);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	220e      	movs	r2, #14
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f817 	bl	8001bd0 <check_boundary_val>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <validate_acc_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_ACC_RANGE_2G, BMI3_ACC_RANGE_16G, dev);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	68b8      	ldr	r0, [r7, #8]
 8001bb6:	f000 f80b 	bl	8001bd0 <check_boundary_val>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001bbe:	e001      	b.n	8001bc4 <validate_acc_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001bc0:	23ff      	movs	r3, #255	@ 0xff
 8001bc2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi3_dev *dev)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	72fb      	strb	r3, [r7, #11]
 8001bde:	4613      	mov	r3, r2
 8001be0:	72bb      	strb	r3, [r7, #10]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f938 	bl	8001e58 <null_ptr_check>
 8001be8:	4603      	mov	r3, r0
 8001bea:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (val != NULL))
 8001bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d121      	bne.n	8001c38 <check_boundary_val+0x68>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d01e      	beq.n	8001c38 <check_boundary_val+0x68>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	7afa      	ldrb	r2, [r7, #11]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d909      	bls.n	8001c18 <check_boundary_val+0x48>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	7afa      	ldrb	r2, [r7, #11]
 8001c08:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MIN_VALUE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7a1b      	ldrb	r3, [r3, #8]
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	7aba      	ldrb	r2, [r7, #10]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d20c      	bcs.n	8001c3c <check_boundary_val+0x6c>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	7aba      	ldrb	r2, [r7, #10]
 8001c26:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MAX_VALUE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7a1b      	ldrb	r3, [r3, #8]
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	721a      	strb	r2, [r3, #8]
        if (*val > max)
 8001c36:	e001      	b.n	8001c3c <check_boundary_val+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001c38:	23ff      	movs	r3, #255	@ 0xff
 8001c3a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <set_gyro_config>:
/*!
 * @brief This internal API sets gyroscope configurations like ODR,
 * bandwidth, gyro mode, average samples and dps range.
 */
static int8_t set_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001c52:	2300      	movs	r3, #0
 8001c54:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, gyr_mode;

    if (config != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8091 	beq.w	8001d80 <set_gyro_config+0x138>
    {
        /* Validate bandwidth, average samples and mode */
        rslt = validate_bw_avg_gyr_mode(&config->bwp, &config->gyr_mode, &config->avg_num, dev);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	1c58      	adds	r0, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	1c99      	adds	r1, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	1d1a      	adds	r2, r3, #4
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f000 f890 	bl	8001d90 <validate_bw_avg_gyr_mode>
 8001c70:	4603      	mov	r3, r0
 8001c72:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d108      	bne.n	8001c8e <set_gyro_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_gyr_odr_range(&config->odr, &config->range, dev);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3303      	adds	r3, #3
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f000 f8be 	bl	8001e06 <validate_gyr_odr_range>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8001c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10d      	bne.n	8001cb2 <set_gyro_config+0x6a>
        {
            if (config->gyr_mode == BMI3_GYR_MODE_LOW_PWR)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	789b      	ldrb	r3, [r3, #2]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d109      	bne.n	8001cb2 <set_gyro_config+0x6a>
            {
                rslt = validate_gyr_odr_avg(config->odr, config->avg_num);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	791b      	ldrb	r3, [r3, #4]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4610      	mov	r0, r2
 8001caa:	f001 fa43 	bl	8003134 <validate_gyr_odr_avg>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	75fb      	strb	r3, [r7, #23]
            }
        }

        if (rslt == BMI3_OK)
 8001cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d15f      	bne.n	8001d7a <set_gyro_config+0x132>
        {
            /* Set gyroscope ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_GYR_ODR, config->odr);
 8001cba:	7a3b      	ldrb	r3, [r7, #8]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	f023 030f 	bic.w	r3, r3, #15
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	82bb      	strh	r3, [r7, #20]

            /* Set gyroscope range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_GYR_RANGE, config->range);
 8001cd6:	7a3b      	ldrb	r3, [r7, #8]
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	78db      	ldrb	r3, [r3, #3]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	827b      	strh	r3, [r7, #18]

            /* Set gyroscope bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_GYR_BW, config->bwp);
 8001cf4:	7a3b      	ldrb	r3, [r7, #8]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	785b      	ldrb	r3, [r3, #1]
 8001d02:	01db      	lsls	r3, r3, #7
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	823b      	strh	r3, [r7, #16]

            /* Set gyroscope average sample */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_GYR_AVG_NUM, config->avg_num);
 8001d10:	7a7b      	ldrb	r3, [r7, #9]
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	791b      	ldrb	r3, [r3, #4]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	4313      	orrs	r3, r2
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	81fb      	strh	r3, [r7, #14]

            /* Set gyroscope mode */
            gyr_mode = BMI3_SET_BITS(reg_data[1], BMI3_GYR_MODE, config->gyr_mode);
 8001d28:	7a7b      	ldrb	r3, [r7, #9]
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	789b      	ldrb	r3, [r3, #2]
 8001d30:	031b      	lsls	r3, r3, #12
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001d40:	8abb      	ldrh	r3, [r7, #20]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	8a7b      	ldrh	r3, [r7, #18]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	8a3b      	ldrh	r3, [r7, #16]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4313      	orrs	r3, r2
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | gyr_mode) >> 8);
 8001d56:	89fa      	ldrh	r2, [r7, #14]
 8001d58:	89bb      	ldrh	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	727b      	strb	r3, [r7, #9]

            /* Set gyro configurations */
            rslt = bmi3_set_regs(BMI3_REG_GYR_CONF, reg_data, 2, dev);
 8001d66:	f107 0108 	add.w	r1, r7, #8
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	2021      	movs	r0, #33	@ 0x21
 8001d70:	f7ff fc18 	bl	80015a4 <bmi3_set_regs>
 8001d74:	4603      	mov	r3, r0
 8001d76:	75fb      	strb	r3, [r7, #23]
 8001d78:	e004      	b.n	8001d84 <set_gyro_config+0x13c>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8001d7a:	23fb      	movs	r3, #251	@ 0xfb
 8001d7c:	75fb      	strb	r3, [r7, #23]
 8001d7e:	e001      	b.n	8001d84 <set_gyro_config+0x13c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001d80:	23ff      	movs	r3, #255	@ 0xff
 8001d82:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <validate_bw_avg_gyr_mode>:
 */
static int8_t validate_bw_avg_gyr_mode(uint8_t *bandwidth,
                                       uint8_t *gyr_mode,
                                       const uint8_t *avg_num,
                                       struct bmi3_dev *dev)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (gyr_mode != NULL) && (avg_num != NULL))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d026      	beq.n	8001df2 <validate_bw_avg_gyr_mode+0x62>
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d023      	beq.n	8001df2 <validate_bw_avg_gyr_mode+0x62>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <validate_bw_avg_gyr_mode+0x62>
    {
        /* Validate and auto-correct gyro mode */
        rslt = check_boundary_val(gyr_mode, BMI3_GYR_MODE_DISABLE, BMI3_GYR_MODE_HIGH_PERF, dev);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2207      	movs	r2, #7
 8001db4:	2100      	movs	r1, #0
 8001db6:	68b8      	ldr	r0, [r7, #8]
 8001db8:	f7ff ff0a 	bl	8001bd0 <check_boundary_val>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d117      	bne.n	8001df8 <validate_bw_avg_gyr_mode+0x68>
        {
            /* Validate for averaging mode */
            rslt = check_boundary_val(bandwidth, BMI3_GYR_AVG1, BMI3_GYR_AVG64, dev);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2206      	movs	r2, #6
 8001dcc:	2100      	movs	r1, #0
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff fefe 	bl	8001bd0 <check_boundary_val>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8001dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <validate_bw_avg_gyr_mode+0x68>
            {
                /* Validate for bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_GYR_BW_ODR_HALF, BMI3_GYR_BW_ODR_QUARTER, dev);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	2100      	movs	r1, #0
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f7ff fef2 	bl	8001bd0 <check_boundary_val>
 8001dec:	4603      	mov	r3, r0
 8001dee:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001df0:	e002      	b.n	8001df8 <validate_bw_avg_gyr_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001df2:	23ff      	movs	r3, #255	@ 0xff
 8001df4:	75fb      	strb	r3, [r7, #23]
 8001df6:	e000      	b.n	8001dfa <validate_bw_avg_gyr_mode+0x6a>
        if (rslt == BMI3_OK)
 8001df8:	bf00      	nop
    }

    return rslt;
 8001dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <validate_gyr_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the gyroscope set by
 * the user.
 */
static int8_t validate_gyr_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d017      	beq.n	8001e48 <validate_gyr_odr_range+0x42>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d014      	beq.n	8001e48 <validate_gyr_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_GYR_ODR_0_78HZ, BMI3_GYR_ODR_6400HZ, dev);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	220e      	movs	r2, #14
 8001e22:	2101      	movs	r1, #1
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fed3 	bl	8001bd0 <check_boundary_val>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <validate_gyr_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_GYR_RANGE_125DPS, BMI3_GYR_RANGE_2000DPS, dev);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	68b8      	ldr	r0, [r7, #8]
 8001e3e:	f7ff fec7 	bl	8001bd0 <check_boundary_val>
 8001e42:	4603      	mov	r3, r0
 8001e44:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001e46:	e001      	b.n	8001e4c <validate_gyr_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e48:	23ff      	movs	r3, #255	@ 0xff
 8001e4a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <null_ptr_check+0x26>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <null_ptr_check+0x26>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <null_ptr_check+0x26>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <null_ptr_check+0x2c>
    {
        rslt = BMI3_E_NULL_PTR;
 8001e7e:	23ff      	movs	r3, #255	@ 0xff
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	e001      	b.n	8001e88 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI3_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_any_motion_config(const struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08e      	sub	sp, #56	@ 0x38
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	823b      	strh	r3, [r7, #16]
    uint16_t acc_ref_up;

    /* Wait time for clearing the event after slope is below threshold */
    uint16_t wait_time;

    if (config != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80b6 	beq.w	800202a <set_any_motion_config+0x192>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8001ebe:	f107 011c 	add.w	r1, r7, #28
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	2041      	movs	r0, #65	@ 0x41
 8001ec8:	f7ff fb6c 	bl	80015a4 <bmi3_set_regs>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8001ed2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 80aa 	bne.w	8002030 <set_any_motion_config+0x198>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8001edc:	7b3b      	ldrb	r3, [r7, #12]
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	4b56      	ldr	r3, [pc, #344]	@ (800203c <set_any_motion_config+0x1a4>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	b21a      	sxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	885b      	ldrh	r3, [r3, #2]
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 8001ef8:	7b7b      	ldrb	r3, [r7, #13]
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8001efe:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8001f02:	4b4e      	ldr	r3, [pc, #312]	@ (800203c <set_any_motion_config+0x1a4>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	885b      	ldrh	r3, [r3, #2]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	4313      	orrs	r3, r2
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = ((uint16_t)data_array[1] << 8);
 8001f1a:	7b7b      	ldrb	r3, [r7, #13]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            acc_ref_up = BMI3_SET_BITS(acc_ref_up, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 8001f20:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001f24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f28:	b21a      	sxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	791b      	ldrb	r3, [r3, #4]
 8001f2e:	031b      	lsls	r3, r3, #12
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8001f3e:	7bbb      	ldrb	r3, [r7, #14]
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	4b3f      	ldr	r3, [pc, #252]	@ (8002040 <set_any_motion_config+0x1a8>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	88db      	ldrh	r3, [r3, #6]
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8001f5a:	7bbb      	ldrb	r3, [r7, #14]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8001f60:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001f64:	4b36      	ldr	r3, [pc, #216]	@ (8002040 <set_any_motion_config+0x1a8>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	88db      	ldrh	r3, [r3, #6]
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	4b30      	ldr	r3, [pc, #192]	@ (8002044 <set_any_motion_config+0x1ac>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	b21a      	sxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	4313      	orrs	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 8001f98:	7c3b      	ldrb	r3, [r7, #16]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 8001f9e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001fa2:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <set_any_motion_config+0x1ac>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 8001fba:	7c7b      	ldrb	r3, [r7, #17]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 8001fc0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	891b      	ldrh	r3, [r3, #8]
 8001fce:	035b      	lsls	r3, r3, #13
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	83fb      	strh	r3, [r7, #30]

            any_mot_config[0] = (uint8_t)threshold1;
 8001fd8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	753b      	strb	r3, [r7, #20]
            any_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 8001fde:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001fe0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	757b      	strb	r3, [r7, #21]
            any_mot_config[2] = (uint8_t)(hysteresis1);
 8001fee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	75bb      	strb	r3, [r7, #22]
            any_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 8001ff4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	75fb      	strb	r3, [r7, #23]
            any_mot_config[4] = (uint8_t)(duration1);
 8001ffe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002000:	b2db      	uxtb	r3, r3
 8002002:	763b      	strb	r3, [r7, #24]
            any_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 8002004:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002006:	8bfb      	ldrh	r3, [r7, #30]
 8002008:	4313      	orrs	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	b29b      	uxth	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	767b      	strb	r3, [r7, #25]

            /* Set the configurations back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 8002014:	f107 0114 	add.w	r1, r7, #20
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2206      	movs	r2, #6
 800201c:	2042      	movs	r0, #66	@ 0x42
 800201e:	f7ff fac1 	bl	80015a4 <bmi3_set_regs>
 8002022:	4603      	mov	r3, r0
 8002024:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002028:	e002      	b.n	8002030 <set_any_motion_config+0x198>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800202a:	23ff      	movs	r3, #255	@ 0xff
 800202c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8002030:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002034:	4618      	mov	r0, r3
 8002036:	3738      	adds	r7, #56	@ 0x38
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	fffff000 	.word	0xfffff000
 8002040:	fffffc00 	.word	0xfffffc00
 8002044:	ffffe000 	.word	0xffffe000

08002048 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_no_motion_config(const struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08e      	sub	sp, #56	@ 0x38
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8002052:	2308      	movs	r3, #8
 8002054:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	2300      	movs	r3, #0
 800205c:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	2300      	movs	r3, #0
 8002064:	823b      	strh	r3, [r7, #16]

    uint16_t acc_ref_up;

    uint16_t wait_time;

    if (config != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80b3 	beq.w	80021d4 <set_no_motion_config+0x18c>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800206e:	f107 011c 	add.w	r1, r7, #28
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2202      	movs	r2, #2
 8002076:	2041      	movs	r0, #65	@ 0x41
 8002078:	f7ff fa94 	bl	80015a4 <bmi3_set_regs>
 800207c:	4603      	mov	r3, r0
 800207e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8002082:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 80a7 	bne.w	80021da <set_no_motion_config+0x192>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 800208c:	7b3b      	ldrb	r3, [r7, #12]
 800208e:	b21a      	sxth	r2, r3
 8002090:	4b55      	ldr	r3, [pc, #340]	@ (80021e8 <set_no_motion_config+0x1a0>)
 8002092:	4013      	ands	r3, r2
 8002094:	b21a      	sxth	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	885b      	ldrh	r3, [r3, #2]
 800209a:	b21b      	sxth	r3, r3
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 80020a8:	7b7b      	ldrb	r3, [r7, #13]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80020ae:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80020b2:	4b4d      	ldr	r3, [pc, #308]	@ (80021e8 <set_no_motion_config+0x1a0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	885b      	ldrh	r3, [r3, #2]
 80020bc:	b21b      	sxth	r3, r3
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = BMI3_SET_BITS(threshold, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 80020ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80020ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	031b      	lsls	r3, r3, #12
 80020da:	b21b      	sxth	r3, r3
 80020dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 80020e8:	7bbb      	ldrb	r3, [r7, #14]
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	4b3f      	ldr	r3, [pc, #252]	@ (80021ec <set_no_motion_config+0x1a4>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	88db      	ldrh	r3, [r3, #6]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21b      	sxth	r3, r3
 8002102:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002104:	7bbb      	ldrb	r3, [r7, #14]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 800210a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800210e:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <set_no_motion_config+0x1a4>)
 8002110:	4013      	ands	r3, r2
 8002112:	b21a      	sxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	88db      	ldrh	r3, [r3, #6]
 8002118:	b21b      	sxth	r3, r3
 800211a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211e:	b21b      	sxth	r3, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	b21a      	sxth	r2, r3
 800212a:	4b31      	ldr	r3, [pc, #196]	@ (80021f0 <set_no_motion_config+0x1a8>)
 800212c:	4013      	ands	r3, r2
 800212e:	b21a      	sxth	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b21b      	sxth	r3, r3
 8002136:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800213a:	b21b      	sxth	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b21b      	sxth	r3, r3
 8002140:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 8002142:	7c3b      	ldrb	r3, [r7, #16]
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 8002148:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800214c:	4b28      	ldr	r3, [pc, #160]	@ (80021f0 <set_no_motion_config+0x1a8>)
 800214e:	4013      	ands	r3, r2
 8002150:	b21a      	sxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800215c:	b21b      	sxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b21b      	sxth	r3, r3
 8002162:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 8002164:	7c7b      	ldrb	r3, [r7, #17]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 800216a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800216e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002172:	b21a      	sxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	891b      	ldrh	r3, [r3, #8]
 8002178:	035b      	lsls	r3, r3, #13
 800217a:	b21b      	sxth	r3, r3
 800217c:	4313      	orrs	r3, r2
 800217e:	b21b      	sxth	r3, r3
 8002180:	83fb      	strh	r3, [r7, #30]

            no_mot_config[0] = (uint8_t)threshold1;
 8002182:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002184:	b2db      	uxtb	r3, r3
 8002186:	753b      	strb	r3, [r7, #20]
            no_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 8002188:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800218a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800218c:	4313      	orrs	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	757b      	strb	r3, [r7, #21]
            no_mot_config[2] = (uint8_t)(hysteresis1);
 8002198:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800219a:	b2db      	uxtb	r3, r3
 800219c:	75bb      	strb	r3, [r7, #22]
            no_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 800219e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	75fb      	strb	r3, [r7, #23]
            no_mot_config[4] = (uint8_t)(duration1);
 80021a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	763b      	strb	r3, [r7, #24]
            no_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 80021ae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80021b0:	8bfb      	ldrh	r3, [r7, #30]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 80021be:	f107 0114 	add.w	r1, r7, #20
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2206      	movs	r2, #6
 80021c6:	2042      	movs	r0, #66	@ 0x42
 80021c8:	f7ff f9ec 	bl	80015a4 <bmi3_set_regs>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80021d2:	e002      	b.n	80021da <set_no_motion_config+0x192>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80021d4:	23ff      	movs	r3, #255	@ 0xff
 80021d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 80021da:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3738      	adds	r7, #56	@ 0x38
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	fffff000 	.word	0xfffff000
 80021ec:	fffffc00 	.word	0xfffffc00
 80021f0:	ffffe000 	.word	0xffffe000

080021f4 <set_flat_config>:
/*!
 * @brief This internal API sets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t set_flat_config(const struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 8002202:	230b      	movs	r3, #11
 8002204:	81bb      	strh	r3, [r7, #12]

    uint16_t theta, blocking, holdtime, slope_thres, hyst;

    if (config != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d06f      	beq.n	80022ec <set_flat_config+0xf8>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800220c:	f107 010c 	add.w	r1, r7, #12
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2202      	movs	r2, #2
 8002214:	2041      	movs	r0, #65	@ 0x41
 8002216:	f7ff f9c5 	bl	80015a4 <bmi3_set_regs>
 800221a:	4603      	mov	r3, r0
 800221c:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 800221e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d164      	bne.n	80022f0 <set_flat_config+0xfc>
        {
            /* Set theta */
            theta = BMI3_SET_BIT_POS0(flat_config[0], BMI3_FLAT_THETA, config->theta);
 8002226:	7c3b      	ldrb	r3, [r7, #16]
 8002228:	b21b      	sxth	r3, r3
 800222a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800222e:	b21a      	sxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800223a:	b21b      	sxth	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b21b      	sxth	r3, r3
 8002240:	83bb      	strh	r3, [r7, #28]

            /* Set blocking */
            blocking = BMI3_SET_BITS(flat_config[0], BMI3_FLAT_BLOCKING, config->blocking);
 8002242:	7c3b      	ldrb	r3, [r7, #16]
 8002244:	b21b      	sxth	r3, r3
 8002246:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800224a:	b21a      	sxth	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	885b      	ldrh	r3, [r3, #2]
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	b21b      	sxth	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21b      	sxth	r3, r3
 800225c:	837b      	strh	r3, [r7, #26]

            /* Set hold time */
            holdtime = ((uint16_t)flat_config[1] << 8);
 800225e:	7c7b      	ldrb	r3, [r7, #17]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	833b      	strh	r3, [r7, #24]
            holdtime = BMI3_SET_BITS(holdtime, BMI3_FLAT_HOLD_TIME, config->hold_time);
 8002264:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	b21a      	sxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	88db      	ldrh	r3, [r3, #6]
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	b21b      	sxth	r3, r3
 8002274:	4313      	orrs	r3, r2
 8002276:	b21b      	sxth	r3, r3
 8002278:	833b      	strh	r3, [r7, #24]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(flat_config[2], BMI3_FLAT_SLOPE_THRES, config->slope_thres);
 800227a:	7cbb      	ldrb	r3, [r7, #18]
 800227c:	b21b      	sxth	r3, r3
 800227e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002282:	b21a      	sxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	891b      	ldrh	r3, [r3, #8]
 8002288:	b21b      	sxth	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	b21b      	sxth	r3, r3
 800228e:	4313      	orrs	r3, r2
 8002290:	b21b      	sxth	r3, r3
 8002292:	82fb      	strh	r3, [r7, #22]

            /* Set hysteresis */
            hyst = ((uint16_t)flat_config[3] << 8);
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	82bb      	strh	r3, [r7, #20]
            hyst = BMI3_SET_BITS(hyst, BMI3_FLAT_HYST, config->hysteresis);
 800229a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	889b      	ldrh	r3, [r3, #4]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	82bb      	strh	r3, [r7, #20]

            flat_config[0] = (uint8_t)(theta | blocking);
 80022b0:	8bbb      	ldrh	r3, [r7, #28]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	8b7b      	ldrh	r3, [r7, #26]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	743b      	strb	r3, [r7, #16]
            flat_config[1] = (uint8_t)(holdtime >> 8);
 80022be:	8b3b      	ldrh	r3, [r7, #24]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	747b      	strb	r3, [r7, #17]
            flat_config[2] = (uint8_t)(slope_thres);
 80022c8:	8afb      	ldrh	r3, [r7, #22]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	74bb      	strb	r3, [r7, #18]
            flat_config[3] = (uint8_t)(hyst >> 8);
 80022ce:	8abb      	ldrh	r3, [r7, #20]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 80022d8:	f107 0110 	add.w	r1, r7, #16
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2204      	movs	r2, #4
 80022e0:	2042      	movs	r0, #66	@ 0x42
 80022e2:	f7ff f95f 	bl	80015a4 <bmi3_set_regs>
 80022e6:	4603      	mov	r3, r0
 80022e8:	77fb      	strb	r3, [r7, #31]
 80022ea:	e001      	b.n	80022f0 <set_flat_config+0xfc>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80022ec:	23ff      	movs	r3, #255	@ 0xff
 80022ee:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80022f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t set_sig_motion_config(const struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08e      	sub	sp, #56	@ 0x38
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8002306:	230d      	movs	r3, #13
 8002308:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t sig_mot_config[6] = { 0 };
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	2300      	movs	r3, #0
 8002310:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	2300      	movs	r3, #0
 8002318:	823b      	strh	r3, [r7, #16]

    uint16_t mcr_min;

    uint16_t mcr_max;

    if (config != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 809d 	beq.w	800245c <set_sig_motion_config+0x160>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002322:	f107 011c 	add.w	r1, r7, #28
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2202      	movs	r2, #2
 800232a:	2041      	movs	r0, #65	@ 0x41
 800232c:	f7ff f93a 	bl	80015a4 <bmi3_set_regs>
 8002330:	4603      	mov	r3, r0
 8002332:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8002336:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 8091 	bne.w	8002462 <set_sig_motion_config+0x166>
        {
            /* Set block size for lsb 8 bits */
            block_size1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	86bb      	strh	r3, [r7, #52]	@ 0x34

            block_size = ((uint16_t)data_array[1] << 8);
 8002346:	7b7b      	ldrb	r3, [r7, #13]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set block size for msb 8 bits */
            block_size2 = BMI3_SET_BIT_POS0(block_size, BMI3_SIG_BLOCK_SIZE, config->block_size);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set peak to peak minimum for lsb 8 bits */
            p2p_min1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002352:	7bbb      	ldrb	r3, [r7, #14]
 8002354:	b21a      	sxth	r2, r3
 8002356:	4b46      	ldr	r3, [pc, #280]	@ (8002470 <set_sig_motion_config+0x174>)
 8002358:	4013      	ands	r3, r2
 800235a:	b21a      	sxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	885b      	ldrh	r3, [r3, #2]
 8002360:	b21b      	sxth	r3, r3
 8002362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002366:	b21b      	sxth	r3, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	b21b      	sxth	r3, r3
 800236c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            p2p_min = ((uint16_t)data_array[3] << 8);
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set peak to peak minimum for msb 8 bits */
            p2p_min2 = BMI3_SET_BIT_POS0(p2p_min, BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002374:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8002378:	4b3d      	ldr	r3, [pc, #244]	@ (8002470 <set_sig_motion_config+0x174>)
 800237a:	4013      	ands	r3, r2
 800237c:	b21a      	sxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	885b      	ldrh	r3, [r3, #2]
 8002382:	b21b      	sxth	r3, r3
 8002384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21b      	sxth	r3, r3
 800238e:	857b      	strh	r3, [r7, #42]	@ 0x2a

            mcr_min = ((uint16_t)data_array[3] << 8);
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mcr minimum */
            mcr_min = BMI3_SET_BITS(mcr_min, BMI3_SIG_MCR_MIN, config->mcr_min);
 8002396:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800239a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239e:	b21a      	sxth	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	791b      	ldrb	r3, [r3, #4]
 80023a4:	029b      	lsls	r3, r3, #10
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set peak to peak maximum for lsb 8 bits */
            p2p_max1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 80023ae:	7c3b      	ldrb	r3, [r7, #16]
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <set_sig_motion_config+0x174>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	88db      	ldrh	r3, [r3, #6]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

            p2p_max = ((uint16_t)data_array[5] << 8);
 80023ca:	7c7b      	ldrb	r3, [r7, #17]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set peak to peak maximum for msb 8 bits */
            p2p_max2 = BMI3_SET_BIT_POS0(p2p_max, BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 80023d0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80023d4:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <set_sig_motion_config+0x174>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	b21a      	sxth	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	88db      	ldrh	r3, [r3, #6]
 80023de:	b21b      	sxth	r3, r3
 80023e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	847b      	strh	r3, [r7, #34]	@ 0x22

            mcr_max = ((uint16_t)data_array[5] << 8);
 80023ec:	7c7b      	ldrb	r3, [r7, #17]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	843b      	strh	r3, [r7, #32]

            /* Set mcr maximum */
            mcr_max = BMI3_SET_BITS(mcr_max, BMI3_MCR_MAX, config->mcr_max);
 80023f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80023f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fa:	b21a      	sxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7a1b      	ldrb	r3, [r3, #8]
 8002400:	029b      	lsls	r3, r3, #10
 8002402:	b21b      	sxth	r3, r3
 8002404:	4313      	orrs	r3, r2
 8002406:	b21b      	sxth	r3, r3
 8002408:	843b      	strh	r3, [r7, #32]

            sig_mot_config[0] = (uint8_t)(block_size1);
 800240a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800240c:	b2db      	uxtb	r3, r3
 800240e:	753b      	strb	r3, [r7, #20]
            sig_mot_config[1] = (uint8_t)(block_size2 >> 8);
 8002410:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	b29b      	uxth	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	757b      	strb	r3, [r7, #21]
            sig_mot_config[2] = (uint8_t)(p2p_min1);
 800241a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800241c:	b2db      	uxtb	r3, r3
 800241e:	75bb      	strb	r3, [r7, #22]
            sig_mot_config[3] = (uint8_t)((p2p_min2 | mcr_min) >> 8);
 8002420:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002422:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002424:	4313      	orrs	r3, r2
 8002426:	b29b      	uxth	r3, r3
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	b29b      	uxth	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	75fb      	strb	r3, [r7, #23]
            sig_mot_config[4] = (uint8_t)(p2p_max1);
 8002430:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002432:	b2db      	uxtb	r3, r3
 8002434:	763b      	strb	r3, [r7, #24]
            sig_mot_config[5] = (uint8_t)((p2p_max2 | mcr_max) >> 8);
 8002436:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002438:	8c3b      	ldrh	r3, [r7, #32]
 800243a:	4313      	orrs	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	b29b      	uxth	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8002446:	f107 0114 	add.w	r1, r7, #20
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2206      	movs	r2, #6
 800244e:	2042      	movs	r0, #66	@ 0x42
 8002450:	f7ff f8a8 	bl	80015a4 <bmi3_set_regs>
 8002454:	4603      	mov	r3, r0
 8002456:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800245a:	e002      	b.n	8002462 <set_sig_motion_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800245c:	23ff      	movs	r3, #255	@ 0xff
 800245e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8002462:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002466:	4618      	mov	r0, r3
 8002468:	3738      	adds	r7, #56	@ 0x38
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	fffffc00 	.word	0xfffffc00

08002474 <set_tilt_config>:
/*!
 * @brief This internal API sets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t set_tilt_config(const struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 800247e:	2321      	movs	r3, #33	@ 0x21
 8002480:	823b      	strh	r3, [r7, #16]

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]

    uint8_t data_array[4] = { 0 };
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]

    uint16_t min_tilt_angle, beta_acc_mean;

    uint16_t segment_size;

    if (config != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d04a      	beq.n	8002526 <set_tilt_config+0xb2>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002490:	f107 0110 	add.w	r1, r7, #16
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2202      	movs	r2, #2
 8002498:	2041      	movs	r0, #65	@ 0x41
 800249a:	f7ff f883 	bl	80015a4 <bmi3_set_regs>
 800249e:	4603      	mov	r3, r0
 80024a0:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80024a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d13f      	bne.n	800252a <set_tilt_config+0xb6>
        {
            /* Set segment size */
            segment_size = BMI3_SET_BIT_POS0(data_array[0], BMI3_TILT_SEGMENT_SIZE, config->segment_size);
 80024aa:	7a3b      	ldrb	r3, [r7, #8]
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	b21b      	sxth	r3, r3
 80024be:	4313      	orrs	r3, r2
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	83bb      	strh	r3, [r7, #28]

            min_tilt_angle1 = ((uint16_t)data_array[1] << 8);
 80024c4:	7a7b      	ldrb	r3, [r7, #9]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	837b      	strh	r3, [r7, #26]

            /* Set minimum tilt angle */
            min_tilt_angle = BMI3_SET_BITS(min_tilt_angle1, BMI3_TILT_MIN_TILT_ANGLE, config->min_tilt_angle);
 80024ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	885b      	ldrh	r3, [r3, #2]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	b21b      	sxth	r3, r3
 80024da:	4313      	orrs	r3, r2
 80024dc:	b21b      	sxth	r3, r3
 80024de:	833b      	strh	r3, [r7, #24]

            /* Set beta accel mean for lsb 8 bits */
            beta_acc_mean1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	889b      	ldrh	r3, [r3, #4]
 80024e4:	82fb      	strh	r3, [r7, #22]

            beta_acc_mean = ((uint16_t)data_array[3] << 8);
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	82bb      	strh	r3, [r7, #20]

            /* Set beta accel mean for msb 8 bits */
            beta_acc_mean2 = BMI3_SET_BIT_POS0(beta_acc_mean, BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	889b      	ldrh	r3, [r3, #4]
 80024f0:	827b      	strh	r3, [r7, #18]

            tilt_config[0] = (uint8_t)segment_size;
 80024f2:	8bbb      	ldrh	r3, [r7, #28]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	733b      	strb	r3, [r7, #12]
            tilt_config[1] = (uint8_t)(min_tilt_angle >> 8);
 80024f8:	8b3b      	ldrh	r3, [r7, #24]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	737b      	strb	r3, [r7, #13]
            tilt_config[2] = (uint8_t)(beta_acc_mean1);
 8002502:	8afb      	ldrh	r3, [r7, #22]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	73bb      	strb	r3, [r7, #14]
            tilt_config[3] = (uint8_t)(beta_acc_mean2 >> 8);
 8002508:	8a7b      	ldrh	r3, [r7, #18]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	b29b      	uxth	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	73fb      	strb	r3, [r7, #15]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8002512:	f107 010c 	add.w	r1, r7, #12
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2204      	movs	r2, #4
 800251a:	2042      	movs	r0, #66	@ 0x42
 800251c:	f7ff f842 	bl	80015a4 <bmi3_set_regs>
 8002520:	4603      	mov	r3, r0
 8002522:	77fb      	strb	r3, [r7, #31]
 8002524:	e001      	b.n	800252a <set_tilt_config+0xb6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002526:	23ff      	movs	r3, #255	@ 0xff
 8002528:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800252a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <set_orientation_config>:
/*!
 * @brief This internal API sets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t set_orientation_config(const struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b08a      	sub	sp, #40	@ 0x28
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of orient feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8002544:	231c      	movs	r3, #28
 8002546:	81bb      	strh	r3, [r7, #12]

    uint16_t ud_en, mode, blocking, theta, theta1, holdtime, slope_thres, hyst;

    if (config != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80a3 	beq.w	8002696 <set_orientation_config+0x160>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8002550:	f107 010c 	add.w	r1, r7, #12
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2202      	movs	r2, #2
 8002558:	2041      	movs	r0, #65	@ 0x41
 800255a:	f7ff f823 	bl	80015a4 <bmi3_set_regs>
 800255e:	4603      	mov	r3, r0
 8002560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI3_OK)
 8002564:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002568:	2b00      	cmp	r3, #0
 800256a:	f040 8097 	bne.w	800269c <set_orientation_config+0x166>
        {
            /* Set upside down bit */
            ud_en = BMI3_SET_BIT_POS0(orient_config[0], BMI3_ORIENT_UD_EN, config->ud_en);
 800256e:	7c3b      	ldrb	r3, [r7, #16]
 8002570:	b21b      	sxth	r3, r3
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	b21a      	sxth	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b21b      	sxth	r3, r3
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	b21b      	sxth	r3, r3
 8002584:	4313      	orrs	r3, r2
 8002586:	b21b      	sxth	r3, r3
 8002588:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set mode */
            mode = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_MODE, config->mode);
 800258a:	7c3b      	ldrb	r3, [r7, #16]
 800258c:	b21b      	sxth	r3, r3
 800258e:	f023 0306 	bic.w	r3, r3, #6
 8002592:	b21a      	sxth	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	b21b      	sxth	r3, r3
 800259c:	f003 0306 	and.w	r3, r3, #6
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set blocking */
            blocking = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_BLOCKING, config->blocking);
 80025a8:	7c3b      	ldrb	r3, [r7, #16]
 80025aa:	b21b      	sxth	r3, r3
 80025ac:	f023 0318 	bic.w	r3, r3, #24
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	789b      	ldrb	r3, [r3, #2]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	f003 0318 	and.w	r3, r3, #24
 80025be:	b21b      	sxth	r3, r3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	843b      	strh	r3, [r7, #32]

            /* Set theta for lsb 8 bits */
            theta1 = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_THETA, config->theta);
 80025c6:	7c3b      	ldrb	r3, [r7, #16]
 80025c8:	b21b      	sxth	r3, r3
 80025ca:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80025ce:	b21a      	sxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	78db      	ldrb	r3, [r3, #3]
 80025d4:	015b      	lsls	r3, r3, #5
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80025dc:	b21b      	sxth	r3, r3
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	83fb      	strh	r3, [r7, #30]

            theta = ((uint16_t)orient_config[1] << 8);
 80025e4:	7c7b      	ldrb	r3, [r7, #17]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	83bb      	strh	r3, [r7, #28]

            /* Set theta for msb 8 bits */
            theta = BMI3_SET_BITS(theta, BMI3_ORIENT_THETA, config->theta);
 80025ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025ee:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	78db      	ldrb	r3, [r3, #3]
 80025f8:	015b      	lsls	r3, r3, #5
 80025fa:	b21b      	sxth	r3, r3
 80025fc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8002600:	b21b      	sxth	r3, r3
 8002602:	4313      	orrs	r3, r2
 8002604:	b21b      	sxth	r3, r3
 8002606:	83bb      	strh	r3, [r7, #28]

            /* Set hold time */
            holdtime = BMI3_SET_BITS(orient_config[1], BMI3_ORIENT_HOLD_TIME, config->hold_time);
 8002608:	7c7b      	ldrb	r3, [r7, #17]
 800260a:	b21a      	sxth	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	02db      	lsls	r3, r3, #11
 8002612:	b21b      	sxth	r3, r3
 8002614:	4313      	orrs	r3, r2
 8002616:	b21b      	sxth	r3, r3
 8002618:	837b      	strh	r3, [r7, #26]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(orient_config[2], BMI3_ORIENT_SLOPE_THRES, config->slope_thres);
 800261a:	7cbb      	ldrb	r3, [r7, #18]
 800261c:	b21b      	sxth	r3, r3
 800261e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002622:	b21a      	sxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	799b      	ldrb	r3, [r3, #6]
 8002628:	b21b      	sxth	r3, r3
 800262a:	4313      	orrs	r3, r2
 800262c:	b21b      	sxth	r3, r3
 800262e:	833b      	strh	r3, [r7, #24]

            /* Set hysteresis */
            hyst = BMI3_SET_BITS(orient_config[3], BMI3_ORIENT_HYST, config->hysteresis);
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	b21a      	sxth	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	795b      	ldrb	r3, [r3, #5]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b21b      	sxth	r3, r3
 800263c:	4313      	orrs	r3, r2
 800263e:	b21b      	sxth	r3, r3
 8002640:	82fb      	strh	r3, [r7, #22]

            orient_config[0] = (uint8_t)(ud_en | mode | blocking | theta1);
 8002642:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002644:	b2da      	uxtb	r2, r3
 8002646:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4313      	orrs	r3, r2
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8c3b      	ldrh	r3, [r7, #32]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b2da      	uxtb	r2, r3
 8002656:	8bfb      	ldrh	r3, [r7, #30]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4313      	orrs	r3, r2
 800265c:	b2db      	uxtb	r3, r3
 800265e:	743b      	strb	r3, [r7, #16]
            orient_config[1] = (uint8_t)((theta | holdtime) >> 8);
 8002660:	8bba      	ldrh	r2, [r7, #28]
 8002662:	8b7b      	ldrh	r3, [r7, #26]
 8002664:	4313      	orrs	r3, r2
 8002666:	b29b      	uxth	r3, r3
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	b29b      	uxth	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	747b      	strb	r3, [r7, #17]
            orient_config[2] = (uint8_t)(slope_thres);
 8002670:	8b3b      	ldrh	r3, [r7, #24]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	74bb      	strb	r3, [r7, #18]
            orient_config[3] = (uint8_t)(hyst >> 8);
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	b29b      	uxth	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8002680:	f107 0110 	add.w	r1, r7, #16
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2204      	movs	r2, #4
 8002688:	2042      	movs	r0, #66	@ 0x42
 800268a:	f7fe ff8b 	bl	80015a4 <bmi3_set_regs>
 800268e:	4603      	mov	r3, r0
 8002690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002694:	e002      	b.n	800269c <set_orientation_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002696:	23ff      	movs	r3, #255	@ 0xff
 8002698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800269c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3728      	adds	r7, #40	@ 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <set_step_config>:
/*!
 * @brief This internal API sets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t set_step_config(const struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b0a4      	sub	sp, #144	@ 0x90
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 80026b2:	2310      	movs	r3, #16
 80026b4:	873b      	strh	r3, [r7, #56]	@ 0x38

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	611a      	str	r2, [r3, #16]

    uint8_t data_array[24] = { 0 };
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	611a      	str	r2, [r3, #16]
    uint16_t reset_counter, activity_detection_factor, step_duration_max, step_duration_window,
             step_duration_pp_enabled;

    uint16_t step_duration_threshold, mean_crossing_pp_enabled, mcr_threshold1, mcr_threshold2, sc_12_res;

    if (config != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8259 	beq.w	8002b98 <set_step_config+0x4f0>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80026e6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2202      	movs	r2, #2
 80026ee:	2041      	movs	r0, #65	@ 0x41
 80026f0:	f7fe ff58 	bl	80015a4 <bmi3_set_regs>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

        if (rslt == BMI3_OK)
 80026fa:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 824d 	bne.w	8002b9e <set_step_config+0x4f6>
        {
            /* Set water-mark for lsb 8 bits */
            watermark1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_STEP_WATERMARK, config->watermark_level);
 8002704:	7a3b      	ldrb	r3, [r7, #8]
 8002706:	b21a      	sxth	r2, r3
 8002708:	4bac      	ldr	r3, [pc, #688]	@ (80029bc <set_step_config+0x314>)
 800270a:	4013      	ands	r3, r2
 800270c:	b21a      	sxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b21b      	sxth	r3, r3
 8002714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002718:	b21b      	sxth	r3, r3
 800271a:	4313      	orrs	r3, r2
 800271c:	b21b      	sxth	r3, r3
 800271e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

            watermark = ((uint16_t)data_array[1] << 8);
 8002722:	7a7b      	ldrb	r3, [r7, #9]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

            /* Set water-mark for msb 8 bits */
            watermark2 = BMI3_SET_BIT_POS0(watermark, BMI3_STEP_WATERMARK, config->watermark_level);
 800272a:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 800272e:	4ba3      	ldr	r3, [pc, #652]	@ (80029bc <set_step_config+0x314>)
 8002730:	4013      	ands	r3, r2
 8002732:	b21a      	sxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b21b      	sxth	r3, r3
 800273a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273e:	b21b      	sxth	r3, r3
 8002740:	4313      	orrs	r3, r2
 8002742:	b21b      	sxth	r3, r3
 8002744:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

            reset_counter = ((uint16_t)data_array[1] << 8);
 8002748:	7a7b      	ldrb	r3, [r7, #9]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set reset counter */
            reset_counter = BMI3_SET_BITS(reset_counter, BMI3_STEP_RESET_COUNTER, config->reset_counter);
 8002750:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8002754:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002758:	b21a      	sxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	885b      	ldrh	r3, [r3, #2]
 800275e:	029b      	lsls	r3, r3, #10
 8002760:	b21b      	sxth	r3, r3
 8002762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002766:	b21b      	sxth	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b21b      	sxth	r3, r3
 800276c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set env_min_dist_up for lsb 8 bits */
            env_min_dist_up1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	889b      	ldrh	r3, [r3, #4]
 8002774:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

            env_min_dist_up = ((uint16_t)data_array[3] << 8);
 8002778:	7afb      	ldrb	r3, [r7, #11]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

            /* Set env_min_dist_up for msb 8 bits */
            env_min_dist_up2 = BMI3_SET_BIT_POS0(env_min_dist_up, BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	889b      	ldrh	r3, [r3, #4]
 8002784:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

            /* Set env_coef_up for lsb 8 bits */
            env_coef_up1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	88db      	ldrh	r3, [r3, #6]
 800278c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

            env_coef_up = ((uint16_t)data_array[5] << 8);
 8002790:	7b7b      	ldrb	r3, [r7, #13]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

            /* Set env_coef_up for msb 8 bits */
            env_coef_up2 = BMI3_SET_BIT_POS0(env_coef_up, BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	88db      	ldrh	r3, [r3, #6]
 800279c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

            /* Set env_min_dist_down for lsb 8 bits */
            env_min_dist_down1 =
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	891b      	ldrh	r3, [r3, #8]
 80027a4:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
                BMI3_SET_BIT_POS0(data_array[6], BMI3_STEP_ENV_MIN_DIST_DOWN, config->env_min_dist_down);

            env_min_dist_down = ((uint16_t)data_array[7] << 8);
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Set env_min_dist_down for msb 8 bits */
            env_min_dist_down2 = BMI3_SET_BIT_POS0(env_min_dist_down,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	891b      	ldrh	r3, [r3, #8]
 80027b4:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
                                                   BMI3_STEP_ENV_MIN_DIST_DOWN,
                                                   config->env_min_dist_down);

            /* Set env_coef_down for lsb 8 bits */
            env_coef_down1 = BMI3_SET_BIT_POS0(data_array[8], BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	895b      	ldrh	r3, [r3, #10]
 80027bc:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

            env_coef_down = ((uint16_t)data_array[9] << 8);
 80027c0:	7c7b      	ldrb	r3, [r7, #17]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

            /* Set env_coef_down for msb 8 bits */
            env_coef_down2 = BMI3_SET_BIT_POS0(env_coef_down, BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	895b      	ldrh	r3, [r3, #10]
 80027cc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

            /* Set mean_val_decay for lsb 8 bits */
            mean_val_decay1 = BMI3_SET_BIT_POS0(data_array[10], BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	899b      	ldrh	r3, [r3, #12]
 80027d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

            mean_val_decay = ((uint16_t)data_array[11] << 8);
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

            /* Set mean_val_decay for msb 8 bits */
            mean_val_decay2 = BMI3_SET_BIT_POS0(mean_val_decay, BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	899b      	ldrh	r3, [r3, #12]
 80027e4:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

            /* Set mean_step_dur for lsb 8 bits */
            mean_step_dur1 = BMI3_SET_BIT_POS0(data_array[12], BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	89db      	ldrh	r3, [r3, #14]
 80027ec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

            mean_step_dur = ((uint16_t)data_array[13] << 8);
 80027f0:	7d7b      	ldrb	r3, [r7, #21]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

            /* Set mean_step_dur for msb 8 bits */
            mean_step_dur2 = BMI3_SET_BIT_POS0(mean_step_dur, BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	89db      	ldrh	r3, [r3, #14]
 80027fc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

            /* Set step buffer size */
            step_buffer_size = BMI3_SET_BIT_POS0(data_array[14], BMI3_STEP_BUFFER_SIZE, config->step_buffer_size);
 8002800:	7dbb      	ldrb	r3, [r7, #22]
 8002802:	b21b      	sxth	r3, r3
 8002804:	f023 030f 	bic.w	r3, r3, #15
 8002808:	b21a      	sxth	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8a1b      	ldrh	r3, [r3, #16]
 800280e:	b21b      	sxth	r3, r3
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	b21b      	sxth	r3, r3
 8002816:	4313      	orrs	r3, r2
 8002818:	b21b      	sxth	r3, r3
 800281a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

            /* Set filter cascade */
            filter_cascade_enabled = BMI3_SET_BITS(data_array[14],
 800281e:	7dbb      	ldrb	r3, [r7, #22]
 8002820:	b21b      	sxth	r3, r3
 8002822:	f023 0310 	bic.w	r3, r3, #16
 8002826:	b21a      	sxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8a5b      	ldrh	r3, [r3, #18]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	b21b      	sxth	r3, r3
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	b21b      	sxth	r3, r3
 8002836:	4313      	orrs	r3, r2
 8002838:	b21b      	sxth	r3, r3
 800283a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                                   BMI3_STEP_FILTER_CASCADE_ENABLED,
                                                   config->filter_cascade_enabled);

            /* Set step_counter_increment for lsb 8 bits */
            step_counter_increment1 = BMI3_SET_BITS(data_array[14],
 800283e:	7dbb      	ldrb	r3, [r7, #22]
 8002840:	b21b      	sxth	r3, r3
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	b21a      	sxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8a9b      	ldrh	r3, [r3, #20]
 800284c:	015b      	lsls	r3, r3, #5
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b21b      	sxth	r3, r3
 8002854:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            step_counter_increment2 = ((uint16_t)data_array[15] << 8);
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Set step_counter_increment for msb 8 bits */
            step_counter_increment2 = BMI3_SET_BITS(step_counter_increment2,
 8002860:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	b21a      	sxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8a9b      	ldrh	r3, [r3, #20]
 800286e:	015b      	lsls	r3, r3, #5
 8002870:	b21b      	sxth	r3, r3
 8002872:	4313      	orrs	r3, r2
 8002874:	b21b      	sxth	r3, r3
 8002876:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            /* Set peak_duration_min_walking for lsb 8 bits */
            peak_duration_min_walking = BMI3_SET_BIT_POS0(data_array[16],
 800287a:	7e3b      	ldrb	r3, [r7, #24]
 800287c:	b21b      	sxth	r3, r3
 800287e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002882:	b21a      	sxth	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	8adb      	ldrh	r3, [r3, #22]
 8002888:	b21b      	sxth	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	b21b      	sxth	r3, r3
 800288e:	4313      	orrs	r3, r2
 8002890:	b21b      	sxth	r3, r3
 8002892:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                                                          BMI3_STEP_PEAK_DURATION_MIN_WALKING,
                                                          config->peak_duration_min_walking);

            peak_duration_min_running = ((uint16_t)data_array[17] << 8);
 8002896:	7e7b      	ldrb	r3, [r7, #25]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

            /* Set peak_duration_min_walking for msb 8 bits */
            peak_duration_min_running = BMI3_SET_BITS(peak_duration_min_running,
 800289e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	b21a      	sxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8b1b      	ldrh	r3, [r3, #24]
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	b21b      	sxth	r3, r3
 80028ae:	4313      	orrs	r3, r2
 80028b0:	b21b      	sxth	r3, r3
 80028b2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                                      BMI3_STEP_PEAK_DURATION_MIN_RUNNING,
                                                      config->peak_duration_min_running);

            /* Set activity detection fsctor */
            activity_detection_factor = BMI3_SET_BIT_POS0(data_array[18],
 80028b6:	7ebb      	ldrb	r3, [r7, #26]
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	f023 030f 	bic.w	r3, r3, #15
 80028be:	b21a      	sxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8b5b      	ldrh	r3, [r3, #26]
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                                                          BMI3_STEP_ACTIVITY_DETECTION_FACTOR,
                                                          config->activity_detection_factor);

            /* Set activity_detection_threshold for lsb 8 bits */
            activity_detection_threshold1 = BMI3_SET_BITS(data_array[18],
 80028d4:	7ebb      	ldrb	r3, [r7, #26]
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	b21a      	sxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8b9b      	ldrh	r3, [r3, #28]
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	b21b      	sxth	r3, r3
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            activity_detection_threshold = ((uint16_t)data_array[19] << 8);
 80028ee:	7efb      	ldrb	r3, [r7, #27]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

            /* Set activity_detection_threshold for msb 8 bits */
            activity_detection_threshold2 = BMI3_SET_BITS(activity_detection_threshold,
 80028f6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	b21a      	sxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8b9b      	ldrh	r3, [r3, #28]
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	b21b      	sxth	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b21b      	sxth	r3, r3
 800290c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            /* Set maximum step duration */
            step_duration_max = BMI3_SET_BIT_POS0(data_array[20], BMI3_STEP_DURATION_MAX, config->step_duration_max);
 8002910:	7f3b      	ldrb	r3, [r7, #28]
 8002912:	b21b      	sxth	r3, r3
 8002914:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002918:	b21a      	sxth	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8bdb      	ldrh	r3, [r3, #30]
 800291e:	b21b      	sxth	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	b21b      	sxth	r3, r3
 8002924:	4313      	orrs	r3, r2
 8002926:	b21b      	sxth	r3, r3
 8002928:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

            step_duration_window = ((uint16_t)data_array[21] << 8);
 800292c:	7f7b      	ldrb	r3, [r7, #29]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            /* Set step duration window */
            step_duration_window = BMI3_SET_BITS(step_duration_window,
 8002934:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002938:	b2db      	uxtb	r3, r3
 800293a:	b21a      	sxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8c1b      	ldrh	r3, [r3, #32]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	b21b      	sxth	r3, r3
 8002944:	4313      	orrs	r3, r2
 8002946:	b21b      	sxth	r3, r3
 8002948:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                                                 BMI3_STEP_DURATION_WINDOW,
                                                 config->step_duration_window);

            step_duration_pp_enabled = BMI3_SET_BIT_POS0(data_array[22],
 800294c:	7fbb      	ldrb	r3, [r7, #30]
 800294e:	b21b      	sxth	r3, r3
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	b21a      	sxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800295a:	b21b      	sxth	r3, r3
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	b21b      	sxth	r3, r3
 8002962:	4313      	orrs	r3, r2
 8002964:	b21b      	sxth	r3, r3
 8002966:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                                                         BMI3_STEP_DURATION_PP_ENABLED,
                                                         config->step_duration_pp_enabled);

            step_duration_threshold = BMI3_SET_BITS(data_array[22],
 800296a:	7fbb      	ldrb	r3, [r7, #30]
 800296c:	b21b      	sxth	r3, r3
 800296e:	f023 030e 	bic.w	r3, r3, #14
 8002972:	b21a      	sxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	b21b      	sxth	r3, r3
 800297c:	f003 030e 	and.w	r3, r3, #14
 8002980:	b21b      	sxth	r3, r3
 8002982:	4313      	orrs	r3, r2
 8002984:	b21b      	sxth	r3, r3
 8002986:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                    BMI3_STEP_DURATION_THRESHOLD,
                                                    config->step_duration_thres);

            mean_crossing_pp_enabled = BMI3_SET_BITS(data_array[22],
 800298a:	7fbb      	ldrb	r3, [r7, #30]
 800298c:	b21b      	sxth	r3, r3
 800298e:	f023 0310 	bic.w	r3, r3, #16
 8002992:	b21a      	sxth	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	b21b      	sxth	r3, r3
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	b21b      	sxth	r3, r3
 80029a2:	4313      	orrs	r3, r2
 80029a4:	b21b      	sxth	r3, r3
 80029a6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                                                     BMI3_STEP_MEAN_CROSSING_PP_ENABLED,
                                                     config->mean_crossing_pp_enabled);

            /* Set mcr_threshold for lsb 8 bits */
            mcr_threshold1 = BMI3_SET_BITS(data_array[22], BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 80029aa:	7fbb      	ldrb	r3, [r7, #30]
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	015b      	lsls	r3, r3, #5
 80029ba:	e001      	b.n	80029c0 <set_step_config+0x318>
 80029bc:	fffffc00 	.word	0xfffffc00
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 80029c6:	b21b      	sxth	r3, r3
 80029c8:	4313      	orrs	r3, r2
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

            mcr_threshold = ((uint16_t)data_array[23] << 8);
 80029d0:	7ffb      	ldrb	r3, [r7, #31]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            /* Set mcr_threshold for msb 8 bits */
            mcr_threshold2 = BMI3_SET_BITS(mcr_threshold, BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 80029d8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80029dc:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e6:	015b      	lsls	r3, r3, #5
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	4313      	orrs	r3, r2
 80029f2:	b21b      	sxth	r3, r3
 80029f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e

            sc_12_res = ((uint16_t)data_array[23] << 8);
 80029f6:	7ffb      	ldrb	r3, [r7, #31]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            sc_12_res = BMI3_SET_BITS(sc_12_res, BMI3_STEP_SC_12_RES, config->sc_12_res);
 80029fc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002a00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0a:	029b      	lsls	r3, r3, #10
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a12:	b21b      	sxth	r3, r3
 8002a14:	4313      	orrs	r3, r2
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            step_config[0] = (uint8_t)watermark1;
 8002a1a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f887 3020 	strb.w	r3, [r7, #32]
            step_config[1] = (uint8_t)((watermark2 | reset_counter) >> 8);
 8002a24:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8002a28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            step_config[2] = (uint8_t)env_min_dist_up1;
 8002a3a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            step_config[3] = (uint8_t)(env_min_dist_up2 >> 8);
 8002a44:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            step_config[4] = (uint8_t)env_coef_up1;
 8002a52:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            step_config[5] = (uint8_t)(env_coef_up2 >> 8);
 8002a5c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            step_config[6] = (uint8_t)env_min_dist_down1;
 8002a6a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            step_config[7] = (uint8_t)(env_min_dist_down2 >> 8);
 8002a74:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            step_config[8] = (uint8_t)env_coef_down1;
 8002a82:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            step_config[9] = (uint8_t)(env_coef_down2 >> 8);
 8002a8c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            step_config[10] = (uint8_t)mean_val_decay1;
 8002a9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            step_config[11] = (uint8_t)(mean_val_decay2 >> 8);
 8002aa4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            step_config[12] = (uint8_t)mean_step_dur1;
 8002ab2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            step_config[13] = (uint8_t)(mean_step_dur2 >> 8);
 8002abc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            step_config[14] = (uint8_t)(step_buffer_size | filter_cascade_enabled | step_counter_increment1);
 8002aca:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            step_config[15] = (uint8_t)(step_counter_increment2 >> 8);
 8002ae8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            step_config[16] = (uint8_t)peak_duration_min_walking;
 8002af6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            step_config[17] = (uint8_t)(peak_duration_min_running >> 8);
 8002b00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
            step_config[18] = (uint8_t)(activity_detection_factor | activity_detection_threshold1);
 8002b0e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            step_config[19] = (uint8_t)(activity_detection_threshold2 >> 8);
 8002b22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            step_config[20] = (uint8_t)step_duration_max;
 8002b30:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            step_config[21] = (uint8_t)(step_duration_window >> 8);
 8002b3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            step_config[22] =
                (uint8_t)(step_duration_pp_enabled | step_duration_threshold | mean_crossing_pp_enabled |
 8002b48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b2db      	uxtb	r3, r3
            step_config[22] =
 8002b6c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                          mcr_threshold1);
            step_config[23] = (uint8_t)((mcr_threshold2 | sc_12_res) >> 8);
 8002b70:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002b72:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

            /* Set the configuration back to feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 8002b82:	f107 0120 	add.w	r1, r7, #32
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2218      	movs	r2, #24
 8002b8a:	2042      	movs	r0, #66	@ 0x42
 8002b8c:	f7fe fd0a 	bl	80015a4 <bmi3_set_regs>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002b96:	e002      	b.n	8002b9e <set_step_config+0x4f6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002b98:	23ff      	movs	r3, #255	@ 0xff
 8002b9a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return rslt;
 8002b9e:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3790      	adds	r7, #144	@ 0x90
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop

08002bac <set_tap_config>:
 * @brief This internal API sets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t set_tap_config(const struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	@ 0x30
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8002bbe:	231e      	movs	r3, #30
 8002bc0:	81bb      	strh	r3, [r7, #12]

    uint16_t axis_sel, wait_fr_time_out, max_peaks_for_tap, mode;
    uint16_t tap_peak_thres, tap_peak_thres1, tap_peak_thres2, max_gest_dur;
    uint16_t max_dur_between_peaks, tap_shock_setting_dur, min_quite_dur_between_taps, quite_time_after_gest;

    if (config != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80e8 	beq.w	8002d9a <set_tap_config+0x1ee>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8002bca:	f107 010c 	add.w	r1, r7, #12
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	2041      	movs	r0, #65	@ 0x41
 8002bd4:	f7fe fce6 	bl	80015a4 <bmi3_set_regs>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 8002bde:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 80dc 	bne.w	8002da0 <set_tap_config+0x1f4>
        {
            /* Set axis_sel */
            axis_sel = BMI3_SET_BIT_POS0(tap_config[0], BMI3_TAP_AXIS_SEL, config->axis_sel);
 8002be8:	7c3b      	ldrb	r3, [r7, #16]
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	f023 0303 	bic.w	r3, r3, #3
 8002bf0:	b21a      	sxth	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b21b      	sxth	r3, r3
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b21b      	sxth	r3, r3
 8002c02:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set wait for time out */
            wait_fr_time_out = BMI3_SET_BITS(tap_config[0], BMI3_TAP_WAIT_FR_TIME_OUT, config->wait_for_timeout);
 8002c04:	7c3b      	ldrb	r3, [r7, #16]
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	b21a      	sxth	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	b21b      	sxth	r3, r3
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set maximum peaks for tap */
            max_peaks_for_tap = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MAX_PEAKS, config->max_peaks_for_tap);
 8002c22:	7c3b      	ldrb	r3, [r7, #16]
 8002c24:	b21b      	sxth	r3, r3
 8002c26:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002c2a:	b21a      	sxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	789b      	ldrb	r3, [r3, #2]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c38:	b21b      	sxth	r3, r3
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	b21b      	sxth	r3, r3
 8002c3e:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mode */
            mode = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MODE, config->mode);
 8002c40:	7c3b      	ldrb	r3, [r7, #16]
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002c48:	b21a      	sxth	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	78db      	ldrb	r3, [r3, #3]
 8002c4e:	019b      	lsls	r3, r3, #6
 8002c50:	b21b      	sxth	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	b21b      	sxth	r3, r3
 8002c56:	4313      	orrs	r3, r2
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	84fb      	strh	r3, [r7, #38]	@ 0x26

            /* Set peak threshold first byte in word */
            tap_peak_thres = BMI3_SET_BIT_POS0(tap_config[2], BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8002c5c:	7cbb      	ldrb	r3, [r7, #18]
 8002c5e:	b21a      	sxth	r2, r3
 8002c60:	4b52      	ldr	r3, [pc, #328]	@ (8002dac <set_tap_config+0x200>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	b21a      	sxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	889b      	ldrh	r3, [r3, #4]
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c70:	b21b      	sxth	r3, r3
 8002c72:	4313      	orrs	r3, r2
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Left shift by 8 times so that we can set rest of the values of tap peak threshold conf in word */
            tap_peak_thres1 = ((uint16_t)tap_config[3] << 8);
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set peak threshold second byte in word */
            tap_peak_thres2 = BMI3_SET_BIT_POS0(tap_peak_thres1, BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8002c7e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8002c82:	4b4a      	ldr	r3, [pc, #296]	@ (8002dac <set_tap_config+0x200>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	b21a      	sxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	889b      	ldrh	r3, [r3, #4]
 8002c8c:	b21b      	sxth	r3, r3
 8002c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	4313      	orrs	r3, r2
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	843b      	strh	r3, [r7, #32]

            max_gest_dur = ((uint16_t)tap_config[3] << 8);
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	83fb      	strh	r3, [r7, #30]

            /* Set max gesture duration */
            max_gest_dur = BMI3_SET_BITS(max_gest_dur, BMI3_TAP_MAX_GEST_DUR, config->max_gest_dur);
 8002ca0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	799b      	ldrb	r3, [r3, #6]
 8002cae:	029b      	lsls	r3, r3, #10
 8002cb0:	b21b      	sxth	r3, r3
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	b21b      	sxth	r3, r3
 8002cb6:	83fb      	strh	r3, [r7, #30]

            /* Set max duration between peaks */
            max_dur_between_peaks = BMI3_SET_BIT_POS0(tap_config[4],
 8002cb8:	7d3b      	ldrb	r3, [r7, #20]
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	f023 030f 	bic.w	r3, r3, #15
 8002cc0:	b21a      	sxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	79db      	ldrb	r3, [r3, #7]
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	b21b      	sxth	r3, r3
 8002cd2:	83bb      	strh	r3, [r7, #28]
                                                      BMI3_TAP_MAX_DUR_BW_PEAKS,
                                                      config->max_dur_between_peaks);

            /* Set shock settling duration */
            tap_shock_setting_dur =
                BMI3_SET_BITS(tap_config[4], BMI3_TAP_SHOCK_SETT_DUR, config->tap_shock_settling_dur);
 8002cd4:	7d3b      	ldrb	r3, [r7, #20]
 8002cd6:	b21b      	sxth	r3, r3
 8002cd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cdc:	b21a      	sxth	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7a1b      	ldrb	r3, [r3, #8]
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	b21b      	sxth	r3, r3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	b21b      	sxth	r3, r3
            tap_shock_setting_dur =
 8002cee:	837b      	strh	r3, [r7, #26]

            min_quite_dur_between_taps = ((uint16_t)tap_config[5] << 8);
 8002cf0:	7d7b      	ldrb	r3, [r7, #21]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	833b      	strh	r3, [r7, #24]

            /* Set quite duration between taps */
            min_quite_dur_between_taps = BMI3_SET_BITS(min_quite_dur_between_taps,
 8002cf6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002cfa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002cfe:	b21a      	sxth	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7a5b      	ldrb	r3, [r3, #9]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	b21b      	sxth	r3, r3
 8002d08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d0c:	b21b      	sxth	r3, r3
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	833b      	strh	r3, [r7, #24]
                                                       BMI3_TAP_MIN_QUITE_DUR_BW_TAPS,
                                                       config->min_quite_dur_between_taps);

            quite_time_after_gest = ((uint16_t)tap_config[5] << 8);
 8002d14:	7d7b      	ldrb	r3, [r7, #21]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	82fb      	strh	r3, [r7, #22]

            /* Set quite time after gesture */
            quite_time_after_gest = BMI3_SET_BITS(quite_time_after_gest,
 8002d1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d22:	b21a      	sxth	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7a9b      	ldrb	r3, [r3, #10]
 8002d28:	031b      	lsls	r3, r3, #12
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	82fb      	strh	r3, [r7, #22]
                                                  BMI3_TAP_QUITE_TIME_AFTR_GEST,
                                                  config->quite_time_after_gest);

            /* Copy all the configurations back to the tap configuration array */
            tap_config[0] = (uint8_t)(axis_sel | wait_fr_time_out | max_peaks_for_tap | mode);
 8002d32:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	743b      	strb	r3, [r7, #16]
            tap_config[2] = (uint8_t)(tap_peak_thres);
 8002d50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	74bb      	strb	r3, [r7, #18]
            tap_config[3] = (uint8_t)((tap_peak_thres2 | max_gest_dur) >> 8);
 8002d56:	8c3a      	ldrh	r2, [r7, #32]
 8002d58:	8bfb      	ldrh	r3, [r7, #30]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	74fb      	strb	r3, [r7, #19]
            tap_config[4] = (uint8_t)(max_dur_between_peaks | tap_shock_setting_dur);
 8002d66:	8bbb      	ldrh	r3, [r7, #28]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	8b7b      	ldrh	r3, [r7, #26]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	753b      	strb	r3, [r7, #20]
            tap_config[5] = (uint8_t)((min_quite_dur_between_taps | quite_time_after_gest) >> 8);
 8002d74:	8b3a      	ldrh	r2, [r7, #24]
 8002d76:	8afb      	ldrh	r3, [r7, #22]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	757b      	strb	r3, [r7, #21]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 8002d84:	f107 0110 	add.w	r1, r7, #16
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2206      	movs	r2, #6
 8002d8c:	2042      	movs	r0, #66	@ 0x42
 8002d8e:	f7fe fc09 	bl	80015a4 <bmi3_set_regs>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002d98:	e002      	b.n	8002da0 <set_tap_config+0x1f4>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002d9a:	23ff      	movs	r3, #255	@ 0xff
 8002d9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8002da0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3730      	adds	r7, #48	@ 0x30
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	fffffc00 	.word	0xfffffc00

08002db0 <set_alternate_accel_config>:
/*!
 * @brief This internal API sets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t set_alternate_accel_config(const struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8002dba:	2300      	movs	r3, #0
 8002dbc:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_acc_odr, alt_acc_avg_num, alt_acc_mode;

    if (config != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d03a      	beq.n	8002e3a <set_alternate_accel_config+0x8a>
    {
        /* Set alternate accelerometer ODR */
        alt_acc_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_ACC_ODR, config->alt_acc_odr);
 8002dc4:	7b3b      	ldrb	r3, [r7, #12]
 8002dc6:	b21b      	sxth	r3, r3
 8002dc8:	f023 030f 	bic.w	r3, r3, #15
 8002dcc:	b21a      	sxth	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b21b      	sxth	r3, r3
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	b21b      	sxth	r3, r3
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	b21b      	sxth	r3, r3
 8002dde:	82bb      	strh	r3, [r7, #20]

        /* Set alternate accelerometer average number of samples */
        alt_acc_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_AVG_NUM, config->alt_acc_avg_num);
 8002de0:	7b7b      	ldrb	r3, [r7, #13]
 8002de2:	b21a      	sxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	789b      	ldrb	r3, [r3, #2]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b21b      	sxth	r3, r3
 8002df6:	827b      	strh	r3, [r7, #18]

        /* Set alternate accelerometer mode */
        alt_acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_MODE, config->alt_acc_mode);
 8002df8:	7b7b      	ldrb	r3, [r7, #13]
 8002dfa:	b21a      	sxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	785b      	ldrb	r3, [r3, #1]
 8002e00:	031b      	lsls	r3, r3, #12
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002e08:	b21b      	sxth	r3, r3
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_acc_odr);
 8002e10:	8abb      	ldrh	r3, [r7, #20]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_acc_avg_num | alt_acc_mode) >> 8);
 8002e16:	8a7a      	ldrh	r2, [r7, #18]
 8002e18:	8a3b      	ldrh	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate accel */
        rslt = bmi3_set_regs(BMI3_REG_ALT_ACC_CONF, reg_data, 2, dev);
 8002e26:	f107 010c 	add.w	r1, r7, #12
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	2028      	movs	r0, #40	@ 0x28
 8002e30:	f7fe fbb8 	bl	80015a4 <bmi3_set_regs>
 8002e34:	4603      	mov	r3, r0
 8002e36:	75fb      	strb	r3, [r7, #23]
 8002e38:	e001      	b.n	8002e3e <set_alternate_accel_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002e3a:	23ff      	movs	r3, #255	@ 0xff
 8002e3c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <set_alternate_gyro_config>:
/*!
 * @brief This internal API sets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t set_alternate_gyro_config(const struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8002e54:	2300      	movs	r3, #0
 8002e56:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_gyro_odr, alt_gyro_avg_num, alt_gyro_mode;

    if (config != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03a      	beq.n	8002ed4 <set_alternate_gyro_config+0x8a>
    {
        /* Set alternate gyro ODR */
        alt_gyro_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_GYR_ODR, config->alt_gyro_odr);
 8002e5e:	7b3b      	ldrb	r3, [r7, #12]
 8002e60:	b21b      	sxth	r3, r3
 8002e62:	f023 030f 	bic.w	r3, r3, #15
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	4313      	orrs	r3, r2
 8002e76:	b21b      	sxth	r3, r3
 8002e78:	82bb      	strh	r3, [r7, #20]

        /* Set alternate gyro average number of samples */
        alt_gyro_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_AVG_NUM, config->alt_gyro_avg_num);
 8002e7a:	7b7b      	ldrb	r3, [r7, #13]
 8002e7c:	b21a      	sxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	789b      	ldrb	r3, [r3, #2]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	b21b      	sxth	r3, r3
 8002e86:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	b21b      	sxth	r3, r3
 8002e90:	827b      	strh	r3, [r7, #18]

        /* Set alternate gyro mode */
        alt_gyro_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_MODE, config->alt_gyro_mode);
 8002e92:	7b7b      	ldrb	r3, [r7, #13]
 8002e94:	b21a      	sxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	785b      	ldrb	r3, [r3, #1]
 8002e9a:	031b      	lsls	r3, r3, #12
 8002e9c:	b21b      	sxth	r3, r3
 8002e9e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002ea2:	b21b      	sxth	r3, r3
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	b21b      	sxth	r3, r3
 8002ea8:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_gyro_odr);
 8002eaa:	8abb      	ldrh	r3, [r7, #20]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_gyro_avg_num | alt_gyro_mode) >> 8);
 8002eb0:	8a7a      	ldrh	r2, [r7, #18]
 8002eb2:	8a3b      	ldrh	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate gyro */
        rslt = bmi3_set_regs(BMI3_REG_ALT_GYR_CONF, reg_data, 2, dev);
 8002ec0:	f107 010c 	add.w	r1, r7, #12
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	2029      	movs	r0, #41	@ 0x29
 8002eca:	f7fe fb6b 	bl	80015a4 <bmi3_set_regs>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	75fb      	strb	r3, [r7, #23]
 8002ed2:	e001      	b.n	8002ed8 <set_alternate_gyro_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002ed4:	23ff      	movs	r3, #255	@ 0xff
 8002ed6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <set_alternate_auto_config>:

/*!
 * @brief This internal API sets alternate auto configurations for feature interrupts.
 */
static int8_t set_alternate_auto_config(const struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 8002eee:	2300      	movs	r3, #0
 8002ef0:	823b      	strh	r3, [r7, #16]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8002ef2:	2323      	movs	r3, #35	@ 0x23
 8002ef4:	81bb      	strh	r3, [r7, #12]

    uint8_t alt_switch, user_switch;

    if (config != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d035      	beq.n	8002f68 <set_alternate_auto_config+0x84>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002efc:	f107 010c 	add.w	r1, r7, #12
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2202      	movs	r2, #2
 8002f04:	2041      	movs	r0, #65	@ 0x41
 8002f06:	f7fe fb4d 	bl	80015a4 <bmi3_set_regs>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d12a      	bne.n	8002f6c <set_alternate_auto_config+0x88>
        {
            /* Set alternate switch config */
            alt_switch = BMI3_SET_BIT_POS0(alt_auto_config[0],
 8002f16:	7c3b      	ldrb	r3, [r7, #16]
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	f023 030f 	bic.w	r3, r3, #15
 8002f1e:	b25a      	sxtb	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	75bb      	strb	r3, [r7, #22]
                                           BMI3_ALT_CONF_ALT_SWITCH,
                                           config->alt_conf_alt_switch_src_select);

            /* Set alternate user config */
            user_switch = BMI3_SET_BITS(alt_auto_config[0],
 8002f32:	7c3b      	ldrb	r3, [r7, #16]
 8002f34:	b25b      	sxtb	r3, r3
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	b25a      	sxtb	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	4313      	orrs	r3, r2
 8002f46:	b25b      	sxtb	r3, r3
 8002f48:	757b      	strb	r3, [r7, #21]
                                        BMI3_ALT_CONF_USER_SWITCH,
                                        config->alt_conf_user_switch_src_select);

            alt_auto_config[0] = alt_switch | user_switch;
 8002f4a:	7dba      	ldrb	r2, [r7, #22]
 8002f4c:	7d7b      	ldrb	r3, [r7, #21]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	743b      	strb	r3, [r7, #16]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8002f54:	f107 0110 	add.w	r1, r7, #16
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	2042      	movs	r0, #66	@ 0x42
 8002f5e:	f7fe fb21 	bl	80015a4 <bmi3_set_regs>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]
 8002f66:	e001      	b.n	8002f6c <set_alternate_auto_config+0x88>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002f68:	23ff      	movs	r3, #255	@ 0xff
 8002f6a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002f6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <validate_acc_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for accel
 */
static int8_t validate_acc_odr_avg(uint8_t acc_odr, uint8_t acc_avg)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460a      	mov	r2, r1
 8002f82:	71fb      	strb	r3, [r7, #7]
 8002f84:	4613      	mov	r3, r2
 8002f86:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]

    switch (acc_odr)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	d835      	bhi.n	8003008 <validate_acc_odr_avg+0x90>
 8002f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa4 <validate_acc_odr_avg+0x2c>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002fcd 	.word	0x08002fcd
 8002fa8:	08002fd3 	.word	0x08002fd3
 8002fac:	08002fd9 	.word	0x08002fd9
 8002fb0:	08002fdf 	.word	0x08002fdf
 8002fb4:	08002fe5 	.word	0x08002fe5
 8002fb8:	08002feb 	.word	0x08002feb
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08002ff7 	.word	0x08002ff7
 8002fc4:	08002ffd 	.word	0x08002ffd
 8002fc8:	08003003 	.word	0x08003003
    {
        case BMI3_ACC_ODR_0_78HZ:
            odr = 0.78125;
 8002fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800308c <validate_acc_odr_avg+0x114>)
 8002fce:	617b      	str	r3, [r7, #20]
            break;
 8002fd0:	e01b      	b.n	800300a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_1_56HZ:
            odr = 1.5625;
 8002fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003090 <validate_acc_odr_avg+0x118>)
 8002fd4:	617b      	str	r3, [r7, #20]
            break;
 8002fd6:	e018      	b.n	800300a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_3_125HZ:
            odr = 3.125;
 8002fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8003094 <validate_acc_odr_avg+0x11c>)
 8002fda:	617b      	str	r3, [r7, #20]
            break;
 8002fdc:	e015      	b.n	800300a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_6_25HZ:
            odr = 6.25;
 8002fde:	4b2e      	ldr	r3, [pc, #184]	@ (8003098 <validate_acc_odr_avg+0x120>)
 8002fe0:	617b      	str	r3, [r7, #20]
            break;
 8002fe2:	e012      	b.n	800300a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_12_5HZ:
            odr = 12.5;
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800309c <validate_acc_odr_avg+0x124>)
 8002fe6:	617b      	str	r3, [r7, #20]
            break;
 8002fe8:	e00f      	b.n	800300a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_25HZ:
            odr = 25.0;
 8002fea:	4b2d      	ldr	r3, [pc, #180]	@ (80030a0 <validate_acc_odr_avg+0x128>)
 8002fec:	617b      	str	r3, [r7, #20]
            break;
 8002fee:	e00c      	b.n	800300a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_50HZ:
            odr = 50.0;
 8002ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80030a4 <validate_acc_odr_avg+0x12c>)
 8002ff2:	617b      	str	r3, [r7, #20]
            break;
 8002ff4:	e009      	b.n	800300a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_100HZ:
            odr = 100.0;
 8002ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80030a8 <validate_acc_odr_avg+0x130>)
 8002ff8:	617b      	str	r3, [r7, #20]
            break;
 8002ffa:	e006      	b.n	800300a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_200HZ:
            odr = 200.0;
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80030ac <validate_acc_odr_avg+0x134>)
 8002ffe:	617b      	str	r3, [r7, #20]
            break;
 8003000:	e003      	b.n	800300a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_400HZ:
            odr = 400.0;
 8003002:	4b2b      	ldr	r3, [pc, #172]	@ (80030b0 <validate_acc_odr_avg+0x138>)
 8003004:	617b      	str	r3, [r7, #20]
            break;
 8003006:	e000      	b.n	800300a <validate_acc_odr_avg+0x92>
        default:
            break;
 8003008:	bf00      	nop
    }

    switch (acc_avg)
 800300a:	79bb      	ldrb	r3, [r7, #6]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d82d      	bhi.n	800306c <validate_acc_odr_avg+0xf4>
 8003010:	a201      	add	r2, pc, #4	@ (adr r2, 8003018 <validate_acc_odr_avg+0xa0>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	08003035 	.word	0x08003035
 800301c:	0800303d 	.word	0x0800303d
 8003020:	08003045 	.word	0x08003045
 8003024:	0800304d 	.word	0x0800304d
 8003028:	08003055 	.word	0x08003055
 800302c:	0800305d 	.word	0x0800305d
 8003030:	08003065 	.word	0x08003065
    {
        case BMI3_ACC_AVG1:
            avg = 1.0;
 8003034:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003038:	613b      	str	r3, [r7, #16]
            break;
 800303a:	e018      	b.n	800306e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG2:
            avg = 2.0;
 800303c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003040:	613b      	str	r3, [r7, #16]
            break;
 8003042:	e014      	b.n	800306e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG4:
            avg = 4.0;
 8003044:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8003048:	613b      	str	r3, [r7, #16]
            break;
 800304a:	e010      	b.n	800306e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG8:
            avg = 8.0;
 800304c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003050:	613b      	str	r3, [r7, #16]
            break;
 8003052:	e00c      	b.n	800306e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG16:
            avg = 16.0;
 8003054:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003058:	613b      	str	r3, [r7, #16]
            break;
 800305a:	e008      	b.n	800306e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG32:
            avg = 32.0;
 800305c:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8003060:	613b      	str	r3, [r7, #16]
            break;
 8003062:	e004      	b.n	800306e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG64:
            avg = 64.0;
 8003064:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8003068:	613b      	str	r3, [r7, #16]
            break;
 800306a:	e000      	b.n	800306e <validate_acc_odr_avg+0xf6>
        default:
            break;
 800306c:	bf00      	nop
    }

    rslt = accel_skipped_samples_check(odr, avg);
 800306e:	edd7 0a04 	vldr	s1, [r7, #16]
 8003072:	ed97 0a05 	vldr	s0, [r7, #20]
 8003076:	f000 f81d 	bl	80030b4 <accel_skipped_samples_check>
 800307a:	4603      	mov	r3, r0
 800307c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	3f480000 	.word	0x3f480000
 8003090:	3fc80000 	.word	0x3fc80000
 8003094:	40480000 	.word	0x40480000
 8003098:	40c80000 	.word	0x40c80000
 800309c:	41480000 	.word	0x41480000
 80030a0:	41c80000 	.word	0x41c80000
 80030a4:	42480000 	.word	0x42480000
 80030a8:	42c80000 	.word	0x42c80000
 80030ac:	43480000 	.word	0x43480000
 80030b0:	43c80000 	.word	0x43c80000

080030b4 <accel_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for accel
 */
static int8_t accel_skipped_samples_check(float odr, float avg)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80030be:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 80030c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <accel_skipped_samples_check+0x7c>)
 80030c4:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 80030cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80030d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	dd1f      	ble.n	800311a <accel_skipped_samples_check+0x66>
 80030da:	edd7 7a00 	vldr	s15, [r7]
 80030de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e6:	dd18      	ble.n	800311a <accel_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 80030e8:	edd7 6a04 	vldr	s13, [r7, #16]
 80030ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80030f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f4:	edd7 7a00 	vldr	s15, [r7]
 80030f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fc:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 8003100:	edd7 7a03 	vldr	s15, [r7, #12]
 8003104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310c:	dd02      	ble.n	8003114 <accel_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8003112:	e004      	b.n	800311e <accel_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 8003114:	23fc      	movs	r3, #252	@ 0xfc
 8003116:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8003118:	e001      	b.n	800311e <accel_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_ACC_INVALID_CFG;
 800311a:	23fc      	movs	r3, #252	@ 0xfc
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800311e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003122:	4618      	mov	r0, r3
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	45c80000 	.word	0x45c80000

08003134 <validate_gyr_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for gyro
 */
static int8_t validate_gyr_odr_avg(uint8_t gyr_odr, uint8_t gyr_avg)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	460a      	mov	r2, r1
 800313e:	71fb      	strb	r3, [r7, #7]
 8003140:	4613      	mov	r3, r2
 8003142:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	613b      	str	r3, [r7, #16]

    switch (gyr_odr)
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	3b01      	subs	r3, #1
 8003154:	2b09      	cmp	r3, #9
 8003156:	d835      	bhi.n	80031c4 <validate_gyr_odr_avg+0x90>
 8003158:	a201      	add	r2, pc, #4	@ (adr r2, 8003160 <validate_gyr_odr_avg+0x2c>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003189 	.word	0x08003189
 8003164:	0800318f 	.word	0x0800318f
 8003168:	08003195 	.word	0x08003195
 800316c:	0800319b 	.word	0x0800319b
 8003170:	080031a1 	.word	0x080031a1
 8003174:	080031a7 	.word	0x080031a7
 8003178:	080031ad 	.word	0x080031ad
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031b9 	.word	0x080031b9
 8003184:	080031bf 	.word	0x080031bf
    {
        case BMI3_GYR_ODR_0_78HZ:
            odr = 0.78125;
 8003188:	4b2f      	ldr	r3, [pc, #188]	@ (8003248 <validate_gyr_odr_avg+0x114>)
 800318a:	617b      	str	r3, [r7, #20]
            break;
 800318c:	e01b      	b.n	80031c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_1_56HZ:
            odr = 1.5625;
 800318e:	4b2f      	ldr	r3, [pc, #188]	@ (800324c <validate_gyr_odr_avg+0x118>)
 8003190:	617b      	str	r3, [r7, #20]
            break;
 8003192:	e018      	b.n	80031c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_3_125HZ:
            odr = 3.125;
 8003194:	4b2e      	ldr	r3, [pc, #184]	@ (8003250 <validate_gyr_odr_avg+0x11c>)
 8003196:	617b      	str	r3, [r7, #20]
            break;
 8003198:	e015      	b.n	80031c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_6_25HZ:
            odr = 6.25;
 800319a:	4b2e      	ldr	r3, [pc, #184]	@ (8003254 <validate_gyr_odr_avg+0x120>)
 800319c:	617b      	str	r3, [r7, #20]
            break;
 800319e:	e012      	b.n	80031c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_12_5HZ:
            odr = 12.5;
 80031a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003258 <validate_gyr_odr_avg+0x124>)
 80031a2:	617b      	str	r3, [r7, #20]
            break;
 80031a4:	e00f      	b.n	80031c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_25HZ:
            odr = 25.0;
 80031a6:	4b2d      	ldr	r3, [pc, #180]	@ (800325c <validate_gyr_odr_avg+0x128>)
 80031a8:	617b      	str	r3, [r7, #20]
            break;
 80031aa:	e00c      	b.n	80031c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_50HZ:
            odr = 50.0;
 80031ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003260 <validate_gyr_odr_avg+0x12c>)
 80031ae:	617b      	str	r3, [r7, #20]
            break;
 80031b0:	e009      	b.n	80031c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_100HZ:
            odr = 100.0;
 80031b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003264 <validate_gyr_odr_avg+0x130>)
 80031b4:	617b      	str	r3, [r7, #20]
            break;
 80031b6:	e006      	b.n	80031c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_200HZ:
            odr = 200.0;
 80031b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003268 <validate_gyr_odr_avg+0x134>)
 80031ba:	617b      	str	r3, [r7, #20]
            break;
 80031bc:	e003      	b.n	80031c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_400HZ:
            odr = 400.0;
 80031be:	4b2b      	ldr	r3, [pc, #172]	@ (800326c <validate_gyr_odr_avg+0x138>)
 80031c0:	617b      	str	r3, [r7, #20]
            break;
 80031c2:	e000      	b.n	80031c6 <validate_gyr_odr_avg+0x92>
        default:
            break;
 80031c4:	bf00      	nop
    }

    switch (gyr_avg)
 80031c6:	79bb      	ldrb	r3, [r7, #6]
 80031c8:	2b06      	cmp	r3, #6
 80031ca:	d82d      	bhi.n	8003228 <validate_gyr_odr_avg+0xf4>
 80031cc:	a201      	add	r2, pc, #4	@ (adr r2, 80031d4 <validate_gyr_odr_avg+0xa0>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	080031f1 	.word	0x080031f1
 80031d8:	080031f9 	.word	0x080031f9
 80031dc:	08003201 	.word	0x08003201
 80031e0:	08003209 	.word	0x08003209
 80031e4:	08003211 	.word	0x08003211
 80031e8:	08003219 	.word	0x08003219
 80031ec:	08003221 	.word	0x08003221
    {
        case BMI3_GYR_AVG1:
            avg = 1.0;
 80031f0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80031f4:	613b      	str	r3, [r7, #16]
            break;
 80031f6:	e018      	b.n	800322a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG2:
            avg = 2.0;
 80031f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80031fc:	613b      	str	r3, [r7, #16]
            break;
 80031fe:	e014      	b.n	800322a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG4:
            avg = 4.0;
 8003200:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8003204:	613b      	str	r3, [r7, #16]
            break;
 8003206:	e010      	b.n	800322a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG8:
            avg = 8.0;
 8003208:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800320c:	613b      	str	r3, [r7, #16]
            break;
 800320e:	e00c      	b.n	800322a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG16:
            avg = 16.0;
 8003210:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003214:	613b      	str	r3, [r7, #16]
            break;
 8003216:	e008      	b.n	800322a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG32:
            avg = 32.0;
 8003218:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 800321c:	613b      	str	r3, [r7, #16]
            break;
 800321e:	e004      	b.n	800322a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG64:
            avg = 64.0;
 8003220:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8003224:	613b      	str	r3, [r7, #16]
            break;
 8003226:	e000      	b.n	800322a <validate_gyr_odr_avg+0xf6>
        default:
            break;
 8003228:	bf00      	nop
    }

    rslt = gyro_skipped_samples_check(odr, avg);
 800322a:	edd7 0a04 	vldr	s1, [r7, #16]
 800322e:	ed97 0a05 	vldr	s0, [r7, #20]
 8003232:	f000 f81d 	bl	8003270 <gyro_skipped_samples_check>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800323a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	3f480000 	.word	0x3f480000
 800324c:	3fc80000 	.word	0x3fc80000
 8003250:	40480000 	.word	0x40480000
 8003254:	40c80000 	.word	0x40c80000
 8003258:	41480000 	.word	0x41480000
 800325c:	41c80000 	.word	0x41c80000
 8003260:	42480000 	.word	0x42480000
 8003264:	42c80000 	.word	0x42c80000
 8003268:	43480000 	.word	0x43480000
 800326c:	43c80000 	.word	0x43c80000

08003270 <gyro_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for gyro
 */
static int8_t gyro_skipped_samples_check(float odr, float avg)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	ed87 0a01 	vstr	s0, [r7, #4]
 800327a:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 800327e:	4b1b      	ldr	r3, [pc, #108]	@ (80032ec <gyro_skipped_samples_check+0x7c>)
 8003280:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8003288:	edd7 7a01 	vldr	s15, [r7, #4]
 800328c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003294:	dd1f      	ble.n	80032d6 <gyro_skipped_samples_check+0x66>
 8003296:	edd7 7a00 	vldr	s15, [r7]
 800329a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a2:	dd18      	ble.n	80032d6 <gyro_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 80032a4:	edd7 6a04 	vldr	s13, [r7, #16]
 80032a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b0:	edd7 7a00 	vldr	s15, [r7]
 80032b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b8:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 80032bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80032c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c8:	dd02      	ble.n	80032d0 <gyro_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80032ce:	e004      	b.n	80032da <gyro_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 80032d0:	23fb      	movs	r3, #251	@ 0xfb
 80032d2:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80032d4:	e001      	b.n	80032da <gyro_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_GYRO_INVALID_CFG;
 80032d6:	23fb      	movs	r3, #251	@ 0xfb
 80032d8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80032da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	45c80000 	.word	0x45c80000

080032f0 <bmi323_init>:
/*!
 * @brief This API is the entry point for bmi323 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi323_init(struct bmi3_dev *dev)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fde1 	bl	8003ec0 <null_ptr_check>
 80032fe:	4603      	mov	r3, r0
 8003300:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI323_OK)
 8003302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <bmi323_init+0x24>
    {
        rslt = bmi3_init(dev);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fe f893 	bl	8001436 <bmi3_init>
 8003310:	4603      	mov	r3, r0
 8003312:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI323_OK)
 8003314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <bmi323_init+0x40>
    {
        /* Validate chip-id */
        if (dev->chip_id == BMI323_CHIP_ID)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b43      	cmp	r3, #67	@ 0x43
 8003322:	d103      	bne.n	800332c <bmi323_init+0x3c>
        {
            /* Assign resolution to the structure */
            dev->resolution = BMI323_16_BIT_RESOLUTION;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2210      	movs	r2, #16
 8003328:	731a      	strb	r2, [r3, #12]
 800332a:	e001      	b.n	8003330 <bmi323_init+0x40>
        }
        else
        {
            rslt = BMI323_E_DEV_NOT_FOUND;
 800332c:	23fd      	movs	r3, #253	@ 0xfd
 800332e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (rslt == BMI323_OK)
 8003330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <bmi323_init+0x54>
    {
        rslt = bmi323_context_switch_selection(BMI323_WEARABLE_SEL, dev);
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	2001      	movs	r0, #1
 800333c:	f000 f81e 	bl	800337c <bmi323_context_switch_selection>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <bmi323_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi323_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	460b      	mov	r3, r1
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_sensor_config(sens_cfg, n_sens, dev);
 800335e:	7afb      	ldrb	r3, [r7, #11]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4619      	mov	r1, r3
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7fe fa0f 	bl	8001788 <bmi3_set_sensor_config>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800336e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <bmi323_context_switch_selection>:

/*!
 * @brief This API writes the configurations of context feature for smart phone, wearables and hearables.
 */
int8_t bmi323_context_switch_selection(uint8_t context_sel, struct bmi3_dev *dev)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b0c8      	sub	sp, #288	@ 0x120
 8003380:	af00      	add	r7, sp, #0
 8003382:	4602      	mov	r2, r0
 8003384:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003388:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800338c:	6019      	str	r1, [r3, #0]
 800338e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003392:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003396:	701a      	strb	r2, [r3, #0]
    /* Variable to define error */
    int8_t rslt;

    struct bmi3_sens_config sens_cfg[BMI323_MAX_FEATURE];

    uint8_t index = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    if (context_sel < BMI323_SEL_MAX)
 800339e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80033a2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	f200 8578 	bhi.w	8003e9e <bmi323_context_switch_selection+0xb22>
    {
        /* Set any-motion configuration */
        sens_cfg[0].type = BMI323_ANY_MOTION;
 80033ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80033b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80033b6:	2203      	movs	r2, #3
 80033b8:	701a      	strb	r2, [r3, #0]
        sens_cfg[0].cfg.any_motion.slope_thres = any_motion_param_set[context_sel][index++];
 80033ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80033be:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80033c8:	1c59      	adds	r1, r3, #1
 80033ca:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80033ce:	4618      	mov	r0, r3
 80033d0:	49e3      	ldr	r1, [pc, #908]	@ (8003760 <bmi323_context_switch_selection+0x3e4>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	4403      	add	r3, r0
 80033da:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80033de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80033e2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80033e6:	809a      	strh	r2, [r3, #4]
        sens_cfg[0].cfg.any_motion.acc_ref_up = (uint8_t)(any_motion_param_set[context_sel][index++]);
 80033e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80033ec:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80033f6:	1c59      	adds	r1, r3, #1
 80033f8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80033fc:	4618      	mov	r0, r3
 80033fe:	49d8      	ldr	r1, [pc, #864]	@ (8003760 <bmi323_context_switch_selection+0x3e4>)
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	4403      	add	r3, r0
 8003408:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003412:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003416:	719a      	strb	r2, [r3, #6]
        sens_cfg[0].cfg.any_motion.hysteresis = any_motion_param_set[context_sel][index++];
 8003418:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800341c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003426:	1c59      	adds	r1, r3, #1
 8003428:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800342c:	4618      	mov	r0, r3
 800342e:	49cc      	ldr	r1, [pc, #816]	@ (8003760 <bmi323_context_switch_selection+0x3e4>)
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	4403      	add	r3, r0
 8003438:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800343c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003440:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003444:	811a      	strh	r2, [r3, #8]
        sens_cfg[0].cfg.any_motion.duration = any_motion_param_set[context_sel][index++];
 8003446:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800344a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003454:	1c59      	adds	r1, r3, #1
 8003456:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800345a:	4618      	mov	r0, r3
 800345c:	49c0      	ldr	r1, [pc, #768]	@ (8003760 <bmi323_context_switch_selection+0x3e4>)
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	4403      	add	r3, r0
 8003466:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800346a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800346e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003472:	805a      	strh	r2, [r3, #2]
        sens_cfg[0].cfg.any_motion.wait_time = any_motion_param_set[context_sel][index++];
 8003474:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003478:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003482:	1c59      	adds	r1, r3, #1
 8003484:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003488:	4618      	mov	r0, r3
 800348a:	49b5      	ldr	r1, [pc, #724]	@ (8003760 <bmi323_context_switch_selection+0x3e4>)
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	4403      	add	r3, r0
 8003494:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003498:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800349c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80034a0:	815a      	strh	r2, [r3, #10]

        /* Set no-motion configuration */
        index = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[1].type = BMI323_NO_MOTION;
 80034a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80034b0:	2204      	movs	r2, #4
 80034b2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        sens_cfg[1].cfg.no_motion.slope_thres = no_motion_param_set[context_sel][index++];
 80034b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034ba:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80034c4:	1c59      	adds	r1, r3, #1
 80034c6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80034ca:	4618      	mov	r0, r3
 80034cc:	49a5      	ldr	r1, [pc, #660]	@ (8003764 <bmi323_context_switch_selection+0x3e8>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	4403      	add	r3, r0
 80034d6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80034da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034de:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80034e2:	865a      	strh	r2, [r3, #50]	@ 0x32
        sens_cfg[1].cfg.no_motion.acc_ref_up = (uint8_t)(no_motion_param_set[context_sel][index++]);
 80034e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034e8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80034f2:	1c59      	adds	r1, r3, #1
 80034f4:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80034f8:	4618      	mov	r0, r3
 80034fa:	499a      	ldr	r1, [pc, #616]	@ (8003764 <bmi323_context_switch_selection+0x3e8>)
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	4403      	add	r3, r0
 8003504:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800350e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        sens_cfg[1].cfg.no_motion.hysteresis = no_motion_param_set[context_sel][index++];
 8003516:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800351a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003524:	1c59      	adds	r1, r3, #1
 8003526:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800352a:	4618      	mov	r0, r3
 800352c:	498d      	ldr	r1, [pc, #564]	@ (8003764 <bmi323_context_switch_selection+0x3e8>)
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	4403      	add	r3, r0
 8003536:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800353a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800353e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003542:	86da      	strh	r2, [r3, #54]	@ 0x36
        sens_cfg[1].cfg.no_motion.duration = no_motion_param_set[context_sel][index++];
 8003544:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003548:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003558:	4618      	mov	r0, r3
 800355a:	4982      	ldr	r1, [pc, #520]	@ (8003764 <bmi323_context_switch_selection+0x3e8>)
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	4403      	add	r3, r0
 8003564:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003568:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800356c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003570:	861a      	strh	r2, [r3, #48]	@ 0x30
        sens_cfg[1].cfg.no_motion.wait_time = no_motion_param_set[context_sel][index++];
 8003572:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003576:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003580:	1c59      	adds	r1, r3, #1
 8003582:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003586:	4618      	mov	r0, r3
 8003588:	4976      	ldr	r1, [pc, #472]	@ (8003764 <bmi323_context_switch_selection+0x3e8>)
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	4403      	add	r3, r0
 8003592:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003596:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800359a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800359e:	871a      	strh	r2, [r3, #56]	@ 0x38

        /* Set tap configuration */
        index = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[2].type = BMI323_TAP;
 80035a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80035aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035ae:	2209      	movs	r2, #9
 80035b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        sens_cfg[2].cfg.tap.axis_sel = (uint8_t)tap_param_set[context_sel][index++];
 80035b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80035b8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80035c2:	1c59      	adds	r1, r3, #1
 80035c4:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80035c8:	4618      	mov	r0, r3
 80035ca:	4967      	ldr	r1, [pc, #412]	@ (8003768 <bmi323_context_switch_selection+0x3ec>)
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4403      	add	r3, r0
 80035d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80035e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035e4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
        sens_cfg[2].cfg.tap.wait_for_timeout = (uint8_t)tap_param_set[context_sel][index++];
 80035e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80035ec:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80035f6:	1c59      	adds	r1, r3, #1
 80035f8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80035fc:	4618      	mov	r0, r3
 80035fe:	495a      	ldr	r1, [pc, #360]	@ (8003768 <bmi323_context_switch_selection+0x3ec>)
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4403      	add	r3, r0
 800360a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003614:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003618:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
        sens_cfg[2].cfg.tap.max_peaks_for_tap = (uint8_t)tap_param_set[context_sel][index++];
 800361c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003620:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800362a:	1c59      	adds	r1, r3, #1
 800362c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003630:	4618      	mov	r0, r3
 8003632:	494d      	ldr	r1, [pc, #308]	@ (8003768 <bmi323_context_switch_selection+0x3ec>)
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4403      	add	r3, r0
 800363e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003648:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800364c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        sens_cfg[2].cfg.tap.mode = (uint8_t)tap_param_set[context_sel][index++];
 8003650:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003654:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800365e:	1c59      	adds	r1, r3, #1
 8003660:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003664:	4618      	mov	r0, r3
 8003666:	4940      	ldr	r1, [pc, #256]	@ (8003768 <bmi323_context_switch_selection+0x3ec>)
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4403      	add	r3, r0
 8003672:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800367c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003680:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        sens_cfg[2].cfg.tap.tap_peak_thres = tap_param_set[context_sel][index++];
 8003684:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003688:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003692:	1c59      	adds	r1, r3, #1
 8003694:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003698:	4618      	mov	r0, r3
 800369a:	4933      	ldr	r1, [pc, #204]	@ (8003768 <bmi323_context_switch_selection+0x3ec>)
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4403      	add	r3, r0
 80036a6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80036aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80036ae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80036b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        sens_cfg[2].cfg.tap.max_gest_dur = (uint8_t)tap_param_set[context_sel][index++];
 80036b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80036ba:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80036c4:	1c59      	adds	r1, r3, #1
 80036c6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80036ca:	4618      	mov	r0, r3
 80036cc:	4926      	ldr	r1, [pc, #152]	@ (8003768 <bmi323_context_switch_selection+0x3ec>)
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4403      	add	r3, r0
 80036d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80036e2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80036e6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        sens_cfg[2].cfg.tap.max_dur_between_peaks = (uint8_t)tap_param_set[context_sel][index++];
 80036ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80036ee:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80036f2:	781a      	ldrb	r2, [r3, #0]
 80036f4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80036f8:	1c59      	adds	r1, r3, #1
 80036fa:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80036fe:	4618      	mov	r0, r3
 8003700:	4919      	ldr	r1, [pc, #100]	@ (8003768 <bmi323_context_switch_selection+0x3ec>)
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4403      	add	r3, r0
 800370c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003716:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800371a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
        sens_cfg[2].cfg.tap.tap_shock_settling_dur = (uint8_t)tap_param_set[context_sel][index++];
 800371e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003722:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800372c:	1c59      	adds	r1, r3, #1
 800372e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003732:	4618      	mov	r0, r3
 8003734:	490c      	ldr	r1, [pc, #48]	@ (8003768 <bmi323_context_switch_selection+0x3ec>)
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4403      	add	r3, r0
 8003740:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800374a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800374e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
        sens_cfg[2].cfg.tap.min_quite_dur_between_taps = (uint8_t)tap_param_set[context_sel][index++];
 8003752:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003756:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	e006      	b.n	800376c <bmi323_context_switch_selection+0x3f0>
 800375e:	bf00      	nop
 8003760:	24000000 	.word	0x24000000
 8003764:	24000020 	.word	0x24000020
 8003768:	24000040 	.word	0x24000040
 800376c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003770:	1c59      	adds	r1, r3, #1
 8003772:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003776:	4618      	mov	r0, r3
 8003778:	49e9      	ldr	r1, [pc, #932]	@ (8003b20 <bmi323_context_switch_selection+0x7a4>)
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4403      	add	r3, r0
 8003784:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800378e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003792:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
        sens_cfg[2].cfg.tap.quite_time_after_gest = (uint8_t)tap_param_set[context_sel][index++];
 8003796:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800379a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80037a4:	1c59      	adds	r1, r3, #1
 80037a6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80037aa:	4618      	mov	r0, r3
 80037ac:	49dc      	ldr	r1, [pc, #880]	@ (8003b20 <bmi323_context_switch_selection+0x7a4>)
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4403      	add	r3, r0
 80037b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80037c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80037c6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

        /* Set step counter configuration */
        index = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[3].type = BMI323_STEP_COUNTER;
 80037d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80037d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80037d8:	2205      	movs	r2, #5
 80037da:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
        sens_cfg[3].cfg.step_counter.watermark_level = step_counter_param_set[context_sel][index++];
 80037de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80037e2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80037ec:	1c59      	adds	r1, r3, #1
 80037ee:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80037f2:	4618      	mov	r0, r3
 80037f4:	49cb      	ldr	r1, [pc, #812]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 80037f6:	2316      	movs	r3, #22
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	4403      	add	r3, r0
 80037fe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003802:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003806:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800380a:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
        sens_cfg[3].cfg.step_counter.reset_counter = step_counter_param_set[context_sel][index++];
 800380e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003812:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003816:	781a      	ldrb	r2, [r3, #0]
 8003818:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800381c:	1c59      	adds	r1, r3, #1
 800381e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003822:	4618      	mov	r0, r3
 8003824:	49bf      	ldr	r1, [pc, #764]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003826:	2316      	movs	r3, #22
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	4403      	add	r3, r0
 800382e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003832:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003836:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800383a:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        sens_cfg[3].cfg.step_counter.env_min_dist_up = step_counter_param_set[context_sel][index++];
 800383e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003842:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800384c:	1c59      	adds	r1, r3, #1
 800384e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003852:	4618      	mov	r0, r3
 8003854:	49b3      	ldr	r1, [pc, #716]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003856:	2316      	movs	r3, #22
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	4403      	add	r3, r0
 800385e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003862:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003866:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800386a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        sens_cfg[3].cfg.step_counter.env_coef_up = step_counter_param_set[context_sel][index++];
 800386e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003872:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800387c:	1c59      	adds	r1, r3, #1
 800387e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003882:	4618      	mov	r0, r3
 8003884:	49a7      	ldr	r1, [pc, #668]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003886:	2316      	movs	r3, #22
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	4403      	add	r3, r0
 800388e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003892:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003896:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800389a:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        sens_cfg[3].cfg.step_counter.env_min_dist_down = step_counter_param_set[context_sel][index++];
 800389e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80038a2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80038ac:	1c59      	adds	r1, r3, #1
 80038ae:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80038b2:	4618      	mov	r0, r3
 80038b4:	499b      	ldr	r1, [pc, #620]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 80038b6:	2316      	movs	r3, #22
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	4403      	add	r3, r0
 80038be:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80038c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80038c6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80038ca:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        sens_cfg[3].cfg.step_counter.env_coef_down = step_counter_param_set[context_sel][index++];
 80038ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80038d2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80038dc:	1c59      	adds	r1, r3, #1
 80038de:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80038e2:	4618      	mov	r0, r3
 80038e4:	498f      	ldr	r1, [pc, #572]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 80038e6:	2316      	movs	r3, #22
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	4403      	add	r3, r0
 80038ee:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80038f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80038f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80038fa:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        sens_cfg[3].cfg.step_counter.mean_val_decay = step_counter_param_set[context_sel][index++];
 80038fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003902:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800390c:	1c59      	adds	r1, r3, #1
 800390e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003912:	4618      	mov	r0, r3
 8003914:	4983      	ldr	r1, [pc, #524]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003916:	2316      	movs	r3, #22
 8003918:	fb02 f303 	mul.w	r3, r2, r3
 800391c:	4403      	add	r3, r0
 800391e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003922:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003926:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800392a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        sens_cfg[3].cfg.step_counter.mean_step_dur = step_counter_param_set[context_sel][index++];
 800392e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003932:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003936:	781a      	ldrb	r2, [r3, #0]
 8003938:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800393c:	1c59      	adds	r1, r3, #1
 800393e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003942:	4618      	mov	r0, r3
 8003944:	4977      	ldr	r1, [pc, #476]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003946:	2316      	movs	r3, #22
 8003948:	fb02 f303 	mul.w	r3, r2, r3
 800394c:	4403      	add	r3, r0
 800394e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003952:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003956:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800395a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
        sens_cfg[3].cfg.step_counter.step_buffer_size = step_counter_param_set[context_sel][index++];
 800395e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003962:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800396c:	1c59      	adds	r1, r3, #1
 800396e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003972:	4618      	mov	r0, r3
 8003974:	496b      	ldr	r1, [pc, #428]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003976:	2316      	movs	r3, #22
 8003978:	fb02 f303 	mul.w	r3, r2, r3
 800397c:	4403      	add	r3, r0
 800397e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003982:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003986:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800398a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
        sens_cfg[3].cfg.step_counter.filter_cascade_enabled = step_counter_param_set[context_sel][index++];
 800398e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003992:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800399c:	1c59      	adds	r1, r3, #1
 800399e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80039a2:	4618      	mov	r0, r3
 80039a4:	495f      	ldr	r1, [pc, #380]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 80039a6:	2316      	movs	r3, #22
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	4403      	add	r3, r0
 80039ae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80039b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80039b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039ba:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        sens_cfg[3].cfg.step_counter.step_counter_increment = step_counter_param_set[context_sel][index++];
 80039be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80039c2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80039cc:	1c59      	adds	r1, r3, #1
 80039ce:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80039d2:	4618      	mov	r0, r3
 80039d4:	4953      	ldr	r1, [pc, #332]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 80039d6:	2316      	movs	r3, #22
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
 80039dc:	4403      	add	r3, r0
 80039de:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80039e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80039e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039ea:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        sens_cfg[3].cfg.step_counter.peak_duration_min_walking = step_counter_param_set[context_sel][index++];
 80039ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80039f2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80039fc:	1c59      	adds	r1, r3, #1
 80039fe:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003a02:	4618      	mov	r0, r3
 8003a04:	4947      	ldr	r1, [pc, #284]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003a06:	2316      	movs	r3, #22
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	4403      	add	r3, r0
 8003a0e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003a12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003a16:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003a1a:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
        sens_cfg[3].cfg.step_counter.peak_duration_min_running = step_counter_param_set[context_sel][index++];
 8003a1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003a22:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003a2c:	1c59      	adds	r1, r3, #1
 8003a2e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003a32:	4618      	mov	r0, r3
 8003a34:	493b      	ldr	r1, [pc, #236]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003a36:	2316      	movs	r3, #22
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
 8003a3c:	4403      	add	r3, r0
 8003a3e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003a42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003a46:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003a4a:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
        sens_cfg[3].cfg.step_counter.activity_detection_factor = step_counter_param_set[context_sel][index++];
 8003a4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003a52:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003a5c:	1c59      	adds	r1, r3, #1
 8003a5e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003a62:	4618      	mov	r0, r3
 8003a64:	492f      	ldr	r1, [pc, #188]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003a66:	2316      	movs	r3, #22
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	4403      	add	r3, r0
 8003a6e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003a72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003a76:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003a7a:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
        sens_cfg[3].cfg.step_counter.activity_detection_thres = step_counter_param_set[context_sel][index++];
 8003a7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003a82:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003a8c:	1c59      	adds	r1, r3, #1
 8003a8e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003a92:	4618      	mov	r0, r3
 8003a94:	4923      	ldr	r1, [pc, #140]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003a96:	2316      	movs	r3, #22
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	4403      	add	r3, r0
 8003a9e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003aa2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003aa6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003aaa:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
        sens_cfg[3].cfg.step_counter.step_duration_max = step_counter_param_set[context_sel][index++];
 8003aae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ab2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003abc:	1c59      	adds	r1, r3, #1
 8003abe:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	4917      	ldr	r1, [pc, #92]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003ac6:	2316      	movs	r3, #22
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	4403      	add	r3, r0
 8003ace:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003ad2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ad6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ada:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
        sens_cfg[3].cfg.step_counter.step_duration_window = step_counter_param_set[context_sel][index++];
 8003ade:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ae2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003aec:	1c59      	adds	r1, r3, #1
 8003aee:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003af2:	4618      	mov	r0, r3
 8003af4:	490b      	ldr	r1, [pc, #44]	@ (8003b24 <bmi323_context_switch_selection+0x7a8>)
 8003af6:	2316      	movs	r3, #22
 8003af8:	fb02 f303 	mul.w	r3, r2, r3
 8003afc:	4403      	add	r3, r0
 8003afe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003b02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003b06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b0a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        sens_cfg[3].cfg.step_counter.step_duration_pp_enabled = step_counter_param_set[context_sel][index++];
 8003b0e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003b12:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003b1c:	1c59      	adds	r1, r3, #1
 8003b1e:	e003      	b.n	8003b28 <bmi323_context_switch_selection+0x7ac>
 8003b20:	24000040 	.word	0x24000040
 8003b24:	2400007c 	.word	0x2400007c
 8003b28:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	49e1      	ldr	r1, [pc, #900]	@ (8003eb4 <bmi323_context_switch_selection+0xb38>)
 8003b30:	2316      	movs	r3, #22
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	4403      	add	r3, r0
 8003b38:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003b3c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003b40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b44:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        sens_cfg[3].cfg.step_counter.step_duration_thres = step_counter_param_set[context_sel][index++];
 8003b48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003b4c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003b56:	1c59      	adds	r1, r3, #1
 8003b58:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	49d5      	ldr	r1, [pc, #852]	@ (8003eb4 <bmi323_context_switch_selection+0xb38>)
 8003b60:	2316      	movs	r3, #22
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	4403      	add	r3, r0
 8003b68:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003b6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003b70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b74:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
        sens_cfg[3].cfg.step_counter.mean_crossing_pp_enabled = step_counter_param_set[context_sel][index++];
 8003b78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003b7c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003b80:	781a      	ldrb	r2, [r3, #0]
 8003b82:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003b86:	1c59      	adds	r1, r3, #1
 8003b88:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	49c9      	ldr	r1, [pc, #804]	@ (8003eb4 <bmi323_context_switch_selection+0xb38>)
 8003b90:	2316      	movs	r3, #22
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	4403      	add	r3, r0
 8003b98:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003b9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ba0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ba4:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        sens_cfg[3].cfg.step_counter.mcr_threshold = step_counter_param_set[context_sel][index++];
 8003ba8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003bac:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003bb6:	1c59      	adds	r1, r3, #1
 8003bb8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	49bd      	ldr	r1, [pc, #756]	@ (8003eb4 <bmi323_context_switch_selection+0xb38>)
 8003bc0:	2316      	movs	r3, #22
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	4403      	add	r3, r0
 8003bc8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003bcc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003bd0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003bd4:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
        sens_cfg[3].cfg.step_counter.sc_12_res = step_counter_param_set[context_sel][index++];
 8003bd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003bdc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003be6:	1c59      	adds	r1, r3, #1
 8003be8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003bec:	4618      	mov	r0, r3
 8003bee:	49b1      	ldr	r1, [pc, #708]	@ (8003eb4 <bmi323_context_switch_selection+0xb38>)
 8003bf0:	2316      	movs	r3, #22
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	4403      	add	r3, r0
 8003bf8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003bfc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c00:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c04:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6

        /* Set significant motion configuration */
        index = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[4].type = BMI323_SIG_MOTION;
 8003c0e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c12:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
        sens_cfg[4].cfg.sig_motion.block_size = sig_motion_param_set[context_sel][index++];
 8003c1c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c20:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003c2a:	1c59      	adds	r1, r3, #1
 8003c2c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003c30:	4618      	mov	r0, r3
 8003c32:	49a1      	ldr	r1, [pc, #644]	@ (8003eb8 <bmi323_context_switch_selection+0xb3c>)
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	4403      	add	r3, r0
 8003c3c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003c40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c48:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        sens_cfg[4].cfg.sig_motion.peak_2_peak_min = sig_motion_param_set[context_sel][index++];
 8003c4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c50:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003c5a:	1c59      	adds	r1, r3, #1
 8003c5c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003c60:	4618      	mov	r0, r3
 8003c62:	4995      	ldr	r1, [pc, #596]	@ (8003eb8 <bmi323_context_switch_selection+0xb3c>)
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	4403      	add	r3, r0
 8003c6c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003c70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c74:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c78:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
        sens_cfg[4].cfg.sig_motion.mcr_min = (uint8_t)sig_motion_param_set[context_sel][index++];
 8003c7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c80:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003c8a:	1c59      	adds	r1, r3, #1
 8003c8c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003c90:	4618      	mov	r0, r3
 8003c92:	4989      	ldr	r1, [pc, #548]	@ (8003eb8 <bmi323_context_switch_selection+0xb3c>)
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	4403      	add	r3, r0
 8003c9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ca6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003caa:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
        sens_cfg[4].cfg.sig_motion.peak_2_peak_max = sig_motion_param_set[context_sel][index++];
 8003cae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003cb2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003cb6:	781a      	ldrb	r2, [r3, #0]
 8003cb8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003cbc:	1c59      	adds	r1, r3, #1
 8003cbe:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	497c      	ldr	r1, [pc, #496]	@ (8003eb8 <bmi323_context_switch_selection+0xb3c>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	4403      	add	r3, r0
 8003cce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8003cd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003cd6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003cda:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        sens_cfg[4].cfg.sig_motion.mcr_max = (uint8_t)sig_motion_param_set[context_sel][index++];
 8003cde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ce2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003cec:	1c59      	adds	r1, r3, #1
 8003cee:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	4970      	ldr	r1, [pc, #448]	@ (8003eb8 <bmi323_context_switch_selection+0xb3c>)
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4403      	add	r3, r0
 8003cfe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003d08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d0c:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

        /* Set orientation configuration */
        index = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[5].type = BMI323_ORIENTATION;
 8003d16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003d1a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d1e:	2207      	movs	r2, #7
 8003d20:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        sens_cfg[5].cfg.orientation.ud_en = (uint8_t)orientation_param_set[context_sel][index++];
 8003d24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003d28:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003d2c:	781a      	ldrb	r2, [r3, #0]
 8003d2e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003d38:	4618      	mov	r0, r3
 8003d3a:	4960      	ldr	r1, [pc, #384]	@ (8003ebc <bmi323_context_switch_selection+0xb40>)
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	4403      	add	r3, r0
 8003d44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003d4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d52:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        sens_cfg[5].cfg.orientation.mode = (uint8_t)orientation_param_set[context_sel][index++];
 8003d56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003d5a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003d64:	1c59      	adds	r1, r3, #1
 8003d66:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	4953      	ldr	r1, [pc, #332]	@ (8003ebc <bmi323_context_switch_selection+0xb40>)
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	4403      	add	r3, r0
 8003d76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003d80:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d84:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
        sens_cfg[5].cfg.orientation.blocking = (uint8_t)orientation_param_set[context_sel][index++];
 8003d88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003d8c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003d96:	1c59      	adds	r1, r3, #1
 8003d98:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	4947      	ldr	r1, [pc, #284]	@ (8003ebc <bmi323_context_switch_selection+0xb40>)
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	4403      	add	r3, r0
 8003da8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003db2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003db6:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        sens_cfg[5].cfg.orientation.theta = (uint8_t)orientation_param_set[context_sel][index++];
 8003dba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003dbe:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003dc8:	1c59      	adds	r1, r3, #1
 8003dca:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003dce:	4618      	mov	r0, r3
 8003dd0:	493a      	ldr	r1, [pc, #232]	@ (8003ebc <bmi323_context_switch_selection+0xb40>)
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	4403      	add	r3, r0
 8003dda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003de4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003de8:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        sens_cfg[5].cfg.orientation.hold_time = (uint8_t)orientation_param_set[context_sel][index++];
 8003dec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003df0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003dfa:	1c59      	adds	r1, r3, #1
 8003dfc:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003e00:	4618      	mov	r0, r3
 8003e02:	492e      	ldr	r1, [pc, #184]	@ (8003ebc <bmi323_context_switch_selection+0xb40>)
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	4403      	add	r3, r0
 8003e0c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e16:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e1a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        sens_cfg[5].cfg.orientation.slope_thres = (uint8_t)orientation_param_set[context_sel][index++];
 8003e1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e22:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003e2c:	1c59      	adds	r1, r3, #1
 8003e2e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003e32:	4618      	mov	r0, r3
 8003e34:	4921      	ldr	r1, [pc, #132]	@ (8003ebc <bmi323_context_switch_selection+0xb40>)
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	4403      	add	r3, r0
 8003e3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e48:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e4c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
        sens_cfg[5].cfg.orientation.hysteresis = (uint8_t)orientation_param_set[context_sel][index++];
 8003e50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e54:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8003e64:	4618      	mov	r0, r3
 8003e66:	4915      	ldr	r1, [pc, #84]	@ (8003ebc <bmi323_context_switch_selection+0xb40>)
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	4403      	add	r3, r0
 8003e70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e7a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e7e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed

        /* Set the context configurations */
        rslt = bmi323_set_sensor_config(sens_cfg, BMI323_MAX_FEATURE, dev);
 8003e82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e86:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e8a:	f107 0008 	add.w	r0, r7, #8
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2106      	movs	r1, #6
 8003e92:	f7ff fa5d 	bl	8003350 <bmi323_set_sensor_config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8003e9c:	e002      	b.n	8003ea4 <bmi323_context_switch_selection+0xb28>
    }
    else
    {
        rslt = BMI323_E_INVALID_CONTEXT_SEL;
 8003e9e:	23f3      	movs	r3, #243	@ 0xf3
 8003ea0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    }

    return rslt;
 8003ea4:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2400007c 	.word	0x2400007c
 8003eb8:	24000100 	.word	0x24000100
 8003ebc:	24000120 	.word	0x24000120

08003ec0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <null_ptr_check+0x26>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <null_ptr_check+0x26>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <null_ptr_check+0x26>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <null_ptr_check+0x2c>
    {
        rslt = BMI323_E_NULL_PTR;
 8003ee6:	23ff      	movs	r3, #255	@ 0xff
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	e001      	b.n	8003ef0 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI323_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <bmi323_platform_read>:
  * @param  length       number of consecutive register to read
  * @param  intf_ptr     interface pointer
  * @retval              interface status (MANDATORY: return 0 -> no Error)
  *
  */
int8_t bmi323_platform_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;

    status = HAL_SPI_Transmit((SPI_HandleTypeDef *)intf_ptr, &reg_addr, 1, 100);
 8003f10:	f107 010f 	add.w	r1, r7, #15
 8003f14:	2364      	movs	r3, #100	@ 0x64
 8003f16:	2201      	movs	r2, #1
 8003f18:	6838      	ldr	r0, [r7, #0]
 8003f1a:	f00c fbf5 	bl	8010708 <HAL_SPI_Transmit>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return -1;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <bmi323_platform_read+0x2e>
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	e00f      	b.n	8003f4e <bmi323_platform_read+0x4e>

    status = HAL_SPI_Receive((SPI_HandleTypeDef *)intf_ptr, reg_data, length, 100);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	2364      	movs	r3, #100	@ 0x64
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	6838      	ldr	r0, [r7, #0]
 8003f38:	f00c fdd4 	bl	8010ae4 <HAL_SPI_Receive>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK) ? 0 : -1;
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <bmi323_platform_read+0x4a>
 8003f46:	2300      	movs	r3, #0
 8003f48:	e001      	b.n	8003f4e <bmi323_platform_read+0x4e>
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <bmi323_platform_write>:
  * @param  length       number of consecutive register to read
  * @param  intf_ptr     interface pointer
  * @retval              interface status (MANDATORY: return 0 -> no Error)
  *
  */
int8_t bmi323_platform_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 8003f56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f5a:	b089      	sub	sp, #36	@ 0x24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4603      	mov	r3, r0
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	466b      	mov	r3, sp
 8003f6a:	461e      	mov	r6, r3
    uint8_t tx_buffer[length + 1];
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	1c59      	adds	r1, r3, #1
 8003f70:	460b      	mov	r3, r1
 8003f72:	3b01      	subs	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	2300      	movs	r3, #0
 8003f78:	4688      	mov	r8, r1
 8003f7a:	4699      	mov	r9, r3
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f90:	2300      	movs	r3, #0
 8003f92:	460c      	mov	r4, r1
 8003f94:	461d      	mov	r5, r3
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	00eb      	lsls	r3, r5, #3
 8003fa0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa4:	00e2      	lsls	r2, r4, #3
 8003fa6:	1dcb      	adds	r3, r1, #7
 8003fa8:	08db      	lsrs	r3, r3, #3
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	ebad 0d03 	sub.w	sp, sp, r3
 8003fb0:	466b      	mov	r3, sp
 8003fb2:	3300      	adds	r3, #0
 8003fb4:	61bb      	str	r3, [r7, #24]
    tx_buffer[0] = reg_addr;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	701a      	strb	r2, [r3, #0]
    memcpy(&tx_buffer[1], reg_data, length);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f013 fe44 	bl	8017c52 <memcpy>

    HAL_StatusTypeDef status = HAL_SPI_Transmit((SPI_HandleTypeDef *)intf_ptr, tx_buffer, length + 1, 100);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	2364      	movs	r3, #100	@ 0x64
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	6838      	ldr	r0, [r7, #0]
 8003fd8:	f00c fb96 	bl	8010708 <HAL_SPI_Transmit>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK) ? 0 : -1;
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <bmi323_platform_write+0x94>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e001      	b.n	8003fee <bmi323_platform_write+0x98>
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	46b5      	mov	sp, r6
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3724      	adds	r7, #36	@ 0x24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003ffc <BMI323_Init>:
  *
  * @param  bmi323_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
bool BMI323_Init(){
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0

	//Device interface selection and assignment
    bmi323.intf_ptr = &hspi1;
 8004002:	4b0e      	ldr	r3, [pc, #56]	@ (800403c <BMI323_Init+0x40>)
 8004004:	4a0e      	ldr	r2, [pc, #56]	@ (8004040 <BMI323_Init+0x44>)
 8004006:	605a      	str	r2, [r3, #4]
    bmi323.intf = BMI3_SPI_INTF;
 8004008:	4b0c      	ldr	r3, [pc, #48]	@ (800403c <BMI323_Init+0x40>)
 800400a:	2200      	movs	r2, #0
 800400c:	725a      	strb	r2, [r3, #9]

	//Assign Read/Write functions to the device
    bmi323.read = bmi323_platform_read;
 800400e:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <BMI323_Init+0x40>)
 8004010:	4a0c      	ldr	r2, [pc, #48]	@ (8004044 <BMI323_Init+0x48>)
 8004012:	611a      	str	r2, [r3, #16]
    bmi323.write = bmi323_platform_write;
 8004014:	4b09      	ldr	r3, [pc, #36]	@ (800403c <BMI323_Init+0x40>)
 8004016:	4a0c      	ldr	r2, [pc, #48]	@ (8004048 <BMI323_Init+0x4c>)
 8004018:	615a      	str	r2, [r3, #20]

    int8_t bmi323_status = bmi323_init(&bmi323);
 800401a:	4808      	ldr	r0, [pc, #32]	@ (800403c <BMI323_Init+0x40>)
 800401c:	f7ff f968 	bl	80032f0 <bmi323_init>
 8004020:	4603      	mov	r3, r0
 8004022:	71fb      	strb	r3, [r7, #7]


    return !bmi323_status;
 8004024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	240003d8 	.word	0x240003d8
 8004040:	240008d4 	.word	0x240008d4
 8004044:	08003f01 	.word	0x08003f01
 8004048:	08003f57 	.word	0x08003f57

0800404c <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 800404c:	b590      	push	{r4, r7, lr}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8004054:	23ff      	movs	r3, #255	@ 0xff
 8004056:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8004058:	2300      	movs	r3, #0
 800405a:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 800405c:	2300      	movs	r3, #0
 800405e:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8004060:	2300      	movs	r3, #0
 8004062:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8004064:	4a58      	ldr	r2, [pc, #352]	@ (80041c8 <bno055_init+0x17c>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800406a:	4b57      	ldr	r3, [pc, #348]	@ (80041c8 <bno055_init+0x17c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68dc      	ldr	r4, [r3, #12]
 8004070:	4b55      	ldr	r3, [pc, #340]	@ (80041c8 <bno055_init+0x17c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	7a58      	ldrb	r0, [r3, #9]
 8004076:	f107 020d 	add.w	r2, r7, #13
 800407a:	2301      	movs	r3, #1
 800407c:	2107      	movs	r1, #7
 800407e:	47a0      	blx	r4
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8004084:	4b50      	ldr	r3, [pc, #320]	@ (80041c8 <bno055_init+0x17c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691c      	ldr	r4, [r3, #16]
 800408a:	4b4f      	ldr	r3, [pc, #316]	@ (80041c8 <bno055_init+0x17c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	7a58      	ldrb	r0, [r3, #9]
 8004090:	f107 020e 	add.w	r2, r7, #14
 8004094:	2301      	movs	r3, #1
 8004096:	2100      	movs	r1, #0
 8004098:	47a0      	blx	r4
 800409a:	4603      	mov	r3, r0
 800409c:	b2da      	uxtb	r2, r3
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	4413      	add	r3, r2
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 80040a6:	4b48      	ldr	r3, [pc, #288]	@ (80041c8 <bno055_init+0x17c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	7bba      	ldrb	r2, [r7, #14]
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80040ae:	4b46      	ldr	r3, [pc, #280]	@ (80041c8 <bno055_init+0x17c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691c      	ldr	r4, [r3, #16]
 80040b4:	4b44      	ldr	r3, [pc, #272]	@ (80041c8 <bno055_init+0x17c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	7a58      	ldrb	r0, [r3, #9]
 80040ba:	f107 020e 	add.w	r2, r7, #14
 80040be:	2301      	movs	r3, #1
 80040c0:	2101      	movs	r1, #1
 80040c2:	47a0      	blx	r4
 80040c4:	4603      	mov	r3, r0
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	4413      	add	r3, r2
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 80040d0:	4b3d      	ldr	r3, [pc, #244]	@ (80041c8 <bno055_init+0x17c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	7bba      	ldrb	r2, [r7, #14]
 80040d6:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80040d8:	4b3b      	ldr	r3, [pc, #236]	@ (80041c8 <bno055_init+0x17c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691c      	ldr	r4, [r3, #16]
 80040de:	4b3a      	ldr	r3, [pc, #232]	@ (80041c8 <bno055_init+0x17c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	7a58      	ldrb	r0, [r3, #9]
 80040e4:	f107 020e 	add.w	r2, r7, #14
 80040e8:	2301      	movs	r3, #1
 80040ea:	2102      	movs	r1, #2
 80040ec:	47a0      	blx	r4
 80040ee:	4603      	mov	r3, r0
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	4413      	add	r3, r2
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 80040fa:	4b33      	ldr	r3, [pc, #204]	@ (80041c8 <bno055_init+0x17c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	7bba      	ldrb	r2, [r7, #14]
 8004100:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8004102:	4b31      	ldr	r3, [pc, #196]	@ (80041c8 <bno055_init+0x17c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691c      	ldr	r4, [r3, #16]
 8004108:	4b2f      	ldr	r3, [pc, #188]	@ (80041c8 <bno055_init+0x17c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	7a58      	ldrb	r0, [r3, #9]
 800410e:	f107 020e 	add.w	r2, r7, #14
 8004112:	2301      	movs	r3, #1
 8004114:	2103      	movs	r1, #3
 8004116:	47a0      	blx	r4
 8004118:	4603      	mov	r3, r0
 800411a:	b2da      	uxtb	r2, r3
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	4413      	add	r3, r2
 8004120:	b2db      	uxtb	r3, r3
 8004122:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8004124:	4b28      	ldr	r3, [pc, #160]	@ (80041c8 <bno055_init+0x17c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	7bba      	ldrb	r2, [r7, #14]
 800412a:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800412c:	4b26      	ldr	r3, [pc, #152]	@ (80041c8 <bno055_init+0x17c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691c      	ldr	r4, [r3, #16]
 8004132:	4b25      	ldr	r3, [pc, #148]	@ (80041c8 <bno055_init+0x17c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	7a58      	ldrb	r0, [r3, #9]
 8004138:	f107 020e 	add.w	r2, r7, #14
 800413c:	2301      	movs	r3, #1
 800413e:	2106      	movs	r1, #6
 8004140:	47a0      	blx	r4
 8004142:	4603      	mov	r3, r0
 8004144:	b2da      	uxtb	r2, r3
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	4413      	add	r3, r2
 800414a:	b2db      	uxtb	r3, r3
 800414c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 800414e:	4b1e      	ldr	r3, [pc, #120]	@ (80041c8 <bno055_init+0x17c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	7bba      	ldrb	r2, [r7, #14]
 8004154:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8004156:	4b1c      	ldr	r3, [pc, #112]	@ (80041c8 <bno055_init+0x17c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691c      	ldr	r4, [r3, #16]
 800415c:	4b1a      	ldr	r3, [pc, #104]	@ (80041c8 <bno055_init+0x17c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	7a58      	ldrb	r0, [r3, #9]
 8004162:	f107 0208 	add.w	r2, r7, #8
 8004166:	2302      	movs	r3, #2
 8004168:	2104      	movs	r1, #4
 800416a:	47a0      	blx	r4
 800416c:	4603      	mov	r3, r0
 800416e:	b2da      	uxtb	r2, r3
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	4413      	add	r3, r2
 8004174:	b2db      	uxtb	r3, r3
 8004176:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8004178:	7a3b      	ldrb	r3, [r7, #8]
 800417a:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 800417c:	7a7b      	ldrb	r3, [r7, #9]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	b29a      	uxth	r2, r3
 8004182:	7a3b      	ldrb	r3, [r7, #8]
 8004184:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 8004186:	4b10      	ldr	r3, [pc, #64]	@ (80041c8 <bno055_init+0x17c>)
 8004188:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 800418a:	430a      	orrs	r2, r1
 800418c:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 800418e:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8004190:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <bno055_init+0x17c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691c      	ldr	r4, [r3, #16]
 8004196:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <bno055_init+0x17c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	7a58      	ldrb	r0, [r3, #9]
 800419c:	f107 020e 	add.w	r2, r7, #14
 80041a0:	2301      	movs	r3, #1
 80041a2:	2107      	movs	r1, #7
 80041a4:	47a0      	blx	r4
 80041a6:	4603      	mov	r3, r0
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	4413      	add	r3, r2
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 80041b2:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <bno055_init+0x17c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	7bba      	ldrb	r2, [r7, #14]
 80041b8:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 80041ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd90      	pop	{r4, r7, pc}
 80041c6:	bf00      	nop
 80041c8:	240003f8 	.word	0x240003f8

080041cc <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
s8 bno055_platform_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af04      	add	r7, sp, #16
 80041d2:	603a      	str	r2, [r7, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]
 80041da:	460b      	mov	r3, r1
 80041dc:	71bb      	strb	r3, [r7, #6]
 80041de:	4613      	mov	r3, r2
 80041e0:	717b      	strb	r3, [r7, #5]
  // Perform the I2C read operation using HAL_I2C_Mem_Read
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	b299      	uxth	r1, r3
 80041e6:	79bb      	ldrb	r3, [r7, #6]
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	797b      	ldrb	r3, [r7, #5]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2064      	movs	r0, #100	@ 0x64
 80041f0:	9002      	str	r0, [sp, #8]
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2301      	movs	r3, #1
 80041fa:	4808      	ldr	r0, [pc, #32]	@ (800421c <bno055_platform_read+0x50>)
 80041fc:	f005 fdc8 	bl	8009d90 <HAL_I2C_Mem_Read>
 8004200:	4603      	mov	r3, r0
 8004202:	73fb      	strb	r3, [r7, #15]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <bno055_platform_read+0x42>
 800420a:	2300      	movs	r3, #0
 800420c:	e001      	b.n	8004212 <bno055_platform_read+0x46>
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	240007b0 	.word	0x240007b0

08004220 <bno055_platform_write>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
s8 bno055_platform_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af04      	add	r7, sp, #16
 8004226:	603a      	str	r2, [r7, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
 800422e:	460b      	mov	r3, r1
 8004230:	71bb      	strb	r3, [r7, #6]
 8004232:	4613      	mov	r3, r2
 8004234:	717b      	strb	r3, [r7, #5]
  // Perform the I2C write operation using HAL_I2C_Mem_Write
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c2, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	b299      	uxth	r1, r3
 800423a:	79bb      	ldrb	r3, [r7, #6]
 800423c:	b29a      	uxth	r2, r3
 800423e:	797b      	ldrb	r3, [r7, #5]
 8004240:	b29b      	uxth	r3, r3
 8004242:	2064      	movs	r0, #100	@ 0x64
 8004244:	9002      	str	r0, [sp, #8]
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	2301      	movs	r3, #1
 800424e:	4808      	ldr	r0, [pc, #32]	@ (8004270 <bno055_platform_write+0x50>)
 8004250:	f005 fc8a 	bl	8009b68 <HAL_I2C_Mem_Write>
 8004254:	4603      	mov	r3, r0
 8004256:	73fb      	strb	r3, [r7, #15]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <bno055_platform_write+0x42>
 800425e:	2300      	movs	r3, #0
 8004260:	e001      	b.n	8004266 <bno055_platform_write+0x46>
 8004262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	240007b0 	.word	0x240007b0

08004274 <bno055_delay_msec>:
  *
  * @retval         void
  *
  */
void bno055_delay_msec(u32 msecs)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
    HAL_Delay(msecs);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f002 ff6b 	bl	8007158 <HAL_Delay>
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
bool BNO055_Init(){
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 8004292:	4b0e      	ldr	r3, [pc, #56]	@ (80042cc <BNO055_Init+0x40>)
 8004294:	4a0e      	ldr	r2, [pc, #56]	@ (80042d0 <BNO055_Init+0x44>)
 8004296:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <BNO055_Init+0x40>)
 800429a:	4a0e      	ldr	r2, [pc, #56]	@ (80042d4 <BNO055_Init+0x48>)
 800429c:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = bno055_delay_msec;
 800429e:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <BNO055_Init+0x40>)
 80042a0:	4a0d      	ldr	r2, [pc, #52]	@ (80042d8 <BNO055_Init+0x4c>)
 80042a2:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 80042a4:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <BNO055_Init+0x40>)
 80042a6:	2228      	movs	r2, #40	@ 0x28
 80042a8:	725a      	strb	r2, [r3, #9]

	int8_t bno055_status = bno055_init(&bno055_dev);
 80042aa:	4808      	ldr	r0, [pc, #32]	@ (80042cc <BNO055_Init+0x40>)
 80042ac:	f7ff fece 	bl	800404c <bno055_init>
 80042b0:	4603      	mov	r3, r0
 80042b2:	71fb      	strb	r3, [r7, #7]


	return !bno055_status;
 80042b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	240003fc 	.word	0x240003fc
 80042d0:	08004221 	.word	0x08004221
 80042d4:	080041cd 	.word	0x080041cd
 80042d8:	08004275 	.word	0x08004275

080042dc <GPS_Init>:
 
  return decDeg;
}
//##################################################################################################################
bool GPS_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 80042e2:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <GPS_Init+0x30>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
	HAL_StatusTypeDef status = HAL_UART_Receive_IT(&_GPS_UART,&GPS.rxTmp,1);
 80042ea:	2201      	movs	r2, #1
 80042ec:	4908      	ldr	r1, [pc, #32]	@ (8004310 <GPS_Init+0x34>)
 80042ee:	4809      	ldr	r0, [pc, #36]	@ (8004314 <GPS_Init+0x38>)
 80042f0:	f00d ffac 	bl	801224c <HAL_UART_Receive_IT>
 80042f4:	4603      	mov	r3, r0
 80042f6:	71fb      	strb	r3, [r7, #7]

	return (status == HAL_OK) ? 1 : 0;
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	24000418 	.word	0x24000418
 8004310:	2400061a 	.word	0x2400061a
 8004314:	24000e88 	.word	0x24000e88

08004318 <lis2mdltr_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdltr_platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	@ 0x28
 800431c:	af04      	add	r7, sp, #16
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	461a      	mov	r2, r3
 8004324:	460b      	mov	r3, r1
 8004326:	72fb      	strb	r3, [r7, #11]
 8004328:	4613      	mov	r3, r2
 800432a:	813b      	strh	r3, [r7, #8]
  // Perform the I2C read operation using HAL_I2C_Mem_Read
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)handle, LIS2MDL_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 800432c:	7afb      	ldrb	r3, [r7, #11]
 800432e:	b29a      	uxth	r2, r3
 8004330:	2364      	movs	r3, #100	@ 0x64
 8004332:	9302      	str	r3, [sp, #8]
 8004334:	893b      	ldrh	r3, [r7, #8]
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2301      	movs	r3, #1
 800433e:	213d      	movs	r1, #61	@ 0x3d
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f005 fd25 	bl	8009d90 <HAL_I2C_Mem_Read>
 8004346:	4603      	mov	r3, r0
 8004348:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <lis2mdltr_platform_read+0x3c>
 8004350:	2300      	movs	r3, #0
 8004352:	e001      	b.n	8004358 <lis2mdltr_platform_read+0x40>
 8004354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <lis2mdltr_platform_write>:
  *
  */


int32_t lis2mdltr_platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	@ 0x28
 8004364:	af04      	add	r7, sp, #16
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	461a      	mov	r2, r3
 800436c:	460b      	mov	r3, r1
 800436e:	72fb      	strb	r3, [r7, #11]
 8004370:	4613      	mov	r3, r2
 8004372:	813b      	strh	r3, [r7, #8]
  // Perform the I2C write operation using HAL_I2C_Mem_Write
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write((I2C_HandleTypeDef *)handle, LIS2MDL_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)bufp, len, 100);
 8004374:	7afb      	ldrb	r3, [r7, #11]
 8004376:	b29a      	uxth	r2, r3
 8004378:	2364      	movs	r3, #100	@ 0x64
 800437a:	9302      	str	r3, [sp, #8]
 800437c:	893b      	ldrh	r3, [r7, #8]
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	2301      	movs	r3, #1
 8004386:	213d      	movs	r1, #61	@ 0x3d
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f005 fbed 	bl	8009b68 <HAL_I2C_Mem_Write>
 800438e:	4603      	mov	r3, r0
 8004390:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8004392:	7dfb      	ldrb	r3, [r7, #23]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <lis2mdltr_platform_write+0x3c>
 8004398:	2300      	movs	r3, #0
 800439a:	e001      	b.n	80043a0 <lis2mdltr_platform_write+0x40>
 800439c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <LIS2MDLTR_Init>:
  *
  * @param  lis2mdltr_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
bool LIS2MDLTR_Init(){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0

	//Assign Read/Write functions to the device
	lis2mdltr.read_reg = lis2mdltr_platform_read;
 80043ac:	4b0f      	ldr	r3, [pc, #60]	@ (80043ec <LIS2MDLTR_Init+0x44>)
 80043ae:	4a10      	ldr	r2, [pc, #64]	@ (80043f0 <LIS2MDLTR_Init+0x48>)
 80043b0:	605a      	str	r2, [r3, #4]
	lis2mdltr.write_reg = lis2mdltr_platform_write;
 80043b2:	4b0e      	ldr	r3, [pc, #56]	@ (80043ec <LIS2MDLTR_Init+0x44>)
 80043b4:	4a0f      	ldr	r2, [pc, #60]	@ (80043f4 <LIS2MDLTR_Init+0x4c>)
 80043b6:	601a      	str	r2, [r3, #0]
	//Assign I2C Port of device
	lis2mdltr.handle =  &hi2c1;
 80043b8:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <LIS2MDLTR_Init+0x44>)
 80043ba:	4a0f      	ldr	r2, [pc, #60]	@ (80043f8 <LIS2MDLTR_Init+0x50>)
 80043bc:	60da      	str	r2, [r3, #12]


	/* Check device ID */
		whoamI = 0;
 80043be:	4b0f      	ldr	r3, [pc, #60]	@ (80043fc <LIS2MDLTR_Init+0x54>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
		lis2mdl_device_id_get(&lis2mdltr, &whoamI);
 80043c4:	490d      	ldr	r1, [pc, #52]	@ (80043fc <LIS2MDLTR_Init+0x54>)
 80043c6:	4809      	ldr	r0, [pc, #36]	@ (80043ec <LIS2MDLTR_Init+0x44>)
 80043c8:	f000 f83c 	bl	8004444 <lis2mdl_device_id_get>

		if ( whoamI != LIS2MDL_ID ) {
 80043cc:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <LIS2MDLTR_Init+0x54>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b40      	cmp	r3, #64	@ 0x40
 80043d2:	d004      	beq.n	80043de <LIS2MDLTR_Init+0x36>
			printf("LIS2MDLTR ID Error!!");
 80043d4:	480a      	ldr	r0, [pc, #40]	@ (8004400 <LIS2MDLTR_Init+0x58>)
 80043d6:	f013 fa55 	bl	8017884 <iprintf>
			return 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	e003      	b.n	80043e6 <LIS2MDLTR_Init+0x3e>
		}
		printf("LIS2MDLTR High Performance 3-Axis Magnetometer Found!");
 80043de:	4809      	ldr	r0, [pc, #36]	@ (8004404 <LIS2MDLTR_Init+0x5c>)
 80043e0:	f013 fa50 	bl	8017884 <iprintf>

		//TODO -> Configure the device if recognised successfully.
		return 1;
 80043e4:	2301      	movs	r3, #1


}
 80043e6:	4618      	mov	r0, r3
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	24000668 	.word	0x24000668
 80043f0:	08004319 	.word	0x08004319
 80043f4:	08004361 	.word	0x08004361
 80043f8:	2400075c 	.word	0x2400075c
 80043fc:	24000678 	.word	0x24000678
 8004400:	0801b160 	.word	0x0801b160
 8004404:	0801b178 	.word	0x0801b178

08004408 <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	607a      	str	r2, [r7, #4]
 8004412:	461a      	mov	r2, r3
 8004414:	460b      	mov	r3, r1
 8004416:	72fb      	strb	r3, [r7, #11]
 8004418:	4613      	mov	r3, r2
 800441a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <lis2mdl_read_reg+0x20>
  {
    return -1;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	e009      	b.n	800443c <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	685c      	ldr	r4, [r3, #4]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68d8      	ldr	r0, [r3, #12]
 8004430:	893b      	ldrh	r3, [r7, #8]
 8004432:	7af9      	ldrb	r1, [r7, #11]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	47a0      	blx	r4
 8004438:	6178      	str	r0, [r7, #20]

  return ret;
 800443a:	697b      	ldr	r3, [r7, #20]
}
 800443c:	4618      	mov	r0, r3
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	bd90      	pop	{r4, r7, pc}

08004444 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 800444e:	2301      	movs	r3, #1
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	214f      	movs	r1, #79	@ 0x4f
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ffd7 	bl	8004408 <lis2mdl_read_reg>
 800445a:	60f8      	str	r0, [r7, #12]

  return ret;
 800445c:	68fb      	ldr	r3, [r7, #12]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800446e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004472:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d013      	beq.n	80044a6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800447e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004482:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8004486:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800448e:	e000      	b.n	8004492 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004490:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004492:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f9      	beq.n	8004490 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800449c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80044a6:	687b      	ldr	r3, [r7, #4]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <I2C_Scan>:
static void MX_USART3_Init(void);
static void MX_ADC2_Init(void);
static void MX_SPI4_Init(void);
/* USER CODE BEGIN PFP */
void I2C_Scan(I2C_HandleTypeDef *hi2c)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C bus...\n");
 80044bc:	4811      	ldr	r0, [pc, #68]	@ (8004504 <I2C_Scan+0x50>)
 80044be:	f013 fa49 	bl	8017954 <puts>
    for (uint16_t i = 1; i < 128; i++) {
 80044c2:	2301      	movs	r3, #1
 80044c4:	81fb      	strh	r3, [r7, #14]
 80044c6:	e012      	b.n	80044ee <I2C_Scan+0x3a>
        if (HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i << 1), 1, 10) == HAL_OK) {
 80044c8:	89fb      	ldrh	r3, [r7, #14]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	b299      	uxth	r1, r3
 80044ce:	230a      	movs	r3, #10
 80044d0:	2201      	movs	r2, #1
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f005 fd76 	bl	8009fc4 <HAL_I2C_IsDeviceReady>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <I2C_Scan+0x34>
            printf("Device found at 0x%02X\n", i);
 80044de:	89fb      	ldrh	r3, [r7, #14]
 80044e0:	4619      	mov	r1, r3
 80044e2:	4809      	ldr	r0, [pc, #36]	@ (8004508 <I2C_Scan+0x54>)
 80044e4:	f013 f9ce 	bl	8017884 <iprintf>
    for (uint16_t i = 1; i < 128; i++) {
 80044e8:	89fb      	ldrh	r3, [r7, #14]
 80044ea:	3301      	adds	r3, #1
 80044ec:	81fb      	strh	r3, [r7, #14]
 80044ee:	89fb      	ldrh	r3, [r7, #14]
 80044f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80044f2:	d9e9      	bls.n	80044c8 <I2C_Scan+0x14>
        }
    }
    printf("I2C scan complete.\n");
 80044f4:	4805      	ldr	r0, [pc, #20]	@ (800450c <I2C_Scan+0x58>)
 80044f6:	f013 fa2d 	bl	8017954 <puts>
}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	0801b1b0 	.word	0x0801b1b0
 8004508:	0801b1c4 	.word	0x0801b1c4
 800450c:	0801b1dc 	.word	0x0801b1dc

08004510 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
	int i=0;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e009      	b.n	800453a <_write+0x2a>
		ITM_SendChar((*ptr++));
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	60ba      	str	r2, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff99 	bl	8004466 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	3301      	adds	r3, #1
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	429a      	cmp	r2, r3
 8004540:	dbf1      	blt.n	8004526 <_write+0x16>
	}
	return len;
 8004542:	687b      	ldr	r3, [r7, #4]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004550:	f001 fab4 	bl	8005abc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004554:	f002 fd6e 	bl	8007034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004558:	f000 f840 	bl	80045dc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800455c:	f000 f8b0 	bl	80046c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004560:	f001 f98c 	bl	800587c <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8004564:	f000 fa82 	bl	8004a6c <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8004568:	f000 f8da 	bl	8004720 <MX_ADC1_Init>
  MX_I2C1_Init();
 800456c:	f000 f9be 	bl	80048ec <MX_I2C1_Init>
  MX_I2C2_Init();
 8004570:	f000 f9fc 	bl	800496c <MX_I2C2_Init>
  MX_I2C4_Init();
 8004574:	f000 fa3a 	bl	80049ec <MX_I2C4_Init>
  MX_SPI1_Init();
 8004578:	f000 fa96 	bl	8004aa8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800457c:	f000 faea 	bl	8004b54 <MX_SPI2_Init>
  MX_TIM1_Init();
 8004580:	f000 fb94 	bl	8004cac <MX_TIM1_Init>
  MX_TIM2_Init();
 8004584:	f000 fc56 	bl	8004e34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004588:	f000 fcae 	bl	8004ee8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800458c:	f000 fd06 	bl	8004f9c <MX_TIM4_Init>
  MX_TIM5_Init();
 8004590:	f000 fd5e 	bl	8005050 <MX_TIM5_Init>
  MX_TIM8_Init();
 8004594:	f000 fdb6 	bl	8005104 <MX_TIM8_Init>
  MX_TIM12_Init();
 8004598:	f000 fe44 	bl	8005224 <MX_TIM12_Init>
  MX_TIM15_Init();
 800459c:	f000 fe9c 	bl	80052d8 <MX_TIM15_Init>
  MX_UART4_Init();
 80045a0:	f000 ff20 	bl	80053e4 <MX_UART4_Init>
  MX_UART5_Init();
 80045a4:	f000 ff6a 	bl	800547c <MX_UART5_Init>
  MX_UART7_Init();
 80045a8:	f000 ffb4 	bl	8005514 <MX_UART7_Init>
  MX_UART8_Init();
 80045ac:	f000 fffe 	bl	80055ac <MX_UART8_Init>
  MX_USART1_Init();
 80045b0:	f001 f84a 	bl	8005648 <MX_USART1_Init>
  MX_USART2_Init();
 80045b4:	f001 f8a6 	bl	8005704 <MX_USART2_Init>
  MX_USART3_Init();
 80045b8:	f001 f902 	bl	80057c0 <MX_USART3_Init>
  MX_ADC2_Init();
 80045bc:	f000 f92c 	bl	8004818 <MX_ADC2_Init>
  MX_SPI4_Init();
 80045c0:	f000 fb1e 	bl	8004c00 <MX_SPI4_Init>
  MX_FATFS_Init();
 80045c4:	f012 f860 	bl	8016688 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan(&hi2c4);
 80045c8:	4803      	ldr	r0, [pc, #12]	@ (80045d8 <main+0x8c>)
 80045ca:	f7ff ff73 	bl	80044b4 <I2C_Scan>
  SensorManager_Init();
 80045ce:	f002 fcb5 	bl	8006f3c <SensorManager_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <main+0x86>
 80045d6:	bf00      	nop
 80045d8:	24000804 	.word	0x24000804

080045dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b09c      	sub	sp, #112	@ 0x70
 80045e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045e6:	224c      	movs	r2, #76	@ 0x4c
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f013 fab2 	bl	8017b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	2220      	movs	r2, #32
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f013 faac 	bl	8017b54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80045fc:	2002      	movs	r0, #2
 80045fe:	f006 fffb 	bl	800b5f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004602:	2300      	movs	r3, #0
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4b2d      	ldr	r3, [pc, #180]	@ (80046bc <SystemClock_Config+0xe0>)
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800460e:	4a2b      	ldr	r2, [pc, #172]	@ (80046bc <SystemClock_Config+0xe0>)
 8004610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004614:	6193      	str	r3, [r2, #24]
 8004616:	4b29      	ldr	r3, [pc, #164]	@ (80046bc <SystemClock_Config+0xe0>)
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004622:	bf00      	nop
 8004624:	4b25      	ldr	r3, [pc, #148]	@ (80046bc <SystemClock_Config+0xe0>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004630:	d1f8      	bne.n	8004624 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004632:	2301      	movs	r3, #1
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004636:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800463a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800463c:	2302      	movs	r3, #2
 800463e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004640:	2302      	movs	r3, #2
 8004642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004644:	2304      	movs	r3, #4
 8004646:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8004648:	2310      	movs	r3, #16
 800464a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800464c:	2302      	movs	r3, #2
 800464e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004650:	2303      	movs	r3, #3
 8004652:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004654:	2302      	movs	r3, #2
 8004656:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004658:	230c      	movs	r3, #12
 800465a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800465c:	2300      	movs	r3, #0
 800465e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004668:	4618      	mov	r0, r3
 800466a:	f006 ffff 	bl	800b66c <HAL_RCC_OscConfig>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004674:	f001 fa4e 	bl	8005b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004678:	233f      	movs	r3, #63	@ 0x3f
 800467a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800467c:	2302      	movs	r3, #2
 800467e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800468c:	2340      	movs	r3, #64	@ 0x40
 800468e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004694:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004696:	2340      	movs	r3, #64	@ 0x40
 8004698:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800469a:	1d3b      	adds	r3, r7, #4
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f007 fbbe 	bl	800be20 <HAL_RCC_ClockConfig>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80046aa:	f001 fa33 	bl	8005b14 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80046ae:	f007 fd6d 	bl	800c18c <HAL_RCC_EnableCSS>
}
 80046b2:	bf00      	nop
 80046b4:	3770      	adds	r7, #112	@ 0x70
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	58024800 	.word	0x58024800

080046c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b0ae      	sub	sp, #184	@ 0xb8
 80046c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046c6:	463b      	mov	r3, r7
 80046c8:	22b8      	movs	r2, #184	@ 0xb8
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f013 fa41 	bl	8017b54 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80046d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80046de:	2304      	movs	r3, #4
 80046e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80046e2:	2310      	movs	r3, #16
 80046e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80046e6:	2305      	movs	r3, #5
 80046e8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80046ea:	2302      	movs	r3, #2
 80046ec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80046ee:	2302      	movs	r3, #2
 80046f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80046f2:	23c0      	movs	r3, #192	@ 0xc0
 80046f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80046fe:	2300      	movs	r3, #0
 8004700:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004704:	463b      	mov	r3, r7
 8004706:	4618      	mov	r0, r3
 8004708:	f007 ff42 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8004712:	f001 f9ff 	bl	8005b14 <Error_Handler>
  }
}
 8004716:	bf00      	nop
 8004718:	37b8      	adds	r7, #184	@ 0xb8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08c      	sub	sp, #48	@ 0x30
 8004724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004732:	463b      	mov	r3, r7
 8004734:	2224      	movs	r2, #36	@ 0x24
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f013 fa0b 	bl	8017b54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800473e:	4b32      	ldr	r3, [pc, #200]	@ (8004808 <MX_ADC1_Init+0xe8>)
 8004740:	4a32      	ldr	r2, [pc, #200]	@ (800480c <MX_ADC1_Init+0xec>)
 8004742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004744:	4b30      	ldr	r3, [pc, #192]	@ (8004808 <MX_ADC1_Init+0xe8>)
 8004746:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800474a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800474c:	4b2e      	ldr	r3, [pc, #184]	@ (8004808 <MX_ADC1_Init+0xe8>)
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004752:	4b2d      	ldr	r3, [pc, #180]	@ (8004808 <MX_ADC1_Init+0xe8>)
 8004754:	2200      	movs	r2, #0
 8004756:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004758:	4b2b      	ldr	r3, [pc, #172]	@ (8004808 <MX_ADC1_Init+0xe8>)
 800475a:	2204      	movs	r2, #4
 800475c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800475e:	4b2a      	ldr	r3, [pc, #168]	@ (8004808 <MX_ADC1_Init+0xe8>)
 8004760:	2200      	movs	r2, #0
 8004762:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004764:	4b28      	ldr	r3, [pc, #160]	@ (8004808 <MX_ADC1_Init+0xe8>)
 8004766:	2200      	movs	r2, #0
 8004768:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800476a:	4b27      	ldr	r3, [pc, #156]	@ (8004808 <MX_ADC1_Init+0xe8>)
 800476c:	2201      	movs	r2, #1
 800476e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004770:	4b25      	ldr	r3, [pc, #148]	@ (8004808 <MX_ADC1_Init+0xe8>)
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004778:	4b23      	ldr	r3, [pc, #140]	@ (8004808 <MX_ADC1_Init+0xe8>)
 800477a:	2200      	movs	r2, #0
 800477c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800477e:	4b22      	ldr	r3, [pc, #136]	@ (8004808 <MX_ADC1_Init+0xe8>)
 8004780:	2200      	movs	r2, #0
 8004782:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8004784:	4b20      	ldr	r3, [pc, #128]	@ (8004808 <MX_ADC1_Init+0xe8>)
 8004786:	2200      	movs	r2, #0
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800478a:	4b1f      	ldr	r3, [pc, #124]	@ (8004808 <MX_ADC1_Init+0xe8>)
 800478c:	2200      	movs	r2, #0
 800478e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004790:	4b1d      	ldr	r3, [pc, #116]	@ (8004808 <MX_ADC1_Init+0xe8>)
 8004792:	2200      	movs	r2, #0
 8004794:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8004796:	4b1c      	ldr	r3, [pc, #112]	@ (8004808 <MX_ADC1_Init+0xe8>)
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800479e:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <MX_ADC1_Init+0xe8>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047a4:	4818      	ldr	r0, [pc, #96]	@ (8004808 <MX_ADC1_Init+0xe8>)
 80047a6:	f002 ff41 	bl	800762c <HAL_ADC_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80047b0:	f001 f9b0 	bl	8005b14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80047b4:	2300      	movs	r3, #0
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80047b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047bc:	4619      	mov	r1, r3
 80047be:	4812      	ldr	r0, [pc, #72]	@ (8004808 <MX_ADC1_Init+0xe8>)
 80047c0:	f003 ff80 	bl	80086c4 <HAL_ADCEx_MultiModeConfigChannel>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80047ca:	f001 f9a3 	bl	8005b14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80047ce:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <MX_ADC1_Init+0xf0>)
 80047d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047d2:	2306      	movs	r3, #6
 80047d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80047da:	4b0e      	ldr	r3, [pc, #56]	@ (8004814 <MX_ADC1_Init+0xf4>)
 80047dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80047de:	2304      	movs	r3, #4
 80047e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047ec:	463b      	mov	r3, r7
 80047ee:	4619      	mov	r1, r3
 80047f0:	4805      	ldr	r0, [pc, #20]	@ (8004808 <MX_ADC1_Init+0xe8>)
 80047f2:	f003 f923 	bl	8007a3c <HAL_ADC_ConfigChannel>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80047fc:	f001 f98a 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004800:	bf00      	nop
 8004802:	3730      	adds	r7, #48	@ 0x30
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	2400067c 	.word	0x2400067c
 800480c:	40022000 	.word	0x40022000
 8004810:	10c00010 	.word	0x10c00010
 8004814:	47ff0000 	.word	0x47ff0000

08004818 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	@ 0x28
 800481c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	2224      	movs	r2, #36	@ 0x24
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f013 f995 	bl	8017b54 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800482a:	4b2c      	ldr	r3, [pc, #176]	@ (80048dc <MX_ADC2_Init+0xc4>)
 800482c:	4a2c      	ldr	r2, [pc, #176]	@ (80048e0 <MX_ADC2_Init+0xc8>)
 800482e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004830:	4b2a      	ldr	r3, [pc, #168]	@ (80048dc <MX_ADC2_Init+0xc4>)
 8004832:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004836:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8004838:	4b28      	ldr	r3, [pc, #160]	@ (80048dc <MX_ADC2_Init+0xc4>)
 800483a:	2200      	movs	r2, #0
 800483c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800483e:	4b27      	ldr	r3, [pc, #156]	@ (80048dc <MX_ADC2_Init+0xc4>)
 8004840:	2200      	movs	r2, #0
 8004842:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004844:	4b25      	ldr	r3, [pc, #148]	@ (80048dc <MX_ADC2_Init+0xc4>)
 8004846:	2204      	movs	r2, #4
 8004848:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800484a:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <MX_ADC2_Init+0xc4>)
 800484c:	2200      	movs	r2, #0
 800484e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004850:	4b22      	ldr	r3, [pc, #136]	@ (80048dc <MX_ADC2_Init+0xc4>)
 8004852:	2200      	movs	r2, #0
 8004854:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8004856:	4b21      	ldr	r3, [pc, #132]	@ (80048dc <MX_ADC2_Init+0xc4>)
 8004858:	2201      	movs	r2, #1
 800485a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800485c:	4b1f      	ldr	r3, [pc, #124]	@ (80048dc <MX_ADC2_Init+0xc4>)
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004864:	4b1d      	ldr	r3, [pc, #116]	@ (80048dc <MX_ADC2_Init+0xc4>)
 8004866:	2200      	movs	r2, #0
 8004868:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800486a:	4b1c      	ldr	r3, [pc, #112]	@ (80048dc <MX_ADC2_Init+0xc4>)
 800486c:	2200      	movs	r2, #0
 800486e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8004870:	4b1a      	ldr	r3, [pc, #104]	@ (80048dc <MX_ADC2_Init+0xc4>)
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004876:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <MX_ADC2_Init+0xc4>)
 8004878:	2200      	movs	r2, #0
 800487a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800487c:	4b17      	ldr	r3, [pc, #92]	@ (80048dc <MX_ADC2_Init+0xc4>)
 800487e:	2200      	movs	r2, #0
 8004880:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8004882:	4b16      	ldr	r3, [pc, #88]	@ (80048dc <MX_ADC2_Init+0xc4>)
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800488a:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <MX_ADC2_Init+0xc4>)
 800488c:	2201      	movs	r2, #1
 800488e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004890:	4812      	ldr	r0, [pc, #72]	@ (80048dc <MX_ADC2_Init+0xc4>)
 8004892:	f002 fecb 	bl	800762c <HAL_ADC_Init>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800489c:	f001 f93a 	bl	8005b14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80048a0:	4b10      	ldr	r3, [pc, #64]	@ (80048e4 <MX_ADC2_Init+0xcc>)
 80048a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048a4:	2306      	movs	r3, #6
 80048a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80048ac:	4b0e      	ldr	r3, [pc, #56]	@ (80048e8 <MX_ADC2_Init+0xd0>)
 80048ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80048b0:	2304      	movs	r3, #4
 80048b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4806      	ldr	r0, [pc, #24]	@ (80048dc <MX_ADC2_Init+0xc4>)
 80048c4:	f003 f8ba 	bl	8007a3c <HAL_ADC_ConfigChannel>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80048ce:	f001 f921 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80048d2:	bf00      	nop
 80048d4:	3728      	adds	r7, #40	@ 0x28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	240006ec 	.word	0x240006ec
 80048e0:	40022100 	.word	0x40022100
 80048e4:	14f00020 	.word	0x14f00020
 80048e8:	47ff0000 	.word	0x47ff0000

080048ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80048f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <MX_I2C1_Init+0x74>)
 80048f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004964 <MX_I2C1_Init+0x78>)
 80048f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80048f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004960 <MX_I2C1_Init+0x74>)
 80048f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004968 <MX_I2C1_Init+0x7c>)
 80048fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80048fc:	4b18      	ldr	r3, [pc, #96]	@ (8004960 <MX_I2C1_Init+0x74>)
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004902:	4b17      	ldr	r3, [pc, #92]	@ (8004960 <MX_I2C1_Init+0x74>)
 8004904:	2201      	movs	r2, #1
 8004906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004908:	4b15      	ldr	r3, [pc, #84]	@ (8004960 <MX_I2C1_Init+0x74>)
 800490a:	2200      	movs	r2, #0
 800490c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800490e:	4b14      	ldr	r3, [pc, #80]	@ (8004960 <MX_I2C1_Init+0x74>)
 8004910:	2200      	movs	r2, #0
 8004912:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004914:	4b12      	ldr	r3, [pc, #72]	@ (8004960 <MX_I2C1_Init+0x74>)
 8004916:	2200      	movs	r2, #0
 8004918:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800491a:	4b11      	ldr	r3, [pc, #68]	@ (8004960 <MX_I2C1_Init+0x74>)
 800491c:	2200      	movs	r2, #0
 800491e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004920:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <MX_I2C1_Init+0x74>)
 8004922:	2200      	movs	r2, #0
 8004924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004926:	480e      	ldr	r0, [pc, #56]	@ (8004960 <MX_I2C1_Init+0x74>)
 8004928:	f005 f882 	bl	8009a30 <HAL_I2C_Init>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004932:	f001 f8ef 	bl	8005b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004936:	2100      	movs	r1, #0
 8004938:	4809      	ldr	r0, [pc, #36]	@ (8004960 <MX_I2C1_Init+0x74>)
 800493a:	f006 fdc5 	bl	800b4c8 <HAL_I2CEx_ConfigAnalogFilter>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004944:	f001 f8e6 	bl	8005b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004948:	2100      	movs	r1, #0
 800494a:	4805      	ldr	r0, [pc, #20]	@ (8004960 <MX_I2C1_Init+0x74>)
 800494c:	f006 fe07 	bl	800b55e <HAL_I2CEx_ConfigDigitalFilter>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004956:	f001 f8dd 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	2400075c 	.word	0x2400075c
 8004964:	40005400 	.word	0x40005400
 8004968:	00506682 	.word	0x00506682

0800496c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004970:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <MX_I2C2_Init+0x74>)
 8004972:	4a1c      	ldr	r2, [pc, #112]	@ (80049e4 <MX_I2C2_Init+0x78>)
 8004974:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00506682;
 8004976:	4b1a      	ldr	r3, [pc, #104]	@ (80049e0 <MX_I2C2_Init+0x74>)
 8004978:	4a1b      	ldr	r2, [pc, #108]	@ (80049e8 <MX_I2C2_Init+0x7c>)
 800497a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800497c:	4b18      	ldr	r3, [pc, #96]	@ (80049e0 <MX_I2C2_Init+0x74>)
 800497e:	2200      	movs	r2, #0
 8004980:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004982:	4b17      	ldr	r3, [pc, #92]	@ (80049e0 <MX_I2C2_Init+0x74>)
 8004984:	2201      	movs	r2, #1
 8004986:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004988:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <MX_I2C2_Init+0x74>)
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800498e:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <MX_I2C2_Init+0x74>)
 8004990:	2200      	movs	r2, #0
 8004992:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004994:	4b12      	ldr	r3, [pc, #72]	@ (80049e0 <MX_I2C2_Init+0x74>)
 8004996:	2200      	movs	r2, #0
 8004998:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800499a:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <MX_I2C2_Init+0x74>)
 800499c:	2200      	movs	r2, #0
 800499e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049a0:	4b0f      	ldr	r3, [pc, #60]	@ (80049e0 <MX_I2C2_Init+0x74>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80049a6:	480e      	ldr	r0, [pc, #56]	@ (80049e0 <MX_I2C2_Init+0x74>)
 80049a8:	f005 f842 	bl	8009a30 <HAL_I2C_Init>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80049b2:	f001 f8af 	bl	8005b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049b6:	2100      	movs	r1, #0
 80049b8:	4809      	ldr	r0, [pc, #36]	@ (80049e0 <MX_I2C2_Init+0x74>)
 80049ba:	f006 fd85 	bl	800b4c8 <HAL_I2CEx_ConfigAnalogFilter>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80049c4:	f001 f8a6 	bl	8005b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80049c8:	2100      	movs	r1, #0
 80049ca:	4805      	ldr	r0, [pc, #20]	@ (80049e0 <MX_I2C2_Init+0x74>)
 80049cc:	f006 fdc7 	bl	800b55e <HAL_I2CEx_ConfigDigitalFilter>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80049d6:	f001 f89d 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	240007b0 	.word	0x240007b0
 80049e4:	40005800 	.word	0x40005800
 80049e8:	00506682 	.word	0x00506682

080049ec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80049f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a60 <MX_I2C4_Init+0x74>)
 80049f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a64 <MX_I2C4_Init+0x78>)
 80049f4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00505D8D;
 80049f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a60 <MX_I2C4_Init+0x74>)
 80049f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a68 <MX_I2C4_Init+0x7c>)
 80049fa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80049fc:	4b18      	ldr	r3, [pc, #96]	@ (8004a60 <MX_I2C4_Init+0x74>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a02:	4b17      	ldr	r3, [pc, #92]	@ (8004a60 <MX_I2C4_Init+0x74>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a08:	4b15      	ldr	r3, [pc, #84]	@ (8004a60 <MX_I2C4_Init+0x74>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8004a0e:	4b14      	ldr	r3, [pc, #80]	@ (8004a60 <MX_I2C4_Init+0x74>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a14:	4b12      	ldr	r3, [pc, #72]	@ (8004a60 <MX_I2C4_Init+0x74>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a1a:	4b11      	ldr	r3, [pc, #68]	@ (8004a60 <MX_I2C4_Init+0x74>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a20:	4b0f      	ldr	r3, [pc, #60]	@ (8004a60 <MX_I2C4_Init+0x74>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8004a26:	480e      	ldr	r0, [pc, #56]	@ (8004a60 <MX_I2C4_Init+0x74>)
 8004a28:	f005 f802 	bl	8009a30 <HAL_I2C_Init>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8004a32:	f001 f86f 	bl	8005b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8004a36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004a3a:	4809      	ldr	r0, [pc, #36]	@ (8004a60 <MX_I2C4_Init+0x74>)
 8004a3c:	f006 fd44 	bl	800b4c8 <HAL_I2CEx_ConfigAnalogFilter>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8004a46:	f001 f865 	bl	8005b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4804      	ldr	r0, [pc, #16]	@ (8004a60 <MX_I2C4_Init+0x74>)
 8004a4e:	f006 fd86 	bl	800b55e <HAL_I2CEx_ConfigDigitalFilter>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8004a58:	f001 f85c 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8004a5c:	bf00      	nop
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	24000804 	.word	0x24000804
 8004a64:	58001c00 	.word	0x58001c00
 8004a68:	00505d8d 	.word	0x00505d8d

08004a6c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8004a70:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <MX_SDMMC1_SD_Init+0x34>)
 8004a72:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa4 <MX_SDMMC1_SD_Init+0x38>)
 8004a74:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004a76:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <MX_SDMMC1_SD_Init+0x34>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004a7c:	4b08      	ldr	r3, [pc, #32]	@ (8004aa0 <MX_SDMMC1_SD_Init+0x34>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8004a82:	4b07      	ldr	r3, [pc, #28]	@ (8004aa0 <MX_SDMMC1_SD_Init+0x34>)
 8004a84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a88:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a8a:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <MX_SDMMC1_SD_Init+0x34>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8004a90:	4b03      	ldr	r3, [pc, #12]	@ (8004aa0 <MX_SDMMC1_SD_Init+0x34>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8004a96:	bf00      	nop
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	24000858 	.word	0x24000858
 8004aa4:	52007000 	.word	0x52007000

08004aa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004aac:	4b27      	ldr	r3, [pc, #156]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004aae:	4a28      	ldr	r2, [pc, #160]	@ (8004b50 <MX_SPI1_Init+0xa8>)
 8004ab0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ab2:	4b26      	ldr	r3, [pc, #152]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004ab4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004ab8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004aba:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004ac0:	4b22      	ldr	r3, [pc, #136]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ac6:	4b21      	ldr	r3, [pc, #132]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004acc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004ad4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004ad8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ada:	4b1c      	ldr	r3, [pc, #112]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ae6:	4b19      	ldr	r3, [pc, #100]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aec:	4b17      	ldr	r3, [pc, #92]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004af2:	4b16      	ldr	r3, [pc, #88]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004af8:	4b14      	ldr	r3, [pc, #80]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004afa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004afe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004b00:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004b06:	4b11      	ldr	r3, [pc, #68]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004b12:	4b0e      	ldr	r3, [pc, #56]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004b18:	4b0c      	ldr	r3, [pc, #48]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004b24:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004b2a:	4b08      	ldr	r3, [pc, #32]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004b30:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004b36:	4805      	ldr	r0, [pc, #20]	@ (8004b4c <MX_SPI1_Init+0xa4>)
 8004b38:	f00b fcc2 	bl	80104c0 <HAL_SPI_Init>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8004b42:	f000 ffe7 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004b46:	bf00      	nop
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	240008d4 	.word	0x240008d4
 8004b50:	40013000 	.word	0x40013000

08004b54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004b58:	4b27      	ldr	r3, [pc, #156]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b5a:	4a28      	ldr	r2, [pc, #160]	@ (8004bfc <MX_SPI2_Init+0xa8>)
 8004b5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004b5e:	4b26      	ldr	r3, [pc, #152]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004b64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004b66:	4b24      	ldr	r3, [pc, #144]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8004b6c:	4b22      	ldr	r3, [pc, #136]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b6e:	2203      	movs	r2, #3
 8004b70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b72:	4b21      	ldr	r3, [pc, #132]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b78:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b80:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004b84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b86:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b92:	4b19      	ldr	r3, [pc, #100]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b98:	4b17      	ldr	r3, [pc, #92]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004b9e:	4b16      	ldr	r3, [pc, #88]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ba4:	4b14      	ldr	r3, [pc, #80]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004ba6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004baa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004bac:	4b12      	ldr	r3, [pc, #72]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004bb2:	4b11      	ldr	r3, [pc, #68]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004bd0:	4b09      	ldr	r3, [pc, #36]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004bd6:	4b08      	ldr	r3, [pc, #32]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004be2:	4805      	ldr	r0, [pc, #20]	@ (8004bf8 <MX_SPI2_Init+0xa4>)
 8004be4:	f00b fc6c 	bl	80104c0 <HAL_SPI_Init>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8004bee:	f000 ff91 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	2400095c 	.word	0x2400095c
 8004bfc:	40003800 	.word	0x40003800

08004c00 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8004c04:	4b27      	ldr	r3, [pc, #156]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c06:	4a28      	ldr	r2, [pc, #160]	@ (8004ca8 <MX_SPI4_Init+0xa8>)
 8004c08:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004c0a:	4b26      	ldr	r3, [pc, #152]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c0c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004c10:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004c12:	4b24      	ldr	r3, [pc, #144]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8004c18:	4b22      	ldr	r3, [pc, #136]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c1e:	4b21      	ldr	r3, [pc, #132]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c24:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004c30:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c32:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c44:	4b17      	ldr	r3, [pc, #92]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8004c4a:	4b16      	ldr	r3, [pc, #88]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c50:	4b14      	ldr	r3, [pc, #80]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004c56:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004c58:	4b12      	ldr	r3, [pc, #72]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004c5e:	4b11      	ldr	r3, [pc, #68]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004c70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004c76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004c7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004c82:	4b08      	ldr	r3, [pc, #32]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004c88:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004c8e:	4805      	ldr	r0, [pc, #20]	@ (8004ca4 <MX_SPI4_Init+0xa4>)
 8004c90:	f00b fc16 	bl	80104c0 <HAL_SPI_Init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8004c9a:	f000 ff3b 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	240009e4 	.word	0x240009e4
 8004ca8:	40013400 	.word	0x40013400

08004cac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b09c      	sub	sp, #112	@ 0x70
 8004cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cb2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ccc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	611a      	str	r2, [r3, #16]
 8004cdc:	615a      	str	r2, [r3, #20]
 8004cde:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	2234      	movs	r2, #52	@ 0x34
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f012 ff34 	bl	8017b54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004cec:	4b4f      	ldr	r3, [pc, #316]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004cee:	4a50      	ldr	r2, [pc, #320]	@ (8004e30 <MX_TIM1_Init+0x184>)
 8004cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d06:	4b49      	ldr	r3, [pc, #292]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d0c:	4b47      	ldr	r3, [pc, #284]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d12:	4b46      	ldr	r3, [pc, #280]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d18:	4844      	ldr	r0, [pc, #272]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004d1a:	f00c fa3e 	bl	801119a <HAL_TIM_Base_Init>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004d24:	f000 fef6 	bl	8005b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d2c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d2e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004d32:	4619      	mov	r1, r3
 8004d34:	483d      	ldr	r0, [pc, #244]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004d36:	f00c fbf3 	bl	8011520 <HAL_TIM_ConfigClockSource>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004d40:	f000 fee8 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004d44:	4839      	ldr	r0, [pc, #228]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004d46:	f00c fa7f 	bl	8011248 <HAL_TIM_PWM_Init>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004d50:	f000 fee0 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d54:	2300      	movs	r3, #0
 8004d56:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004d64:	4619      	mov	r1, r3
 8004d66:	4831      	ldr	r0, [pc, #196]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004d68:	f00d f8f8 	bl	8011f5c <HAL_TIMEx_MasterConfigSynchronization>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004d72:	f000 fecf 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d76:	2360      	movs	r3, #96	@ 0x60
 8004d78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d82:	2300      	movs	r3, #0
 8004d84:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004d96:	2200      	movs	r2, #0
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4824      	ldr	r0, [pc, #144]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004d9c:	f00c faac 	bl	80112f8 <HAL_TIM_PWM_ConfigChannel>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004da6:	f000 feb5 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004daa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004dae:	2204      	movs	r2, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	481e      	ldr	r0, [pc, #120]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004db4:	f00c faa0 	bl	80112f8 <HAL_TIM_PWM_ConfigChannel>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8004dbe:	f000 fea9 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004dc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4818      	ldr	r0, [pc, #96]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004dcc:	f00c fa94 	bl	80112f8 <HAL_TIM_PWM_ConfigChannel>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8004dd6:	f000 fe9d 	bl	8005b14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004df2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004dfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e0a:	1d3b      	adds	r3, r7, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4807      	ldr	r0, [pc, #28]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004e10:	f00d f940 	bl	8012094 <HAL_TIMEx_ConfigBreakDeadTime>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8004e1a:	f000 fe7b 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e1e:	4803      	ldr	r0, [pc, #12]	@ (8004e2c <MX_TIM1_Init+0x180>)
 8004e20:	f001 fb14 	bl	800644c <HAL_TIM_MspPostInit>

}
 8004e24:	bf00      	nop
 8004e26:	3770      	adds	r7, #112	@ 0x70
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	24000a6c 	.word	0x24000a6c
 8004e30:	40010000 	.word	0x40010000

08004e34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	@ 0x28
 8004e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e3a:	f107 031c 	add.w	r3, r7, #28
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e46:	463b      	mov	r3, r7
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	609a      	str	r2, [r3, #8]
 8004e50:	60da      	str	r2, [r3, #12]
 8004e52:	611a      	str	r2, [r3, #16]
 8004e54:	615a      	str	r2, [r3, #20]
 8004e56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e58:	4b22      	ldr	r3, [pc, #136]	@ (8004ee4 <MX_TIM2_Init+0xb0>)
 8004e5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004e5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004e60:	4b20      	ldr	r3, [pc, #128]	@ (8004ee4 <MX_TIM2_Init+0xb0>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ee4 <MX_TIM2_Init+0xb0>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <MX_TIM2_Init+0xb0>)
 8004e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee4 <MX_TIM2_Init+0xb0>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee4 <MX_TIM2_Init+0xb0>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004e80:	4818      	ldr	r0, [pc, #96]	@ (8004ee4 <MX_TIM2_Init+0xb0>)
 8004e82:	f00c f9e1 	bl	8011248 <HAL_TIM_PWM_Init>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004e8c:	f000 fe42 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e98:	f107 031c 	add.w	r3, r7, #28
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4811      	ldr	r0, [pc, #68]	@ (8004ee4 <MX_TIM2_Init+0xb0>)
 8004ea0:	f00d f85c 	bl	8011f5c <HAL_TIMEx_MasterConfigSynchronization>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004eaa:	f000 fe33 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004eae:	2360      	movs	r3, #96	@ 0x60
 8004eb0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4807      	ldr	r0, [pc, #28]	@ (8004ee4 <MX_TIM2_Init+0xb0>)
 8004ec6:	f00c fa17 	bl	80112f8 <HAL_TIM_PWM_ConfigChannel>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8004ed0:	f000 fe20 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004ed4:	4803      	ldr	r0, [pc, #12]	@ (8004ee4 <MX_TIM2_Init+0xb0>)
 8004ed6:	f001 fab9 	bl	800644c <HAL_TIM_MspPostInit>

}
 8004eda:	bf00      	nop
 8004edc:	3728      	adds	r7, #40	@ 0x28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	24000ab8 	.word	0x24000ab8

08004ee8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	@ 0x28
 8004eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004eee:	f107 031c 	add.w	r3, r7, #28
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	605a      	str	r2, [r3, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004efa:	463b      	mov	r3, r7
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	609a      	str	r2, [r3, #8]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	611a      	str	r2, [r3, #16]
 8004f08:	615a      	str	r2, [r3, #20]
 8004f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f0c:	4b21      	ldr	r3, [pc, #132]	@ (8004f94 <MX_TIM3_Init+0xac>)
 8004f0e:	4a22      	ldr	r2, [pc, #136]	@ (8004f98 <MX_TIM3_Init+0xb0>)
 8004f10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f12:	4b20      	ldr	r3, [pc, #128]	@ (8004f94 <MX_TIM3_Init+0xac>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f18:	4b1e      	ldr	r3, [pc, #120]	@ (8004f94 <MX_TIM3_Init+0xac>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f94 <MX_TIM3_Init+0xac>)
 8004f20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f26:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <MX_TIM3_Init+0xac>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f2c:	4b19      	ldr	r3, [pc, #100]	@ (8004f94 <MX_TIM3_Init+0xac>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004f32:	4818      	ldr	r0, [pc, #96]	@ (8004f94 <MX_TIM3_Init+0xac>)
 8004f34:	f00c f988 	bl	8011248 <HAL_TIM_PWM_Init>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004f3e:	f000 fde9 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f4a:	f107 031c 	add.w	r3, r7, #28
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4810      	ldr	r0, [pc, #64]	@ (8004f94 <MX_TIM3_Init+0xac>)
 8004f52:	f00d f803 	bl	8011f5c <HAL_TIMEx_MasterConfigSynchronization>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004f5c:	f000 fdda 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f60:	2360      	movs	r3, #96	@ 0x60
 8004f62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f70:	463b      	mov	r3, r7
 8004f72:	2200      	movs	r2, #0
 8004f74:	4619      	mov	r1, r3
 8004f76:	4807      	ldr	r0, [pc, #28]	@ (8004f94 <MX_TIM3_Init+0xac>)
 8004f78:	f00c f9be 	bl	80112f8 <HAL_TIM_PWM_ConfigChannel>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004f82:	f000 fdc7 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004f86:	4803      	ldr	r0, [pc, #12]	@ (8004f94 <MX_TIM3_Init+0xac>)
 8004f88:	f001 fa60 	bl	800644c <HAL_TIM_MspPostInit>

}
 8004f8c:	bf00      	nop
 8004f8e:	3728      	adds	r7, #40	@ 0x28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	24000b04 	.word	0x24000b04
 8004f98:	40000400 	.word	0x40000400

08004f9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	@ 0x28
 8004fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fa2:	f107 031c 	add.w	r3, r7, #28
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	605a      	str	r2, [r3, #4]
 8004fac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fae:	463b      	mov	r3, r7
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	611a      	str	r2, [r3, #16]
 8004fbc:	615a      	str	r2, [r3, #20]
 8004fbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004fc0:	4b21      	ldr	r3, [pc, #132]	@ (8005048 <MX_TIM4_Init+0xac>)
 8004fc2:	4a22      	ldr	r2, [pc, #136]	@ (800504c <MX_TIM4_Init+0xb0>)
 8004fc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004fc6:	4b20      	ldr	r3, [pc, #128]	@ (8005048 <MX_TIM4_Init+0xac>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8005048 <MX_TIM4_Init+0xac>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8005048 <MX_TIM4_Init+0xac>)
 8004fd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fda:	4b1b      	ldr	r3, [pc, #108]	@ (8005048 <MX_TIM4_Init+0xac>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fe0:	4b19      	ldr	r3, [pc, #100]	@ (8005048 <MX_TIM4_Init+0xac>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004fe6:	4818      	ldr	r0, [pc, #96]	@ (8005048 <MX_TIM4_Init+0xac>)
 8004fe8:	f00c f92e 	bl	8011248 <HAL_TIM_PWM_Init>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8004ff2:	f000 fd8f 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ffe:	f107 031c 	add.w	r3, r7, #28
 8005002:	4619      	mov	r1, r3
 8005004:	4810      	ldr	r0, [pc, #64]	@ (8005048 <MX_TIM4_Init+0xac>)
 8005006:	f00c ffa9 	bl	8011f5c <HAL_TIMEx_MasterConfigSynchronization>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8005010:	f000 fd80 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005014:	2360      	movs	r3, #96	@ 0x60
 8005016:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800501c:	2300      	movs	r3, #0
 800501e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005024:	463b      	mov	r3, r7
 8005026:	2200      	movs	r2, #0
 8005028:	4619      	mov	r1, r3
 800502a:	4807      	ldr	r0, [pc, #28]	@ (8005048 <MX_TIM4_Init+0xac>)
 800502c:	f00c f964 	bl	80112f8 <HAL_TIM_PWM_ConfigChannel>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8005036:	f000 fd6d 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800503a:	4803      	ldr	r0, [pc, #12]	@ (8005048 <MX_TIM4_Init+0xac>)
 800503c:	f001 fa06 	bl	800644c <HAL_TIM_MspPostInit>

}
 8005040:	bf00      	nop
 8005042:	3728      	adds	r7, #40	@ 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	24000b50 	.word	0x24000b50
 800504c:	40000800 	.word	0x40000800

08005050 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	@ 0x28
 8005054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005056:	f107 031c 	add.w	r3, r7, #28
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	605a      	str	r2, [r3, #4]
 8005060:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005062:	463b      	mov	r3, r7
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]
 8005070:	615a      	str	r2, [r3, #20]
 8005072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005074:	4b21      	ldr	r3, [pc, #132]	@ (80050fc <MX_TIM5_Init+0xac>)
 8005076:	4a22      	ldr	r2, [pc, #136]	@ (8005100 <MX_TIM5_Init+0xb0>)
 8005078:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800507a:	4b20      	ldr	r3, [pc, #128]	@ (80050fc <MX_TIM5_Init+0xac>)
 800507c:	2200      	movs	r2, #0
 800507e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005080:	4b1e      	ldr	r3, [pc, #120]	@ (80050fc <MX_TIM5_Init+0xac>)
 8005082:	2200      	movs	r2, #0
 8005084:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005086:	4b1d      	ldr	r3, [pc, #116]	@ (80050fc <MX_TIM5_Init+0xac>)
 8005088:	f04f 32ff 	mov.w	r2, #4294967295
 800508c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800508e:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <MX_TIM5_Init+0xac>)
 8005090:	2200      	movs	r2, #0
 8005092:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005094:	4b19      	ldr	r3, [pc, #100]	@ (80050fc <MX_TIM5_Init+0xac>)
 8005096:	2200      	movs	r2, #0
 8005098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800509a:	4818      	ldr	r0, [pc, #96]	@ (80050fc <MX_TIM5_Init+0xac>)
 800509c:	f00c f8d4 	bl	8011248 <HAL_TIM_PWM_Init>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80050a6:	f000 fd35 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050b2:	f107 031c 	add.w	r3, r7, #28
 80050b6:	4619      	mov	r1, r3
 80050b8:	4810      	ldr	r0, [pc, #64]	@ (80050fc <MX_TIM5_Init+0xac>)
 80050ba:	f00c ff4f 	bl	8011f5c <HAL_TIMEx_MasterConfigSynchronization>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80050c4:	f000 fd26 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050c8:	2360      	movs	r3, #96	@ 0x60
 80050ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80050d8:	463b      	mov	r3, r7
 80050da:	2200      	movs	r2, #0
 80050dc:	4619      	mov	r1, r3
 80050de:	4807      	ldr	r0, [pc, #28]	@ (80050fc <MX_TIM5_Init+0xac>)
 80050e0:	f00c f90a 	bl	80112f8 <HAL_TIM_PWM_ConfigChannel>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80050ea:	f000 fd13 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80050ee:	4803      	ldr	r0, [pc, #12]	@ (80050fc <MX_TIM5_Init+0xac>)
 80050f0:	f001 f9ac 	bl	800644c <HAL_TIM_MspPostInit>

}
 80050f4:	bf00      	nop
 80050f6:	3728      	adds	r7, #40	@ 0x28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	24000b9c 	.word	0x24000b9c
 8005100:	40000c00 	.word	0x40000c00

08005104 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b098      	sub	sp, #96	@ 0x60
 8005108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800510a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005116:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	609a      	str	r2, [r3, #8]
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	611a      	str	r2, [r3, #16]
 8005126:	615a      	str	r2, [r3, #20]
 8005128:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800512a:	1d3b      	adds	r3, r7, #4
 800512c:	2234      	movs	r2, #52	@ 0x34
 800512e:	2100      	movs	r1, #0
 8005130:	4618      	mov	r0, r3
 8005132:	f012 fd0f 	bl	8017b54 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005136:	4b39      	ldr	r3, [pc, #228]	@ (800521c <MX_TIM8_Init+0x118>)
 8005138:	4a39      	ldr	r2, [pc, #228]	@ (8005220 <MX_TIM8_Init+0x11c>)
 800513a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800513c:	4b37      	ldr	r3, [pc, #220]	@ (800521c <MX_TIM8_Init+0x118>)
 800513e:	2200      	movs	r2, #0
 8005140:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005142:	4b36      	ldr	r3, [pc, #216]	@ (800521c <MX_TIM8_Init+0x118>)
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005148:	4b34      	ldr	r3, [pc, #208]	@ (800521c <MX_TIM8_Init+0x118>)
 800514a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800514e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005150:	4b32      	ldr	r3, [pc, #200]	@ (800521c <MX_TIM8_Init+0x118>)
 8005152:	2200      	movs	r2, #0
 8005154:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005156:	4b31      	ldr	r3, [pc, #196]	@ (800521c <MX_TIM8_Init+0x118>)
 8005158:	2200      	movs	r2, #0
 800515a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800515c:	4b2f      	ldr	r3, [pc, #188]	@ (800521c <MX_TIM8_Init+0x118>)
 800515e:	2200      	movs	r2, #0
 8005160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005162:	482e      	ldr	r0, [pc, #184]	@ (800521c <MX_TIM8_Init+0x118>)
 8005164:	f00c f870 	bl	8011248 <HAL_TIM_PWM_Init>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800516e:	f000 fcd1 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005172:	2300      	movs	r3, #0
 8005174:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800517a:	2300      	movs	r3, #0
 800517c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800517e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005182:	4619      	mov	r1, r3
 8005184:	4825      	ldr	r0, [pc, #148]	@ (800521c <MX_TIM8_Init+0x118>)
 8005186:	f00c fee9 	bl	8011f5c <HAL_TIMEx_MasterConfigSynchronization>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8005190:	f000 fcc0 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005194:	2360      	movs	r3, #96	@ 0x60
 8005196:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800519c:	2300      	movs	r3, #0
 800519e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80051a0:	2300      	movs	r3, #0
 80051a2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80051a8:	2300      	movs	r3, #0
 80051aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80051ac:	2300      	movs	r3, #0
 80051ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80051b4:	2200      	movs	r2, #0
 80051b6:	4619      	mov	r1, r3
 80051b8:	4818      	ldr	r0, [pc, #96]	@ (800521c <MX_TIM8_Init+0x118>)
 80051ba:	f00c f89d 	bl	80112f8 <HAL_TIM_PWM_ConfigChannel>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80051c4:	f000 fca6 	bl	8005b14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80051dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80051ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80051f4:	2300      	movs	r3, #0
 80051f6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	4619      	mov	r1, r3
 80051fc:	4807      	ldr	r0, [pc, #28]	@ (800521c <MX_TIM8_Init+0x118>)
 80051fe:	f00c ff49 	bl	8012094 <HAL_TIMEx_ConfigBreakDeadTime>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8005208:	f000 fc84 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800520c:	4803      	ldr	r0, [pc, #12]	@ (800521c <MX_TIM8_Init+0x118>)
 800520e:	f001 f91d 	bl	800644c <HAL_TIM_MspPostInit>

}
 8005212:	bf00      	nop
 8005214:	3760      	adds	r7, #96	@ 0x60
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	24000be8 	.word	0x24000be8
 8005220:	40010400 	.word	0x40010400

08005224 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08a      	sub	sp, #40	@ 0x28
 8005228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800522a:	f107 031c 	add.w	r3, r7, #28
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	605a      	str	r2, [r3, #4]
 8005234:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005236:	463b      	mov	r3, r7
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	611a      	str	r2, [r3, #16]
 8005244:	615a      	str	r2, [r3, #20]
 8005246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005248:	4b21      	ldr	r3, [pc, #132]	@ (80052d0 <MX_TIM12_Init+0xac>)
 800524a:	4a22      	ldr	r2, [pc, #136]	@ (80052d4 <MX_TIM12_Init+0xb0>)
 800524c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800524e:	4b20      	ldr	r3, [pc, #128]	@ (80052d0 <MX_TIM12_Init+0xac>)
 8005250:	2200      	movs	r2, #0
 8005252:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005254:	4b1e      	ldr	r3, [pc, #120]	@ (80052d0 <MX_TIM12_Init+0xac>)
 8005256:	2200      	movs	r2, #0
 8005258:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800525a:	4b1d      	ldr	r3, [pc, #116]	@ (80052d0 <MX_TIM12_Init+0xac>)
 800525c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005260:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005262:	4b1b      	ldr	r3, [pc, #108]	@ (80052d0 <MX_TIM12_Init+0xac>)
 8005264:	2200      	movs	r2, #0
 8005266:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005268:	4b19      	ldr	r3, [pc, #100]	@ (80052d0 <MX_TIM12_Init+0xac>)
 800526a:	2200      	movs	r2, #0
 800526c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800526e:	4818      	ldr	r0, [pc, #96]	@ (80052d0 <MX_TIM12_Init+0xac>)
 8005270:	f00b ffea 	bl	8011248 <HAL_TIM_PWM_Init>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800527a:	f000 fc4b 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005282:	2300      	movs	r3, #0
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8005286:	f107 031c 	add.w	r3, r7, #28
 800528a:	4619      	mov	r1, r3
 800528c:	4810      	ldr	r0, [pc, #64]	@ (80052d0 <MX_TIM12_Init+0xac>)
 800528e:	f00c fe65 	bl	8011f5c <HAL_TIMEx_MasterConfigSynchronization>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8005298:	f000 fc3c 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800529c:	2360      	movs	r3, #96	@ 0x60
 800529e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052ac:	463b      	mov	r3, r7
 80052ae:	2200      	movs	r2, #0
 80052b0:	4619      	mov	r1, r3
 80052b2:	4807      	ldr	r0, [pc, #28]	@ (80052d0 <MX_TIM12_Init+0xac>)
 80052b4:	f00c f820 	bl	80112f8 <HAL_TIM_PWM_ConfigChannel>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 80052be:	f000 fc29 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80052c2:	4803      	ldr	r0, [pc, #12]	@ (80052d0 <MX_TIM12_Init+0xac>)
 80052c4:	f001 f8c2 	bl	800644c <HAL_TIM_MspPostInit>

}
 80052c8:	bf00      	nop
 80052ca:	3728      	adds	r7, #40	@ 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	24000c34 	.word	0x24000c34
 80052d4:	40001800 	.word	0x40001800

080052d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b098      	sub	sp, #96	@ 0x60
 80052dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	605a      	str	r2, [r3, #4]
 80052e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	605a      	str	r2, [r3, #4]
 80052f4:	609a      	str	r2, [r3, #8]
 80052f6:	60da      	str	r2, [r3, #12]
 80052f8:	611a      	str	r2, [r3, #16]
 80052fa:	615a      	str	r2, [r3, #20]
 80052fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	2234      	movs	r2, #52	@ 0x34
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f012 fc25 	bl	8017b54 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800530a:	4b34      	ldr	r3, [pc, #208]	@ (80053dc <MX_TIM15_Init+0x104>)
 800530c:	4a34      	ldr	r2, [pc, #208]	@ (80053e0 <MX_TIM15_Init+0x108>)
 800530e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8005310:	4b32      	ldr	r3, [pc, #200]	@ (80053dc <MX_TIM15_Init+0x104>)
 8005312:	2200      	movs	r2, #0
 8005314:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005316:	4b31      	ldr	r3, [pc, #196]	@ (80053dc <MX_TIM15_Init+0x104>)
 8005318:	2200      	movs	r2, #0
 800531a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800531c:	4b2f      	ldr	r3, [pc, #188]	@ (80053dc <MX_TIM15_Init+0x104>)
 800531e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005322:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005324:	4b2d      	ldr	r3, [pc, #180]	@ (80053dc <MX_TIM15_Init+0x104>)
 8005326:	2200      	movs	r2, #0
 8005328:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800532a:	4b2c      	ldr	r3, [pc, #176]	@ (80053dc <MX_TIM15_Init+0x104>)
 800532c:	2200      	movs	r2, #0
 800532e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005330:	4b2a      	ldr	r3, [pc, #168]	@ (80053dc <MX_TIM15_Init+0x104>)
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005336:	4829      	ldr	r0, [pc, #164]	@ (80053dc <MX_TIM15_Init+0x104>)
 8005338:	f00b ff86 	bl	8011248 <HAL_TIM_PWM_Init>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8005342:	f000 fbe7 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005346:	2300      	movs	r3, #0
 8005348:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800534a:	2300      	movs	r3, #0
 800534c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800534e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005352:	4619      	mov	r1, r3
 8005354:	4821      	ldr	r0, [pc, #132]	@ (80053dc <MX_TIM15_Init+0x104>)
 8005356:	f00c fe01 	bl	8011f5c <HAL_TIMEx_MasterConfigSynchronization>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8005360:	f000 fbd8 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005364:	2360      	movs	r3, #96	@ 0x60
 8005366:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800536c:	2300      	movs	r3, #0
 800536e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005370:	2300      	movs	r3, #0
 8005372:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005374:	2300      	movs	r3, #0
 8005376:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005378:	2300      	movs	r3, #0
 800537a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800537c:	2300      	movs	r3, #0
 800537e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005380:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005384:	2200      	movs	r2, #0
 8005386:	4619      	mov	r1, r3
 8005388:	4814      	ldr	r0, [pc, #80]	@ (80053dc <MX_TIM15_Init+0x104>)
 800538a:	f00b ffb5 	bl	80112f8 <HAL_TIM_PWM_ConfigChannel>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8005394:	f000 fbbe 	bl	8005b14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005398:	2300      	movs	r3, #0
 800539a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800539c:	2300      	movs	r3, #0
 800539e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80053ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4807      	ldr	r0, [pc, #28]	@ (80053dc <MX_TIM15_Init+0x104>)
 80053c0:	f00c fe68 	bl	8012094 <HAL_TIMEx_ConfigBreakDeadTime>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80053ca:	f000 fba3 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80053ce:	4803      	ldr	r0, [pc, #12]	@ (80053dc <MX_TIM15_Init+0x104>)
 80053d0:	f001 f83c 	bl	800644c <HAL_TIM_MspPostInit>

}
 80053d4:	bf00      	nop
 80053d6:	3760      	adds	r7, #96	@ 0x60
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	24000c80 	.word	0x24000c80
 80053e0:	40014000 	.word	0x40014000

080053e4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80053e8:	4b22      	ldr	r3, [pc, #136]	@ (8005474 <MX_UART4_Init+0x90>)
 80053ea:	4a23      	ldr	r2, [pc, #140]	@ (8005478 <MX_UART4_Init+0x94>)
 80053ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80053ee:	4b21      	ldr	r3, [pc, #132]	@ (8005474 <MX_UART4_Init+0x90>)
 80053f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80053f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80053f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005474 <MX_UART4_Init+0x90>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80053fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005474 <MX_UART4_Init+0x90>)
 80053fe:	2200      	movs	r2, #0
 8005400:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005402:	4b1c      	ldr	r3, [pc, #112]	@ (8005474 <MX_UART4_Init+0x90>)
 8005404:	2200      	movs	r2, #0
 8005406:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005408:	4b1a      	ldr	r3, [pc, #104]	@ (8005474 <MX_UART4_Init+0x90>)
 800540a:	220c      	movs	r2, #12
 800540c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800540e:	4b19      	ldr	r3, [pc, #100]	@ (8005474 <MX_UART4_Init+0x90>)
 8005410:	2200      	movs	r2, #0
 8005412:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005414:	4b17      	ldr	r3, [pc, #92]	@ (8005474 <MX_UART4_Init+0x90>)
 8005416:	2200      	movs	r2, #0
 8005418:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800541a:	4b16      	ldr	r3, [pc, #88]	@ (8005474 <MX_UART4_Init+0x90>)
 800541c:	2200      	movs	r2, #0
 800541e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005420:	4b14      	ldr	r3, [pc, #80]	@ (8005474 <MX_UART4_Init+0x90>)
 8005422:	2200      	movs	r2, #0
 8005424:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005426:	4b13      	ldr	r3, [pc, #76]	@ (8005474 <MX_UART4_Init+0x90>)
 8005428:	2200      	movs	r2, #0
 800542a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800542c:	4811      	ldr	r0, [pc, #68]	@ (8005474 <MX_UART4_Init+0x90>)
 800542e:	f00c febd 	bl	80121ac <HAL_UART_Init>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8005438:	f000 fb6c 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800543c:	2100      	movs	r1, #0
 800543e:	480d      	ldr	r0, [pc, #52]	@ (8005474 <MX_UART4_Init+0x90>)
 8005440:	f00f fa97 	bl	8014972 <HAL_UARTEx_SetTxFifoThreshold>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800544a:	f000 fb63 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800544e:	2100      	movs	r1, #0
 8005450:	4808      	ldr	r0, [pc, #32]	@ (8005474 <MX_UART4_Init+0x90>)
 8005452:	f00f facc 	bl	80149ee <HAL_UARTEx_SetRxFifoThreshold>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800545c:	f000 fb5a 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8005460:	4804      	ldr	r0, [pc, #16]	@ (8005474 <MX_UART4_Init+0x90>)
 8005462:	f00f fa4d 	bl	8014900 <HAL_UARTEx_DisableFifoMode>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800546c:	f000 fb52 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005470:	bf00      	nop
 8005472:	bd80      	pop	{r7, pc}
 8005474:	24000ccc 	.word	0x24000ccc
 8005478:	40004c00 	.word	0x40004c00

0800547c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005480:	4b22      	ldr	r3, [pc, #136]	@ (800550c <MX_UART5_Init+0x90>)
 8005482:	4a23      	ldr	r2, [pc, #140]	@ (8005510 <MX_UART5_Init+0x94>)
 8005484:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005486:	4b21      	ldr	r3, [pc, #132]	@ (800550c <MX_UART5_Init+0x90>)
 8005488:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800548c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800548e:	4b1f      	ldr	r3, [pc, #124]	@ (800550c <MX_UART5_Init+0x90>)
 8005490:	2200      	movs	r2, #0
 8005492:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005494:	4b1d      	ldr	r3, [pc, #116]	@ (800550c <MX_UART5_Init+0x90>)
 8005496:	2200      	movs	r2, #0
 8005498:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800549a:	4b1c      	ldr	r3, [pc, #112]	@ (800550c <MX_UART5_Init+0x90>)
 800549c:	2200      	movs	r2, #0
 800549e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80054a0:	4b1a      	ldr	r3, [pc, #104]	@ (800550c <MX_UART5_Init+0x90>)
 80054a2:	220c      	movs	r2, #12
 80054a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054a6:	4b19      	ldr	r3, [pc, #100]	@ (800550c <MX_UART5_Init+0x90>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80054ac:	4b17      	ldr	r3, [pc, #92]	@ (800550c <MX_UART5_Init+0x90>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054b2:	4b16      	ldr	r3, [pc, #88]	@ (800550c <MX_UART5_Init+0x90>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80054b8:	4b14      	ldr	r3, [pc, #80]	@ (800550c <MX_UART5_Init+0x90>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054be:	4b13      	ldr	r3, [pc, #76]	@ (800550c <MX_UART5_Init+0x90>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80054c4:	4811      	ldr	r0, [pc, #68]	@ (800550c <MX_UART5_Init+0x90>)
 80054c6:	f00c fe71 	bl	80121ac <HAL_UART_Init>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80054d0:	f000 fb20 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054d4:	2100      	movs	r1, #0
 80054d6:	480d      	ldr	r0, [pc, #52]	@ (800550c <MX_UART5_Init+0x90>)
 80054d8:	f00f fa4b 	bl	8014972 <HAL_UARTEx_SetTxFifoThreshold>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80054e2:	f000 fb17 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054e6:	2100      	movs	r1, #0
 80054e8:	4808      	ldr	r0, [pc, #32]	@ (800550c <MX_UART5_Init+0x90>)
 80054ea:	f00f fa80 	bl	80149ee <HAL_UARTEx_SetRxFifoThreshold>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80054f4:	f000 fb0e 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80054f8:	4804      	ldr	r0, [pc, #16]	@ (800550c <MX_UART5_Init+0x90>)
 80054fa:	f00f fa01 	bl	8014900 <HAL_UARTEx_DisableFifoMode>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8005504:	f000 fb06 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005508:	bf00      	nop
 800550a:	bd80      	pop	{r7, pc}
 800550c:	24000d60 	.word	0x24000d60
 8005510:	40005000 	.word	0x40005000

08005514 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005518:	4b22      	ldr	r3, [pc, #136]	@ (80055a4 <MX_UART7_Init+0x90>)
 800551a:	4a23      	ldr	r2, [pc, #140]	@ (80055a8 <MX_UART7_Init+0x94>)
 800551c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800551e:	4b21      	ldr	r3, [pc, #132]	@ (80055a4 <MX_UART7_Init+0x90>)
 8005520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005524:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005526:	4b1f      	ldr	r3, [pc, #124]	@ (80055a4 <MX_UART7_Init+0x90>)
 8005528:	2200      	movs	r2, #0
 800552a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800552c:	4b1d      	ldr	r3, [pc, #116]	@ (80055a4 <MX_UART7_Init+0x90>)
 800552e:	2200      	movs	r2, #0
 8005530:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005532:	4b1c      	ldr	r3, [pc, #112]	@ (80055a4 <MX_UART7_Init+0x90>)
 8005534:	2200      	movs	r2, #0
 8005536:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005538:	4b1a      	ldr	r3, [pc, #104]	@ (80055a4 <MX_UART7_Init+0x90>)
 800553a:	220c      	movs	r2, #12
 800553c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800553e:	4b19      	ldr	r3, [pc, #100]	@ (80055a4 <MX_UART7_Init+0x90>)
 8005540:	2200      	movs	r2, #0
 8005542:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005544:	4b17      	ldr	r3, [pc, #92]	@ (80055a4 <MX_UART7_Init+0x90>)
 8005546:	2200      	movs	r2, #0
 8005548:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800554a:	4b16      	ldr	r3, [pc, #88]	@ (80055a4 <MX_UART7_Init+0x90>)
 800554c:	2200      	movs	r2, #0
 800554e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005550:	4b14      	ldr	r3, [pc, #80]	@ (80055a4 <MX_UART7_Init+0x90>)
 8005552:	2200      	movs	r2, #0
 8005554:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005556:	4b13      	ldr	r3, [pc, #76]	@ (80055a4 <MX_UART7_Init+0x90>)
 8005558:	2200      	movs	r2, #0
 800555a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800555c:	4811      	ldr	r0, [pc, #68]	@ (80055a4 <MX_UART7_Init+0x90>)
 800555e:	f00c fe25 	bl	80121ac <HAL_UART_Init>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8005568:	f000 fad4 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800556c:	2100      	movs	r1, #0
 800556e:	480d      	ldr	r0, [pc, #52]	@ (80055a4 <MX_UART7_Init+0x90>)
 8005570:	f00f f9ff 	bl	8014972 <HAL_UARTEx_SetTxFifoThreshold>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800557a:	f000 facb 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800557e:	2100      	movs	r1, #0
 8005580:	4808      	ldr	r0, [pc, #32]	@ (80055a4 <MX_UART7_Init+0x90>)
 8005582:	f00f fa34 	bl	80149ee <HAL_UARTEx_SetRxFifoThreshold>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 800558c:	f000 fac2 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8005590:	4804      	ldr	r0, [pc, #16]	@ (80055a4 <MX_UART7_Init+0x90>)
 8005592:	f00f f9b5 	bl	8014900 <HAL_UARTEx_DisableFifoMode>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800559c:	f000 faba 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80055a0:	bf00      	nop
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	24000df4 	.word	0x24000df4
 80055a8:	40007800 	.word	0x40007800

080055ac <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80055b0:	4b23      	ldr	r3, [pc, #140]	@ (8005640 <MX_UART8_Init+0x94>)
 80055b2:	4a24      	ldr	r2, [pc, #144]	@ (8005644 <MX_UART8_Init+0x98>)
 80055b4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80055b6:	4b22      	ldr	r3, [pc, #136]	@ (8005640 <MX_UART8_Init+0x94>)
 80055b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80055bc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80055be:	4b20      	ldr	r3, [pc, #128]	@ (8005640 <MX_UART8_Init+0x94>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80055c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005640 <MX_UART8_Init+0x94>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80055ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005640 <MX_UART8_Init+0x94>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80055d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005640 <MX_UART8_Init+0x94>)
 80055d2:	220c      	movs	r2, #12
 80055d4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80055d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005640 <MX_UART8_Init+0x94>)
 80055d8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80055dc:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80055de:	4b18      	ldr	r3, [pc, #96]	@ (8005640 <MX_UART8_Init+0x94>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055e4:	4b16      	ldr	r3, [pc, #88]	@ (8005640 <MX_UART8_Init+0x94>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80055ea:	4b15      	ldr	r3, [pc, #84]	@ (8005640 <MX_UART8_Init+0x94>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055f0:	4b13      	ldr	r3, [pc, #76]	@ (8005640 <MX_UART8_Init+0x94>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80055f6:	4812      	ldr	r0, [pc, #72]	@ (8005640 <MX_UART8_Init+0x94>)
 80055f8:	f00c fdd8 	bl	80121ac <HAL_UART_Init>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8005602:	f000 fa87 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005606:	2100      	movs	r1, #0
 8005608:	480d      	ldr	r0, [pc, #52]	@ (8005640 <MX_UART8_Init+0x94>)
 800560a:	f00f f9b2 	bl	8014972 <HAL_UARTEx_SetTxFifoThreshold>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8005614:	f000 fa7e 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005618:	2100      	movs	r1, #0
 800561a:	4809      	ldr	r0, [pc, #36]	@ (8005640 <MX_UART8_Init+0x94>)
 800561c:	f00f f9e7 	bl	80149ee <HAL_UARTEx_SetRxFifoThreshold>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8005626:	f000 fa75 	bl	8005b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800562a:	4805      	ldr	r0, [pc, #20]	@ (8005640 <MX_UART8_Init+0x94>)
 800562c:	f00f f968 	bl	8014900 <HAL_UARTEx_DisableFifoMode>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8005636:	f000 fa6d 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800563a:	bf00      	nop
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	24000e88 	.word	0x24000e88
 8005644:	40007c00 	.word	0x40007c00

08005648 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 800564c:	4b2b      	ldr	r3, [pc, #172]	@ (80056fc <MX_USART1_Init+0xb4>)
 800564e:	4a2c      	ldr	r2, [pc, #176]	@ (8005700 <MX_USART1_Init+0xb8>)
 8005650:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8005652:	4b2a      	ldr	r3, [pc, #168]	@ (80056fc <MX_USART1_Init+0xb4>)
 8005654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005658:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800565a:	4b28      	ldr	r3, [pc, #160]	@ (80056fc <MX_USART1_Init+0xb4>)
 800565c:	2200      	movs	r2, #0
 800565e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8005660:	4b26      	ldr	r3, [pc, #152]	@ (80056fc <MX_USART1_Init+0xb4>)
 8005662:	2200      	movs	r2, #0
 8005664:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8005666:	4b25      	ldr	r3, [pc, #148]	@ (80056fc <MX_USART1_Init+0xb4>)
 8005668:	2200      	movs	r2, #0
 800566a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 800566c:	4b23      	ldr	r3, [pc, #140]	@ (80056fc <MX_USART1_Init+0xb4>)
 800566e:	220c      	movs	r2, #12
 8005670:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8005672:	4b22      	ldr	r3, [pc, #136]	@ (80056fc <MX_USART1_Init+0xb4>)
 8005674:	2200      	movs	r2, #0
 8005676:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8005678:	4b20      	ldr	r3, [pc, #128]	@ (80056fc <MX_USART1_Init+0xb4>)
 800567a:	2200      	movs	r2, #0
 800567c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800567e:	4b1f      	ldr	r3, [pc, #124]	@ (80056fc <MX_USART1_Init+0xb4>)
 8005680:	2200      	movs	r2, #0
 8005682:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8005684:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <MX_USART1_Init+0xb4>)
 8005686:	2200      	movs	r2, #0
 8005688:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 800568a:	4b1c      	ldr	r3, [pc, #112]	@ (80056fc <MX_USART1_Init+0xb4>)
 800568c:	2201      	movs	r2, #1
 800568e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8005690:	481a      	ldr	r0, [pc, #104]	@ (80056fc <MX_USART1_Init+0xb4>)
 8005692:	f00f fa39 	bl	8014b08 <HAL_USART_Init>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 800569c:	f000 fa3a 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056a0:	2100      	movs	r1, #0
 80056a2:	4816      	ldr	r0, [pc, #88]	@ (80056fc <MX_USART1_Init+0xb4>)
 80056a4:	f010 f960 	bl	8015968 <HAL_USARTEx_SetTxFifoThreshold>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 80056ae:	f000 fa31 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056b2:	2100      	movs	r1, #0
 80056b4:	4811      	ldr	r0, [pc, #68]	@ (80056fc <MX_USART1_Init+0xb4>)
 80056b6:	f010 f995 	bl	80159e4 <HAL_USARTEx_SetRxFifoThreshold>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 80056c0:	f000 fa28 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 80056c4:	2100      	movs	r1, #0
 80056c6:	480d      	ldr	r0, [pc, #52]	@ (80056fc <MX_USART1_Init+0xb4>)
 80056c8:	f010 f8d8 	bl	801587c <HAL_USARTEx_ConfigNSS>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 80056d2:	f000 fa1f 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 80056d6:	4809      	ldr	r0, [pc, #36]	@ (80056fc <MX_USART1_Init+0xb4>)
 80056d8:	f010 f90d 	bl	80158f6 <HAL_USARTEx_DisableFifoMode>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 80056e2:	f000 fa17 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 80056e6:	4805      	ldr	r0, [pc, #20]	@ (80056fc <MX_USART1_Init+0xb4>)
 80056e8:	f010 f873 	bl	80157d2 <HAL_USARTEx_EnableSlaveMode>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <MX_USART1_Init+0xae>
  {
    Error_Handler();
 80056f2:	f000 fa0f 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	24000f1c 	.word	0x24000f1c
 8005700:	40011000 	.word	0x40011000

08005704 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8005708:	4b2b      	ldr	r3, [pc, #172]	@ (80057b8 <MX_USART2_Init+0xb4>)
 800570a:	4a2c      	ldr	r2, [pc, #176]	@ (80057bc <MX_USART2_Init+0xb8>)
 800570c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800570e:	4b2a      	ldr	r3, [pc, #168]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005714:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8005716:	4b28      	ldr	r3, [pc, #160]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005718:	2200      	movs	r2, #0
 800571a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800571c:	4b26      	ldr	r3, [pc, #152]	@ (80057b8 <MX_USART2_Init+0xb4>)
 800571e:	2200      	movs	r2, #0
 8005720:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8005722:	4b25      	ldr	r3, [pc, #148]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005724:	2200      	movs	r2, #0
 8005726:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8005728:	4b23      	ldr	r3, [pc, #140]	@ (80057b8 <MX_USART2_Init+0xb4>)
 800572a:	220c      	movs	r2, #12
 800572c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800572e:	4b22      	ldr	r3, [pc, #136]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005730:	2200      	movs	r2, #0
 8005732:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8005734:	4b20      	ldr	r3, [pc, #128]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005736:	2200      	movs	r2, #0
 8005738:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800573a:	4b1f      	ldr	r3, [pc, #124]	@ (80057b8 <MX_USART2_Init+0xb4>)
 800573c:	2200      	movs	r2, #0
 800573e:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8005740:	4b1d      	ldr	r3, [pc, #116]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005742:	2200      	movs	r2, #0
 8005744:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 8005746:	4b1c      	ldr	r3, [pc, #112]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005748:	2201      	movs	r2, #1
 800574a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 800574c:	481a      	ldr	r0, [pc, #104]	@ (80057b8 <MX_USART2_Init+0xb4>)
 800574e:	f00f f9db 	bl	8014b08 <HAL_USART_Init>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8005758:	f000 f9dc 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800575c:	2100      	movs	r1, #0
 800575e:	4816      	ldr	r0, [pc, #88]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005760:	f010 f902 	bl	8015968 <HAL_USARTEx_SetTxFifoThreshold>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 800576a:	f000 f9d3 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800576e:	2100      	movs	r1, #0
 8005770:	4811      	ldr	r0, [pc, #68]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005772:	f010 f937 	bl	80159e4 <HAL_USARTEx_SetRxFifoThreshold>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 800577c:	f000 f9ca 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart2, USART_NSS_HARD) != HAL_OK)
 8005780:	2100      	movs	r1, #0
 8005782:	480d      	ldr	r0, [pc, #52]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005784:	f010 f87a 	bl	801587c <HAL_USARTEx_ConfigNSS>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <MX_USART2_Init+0x8e>
  {
    Error_Handler();
 800578e:	f000 f9c1 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8005792:	4809      	ldr	r0, [pc, #36]	@ (80057b8 <MX_USART2_Init+0xb4>)
 8005794:	f010 f8af 	bl	80158f6 <HAL_USARTEx_DisableFifoMode>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <MX_USART2_Init+0x9e>
  {
    Error_Handler();
 800579e:	f000 f9b9 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 80057a2:	4805      	ldr	r0, [pc, #20]	@ (80057b8 <MX_USART2_Init+0xb4>)
 80057a4:	f010 f815 	bl	80157d2 <HAL_USARTEx_EnableSlaveMode>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <MX_USART2_Init+0xae>
  {
    Error_Handler();
 80057ae:	f000 f9b1 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80057b2:	bf00      	nop
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	24000f7c 	.word	0x24000f7c
 80057bc:	40004400 	.word	0x40004400

080057c0 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 80057c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005874 <MX_USART3_Init+0xb4>)
 80057c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005878 <MX_USART3_Init+0xb8>)
 80057c8:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 80057ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005874 <MX_USART3_Init+0xb4>)
 80057cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80057d0:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 80057d2:	4b28      	ldr	r3, [pc, #160]	@ (8005874 <MX_USART3_Init+0xb4>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 80057d8:	4b26      	ldr	r3, [pc, #152]	@ (8005874 <MX_USART3_Init+0xb4>)
 80057da:	2200      	movs	r2, #0
 80057dc:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 80057de:	4b25      	ldr	r3, [pc, #148]	@ (8005874 <MX_USART3_Init+0xb4>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80057e4:	4b23      	ldr	r3, [pc, #140]	@ (8005874 <MX_USART3_Init+0xb4>)
 80057e6:	220c      	movs	r2, #12
 80057e8:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 80057ea:	4b22      	ldr	r3, [pc, #136]	@ (8005874 <MX_USART3_Init+0xb4>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 80057f0:	4b20      	ldr	r3, [pc, #128]	@ (8005874 <MX_USART3_Init+0xb4>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80057f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005874 <MX_USART3_Init+0xb4>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80057fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005874 <MX_USART3_Init+0xb4>)
 80057fe:	2200      	movs	r2, #0
 8005800:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8005802:	4b1c      	ldr	r3, [pc, #112]	@ (8005874 <MX_USART3_Init+0xb4>)
 8005804:	2201      	movs	r2, #1
 8005806:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8005808:	481a      	ldr	r0, [pc, #104]	@ (8005874 <MX_USART3_Init+0xb4>)
 800580a:	f00f f97d 	bl	8014b08 <HAL_USART_Init>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8005814:	f000 f97e 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005818:	2100      	movs	r1, #0
 800581a:	4816      	ldr	r0, [pc, #88]	@ (8005874 <MX_USART3_Init+0xb4>)
 800581c:	f010 f8a4 	bl	8015968 <HAL_USARTEx_SetTxFifoThreshold>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8005826:	f000 f975 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800582a:	2100      	movs	r1, #0
 800582c:	4811      	ldr	r0, [pc, #68]	@ (8005874 <MX_USART3_Init+0xb4>)
 800582e:	f010 f8d9 	bl	80159e4 <HAL_USARTEx_SetRxFifoThreshold>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8005838:	f000 f96c 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 800583c:	2100      	movs	r1, #0
 800583e:	480d      	ldr	r0, [pc, #52]	@ (8005874 <MX_USART3_Init+0xb4>)
 8005840:	f010 f81c 	bl	801587c <HAL_USARTEx_ConfigNSS>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 800584a:	f000 f963 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 800584e:	4809      	ldr	r0, [pc, #36]	@ (8005874 <MX_USART3_Init+0xb4>)
 8005850:	f010 f851 	bl	80158f6 <HAL_USARTEx_DisableFifoMode>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 800585a:	f000 f95b 	bl	8005b14 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 800585e:	4805      	ldr	r0, [pc, #20]	@ (8005874 <MX_USART3_Init+0xb4>)
 8005860:	f00f ffb7 	bl	80157d2 <HAL_USARTEx_EnableSlaveMode>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <MX_USART3_Init+0xae>
  {
    Error_Handler();
 800586a:	f000 f953 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	24000fdc 	.word	0x24000fdc
 8005878:	40004800 	.word	0x40004800

0800587c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08c      	sub	sp, #48	@ 0x30
 8005880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005882:	f107 031c 	add.w	r3, r7, #28
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	605a      	str	r2, [r3, #4]
 800588c:	609a      	str	r2, [r3, #8]
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005892:	4b84      	ldr	r3, [pc, #528]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 8005894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005898:	4a82      	ldr	r2, [pc, #520]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 800589a:	f043 0304 	orr.w	r3, r3, #4
 800589e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80058a2:	4b80      	ldr	r3, [pc, #512]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 80058a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058b0:	4b7c      	ldr	r3, [pc, #496]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 80058b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058b6:	4a7b      	ldr	r2, [pc, #492]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 80058b8:	f043 0310 	orr.w	r3, r3, #16
 80058bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80058c0:	4b78      	ldr	r3, [pc, #480]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 80058c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058ce:	4b75      	ldr	r3, [pc, #468]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 80058d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058d4:	4a73      	ldr	r2, [pc, #460]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 80058d6:	f043 0302 	orr.w	r3, r3, #2
 80058da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80058de:	4b71      	ldr	r3, [pc, #452]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 80058e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ec:	4b6d      	ldr	r3, [pc, #436]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 80058ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058f2:	4a6c      	ldr	r2, [pc, #432]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80058fc:	4b69      	ldr	r3, [pc, #420]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 80058fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800590a:	4b66      	ldr	r3, [pc, #408]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 800590c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005910:	4a64      	ldr	r2, [pc, #400]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 8005912:	f043 0308 	orr.w	r3, r3, #8
 8005916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800591a:	4b62      	ldr	r3, [pc, #392]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 800591c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	60bb      	str	r3, [r7, #8]
 8005926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005928:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 800592a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800592e:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 8005930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005938:	4b5a      	ldr	r3, [pc, #360]	@ (8005aa4 <MX_GPIO_Init+0x228>)
 800593a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800593e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005942:	607b      	str	r3, [r7, #4]
 8005944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8005946:	2200      	movs	r2, #0
 8005948:	2110      	movs	r1, #16
 800594a:	4857      	ldr	r0, [pc, #348]	@ (8005aa8 <MX_GPIO_Init+0x22c>)
 800594c:	f004 f856 	bl	80099fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8005950:	2200      	movs	r2, #0
 8005952:	2101      	movs	r1, #1
 8005954:	4855      	ldr	r0, [pc, #340]	@ (8005aac <MX_GPIO_Init+0x230>)
 8005956:	f004 f851 	bl	80099fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800595a:	2200      	movs	r2, #0
 800595c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005960:	4853      	ldr	r0, [pc, #332]	@ (8005ab0 <MX_GPIO_Init+0x234>)
 8005962:	f004 f84b 	bl	80099fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8005966:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 800596a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800596c:	2300      	movs	r3, #0
 800596e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005970:	2300      	movs	r3, #0
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005974:	f107 031c 	add.w	r3, r7, #28
 8005978:	4619      	mov	r1, r3
 800597a:	484c      	ldr	r0, [pc, #304]	@ (8005aac <MX_GPIO_Init+0x230>)
 800597c:	f003 fe7e 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE10 PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_12;
 8005980:	f245 4308 	movw	r3, #21512	@ 0x5408
 8005984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005986:	2300      	movs	r3, #0
 8005988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598a:	2300      	movs	r3, #0
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800598e:	f107 031c 	add.w	r3, r7, #28
 8005992:	4619      	mov	r1, r3
 8005994:	4844      	ldr	r0, [pc, #272]	@ (8005aa8 <MX_GPIO_Init+0x22c>)
 8005996:	f003 fe71 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800599a:	2310      	movs	r3, #16
 800599c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800599e:	2301      	movs	r3, #1
 80059a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059a6:	2300      	movs	r3, #0
 80059a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80059aa:	f107 031c 	add.w	r3, r7, #28
 80059ae:	4619      	mov	r1, r3
 80059b0:	483d      	ldr	r0, [pc, #244]	@ (8005aa8 <MX_GPIO_Init+0x22c>)
 80059b2:	f003 fe63 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80059b6:	2310      	movs	r3, #16
 80059b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059ba:	2300      	movs	r3, #0
 80059bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059c2:	f107 031c 	add.w	r3, r7, #28
 80059c6:	4619      	mov	r1, r3
 80059c8:	483a      	ldr	r0, [pc, #232]	@ (8005ab4 <MX_GPIO_Init+0x238>)
 80059ca:	f003 fe57 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80059ce:	2302      	movs	r3, #2
 80059d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059d2:	2303      	movs	r3, #3
 80059d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059da:	f107 031c 	add.w	r3, r7, #28
 80059de:	4619      	mov	r1, r3
 80059e0:	4834      	ldr	r0, [pc, #208]	@ (8005ab4 <MX_GPIO_Init+0x238>)
 80059e2:	f003 fe4b 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80059e6:	2301      	movs	r3, #1
 80059e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059ea:	2301      	movs	r3, #1
 80059ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f2:	2300      	movs	r3, #0
 80059f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059f6:	f107 031c 	add.w	r3, r7, #28
 80059fa:	4619      	mov	r1, r3
 80059fc:	482b      	ldr	r0, [pc, #172]	@ (8005aac <MX_GPIO_Init+0x230>)
 80059fe:	f003 fe3d 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a02:	2308      	movs	r3, #8
 8005a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a06:	2303      	movs	r3, #3
 8005a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a0e:	f107 031c 	add.w	r3, r7, #28
 8005a12:	4619      	mov	r1, r3
 8005a14:	4825      	ldr	r0, [pc, #148]	@ (8005aac <MX_GPIO_Init+0x230>)
 8005a16:	f003 fe31 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a26:	f107 031c 	add.w	r3, r7, #28
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4820      	ldr	r0, [pc, #128]	@ (8005ab0 <MX_GPIO_Init+0x234>)
 8005a2e:	f003 fe25 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a40:	2300      	movs	r3, #0
 8005a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a44:	f107 031c 	add.w	r3, r7, #28
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4819      	ldr	r0, [pc, #100]	@ (8005ab0 <MX_GPIO_Init+0x234>)
 8005a4c:	f003 fe16 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005a50:	2302      	movs	r3, #2
 8005a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a54:	2300      	movs	r3, #0
 8005a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a5c:	f107 031c 	add.w	r3, r7, #28
 8005a60:	4619      	mov	r1, r3
 8005a62:	4815      	ldr	r0, [pc, #84]	@ (8005ab8 <MX_GPIO_Init+0x23c>)
 8005a64:	f003 fe0a 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005a68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a76:	f107 031c 	add.w	r3, r7, #28
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	480a      	ldr	r0, [pc, #40]	@ (8005aa8 <MX_GPIO_Init+0x22c>)
 8005a7e:	f003 fdfd 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a82:	2308      	movs	r3, #8
 8005a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a86:	2303      	movs	r3, #3
 8005a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a8e:	f107 031c 	add.w	r3, r7, #28
 8005a92:	4619      	mov	r1, r3
 8005a94:	4808      	ldr	r0, [pc, #32]	@ (8005ab8 <MX_GPIO_Init+0x23c>)
 8005a96:	f003 fdf1 	bl	800967c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005a9a:	bf00      	nop
 8005a9c:	3730      	adds	r7, #48	@ 0x30
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	58021000 	.word	0x58021000
 8005aac:	58020800 	.word	0x58020800
 8005ab0:	58020400 	.word	0x58020400
 8005ab4:	58020c00 	.word	0x58020c00
 8005ab8:	58020000 	.word	0x58020000

08005abc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	605a      	str	r2, [r3, #4]
 8005aca:	609a      	str	r2, [r3, #8]
 8005acc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8005ace:	f002 ffeb 	bl	8008aa8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005ade:	231f      	movs	r3, #31
 8005ae0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8005ae2:	2387      	movs	r3, #135	@ 0x87
 8005ae4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8005aea:	2300      	movs	r3, #0
 8005aec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005aee:	2301      	movs	r3, #1
 8005af0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005af2:	2301      	movs	r3, #1
 8005af4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005afe:	463b      	mov	r3, r7
 8005b00:	4618      	mov	r0, r3
 8005b02:	f003 f809 	bl	8008b18 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005b06:	2004      	movs	r0, #4
 8005b08:	f002 ffe6 	bl	8008ad8 <HAL_MPU_Enable>

}
 8005b0c:	bf00      	nop
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b18:	b672      	cpsid	i
}
 8005b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b1c:	bf00      	nop
 8005b1e:	e7fd      	b.n	8005b1c <Error_Handler+0x8>

08005b20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b26:	4b0a      	ldr	r3, [pc, #40]	@ (8005b50 <HAL_MspInit+0x30>)
 8005b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b2c:	4a08      	ldr	r2, [pc, #32]	@ (8005b50 <HAL_MspInit+0x30>)
 8005b2e:	f043 0302 	orr.w	r3, r3, #2
 8005b32:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005b36:	4b06      	ldr	r3, [pc, #24]	@ (8005b50 <HAL_MspInit+0x30>)
 8005b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	58024400 	.word	0x58024400

08005b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08c      	sub	sp, #48	@ 0x30
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b5c:	f107 031c 	add.w	r3, r7, #28
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	609a      	str	r2, [r3, #8]
 8005b68:	60da      	str	r2, [r3, #12]
 8005b6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a39      	ldr	r2, [pc, #228]	@ (8005c58 <HAL_ADC_MspInit+0x104>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d133      	bne.n	8005bde <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005b76:	4b39      	ldr	r3, [pc, #228]	@ (8005c5c <HAL_ADC_MspInit+0x108>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4a37      	ldr	r2, [pc, #220]	@ (8005c5c <HAL_ADC_MspInit+0x108>)
 8005b7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005b80:	4b36      	ldr	r3, [pc, #216]	@ (8005c5c <HAL_ADC_MspInit+0x108>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d10e      	bne.n	8005ba6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005b88:	4b35      	ldr	r3, [pc, #212]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b8e:	4a34      	ldr	r2, [pc, #208]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005b90:	f043 0320 	orr.w	r3, r3, #32
 8005b94:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005b98:	4b31      	ldr	r3, [pc, #196]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005b9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bac:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005bae:	f043 0304 	orr.w	r3, r3, #4
 8005bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005bc4:	2330      	movs	r3, #48	@ 0x30
 8005bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bd0:	f107 031c 	add.w	r3, r7, #28
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4823      	ldr	r0, [pc, #140]	@ (8005c64 <HAL_ADC_MspInit+0x110>)
 8005bd8:	f003 fd50 	bl	800967c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005bdc:	e037      	b.n	8005c4e <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a21      	ldr	r2, [pc, #132]	@ (8005c68 <HAL_ADC_MspInit+0x114>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d132      	bne.n	8005c4e <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005be8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c5c <HAL_ADC_MspInit+0x108>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3301      	adds	r3, #1
 8005bee:	4a1b      	ldr	r2, [pc, #108]	@ (8005c5c <HAL_ADC_MspInit+0x108>)
 8005bf0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c5c <HAL_ADC_MspInit+0x108>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d10e      	bne.n	8005c18 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005bfa:	4b19      	ldr	r3, [pc, #100]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c00:	4a17      	ldr	r2, [pc, #92]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005c02:	f043 0320 	orr.w	r3, r3, #32
 8005c06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005c0a:	4b15      	ldr	r3, [pc, #84]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005c0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c18:	4b11      	ldr	r3, [pc, #68]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c1e:	4a10      	ldr	r2, [pc, #64]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005c20:	f043 0302 	orr.w	r3, r3, #2
 8005c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c28:	4b0d      	ldr	r3, [pc, #52]	@ (8005c60 <HAL_ADC_MspInit+0x10c>)
 8005c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c36:	2303      	movs	r3, #3
 8005c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c42:	f107 031c 	add.w	r3, r7, #28
 8005c46:	4619      	mov	r1, r3
 8005c48:	4808      	ldr	r0, [pc, #32]	@ (8005c6c <HAL_ADC_MspInit+0x118>)
 8005c4a:	f003 fd17 	bl	800967c <HAL_GPIO_Init>
}
 8005c4e:	bf00      	nop
 8005c50:	3730      	adds	r7, #48	@ 0x30
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40022000 	.word	0x40022000
 8005c5c:	2400103c 	.word	0x2400103c
 8005c60:	58024400 	.word	0x58024400
 8005c64:	58020800 	.word	0x58020800
 8005c68:	40022100 	.word	0x40022100
 8005c6c:	58020400 	.word	0x58020400

08005c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b0bc      	sub	sp, #240	@ 0xf0
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c78:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	609a      	str	r2, [r3, #8]
 8005c84:	60da      	str	r2, [r3, #12]
 8005c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c88:	f107 0320 	add.w	r3, r7, #32
 8005c8c:	22b8      	movs	r2, #184	@ 0xb8
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f011 ff5f 	bl	8017b54 <memset>
  if(hi2c->Instance==I2C1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8005e8c <HAL_I2C_MspInit+0x21c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d147      	bne.n	8005d30 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005ca0:	f04f 0208 	mov.w	r2, #8
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8005cac:	2300      	movs	r3, #0
 8005cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cb2:	f107 0320 	add.w	r3, r7, #32
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f006 fc6a 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8005cc2:	f7ff ff27 	bl	8005b14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cc6:	4b72      	ldr	r3, [pc, #456]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ccc:	4a70      	ldr	r2, [pc, #448]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005cce:	f043 0302 	orr.w	r3, r3, #2
 8005cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005ce4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8005ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cec:	2312      	movs	r3, #18
 8005cee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005cfe:	2304      	movs	r3, #4
 8005d00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4862      	ldr	r0, [pc, #392]	@ (8005e94 <HAL_I2C_MspInit+0x224>)
 8005d0c:	f003 fcb6 	bl	800967c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d10:	4b5f      	ldr	r3, [pc, #380]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d16:	4a5e      	ldr	r2, [pc, #376]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005d18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d20:	4b5b      	ldr	r3, [pc, #364]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8005d2e:	e0a8      	b.n	8005e82 <HAL_I2C_MspInit+0x212>
  else if(hi2c->Instance==I2C2)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a58      	ldr	r2, [pc, #352]	@ (8005e98 <HAL_I2C_MspInit+0x228>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d147      	bne.n	8005dca <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005d3a:	f04f 0208 	mov.w	r2, #8
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8005d46:	2300      	movs	r3, #0
 8005d48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d4c:	f107 0320 	add.w	r3, r7, #32
 8005d50:	4618      	mov	r0, r3
 8005d52:	f006 fc1d 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8005d5c:	f7ff feda 	bl	8005b14 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d60:	4b4b      	ldr	r3, [pc, #300]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d66:	4a4a      	ldr	r2, [pc, #296]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005d68:	f043 0302 	orr.w	r3, r3, #2
 8005d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d70:	4b47      	ldr	r3, [pc, #284]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005d7e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d86:	2312      	movs	r3, #18
 8005d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005d98:	2304      	movs	r3, #4
 8005d9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d9e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8005da2:	4619      	mov	r1, r3
 8005da4:	483b      	ldr	r0, [pc, #236]	@ (8005e94 <HAL_I2C_MspInit+0x224>)
 8005da6:	f003 fc69 	bl	800967c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005daa:	4b39      	ldr	r3, [pc, #228]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005db0:	4a37      	ldr	r2, [pc, #220]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005db2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005db6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005dba:	4b35      	ldr	r3, [pc, #212]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	693b      	ldr	r3, [r7, #16]
}
 8005dc8:	e05b      	b.n	8005e82 <HAL_I2C_MspInit+0x212>
  else if(hi2c->Instance==I2C4)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a33      	ldr	r2, [pc, #204]	@ (8005e9c <HAL_I2C_MspInit+0x22c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d156      	bne.n	8005e82 <HAL_I2C_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8005dd4:	f04f 0210 	mov.w	r2, #16
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8005de0:	2300      	movs	r3, #0
 8005de2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005de6:	f107 0320 	add.w	r3, r7, #32
 8005dea:	4618      	mov	r0, r3
 8005dec:	f006 fbd0 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8005df6:	f7ff fe8d 	bl	8005b14 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dfa:	4b25      	ldr	r3, [pc, #148]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e00:	4a23      	ldr	r2, [pc, #140]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005e02:	f043 0308 	orr.w	r3, r3, #8
 8005e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e0a:	4b21      	ldr	r3, [pc, #132]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8005e18:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005e1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e20:	2312      	movs	r3, #18
 8005e22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8005e32:	2304      	movs	r3, #4
 8005e34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e38:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4818      	ldr	r0, [pc, #96]	@ (8005ea0 <HAL_I2C_MspInit+0x230>)
 8005e40:	f003 fc1c 	bl	800967c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8005e44:	4b12      	ldr	r3, [pc, #72]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e4a:	4a11      	ldr	r2, [pc, #68]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e50:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005e54:	4b0e      	ldr	r3, [pc, #56]	@ (8005e90 <HAL_I2C_MspInit+0x220>)
 8005e56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e5e:	60bb      	str	r3, [r7, #8]
 8005e60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8005e62:	2200      	movs	r2, #0
 8005e64:	2100      	movs	r1, #0
 8005e66:	205f      	movs	r0, #95	@ 0x5f
 8005e68:	f002 fde9 	bl	8008a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8005e6c:	205f      	movs	r0, #95	@ 0x5f
 8005e6e:	f002 fe00 	bl	8008a72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8005e72:	2200      	movs	r2, #0
 8005e74:	2100      	movs	r1, #0
 8005e76:	2060      	movs	r0, #96	@ 0x60
 8005e78:	f002 fde1 	bl	8008a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8005e7c:	2060      	movs	r0, #96	@ 0x60
 8005e7e:	f002 fdf8 	bl	8008a72 <HAL_NVIC_EnableIRQ>
}
 8005e82:	bf00      	nop
 8005e84:	37f0      	adds	r7, #240	@ 0xf0
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40005400 	.word	0x40005400
 8005e90:	58024400 	.word	0x58024400
 8005e94:	58020400 	.word	0x58020400
 8005e98:	40005800 	.word	0x40005800
 8005e9c:	58001c00 	.word	0x58001c00
 8005ea0:	58020c00 	.word	0x58020c00

08005ea4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b0ba      	sub	sp, #232	@ 0xe8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	605a      	str	r2, [r3, #4]
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	60da      	str	r2, [r3, #12]
 8005eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ebc:	f107 0318 	add.w	r3, r7, #24
 8005ec0:	22b8      	movs	r2, #184	@ 0xb8
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f011 fe45 	bl	8017b54 <memset>
  if(hsd->Instance==SDMMC1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a38      	ldr	r2, [pc, #224]	@ (8005fb0 <HAL_SD_MspInit+0x10c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d169      	bne.n	8005fa8 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8005ed4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ee4:	f107 0318 	add.w	r3, r7, #24
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f006 fb51 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8005ef4:	f7ff fe0e 	bl	8005b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb4 <HAL_SD_MspInit+0x110>)
 8005efa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005efe:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb4 <HAL_SD_MspInit+0x110>)
 8005f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f04:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8005f08:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb4 <HAL_SD_MspInit+0x110>)
 8005f0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f16:	4b27      	ldr	r3, [pc, #156]	@ (8005fb4 <HAL_SD_MspInit+0x110>)
 8005f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f1c:	4a25      	ldr	r2, [pc, #148]	@ (8005fb4 <HAL_SD_MspInit+0x110>)
 8005f1e:	f043 0308 	orr.w	r3, r3, #8
 8005f22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f26:	4b23      	ldr	r3, [pc, #140]	@ (8005fb4 <HAL_SD_MspInit+0x110>)
 8005f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f34:	4b1f      	ldr	r3, [pc, #124]	@ (8005fb4 <HAL_SD_MspInit+0x110>)
 8005f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005fb4 <HAL_SD_MspInit+0x110>)
 8005f3c:	f043 0304 	orr.w	r3, r3, #4
 8005f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f44:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb4 <HAL_SD_MspInit+0x110>)
 8005f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005f52:	2304      	movs	r3, #4
 8005f54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f64:	2303      	movs	r3, #3
 8005f66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4810      	ldr	r0, [pc, #64]	@ (8005fb8 <HAL_SD_MspInit+0x114>)
 8005f78:	f003 fb80 	bl	800967c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8005f7c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8005f80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f84:	2302      	movs	r3, #2
 8005f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f90:	2303      	movs	r3, #3
 8005f92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005f96:	230c      	movs	r3, #12
 8005f98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4806      	ldr	r0, [pc, #24]	@ (8005fbc <HAL_SD_MspInit+0x118>)
 8005fa4:	f003 fb6a 	bl	800967c <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8005fa8:	bf00      	nop
 8005faa:	37e8      	adds	r7, #232	@ 0xe8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	52007000 	.word	0x52007000
 8005fb4:	58024400 	.word	0x58024400
 8005fb8:	58020c00 	.word	0x58020c00
 8005fbc:	58020800 	.word	0x58020800

08005fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b0c0      	sub	sp, #256	@ 0x100
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fc8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	609a      	str	r2, [r3, #8]
 8005fd4:	60da      	str	r2, [r3, #12]
 8005fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005fdc:	22b8      	movs	r2, #184	@ 0xb8
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f011 fdb7 	bl	8017b54 <memset>
  if(hspi->Instance==SPI1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4aaa      	ldr	r2, [pc, #680]	@ (8006294 <HAL_SPI_MspInit+0x2d4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d16a      	bne.n	80060c6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8005ff0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006002:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006006:	4618      	mov	r0, r3
 8006008:	f006 fac2 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8006012:	f7ff fd7f 	bl	8005b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006016:	4ba0      	ldr	r3, [pc, #640]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800601c:	4a9e      	ldr	r2, [pc, #632]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 800601e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006026:	4b9c      	ldr	r3, [pc, #624]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800602c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006034:	4b98      	ldr	r3, [pc, #608]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800603a:	4a97      	ldr	r2, [pc, #604]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 800603c:	f043 0302 	orr.w	r3, r3, #2
 8006040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006044:	4b94      	ldr	r3, [pc, #592]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006052:	4b91      	ldr	r3, [pc, #580]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006058:	4a8f      	ldr	r2, [pc, #572]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006062:	4b8d      	ldr	r3, [pc, #564]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	627b      	str	r3, [r7, #36]	@ 0x24
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PB4(NJTRST)     ------> SPI1_MISO
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006070:	2310      	movs	r3, #16
 8006072:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006076:	2302      	movs	r3, #2
 8006078:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006082:	2300      	movs	r3, #0
 8006084:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006088:	2305      	movs	r3, #5
 800608a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800608e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8006092:	4619      	mov	r1, r3
 8006094:	4881      	ldr	r0, [pc, #516]	@ (800629c <HAL_SPI_MspInit+0x2dc>)
 8006096:	f003 faf1 	bl	800967c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800609a:	23b0      	movs	r3, #176	@ 0xb0
 800609c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a0:	2302      	movs	r3, #2
 80060a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ac:	2300      	movs	r3, #0
 80060ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80060b2:	2305      	movs	r3, #5
 80060b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060b8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80060bc:	4619      	mov	r1, r3
 80060be:	4878      	ldr	r0, [pc, #480]	@ (80062a0 <HAL_SPI_MspInit+0x2e0>)
 80060c0:	f003 fadc 	bl	800967c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80060c4:	e0e1      	b.n	800628a <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI2)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a76      	ldr	r2, [pc, #472]	@ (80062a4 <HAL_SPI_MspInit+0x2e4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	f040 8091 	bne.w	80061f4 <HAL_SPI_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80060d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80060de:	2300      	movs	r3, #0
 80060e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80060e8:	4618      	mov	r0, r3
 80060ea:	f006 fa51 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 80060f4:	f7ff fd0e 	bl	8005b14 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80060f8:	4b67      	ldr	r3, [pc, #412]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 80060fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060fe:	4a66      	ldr	r2, [pc, #408]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006104:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006108:	4b63      	ldr	r3, [pc, #396]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 800610a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800610e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006112:	623b      	str	r3, [r7, #32]
 8006114:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006116:	4b60      	ldr	r3, [pc, #384]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800611c:	4a5e      	ldr	r2, [pc, #376]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 800611e:	f043 0301 	orr.w	r3, r3, #1
 8006122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006126:	4b5c      	ldr	r3, [pc, #368]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006134:	4b58      	ldr	r3, [pc, #352]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800613a:	4a57      	ldr	r2, [pc, #348]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 800613c:	f043 0304 	orr.w	r3, r3, #4
 8006140:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006144:	4b54      	ldr	r3, [pc, #336]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006152:	4b51      	ldr	r3, [pc, #324]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006158:	4a4f      	ldr	r2, [pc, #316]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 800615a:	f043 0302 	orr.w	r3, r3, #2
 800615e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006162:	4b4d      	ldr	r3, [pc, #308]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006174:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006178:	2302      	movs	r3, #2
 800617a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617e:	2300      	movs	r3, #0
 8006180:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006184:	2300      	movs	r3, #0
 8006186:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800618a:	2305      	movs	r3, #5
 800618c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006190:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8006194:	4619      	mov	r1, r3
 8006196:	4842      	ldr	r0, [pc, #264]	@ (80062a0 <HAL_SPI_MspInit+0x2e0>)
 8006198:	f003 fa70 	bl	800967c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 800619c:	2306      	movs	r3, #6
 800619e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a2:	2302      	movs	r3, #2
 80061a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ae:	2300      	movs	r3, #0
 80061b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80061b4:	2305      	movs	r3, #5
 80061b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061ba:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80061be:	4619      	mov	r1, r3
 80061c0:	4839      	ldr	r0, [pc, #228]	@ (80062a8 <HAL_SPI_MspInit+0x2e8>)
 80061c2:	f003 fa5b 	bl	800967c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80061c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80061ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ce:	2302      	movs	r3, #2
 80061d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061da:	2300      	movs	r3, #0
 80061dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80061e0:	2305      	movs	r3, #5
 80061e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061e6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80061ea:	4619      	mov	r1, r3
 80061ec:	482b      	ldr	r0, [pc, #172]	@ (800629c <HAL_SPI_MspInit+0x2dc>)
 80061ee:	f003 fa45 	bl	800967c <HAL_GPIO_Init>
}
 80061f2:	e04a      	b.n	800628a <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI4)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a2c      	ldr	r2, [pc, #176]	@ (80062ac <HAL_SPI_MspInit+0x2ec>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d145      	bne.n	800628a <HAL_SPI_MspInit+0x2ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80061fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800620a:	2300      	movs	r3, #0
 800620c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006210:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006214:	4618      	mov	r0, r3
 8006216:	f006 f9bb 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <HAL_SPI_MspInit+0x264>
      Error_Handler();
 8006220:	f7ff fc78 	bl	8005b14 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006224:	4b1c      	ldr	r3, [pc, #112]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800622a:	4a1b      	ldr	r2, [pc, #108]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 800622c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006230:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006234:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800623a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006242:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006248:	4a13      	ldr	r2, [pc, #76]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 800624a:	f043 0310 	orr.w	r3, r3, #16
 800624e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006252:	4b11      	ldr	r3, [pc, #68]	@ (8006298 <HAL_SPI_MspInit+0x2d8>)
 8006254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8006260:	2364      	movs	r3, #100	@ 0x64
 8006262:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006266:	2302      	movs	r3, #2
 8006268:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626c:	2300      	movs	r3, #0
 800626e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006272:	2300      	movs	r3, #0
 8006274:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006278:	2305      	movs	r3, #5
 800627a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800627e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8006282:	4619      	mov	r1, r3
 8006284:	480a      	ldr	r0, [pc, #40]	@ (80062b0 <HAL_SPI_MspInit+0x2f0>)
 8006286:	f003 f9f9 	bl	800967c <HAL_GPIO_Init>
}
 800628a:	bf00      	nop
 800628c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40013000 	.word	0x40013000
 8006298:	58024400 	.word	0x58024400
 800629c:	58020400 	.word	0x58020400
 80062a0:	58020000 	.word	0x58020000
 80062a4:	40003800 	.word	0x40003800
 80062a8:	58020800 	.word	0x58020800
 80062ac:	40013400 	.word	0x40013400
 80062b0:	58021000 	.word	0x58021000

080062b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0b      	ldr	r2, [pc, #44]	@ (80062f0 <HAL_TIM_Base_MspInit+0x3c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d10e      	bne.n	80062e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80062c6:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <HAL_TIM_Base_MspInit+0x40>)
 80062c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062cc:	4a09      	ldr	r2, [pc, #36]	@ (80062f4 <HAL_TIM_Base_MspInit+0x40>)
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062d6:	4b07      	ldr	r3, [pc, #28]	@ (80062f4 <HAL_TIM_Base_MspInit+0x40>)
 80062d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40010000 	.word	0x40010000
 80062f4:	58024400 	.word	0x58024400

080062f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b08b      	sub	sp, #44	@ 0x2c
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006308:	d10f      	bne.n	800632a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800630a:	4b49      	ldr	r3, [pc, #292]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 800630c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006310:	4a47      	ldr	r2, [pc, #284]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800631a:	4b45      	ldr	r3, [pc, #276]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 800631c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8006328:	e07c      	b.n	8006424 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM3)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a41      	ldr	r2, [pc, #260]	@ (8006434 <HAL_TIM_PWM_MspInit+0x13c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d10f      	bne.n	8006354 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006334:	4b3e      	ldr	r3, [pc, #248]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 8006336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800633a:	4a3d      	ldr	r2, [pc, #244]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 800633c:	f043 0302 	orr.w	r3, r3, #2
 8006340:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006344:	4b3a      	ldr	r3, [pc, #232]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 8006346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	623b      	str	r3, [r7, #32]
 8006350:	6a3b      	ldr	r3, [r7, #32]
}
 8006352:	e067      	b.n	8006424 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM4)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a37      	ldr	r2, [pc, #220]	@ (8006438 <HAL_TIM_PWM_MspInit+0x140>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d10f      	bne.n	800637e <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800635e:	4b34      	ldr	r3, [pc, #208]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 8006360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006364:	4a32      	ldr	r2, [pc, #200]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 8006366:	f043 0304 	orr.w	r3, r3, #4
 800636a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800636e:	4b30      	ldr	r3, [pc, #192]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 8006370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	69fb      	ldr	r3, [r7, #28]
}
 800637c:	e052      	b.n	8006424 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM5)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2e      	ldr	r2, [pc, #184]	@ (800643c <HAL_TIM_PWM_MspInit+0x144>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d10f      	bne.n	80063a8 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006388:	4b29      	ldr	r3, [pc, #164]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 800638a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800638e:	4a28      	ldr	r2, [pc, #160]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 8006390:	f043 0308 	orr.w	r3, r3, #8
 8006394:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006398:	4b25      	ldr	r3, [pc, #148]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 800639a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	69bb      	ldr	r3, [r7, #24]
}
 80063a6:	e03d      	b.n	8006424 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM8)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a24      	ldr	r2, [pc, #144]	@ (8006440 <HAL_TIM_PWM_MspInit+0x148>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10f      	bne.n	80063d2 <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80063b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 80063b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 80063ba:	f043 0302 	orr.w	r3, r3, #2
 80063be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80063c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 80063c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	697b      	ldr	r3, [r7, #20]
}
 80063d0:	e028      	b.n	8006424 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM12)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006444 <HAL_TIM_PWM_MspInit+0x14c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d10f      	bne.n	80063fc <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80063dc:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 80063de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063e2:	4a13      	ldr	r2, [pc, #76]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 80063e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80063ec:	4b10      	ldr	r3, [pc, #64]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 80063ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	693b      	ldr	r3, [r7, #16]
}
 80063fa:	e013      	b.n	8006424 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM15)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a11      	ldr	r2, [pc, #68]	@ (8006448 <HAL_TIM_PWM_MspInit+0x150>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d10e      	bne.n	8006424 <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006406:	4b0a      	ldr	r3, [pc, #40]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 8006408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800640c:	4a08      	ldr	r2, [pc, #32]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 800640e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006412:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006416:	4b06      	ldr	r3, [pc, #24]	@ (8006430 <HAL_TIM_PWM_MspInit+0x138>)
 8006418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800641c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
}
 8006424:	bf00      	nop
 8006426:	372c      	adds	r7, #44	@ 0x2c
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	58024400 	.word	0x58024400
 8006434:	40000400 	.word	0x40000400
 8006438:	40000800 	.word	0x40000800
 800643c:	40000c00 	.word	0x40000c00
 8006440:	40010400 	.word	0x40010400
 8006444:	40001800 	.word	0x40001800
 8006448:	40014000 	.word	0x40014000

0800644c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b090      	sub	sp, #64	@ 0x40
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006454:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	609a      	str	r2, [r3, #8]
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a95      	ldr	r2, [pc, #596]	@ (80066c0 <HAL_TIM_MspPostInit+0x274>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d120      	bne.n	80064b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800646e:	4b95      	ldr	r3, [pc, #596]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006474:	4a93      	ldr	r2, [pc, #588]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006476:	f043 0310 	orr.w	r3, r3, #16
 800647a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800647e:	4b91      	ldr	r3, [pc, #580]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_13;
 800648c:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8006490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006492:	2302      	movs	r3, #2
 8006494:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006496:	2300      	movs	r3, #0
 8006498:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800649a:	2300      	movs	r3, #0
 800649c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800649e:	2301      	movs	r3, #1
 80064a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80064a6:	4619      	mov	r1, r3
 80064a8:	4887      	ldr	r0, [pc, #540]	@ (80066c8 <HAL_TIM_MspPostInit+0x27c>)
 80064aa:	f003 f8e7 	bl	800967c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80064ae:	e103      	b.n	80066b8 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM2)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b8:	d120      	bne.n	80064fc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ba:	4b82      	ldr	r3, [pc, #520]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 80064bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064c0:	4a80      	ldr	r2, [pc, #512]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80064ca:	4b7e      	ldr	r3, [pc, #504]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 80064cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80064d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064de:	2302      	movs	r3, #2
 80064e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064e6:	2300      	movs	r3, #0
 80064e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80064ea:	2301      	movs	r3, #1
 80064ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80064f2:	4619      	mov	r1, r3
 80064f4:	4875      	ldr	r0, [pc, #468]	@ (80066cc <HAL_TIM_MspPostInit+0x280>)
 80064f6:	f003 f8c1 	bl	800967c <HAL_GPIO_Init>
}
 80064fa:	e0dd      	b.n	80066b8 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM3)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a73      	ldr	r2, [pc, #460]	@ (80066d0 <HAL_TIM_MspPostInit+0x284>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d11f      	bne.n	8006546 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006506:	4b6f      	ldr	r3, [pc, #444]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800650c:	4a6d      	ldr	r2, [pc, #436]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006516:	4b6b      	ldr	r3, [pc, #428]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	623b      	str	r3, [r7, #32]
 8006522:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006524:	2340      	movs	r3, #64	@ 0x40
 8006526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006528:	2302      	movs	r3, #2
 800652a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652c:	2300      	movs	r3, #0
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006530:	2300      	movs	r3, #0
 8006532:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006534:	2302      	movs	r3, #2
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006538:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800653c:	4619      	mov	r1, r3
 800653e:	4863      	ldr	r0, [pc, #396]	@ (80066cc <HAL_TIM_MspPostInit+0x280>)
 8006540:	f003 f89c 	bl	800967c <HAL_GPIO_Init>
}
 8006544:	e0b8      	b.n	80066b8 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM4)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a62      	ldr	r2, [pc, #392]	@ (80066d4 <HAL_TIM_MspPostInit+0x288>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d11f      	bne.n	8006590 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006550:	4b5c      	ldr	r3, [pc, #368]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006556:	4a5b      	ldr	r2, [pc, #364]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006558:	f043 0302 	orr.w	r3, r3, #2
 800655c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006560:	4b58      	ldr	r3, [pc, #352]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	61fb      	str	r3, [r7, #28]
 800656c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800656e:	2340      	movs	r3, #64	@ 0x40
 8006570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006572:	2302      	movs	r3, #2
 8006574:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006576:	2300      	movs	r3, #0
 8006578:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800657a:	2300      	movs	r3, #0
 800657c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800657e:	2302      	movs	r3, #2
 8006580:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006582:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006586:	4619      	mov	r1, r3
 8006588:	4853      	ldr	r0, [pc, #332]	@ (80066d8 <HAL_TIM_MspPostInit+0x28c>)
 800658a:	f003 f877 	bl	800967c <HAL_GPIO_Init>
}
 800658e:	e093      	b.n	80066b8 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM5)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a51      	ldr	r2, [pc, #324]	@ (80066dc <HAL_TIM_MspPostInit+0x290>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d11f      	bne.n	80065da <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800659a:	4b4a      	ldr	r3, [pc, #296]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 800659c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065a0:	4a48      	ldr	r2, [pc, #288]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065aa:	4b46      	ldr	r3, [pc, #280]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 80065ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80065b8:	2301      	movs	r3, #1
 80065ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065bc:	2302      	movs	r3, #2
 80065be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065c4:	2300      	movs	r3, #0
 80065c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80065c8:	2302      	movs	r3, #2
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80065d0:	4619      	mov	r1, r3
 80065d2:	483e      	ldr	r0, [pc, #248]	@ (80066cc <HAL_TIM_MspPostInit+0x280>)
 80065d4:	f003 f852 	bl	800967c <HAL_GPIO_Init>
}
 80065d8:	e06e      	b.n	80066b8 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM8)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a40      	ldr	r2, [pc, #256]	@ (80066e0 <HAL_TIM_MspPostInit+0x294>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d11f      	bne.n	8006624 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065e4:	4b37      	ldr	r3, [pc, #220]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 80065e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ea:	4a36      	ldr	r2, [pc, #216]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 80065ec:	f043 0304 	orr.w	r3, r3, #4
 80065f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065f4:	4b33      	ldr	r3, [pc, #204]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 80065f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006602:	2340      	movs	r3, #64	@ 0x40
 8006604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006606:	2302      	movs	r3, #2
 8006608:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660a:	2300      	movs	r3, #0
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800660e:	2300      	movs	r3, #0
 8006610:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006612:	2303      	movs	r3, #3
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006616:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800661a:	4619      	mov	r1, r3
 800661c:	4831      	ldr	r0, [pc, #196]	@ (80066e4 <HAL_TIM_MspPostInit+0x298>)
 800661e:	f003 f82d 	bl	800967c <HAL_GPIO_Init>
}
 8006622:	e049      	b.n	80066b8 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM12)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2f      	ldr	r2, [pc, #188]	@ (80066e8 <HAL_TIM_MspPostInit+0x29c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d120      	bne.n	8006670 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800662e:	4b25      	ldr	r3, [pc, #148]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006634:	4a23      	ldr	r2, [pc, #140]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006636:	f043 0302 	orr.w	r3, r3, #2
 800663a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800663e:	4b21      	ldr	r3, [pc, #132]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800664c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006652:	2302      	movs	r3, #2
 8006654:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006656:	2300      	movs	r3, #0
 8006658:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800665a:	2300      	movs	r3, #0
 800665c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800665e:	2302      	movs	r3, #2
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006662:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006666:	4619      	mov	r1, r3
 8006668:	481b      	ldr	r0, [pc, #108]	@ (80066d8 <HAL_TIM_MspPostInit+0x28c>)
 800666a:	f003 f807 	bl	800967c <HAL_GPIO_Init>
}
 800666e:	e023      	b.n	80066b8 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM15)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1d      	ldr	r2, [pc, #116]	@ (80066ec <HAL_TIM_MspPostInit+0x2a0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d11e      	bne.n	80066b8 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800667a:	4b12      	ldr	r3, [pc, #72]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 800667c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006680:	4a10      	ldr	r2, [pc, #64]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 8006682:	f043 0301 	orr.w	r3, r3, #1
 8006686:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800668a:	4b0e      	ldr	r3, [pc, #56]	@ (80066c4 <HAL_TIM_MspPostInit+0x278>)
 800668c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006698:	2304      	movs	r3, #4
 800669a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800669c:	2302      	movs	r3, #2
 800669e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066a4:	2300      	movs	r3, #0
 80066a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80066a8:	2304      	movs	r3, #4
 80066aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80066b0:	4619      	mov	r1, r3
 80066b2:	4806      	ldr	r0, [pc, #24]	@ (80066cc <HAL_TIM_MspPostInit+0x280>)
 80066b4:	f002 ffe2 	bl	800967c <HAL_GPIO_Init>
}
 80066b8:	bf00      	nop
 80066ba:	3740      	adds	r7, #64	@ 0x40
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40010000 	.word	0x40010000
 80066c4:	58024400 	.word	0x58024400
 80066c8:	58021000 	.word	0x58021000
 80066cc:	58020000 	.word	0x58020000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	58020400 	.word	0x58020400
 80066dc:	40000c00 	.word	0x40000c00
 80066e0:	40010400 	.word	0x40010400
 80066e4:	58020800 	.word	0x58020800
 80066e8:	40001800 	.word	0x40001800
 80066ec:	40014000 	.word	0x40014000

080066f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b0c0      	sub	sp, #256	@ 0x100
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006708:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800670c:	22b8      	movs	r2, #184	@ 0xb8
 800670e:	2100      	movs	r1, #0
 8006710:	4618      	mov	r0, r3
 8006712:	f011 fa1f 	bl	8017b54 <memset>
  if(huart->Instance==UART4)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4ac3      	ldr	r2, [pc, #780]	@ (8006a28 <HAL_UART_MspInit+0x338>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d16b      	bne.n	80067f8 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006720:	f04f 0202 	mov.w	r2, #2
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800672c:	2300      	movs	r3, #0
 800672e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006732:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006736:	4618      	mov	r0, r3
 8006738:	f005 ff2a 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8006742:	f7ff f9e7 	bl	8005b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006746:	4bb9      	ldr	r3, [pc, #740]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800674c:	4ab7      	ldr	r2, [pc, #732]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800674e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006752:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006756:	4bb5      	ldr	r3, [pc, #724]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800675c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006764:	4bb1      	ldr	r3, [pc, #708]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800676a:	4ab0      	ldr	r2, [pc, #704]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006774:	4bad      	ldr	r3, [pc, #692]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006782:	4baa      	ldr	r3, [pc, #680]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006788:	4aa8      	ldr	r2, [pc, #672]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800678a:	f043 0308 	orr.w	r3, r3, #8
 800678e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006792:	4ba6      	ldr	r3, [pc, #664]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	627b      	str	r3, [r7, #36]	@ 0x24
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PB9     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80067a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067a8:	2302      	movs	r3, #2
 80067aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80067ba:	2308      	movs	r3, #8
 80067bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067c0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80067c4:	4619      	mov	r1, r3
 80067c6:	489a      	ldr	r0, [pc, #616]	@ (8006a30 <HAL_UART_MspInit+0x340>)
 80067c8:	f002 ff58 	bl	800967c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80067cc:	2301      	movs	r3, #1
 80067ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d2:	2302      	movs	r3, #2
 80067d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067de:	2300      	movs	r3, #0
 80067e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80067e4:	2308      	movs	r3, #8
 80067e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067ea:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80067ee:	4619      	mov	r1, r3
 80067f0:	4890      	ldr	r0, [pc, #576]	@ (8006a34 <HAL_UART_MspInit+0x344>)
 80067f2:	f002 ff43 	bl	800967c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 80067f6:	e111      	b.n	8006a1c <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART5)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a8e      	ldr	r2, [pc, #568]	@ (8006a38 <HAL_UART_MspInit+0x348>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d147      	bne.n	8006892 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8006802:	f04f 0202 	mov.w	r2, #2
 8006806:	f04f 0300 	mov.w	r3, #0
 800680a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800680e:	2300      	movs	r3, #0
 8006810:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006814:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006818:	4618      	mov	r0, r3
 800681a:	f005 feb9 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8006824:	f7ff f976 	bl	8005b14 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006828:	4b80      	ldr	r3, [pc, #512]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800682a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800682e:	4a7f      	ldr	r2, [pc, #508]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006830:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006834:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006838:	4b7c      	ldr	r3, [pc, #496]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800683a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800683e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006846:	4b79      	ldr	r3, [pc, #484]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800684c:	4a77      	ldr	r2, [pc, #476]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800684e:	f043 0302 	orr.w	r3, r3, #2
 8006852:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006856:	4b75      	ldr	r3, [pc, #468]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8006864:	f242 0320 	movw	r3, #8224	@ 0x2020
 8006868:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800686c:	2302      	movs	r3, #2
 800686e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006872:	2300      	movs	r3, #0
 8006874:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006878:	2300      	movs	r3, #0
 800687a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800687e:	230e      	movs	r3, #14
 8006880:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006884:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8006888:	4619      	mov	r1, r3
 800688a:	4869      	ldr	r0, [pc, #420]	@ (8006a30 <HAL_UART_MspInit+0x340>)
 800688c:	f002 fef6 	bl	800967c <HAL_GPIO_Init>
}
 8006890:	e0c4      	b.n	8006a1c <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART7)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a69      	ldr	r2, [pc, #420]	@ (8006a3c <HAL_UART_MspInit+0x34c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d147      	bne.n	800692c <HAL_UART_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800689c:	f04f 0202 	mov.w	r2, #2
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80068b2:	4618      	mov	r0, r3
 80068b4:	f005 fe6c 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 80068be:	f7ff f929 	bl	8005b14 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80068c2:	4b5a      	ldr	r3, [pc, #360]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 80068c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068c8:	4a58      	ldr	r2, [pc, #352]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 80068ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80068d2:	4b56      	ldr	r3, [pc, #344]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 80068d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80068e0:	4b52      	ldr	r3, [pc, #328]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 80068e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068e6:	4a51      	ldr	r2, [pc, #324]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 80068e8:	f043 0310 	orr.w	r3, r3, #16
 80068ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80068f0:	4b4e      	ldr	r3, [pc, #312]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 80068f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80068fe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8006902:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006906:	2302      	movs	r3, #2
 8006908:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690c:	2300      	movs	r3, #0
 800690e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006912:	2300      	movs	r3, #0
 8006914:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006918:	2307      	movs	r3, #7
 800691a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800691e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8006922:	4619      	mov	r1, r3
 8006924:	4846      	ldr	r0, [pc, #280]	@ (8006a40 <HAL_UART_MspInit+0x350>)
 8006926:	f002 fea9 	bl	800967c <HAL_GPIO_Init>
}
 800692a:	e077      	b.n	8006a1c <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART8)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a44      	ldr	r2, [pc, #272]	@ (8006a44 <HAL_UART_MspInit+0x354>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d172      	bne.n	8006a1c <HAL_UART_MspInit+0x32c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8006936:	f04f 0202 	mov.w	r2, #2
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006942:	2300      	movs	r3, #0
 8006944:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006948:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800694c:	4618      	mov	r0, r3
 800694e:	f005 fe1f 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8006958:	f7ff f8dc 	bl	8005b14 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800695c:	4b33      	ldr	r3, [pc, #204]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800695e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006962:	4a32      	ldr	r2, [pc, #200]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006964:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006968:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800696c:	4b2f      	ldr	r3, [pc, #188]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800696e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006972:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800697a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800697c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006980:	4a2a      	ldr	r2, [pc, #168]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 8006982:	f043 0310 	orr.w	r3, r3, #16
 8006986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800698a:	4b28      	ldr	r3, [pc, #160]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800698c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006998:	4b24      	ldr	r3, [pc, #144]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 800699a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800699e:	4a23      	ldr	r2, [pc, #140]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 80069a0:	f043 0308 	orr.w	r3, r3, #8
 80069a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80069a8:	4b20      	ldr	r3, [pc, #128]	@ (8006a2c <HAL_UART_MspInit+0x33c>)
 80069aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	60bb      	str	r3, [r7, #8]
 80069b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80069b6:	2303      	movs	r3, #3
 80069b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069bc:	2302      	movs	r3, #2
 80069be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c8:	2300      	movs	r3, #0
 80069ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80069ce:	2308      	movs	r3, #8
 80069d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069d4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80069d8:	4619      	mov	r1, r3
 80069da:	4819      	ldr	r0, [pc, #100]	@ (8006a40 <HAL_UART_MspInit+0x350>)
 80069dc:	f002 fe4e 	bl	800967c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 80069e0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80069e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e8:	2302      	movs	r3, #2
 80069ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069f4:	2300      	movs	r3, #0
 80069f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80069fa:	2308      	movs	r3, #8
 80069fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a00:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8006a04:	4619      	mov	r1, r3
 8006a06:	480b      	ldr	r0, [pc, #44]	@ (8006a34 <HAL_UART_MspInit+0x344>)
 8006a08:	f002 fe38 	bl	800967c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2100      	movs	r1, #0
 8006a10:	2053      	movs	r0, #83	@ 0x53
 8006a12:	f002 f814 	bl	8008a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8006a16:	2053      	movs	r0, #83	@ 0x53
 8006a18:	f002 f82b 	bl	8008a72 <HAL_NVIC_EnableIRQ>
}
 8006a1c:	bf00      	nop
 8006a1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	40004c00 	.word	0x40004c00
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	58020400 	.word	0x58020400
 8006a34:	58020c00 	.word	0x58020c00
 8006a38:	40005000 	.word	0x40005000
 8006a3c:	40007800 	.word	0x40007800
 8006a40:	58021000 	.word	0x58021000
 8006a44:	40007c00 	.word	0x40007c00

08006a48 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b0bc      	sub	sp, #240	@ 0xf0
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a50:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	60da      	str	r2, [r3, #12]
 8006a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006a60:	f107 0320 	add.w	r3, r7, #32
 8006a64:	22b8      	movs	r2, #184	@ 0xb8
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f011 f873 	bl	8017b54 <memset>
  if(husart->Instance==USART1)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a73      	ldr	r2, [pc, #460]	@ (8006c40 <HAL_USART_MspInit+0x1f8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d147      	bne.n	8006b08 <HAL_USART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006a78:	f04f 0201 	mov.w	r2, #1
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a8a:	f107 0320 	add.w	r3, r7, #32
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f005 fd7e 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8006a9a:	f7ff f83b 	bl	8005b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a9e:	4b69      	ldr	r3, [pc, #420]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aa4:	4a67      	ldr	r2, [pc, #412]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006aa6:	f043 0310 	orr.w	r3, r3, #16
 8006aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006aae:	4b65      	ldr	r3, [pc, #404]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	61fb      	str	r3, [r7, #28]
 8006aba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006abc:	4b61      	ldr	r3, [pc, #388]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ac2:	4a60      	ldr	r2, [pc, #384]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006acc:	4b5d      	ldr	r3, [pc, #372]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	69bb      	ldr	r3, [r7, #24]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 8006ada:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8006ade:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aee:	2300      	movs	r3, #0
 8006af0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006af4:	2307      	movs	r3, #7
 8006af6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006afa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8006afe:	4619      	mov	r1, r3
 8006b00:	4851      	ldr	r0, [pc, #324]	@ (8006c48 <HAL_USART_MspInit+0x200>)
 8006b02:	f002 fdbb 	bl	800967c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006b06:	e097      	b.n	8006c38 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART2)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8006c4c <HAL_USART_MspInit+0x204>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d146      	bne.n	8006ba0 <HAL_USART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006b12:	f04f 0202 	mov.w	r2, #2
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b24:	f107 0320 	add.w	r3, r7, #32
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f005 fd31 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_USART_MspInit+0xf0>
      Error_Handler();
 8006b34:	f7fe ffee 	bl	8005b14 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b38:	4b42      	ldr	r3, [pc, #264]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b3e:	4a41      	ldr	r2, [pc, #260]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006b48:	4b3e      	ldr	r3, [pc, #248]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b56:	4b3b      	ldr	r3, [pc, #236]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b5c:	4a39      	ldr	r2, [pc, #228]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006b5e:	f043 0308 	orr.w	r3, r3, #8
 8006b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006b66:	4b37      	ldr	r3, [pc, #220]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
 8006b74:	23e8      	movs	r3, #232	@ 0xe8
 8006b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b86:	2300      	movs	r3, #0
 8006b88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b8c:	2307      	movs	r3, #7
 8006b8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b92:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8006b96:	4619      	mov	r1, r3
 8006b98:	482d      	ldr	r0, [pc, #180]	@ (8006c50 <HAL_USART_MspInit+0x208>)
 8006b9a:	f002 fd6f 	bl	800967c <HAL_GPIO_Init>
}
 8006b9e:	e04b      	b.n	8006c38 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART3)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8006c54 <HAL_USART_MspInit+0x20c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d146      	bne.n	8006c38 <HAL_USART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006baa:	f04f 0202 	mov.w	r2, #2
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006bbc:	f107 0320 	add.w	r3, r7, #32
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f005 fce5 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <HAL_USART_MspInit+0x188>
      Error_Handler();
 8006bcc:	f7fe ffa2 	bl	8005b14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006bd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006be0:	4b18      	ldr	r3, [pc, #96]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006be6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006bee:	4b15      	ldr	r3, [pc, #84]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bf4:	4a13      	ldr	r2, [pc, #76]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006bf6:	f043 0308 	orr.w	r3, r3, #8
 8006bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006bfe:	4b11      	ldr	r3, [pc, #68]	@ (8006c44 <HAL_USART_MspInit+0x1fc>)
 8006c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8006c0c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8006c10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c14:	2302      	movs	r3, #2
 8006c16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006c26:	2307      	movs	r3, #7
 8006c28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c2c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8006c30:	4619      	mov	r1, r3
 8006c32:	4807      	ldr	r0, [pc, #28]	@ (8006c50 <HAL_USART_MspInit+0x208>)
 8006c34:	f002 fd22 	bl	800967c <HAL_GPIO_Init>
}
 8006c38:	bf00      	nop
 8006c3a:	37f0      	adds	r7, #240	@ 0xf0
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40011000 	.word	0x40011000
 8006c44:	58024400 	.word	0x58024400
 8006c48:	58020000 	.word	0x58020000
 8006c4c:	40004400 	.word	0x40004400
 8006c50:	58020c00 	.word	0x58020c00
 8006c54:	40004800 	.word	0x40004800

08006c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006c5c:	f005 fc7c 	bl	800c558 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006c60:	bf00      	nop
 8006c62:	e7fd      	b.n	8006c60 <NMI_Handler+0x8>

08006c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c68:	bf00      	nop
 8006c6a:	e7fd      	b.n	8006c68 <HardFault_Handler+0x4>

08006c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c70:	bf00      	nop
 8006c72:	e7fd      	b.n	8006c70 <MemManage_Handler+0x4>

08006c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c78:	bf00      	nop
 8006c7a:	e7fd      	b.n	8006c78 <BusFault_Handler+0x4>

08006c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c80:	bf00      	nop
 8006c82:	e7fd      	b.n	8006c80 <UsageFault_Handler+0x4>

08006c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c92:	b480      	push	{r7}
 8006c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c96:	bf00      	nop
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006cb2:	f000 fa31 	bl	8007118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006cb6:	bf00      	nop
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8006cc0:	4802      	ldr	r0, [pc, #8]	@ (8006ccc <UART8_IRQHandler+0x10>)
 8006cc2:	f00b fb0f 	bl	80122e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8006cc6:	bf00      	nop
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	24000e88 	.word	0x24000e88

08006cd0 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8006cd4:	4802      	ldr	r0, [pc, #8]	@ (8006ce0 <I2C4_EV_IRQHandler+0x10>)
 8006cd6:	f003 fa61 	bl	800a19c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8006cda:	bf00      	nop
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	24000804 	.word	0x24000804

08006ce4 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8006ce8:	4802      	ldr	r0, [pc, #8]	@ (8006cf4 <I2C4_ER_IRQHandler+0x10>)
 8006cea:	f003 fa71 	bl	800a1d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8006cee:	bf00      	nop
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	24000804 	.word	0x24000804

08006cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  return 1;
 8006cfc:	2301      	movs	r3, #1
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <_kill>:

int _kill(int pid, int sig)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006d12:	f010 ff71 	bl	8017bf8 <__errno>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2216      	movs	r2, #22
 8006d1a:	601a      	str	r2, [r3, #0]
  return -1;
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <_exit>:

void _exit (int status)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006d30:	f04f 31ff 	mov.w	r1, #4294967295
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff ffe7 	bl	8006d08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006d3a:	bf00      	nop
 8006d3c:	e7fd      	b.n	8006d3a <_exit+0x12>

08006d3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	e00a      	b.n	8006d66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006d50:	f3af 8000 	nop.w
 8006d54:	4601      	mov	r1, r0
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	60ba      	str	r2, [r7, #8]
 8006d5c:	b2ca      	uxtb	r2, r1
 8006d5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	3301      	adds	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	dbf0      	blt.n	8006d50 <_read+0x12>
  }

  return len;
 8006d6e:	687b      	ldr	r3, [r7, #4]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006da0:	605a      	str	r2, [r3, #4]
  return 0;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <_isatty>:

int _isatty(int file)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006db8:	2301      	movs	r3, #1
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b085      	sub	sp, #20
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006de8:	4a14      	ldr	r2, [pc, #80]	@ (8006e3c <_sbrk+0x5c>)
 8006dea:	4b15      	ldr	r3, [pc, #84]	@ (8006e40 <_sbrk+0x60>)
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006df4:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <_sbrk+0x64>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006dfc:	4b11      	ldr	r3, [pc, #68]	@ (8006e44 <_sbrk+0x64>)
 8006dfe:	4a12      	ldr	r2, [pc, #72]	@ (8006e48 <_sbrk+0x68>)
 8006e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e02:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <_sbrk+0x64>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4413      	add	r3, r2
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d207      	bcs.n	8006e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006e10:	f010 fef2 	bl	8017bf8 <__errno>
 8006e14:	4603      	mov	r3, r0
 8006e16:	220c      	movs	r2, #12
 8006e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	e009      	b.n	8006e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006e20:	4b08      	ldr	r3, [pc, #32]	@ (8006e44 <_sbrk+0x64>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006e26:	4b07      	ldr	r3, [pc, #28]	@ (8006e44 <_sbrk+0x64>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	4a05      	ldr	r2, [pc, #20]	@ (8006e44 <_sbrk+0x64>)
 8006e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006e32:	68fb      	ldr	r3, [r7, #12]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	24050000 	.word	0x24050000
 8006e40:	00000400 	.word	0x00000400
 8006e44:	24001040 	.word	0x24001040
 8006e48:	240011a8 	.word	0x240011a8

08006e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006e50:	4b32      	ldr	r3, [pc, #200]	@ (8006f1c <SystemInit+0xd0>)
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e56:	4a31      	ldr	r2, [pc, #196]	@ (8006f1c <SystemInit+0xd0>)
 8006e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006e60:	4b2f      	ldr	r3, [pc, #188]	@ (8006f20 <SystemInit+0xd4>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	2b06      	cmp	r3, #6
 8006e6a:	d807      	bhi.n	8006e7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8006f20 <SystemInit+0xd4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f023 030f 	bic.w	r3, r3, #15
 8006e74:	4a2a      	ldr	r2, [pc, #168]	@ (8006f20 <SystemInit+0xd4>)
 8006e76:	f043 0307 	orr.w	r3, r3, #7
 8006e7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006e7c:	4b29      	ldr	r3, [pc, #164]	@ (8006f24 <SystemInit+0xd8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a28      	ldr	r2, [pc, #160]	@ (8006f24 <SystemInit+0xd8>)
 8006e82:	f043 0301 	orr.w	r3, r3, #1
 8006e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006e88:	4b26      	ldr	r3, [pc, #152]	@ (8006f24 <SystemInit+0xd8>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006e8e:	4b25      	ldr	r3, [pc, #148]	@ (8006f24 <SystemInit+0xd8>)
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4924      	ldr	r1, [pc, #144]	@ (8006f24 <SystemInit+0xd8>)
 8006e94:	4b24      	ldr	r3, [pc, #144]	@ (8006f28 <SystemInit+0xdc>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006e9a:	4b21      	ldr	r3, [pc, #132]	@ (8006f20 <SystemInit+0xd4>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f20 <SystemInit+0xd4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f023 030f 	bic.w	r3, r3, #15
 8006eae:	4a1c      	ldr	r2, [pc, #112]	@ (8006f20 <SystemInit+0xd4>)
 8006eb0:	f043 0307 	orr.w	r3, r3, #7
 8006eb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f24 <SystemInit+0xd8>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006ebc:	4b19      	ldr	r3, [pc, #100]	@ (8006f24 <SystemInit+0xd8>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006ec2:	4b18      	ldr	r3, [pc, #96]	@ (8006f24 <SystemInit+0xd8>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006ec8:	4b16      	ldr	r3, [pc, #88]	@ (8006f24 <SystemInit+0xd8>)
 8006eca:	4a18      	ldr	r2, [pc, #96]	@ (8006f2c <SystemInit+0xe0>)
 8006ecc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006ece:	4b15      	ldr	r3, [pc, #84]	@ (8006f24 <SystemInit+0xd8>)
 8006ed0:	4a17      	ldr	r2, [pc, #92]	@ (8006f30 <SystemInit+0xe4>)
 8006ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006ed4:	4b13      	ldr	r3, [pc, #76]	@ (8006f24 <SystemInit+0xd8>)
 8006ed6:	4a17      	ldr	r2, [pc, #92]	@ (8006f34 <SystemInit+0xe8>)
 8006ed8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006eda:	4b12      	ldr	r3, [pc, #72]	@ (8006f24 <SystemInit+0xd8>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006ee0:	4b10      	ldr	r3, [pc, #64]	@ (8006f24 <SystemInit+0xd8>)
 8006ee2:	4a14      	ldr	r2, [pc, #80]	@ (8006f34 <SystemInit+0xe8>)
 8006ee4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f24 <SystemInit+0xd8>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006eec:	4b0d      	ldr	r3, [pc, #52]	@ (8006f24 <SystemInit+0xd8>)
 8006eee:	4a11      	ldr	r2, [pc, #68]	@ (8006f34 <SystemInit+0xe8>)
 8006ef0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f24 <SystemInit+0xd8>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8006f24 <SystemInit+0xd8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a09      	ldr	r2, [pc, #36]	@ (8006f24 <SystemInit+0xd8>)
 8006efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006f04:	4b07      	ldr	r3, [pc, #28]	@ (8006f24 <SystemInit+0xd8>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f38 <SystemInit+0xec>)
 8006f0c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8006f10:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006f12:	bf00      	nop
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	e000ed00 	.word	0xe000ed00
 8006f20:	52002000 	.word	0x52002000
 8006f24:	58024400 	.word	0x58024400
 8006f28:	eaf6ed7f 	.word	0xeaf6ed7f
 8006f2c:	02020200 	.word	0x02020200
 8006f30:	01ff0000 	.word	0x01ff0000
 8006f34:	01010280 	.word	0x01010280
 8006f38:	52004000 	.word	0x52004000

08006f3c <SensorManager_Init>:
    "GPS",
    "LIS2MDLTR",
    // "MS560702BA03"
};

telemetry_init_status SensorManager_Init(void) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0

    size_t num_sensors = sizeof(init_functions) / sizeof(init_functions[0]);
 8006f42:	2306      	movs	r3, #6
 8006f44:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60bb      	str	r3, [r7, #8]
 8006f52:	e01c      	b.n	8006f8e <SensorManager_Init+0x52>
        bool status = init_functions[i]();
 8006f54:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc8 <SensorManager_Init+0x8c>)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f5c:	4798      	blx	r3
 8006f5e:	4603      	mov	r3, r0
 8006f60:	70fb      	strb	r3, [r7, #3]
        if (!status) {
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	f083 0301 	eor.w	r3, r3, #1
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <SensorManager_Init+0x48>
            printf("%s initialization failed.\n", sensor_names[i]);
 8006f6e:	4a17      	ldr	r2, [pc, #92]	@ (8006fcc <SensorManager_Init+0x90>)
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f76:	4619      	mov	r1, r3
 8006f78:	4815      	ldr	r0, [pc, #84]	@ (8006fd0 <SensorManager_Init+0x94>)
 8006f7a:	f010 fc83 	bl	8017884 <iprintf>
            all_success = false;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
 8006f82:	e001      	b.n	8006f88 <SensorManager_Init+0x4c>
        } else {
            any_success = true;
 8006f84:	2301      	movs	r3, #1
 8006f86:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d3de      	bcc.n	8006f54 <SensorManager_Init+0x18>
        }
    }

    if (all_success) {
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <SensorManager_Init+0x6a>
        printf("All sensors initialized successfully.\n");
 8006f9c:	480d      	ldr	r0, [pc, #52]	@ (8006fd4 <SensorManager_Init+0x98>)
 8006f9e:	f010 fcd9 	bl	8017954 <puts>
        return TELEMETRY_INIT_SUCCESS;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e00b      	b.n	8006fbe <SensorManager_Init+0x82>
    } else if (any_success) {
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <SensorManager_Init+0x7a>
        printf("Partial initialization success.\n");
 8006fac:	480a      	ldr	r0, [pc, #40]	@ (8006fd8 <SensorManager_Init+0x9c>)
 8006fae:	f010 fcd1 	bl	8017954 <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e003      	b.n	8006fbe <SensorManager_Init+0x82>
    } else {
        printf("All sensors initialization failed.\n");
 8006fb6:	4809      	ldr	r0, [pc, #36]	@ (8006fdc <SensorManager_Init+0xa0>)
 8006fb8:	f010 fccc 	bl	8017954 <puts>
        return TELEMETRY_INIT_FAILURE;
 8006fbc:	2302      	movs	r3, #2
    }
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	24000154 	.word	0x24000154
 8006fcc:	2400016c 	.word	0x2400016c
 8006fd0:	0801b224 	.word	0x0801b224
 8006fd4:	0801b240 	.word	0x0801b240
 8006fd8:	0801b268 	.word	0x0801b268
 8006fdc:	0801b288 	.word	0x0801b288

08006fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006fe4:	f7ff ff32 	bl	8006e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006fe8:	480c      	ldr	r0, [pc, #48]	@ (800701c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006fea:	490d      	ldr	r1, [pc, #52]	@ (8007020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006fec:	4a0d      	ldr	r2, [pc, #52]	@ (8007024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ff0:	e002      	b.n	8006ff8 <LoopCopyDataInit>

08006ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ff6:	3304      	adds	r3, #4

08006ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ffc:	d3f9      	bcc.n	8006ff2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8007028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007000:	4c0a      	ldr	r4, [pc, #40]	@ (800702c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007004:	e001      	b.n	800700a <LoopFillZerobss>

08007006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007008:	3204      	adds	r2, #4

0800700a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800700a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800700c:	d3fb      	bcc.n	8007006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800700e:	f010 fdf9 	bl	8017c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007012:	f7fd fa9b 	bl	800454c <main>
  bx  lr
 8007016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007018:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800701c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007020:	24000354 	.word	0x24000354
  ldr r2, =_sidata
 8007024:	0801b748 	.word	0x0801b748
  ldr r2, =_sbss
 8007028:	24000358 	.word	0x24000358
  ldr r4, =_ebss
 800702c:	240011a8 	.word	0x240011a8

08007030 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007030:	e7fe      	b.n	8007030 <ADC3_IRQHandler>
	...

08007034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800703a:	2003      	movs	r0, #3
 800703c:	f001 fcf4 	bl	8008a28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007040:	f005 f8b4 	bl	800c1ac <HAL_RCC_GetSysClockFreq>
 8007044:	4602      	mov	r2, r0
 8007046:	4b15      	ldr	r3, [pc, #84]	@ (800709c <HAL_Init+0x68>)
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	0a1b      	lsrs	r3, r3, #8
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	4913      	ldr	r1, [pc, #76]	@ (80070a0 <HAL_Init+0x6c>)
 8007052:	5ccb      	ldrb	r3, [r1, r3]
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	fa22 f303 	lsr.w	r3, r2, r3
 800705c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800705e:	4b0f      	ldr	r3, [pc, #60]	@ (800709c <HAL_Init+0x68>)
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	f003 030f 	and.w	r3, r3, #15
 8007066:	4a0e      	ldr	r2, [pc, #56]	@ (80070a0 <HAL_Init+0x6c>)
 8007068:	5cd3      	ldrb	r3, [r2, r3]
 800706a:	f003 031f 	and.w	r3, r3, #31
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	fa22 f303 	lsr.w	r3, r2, r3
 8007074:	4a0b      	ldr	r2, [pc, #44]	@ (80070a4 <HAL_Init+0x70>)
 8007076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007078:	4a0b      	ldr	r2, [pc, #44]	@ (80070a8 <HAL_Init+0x74>)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800707e:	200f      	movs	r0, #15
 8007080:	f000 f814 	bl	80070ac <HAL_InitTick>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e002      	b.n	8007094 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800708e:	f7fe fd47 	bl	8005b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	58024400 	.word	0x58024400
 80070a0:	0801b2ac 	.word	0x0801b2ac
 80070a4:	24000150 	.word	0x24000150
 80070a8:	2400014c 	.word	0x2400014c

080070ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80070b4:	4b15      	ldr	r3, [pc, #84]	@ (800710c <HAL_InitTick+0x60>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e021      	b.n	8007104 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80070c0:	4b13      	ldr	r3, [pc, #76]	@ (8007110 <HAL_InitTick+0x64>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	4b11      	ldr	r3, [pc, #68]	@ (800710c <HAL_InitTick+0x60>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	4619      	mov	r1, r3
 80070ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80070ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80070d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 fcd9 	bl	8008a8e <HAL_SYSTICK_Config>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e00e      	b.n	8007104 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b0f      	cmp	r3, #15
 80070ea:	d80a      	bhi.n	8007102 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070ec:	2200      	movs	r2, #0
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	f001 fca3 	bl	8008a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070f8:	4a06      	ldr	r2, [pc, #24]	@ (8007114 <HAL_InitTick+0x68>)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	e000      	b.n	8007104 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	24000188 	.word	0x24000188
 8007110:	2400014c 	.word	0x2400014c
 8007114:	24000184 	.word	0x24000184

08007118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800711c:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <HAL_IncTick+0x20>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	4b06      	ldr	r3, [pc, #24]	@ (800713c <HAL_IncTick+0x24>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4413      	add	r3, r2
 8007128:	4a04      	ldr	r2, [pc, #16]	@ (800713c <HAL_IncTick+0x24>)
 800712a:	6013      	str	r3, [r2, #0]
}
 800712c:	bf00      	nop
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	24000188 	.word	0x24000188
 800713c:	24001044 	.word	0x24001044

08007140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  return uwTick;
 8007144:	4b03      	ldr	r3, [pc, #12]	@ (8007154 <HAL_GetTick+0x14>)
 8007146:	681b      	ldr	r3, [r3, #0]
}
 8007148:	4618      	mov	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	24001044 	.word	0x24001044

08007158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007160:	f7ff ffee 	bl	8007140 <HAL_GetTick>
 8007164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d005      	beq.n	800717e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007172:	4b0a      	ldr	r3, [pc, #40]	@ (800719c <HAL_Delay+0x44>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800717e:	bf00      	nop
 8007180:	f7ff ffde 	bl	8007140 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	429a      	cmp	r2, r3
 800718e:	d8f7      	bhi.n	8007180 <HAL_Delay+0x28>
  {
  }
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	24000188 	.word	0x24000188

080071a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	609a      	str	r2, [r3, #8]
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	431a      	orrs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	609a      	str	r2, [r3, #8]
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3360      	adds	r3, #96	@ 0x60
 800721a:	461a      	mov	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4a10      	ldr	r2, [pc, #64]	@ (8007268 <LL_ADC_SetOffset+0x60>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d10b      	bne.n	8007244 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	4313      	orrs	r3, r2
 800723a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8007242:	e00b      	b.n	800725c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	430b      	orrs	r3, r1
 8007256:	431a      	orrs	r2, r3
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	601a      	str	r2, [r3, #0]
}
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	58026000 	.word	0x58026000

0800726c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3360      	adds	r3, #96	@ 0x60
 800727a:	461a      	mov	r2, r3
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f003 031f 	and.w	r3, r3, #31
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	fa01 f303 	lsl.w	r3, r1, r3
 80072b8:	431a      	orrs	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	611a      	str	r2, [r3, #16]
}
 80072be:	bf00      	nop
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
	...

080072cc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4a0c      	ldr	r2, [pc, #48]	@ (800730c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d00e      	beq.n	80072fe <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3360      	adds	r3, #96	@ 0x60
 80072e4:	461a      	mov	r2, r3
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	431a      	orrs	r2, r3
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	601a      	str	r2, [r3, #0]
  }
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	58026000 	.word	0x58026000

08007310 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4a0c      	ldr	r2, [pc, #48]	@ (8007350 <LL_ADC_SetOffsetSaturation+0x40>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d10e      	bne.n	8007342 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3360      	adds	r3, #96	@ 0x60
 8007328:	461a      	mov	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	431a      	orrs	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	58026000 	.word	0x58026000

08007354 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4a0c      	ldr	r2, [pc, #48]	@ (8007394 <LL_ADC_SetOffsetSign+0x40>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d10e      	bne.n	8007386 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3360      	adds	r3, #96	@ 0x60
 800736c:	461a      	mov	r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	431a      	orrs	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	58026000 	.word	0x58026000

08007398 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3360      	adds	r3, #96	@ 0x60
 80073a8:	461a      	mov	r2, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4a0c      	ldr	r2, [pc, #48]	@ (80073e8 <LL_ADC_SetOffsetState+0x50>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d108      	bne.n	80073cc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	431a      	orrs	r2, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80073ca:	e007      	b.n	80073dc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	431a      	orrs	r2, r3
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	601a      	str	r2, [r3, #0]
}
 80073dc:	bf00      	nop
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	58026000 	.word	0x58026000

080073ec <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3330      	adds	r3, #48	@ 0x30
 80073fc:	461a      	mov	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	f003 030c 	and.w	r3, r3, #12
 8007408:	4413      	add	r3, r2
 800740a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	211f      	movs	r1, #31
 8007418:	fa01 f303 	lsl.w	r3, r1, r3
 800741c:	43db      	mvns	r3, r3
 800741e:	401a      	ands	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	0e9b      	lsrs	r3, r3, #26
 8007424:	f003 011f 	and.w	r1, r3, #31
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f003 031f 	and.w	r3, r3, #31
 800742e:	fa01 f303 	lsl.w	r3, r1, r3
 8007432:	431a      	orrs	r2, r3
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007438:	bf00      	nop
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3314      	adds	r3, #20
 8007454:	461a      	mov	r2, r3
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	0e5b      	lsrs	r3, r3, #25
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	4413      	add	r3, r2
 8007462:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	0d1b      	lsrs	r3, r3, #20
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2107      	movs	r1, #7
 8007472:	fa01 f303 	lsl.w	r3, r1, r3
 8007476:	43db      	mvns	r3, r3
 8007478:	401a      	ands	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	0d1b      	lsrs	r3, r3, #20
 800747e:	f003 031f 	and.w	r3, r3, #31
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	fa01 f303 	lsl.w	r3, r1, r3
 8007488:	431a      	orrs	r2, r3
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
	...

0800749c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007514 <LL_ADC_SetChannelSingleDiff+0x78>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d115      	bne.n	80074dc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074bc:	43db      	mvns	r3, r3
 80074be:	401a      	ands	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f003 0318 	and.w	r3, r3, #24
 80074c6:	4914      	ldr	r1, [pc, #80]	@ (8007518 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80074c8:	40d9      	lsrs	r1, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	400b      	ands	r3, r1
 80074ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074d2:	431a      	orrs	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80074da:	e014      	b.n	8007506 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e8:	43db      	mvns	r3, r3
 80074ea:	401a      	ands	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f003 0318 	and.w	r3, r3, #24
 80074f2:	4909      	ldr	r1, [pc, #36]	@ (8007518 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80074f4:	40d9      	lsrs	r1, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	400b      	ands	r3, r1
 80074fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074fe:	431a      	orrs	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8007506:	bf00      	nop
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	58026000 	.word	0x58026000
 8007518:	000fffff 	.word	0x000fffff

0800751c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	4b04      	ldr	r3, [pc, #16]	@ (800753c <LL_ADC_DisableDeepPowerDown+0x20>)
 800752a:	4013      	ands	r3, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6093      	str	r3, [r2, #8]
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	5fffffc0 	.word	0x5fffffc0

08007540 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007554:	d101      	bne.n	800755a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007556:	2301      	movs	r3, #1
 8007558:	e000      	b.n	800755c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	4b05      	ldr	r3, [pc, #20]	@ (800758c <LL_ADC_EnableInternalRegulator+0x24>)
 8007576:	4013      	ands	r3, r2
 8007578:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	6fffffc0 	.word	0x6fffffc0

08007590 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075a4:	d101      	bne.n	80075aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <LL_ADC_IsEnabled+0x18>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e000      	b.n	80075d2 <LL_ADC_IsEnabled+0x1a>
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d101      	bne.n	80075f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b08      	cmp	r3, #8
 8007616:	d101      	bne.n	800761c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
	...

0800762c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800762c:	b590      	push	{r4, r7, lr}
 800762e:	b089      	sub	sp, #36	@ 0x24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007638:	2300      	movs	r3, #0
 800763a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e1ee      	b.n	8007a24 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007650:	2b00      	cmp	r3, #0
 8007652:	d109      	bne.n	8007668 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fe fa7d 	bl	8005b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff ff67 	bl	8007540 <LL_ADC_IsDeepPowerDownEnabled>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff ff4d 	bl	800751c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff ff82 	bl	8007590 <LL_ADC_IsInternalRegulatorEnabled>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d114      	bne.n	80076bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff ff66 	bl	8007568 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800769c:	4b8e      	ldr	r3, [pc, #568]	@ (80078d8 <HAL_ADC_Init+0x2ac>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	099b      	lsrs	r3, r3, #6
 80076a2:	4a8e      	ldr	r2, [pc, #568]	@ (80078dc <HAL_ADC_Init+0x2b0>)
 80076a4:	fba2 2303 	umull	r2, r3, r2, r3
 80076a8:	099b      	lsrs	r3, r3, #6
 80076aa:	3301      	adds	r3, #1
 80076ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80076ae:	e002      	b.n	80076b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f9      	bne.n	80076b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7ff ff65 	bl	8007590 <LL_ADC_IsInternalRegulatorEnabled>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10d      	bne.n	80076e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076d0:	f043 0210 	orr.w	r2, r3, #16
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076dc:	f043 0201 	orr.w	r2, r3, #1
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff ff76 	bl	80075de <LL_ADC_REG_IsConversionOngoing>
 80076f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f040 8188 	bne.w	8007a12 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 8184 	bne.w	8007a12 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800770e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007712:	f043 0202 	orr.w	r2, r3, #2
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff ff4a 	bl	80075b8 <LL_ADC_IsEnabled>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d136      	bne.n	8007798 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a6c      	ldr	r2, [pc, #432]	@ (80078e0 <HAL_ADC_Init+0x2b4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d004      	beq.n	800773e <HAL_ADC_Init+0x112>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a6a      	ldr	r2, [pc, #424]	@ (80078e4 <HAL_ADC_Init+0x2b8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d10e      	bne.n	800775c <HAL_ADC_Init+0x130>
 800773e:	4868      	ldr	r0, [pc, #416]	@ (80078e0 <HAL_ADC_Init+0x2b4>)
 8007740:	f7ff ff3a 	bl	80075b8 <LL_ADC_IsEnabled>
 8007744:	4604      	mov	r4, r0
 8007746:	4867      	ldr	r0, [pc, #412]	@ (80078e4 <HAL_ADC_Init+0x2b8>)
 8007748:	f7ff ff36 	bl	80075b8 <LL_ADC_IsEnabled>
 800774c:	4603      	mov	r3, r0
 800774e:	4323      	orrs	r3, r4
 8007750:	2b00      	cmp	r3, #0
 8007752:	bf0c      	ite	eq
 8007754:	2301      	moveq	r3, #1
 8007756:	2300      	movne	r3, #0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	e008      	b.n	800776e <HAL_ADC_Init+0x142>
 800775c:	4862      	ldr	r0, [pc, #392]	@ (80078e8 <HAL_ADC_Init+0x2bc>)
 800775e:	f7ff ff2b 	bl	80075b8 <LL_ADC_IsEnabled>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	bf0c      	ite	eq
 8007768:	2301      	moveq	r3, #1
 800776a:	2300      	movne	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d012      	beq.n	8007798 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a5a      	ldr	r2, [pc, #360]	@ (80078e0 <HAL_ADC_Init+0x2b4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d004      	beq.n	8007786 <HAL_ADC_Init+0x15a>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a58      	ldr	r2, [pc, #352]	@ (80078e4 <HAL_ADC_Init+0x2b8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d101      	bne.n	800778a <HAL_ADC_Init+0x15e>
 8007786:	4a59      	ldr	r2, [pc, #356]	@ (80078ec <HAL_ADC_Init+0x2c0>)
 8007788:	e000      	b.n	800778c <HAL_ADC_Init+0x160>
 800778a:	4a59      	ldr	r2, [pc, #356]	@ (80078f0 <HAL_ADC_Init+0x2c4>)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	4619      	mov	r1, r3
 8007792:	4610      	mov	r0, r2
 8007794:	f7ff fd04 	bl	80071a0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a52      	ldr	r2, [pc, #328]	@ (80078e8 <HAL_ADC_Init+0x2bc>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d129      	bne.n	80077f6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	7e5b      	ldrb	r3, [r3, #25]
 80077a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80077ac:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80077b2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d013      	beq.n	80077e4 <HAL_ADC_Init+0x1b8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	2b0c      	cmp	r3, #12
 80077c2:	d00d      	beq.n	80077e0 <HAL_ADC_Init+0x1b4>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b1c      	cmp	r3, #28
 80077ca:	d007      	beq.n	80077dc <HAL_ADC_Init+0x1b0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b18      	cmp	r3, #24
 80077d2:	d101      	bne.n	80077d8 <HAL_ADC_Init+0x1ac>
 80077d4:	2318      	movs	r3, #24
 80077d6:	e006      	b.n	80077e6 <HAL_ADC_Init+0x1ba>
 80077d8:	2300      	movs	r3, #0
 80077da:	e004      	b.n	80077e6 <HAL_ADC_Init+0x1ba>
 80077dc:	2310      	movs	r3, #16
 80077de:	e002      	b.n	80077e6 <HAL_ADC_Init+0x1ba>
 80077e0:	2308      	movs	r3, #8
 80077e2:	e000      	b.n	80077e6 <HAL_ADC_Init+0x1ba>
 80077e4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80077e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80077f0:	4313      	orrs	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
 80077f4:	e00e      	b.n	8007814 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	7e5b      	ldrb	r3, [r3, #25]
 80077fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007800:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007806:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800780e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007810:	4313      	orrs	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d106      	bne.n	800782c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	3b01      	subs	r3, #1
 8007824:	045b      	lsls	r3, r3, #17
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	4313      	orrs	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007830:	2b00      	cmp	r3, #0
 8007832:	d009      	beq.n	8007848 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007838:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007840:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	4313      	orrs	r3, r2
 8007846:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a26      	ldr	r2, [pc, #152]	@ (80078e8 <HAL_ADC_Init+0x2bc>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d115      	bne.n	800787e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	4b26      	ldr	r3, [pc, #152]	@ (80078f4 <HAL_ADC_Init+0x2c8>)
 800785a:	4013      	ands	r3, r2
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	6812      	ldr	r2, [r2, #0]
 8007860:	69b9      	ldr	r1, [r7, #24]
 8007862:	430b      	orrs	r3, r1
 8007864:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	611a      	str	r2, [r3, #16]
 800787c:	e009      	b.n	8007892 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	4b1c      	ldr	r3, [pc, #112]	@ (80078f8 <HAL_ADC_Init+0x2cc>)
 8007886:	4013      	ands	r3, r2
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6812      	ldr	r2, [r2, #0]
 800788c:	69b9      	ldr	r1, [r7, #24]
 800788e:	430b      	orrs	r3, r1
 8007890:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fea1 	bl	80075de <LL_ADC_REG_IsConversionOngoing>
 800789c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff feae 	bl	8007604 <LL_ADC_INJ_IsConversionOngoing>
 80078a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 808e 	bne.w	80079ce <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f040 808a 	bne.w	80079ce <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a0a      	ldr	r2, [pc, #40]	@ (80078e8 <HAL_ADC_Init+0x2bc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d11b      	bne.n	80078fc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	7e1b      	ldrb	r3, [r3, #24]
 80078c8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80078d0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80078d2:	4313      	orrs	r3, r2
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	e018      	b.n	800790a <HAL_ADC_Init+0x2de>
 80078d8:	2400014c 	.word	0x2400014c
 80078dc:	053e2d63 	.word	0x053e2d63
 80078e0:	40022000 	.word	0x40022000
 80078e4:	40022100 	.word	0x40022100
 80078e8:	58026000 	.word	0x58026000
 80078ec:	40022300 	.word	0x40022300
 80078f0:	58026300 	.word	0x58026300
 80078f4:	fff04007 	.word	0xfff04007
 80078f8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	7e1b      	ldrb	r3, [r3, #24]
 8007900:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8007906:	4313      	orrs	r3, r2
 8007908:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	4b46      	ldr	r3, [pc, #280]	@ (8007a2c <HAL_ADC_Init+0x400>)
 8007912:	4013      	ands	r3, r2
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6812      	ldr	r2, [r2, #0]
 8007918:	69b9      	ldr	r1, [r7, #24]
 800791a:	430b      	orrs	r3, r1
 800791c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007924:	2b01      	cmp	r3, #1
 8007926:	d137      	bne.n	8007998 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a3f      	ldr	r2, [pc, #252]	@ (8007a30 <HAL_ADC_Init+0x404>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d116      	bne.n	8007966 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	4b3d      	ldr	r3, [pc, #244]	@ (8007a34 <HAL_ADC_Init+0x408>)
 8007940:	4013      	ands	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800794a:	4311      	orrs	r1, r2
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007950:	4311      	orrs	r1, r2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007956:	430a      	orrs	r2, r1
 8007958:	431a      	orrs	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0201 	orr.w	r2, r2, #1
 8007962:	611a      	str	r2, [r3, #16]
 8007964:	e020      	b.n	80079a8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	4b32      	ldr	r3, [pc, #200]	@ (8007a38 <HAL_ADC_Init+0x40c>)
 800796e:	4013      	ands	r3, r2
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007974:	3a01      	subs	r2, #1
 8007976:	0411      	lsls	r1, r2, #16
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800797c:	4311      	orrs	r1, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007982:	4311      	orrs	r1, r2
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007988:	430a      	orrs	r2, r1
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0201 	orr.w	r2, r2, #1
 8007994:	611a      	str	r2, [r3, #16]
 8007996:	e007      	b.n	80079a8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691a      	ldr	r2, [r3, #16]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0201 	bic.w	r2, r2, #1
 80079a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007a30 <HAL_ADC_Init+0x404>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d002      	beq.n	80079ce <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fd67 	bl	800849c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d10c      	bne.n	80079f0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079dc:	f023 010f 	bic.w	r1, r3, #15
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	1e5a      	subs	r2, r3, #1
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80079ee:	e007      	b.n	8007a00 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 020f 	bic.w	r2, r2, #15
 80079fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a04:	f023 0303 	bic.w	r3, r3, #3
 8007a08:	f043 0201 	orr.w	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007a10:	e007      	b.n	8007a22 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a16:	f043 0210 	orr.w	r2, r3, #16
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007a22:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3724      	adds	r7, #36	@ 0x24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd90      	pop	{r4, r7, pc}
 8007a2c:	ffffbffc 	.word	0xffffbffc
 8007a30:	58026000 	.word	0x58026000
 8007a34:	fc00f81f 	.word	0xfc00f81f
 8007a38:	fc00f81e 	.word	0xfc00f81e

08007a3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007a3c:	b590      	push	{r4, r7, lr}
 8007a3e:	b0b9      	sub	sp, #228	@ 0xe4
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a56:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	4aab      	ldr	r2, [pc, #684]	@ (8007d0c <HAL_ADC_ConfigChannel+0x2d0>)
 8007a5e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d102      	bne.n	8007a70 <HAL_ADC_ConfigChannel+0x34>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	f000 bcfe 	b.w	800846c <HAL_ADC_ConfigChannel+0xa30>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff fdae 	bl	80075de <LL_ADC_REG_IsConversionOngoing>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 84e2 	bne.w	800844e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	db38      	blt.n	8007b04 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a9e      	ldr	r2, [pc, #632]	@ (8007d10 <HAL_ADC_ConfigChannel+0x2d4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d033      	beq.n	8007b04 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d108      	bne.n	8007aba <HAL_ADC_ConfigChannel+0x7e>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	0e9b      	lsrs	r3, r3, #26
 8007aae:	f003 031f 	and.w	r3, r3, #31
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab8:	e01d      	b.n	8007af6 <HAL_ADC_ConfigChannel+0xba>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ac6:	fa93 f3a3 	rbit	r3, r3
 8007aca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007ace:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8007ade:	2320      	movs	r3, #32
 8007ae0:	e004      	b.n	8007aec <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8007ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ae6:	fab3 f383 	clz	r3, r3
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	f003 031f 	and.w	r3, r3, #31
 8007af0:	2201      	movs	r2, #1
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	69d1      	ldr	r1, [r2, #28]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6812      	ldr	r2, [r2, #0]
 8007b00:	430b      	orrs	r3, r1
 8007b02:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	6859      	ldr	r1, [r3, #4]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	f7ff fc6b 	bl	80073ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff fd5f 	bl	80075de <LL_ADC_REG_IsConversionOngoing>
 8007b20:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fd6b 	bl	8007604 <LL_ADC_INJ_IsConversionOngoing>
 8007b2e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 8270 	bne.w	800801c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007b3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f040 826b 	bne.w	800801c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	6819      	ldr	r1, [r3, #0]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f7ff fc76 	bl	8007444 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a6c      	ldr	r2, [pc, #432]	@ (8007d10 <HAL_ADC_ConfigChannel+0x2d4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d10d      	bne.n	8007b7e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	695a      	ldr	r2, [r3, #20]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	08db      	lsrs	r3, r3, #3
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b7c:	e032      	b.n	8007be4 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007b7e:	4b65      	ldr	r3, [pc, #404]	@ (8007d14 <HAL_ADC_ConfigChannel+0x2d8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007b86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b8a:	d10b      	bne.n	8007ba4 <HAL_ADC_ConfigChannel+0x168>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	695a      	ldr	r2, [r3, #20]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	089b      	lsrs	r3, r3, #2
 8007b98:	f003 0307 	and.w	r3, r3, #7
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	e01d      	b.n	8007be0 <HAL_ADC_ConfigChannel+0x1a4>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f003 0310 	and.w	r3, r3, #16
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10b      	bne.n	8007bca <HAL_ADC_ConfigChannel+0x18e>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	695a      	ldr	r2, [r3, #20]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	089b      	lsrs	r3, r3, #2
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	e00a      	b.n	8007be0 <HAL_ADC_ConfigChannel+0x1a4>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	695a      	ldr	r2, [r3, #20]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	089b      	lsrs	r3, r3, #2
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007be0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d048      	beq.n	8007c7e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6818      	ldr	r0, [r3, #0]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	6919      	ldr	r1, [r3, #16]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bfc:	f7ff fb04 	bl	8007208 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a42      	ldr	r2, [pc, #264]	@ (8007d10 <HAL_ADC_ConfigChannel+0x2d4>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d119      	bne.n	8007c3e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	6919      	ldr	r1, [r3, #16]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	461a      	mov	r2, r3
 8007c18:	f7ff fb9c 	bl	8007354 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	6919      	ldr	r1, [r3, #16]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d102      	bne.n	8007c34 <HAL_ADC_ConfigChannel+0x1f8>
 8007c2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c32:	e000      	b.n	8007c36 <HAL_ADC_ConfigChannel+0x1fa>
 8007c34:	2300      	movs	r3, #0
 8007c36:	461a      	mov	r2, r3
 8007c38:	f7ff fb6a 	bl	8007310 <LL_ADC_SetOffsetSaturation>
 8007c3c:	e1ee      	b.n	800801c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6919      	ldr	r1, [r3, #16]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d102      	bne.n	8007c56 <HAL_ADC_ConfigChannel+0x21a>
 8007c50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c54:	e000      	b.n	8007c58 <HAL_ADC_ConfigChannel+0x21c>
 8007c56:	2300      	movs	r3, #0
 8007c58:	461a      	mov	r2, r3
 8007c5a:	f7ff fb37 	bl	80072cc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6919      	ldr	r1, [r3, #16]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	7e1b      	ldrb	r3, [r3, #24]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d102      	bne.n	8007c74 <HAL_ADC_ConfigChannel+0x238>
 8007c6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007c72:	e000      	b.n	8007c76 <HAL_ADC_ConfigChannel+0x23a>
 8007c74:	2300      	movs	r3, #0
 8007c76:	461a      	mov	r2, r3
 8007c78:	f7ff fb0e 	bl	8007298 <LL_ADC_SetDataRightShift>
 8007c7c:	e1ce      	b.n	800801c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a23      	ldr	r2, [pc, #140]	@ (8007d10 <HAL_ADC_ConfigChannel+0x2d4>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	f040 8181 	bne.w	8007f8c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2100      	movs	r1, #0
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff faeb 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <HAL_ADC_ConfigChannel+0x27a>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fae0 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007cac:	4603      	mov	r3, r0
 8007cae:	0e9b      	lsrs	r3, r3, #26
 8007cb0:	f003 021f 	and.w	r2, r3, #31
 8007cb4:	e01e      	b.n	8007cf4 <HAL_ADC_ConfigChannel+0x2b8>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2100      	movs	r1, #0
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff fad5 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ccc:	fa93 f3a3 	rbit	r3, r3
 8007cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8007cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8007cdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	e004      	b.n	8007cf2 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8007ce8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007cec:	fab3 f383 	clz	r3, r3
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10b      	bne.n	8007d18 <HAL_ADC_ConfigChannel+0x2dc>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	0e9b      	lsrs	r3, r3, #26
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	e01e      	b.n	8007d4a <HAL_ADC_ConfigChannel+0x30e>
 8007d0c:	47ff0000 	.word	0x47ff0000
 8007d10:	58026000 	.word	0x58026000
 8007d14:	5c001000 	.word	0x5c001000
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d24:	fa93 f3a3 	rbit	r3, r3
 8007d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8007d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8007d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8007d3c:	2320      	movs	r3, #32
 8007d3e:	e004      	b.n	8007d4a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8007d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d44:	fab3 f383 	clz	r3, r3
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d106      	bne.n	8007d5c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	2100      	movs	r1, #0
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fb1e 	bl	8007398 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2101      	movs	r1, #1
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff fa82 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <HAL_ADC_ConfigChannel+0x34c>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2101      	movs	r1, #1
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff fa77 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	0e9b      	lsrs	r3, r3, #26
 8007d82:	f003 021f 	and.w	r2, r3, #31
 8007d86:	e01e      	b.n	8007dc6 <HAL_ADC_ConfigChannel+0x38a>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fa6c 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007d94:	4603      	mov	r3, r0
 8007d96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d9e:	fa93 f3a3 	rbit	r3, r3
 8007da2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8007da6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007daa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8007dae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8007db6:	2320      	movs	r3, #32
 8007db8:	e004      	b.n	8007dc4 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8007dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007dbe:	fab3 f383 	clz	r3, r3
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d105      	bne.n	8007dde <HAL_ADC_ConfigChannel+0x3a2>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	0e9b      	lsrs	r3, r3, #26
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	e018      	b.n	8007e10 <HAL_ADC_ConfigChannel+0x3d4>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007de6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007dea:	fa93 f3a3 	rbit	r3, r3
 8007dee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8007df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007df6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8007dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8007e02:	2320      	movs	r3, #32
 8007e04:	e004      	b.n	8007e10 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8007e06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e0a:	fab3 f383 	clz	r3, r3
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d106      	bne.n	8007e22 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff fabb 	bl	8007398 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2102      	movs	r1, #2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff fa1f 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10a      	bne.n	8007e4e <HAL_ADC_ConfigChannel+0x412>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2102      	movs	r1, #2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff fa14 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007e44:	4603      	mov	r3, r0
 8007e46:	0e9b      	lsrs	r3, r3, #26
 8007e48:	f003 021f 	and.w	r2, r3, #31
 8007e4c:	e01e      	b.n	8007e8c <HAL_ADC_ConfigChannel+0x450>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2102      	movs	r1, #2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff fa09 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e64:	fa93 f3a3 	rbit	r3, r3
 8007e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8007e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8007e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8007e7c:	2320      	movs	r3, #32
 8007e7e:	e004      	b.n	8007e8a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8007e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e84:	fab3 f383 	clz	r3, r3
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d105      	bne.n	8007ea4 <HAL_ADC_ConfigChannel+0x468>
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	0e9b      	lsrs	r3, r3, #26
 8007e9e:	f003 031f 	and.w	r3, r3, #31
 8007ea2:	e014      	b.n	8007ece <HAL_ADC_ConfigChannel+0x492>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007eac:	fa93 f3a3 	rbit	r3, r3
 8007eb0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8007eb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007eb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8007eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007ec0:	2320      	movs	r3, #32
 8007ec2:	e004      	b.n	8007ece <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8007ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ec8:	fab3 f383 	clz	r3, r3
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d106      	bne.n	8007ee0 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2102      	movs	r1, #2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff fa5c 	bl	8007398 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2103      	movs	r1, #3
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff f9c0 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <HAL_ADC_ConfigChannel+0x4d0>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2103      	movs	r1, #3
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff f9b5 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007f02:	4603      	mov	r3, r0
 8007f04:	0e9b      	lsrs	r3, r3, #26
 8007f06:	f003 021f 	and.w	r2, r3, #31
 8007f0a:	e017      	b.n	8007f3c <HAL_ADC_ConfigChannel+0x500>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2103      	movs	r1, #3
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff f9aa 	bl	800726c <LL_ADC_GetOffsetChannel>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f1e:	fa93 f3a3 	rbit	r3, r3
 8007f22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f26:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8007f28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8007f2e:	2320      	movs	r3, #32
 8007f30:	e003      	b.n	8007f3a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8007f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f34:	fab3 f383 	clz	r3, r3
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d105      	bne.n	8007f54 <HAL_ADC_ConfigChannel+0x518>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	0e9b      	lsrs	r3, r3, #26
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	e011      	b.n	8007f78 <HAL_ADC_ConfigChannel+0x53c>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f5c:	fa93 f3a3 	rbit	r3, r3
 8007f60:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8007f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f64:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8007f66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	e003      	b.n	8007f78 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8007f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f72:	fab3 f383 	clz	r3, r3
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d14f      	bne.n	800801c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2200      	movs	r2, #0
 8007f82:	2103      	movs	r1, #3
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fa07 	bl	8007398 <LL_ADC_SetOffsetState>
 8007f8a:	e047      	b.n	800801c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	069b      	lsls	r3, r3, #26
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d107      	bne.n	8007fb0 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007fae:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	069b      	lsls	r3, r3, #26
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d107      	bne.n	8007fd4 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007fd2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	069b      	lsls	r3, r3, #26
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d107      	bne.n	8007ff8 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007ff6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ffe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	069b      	lsls	r3, r3, #26
 8008008:	429a      	cmp	r2, r3
 800800a:	d107      	bne.n	800801c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800801a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fac9 	bl	80075b8 <LL_ADC_IsEnabled>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	f040 8219 	bne.w	8008460 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6819      	ldr	r1, [r3, #0]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	461a      	mov	r2, r3
 800803c:	f7ff fa2e 	bl	800749c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	4aa1      	ldr	r2, [pc, #644]	@ (80082cc <HAL_ADC_ConfigChannel+0x890>)
 8008046:	4293      	cmp	r3, r2
 8008048:	f040 812e 	bne.w	80082a8 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10b      	bne.n	8008074 <HAL_ADC_ConfigChannel+0x638>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	0e9b      	lsrs	r3, r3, #26
 8008062:	3301      	adds	r3, #1
 8008064:	f003 031f 	and.w	r3, r3, #31
 8008068:	2b09      	cmp	r3, #9
 800806a:	bf94      	ite	ls
 800806c:	2301      	movls	r3, #1
 800806e:	2300      	movhi	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	e019      	b.n	80080a8 <HAL_ADC_ConfigChannel+0x66c>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800807a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800807c:	fa93 f3a3 	rbit	r3, r3
 8008080:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8008082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008084:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8008086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800808c:	2320      	movs	r3, #32
 800808e:	e003      	b.n	8008098 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8008090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008092:	fab3 f383 	clz	r3, r3
 8008096:	b2db      	uxtb	r3, r3
 8008098:	3301      	adds	r3, #1
 800809a:	f003 031f 	and.w	r3, r3, #31
 800809e:	2b09      	cmp	r3, #9
 80080a0:	bf94      	ite	ls
 80080a2:	2301      	movls	r3, #1
 80080a4:	2300      	movhi	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d079      	beq.n	80081a0 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d107      	bne.n	80080c8 <HAL_ADC_ConfigChannel+0x68c>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	0e9b      	lsrs	r3, r3, #26
 80080be:	3301      	adds	r3, #1
 80080c0:	069b      	lsls	r3, r3, #26
 80080c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80080c6:	e015      	b.n	80080f4 <HAL_ADC_ConfigChannel+0x6b8>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080d0:	fa93 f3a3 	rbit	r3, r3
 80080d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80080d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080d8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80080da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80080e0:	2320      	movs	r3, #32
 80080e2:	e003      	b.n	80080ec <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80080e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e6:	fab3 f383 	clz	r3, r3
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	3301      	adds	r3, #1
 80080ee:	069b      	lsls	r3, r3, #26
 80080f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d109      	bne.n	8008114 <HAL_ADC_ConfigChannel+0x6d8>
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	0e9b      	lsrs	r3, r3, #26
 8008106:	3301      	adds	r3, #1
 8008108:	f003 031f 	and.w	r3, r3, #31
 800810c:	2101      	movs	r1, #1
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	e017      	b.n	8008144 <HAL_ADC_ConfigChannel+0x708>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800811a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800811c:	fa93 f3a3 	rbit	r3, r3
 8008120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8008122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008124:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8008126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800812c:	2320      	movs	r3, #32
 800812e:	e003      	b.n	8008138 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8008130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008132:	fab3 f383 	clz	r3, r3
 8008136:	b2db      	uxtb	r3, r3
 8008138:	3301      	adds	r3, #1
 800813a:	f003 031f 	and.w	r3, r3, #31
 800813e:	2101      	movs	r1, #1
 8008140:	fa01 f303 	lsl.w	r3, r1, r3
 8008144:	ea42 0103 	orr.w	r1, r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10a      	bne.n	800816a <HAL_ADC_ConfigChannel+0x72e>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	0e9b      	lsrs	r3, r3, #26
 800815a:	3301      	adds	r3, #1
 800815c:	f003 021f 	and.w	r2, r3, #31
 8008160:	4613      	mov	r3, r2
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	4413      	add	r3, r2
 8008166:	051b      	lsls	r3, r3, #20
 8008168:	e018      	b.n	800819c <HAL_ADC_ConfigChannel+0x760>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008172:	fa93 f3a3 	rbit	r3, r3
 8008176:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8008182:	2320      	movs	r3, #32
 8008184:	e003      	b.n	800818e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8008186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008188:	fab3 f383 	clz	r3, r3
 800818c:	b2db      	uxtb	r3, r3
 800818e:	3301      	adds	r3, #1
 8008190:	f003 021f 	and.w	r2, r3, #31
 8008194:	4613      	mov	r3, r2
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	4413      	add	r3, r2
 800819a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800819c:	430b      	orrs	r3, r1
 800819e:	e07e      	b.n	800829e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d107      	bne.n	80081bc <HAL_ADC_ConfigChannel+0x780>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	0e9b      	lsrs	r3, r3, #26
 80081b2:	3301      	adds	r3, #1
 80081b4:	069b      	lsls	r3, r3, #26
 80081b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80081ba:	e015      	b.n	80081e8 <HAL_ADC_ConfigChannel+0x7ac>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c4:	fa93 f3a3 	rbit	r3, r3
 80081c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80081d4:	2320      	movs	r3, #32
 80081d6:	e003      	b.n	80081e0 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	fab3 f383 	clz	r3, r3
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	3301      	adds	r3, #1
 80081e2:	069b      	lsls	r3, r3, #26
 80081e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d109      	bne.n	8008208 <HAL_ADC_ConfigChannel+0x7cc>
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	0e9b      	lsrs	r3, r3, #26
 80081fa:	3301      	adds	r3, #1
 80081fc:	f003 031f 	and.w	r3, r3, #31
 8008200:	2101      	movs	r1, #1
 8008202:	fa01 f303 	lsl.w	r3, r1, r3
 8008206:	e017      	b.n	8008238 <HAL_ADC_ConfigChannel+0x7fc>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	fa93 f3a3 	rbit	r3, r3
 8008214:	61bb      	str	r3, [r7, #24]
  return result;
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8008220:	2320      	movs	r3, #32
 8008222:	e003      	b.n	800822c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	fab3 f383 	clz	r3, r3
 800822a:	b2db      	uxtb	r3, r3
 800822c:	3301      	adds	r3, #1
 800822e:	f003 031f 	and.w	r3, r3, #31
 8008232:	2101      	movs	r1, #1
 8008234:	fa01 f303 	lsl.w	r3, r1, r3
 8008238:	ea42 0103 	orr.w	r1, r2, r3
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10d      	bne.n	8008264 <HAL_ADC_ConfigChannel+0x828>
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	0e9b      	lsrs	r3, r3, #26
 800824e:	3301      	adds	r3, #1
 8008250:	f003 021f 	and.w	r2, r3, #31
 8008254:	4613      	mov	r3, r2
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	4413      	add	r3, r2
 800825a:	3b1e      	subs	r3, #30
 800825c:	051b      	lsls	r3, r3, #20
 800825e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008262:	e01b      	b.n	800829c <HAL_ADC_ConfigChannel+0x860>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	fa93 f3a3 	rbit	r3, r3
 8008270:	60fb      	str	r3, [r7, #12]
  return result;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800827c:	2320      	movs	r3, #32
 800827e:	e003      	b.n	8008288 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	fab3 f383 	clz	r3, r3
 8008286:	b2db      	uxtb	r3, r3
 8008288:	3301      	adds	r3, #1
 800828a:	f003 021f 	and.w	r2, r3, #31
 800828e:	4613      	mov	r3, r2
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	4413      	add	r3, r2
 8008294:	3b1e      	subs	r3, #30
 8008296:	051b      	lsls	r3, r3, #20
 8008298:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800829c:	430b      	orrs	r3, r1
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	6892      	ldr	r2, [r2, #8]
 80082a2:	4619      	mov	r1, r3
 80082a4:	f7ff f8ce 	bl	8007444 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f280 80d7 	bge.w	8008460 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a06      	ldr	r2, [pc, #24]	@ (80082d0 <HAL_ADC_ConfigChannel+0x894>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d004      	beq.n	80082c6 <HAL_ADC_ConfigChannel+0x88a>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a04      	ldr	r2, [pc, #16]	@ (80082d4 <HAL_ADC_ConfigChannel+0x898>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d10a      	bne.n	80082dc <HAL_ADC_ConfigChannel+0x8a0>
 80082c6:	4b04      	ldr	r3, [pc, #16]	@ (80082d8 <HAL_ADC_ConfigChannel+0x89c>)
 80082c8:	e009      	b.n	80082de <HAL_ADC_ConfigChannel+0x8a2>
 80082ca:	bf00      	nop
 80082cc:	47ff0000 	.word	0x47ff0000
 80082d0:	40022000 	.word	0x40022000
 80082d4:	40022100 	.word	0x40022100
 80082d8:	40022300 	.word	0x40022300
 80082dc:	4b65      	ldr	r3, [pc, #404]	@ (8008474 <HAL_ADC_ConfigChannel+0xa38>)
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe ff84 	bl	80071ec <LL_ADC_GetCommonPathInternalCh>
 80082e4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a62      	ldr	r2, [pc, #392]	@ (8008478 <HAL_ADC_ConfigChannel+0xa3c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d004      	beq.n	80082fc <HAL_ADC_ConfigChannel+0x8c0>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a61      	ldr	r2, [pc, #388]	@ (800847c <HAL_ADC_ConfigChannel+0xa40>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d10e      	bne.n	800831a <HAL_ADC_ConfigChannel+0x8de>
 80082fc:	485e      	ldr	r0, [pc, #376]	@ (8008478 <HAL_ADC_ConfigChannel+0xa3c>)
 80082fe:	f7ff f95b 	bl	80075b8 <LL_ADC_IsEnabled>
 8008302:	4604      	mov	r4, r0
 8008304:	485d      	ldr	r0, [pc, #372]	@ (800847c <HAL_ADC_ConfigChannel+0xa40>)
 8008306:	f7ff f957 	bl	80075b8 <LL_ADC_IsEnabled>
 800830a:	4603      	mov	r3, r0
 800830c:	4323      	orrs	r3, r4
 800830e:	2b00      	cmp	r3, #0
 8008310:	bf0c      	ite	eq
 8008312:	2301      	moveq	r3, #1
 8008314:	2300      	movne	r3, #0
 8008316:	b2db      	uxtb	r3, r3
 8008318:	e008      	b.n	800832c <HAL_ADC_ConfigChannel+0x8f0>
 800831a:	4859      	ldr	r0, [pc, #356]	@ (8008480 <HAL_ADC_ConfigChannel+0xa44>)
 800831c:	f7ff f94c 	bl	80075b8 <LL_ADC_IsEnabled>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	bf0c      	ite	eq
 8008326:	2301      	moveq	r3, #1
 8008328:	2300      	movne	r3, #0
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 8084 	beq.w	800843a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a53      	ldr	r2, [pc, #332]	@ (8008484 <HAL_ADC_ConfigChannel+0xa48>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d132      	bne.n	80083a2 <HAL_ADC_ConfigChannel+0x966>
 800833c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008340:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d12c      	bne.n	80083a2 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a4c      	ldr	r2, [pc, #304]	@ (8008480 <HAL_ADC_ConfigChannel+0xa44>)
 800834e:	4293      	cmp	r3, r2
 8008350:	f040 8086 	bne.w	8008460 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a47      	ldr	r2, [pc, #284]	@ (8008478 <HAL_ADC_ConfigChannel+0xa3c>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d004      	beq.n	8008368 <HAL_ADC_ConfigChannel+0x92c>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a46      	ldr	r2, [pc, #280]	@ (800847c <HAL_ADC_ConfigChannel+0xa40>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d101      	bne.n	800836c <HAL_ADC_ConfigChannel+0x930>
 8008368:	4a47      	ldr	r2, [pc, #284]	@ (8008488 <HAL_ADC_ConfigChannel+0xa4c>)
 800836a:	e000      	b.n	800836e <HAL_ADC_ConfigChannel+0x932>
 800836c:	4a41      	ldr	r2, [pc, #260]	@ (8008474 <HAL_ADC_ConfigChannel+0xa38>)
 800836e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008372:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008376:	4619      	mov	r1, r3
 8008378:	4610      	mov	r0, r2
 800837a:	f7fe ff24 	bl	80071c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800837e:	4b43      	ldr	r3, [pc, #268]	@ (800848c <HAL_ADC_ConfigChannel+0xa50>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	099b      	lsrs	r3, r3, #6
 8008384:	4a42      	ldr	r2, [pc, #264]	@ (8008490 <HAL_ADC_ConfigChannel+0xa54>)
 8008386:	fba2 2303 	umull	r2, r3, r2, r3
 800838a:	099b      	lsrs	r3, r3, #6
 800838c:	3301      	adds	r3, #1
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008392:	e002      	b.n	800839a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	3b01      	subs	r3, #1
 8008398:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1f9      	bne.n	8008394 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80083a0:	e05e      	b.n	8008460 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a3b      	ldr	r2, [pc, #236]	@ (8008494 <HAL_ADC_ConfigChannel+0xa58>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d120      	bne.n	80083ee <HAL_ADC_ConfigChannel+0x9b2>
 80083ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d11a      	bne.n	80083ee <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a30      	ldr	r2, [pc, #192]	@ (8008480 <HAL_ADC_ConfigChannel+0xa44>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d14e      	bne.n	8008460 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008478 <HAL_ADC_ConfigChannel+0xa3c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d004      	beq.n	80083d6 <HAL_ADC_ConfigChannel+0x99a>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a2a      	ldr	r2, [pc, #168]	@ (800847c <HAL_ADC_ConfigChannel+0xa40>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d101      	bne.n	80083da <HAL_ADC_ConfigChannel+0x99e>
 80083d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008488 <HAL_ADC_ConfigChannel+0xa4c>)
 80083d8:	e000      	b.n	80083dc <HAL_ADC_ConfigChannel+0x9a0>
 80083da:	4a26      	ldr	r2, [pc, #152]	@ (8008474 <HAL_ADC_ConfigChannel+0xa38>)
 80083dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083e4:	4619      	mov	r1, r3
 80083e6:	4610      	mov	r0, r2
 80083e8:	f7fe feed 	bl	80071c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083ec:	e038      	b.n	8008460 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a29      	ldr	r2, [pc, #164]	@ (8008498 <HAL_ADC_ConfigChannel+0xa5c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d133      	bne.n	8008460 <HAL_ADC_ConfigChannel+0xa24>
 80083f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d12d      	bne.n	8008460 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <HAL_ADC_ConfigChannel+0xa44>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d128      	bne.n	8008460 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a19      	ldr	r2, [pc, #100]	@ (8008478 <HAL_ADC_ConfigChannel+0xa3c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d004      	beq.n	8008422 <HAL_ADC_ConfigChannel+0x9e6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a17      	ldr	r2, [pc, #92]	@ (800847c <HAL_ADC_ConfigChannel+0xa40>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d101      	bne.n	8008426 <HAL_ADC_ConfigChannel+0x9ea>
 8008422:	4a19      	ldr	r2, [pc, #100]	@ (8008488 <HAL_ADC_ConfigChannel+0xa4c>)
 8008424:	e000      	b.n	8008428 <HAL_ADC_ConfigChannel+0x9ec>
 8008426:	4a13      	ldr	r2, [pc, #76]	@ (8008474 <HAL_ADC_ConfigChannel+0xa38>)
 8008428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800842c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008430:	4619      	mov	r1, r3
 8008432:	4610      	mov	r0, r2
 8008434:	f7fe fec7 	bl	80071c6 <LL_ADC_SetCommonPathInternalCh>
 8008438:	e012      	b.n	8008460 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800843e:	f043 0220 	orr.w	r2, r3, #32
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800844c:	e008      	b.n	8008460 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008452:	f043 0220 	orr.w	r2, r3, #32
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008468:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800846c:	4618      	mov	r0, r3
 800846e:	37e4      	adds	r7, #228	@ 0xe4
 8008470:	46bd      	mov	sp, r7
 8008472:	bd90      	pop	{r4, r7, pc}
 8008474:	58026300 	.word	0x58026300
 8008478:	40022000 	.word	0x40022000
 800847c:	40022100 	.word	0x40022100
 8008480:	58026000 	.word	0x58026000
 8008484:	c7520000 	.word	0xc7520000
 8008488:	40022300 	.word	0x40022300
 800848c:	2400014c 	.word	0x2400014c
 8008490:	053e2d63 	.word	0x053e2d63
 8008494:	c3210000 	.word	0xc3210000
 8008498:	cb840000 	.word	0xcb840000

0800849c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a6c      	ldr	r2, [pc, #432]	@ (800865c <ADC_ConfigureBoostMode+0x1c0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d004      	beq.n	80084b8 <ADC_ConfigureBoostMode+0x1c>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a6b      	ldr	r2, [pc, #428]	@ (8008660 <ADC_ConfigureBoostMode+0x1c4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d109      	bne.n	80084cc <ADC_ConfigureBoostMode+0x30>
 80084b8:	4b6a      	ldr	r3, [pc, #424]	@ (8008664 <ADC_ConfigureBoostMode+0x1c8>)
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bf14      	ite	ne
 80084c4:	2301      	movne	r3, #1
 80084c6:	2300      	moveq	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	e008      	b.n	80084de <ADC_ConfigureBoostMode+0x42>
 80084cc:	4b66      	ldr	r3, [pc, #408]	@ (8008668 <ADC_ConfigureBoostMode+0x1cc>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	bf14      	ite	ne
 80084d8:	2301      	movne	r3, #1
 80084da:	2300      	moveq	r3, #0
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d01c      	beq.n	800851c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80084e2:	f003 ffdd 	bl	800c4a0 <HAL_RCC_GetHCLKFreq>
 80084e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084f0:	d010      	beq.n	8008514 <ADC_ConfigureBoostMode+0x78>
 80084f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084f6:	d873      	bhi.n	80085e0 <ADC_ConfigureBoostMode+0x144>
 80084f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084fc:	d002      	beq.n	8008504 <ADC_ConfigureBoostMode+0x68>
 80084fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008502:	d16d      	bne.n	80085e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	0c1b      	lsrs	r3, r3, #16
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008510:	60fb      	str	r3, [r7, #12]
        break;
 8008512:	e068      	b.n	80085e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	089b      	lsrs	r3, r3, #2
 8008518:	60fb      	str	r3, [r7, #12]
        break;
 800851a:	e064      	b.n	80085e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800851c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008520:	f04f 0100 	mov.w	r1, #0
 8008524:	f005 f9d4 	bl	800d8d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008528:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008532:	d051      	beq.n	80085d8 <ADC_ConfigureBoostMode+0x13c>
 8008534:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008538:	d854      	bhi.n	80085e4 <ADC_ConfigureBoostMode+0x148>
 800853a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800853e:	d047      	beq.n	80085d0 <ADC_ConfigureBoostMode+0x134>
 8008540:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8008544:	d84e      	bhi.n	80085e4 <ADC_ConfigureBoostMode+0x148>
 8008546:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800854a:	d03d      	beq.n	80085c8 <ADC_ConfigureBoostMode+0x12c>
 800854c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8008550:	d848      	bhi.n	80085e4 <ADC_ConfigureBoostMode+0x148>
 8008552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008556:	d033      	beq.n	80085c0 <ADC_ConfigureBoostMode+0x124>
 8008558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800855c:	d842      	bhi.n	80085e4 <ADC_ConfigureBoostMode+0x148>
 800855e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8008562:	d029      	beq.n	80085b8 <ADC_ConfigureBoostMode+0x11c>
 8008564:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8008568:	d83c      	bhi.n	80085e4 <ADC_ConfigureBoostMode+0x148>
 800856a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800856e:	d01a      	beq.n	80085a6 <ADC_ConfigureBoostMode+0x10a>
 8008570:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008574:	d836      	bhi.n	80085e4 <ADC_ConfigureBoostMode+0x148>
 8008576:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800857a:	d014      	beq.n	80085a6 <ADC_ConfigureBoostMode+0x10a>
 800857c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008580:	d830      	bhi.n	80085e4 <ADC_ConfigureBoostMode+0x148>
 8008582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008586:	d00e      	beq.n	80085a6 <ADC_ConfigureBoostMode+0x10a>
 8008588:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800858c:	d82a      	bhi.n	80085e4 <ADC_ConfigureBoostMode+0x148>
 800858e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008592:	d008      	beq.n	80085a6 <ADC_ConfigureBoostMode+0x10a>
 8008594:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008598:	d824      	bhi.n	80085e4 <ADC_ConfigureBoostMode+0x148>
 800859a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800859e:	d002      	beq.n	80085a6 <ADC_ConfigureBoostMode+0x10a>
 80085a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80085a4:	d11e      	bne.n	80085e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	0c9b      	lsrs	r3, r3, #18
 80085ac:	005b      	lsls	r3, r3, #1
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b4:	60fb      	str	r3, [r7, #12]
        break;
 80085b6:	e016      	b.n	80085e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	091b      	lsrs	r3, r3, #4
 80085bc:	60fb      	str	r3, [r7, #12]
        break;
 80085be:	e012      	b.n	80085e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	60fb      	str	r3, [r7, #12]
        break;
 80085c6:	e00e      	b.n	80085e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	099b      	lsrs	r3, r3, #6
 80085cc:	60fb      	str	r3, [r7, #12]
        break;
 80085ce:	e00a      	b.n	80085e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	09db      	lsrs	r3, r3, #7
 80085d4:	60fb      	str	r3, [r7, #12]
        break;
 80085d6:	e006      	b.n	80085e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	0a1b      	lsrs	r3, r3, #8
 80085dc:	60fb      	str	r3, [r7, #12]
        break;
 80085de:	e002      	b.n	80085e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80085e0:	bf00      	nop
 80085e2:	e000      	b.n	80085e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80085e4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	085b      	lsrs	r3, r3, #1
 80085ea:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4a1f      	ldr	r2, [pc, #124]	@ (800866c <ADC_ConfigureBoostMode+0x1d0>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d808      	bhi.n	8008606 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008602:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008604:	e025      	b.n	8008652 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a19      	ldr	r2, [pc, #100]	@ (8008670 <ADC_ConfigureBoostMode+0x1d4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d80a      	bhi.n	8008624 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008620:	609a      	str	r2, [r3, #8]
}
 8008622:	e016      	b.n	8008652 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4a13      	ldr	r2, [pc, #76]	@ (8008674 <ADC_ConfigureBoostMode+0x1d8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d80a      	bhi.n	8008642 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800863e:	609a      	str	r2, [r3, #8]
}
 8008640:	e007      	b.n	8008652 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008650:	609a      	str	r2, [r3, #8]
}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	40022000 	.word	0x40022000
 8008660:	40022100 	.word	0x40022100
 8008664:	40022300 	.word	0x40022300
 8008668:	58026300 	.word	0x58026300
 800866c:	005f5e10 	.word	0x005f5e10
 8008670:	00bebc20 	.word	0x00bebc20
 8008674:	017d7840 	.word	0x017d7840

08008678 <LL_ADC_IsEnabled>:
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <LL_ADC_IsEnabled+0x18>
 800868c:	2301      	movs	r3, #1
 800868e:	e000      	b.n	8008692 <LL_ADC_IsEnabled+0x1a>
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <LL_ADC_REG_IsConversionOngoing>:
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 0304 	and.w	r3, r3, #4
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d101      	bne.n	80086b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e000      	b.n	80086b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b0a3      	sub	sp, #140	@ 0x8c
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80086de:	2302      	movs	r3, #2
 80086e0:	e0c1      	b.n	8008866 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80086ea:	2300      	movs	r3, #0
 80086ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a5e      	ldr	r2, [pc, #376]	@ (8008870 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d102      	bne.n	8008702 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80086fc:	4b5d      	ldr	r3, [pc, #372]	@ (8008874 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	e001      	b.n	8008706 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008702:	2300      	movs	r3, #0
 8008704:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10b      	bne.n	8008724 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008710:	f043 0220 	orr.w	r2, r3, #32
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e0a0      	b.n	8008866 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff ffb9 	bl	800869e <LL_ADC_REG_IsConversionOngoing>
 800872c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff ffb2 	bl	800869e <LL_ADC_REG_IsConversionOngoing>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 8081 	bne.w	8008844 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008742:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008746:	2b00      	cmp	r3, #0
 8008748:	d17c      	bne.n	8008844 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a48      	ldr	r2, [pc, #288]	@ (8008870 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d004      	beq.n	800875e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a46      	ldr	r2, [pc, #280]	@ (8008874 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d101      	bne.n	8008762 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800875e:	4b46      	ldr	r3, [pc, #280]	@ (8008878 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008760:	e000      	b.n	8008764 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008762:	4b46      	ldr	r3, [pc, #280]	@ (800887c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008764:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d039      	beq.n	80087e2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800876e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	431a      	orrs	r2, r3
 800877c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800877e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a3a      	ldr	r2, [pc, #232]	@ (8008870 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d004      	beq.n	8008794 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a39      	ldr	r2, [pc, #228]	@ (8008874 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d10e      	bne.n	80087b2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8008794:	4836      	ldr	r0, [pc, #216]	@ (8008870 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008796:	f7ff ff6f 	bl	8008678 <LL_ADC_IsEnabled>
 800879a:	4604      	mov	r4, r0
 800879c:	4835      	ldr	r0, [pc, #212]	@ (8008874 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800879e:	f7ff ff6b 	bl	8008678 <LL_ADC_IsEnabled>
 80087a2:	4603      	mov	r3, r0
 80087a4:	4323      	orrs	r3, r4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bf0c      	ite	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	2300      	movne	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	e008      	b.n	80087c4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80087b2:	4833      	ldr	r0, [pc, #204]	@ (8008880 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80087b4:	f7ff ff60 	bl	8008678 <LL_ADC_IsEnabled>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bf0c      	ite	eq
 80087be:	2301      	moveq	r3, #1
 80087c0:	2300      	movne	r3, #0
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d047      	beq.n	8008858 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80087c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008884 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	6811      	ldr	r1, [r2, #0]
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	6892      	ldr	r2, [r2, #8]
 80087d8:	430a      	orrs	r2, r1
 80087da:	431a      	orrs	r2, r3
 80087dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087de:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80087e0:	e03a      	b.n	8008858 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80087e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80087ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008870 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d004      	beq.n	8008802 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008874 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d10e      	bne.n	8008820 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8008802:	481b      	ldr	r0, [pc, #108]	@ (8008870 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008804:	f7ff ff38 	bl	8008678 <LL_ADC_IsEnabled>
 8008808:	4604      	mov	r4, r0
 800880a:	481a      	ldr	r0, [pc, #104]	@ (8008874 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800880c:	f7ff ff34 	bl	8008678 <LL_ADC_IsEnabled>
 8008810:	4603      	mov	r3, r0
 8008812:	4323      	orrs	r3, r4
 8008814:	2b00      	cmp	r3, #0
 8008816:	bf0c      	ite	eq
 8008818:	2301      	moveq	r3, #1
 800881a:	2300      	movne	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	e008      	b.n	8008832 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8008820:	4817      	ldr	r0, [pc, #92]	@ (8008880 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008822:	f7ff ff29 	bl	8008678 <LL_ADC_IsEnabled>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	bf0c      	ite	eq
 800882c:	2301      	moveq	r3, #1
 800882e:	2300      	movne	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d010      	beq.n	8008858 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008836:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008838:	689a      	ldr	r2, [r3, #8]
 800883a:	4b12      	ldr	r3, [pc, #72]	@ (8008884 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800883c:	4013      	ands	r3, r2
 800883e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008840:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008842:	e009      	b.n	8008858 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008848:	f043 0220 	orr.w	r2, r3, #32
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8008856:	e000      	b.n	800885a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008858:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008862:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8008866:	4618      	mov	r0, r3
 8008868:	378c      	adds	r7, #140	@ 0x8c
 800886a:	46bd      	mov	sp, r7
 800886c:	bd90      	pop	{r4, r7, pc}
 800886e:	bf00      	nop
 8008870:	40022000 	.word	0x40022000
 8008874:	40022100 	.word	0x40022100
 8008878:	40022300 	.word	0x40022300
 800887c:	58026300 	.word	0x58026300
 8008880:	58026000 	.word	0x58026000
 8008884:	fffff0e0 	.word	0xfffff0e0

08008888 <__NVIC_SetPriorityGrouping>:
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f003 0307 	and.w	r3, r3, #7
 8008896:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008898:	4b0b      	ldr	r3, [pc, #44]	@ (80088c8 <__NVIC_SetPriorityGrouping+0x40>)
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80088a4:	4013      	ands	r3, r2
 80088a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80088b0:	4b06      	ldr	r3, [pc, #24]	@ (80088cc <__NVIC_SetPriorityGrouping+0x44>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80088b6:	4a04      	ldr	r2, [pc, #16]	@ (80088c8 <__NVIC_SetPriorityGrouping+0x40>)
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	60d3      	str	r3, [r2, #12]
}
 80088bc:	bf00      	nop
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	e000ed00 	.word	0xe000ed00
 80088cc:	05fa0000 	.word	0x05fa0000

080088d0 <__NVIC_GetPriorityGrouping>:
{
 80088d0:	b480      	push	{r7}
 80088d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088d4:	4b04      	ldr	r3, [pc, #16]	@ (80088e8 <__NVIC_GetPriorityGrouping+0x18>)
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	0a1b      	lsrs	r3, r3, #8
 80088da:	f003 0307 	and.w	r3, r3, #7
}
 80088de:	4618      	mov	r0, r3
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	e000ed00 	.word	0xe000ed00

080088ec <__NVIC_EnableIRQ>:
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	4603      	mov	r3, r0
 80088f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80088f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	db0b      	blt.n	8008916 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088fe:	88fb      	ldrh	r3, [r7, #6]
 8008900:	f003 021f 	and.w	r2, r3, #31
 8008904:	4907      	ldr	r1, [pc, #28]	@ (8008924 <__NVIC_EnableIRQ+0x38>)
 8008906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800890a:	095b      	lsrs	r3, r3, #5
 800890c:	2001      	movs	r0, #1
 800890e:	fa00 f202 	lsl.w	r2, r0, r2
 8008912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	e000e100 	.word	0xe000e100

08008928 <__NVIC_SetPriority>:
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	6039      	str	r1, [r7, #0]
 8008932:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008938:	2b00      	cmp	r3, #0
 800893a:	db0a      	blt.n	8008952 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	b2da      	uxtb	r2, r3
 8008940:	490c      	ldr	r1, [pc, #48]	@ (8008974 <__NVIC_SetPriority+0x4c>)
 8008942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008946:	0112      	lsls	r2, r2, #4
 8008948:	b2d2      	uxtb	r2, r2
 800894a:	440b      	add	r3, r1
 800894c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008950:	e00a      	b.n	8008968 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	b2da      	uxtb	r2, r3
 8008956:	4908      	ldr	r1, [pc, #32]	@ (8008978 <__NVIC_SetPriority+0x50>)
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	f003 030f 	and.w	r3, r3, #15
 800895e:	3b04      	subs	r3, #4
 8008960:	0112      	lsls	r2, r2, #4
 8008962:	b2d2      	uxtb	r2, r2
 8008964:	440b      	add	r3, r1
 8008966:	761a      	strb	r2, [r3, #24]
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	e000e100 	.word	0xe000e100
 8008978:	e000ed00 	.word	0xe000ed00

0800897c <NVIC_EncodePriority>:
{
 800897c:	b480      	push	{r7}
 800897e:	b089      	sub	sp, #36	@ 0x24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f003 0307 	and.w	r3, r3, #7
 800898e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f1c3 0307 	rsb	r3, r3, #7
 8008996:	2b04      	cmp	r3, #4
 8008998:	bf28      	it	cs
 800899a:	2304      	movcs	r3, #4
 800899c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	3304      	adds	r3, #4
 80089a2:	2b06      	cmp	r3, #6
 80089a4:	d902      	bls.n	80089ac <NVIC_EncodePriority+0x30>
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	3b03      	subs	r3, #3
 80089aa:	e000      	b.n	80089ae <NVIC_EncodePriority+0x32>
 80089ac:	2300      	movs	r3, #0
 80089ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089b0:	f04f 32ff 	mov.w	r2, #4294967295
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ba:	43da      	mvns	r2, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	401a      	ands	r2, r3
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089c4:	f04f 31ff 	mov.w	r1, #4294967295
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	fa01 f303 	lsl.w	r3, r1, r3
 80089ce:	43d9      	mvns	r1, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089d4:	4313      	orrs	r3, r2
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3724      	adds	r7, #36	@ 0x24
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
	...

080089e4 <SysTick_Config>:
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089f4:	d301      	bcc.n	80089fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80089f6:	2301      	movs	r3, #1
 80089f8:	e00f      	b.n	8008a1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008a24 <SysTick_Config+0x40>)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a02:	210f      	movs	r1, #15
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	f7ff ff8e 	bl	8008928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a0c:	4b05      	ldr	r3, [pc, #20]	@ (8008a24 <SysTick_Config+0x40>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a12:	4b04      	ldr	r3, [pc, #16]	@ (8008a24 <SysTick_Config+0x40>)
 8008a14:	2207      	movs	r2, #7
 8008a16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	e000e010 	.word	0xe000e010

08008a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff ff29 	bl	8008888 <__NVIC_SetPriorityGrouping>
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b086      	sub	sp, #24
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	4603      	mov	r3, r0
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008a4c:	f7ff ff40 	bl	80088d0 <__NVIC_GetPriorityGrouping>
 8008a50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	6978      	ldr	r0, [r7, #20]
 8008a58:	f7ff ff90 	bl	800897c <NVIC_EncodePriority>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff ff5f 	bl	8008928 <__NVIC_SetPriority>
}
 8008a6a:	bf00      	nop
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	4603      	mov	r3, r0
 8008a7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff ff33 	bl	80088ec <__NVIC_EnableIRQ>
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7ff ffa4 	bl	80089e4 <SysTick_Config>
 8008a9c:	4603      	mov	r3, r0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008aac:	f3bf 8f5f 	dmb	sy
}
 8008ab0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008ab2:	4b07      	ldr	r3, [pc, #28]	@ (8008ad0 <HAL_MPU_Disable+0x28>)
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab6:	4a06      	ldr	r2, [pc, #24]	@ (8008ad0 <HAL_MPU_Disable+0x28>)
 8008ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008abc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008abe:	4b05      	ldr	r3, [pc, #20]	@ (8008ad4 <HAL_MPU_Disable+0x2c>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	605a      	str	r2, [r3, #4]
}
 8008ac4:	bf00      	nop
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	e000ed00 	.word	0xe000ed00
 8008ad4:	e000ed90 	.word	0xe000ed90

08008ad8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8008b10 <HAL_MPU_Enable+0x38>)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f043 0301 	orr.w	r3, r3, #1
 8008ae8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008aea:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <HAL_MPU_Enable+0x3c>)
 8008aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aee:	4a09      	ldr	r2, [pc, #36]	@ (8008b14 <HAL_MPU_Enable+0x3c>)
 8008af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008af4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008af6:	f3bf 8f4f 	dsb	sy
}
 8008afa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008afc:	f3bf 8f6f 	isb	sy
}
 8008b00:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008b02:	bf00      	nop
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	e000ed90 	.word	0xe000ed90
 8008b14:	e000ed00 	.word	0xe000ed00

08008b18 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	785a      	ldrb	r2, [r3, #1]
 8008b24:	4b1b      	ldr	r3, [pc, #108]	@ (8008b94 <HAL_MPU_ConfigRegion+0x7c>)
 8008b26:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8008b28:	4b1a      	ldr	r3, [pc, #104]	@ (8008b94 <HAL_MPU_ConfigRegion+0x7c>)
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	4a19      	ldr	r2, [pc, #100]	@ (8008b94 <HAL_MPU_ConfigRegion+0x7c>)
 8008b2e:	f023 0301 	bic.w	r3, r3, #1
 8008b32:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8008b34:	4a17      	ldr	r2, [pc, #92]	@ (8008b94 <HAL_MPU_ConfigRegion+0x7c>)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	7b1b      	ldrb	r3, [r3, #12]
 8008b40:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	7adb      	ldrb	r3, [r3, #11]
 8008b46:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008b48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	7a9b      	ldrb	r3, [r3, #10]
 8008b4e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008b50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	7b5b      	ldrb	r3, [r3, #13]
 8008b56:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008b58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	7b9b      	ldrb	r3, [r3, #14]
 8008b5e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008b60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	7bdb      	ldrb	r3, [r3, #15]
 8008b66:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008b68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	7a5b      	ldrb	r3, [r3, #9]
 8008b6e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008b70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	7a1b      	ldrb	r3, [r3, #8]
 8008b76:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008b78:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	7812      	ldrb	r2, [r2, #0]
 8008b7e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008b80:	4a04      	ldr	r2, [pc, #16]	@ (8008b94 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008b82:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008b84:	6113      	str	r3, [r2, #16]
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	e000ed90 	.word	0xe000ed90

08008b98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008ba0:	f7fe face 	bl	8007140 <HAL_GetTick>
 8008ba4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e2dc      	b.n	800916a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d008      	beq.n	8008bce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2280      	movs	r2, #128	@ 0x80
 8008bc0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e2cd      	b.n	800916a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a76      	ldr	r2, [pc, #472]	@ (8008dac <HAL_DMA_Abort+0x214>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d04a      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a74      	ldr	r2, [pc, #464]	@ (8008db0 <HAL_DMA_Abort+0x218>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d045      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a73      	ldr	r2, [pc, #460]	@ (8008db4 <HAL_DMA_Abort+0x21c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d040      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a71      	ldr	r2, [pc, #452]	@ (8008db8 <HAL_DMA_Abort+0x220>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d03b      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a70      	ldr	r2, [pc, #448]	@ (8008dbc <HAL_DMA_Abort+0x224>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d036      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a6e      	ldr	r2, [pc, #440]	@ (8008dc0 <HAL_DMA_Abort+0x228>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d031      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a6d      	ldr	r2, [pc, #436]	@ (8008dc4 <HAL_DMA_Abort+0x22c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d02c      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a6b      	ldr	r2, [pc, #428]	@ (8008dc8 <HAL_DMA_Abort+0x230>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d027      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a6a      	ldr	r2, [pc, #424]	@ (8008dcc <HAL_DMA_Abort+0x234>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d022      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a68      	ldr	r2, [pc, #416]	@ (8008dd0 <HAL_DMA_Abort+0x238>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d01d      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a67      	ldr	r2, [pc, #412]	@ (8008dd4 <HAL_DMA_Abort+0x23c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d018      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a65      	ldr	r2, [pc, #404]	@ (8008dd8 <HAL_DMA_Abort+0x240>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d013      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a64      	ldr	r2, [pc, #400]	@ (8008ddc <HAL_DMA_Abort+0x244>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d00e      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a62      	ldr	r2, [pc, #392]	@ (8008de0 <HAL_DMA_Abort+0x248>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d009      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a61      	ldr	r2, [pc, #388]	@ (8008de4 <HAL_DMA_Abort+0x24c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d004      	beq.n	8008c6e <HAL_DMA_Abort+0xd6>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a5f      	ldr	r2, [pc, #380]	@ (8008de8 <HAL_DMA_Abort+0x250>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d101      	bne.n	8008c72 <HAL_DMA_Abort+0xda>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e000      	b.n	8008c74 <HAL_DMA_Abort+0xdc>
 8008c72:	2300      	movs	r3, #0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d013      	beq.n	8008ca0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 021e 	bic.w	r2, r2, #30
 8008c86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	695a      	ldr	r2, [r3, #20]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	617b      	str	r3, [r7, #20]
 8008c9e:	e00a      	b.n	8008cb6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 020e 	bic.w	r2, r2, #14
 8008cae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a3c      	ldr	r2, [pc, #240]	@ (8008dac <HAL_DMA_Abort+0x214>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d072      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a3a      	ldr	r2, [pc, #232]	@ (8008db0 <HAL_DMA_Abort+0x218>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d06d      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a39      	ldr	r2, [pc, #228]	@ (8008db4 <HAL_DMA_Abort+0x21c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d068      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a37      	ldr	r2, [pc, #220]	@ (8008db8 <HAL_DMA_Abort+0x220>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d063      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a36      	ldr	r2, [pc, #216]	@ (8008dbc <HAL_DMA_Abort+0x224>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d05e      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a34      	ldr	r2, [pc, #208]	@ (8008dc0 <HAL_DMA_Abort+0x228>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d059      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a33      	ldr	r2, [pc, #204]	@ (8008dc4 <HAL_DMA_Abort+0x22c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d054      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a31      	ldr	r2, [pc, #196]	@ (8008dc8 <HAL_DMA_Abort+0x230>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d04f      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a30      	ldr	r2, [pc, #192]	@ (8008dcc <HAL_DMA_Abort+0x234>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d04a      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a2e      	ldr	r2, [pc, #184]	@ (8008dd0 <HAL_DMA_Abort+0x238>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d045      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8008dd4 <HAL_DMA_Abort+0x23c>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d040      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2b      	ldr	r2, [pc, #172]	@ (8008dd8 <HAL_DMA_Abort+0x240>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d03b      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a2a      	ldr	r2, [pc, #168]	@ (8008ddc <HAL_DMA_Abort+0x244>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d036      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a28      	ldr	r2, [pc, #160]	@ (8008de0 <HAL_DMA_Abort+0x248>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d031      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a27      	ldr	r2, [pc, #156]	@ (8008de4 <HAL_DMA_Abort+0x24c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d02c      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a25      	ldr	r2, [pc, #148]	@ (8008de8 <HAL_DMA_Abort+0x250>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d027      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a24      	ldr	r2, [pc, #144]	@ (8008dec <HAL_DMA_Abort+0x254>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d022      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a22      	ldr	r2, [pc, #136]	@ (8008df0 <HAL_DMA_Abort+0x258>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d01d      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a21      	ldr	r2, [pc, #132]	@ (8008df4 <HAL_DMA_Abort+0x25c>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d018      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a1f      	ldr	r2, [pc, #124]	@ (8008df8 <HAL_DMA_Abort+0x260>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d013      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a1e      	ldr	r2, [pc, #120]	@ (8008dfc <HAL_DMA_Abort+0x264>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00e      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8008e00 <HAL_DMA_Abort+0x268>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d009      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a1b      	ldr	r2, [pc, #108]	@ (8008e04 <HAL_DMA_Abort+0x26c>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d004      	beq.n	8008da6 <HAL_DMA_Abort+0x20e>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a19      	ldr	r2, [pc, #100]	@ (8008e08 <HAL_DMA_Abort+0x270>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d132      	bne.n	8008e0c <HAL_DMA_Abort+0x274>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e031      	b.n	8008e0e <HAL_DMA_Abort+0x276>
 8008daa:	bf00      	nop
 8008dac:	40020010 	.word	0x40020010
 8008db0:	40020028 	.word	0x40020028
 8008db4:	40020040 	.word	0x40020040
 8008db8:	40020058 	.word	0x40020058
 8008dbc:	40020070 	.word	0x40020070
 8008dc0:	40020088 	.word	0x40020088
 8008dc4:	400200a0 	.word	0x400200a0
 8008dc8:	400200b8 	.word	0x400200b8
 8008dcc:	40020410 	.word	0x40020410
 8008dd0:	40020428 	.word	0x40020428
 8008dd4:	40020440 	.word	0x40020440
 8008dd8:	40020458 	.word	0x40020458
 8008ddc:	40020470 	.word	0x40020470
 8008de0:	40020488 	.word	0x40020488
 8008de4:	400204a0 	.word	0x400204a0
 8008de8:	400204b8 	.word	0x400204b8
 8008dec:	58025408 	.word	0x58025408
 8008df0:	5802541c 	.word	0x5802541c
 8008df4:	58025430 	.word	0x58025430
 8008df8:	58025444 	.word	0x58025444
 8008dfc:	58025458 	.word	0x58025458
 8008e00:	5802546c 	.word	0x5802546c
 8008e04:	58025480 	.word	0x58025480
 8008e08:	58025494 	.word	0x58025494
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d007      	beq.n	8008e22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a6d      	ldr	r2, [pc, #436]	@ (8008fdc <HAL_DMA_Abort+0x444>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d04a      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a6b      	ldr	r2, [pc, #428]	@ (8008fe0 <HAL_DMA_Abort+0x448>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d045      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a6a      	ldr	r2, [pc, #424]	@ (8008fe4 <HAL_DMA_Abort+0x44c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d040      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a68      	ldr	r2, [pc, #416]	@ (8008fe8 <HAL_DMA_Abort+0x450>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d03b      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a67      	ldr	r2, [pc, #412]	@ (8008fec <HAL_DMA_Abort+0x454>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d036      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a65      	ldr	r2, [pc, #404]	@ (8008ff0 <HAL_DMA_Abort+0x458>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d031      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a64      	ldr	r2, [pc, #400]	@ (8008ff4 <HAL_DMA_Abort+0x45c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d02c      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a62      	ldr	r2, [pc, #392]	@ (8008ff8 <HAL_DMA_Abort+0x460>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d027      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a61      	ldr	r2, [pc, #388]	@ (8008ffc <HAL_DMA_Abort+0x464>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d022      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a5f      	ldr	r2, [pc, #380]	@ (8009000 <HAL_DMA_Abort+0x468>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d01d      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8009004 <HAL_DMA_Abort+0x46c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d018      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a5c      	ldr	r2, [pc, #368]	@ (8009008 <HAL_DMA_Abort+0x470>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d013      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800900c <HAL_DMA_Abort+0x474>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d00e      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a59      	ldr	r2, [pc, #356]	@ (8009010 <HAL_DMA_Abort+0x478>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d009      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a58      	ldr	r2, [pc, #352]	@ (8009014 <HAL_DMA_Abort+0x47c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d004      	beq.n	8008ec2 <HAL_DMA_Abort+0x32a>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a56      	ldr	r2, [pc, #344]	@ (8009018 <HAL_DMA_Abort+0x480>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d108      	bne.n	8008ed4 <HAL_DMA_Abort+0x33c>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 0201 	bic.w	r2, r2, #1
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	e007      	b.n	8008ee4 <HAL_DMA_Abort+0x34c>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0201 	bic.w	r2, r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008ee4:	e013      	b.n	8008f0e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008ee6:	f7fe f92b 	bl	8007140 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	2b05      	cmp	r3, #5
 8008ef2:	d90c      	bls.n	8008f0e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2203      	movs	r2, #3
 8008efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e12d      	b.n	800916a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e5      	bne.n	8008ee6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8008fdc <HAL_DMA_Abort+0x444>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d04a      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a2d      	ldr	r2, [pc, #180]	@ (8008fe0 <HAL_DMA_Abort+0x448>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d045      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a2c      	ldr	r2, [pc, #176]	@ (8008fe4 <HAL_DMA_Abort+0x44c>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d040      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe8 <HAL_DMA_Abort+0x450>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d03b      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a29      	ldr	r2, [pc, #164]	@ (8008fec <HAL_DMA_Abort+0x454>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d036      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a27      	ldr	r2, [pc, #156]	@ (8008ff0 <HAL_DMA_Abort+0x458>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d031      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a26      	ldr	r2, [pc, #152]	@ (8008ff4 <HAL_DMA_Abort+0x45c>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d02c      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a24      	ldr	r2, [pc, #144]	@ (8008ff8 <HAL_DMA_Abort+0x460>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d027      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a23      	ldr	r2, [pc, #140]	@ (8008ffc <HAL_DMA_Abort+0x464>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d022      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a21      	ldr	r2, [pc, #132]	@ (8009000 <HAL_DMA_Abort+0x468>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d01d      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a20      	ldr	r2, [pc, #128]	@ (8009004 <HAL_DMA_Abort+0x46c>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d018      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8009008 <HAL_DMA_Abort+0x470>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d013      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a1d      	ldr	r2, [pc, #116]	@ (800900c <HAL_DMA_Abort+0x474>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d00e      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8009010 <HAL_DMA_Abort+0x478>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d009      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a1a      	ldr	r2, [pc, #104]	@ (8009014 <HAL_DMA_Abort+0x47c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d004      	beq.n	8008fba <HAL_DMA_Abort+0x422>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a18      	ldr	r2, [pc, #96]	@ (8009018 <HAL_DMA_Abort+0x480>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d101      	bne.n	8008fbe <HAL_DMA_Abort+0x426>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e000      	b.n	8008fc0 <HAL_DMA_Abort+0x428>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d02b      	beq.n	800901c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fce:	f003 031f 	and.w	r3, r3, #31
 8008fd2:	223f      	movs	r2, #63	@ 0x3f
 8008fd4:	409a      	lsls	r2, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	609a      	str	r2, [r3, #8]
 8008fda:	e02a      	b.n	8009032 <HAL_DMA_Abort+0x49a>
 8008fdc:	40020010 	.word	0x40020010
 8008fe0:	40020028 	.word	0x40020028
 8008fe4:	40020040 	.word	0x40020040
 8008fe8:	40020058 	.word	0x40020058
 8008fec:	40020070 	.word	0x40020070
 8008ff0:	40020088 	.word	0x40020088
 8008ff4:	400200a0 	.word	0x400200a0
 8008ff8:	400200b8 	.word	0x400200b8
 8008ffc:	40020410 	.word	0x40020410
 8009000:	40020428 	.word	0x40020428
 8009004:	40020440 	.word	0x40020440
 8009008:	40020458 	.word	0x40020458
 800900c:	40020470 	.word	0x40020470
 8009010:	40020488 	.word	0x40020488
 8009014:	400204a0 	.word	0x400204a0
 8009018:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009020:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009026:	f003 031f 	and.w	r3, r3, #31
 800902a:	2201      	movs	r2, #1
 800902c:	409a      	lsls	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a4f      	ldr	r2, [pc, #316]	@ (8009174 <HAL_DMA_Abort+0x5dc>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d072      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a4d      	ldr	r2, [pc, #308]	@ (8009178 <HAL_DMA_Abort+0x5e0>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d06d      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a4c      	ldr	r2, [pc, #304]	@ (800917c <HAL_DMA_Abort+0x5e4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d068      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a4a      	ldr	r2, [pc, #296]	@ (8009180 <HAL_DMA_Abort+0x5e8>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d063      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a49      	ldr	r2, [pc, #292]	@ (8009184 <HAL_DMA_Abort+0x5ec>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d05e      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a47      	ldr	r2, [pc, #284]	@ (8009188 <HAL_DMA_Abort+0x5f0>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d059      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a46      	ldr	r2, [pc, #280]	@ (800918c <HAL_DMA_Abort+0x5f4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d054      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a44      	ldr	r2, [pc, #272]	@ (8009190 <HAL_DMA_Abort+0x5f8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d04f      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a43      	ldr	r2, [pc, #268]	@ (8009194 <HAL_DMA_Abort+0x5fc>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d04a      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a41      	ldr	r2, [pc, #260]	@ (8009198 <HAL_DMA_Abort+0x600>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d045      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a40      	ldr	r2, [pc, #256]	@ (800919c <HAL_DMA_Abort+0x604>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d040      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a3e      	ldr	r2, [pc, #248]	@ (80091a0 <HAL_DMA_Abort+0x608>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d03b      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a3d      	ldr	r2, [pc, #244]	@ (80091a4 <HAL_DMA_Abort+0x60c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d036      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a3b      	ldr	r2, [pc, #236]	@ (80091a8 <HAL_DMA_Abort+0x610>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d031      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a3a      	ldr	r2, [pc, #232]	@ (80091ac <HAL_DMA_Abort+0x614>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d02c      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a38      	ldr	r2, [pc, #224]	@ (80091b0 <HAL_DMA_Abort+0x618>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d027      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a37      	ldr	r2, [pc, #220]	@ (80091b4 <HAL_DMA_Abort+0x61c>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d022      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a35      	ldr	r2, [pc, #212]	@ (80091b8 <HAL_DMA_Abort+0x620>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d01d      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a34      	ldr	r2, [pc, #208]	@ (80091bc <HAL_DMA_Abort+0x624>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d018      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a32      	ldr	r2, [pc, #200]	@ (80091c0 <HAL_DMA_Abort+0x628>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d013      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a31      	ldr	r2, [pc, #196]	@ (80091c4 <HAL_DMA_Abort+0x62c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d00e      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a2f      	ldr	r2, [pc, #188]	@ (80091c8 <HAL_DMA_Abort+0x630>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d009      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a2e      	ldr	r2, [pc, #184]	@ (80091cc <HAL_DMA_Abort+0x634>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d004      	beq.n	8009122 <HAL_DMA_Abort+0x58a>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a2c      	ldr	r2, [pc, #176]	@ (80091d0 <HAL_DMA_Abort+0x638>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d101      	bne.n	8009126 <HAL_DMA_Abort+0x58e>
 8009122:	2301      	movs	r3, #1
 8009124:	e000      	b.n	8009128 <HAL_DMA_Abort+0x590>
 8009126:	2300      	movs	r3, #0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d015      	beq.n	8009158 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009134:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00c      	beq.n	8009158 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009148:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800914c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009156:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	40020010 	.word	0x40020010
 8009178:	40020028 	.word	0x40020028
 800917c:	40020040 	.word	0x40020040
 8009180:	40020058 	.word	0x40020058
 8009184:	40020070 	.word	0x40020070
 8009188:	40020088 	.word	0x40020088
 800918c:	400200a0 	.word	0x400200a0
 8009190:	400200b8 	.word	0x400200b8
 8009194:	40020410 	.word	0x40020410
 8009198:	40020428 	.word	0x40020428
 800919c:	40020440 	.word	0x40020440
 80091a0:	40020458 	.word	0x40020458
 80091a4:	40020470 	.word	0x40020470
 80091a8:	40020488 	.word	0x40020488
 80091ac:	400204a0 	.word	0x400204a0
 80091b0:	400204b8 	.word	0x400204b8
 80091b4:	58025408 	.word	0x58025408
 80091b8:	5802541c 	.word	0x5802541c
 80091bc:	58025430 	.word	0x58025430
 80091c0:	58025444 	.word	0x58025444
 80091c4:	58025458 	.word	0x58025458
 80091c8:	5802546c 	.word	0x5802546c
 80091cc:	58025480 	.word	0x58025480
 80091d0:	58025494 	.word	0x58025494

080091d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e237      	b.n	8009656 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d004      	beq.n	80091fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2280      	movs	r2, #128	@ 0x80
 80091f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e22c      	b.n	8009656 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a5c      	ldr	r2, [pc, #368]	@ (8009374 <HAL_DMA_Abort_IT+0x1a0>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d04a      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a5b      	ldr	r2, [pc, #364]	@ (8009378 <HAL_DMA_Abort_IT+0x1a4>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d045      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a59      	ldr	r2, [pc, #356]	@ (800937c <HAL_DMA_Abort_IT+0x1a8>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d040      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a58      	ldr	r2, [pc, #352]	@ (8009380 <HAL_DMA_Abort_IT+0x1ac>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d03b      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a56      	ldr	r2, [pc, #344]	@ (8009384 <HAL_DMA_Abort_IT+0x1b0>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d036      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a55      	ldr	r2, [pc, #340]	@ (8009388 <HAL_DMA_Abort_IT+0x1b4>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d031      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a53      	ldr	r2, [pc, #332]	@ (800938c <HAL_DMA_Abort_IT+0x1b8>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d02c      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a52      	ldr	r2, [pc, #328]	@ (8009390 <HAL_DMA_Abort_IT+0x1bc>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d027      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a50      	ldr	r2, [pc, #320]	@ (8009394 <HAL_DMA_Abort_IT+0x1c0>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d022      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a4f      	ldr	r2, [pc, #316]	@ (8009398 <HAL_DMA_Abort_IT+0x1c4>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d01d      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a4d      	ldr	r2, [pc, #308]	@ (800939c <HAL_DMA_Abort_IT+0x1c8>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d018      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a4c      	ldr	r2, [pc, #304]	@ (80093a0 <HAL_DMA_Abort_IT+0x1cc>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d013      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a4a      	ldr	r2, [pc, #296]	@ (80093a4 <HAL_DMA_Abort_IT+0x1d0>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00e      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a49      	ldr	r2, [pc, #292]	@ (80093a8 <HAL_DMA_Abort_IT+0x1d4>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d009      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a47      	ldr	r2, [pc, #284]	@ (80093ac <HAL_DMA_Abort_IT+0x1d8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d004      	beq.n	800929c <HAL_DMA_Abort_IT+0xc8>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a46      	ldr	r2, [pc, #280]	@ (80093b0 <HAL_DMA_Abort_IT+0x1dc>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d101      	bne.n	80092a0 <HAL_DMA_Abort_IT+0xcc>
 800929c:	2301      	movs	r3, #1
 800929e:	e000      	b.n	80092a2 <HAL_DMA_Abort_IT+0xce>
 80092a0:	2300      	movs	r3, #0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 8086 	beq.w	80093b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2204      	movs	r2, #4
 80092ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a2f      	ldr	r2, [pc, #188]	@ (8009374 <HAL_DMA_Abort_IT+0x1a0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d04a      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a2e      	ldr	r2, [pc, #184]	@ (8009378 <HAL_DMA_Abort_IT+0x1a4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d045      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a2c      	ldr	r2, [pc, #176]	@ (800937c <HAL_DMA_Abort_IT+0x1a8>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d040      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a2b      	ldr	r2, [pc, #172]	@ (8009380 <HAL_DMA_Abort_IT+0x1ac>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d03b      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a29      	ldr	r2, [pc, #164]	@ (8009384 <HAL_DMA_Abort_IT+0x1b0>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d036      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a28      	ldr	r2, [pc, #160]	@ (8009388 <HAL_DMA_Abort_IT+0x1b4>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d031      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a26      	ldr	r2, [pc, #152]	@ (800938c <HAL_DMA_Abort_IT+0x1b8>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d02c      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a25      	ldr	r2, [pc, #148]	@ (8009390 <HAL_DMA_Abort_IT+0x1bc>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d027      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a23      	ldr	r2, [pc, #140]	@ (8009394 <HAL_DMA_Abort_IT+0x1c0>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d022      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a22      	ldr	r2, [pc, #136]	@ (8009398 <HAL_DMA_Abort_IT+0x1c4>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d01d      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a20      	ldr	r2, [pc, #128]	@ (800939c <HAL_DMA_Abort_IT+0x1c8>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d018      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a1f      	ldr	r2, [pc, #124]	@ (80093a0 <HAL_DMA_Abort_IT+0x1cc>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d013      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a1d      	ldr	r2, [pc, #116]	@ (80093a4 <HAL_DMA_Abort_IT+0x1d0>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00e      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a1c      	ldr	r2, [pc, #112]	@ (80093a8 <HAL_DMA_Abort_IT+0x1d4>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d009      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a1a      	ldr	r2, [pc, #104]	@ (80093ac <HAL_DMA_Abort_IT+0x1d8>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d004      	beq.n	8009350 <HAL_DMA_Abort_IT+0x17c>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a19      	ldr	r2, [pc, #100]	@ (80093b0 <HAL_DMA_Abort_IT+0x1dc>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d108      	bne.n	8009362 <HAL_DMA_Abort_IT+0x18e>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0201 	bic.w	r2, r2, #1
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	e178      	b.n	8009654 <HAL_DMA_Abort_IT+0x480>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0201 	bic.w	r2, r2, #1
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	e16f      	b.n	8009654 <HAL_DMA_Abort_IT+0x480>
 8009374:	40020010 	.word	0x40020010
 8009378:	40020028 	.word	0x40020028
 800937c:	40020040 	.word	0x40020040
 8009380:	40020058 	.word	0x40020058
 8009384:	40020070 	.word	0x40020070
 8009388:	40020088 	.word	0x40020088
 800938c:	400200a0 	.word	0x400200a0
 8009390:	400200b8 	.word	0x400200b8
 8009394:	40020410 	.word	0x40020410
 8009398:	40020428 	.word	0x40020428
 800939c:	40020440 	.word	0x40020440
 80093a0:	40020458 	.word	0x40020458
 80093a4:	40020470 	.word	0x40020470
 80093a8:	40020488 	.word	0x40020488
 80093ac:	400204a0 	.word	0x400204a0
 80093b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 020e 	bic.w	r2, r2, #14
 80093c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a6c      	ldr	r2, [pc, #432]	@ (800957c <HAL_DMA_Abort_IT+0x3a8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d04a      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a6b      	ldr	r2, [pc, #428]	@ (8009580 <HAL_DMA_Abort_IT+0x3ac>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d045      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a69      	ldr	r2, [pc, #420]	@ (8009584 <HAL_DMA_Abort_IT+0x3b0>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d040      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a68      	ldr	r2, [pc, #416]	@ (8009588 <HAL_DMA_Abort_IT+0x3b4>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d03b      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a66      	ldr	r2, [pc, #408]	@ (800958c <HAL_DMA_Abort_IT+0x3b8>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d036      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a65      	ldr	r2, [pc, #404]	@ (8009590 <HAL_DMA_Abort_IT+0x3bc>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d031      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a63      	ldr	r2, [pc, #396]	@ (8009594 <HAL_DMA_Abort_IT+0x3c0>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d02c      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a62      	ldr	r2, [pc, #392]	@ (8009598 <HAL_DMA_Abort_IT+0x3c4>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d027      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a60      	ldr	r2, [pc, #384]	@ (800959c <HAL_DMA_Abort_IT+0x3c8>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d022      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a5f      	ldr	r2, [pc, #380]	@ (80095a0 <HAL_DMA_Abort_IT+0x3cc>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d01d      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a5d      	ldr	r2, [pc, #372]	@ (80095a4 <HAL_DMA_Abort_IT+0x3d0>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d018      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a5c      	ldr	r2, [pc, #368]	@ (80095a8 <HAL_DMA_Abort_IT+0x3d4>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d013      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a5a      	ldr	r2, [pc, #360]	@ (80095ac <HAL_DMA_Abort_IT+0x3d8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00e      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a59      	ldr	r2, [pc, #356]	@ (80095b0 <HAL_DMA_Abort_IT+0x3dc>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d009      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a57      	ldr	r2, [pc, #348]	@ (80095b4 <HAL_DMA_Abort_IT+0x3e0>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d004      	beq.n	8009464 <HAL_DMA_Abort_IT+0x290>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a56      	ldr	r2, [pc, #344]	@ (80095b8 <HAL_DMA_Abort_IT+0x3e4>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d108      	bne.n	8009476 <HAL_DMA_Abort_IT+0x2a2>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0201 	bic.w	r2, r2, #1
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	e007      	b.n	8009486 <HAL_DMA_Abort_IT+0x2b2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0201 	bic.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a3c      	ldr	r2, [pc, #240]	@ (800957c <HAL_DMA_Abort_IT+0x3a8>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d072      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a3a      	ldr	r2, [pc, #232]	@ (8009580 <HAL_DMA_Abort_IT+0x3ac>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d06d      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a39      	ldr	r2, [pc, #228]	@ (8009584 <HAL_DMA_Abort_IT+0x3b0>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d068      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a37      	ldr	r2, [pc, #220]	@ (8009588 <HAL_DMA_Abort_IT+0x3b4>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d063      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a36      	ldr	r2, [pc, #216]	@ (800958c <HAL_DMA_Abort_IT+0x3b8>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d05e      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a34      	ldr	r2, [pc, #208]	@ (8009590 <HAL_DMA_Abort_IT+0x3bc>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d059      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a33      	ldr	r2, [pc, #204]	@ (8009594 <HAL_DMA_Abort_IT+0x3c0>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d054      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a31      	ldr	r2, [pc, #196]	@ (8009598 <HAL_DMA_Abort_IT+0x3c4>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d04f      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a30      	ldr	r2, [pc, #192]	@ (800959c <HAL_DMA_Abort_IT+0x3c8>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d04a      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a2e      	ldr	r2, [pc, #184]	@ (80095a0 <HAL_DMA_Abort_IT+0x3cc>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d045      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a2d      	ldr	r2, [pc, #180]	@ (80095a4 <HAL_DMA_Abort_IT+0x3d0>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d040      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a2b      	ldr	r2, [pc, #172]	@ (80095a8 <HAL_DMA_Abort_IT+0x3d4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d03b      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a2a      	ldr	r2, [pc, #168]	@ (80095ac <HAL_DMA_Abort_IT+0x3d8>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d036      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a28      	ldr	r2, [pc, #160]	@ (80095b0 <HAL_DMA_Abort_IT+0x3dc>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d031      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a27      	ldr	r2, [pc, #156]	@ (80095b4 <HAL_DMA_Abort_IT+0x3e0>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d02c      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a25      	ldr	r2, [pc, #148]	@ (80095b8 <HAL_DMA_Abort_IT+0x3e4>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d027      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a24      	ldr	r2, [pc, #144]	@ (80095bc <HAL_DMA_Abort_IT+0x3e8>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d022      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a22      	ldr	r2, [pc, #136]	@ (80095c0 <HAL_DMA_Abort_IT+0x3ec>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d01d      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a21      	ldr	r2, [pc, #132]	@ (80095c4 <HAL_DMA_Abort_IT+0x3f0>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d018      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a1f      	ldr	r2, [pc, #124]	@ (80095c8 <HAL_DMA_Abort_IT+0x3f4>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d013      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a1e      	ldr	r2, [pc, #120]	@ (80095cc <HAL_DMA_Abort_IT+0x3f8>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00e      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a1c      	ldr	r2, [pc, #112]	@ (80095d0 <HAL_DMA_Abort_IT+0x3fc>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d009      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a1b      	ldr	r2, [pc, #108]	@ (80095d4 <HAL_DMA_Abort_IT+0x400>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d004      	beq.n	8009576 <HAL_DMA_Abort_IT+0x3a2>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a19      	ldr	r2, [pc, #100]	@ (80095d8 <HAL_DMA_Abort_IT+0x404>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d132      	bne.n	80095dc <HAL_DMA_Abort_IT+0x408>
 8009576:	2301      	movs	r3, #1
 8009578:	e031      	b.n	80095de <HAL_DMA_Abort_IT+0x40a>
 800957a:	bf00      	nop
 800957c:	40020010 	.word	0x40020010
 8009580:	40020028 	.word	0x40020028
 8009584:	40020040 	.word	0x40020040
 8009588:	40020058 	.word	0x40020058
 800958c:	40020070 	.word	0x40020070
 8009590:	40020088 	.word	0x40020088
 8009594:	400200a0 	.word	0x400200a0
 8009598:	400200b8 	.word	0x400200b8
 800959c:	40020410 	.word	0x40020410
 80095a0:	40020428 	.word	0x40020428
 80095a4:	40020440 	.word	0x40020440
 80095a8:	40020458 	.word	0x40020458
 80095ac:	40020470 	.word	0x40020470
 80095b0:	40020488 	.word	0x40020488
 80095b4:	400204a0 	.word	0x400204a0
 80095b8:	400204b8 	.word	0x400204b8
 80095bc:	58025408 	.word	0x58025408
 80095c0:	5802541c 	.word	0x5802541c
 80095c4:	58025430 	.word	0x58025430
 80095c8:	58025444 	.word	0x58025444
 80095cc:	58025458 	.word	0x58025458
 80095d0:	5802546c 	.word	0x5802546c
 80095d4:	58025480 	.word	0x58025480
 80095d8:	58025494 	.word	0x58025494
 80095dc:	2300      	movs	r3, #0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d028      	beq.n	8009634 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80095f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095fc:	f003 031f 	and.w	r3, r3, #31
 8009600:	2201      	movs	r2, #1
 8009602:	409a      	lsls	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009610:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00c      	beq.n	8009634 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009628:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009632:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop

08009660 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800966e:	b2db      	uxtb	r3, r3
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800967c:	b480      	push	{r7}
 800967e:	b089      	sub	sp, #36	@ 0x24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009686:	2300      	movs	r3, #0
 8009688:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800968a:	4b86      	ldr	r3, [pc, #536]	@ (80098a4 <HAL_GPIO_Init+0x228>)
 800968c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800968e:	e18c      	b.n	80099aa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	2101      	movs	r1, #1
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	fa01 f303 	lsl.w	r3, r1, r3
 800969c:	4013      	ands	r3, r2
 800969e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 817e 	beq.w	80099a4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d005      	beq.n	80096c0 <HAL_GPIO_Init+0x44>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d130      	bne.n	8009722 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	2203      	movs	r2, #3
 80096cc:	fa02 f303 	lsl.w	r3, r2, r3
 80096d0:	43db      	mvns	r3, r3
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	4013      	ands	r3, r2
 80096d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	68da      	ldr	r2, [r3, #12]
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	fa02 f303 	lsl.w	r3, r2, r3
 80096e4:	69ba      	ldr	r2, [r7, #24]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80096f6:	2201      	movs	r2, #1
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	fa02 f303 	lsl.w	r3, r2, r3
 80096fe:	43db      	mvns	r3, r3
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	4013      	ands	r3, r2
 8009704:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	091b      	lsrs	r3, r3, #4
 800970c:	f003 0201 	and.w	r2, r3, #1
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	fa02 f303 	lsl.w	r3, r2, r3
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	4313      	orrs	r3, r2
 800971a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	69ba      	ldr	r2, [r7, #24]
 8009720:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f003 0303 	and.w	r3, r3, #3
 800972a:	2b03      	cmp	r3, #3
 800972c:	d017      	beq.n	800975e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	2203      	movs	r2, #3
 800973a:	fa02 f303 	lsl.w	r3, r2, r3
 800973e:	43db      	mvns	r3, r3
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	4013      	ands	r3, r2
 8009744:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	689a      	ldr	r2, [r3, #8]
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	fa02 f303 	lsl.w	r3, r2, r3
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	4313      	orrs	r3, r2
 8009756:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f003 0303 	and.w	r3, r3, #3
 8009766:	2b02      	cmp	r3, #2
 8009768:	d123      	bne.n	80097b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	08da      	lsrs	r2, r3, #3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3208      	adds	r2, #8
 8009772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	f003 0307 	and.w	r3, r3, #7
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	220f      	movs	r2, #15
 8009782:	fa02 f303 	lsl.w	r3, r2, r3
 8009786:	43db      	mvns	r3, r3
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	4013      	ands	r3, r2
 800978c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	691a      	ldr	r2, [r3, #16]
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	f003 0307 	and.w	r3, r3, #7
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	fa02 f303 	lsl.w	r3, r2, r3
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	08da      	lsrs	r2, r3, #3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3208      	adds	r2, #8
 80097ac:	69b9      	ldr	r1, [r7, #24]
 80097ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	2203      	movs	r2, #3
 80097be:	fa02 f303 	lsl.w	r3, r2, r3
 80097c2:	43db      	mvns	r3, r3
 80097c4:	69ba      	ldr	r2, [r7, #24]
 80097c6:	4013      	ands	r3, r2
 80097c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f003 0203 	and.w	r2, r3, #3
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	69ba      	ldr	r2, [r7, #24]
 80097dc:	4313      	orrs	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 80d8 	beq.w	80099a4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097f4:	4b2c      	ldr	r3, [pc, #176]	@ (80098a8 <HAL_GPIO_Init+0x22c>)
 80097f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097fa:	4a2b      	ldr	r2, [pc, #172]	@ (80098a8 <HAL_GPIO_Init+0x22c>)
 80097fc:	f043 0302 	orr.w	r3, r3, #2
 8009800:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009804:	4b28      	ldr	r3, [pc, #160]	@ (80098a8 <HAL_GPIO_Init+0x22c>)
 8009806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800980a:	f003 0302 	and.w	r3, r3, #2
 800980e:	60fb      	str	r3, [r7, #12]
 8009810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009812:	4a26      	ldr	r2, [pc, #152]	@ (80098ac <HAL_GPIO_Init+0x230>)
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	089b      	lsrs	r3, r3, #2
 8009818:	3302      	adds	r3, #2
 800981a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800981e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	220f      	movs	r2, #15
 800982a:	fa02 f303 	lsl.w	r3, r2, r3
 800982e:	43db      	mvns	r3, r3
 8009830:	69ba      	ldr	r2, [r7, #24]
 8009832:	4013      	ands	r3, r2
 8009834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a1d      	ldr	r2, [pc, #116]	@ (80098b0 <HAL_GPIO_Init+0x234>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d04a      	beq.n	80098d4 <HAL_GPIO_Init+0x258>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a1c      	ldr	r2, [pc, #112]	@ (80098b4 <HAL_GPIO_Init+0x238>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d02b      	beq.n	800989e <HAL_GPIO_Init+0x222>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a1b      	ldr	r2, [pc, #108]	@ (80098b8 <HAL_GPIO_Init+0x23c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d025      	beq.n	800989a <HAL_GPIO_Init+0x21e>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a1a      	ldr	r2, [pc, #104]	@ (80098bc <HAL_GPIO_Init+0x240>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d01f      	beq.n	8009896 <HAL_GPIO_Init+0x21a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a19      	ldr	r2, [pc, #100]	@ (80098c0 <HAL_GPIO_Init+0x244>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d019      	beq.n	8009892 <HAL_GPIO_Init+0x216>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a18      	ldr	r2, [pc, #96]	@ (80098c4 <HAL_GPIO_Init+0x248>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d013      	beq.n	800988e <HAL_GPIO_Init+0x212>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a17      	ldr	r2, [pc, #92]	@ (80098c8 <HAL_GPIO_Init+0x24c>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d00d      	beq.n	800988a <HAL_GPIO_Init+0x20e>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a16      	ldr	r2, [pc, #88]	@ (80098cc <HAL_GPIO_Init+0x250>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d007      	beq.n	8009886 <HAL_GPIO_Init+0x20a>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a15      	ldr	r2, [pc, #84]	@ (80098d0 <HAL_GPIO_Init+0x254>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d101      	bne.n	8009882 <HAL_GPIO_Init+0x206>
 800987e:	2309      	movs	r3, #9
 8009880:	e029      	b.n	80098d6 <HAL_GPIO_Init+0x25a>
 8009882:	230a      	movs	r3, #10
 8009884:	e027      	b.n	80098d6 <HAL_GPIO_Init+0x25a>
 8009886:	2307      	movs	r3, #7
 8009888:	e025      	b.n	80098d6 <HAL_GPIO_Init+0x25a>
 800988a:	2306      	movs	r3, #6
 800988c:	e023      	b.n	80098d6 <HAL_GPIO_Init+0x25a>
 800988e:	2305      	movs	r3, #5
 8009890:	e021      	b.n	80098d6 <HAL_GPIO_Init+0x25a>
 8009892:	2304      	movs	r3, #4
 8009894:	e01f      	b.n	80098d6 <HAL_GPIO_Init+0x25a>
 8009896:	2303      	movs	r3, #3
 8009898:	e01d      	b.n	80098d6 <HAL_GPIO_Init+0x25a>
 800989a:	2302      	movs	r3, #2
 800989c:	e01b      	b.n	80098d6 <HAL_GPIO_Init+0x25a>
 800989e:	2301      	movs	r3, #1
 80098a0:	e019      	b.n	80098d6 <HAL_GPIO_Init+0x25a>
 80098a2:	bf00      	nop
 80098a4:	58000080 	.word	0x58000080
 80098a8:	58024400 	.word	0x58024400
 80098ac:	58000400 	.word	0x58000400
 80098b0:	58020000 	.word	0x58020000
 80098b4:	58020400 	.word	0x58020400
 80098b8:	58020800 	.word	0x58020800
 80098bc:	58020c00 	.word	0x58020c00
 80098c0:	58021000 	.word	0x58021000
 80098c4:	58021400 	.word	0x58021400
 80098c8:	58021800 	.word	0x58021800
 80098cc:	58021c00 	.word	0x58021c00
 80098d0:	58022400 	.word	0x58022400
 80098d4:	2300      	movs	r3, #0
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	f002 0203 	and.w	r2, r2, #3
 80098dc:	0092      	lsls	r2, r2, #2
 80098de:	4093      	lsls	r3, r2
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80098e6:	4938      	ldr	r1, [pc, #224]	@ (80099c8 <HAL_GPIO_Init+0x34c>)
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	089b      	lsrs	r3, r3, #2
 80098ec:	3302      	adds	r3, #2
 80098ee:	69ba      	ldr	r2, [r7, #24]
 80098f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80098f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	43db      	mvns	r3, r3
 8009900:	69ba      	ldr	r2, [r7, #24]
 8009902:	4013      	ands	r3, r2
 8009904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	4313      	orrs	r3, r2
 8009918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800991a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	43db      	mvns	r3, r3
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	4013      	ands	r3, r2
 8009932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	4313      	orrs	r3, r2
 8009946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009948:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	43db      	mvns	r3, r3
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	4013      	ands	r3, r2
 800995e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800996c:	69ba      	ldr	r2, [r7, #24]
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	4313      	orrs	r3, r2
 8009972:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	69ba      	ldr	r2, [r7, #24]
 8009978:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	43db      	mvns	r3, r3
 8009984:	69ba      	ldr	r2, [r7, #24]
 8009986:	4013      	ands	r3, r2
 8009988:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	3301      	adds	r3, #1
 80099a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	fa22 f303 	lsr.w	r3, r2, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f47f ae6b 	bne.w	8009690 <HAL_GPIO_Init+0x14>
  }
}
 80099ba:	bf00      	nop
 80099bc:	bf00      	nop
 80099be:	3724      	adds	r7, #36	@ 0x24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	58000400 	.word	0x58000400

080099cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	691a      	ldr	r2, [r3, #16]
 80099dc:	887b      	ldrh	r3, [r7, #2]
 80099de:	4013      	ands	r3, r2
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80099e4:	2301      	movs	r3, #1
 80099e6:	73fb      	strb	r3, [r7, #15]
 80099e8:	e001      	b.n	80099ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	807b      	strh	r3, [r7, #2]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009a0c:	787b      	ldrb	r3, [r7, #1]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a12:	887a      	ldrh	r2, [r7, #2]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009a18:	e003      	b.n	8009a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009a1a:	887b      	ldrh	r3, [r7, #2]
 8009a1c:	041a      	lsls	r2, r3, #16
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	619a      	str	r2, [r3, #24]
}
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
	...

08009a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e08b      	b.n	8009b5a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d106      	bne.n	8009a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7fc f90a 	bl	8005c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2224      	movs	r2, #36	@ 0x24
 8009a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 0201 	bic.w	r2, r2, #1
 8009a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009a80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009a90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d107      	bne.n	8009aaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009aa6:	609a      	str	r2, [r3, #8]
 8009aa8:	e006      	b.n	8009ab8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009ab6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d108      	bne.n	8009ad2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ace:	605a      	str	r2, [r3, #4]
 8009ad0:	e007      	b.n	8009ae2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009ae0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6859      	ldr	r1, [r3, #4]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	4b1d      	ldr	r3, [pc, #116]	@ (8009b64 <HAL_I2C_Init+0x134>)
 8009aee:	430b      	orrs	r3, r1
 8009af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68da      	ldr	r2, [r3, #12]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009b00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	691a      	ldr	r2, [r3, #16]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	69d9      	ldr	r1, [r3, #28]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a1a      	ldr	r2, [r3, #32]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0201 	orr.w	r2, r2, #1
 8009b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2220      	movs	r2, #32
 8009b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	02008000 	.word	0x02008000

08009b68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	4608      	mov	r0, r1
 8009b72:	4611      	mov	r1, r2
 8009b74:	461a      	mov	r2, r3
 8009b76:	4603      	mov	r3, r0
 8009b78:	817b      	strh	r3, [r7, #10]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	813b      	strh	r3, [r7, #8]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	f040 80f9 	bne.w	8009d82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <HAL_I2C_Mem_Write+0x34>
 8009b96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d105      	bne.n	8009ba8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ba2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e0ed      	b.n	8009d84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d101      	bne.n	8009bb6 <HAL_I2C_Mem_Write+0x4e>
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	e0e6      	b.n	8009d84 <HAL_I2C_Mem_Write+0x21c>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009bbe:	f7fd fabf 	bl	8007140 <HAL_GetTick>
 8009bc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2319      	movs	r3, #25
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f001 fa26 	bl	800b022 <I2C_WaitOnFlagUntilTimeout>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e0d1      	b.n	8009d84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2221      	movs	r2, #33	@ 0x21
 8009be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2240      	movs	r2, #64	@ 0x40
 8009bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6a3a      	ldr	r2, [r7, #32]
 8009bfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c08:	88f8      	ldrh	r0, [r7, #6]
 8009c0a:	893a      	ldrh	r2, [r7, #8]
 8009c0c:	8979      	ldrh	r1, [r7, #10]
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	4603      	mov	r3, r0
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 fc79 	bl	800a510 <I2C_RequestMemoryWrite>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d005      	beq.n	8009c30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e0a9      	b.n	8009d84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	2bff      	cmp	r3, #255	@ 0xff
 8009c38:	d90e      	bls.n	8009c58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	22ff      	movs	r2, #255	@ 0xff
 8009c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	8979      	ldrh	r1, [r7, #10]
 8009c48:	2300      	movs	r3, #0
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f001 fba9 	bl	800b3a8 <I2C_TransferConfig>
 8009c56:	e00f      	b.n	8009c78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	8979      	ldrh	r1, [r7, #10]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f001 fb98 	bl	800b3a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f001 fa29 	bl	800b0d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e07b      	b.n	8009d84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c90:	781a      	ldrb	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d034      	beq.n	8009d30 <HAL_I2C_Mem_Write+0x1c8>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d130      	bne.n	8009d30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2180      	movs	r1, #128	@ 0x80
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f001 f9a2 	bl	800b022 <I2C_WaitOnFlagUntilTimeout>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e04d      	b.n	8009d84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	2bff      	cmp	r3, #255	@ 0xff
 8009cf0:	d90e      	bls.n	8009d10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	22ff      	movs	r2, #255	@ 0xff
 8009cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	8979      	ldrh	r1, [r7, #10]
 8009d00:	2300      	movs	r3, #0
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f001 fb4d 	bl	800b3a8 <I2C_TransferConfig>
 8009d0e:	e00f      	b.n	8009d30 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	8979      	ldrh	r1, [r7, #10]
 8009d22:	2300      	movs	r3, #0
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f001 fb3c 	bl	800b3a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d19e      	bne.n	8009c78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f001 fa0f 	bl	800b162 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e01a      	b.n	8009d84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2220      	movs	r2, #32
 8009d54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6859      	ldr	r1, [r3, #4]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	4b0a      	ldr	r3, [pc, #40]	@ (8009d8c <HAL_I2C_Mem_Write+0x224>)
 8009d62:	400b      	ands	r3, r1
 8009d64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2220      	movs	r2, #32
 8009d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e000      	b.n	8009d84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009d82:	2302      	movs	r3, #2
  }
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	fe00e800 	.word	0xfe00e800

08009d90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b088      	sub	sp, #32
 8009d94:	af02      	add	r7, sp, #8
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	4608      	mov	r0, r1
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4603      	mov	r3, r0
 8009da0:	817b      	strh	r3, [r7, #10]
 8009da2:	460b      	mov	r3, r1
 8009da4:	813b      	strh	r3, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b20      	cmp	r3, #32
 8009db4:	f040 80fd 	bne.w	8009fb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <HAL_I2C_Mem_Read+0x34>
 8009dbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d105      	bne.n	8009dd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e0f1      	b.n	8009fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d101      	bne.n	8009dde <HAL_I2C_Mem_Read+0x4e>
 8009dda:	2302      	movs	r3, #2
 8009ddc:	e0ea      	b.n	8009fb4 <HAL_I2C_Mem_Read+0x224>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009de6:	f7fd f9ab 	bl	8007140 <HAL_GetTick>
 8009dea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	2319      	movs	r3, #25
 8009df2:	2201      	movs	r2, #1
 8009df4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f001 f912 	bl	800b022 <I2C_WaitOnFlagUntilTimeout>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e0d5      	b.n	8009fb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2222      	movs	r2, #34	@ 0x22
 8009e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2240      	movs	r2, #64	@ 0x40
 8009e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6a3a      	ldr	r2, [r7, #32]
 8009e22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e30:	88f8      	ldrh	r0, [r7, #6]
 8009e32:	893a      	ldrh	r2, [r7, #8]
 8009e34:	8979      	ldrh	r1, [r7, #10]
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	4603      	mov	r3, r0
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f000 fbb9 	bl	800a5b8 <I2C_RequestMemoryRead>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d005      	beq.n	8009e58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e0ad      	b.n	8009fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	2bff      	cmp	r3, #255	@ 0xff
 8009e60:	d90e      	bls.n	8009e80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	22ff      	movs	r2, #255	@ 0xff
 8009e66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	8979      	ldrh	r1, [r7, #10]
 8009e70:	4b52      	ldr	r3, [pc, #328]	@ (8009fbc <HAL_I2C_Mem_Read+0x22c>)
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f001 fa95 	bl	800b3a8 <I2C_TransferConfig>
 8009e7e:	e00f      	b.n	8009ea0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	8979      	ldrh	r1, [r7, #10]
 8009e92:	4b4a      	ldr	r3, [pc, #296]	@ (8009fbc <HAL_I2C_Mem_Read+0x22c>)
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f001 fa84 	bl	800b3a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2104      	movs	r1, #4
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f001 f8b9 	bl	800b022 <I2C_WaitOnFlagUntilTimeout>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e07c      	b.n	8009fb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d034      	beq.n	8009f60 <HAL_I2C_Mem_Read+0x1d0>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d130      	bne.n	8009f60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f04:	2200      	movs	r2, #0
 8009f06:	2180      	movs	r1, #128	@ 0x80
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f001 f88a 	bl	800b022 <I2C_WaitOnFlagUntilTimeout>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e04d      	b.n	8009fb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	2bff      	cmp	r3, #255	@ 0xff
 8009f20:	d90e      	bls.n	8009f40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	22ff      	movs	r2, #255	@ 0xff
 8009f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	8979      	ldrh	r1, [r7, #10]
 8009f30:	2300      	movs	r3, #0
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f001 fa35 	bl	800b3a8 <I2C_TransferConfig>
 8009f3e:	e00f      	b.n	8009f60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	8979      	ldrh	r1, [r7, #10]
 8009f52:	2300      	movs	r3, #0
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f001 fa24 	bl	800b3a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d19a      	bne.n	8009ea0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f001 f8f7 	bl	800b162 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e01a      	b.n	8009fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2220      	movs	r2, #32
 8009f84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6859      	ldr	r1, [r3, #4]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc0 <HAL_I2C_Mem_Read+0x230>)
 8009f92:	400b      	ands	r3, r1
 8009f94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e000      	b.n	8009fb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009fb2:	2302      	movs	r3, #2
  }
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	80002400 	.word	0x80002400
 8009fc0:	fe00e800 	.word	0xfe00e800

08009fc4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08a      	sub	sp, #40	@ 0x28
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	607a      	str	r2, [r7, #4]
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	f040 80d2 	bne.w	800a18a <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ff4:	d101      	bne.n	8009ffa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	e0c8      	b.n	800a18c <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a000:	2b01      	cmp	r3, #1
 800a002:	d101      	bne.n	800a008 <HAL_I2C_IsDeviceReady+0x44>
 800a004:	2302      	movs	r3, #2
 800a006:	e0c1      	b.n	800a18c <HAL_I2C_IsDeviceReady+0x1c8>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2224      	movs	r2, #36	@ 0x24
 800a014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d105      	bne.n	800a032 <HAL_I2C_IsDeviceReady+0x6e>
 800a026:	897b      	ldrh	r3, [r7, #10]
 800a028:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a02c:	4b59      	ldr	r3, [pc, #356]	@ (800a194 <HAL_I2C_IsDeviceReady+0x1d0>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	e004      	b.n	800a03c <HAL_I2C_IsDeviceReady+0x78>
 800a032:	897b      	ldrh	r3, [r7, #10]
 800a034:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a038:	4b57      	ldr	r3, [pc, #348]	@ (800a198 <HAL_I2C_IsDeviceReady+0x1d4>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	6812      	ldr	r2, [r2, #0]
 800a040:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800a042:	f7fd f87d 	bl	8007140 <HAL_GetTick>
 800a046:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b20      	cmp	r3, #32
 800a054:	bf0c      	ite	eq
 800a056:	2301      	moveq	r3, #1
 800a058:	2300      	movne	r3, #0
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	f003 0310 	and.w	r3, r3, #16
 800a068:	2b10      	cmp	r3, #16
 800a06a:	bf0c      	ite	eq
 800a06c:	2301      	moveq	r3, #1
 800a06e:	2300      	movne	r3, #0
 800a070:	b2db      	uxtb	r3, r3
 800a072:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a074:	e034      	b.n	800a0e0 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07c:	d01a      	beq.n	800a0b4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a07e:	f7fd f85f 	bl	8007140 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d302      	bcc.n	800a094 <HAL_I2C_IsDeviceReady+0xd0>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10f      	bne.n	800a0b4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2220      	movs	r2, #32
 800a098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0a0:	f043 0220 	orr.w	r2, r3, #32
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e06b      	b.n	800a18c <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	f003 0320 	and.w	r3, r3, #32
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	bf0c      	ite	eq
 800a0c2:	2301      	moveq	r3, #1
 800a0c4:	2300      	movne	r3, #0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	f003 0310 	and.w	r3, r3, #16
 800a0d4:	2b10      	cmp	r3, #16
 800a0d6:	bf0c      	ite	eq
 800a0d8:	2301      	moveq	r3, #1
 800a0da:	2300      	movne	r3, #0
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a0e0:	7ffb      	ldrb	r3, [r7, #31]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <HAL_I2C_IsDeviceReady+0x128>
 800a0e6:	7fbb      	ldrb	r3, [r7, #30]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d0c4      	beq.n	800a076 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	f003 0310 	and.w	r3, r3, #16
 800a0f6:	2b10      	cmp	r3, #16
 800a0f8:	d01a      	beq.n	800a130 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2200      	movs	r2, #0
 800a102:	2120      	movs	r1, #32
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 ff8c 	bl	800b022 <I2C_WaitOnFlagUntilTimeout>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e03b      	b.n	800a18c <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2220      	movs	r2, #32
 800a11a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2220      	movs	r2, #32
 800a120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	e02d      	b.n	800a18c <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2200      	movs	r2, #0
 800a138:	2120      	movs	r1, #32
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 ff71 	bl	800b022 <I2C_WaitOnFlagUntilTimeout>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e020      	b.n	800a18c <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2210      	movs	r2, #16
 800a150:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2220      	movs	r2, #32
 800a158:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	3301      	adds	r3, #1
 800a15e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	429a      	cmp	r2, r3
 800a166:	f63f af5a 	bhi.w	800a01e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2220      	movs	r2, #32
 800a16e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a176:	f043 0220 	orr.w	r2, r3, #32
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e000      	b.n	800a18c <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 800a18a:	2302      	movs	r3, #2
  }
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3720      	adds	r7, #32
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	02002000 	.word	0x02002000
 800a198:	02002800 	.word	0x02002800

0800a19c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d005      	beq.n	800a1c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	4798      	blx	r3
  }
}
 800a1c8:	bf00      	nop
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00f      	beq.n	800a212 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a200:	f043 0201 	orr.w	r2, r3, #1
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a210:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00f      	beq.n	800a23c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a22a:	f043 0208 	orr.w	r2, r3, #8
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a23a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00f      	beq.n	800a266 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00a      	beq.n	800a266 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a254:	f043 0202 	orr.w	r2, r3, #2
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a264:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f003 030b 	and.w	r3, r3, #11
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800a276:	68f9      	ldr	r1, [r7, #12]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fd79 	bl	800ad70 <I2C_ITError>
  }
}
 800a27e:	bf00      	nop
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a286:	b480      	push	{r7}
 800a288:	b083      	sub	sp, #12
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a28e:	bf00      	nop
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b083      	sub	sp, #12
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a2a2:	bf00      	nop
 800a2a4:	370c      	adds	r7, #12
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b083      	sub	sp, #12
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	70fb      	strb	r3, [r7, #3]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a2be:	bf00      	nop
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a2d2:	bf00      	nop
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a2fa:	bf00      	nop
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800a306:	b480      	push	{r7}
 800a308:	b083      	sub	sp, #12
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b086      	sub	sp, #24
 800a322:	af00      	add	r7, sp, #0
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	60b9      	str	r1, [r7, #8]
 800a328:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a32e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d101      	bne.n	800a342 <I2C_Slave_ISR_IT+0x24>
 800a33e:	2302      	movs	r3, #2
 800a340:	e0e2      	b.n	800a508 <I2C_Slave_ISR_IT+0x1ea>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	f003 0320 	and.w	r3, r3, #32
 800a350:	2b00      	cmp	r3, #0
 800a352:	d009      	beq.n	800a368 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d004      	beq.n	800a368 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a35e:	6939      	ldr	r1, [r7, #16]
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 fa5d 	bl	800a820 <I2C_ITSlaveCplt>
 800a366:	e0ca      	b.n	800a4fe <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f003 0310 	and.w	r3, r3, #16
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d04b      	beq.n	800a40a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d046      	beq.n	800a40a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a380:	b29b      	uxth	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d128      	bne.n	800a3d8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b28      	cmp	r3, #40	@ 0x28
 800a390:	d108      	bne.n	800a3a4 <I2C_Slave_ISR_IT+0x86>
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a398:	d104      	bne.n	800a3a4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a39a:	6939      	ldr	r1, [r7, #16]
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 fc93 	bl	800acc8 <I2C_ITListenCplt>
 800a3a2:	e031      	b.n	800a408 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b29      	cmp	r3, #41	@ 0x29
 800a3ae:	d10e      	bne.n	800a3ce <I2C_Slave_ISR_IT+0xb0>
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a3b6:	d00a      	beq.n	800a3ce <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2210      	movs	r2, #16
 800a3be:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f000 fdec 	bl	800af9e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 f9ce 	bl	800a768 <I2C_ITSlaveSeqCplt>
 800a3cc:	e01c      	b.n	800a408 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2210      	movs	r2, #16
 800a3d4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a3d6:	e08f      	b.n	800a4f8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2210      	movs	r2, #16
 800a3de:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3e4:	f043 0204 	orr.w	r2, r3, #4
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <I2C_Slave_ISR_IT+0xdc>
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3f8:	d17e      	bne.n	800a4f8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3fe:	4619      	mov	r1, r3
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 fcb5 	bl	800ad70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a406:	e077      	b.n	800a4f8 <I2C_Slave_ISR_IT+0x1da>
 800a408:	e076      	b.n	800a4f8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	d02f      	beq.n	800a474 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d02a      	beq.n	800a474 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a422:	b29b      	uxth	r3, r3
 800a424:	2b00      	cmp	r3, #0
 800a426:	d018      	beq.n	800a45a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a432:	b2d2      	uxtb	r2, r2
 800a434:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a444:	3b01      	subs	r3, #1
 800a446:	b29a      	uxth	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a450:	b29b      	uxth	r3, r3
 800a452:	3b01      	subs	r3, #1
 800a454:	b29a      	uxth	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a45e:	b29b      	uxth	r3, r3
 800a460:	2b00      	cmp	r3, #0
 800a462:	d14b      	bne.n	800a4fc <I2C_Slave_ISR_IT+0x1de>
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a46a:	d047      	beq.n	800a4fc <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f000 f97b 	bl	800a768 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a472:	e043      	b.n	800a4fc <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	f003 0308 	and.w	r3, r3, #8
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d009      	beq.n	800a492 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a484:	2b00      	cmp	r3, #0
 800a486:	d004      	beq.n	800a492 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a488:	6939      	ldr	r1, [r7, #16]
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 f8e8 	bl	800a660 <I2C_ITAddrCplt>
 800a490:	e035      	b.n	800a4fe <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d030      	beq.n	800a4fe <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d02b      	beq.n	800a4fe <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d018      	beq.n	800a4e2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b4:	781a      	ldrb	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a4e0:	e00d      	b.n	800a4fe <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4e8:	d002      	beq.n	800a4f0 <I2C_Slave_ISR_IT+0x1d2>
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d106      	bne.n	800a4fe <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 f939 	bl	800a768 <I2C_ITSlaveSeqCplt>
 800a4f6:	e002      	b.n	800a4fe <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800a4f8:	bf00      	nop
 800a4fa:	e000      	b.n	800a4fe <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800a4fc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af02      	add	r7, sp, #8
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	4608      	mov	r0, r1
 800a51a:	4611      	mov	r1, r2
 800a51c:	461a      	mov	r2, r3
 800a51e:	4603      	mov	r3, r0
 800a520:	817b      	strh	r3, [r7, #10]
 800a522:	460b      	mov	r3, r1
 800a524:	813b      	strh	r3, [r7, #8]
 800a526:	4613      	mov	r3, r2
 800a528:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a52a:	88fb      	ldrh	r3, [r7, #6]
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	8979      	ldrh	r1, [r7, #10]
 800a530:	4b20      	ldr	r3, [pc, #128]	@ (800a5b4 <I2C_RequestMemoryWrite+0xa4>)
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 ff35 	bl	800b3a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	69b9      	ldr	r1, [r7, #24]
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 fdc6 	bl	800b0d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e02c      	b.n	800a5ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a552:	88fb      	ldrh	r3, [r7, #6]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d105      	bne.n	800a564 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a558:	893b      	ldrh	r3, [r7, #8]
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	629a      	str	r2, [r3, #40]	@ 0x28
 800a562:	e015      	b.n	800a590 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a564:	893b      	ldrh	r3, [r7, #8]
 800a566:	0a1b      	lsrs	r3, r3, #8
 800a568:	b29b      	uxth	r3, r3
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a572:	69fa      	ldr	r2, [r7, #28]
 800a574:	69b9      	ldr	r1, [r7, #24]
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 fdac 	bl	800b0d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e012      	b.n	800a5ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a586:	893b      	ldrh	r3, [r7, #8]
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	2200      	movs	r2, #0
 800a598:	2180      	movs	r1, #128	@ 0x80
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 fd41 	bl	800b022 <I2C_WaitOnFlagUntilTimeout>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e000      	b.n	800a5ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	80002000 	.word	0x80002000

0800a5b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af02      	add	r7, sp, #8
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	4608      	mov	r0, r1
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	817b      	strh	r3, [r7, #10]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	813b      	strh	r3, [r7, #8]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a5d2:	88fb      	ldrh	r3, [r7, #6]
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	8979      	ldrh	r1, [r7, #10]
 800a5d8:	4b20      	ldr	r3, [pc, #128]	@ (800a65c <I2C_RequestMemoryRead+0xa4>)
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f000 fee2 	bl	800b3a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	69b9      	ldr	r1, [r7, #24]
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f000 fd73 	bl	800b0d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e02c      	b.n	800a652 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d105      	bne.n	800a60a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5fe:	893b      	ldrh	r3, [r7, #8]
 800a600:	b2da      	uxtb	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	629a      	str	r2, [r3, #40]	@ 0x28
 800a608:	e015      	b.n	800a636 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a60a:	893b      	ldrh	r3, [r7, #8]
 800a60c:	0a1b      	lsrs	r3, r3, #8
 800a60e:	b29b      	uxth	r3, r3
 800a610:	b2da      	uxtb	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	69b9      	ldr	r1, [r7, #24]
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 fd59 	bl	800b0d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e012      	b.n	800a652 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a62c:	893b      	ldrh	r3, [r7, #8]
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2200      	movs	r2, #0
 800a63e:	2140      	movs	r1, #64	@ 0x40
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 fcee 	bl	800b022 <I2C_WaitOnFlagUntilTimeout>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e000      	b.n	800a652 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	80002000 	.word	0x80002000

0800a660 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a670:	b2db      	uxtb	r3, r3
 800a672:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a676:	2b28      	cmp	r3, #40	@ 0x28
 800a678:	d16a      	bne.n	800a750 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	0c1b      	lsrs	r3, r3, #16
 800a682:	b2db      	uxtb	r3, r3
 800a684:	f003 0301 	and.w	r3, r3, #1
 800a688:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	0c1b      	lsrs	r3, r3, #16
 800a692:	b29b      	uxth	r3, r3
 800a694:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a698:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6a6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a6b4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d138      	bne.n	800a730 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a6be:	897b      	ldrh	r3, [r7, #10]
 800a6c0:	09db      	lsrs	r3, r3, #7
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	89bb      	ldrh	r3, [r7, #12]
 800a6c6:	4053      	eors	r3, r2
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	f003 0306 	and.w	r3, r3, #6
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d11c      	bne.n	800a70c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a6d2:	897b      	ldrh	r3, [r7, #10]
 800a6d4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6da:	1c5a      	adds	r2, r3, #1
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d13b      	bne.n	800a760 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2208      	movs	r2, #8
 800a6f4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a6fe:	89ba      	ldrh	r2, [r7, #12]
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	4619      	mov	r1, r3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff fdd2 	bl	800a2ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a70a:	e029      	b.n	800a760 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a70c:	893b      	ldrh	r3, [r7, #8]
 800a70e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fe79 	bl	800b40c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a722:	89ba      	ldrh	r2, [r7, #12]
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	4619      	mov	r1, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7ff fdc0 	bl	800a2ae <HAL_I2C_AddrCallback>
}
 800a72e:	e017      	b.n	800a760 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a730:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fe69 	bl	800b40c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a742:	89ba      	ldrh	r2, [r7, #12]
 800a744:	7bfb      	ldrb	r3, [r7, #15]
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff fdb0 	bl	800a2ae <HAL_I2C_AddrCallback>
}
 800a74e:	e007      	b.n	800a760 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2208      	movs	r2, #8
 800a756:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800a760:	bf00      	nop
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a786:	2b00      	cmp	r3, #0
 800a788:	d008      	beq.n	800a79c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	e00c      	b.n	800a7b6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a7b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b29      	cmp	r3, #41	@ 0x29
 800a7c0:	d112      	bne.n	800a7e8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2228      	movs	r2, #40	@ 0x28
 800a7c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2221      	movs	r2, #33	@ 0x21
 800a7ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fe1a 	bl	800b40c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7ff fd50 	bl	800a286 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a7e6:	e017      	b.n	800a818 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7f2:	d111      	bne.n	800a818 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2228      	movs	r2, #40	@ 0x28
 800a7f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2222      	movs	r2, #34	@ 0x22
 800a800:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a802:	2102      	movs	r1, #2
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fe01 	bl	800b40c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7ff fd41 	bl	800a29a <HAL_I2C_SlaveRxCpltCallback>
}
 800a818:	bf00      	nop
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a842:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2220      	movs	r2, #32
 800a84a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	2b21      	cmp	r3, #33	@ 0x21
 800a850:	d002      	beq.n	800a858 <I2C_ITSlaveCplt+0x38>
 800a852:	7afb      	ldrb	r3, [r7, #11]
 800a854:	2b29      	cmp	r3, #41	@ 0x29
 800a856:	d108      	bne.n	800a86a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a858:	f248 0101 	movw	r1, #32769	@ 0x8001
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fdd5 	bl	800b40c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2221      	movs	r2, #33	@ 0x21
 800a866:	631a      	str	r2, [r3, #48]	@ 0x30
 800a868:	e019      	b.n	800a89e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a86a:	7afb      	ldrb	r3, [r7, #11]
 800a86c:	2b22      	cmp	r3, #34	@ 0x22
 800a86e:	d002      	beq.n	800a876 <I2C_ITSlaveCplt+0x56>
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	2b2a      	cmp	r3, #42	@ 0x2a
 800a874:	d108      	bne.n	800a888 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a876:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fdc6 	bl	800b40c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2222      	movs	r2, #34	@ 0x22
 800a884:	631a      	str	r2, [r3, #48]	@ 0x30
 800a886:	e00a      	b.n	800a89e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a888:	7afb      	ldrb	r3, [r7, #11]
 800a88a:	2b28      	cmp	r3, #40	@ 0x28
 800a88c:	d107      	bne.n	800a89e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a88e:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fdba 	bl	800b40c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a8ac:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6859      	ldr	r1, [r3, #4]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	4b7f      	ldr	r3, [pc, #508]	@ (800aab8 <I2C_ITSlaveCplt+0x298>)
 800a8ba:	400b      	ands	r3, r1
 800a8bc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fb6d 	bl	800af9e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d07a      	beq.n	800a9c4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a8dc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 8111 	beq.w	800ab0a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a73      	ldr	r2, [pc, #460]	@ (800aabc <I2C_ITSlaveCplt+0x29c>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d059      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a71      	ldr	r2, [pc, #452]	@ (800aac0 <I2C_ITSlaveCplt+0x2a0>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d053      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a6f      	ldr	r2, [pc, #444]	@ (800aac4 <I2C_ITSlaveCplt+0x2a4>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d04d      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a6d      	ldr	r2, [pc, #436]	@ (800aac8 <I2C_ITSlaveCplt+0x2a8>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d047      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a6b      	ldr	r2, [pc, #428]	@ (800aacc <I2C_ITSlaveCplt+0x2ac>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d041      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a69      	ldr	r2, [pc, #420]	@ (800aad0 <I2C_ITSlaveCplt+0x2b0>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d03b      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a67      	ldr	r2, [pc, #412]	@ (800aad4 <I2C_ITSlaveCplt+0x2b4>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d035      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a65      	ldr	r2, [pc, #404]	@ (800aad8 <I2C_ITSlaveCplt+0x2b8>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d02f      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a63      	ldr	r2, [pc, #396]	@ (800aadc <I2C_ITSlaveCplt+0x2bc>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d029      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a61      	ldr	r2, [pc, #388]	@ (800aae0 <I2C_ITSlaveCplt+0x2c0>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d023      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a5f      	ldr	r2, [pc, #380]	@ (800aae4 <I2C_ITSlaveCplt+0x2c4>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d01d      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a5d      	ldr	r2, [pc, #372]	@ (800aae8 <I2C_ITSlaveCplt+0x2c8>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d017      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a5b      	ldr	r2, [pc, #364]	@ (800aaec <I2C_ITSlaveCplt+0x2cc>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d011      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a59      	ldr	r2, [pc, #356]	@ (800aaf0 <I2C_ITSlaveCplt+0x2d0>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d00b      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a57      	ldr	r2, [pc, #348]	@ (800aaf4 <I2C_ITSlaveCplt+0x2d4>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d005      	beq.n	800a9a8 <I2C_ITSlaveCplt+0x188>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a55      	ldr	r2, [pc, #340]	@ (800aaf8 <I2C_ITSlaveCplt+0x2d8>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d105      	bne.n	800a9b4 <I2C_ITSlaveCplt+0x194>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	e004      	b.n	800a9be <I2C_ITSlaveCplt+0x19e>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800a9c2:	e0a2      	b.n	800ab0a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 809d 	beq.w	800ab0a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a9de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 8090 	beq.w	800ab0a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a32      	ldr	r2, [pc, #200]	@ (800aabc <I2C_ITSlaveCplt+0x29c>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d059      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a30      	ldr	r2, [pc, #192]	@ (800aac0 <I2C_ITSlaveCplt+0x2a0>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d053      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a2e      	ldr	r2, [pc, #184]	@ (800aac4 <I2C_ITSlaveCplt+0x2a4>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d04d      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a2c      	ldr	r2, [pc, #176]	@ (800aac8 <I2C_ITSlaveCplt+0x2a8>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d047      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a2a      	ldr	r2, [pc, #168]	@ (800aacc <I2C_ITSlaveCplt+0x2ac>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d041      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a28      	ldr	r2, [pc, #160]	@ (800aad0 <I2C_ITSlaveCplt+0x2b0>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d03b      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a26      	ldr	r2, [pc, #152]	@ (800aad4 <I2C_ITSlaveCplt+0x2b4>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d035      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a24      	ldr	r2, [pc, #144]	@ (800aad8 <I2C_ITSlaveCplt+0x2b8>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d02f      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a22      	ldr	r2, [pc, #136]	@ (800aadc <I2C_ITSlaveCplt+0x2bc>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d029      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a20      	ldr	r2, [pc, #128]	@ (800aae0 <I2C_ITSlaveCplt+0x2c0>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d023      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a1e      	ldr	r2, [pc, #120]	@ (800aae4 <I2C_ITSlaveCplt+0x2c4>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d01d      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a1c      	ldr	r2, [pc, #112]	@ (800aae8 <I2C_ITSlaveCplt+0x2c8>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d017      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a1a      	ldr	r2, [pc, #104]	@ (800aaec <I2C_ITSlaveCplt+0x2cc>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d011      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a18      	ldr	r2, [pc, #96]	@ (800aaf0 <I2C_ITSlaveCplt+0x2d0>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d00b      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a16      	ldr	r2, [pc, #88]	@ (800aaf4 <I2C_ITSlaveCplt+0x2d4>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d005      	beq.n	800aaaa <I2C_ITSlaveCplt+0x28a>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a14      	ldr	r2, [pc, #80]	@ (800aaf8 <I2C_ITSlaveCplt+0x2d8>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d128      	bne.n	800aafc <I2C_ITSlaveCplt+0x2dc>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	e027      	b.n	800ab06 <I2C_ITSlaveCplt+0x2e6>
 800aab6:	bf00      	nop
 800aab8:	fe00e800 	.word	0xfe00e800
 800aabc:	40020010 	.word	0x40020010
 800aac0:	40020028 	.word	0x40020028
 800aac4:	40020040 	.word	0x40020040
 800aac8:	40020058 	.word	0x40020058
 800aacc:	40020070 	.word	0x40020070
 800aad0:	40020088 	.word	0x40020088
 800aad4:	400200a0 	.word	0x400200a0
 800aad8:	400200b8 	.word	0x400200b8
 800aadc:	40020410 	.word	0x40020410
 800aae0:	40020428 	.word	0x40020428
 800aae4:	40020440 	.word	0x40020440
 800aae8:	40020458 	.word	0x40020458
 800aaec:	40020470 	.word	0x40020470
 800aaf0:	40020488 	.word	0x40020488
 800aaf4:	400204a0 	.word	0x400204a0
 800aaf8:	400204b8 	.word	0x400204b8
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d020      	beq.n	800ab56 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f023 0304 	bic.w	r3, r3, #4
 800ab1a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab26:	b2d2      	uxtb	r2, r2
 800ab28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2e:	1c5a      	adds	r2, r3, #1
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00c      	beq.n	800ab56 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab40:	3b01      	subs	r3, #1
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d005      	beq.n	800ab6c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab64:	f043 0204 	orr.w	r2, r3, #4
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f003 0310 	and.w	r3, r3, #16
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d049      	beq.n	800ac0a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d044      	beq.n	800ac0a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d128      	bne.n	800abdc <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	2b28      	cmp	r3, #40	@ 0x28
 800ab94:	d108      	bne.n	800aba8 <I2C_ITSlaveCplt+0x388>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab9c:	d104      	bne.n	800aba8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ab9e:	6979      	ldr	r1, [r7, #20]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f891 	bl	800acc8 <I2C_ITListenCplt>
 800aba6:	e030      	b.n	800ac0a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b29      	cmp	r3, #41	@ 0x29
 800abb2:	d10e      	bne.n	800abd2 <I2C_ITSlaveCplt+0x3b2>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800abba:	d00a      	beq.n	800abd2 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2210      	movs	r2, #16
 800abc2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f9ea 	bl	800af9e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7ff fdcc 	bl	800a768 <I2C_ITSlaveSeqCplt>
 800abd0:	e01b      	b.n	800ac0a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2210      	movs	r2, #16
 800abd8:	61da      	str	r2, [r3, #28]
 800abda:	e016      	b.n	800ac0a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2210      	movs	r2, #16
 800abe2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abe8:	f043 0204 	orr.w	r2, r3, #4
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <I2C_ITSlaveCplt+0x3de>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abfc:	d105      	bne.n	800ac0a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 f8b3 	bl	800ad70 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d010      	beq.n	800ac42 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f8a2 	bl	800ad70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b28      	cmp	r3, #40	@ 0x28
 800ac36:	d141      	bne.n	800acbc <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ac38:	6979      	ldr	r1, [r7, #20]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f844 	bl	800acc8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ac40:	e03c      	b.n	800acbc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ac4a:	d014      	beq.n	800ac76 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff fd8b 	bl	800a768 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a1b      	ldr	r2, [pc, #108]	@ (800acc4 <I2C_ITSlaveCplt+0x4a4>)
 800ac56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2220      	movs	r2, #32
 800ac5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff fb2b 	bl	800a2ca <HAL_I2C_ListenCpltCallback>
}
 800ac74:	e022      	b.n	800acbc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b22      	cmp	r3, #34	@ 0x22
 800ac80:	d10e      	bne.n	800aca0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2220      	movs	r2, #32
 800ac86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7ff fafe 	bl	800a29a <HAL_I2C_SlaveRxCpltCallback>
}
 800ac9e:	e00d      	b.n	800acbc <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2220      	movs	r2, #32
 800aca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fae5 	bl	800a286 <HAL_I2C_SlaveTxCpltCallback>
}
 800acbc:	bf00      	nop
 800acbe:	3718      	adds	r7, #24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	ffff0000 	.word	0xffff0000

0800acc8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a25      	ldr	r2, [pc, #148]	@ (800ad6c <I2C_ITListenCplt+0xa4>)
 800acd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	f003 0304 	and.w	r3, r3, #4
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d022      	beq.n	800ad44 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d012      	beq.n	800ad44 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad22:	3b01      	subs	r3, #1
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	3b01      	subs	r3, #1
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad3c:	f043 0204 	orr.w	r2, r3, #4
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ad44:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fb5f 	bl	800b40c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2210      	movs	r2, #16
 800ad54:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7ff fab3 	bl	800a2ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	ffff0000 	.word	0xffff0000

0800ad70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad80:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a6d      	ldr	r2, [pc, #436]	@ (800af44 <I2C_ITError+0x1d4>)
 800ad8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	431a      	orrs	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	2b28      	cmp	r3, #40	@ 0x28
 800ada6:	d005      	beq.n	800adb4 <I2C_ITError+0x44>
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	2b29      	cmp	r3, #41	@ 0x29
 800adac:	d002      	beq.n	800adb4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800adb2:	d10b      	bne.n	800adcc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800adb4:	2103      	movs	r1, #3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fb28 	bl	800b40c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2228      	movs	r2, #40	@ 0x28
 800adc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a60      	ldr	r2, [pc, #384]	@ (800af48 <I2C_ITError+0x1d8>)
 800adc8:	635a      	str	r2, [r3, #52]	@ 0x34
 800adca:	e030      	b.n	800ae2e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800adcc:	f248 0103 	movw	r1, #32771	@ 0x8003
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fb1b 	bl	800b40c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f8e1 	bl	800af9e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	2b60      	cmp	r3, #96	@ 0x60
 800ade6:	d01f      	beq.n	800ae28 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2220      	movs	r2, #32
 800adec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	f003 0320 	and.w	r3, r3, #32
 800adfa:	2b20      	cmp	r3, #32
 800adfc:	d114      	bne.n	800ae28 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	f003 0310 	and.w	r3, r3, #16
 800ae08:	2b10      	cmp	r3, #16
 800ae0a:	d109      	bne.n	800ae20 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2210      	movs	r2, #16
 800ae12:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae18:	f043 0204 	orr.w	r2, r3, #4
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2220      	movs	r2, #32
 800ae26:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae32:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d039      	beq.n	800aeb0 <I2C_ITError+0x140>
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	2b11      	cmp	r3, #17
 800ae40:	d002      	beq.n	800ae48 <I2C_ITError+0xd8>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2b21      	cmp	r3, #33	@ 0x21
 800ae46:	d133      	bne.n	800aeb0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae56:	d107      	bne.n	800ae68 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ae66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fe fbf7 	bl	8009660 <HAL_DMA_GetState>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d017      	beq.n	800aea8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7c:	4a33      	ldr	r2, [pc, #204]	@ (800af4c <I2C_ITError+0x1dc>)
 800ae7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fe f9a1 	bl	80091d4 <HAL_DMA_Abort_IT>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d04d      	beq.n	800af34 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800aea2:	4610      	mov	r0, r2
 800aea4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aea6:	e045      	b.n	800af34 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f851 	bl	800af50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aeae:	e041      	b.n	800af34 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d039      	beq.n	800af2c <I2C_ITError+0x1bc>
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b12      	cmp	r3, #18
 800aebc:	d002      	beq.n	800aec4 <I2C_ITError+0x154>
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2b22      	cmp	r3, #34	@ 0x22
 800aec2:	d133      	bne.n	800af2c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aece:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aed2:	d107      	bne.n	800aee4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aee2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fe fbb9 	bl	8009660 <HAL_DMA_GetState>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d017      	beq.n	800af24 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aef8:	4a14      	ldr	r2, [pc, #80]	@ (800af4c <I2C_ITError+0x1dc>)
 800aefa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe f963 	bl	80091d4 <HAL_DMA_Abort_IT>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d011      	beq.n	800af38 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800af1e:	4610      	mov	r0, r2
 800af20:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800af22:	e009      	b.n	800af38 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f813 	bl	800af50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800af2a:	e005      	b.n	800af38 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f80f 	bl	800af50 <I2C_TreatErrorCallback>
  }
}
 800af32:	e002      	b.n	800af3a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800af34:	bf00      	nop
 800af36:	e000      	b.n	800af3a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800af38:	bf00      	nop
}
 800af3a:	bf00      	nop
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	ffff0000 	.word	0xffff0000
 800af48:	0800a31f 	.word	0x0800a31f
 800af4c:	0800afe7 	.word	0x0800afe7

0800af50 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	2b60      	cmp	r3, #96	@ 0x60
 800af62:	d10e      	bne.n	800af82 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2220      	movs	r2, #32
 800af68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7ff f9b9 	bl	800a2f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800af80:	e009      	b.n	800af96 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff f9a4 	bl	800a2de <HAL_I2C_ErrorCallback>
}
 800af96:	bf00      	nop
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b083      	sub	sp, #12
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	f003 0302 	and.w	r3, r3, #2
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d103      	bne.n	800afbc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2200      	movs	r2, #0
 800afba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d007      	beq.n	800afda <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	699a      	ldr	r2, [r3, #24]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f042 0201 	orr.w	r2, r2, #1
 800afd8:	619a      	str	r2, [r3, #24]
  }
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b084      	sub	sp, #16
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b000:	2200      	movs	r2, #0
 800b002:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b010:	2200      	movs	r2, #0
 800b012:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f7ff ff9b 	bl	800af50 <I2C_TreatErrorCallback>
}
 800b01a:	bf00      	nop
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	603b      	str	r3, [r7, #0]
 800b02e:	4613      	mov	r3, r2
 800b030:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b032:	e03b      	b.n	800b0ac <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b034:	69ba      	ldr	r2, [r7, #24]
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 f8d5 	bl	800b1e8 <I2C_IsErrorOccurred>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	e041      	b.n	800b0cc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04e:	d02d      	beq.n	800b0ac <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b050:	f7fc f876 	bl	8007140 <HAL_GetTick>
 800b054:	4602      	mov	r2, r0
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d302      	bcc.n	800b066 <I2C_WaitOnFlagUntilTimeout+0x44>
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d122      	bne.n	800b0ac <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	699a      	ldr	r2, [r3, #24]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	4013      	ands	r3, r2
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	429a      	cmp	r2, r3
 800b074:	bf0c      	ite	eq
 800b076:	2301      	moveq	r3, #1
 800b078:	2300      	movne	r3, #0
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	461a      	mov	r2, r3
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	429a      	cmp	r2, r3
 800b082:	d113      	bne.n	800b0ac <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b088:	f043 0220 	orr.w	r2, r3, #32
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2220      	movs	r2, #32
 800b094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e00f      	b.n	800b0cc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	699a      	ldr	r2, [r3, #24]
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	bf0c      	ite	eq
 800b0bc:	2301      	moveq	r3, #1
 800b0be:	2300      	movne	r3, #0
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	79fb      	ldrb	r3, [r7, #7]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d0b4      	beq.n	800b034 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b0e0:	e033      	b.n	800b14a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	68b9      	ldr	r1, [r7, #8]
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f000 f87e 	bl	800b1e8 <I2C_IsErrorOccurred>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e031      	b.n	800b15a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d025      	beq.n	800b14a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0fe:	f7fc f81f 	bl	8007140 <HAL_GetTick>
 800b102:	4602      	mov	r2, r0
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d302      	bcc.n	800b114 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d11a      	bne.n	800b14a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	f003 0302 	and.w	r3, r3, #2
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d013      	beq.n	800b14a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b126:	f043 0220 	orr.w	r2, r3, #32
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2220      	movs	r2, #32
 800b132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e007      	b.n	800b15a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	f003 0302 	and.w	r3, r3, #2
 800b154:	2b02      	cmp	r3, #2
 800b156:	d1c4      	bne.n	800b0e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b16e:	e02f      	b.n	800b1d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	68b9      	ldr	r1, [r7, #8]
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f000 f837 	bl	800b1e8 <I2C_IsErrorOccurred>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	e02d      	b.n	800b1e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b184:	f7fb ffdc 	bl	8007140 <HAL_GetTick>
 800b188:	4602      	mov	r2, r0
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	429a      	cmp	r2, r3
 800b192:	d302      	bcc.n	800b19a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d11a      	bne.n	800b1d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	f003 0320 	and.w	r3, r3, #32
 800b1a4:	2b20      	cmp	r3, #32
 800b1a6:	d013      	beq.n	800b1d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ac:	f043 0220 	orr.w	r2, r3, #32
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2220      	movs	r2, #32
 800b1b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e007      	b.n	800b1e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	f003 0320 	and.w	r3, r3, #32
 800b1da:	2b20      	cmp	r3, #32
 800b1dc:	d1c8      	bne.n	800b170 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08a      	sub	sp, #40	@ 0x28
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	f003 0310 	and.w	r3, r3, #16
 800b210:	2b00      	cmp	r3, #0
 800b212:	d068      	beq.n	800b2e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2210      	movs	r2, #16
 800b21a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b21c:	e049      	b.n	800b2b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b224:	d045      	beq.n	800b2b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b226:	f7fb ff8b 	bl	8007140 <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	429a      	cmp	r2, r3
 800b234:	d302      	bcc.n	800b23c <I2C_IsErrorOccurred+0x54>
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d13a      	bne.n	800b2b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b246:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b24e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b25a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b25e:	d121      	bne.n	800b2a4 <I2C_IsErrorOccurred+0xbc>
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b266:	d01d      	beq.n	800b2a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b268:	7cfb      	ldrb	r3, [r7, #19]
 800b26a:	2b20      	cmp	r3, #32
 800b26c:	d01a      	beq.n	800b2a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	685a      	ldr	r2, [r3, #4]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b27c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b27e:	f7fb ff5f 	bl	8007140 <HAL_GetTick>
 800b282:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b284:	e00e      	b.n	800b2a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b286:	f7fb ff5b 	bl	8007140 <HAL_GetTick>
 800b28a:	4602      	mov	r2, r0
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	2b19      	cmp	r3, #25
 800b292:	d907      	bls.n	800b2a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	f043 0320 	orr.w	r3, r3, #32
 800b29a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b2a2:	e006      	b.n	800b2b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	f003 0320 	and.w	r3, r3, #32
 800b2ae:	2b20      	cmp	r3, #32
 800b2b0:	d1e9      	bne.n	800b286 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	f003 0320 	and.w	r3, r3, #32
 800b2bc:	2b20      	cmp	r3, #32
 800b2be:	d003      	beq.n	800b2c8 <I2C_IsErrorOccurred+0xe0>
 800b2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0aa      	beq.n	800b21e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d103      	bne.n	800b2d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	f043 0304 	orr.w	r3, r3, #4
 800b2de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00b      	beq.n	800b310 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b2f8:	6a3b      	ldr	r3, [r7, #32]
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b308:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00b      	beq.n	800b332 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	f043 0308 	orr.w	r3, r3, #8
 800b320:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b32a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00b      	beq.n	800b354 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	f043 0302 	orr.w	r3, r3, #2
 800b342:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b34c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d01c      	beq.n	800b396 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f7ff fe1e 	bl	800af9e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6859      	ldr	r1, [r3, #4]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a4 <I2C_IsErrorOccurred+0x1bc>)
 800b36e:	400b      	ands	r3, r1
 800b370:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	431a      	orrs	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2220      	movs	r2, #32
 800b382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3728      	adds	r7, #40	@ 0x28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	fe00e800 	.word	0xfe00e800

0800b3a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	607b      	str	r3, [r7, #4]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	817b      	strh	r3, [r7, #10]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3ba:	897b      	ldrh	r3, [r7, #10]
 800b3bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b3c0:	7a7b      	ldrb	r3, [r7, #9]
 800b3c2:	041b      	lsls	r3, r3, #16
 800b3c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	0d5b      	lsrs	r3, r3, #21
 800b3e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b3e6:	4b08      	ldr	r3, [pc, #32]	@ (800b408 <I2C_TransferConfig+0x60>)
 800b3e8:	430b      	orrs	r3, r1
 800b3ea:	43db      	mvns	r3, r3
 800b3ec:	ea02 0103 	and.w	r1, r2, r3
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	697a      	ldr	r2, [r7, #20]
 800b3f6:	430a      	orrs	r2, r1
 800b3f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b3fa:	bf00      	nop
 800b3fc:	371c      	adds	r7, #28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	03ff63ff 	.word	0x03ff63ff

0800b40c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b418:	2300      	movs	r3, #0
 800b41a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b41c:	887b      	ldrh	r3, [r7, #2]
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00f      	beq.n	800b446 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800b42c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b434:	b2db      	uxtb	r3, r3
 800b436:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b43a:	2b28      	cmp	r3, #40	@ 0x28
 800b43c:	d003      	beq.n	800b446 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b444:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b446:	887b      	ldrh	r3, [r7, #2]
 800b448:	f003 0302 	and.w	r3, r3, #2
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00f      	beq.n	800b470 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800b456:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b464:	2b28      	cmp	r3, #40	@ 0x28
 800b466:	d003      	beq.n	800b470 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b46e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b470:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b474:	2b00      	cmp	r3, #0
 800b476:	da03      	bge.n	800b480 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b47e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b480:	887b      	ldrh	r3, [r7, #2]
 800b482:	2b10      	cmp	r3, #16
 800b484:	d103      	bne.n	800b48e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b48c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b48e:	887b      	ldrh	r3, [r7, #2]
 800b490:	2b20      	cmp	r3, #32
 800b492:	d103      	bne.n	800b49c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f043 0320 	orr.w	r3, r3, #32
 800b49a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b49c:	887b      	ldrh	r3, [r7, #2]
 800b49e:	2b40      	cmp	r3, #64	@ 0x40
 800b4a0:	d103      	bne.n	800b4aa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4a8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	6819      	ldr	r1, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	43da      	mvns	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	400a      	ands	r2, r1
 800b4ba:	601a      	str	r2, [r3, #0]
}
 800b4bc:	bf00      	nop
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b20      	cmp	r3, #32
 800b4dc:	d138      	bne.n	800b550 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d101      	bne.n	800b4ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	e032      	b.n	800b552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2224      	movs	r2, #36	@ 0x24
 800b4f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 0201 	bic.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b51a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6819      	ldr	r1, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	430a      	orrs	r2, r1
 800b52a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f042 0201 	orr.w	r2, r2, #1
 800b53a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2220      	movs	r2, #32
 800b540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	e000      	b.n	800b552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b550:	2302      	movs	r3, #2
  }
}
 800b552:	4618      	mov	r0, r3
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b55e:	b480      	push	{r7}
 800b560:	b085      	sub	sp, #20
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b20      	cmp	r3, #32
 800b572:	d139      	bne.n	800b5e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d101      	bne.n	800b582 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b57e:	2302      	movs	r3, #2
 800b580:	e033      	b.n	800b5ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2224      	movs	r2, #36	@ 0x24
 800b58e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f022 0201 	bic.w	r2, r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b5b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	021b      	lsls	r3, r3, #8
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f042 0201 	orr.w	r2, r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	e000      	b.n	800b5ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b5e8:	2302      	movs	r3, #2
  }
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3714      	adds	r7, #20
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
	...

0800b5f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b600:	4b19      	ldr	r3, [pc, #100]	@ (800b668 <HAL_PWREx_ConfigSupply+0x70>)
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	f003 0304 	and.w	r3, r3, #4
 800b608:	2b04      	cmp	r3, #4
 800b60a:	d00a      	beq.n	800b622 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b60c:	4b16      	ldr	r3, [pc, #88]	@ (800b668 <HAL_PWREx_ConfigSupply+0x70>)
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	f003 0307 	and.w	r3, r3, #7
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	429a      	cmp	r2, r3
 800b618:	d001      	beq.n	800b61e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e01f      	b.n	800b65e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	e01d      	b.n	800b65e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b622:	4b11      	ldr	r3, [pc, #68]	@ (800b668 <HAL_PWREx_ConfigSupply+0x70>)
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	f023 0207 	bic.w	r2, r3, #7
 800b62a:	490f      	ldr	r1, [pc, #60]	@ (800b668 <HAL_PWREx_ConfigSupply+0x70>)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4313      	orrs	r3, r2
 800b630:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b632:	f7fb fd85 	bl	8007140 <HAL_GetTick>
 800b636:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b638:	e009      	b.n	800b64e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b63a:	f7fb fd81 	bl	8007140 <HAL_GetTick>
 800b63e:	4602      	mov	r2, r0
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b648:	d901      	bls.n	800b64e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e007      	b.n	800b65e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b64e:	4b06      	ldr	r3, [pc, #24]	@ (800b668 <HAL_PWREx_ConfigSupply+0x70>)
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b65a:	d1ee      	bne.n	800b63a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	58024800 	.word	0x58024800

0800b66c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b08c      	sub	sp, #48	@ 0x30
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e3c8      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 8087 	beq.w	800b79a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b68c:	4b88      	ldr	r3, [pc, #544]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b694:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b696:	4b86      	ldr	r3, [pc, #536]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b69a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b69e:	2b10      	cmp	r3, #16
 800b6a0:	d007      	beq.n	800b6b2 <HAL_RCC_OscConfig+0x46>
 800b6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6a4:	2b18      	cmp	r3, #24
 800b6a6:	d110      	bne.n	800b6ca <HAL_RCC_OscConfig+0x5e>
 800b6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6aa:	f003 0303 	and.w	r3, r3, #3
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d10b      	bne.n	800b6ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6b2:	4b7f      	ldr	r3, [pc, #508]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d06c      	beq.n	800b798 <HAL_RCC_OscConfig+0x12c>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d168      	bne.n	800b798 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e3a2      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6d2:	d106      	bne.n	800b6e2 <HAL_RCC_OscConfig+0x76>
 800b6d4:	4b76      	ldr	r3, [pc, #472]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a75      	ldr	r2, [pc, #468]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b6da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	e02e      	b.n	800b740 <HAL_RCC_OscConfig+0xd4>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10c      	bne.n	800b704 <HAL_RCC_OscConfig+0x98>
 800b6ea:	4b71      	ldr	r3, [pc, #452]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a70      	ldr	r2, [pc, #448]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b6f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6f4:	6013      	str	r3, [r2, #0]
 800b6f6:	4b6e      	ldr	r3, [pc, #440]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a6d      	ldr	r2, [pc, #436]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b6fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b700:	6013      	str	r3, [r2, #0]
 800b702:	e01d      	b.n	800b740 <HAL_RCC_OscConfig+0xd4>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b70c:	d10c      	bne.n	800b728 <HAL_RCC_OscConfig+0xbc>
 800b70e:	4b68      	ldr	r3, [pc, #416]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a67      	ldr	r2, [pc, #412]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b718:	6013      	str	r3, [r2, #0]
 800b71a:	4b65      	ldr	r3, [pc, #404]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a64      	ldr	r2, [pc, #400]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b724:	6013      	str	r3, [r2, #0]
 800b726:	e00b      	b.n	800b740 <HAL_RCC_OscConfig+0xd4>
 800b728:	4b61      	ldr	r3, [pc, #388]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a60      	ldr	r2, [pc, #384]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b72e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	4b5e      	ldr	r3, [pc, #376]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a5d      	ldr	r2, [pc, #372]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b73a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b73e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d013      	beq.n	800b770 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b748:	f7fb fcfa 	bl	8007140 <HAL_GetTick>
 800b74c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b74e:	e008      	b.n	800b762 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b750:	f7fb fcf6 	bl	8007140 <HAL_GetTick>
 800b754:	4602      	mov	r2, r0
 800b756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	2b64      	cmp	r3, #100	@ 0x64
 800b75c:	d901      	bls.n	800b762 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b75e:	2303      	movs	r3, #3
 800b760:	e356      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b762:	4b53      	ldr	r3, [pc, #332]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d0f0      	beq.n	800b750 <HAL_RCC_OscConfig+0xe4>
 800b76e:	e014      	b.n	800b79a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b770:	f7fb fce6 	bl	8007140 <HAL_GetTick>
 800b774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b776:	e008      	b.n	800b78a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b778:	f7fb fce2 	bl	8007140 <HAL_GetTick>
 800b77c:	4602      	mov	r2, r0
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	2b64      	cmp	r3, #100	@ 0x64
 800b784:	d901      	bls.n	800b78a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b786:	2303      	movs	r3, #3
 800b788:	e342      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b78a:	4b49      	ldr	r3, [pc, #292]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1f0      	bne.n	800b778 <HAL_RCC_OscConfig+0x10c>
 800b796:	e000      	b.n	800b79a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 0302 	and.w	r3, r3, #2
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 808c 	beq.w	800b8c0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7a8:	4b41      	ldr	r3, [pc, #260]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b7b2:	4b3f      	ldr	r3, [pc, #252]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d007      	beq.n	800b7ce <HAL_RCC_OscConfig+0x162>
 800b7be:	6a3b      	ldr	r3, [r7, #32]
 800b7c0:	2b18      	cmp	r3, #24
 800b7c2:	d137      	bne.n	800b834 <HAL_RCC_OscConfig+0x1c8>
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	f003 0303 	and.w	r3, r3, #3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d132      	bne.n	800b834 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b7ce:	4b38      	ldr	r3, [pc, #224]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f003 0304 	and.w	r3, r3, #4
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d005      	beq.n	800b7e6 <HAL_RCC_OscConfig+0x17a>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e314      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b7e6:	4b32      	ldr	r3, [pc, #200]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f023 0219 	bic.w	r2, r3, #25
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	492f      	ldr	r1, [pc, #188]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7f8:	f7fb fca2 	bl	8007140 <HAL_GetTick>
 800b7fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7fe:	e008      	b.n	800b812 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b800:	f7fb fc9e 	bl	8007140 <HAL_GetTick>
 800b804:	4602      	mov	r2, r0
 800b806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d901      	bls.n	800b812 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b80e:	2303      	movs	r3, #3
 800b810:	e2fe      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b812:	4b27      	ldr	r3, [pc, #156]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0304 	and.w	r3, r3, #4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0f0      	beq.n	800b800 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b81e:	4b24      	ldr	r3, [pc, #144]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	061b      	lsls	r3, r3, #24
 800b82c:	4920      	ldr	r1, [pc, #128]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b82e:	4313      	orrs	r3, r2
 800b830:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b832:	e045      	b.n	800b8c0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d026      	beq.n	800b88a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b83c:	4b1c      	ldr	r3, [pc, #112]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f023 0219 	bic.w	r2, r3, #25
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	4919      	ldr	r1, [pc, #100]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b84a:	4313      	orrs	r3, r2
 800b84c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b84e:	f7fb fc77 	bl	8007140 <HAL_GetTick>
 800b852:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b854:	e008      	b.n	800b868 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b856:	f7fb fc73 	bl	8007140 <HAL_GetTick>
 800b85a:	4602      	mov	r2, r0
 800b85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	2b02      	cmp	r3, #2
 800b862:	d901      	bls.n	800b868 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	e2d3      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b868:	4b11      	ldr	r3, [pc, #68]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0304 	and.w	r3, r3, #4
 800b870:	2b00      	cmp	r3, #0
 800b872:	d0f0      	beq.n	800b856 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b874:	4b0e      	ldr	r3, [pc, #56]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	061b      	lsls	r3, r3, #24
 800b882:	490b      	ldr	r1, [pc, #44]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b884:	4313      	orrs	r3, r2
 800b886:	604b      	str	r3, [r1, #4]
 800b888:	e01a      	b.n	800b8c0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b88a:	4b09      	ldr	r3, [pc, #36]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a08      	ldr	r2, [pc, #32]	@ (800b8b0 <HAL_RCC_OscConfig+0x244>)
 800b890:	f023 0301 	bic.w	r3, r3, #1
 800b894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b896:	f7fb fc53 	bl	8007140 <HAL_GetTick>
 800b89a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b89c:	e00a      	b.n	800b8b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b89e:	f7fb fc4f 	bl	8007140 <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d903      	bls.n	800b8b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e2af      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
 800b8b0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b8b4:	4b96      	ldr	r3, [pc, #600]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0304 	and.w	r3, r3, #4
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1ee      	bne.n	800b89e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 0310 	and.w	r3, r3, #16
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d06a      	beq.n	800b9a2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b8cc:	4b90      	ldr	r3, [pc, #576]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b8d4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b8d6:	4b8e      	ldr	r3, [pc, #568]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8da:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	2b08      	cmp	r3, #8
 800b8e0:	d007      	beq.n	800b8f2 <HAL_RCC_OscConfig+0x286>
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	2b18      	cmp	r3, #24
 800b8e6:	d11b      	bne.n	800b920 <HAL_RCC_OscConfig+0x2b4>
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f003 0303 	and.w	r3, r3, #3
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d116      	bne.n	800b920 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b8f2:	4b87      	ldr	r3, [pc, #540]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d005      	beq.n	800b90a <HAL_RCC_OscConfig+0x29e>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	69db      	ldr	r3, [r3, #28]
 800b902:	2b80      	cmp	r3, #128	@ 0x80
 800b904:	d001      	beq.n	800b90a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e282      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b90a:	4b81      	ldr	r3, [pc, #516]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	061b      	lsls	r3, r3, #24
 800b918:	497d      	ldr	r1, [pc, #500]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b91a:	4313      	orrs	r3, r2
 800b91c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b91e:	e040      	b.n	800b9a2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	69db      	ldr	r3, [r3, #28]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d023      	beq.n	800b970 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b928:	4b79      	ldr	r3, [pc, #484]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a78      	ldr	r2, [pc, #480]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b92e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b934:	f7fb fc04 	bl	8007140 <HAL_GetTick>
 800b938:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b93a:	e008      	b.n	800b94e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b93c:	f7fb fc00 	bl	8007140 <HAL_GetTick>
 800b940:	4602      	mov	r2, r0
 800b942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	2b02      	cmp	r3, #2
 800b948:	d901      	bls.n	800b94e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e260      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b94e:	4b70      	ldr	r3, [pc, #448]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b956:	2b00      	cmp	r3, #0
 800b958:	d0f0      	beq.n	800b93c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b95a:	4b6d      	ldr	r3, [pc, #436]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	061b      	lsls	r3, r3, #24
 800b968:	4969      	ldr	r1, [pc, #420]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b96a:	4313      	orrs	r3, r2
 800b96c:	60cb      	str	r3, [r1, #12]
 800b96e:	e018      	b.n	800b9a2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b970:	4b67      	ldr	r3, [pc, #412]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a66      	ldr	r2, [pc, #408]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b97a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b97c:	f7fb fbe0 	bl	8007140 <HAL_GetTick>
 800b980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b982:	e008      	b.n	800b996 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b984:	f7fb fbdc 	bl	8007140 <HAL_GetTick>
 800b988:	4602      	mov	r2, r0
 800b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d901      	bls.n	800b996 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b992:	2303      	movs	r3, #3
 800b994:	e23c      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b996:	4b5e      	ldr	r3, [pc, #376]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1f0      	bne.n	800b984 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 0308 	and.w	r3, r3, #8
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d036      	beq.n	800ba1c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d019      	beq.n	800b9ea <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9b6:	4b56      	ldr	r3, [pc, #344]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b9b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ba:	4a55      	ldr	r2, [pc, #340]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b9bc:	f043 0301 	orr.w	r3, r3, #1
 800b9c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9c2:	f7fb fbbd 	bl	8007140 <HAL_GetTick>
 800b9c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b9c8:	e008      	b.n	800b9dc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9ca:	f7fb fbb9 	bl	8007140 <HAL_GetTick>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d901      	bls.n	800b9dc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	e219      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b9dc:	4b4c      	ldr	r3, [pc, #304]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b9de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9e0:	f003 0302 	and.w	r3, r3, #2
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d0f0      	beq.n	800b9ca <HAL_RCC_OscConfig+0x35e>
 800b9e8:	e018      	b.n	800ba1c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9ea:	4b49      	ldr	r3, [pc, #292]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b9ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ee:	4a48      	ldr	r2, [pc, #288]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800b9f0:	f023 0301 	bic.w	r3, r3, #1
 800b9f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9f6:	f7fb fba3 	bl	8007140 <HAL_GetTick>
 800b9fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b9fc:	e008      	b.n	800ba10 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9fe:	f7fb fb9f 	bl	8007140 <HAL_GetTick>
 800ba02:	4602      	mov	r2, r0
 800ba04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d901      	bls.n	800ba10 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e1ff      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ba10:	4b3f      	ldr	r3, [pc, #252]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800ba12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba14:	f003 0302 	and.w	r3, r3, #2
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1f0      	bne.n	800b9fe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f003 0320 	and.w	r3, r3, #32
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d036      	beq.n	800ba96 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d019      	beq.n	800ba64 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ba30:	4b37      	ldr	r3, [pc, #220]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a36      	ldr	r2, [pc, #216]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800ba36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ba3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ba3c:	f7fb fb80 	bl	8007140 <HAL_GetTick>
 800ba40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ba42:	e008      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba44:	f7fb fb7c 	bl	8007140 <HAL_GetTick>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d901      	bls.n	800ba56 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e1dc      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ba56:	4b2e      	ldr	r3, [pc, #184]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0f0      	beq.n	800ba44 <HAL_RCC_OscConfig+0x3d8>
 800ba62:	e018      	b.n	800ba96 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ba64:	4b2a      	ldr	r3, [pc, #168]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a29      	ldr	r2, [pc, #164]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800ba6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ba70:	f7fb fb66 	bl	8007140 <HAL_GetTick>
 800ba74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba76:	e008      	b.n	800ba8a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba78:	f7fb fb62 	bl	8007140 <HAL_GetTick>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d901      	bls.n	800ba8a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e1c2      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba8a:	4b21      	ldr	r3, [pc, #132]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1f0      	bne.n	800ba78 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 0304 	and.w	r3, r3, #4
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 8086 	beq.w	800bbb0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800baa4:	4b1b      	ldr	r3, [pc, #108]	@ (800bb14 <HAL_RCC_OscConfig+0x4a8>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a1a      	ldr	r2, [pc, #104]	@ (800bb14 <HAL_RCC_OscConfig+0x4a8>)
 800baaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800baae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bab0:	f7fb fb46 	bl	8007140 <HAL_GetTick>
 800bab4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bab6:	e008      	b.n	800baca <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bab8:	f7fb fb42 	bl	8007140 <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	2b64      	cmp	r3, #100	@ 0x64
 800bac4:	d901      	bls.n	800baca <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	e1a2      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800baca:	4b12      	ldr	r3, [pc, #72]	@ (800bb14 <HAL_RCC_OscConfig+0x4a8>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d0f0      	beq.n	800bab8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d106      	bne.n	800baec <HAL_RCC_OscConfig+0x480>
 800bade:	4b0c      	ldr	r3, [pc, #48]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800bae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bae2:	4a0b      	ldr	r2, [pc, #44]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800bae4:	f043 0301 	orr.w	r3, r3, #1
 800bae8:	6713      	str	r3, [r2, #112]	@ 0x70
 800baea:	e032      	b.n	800bb52 <HAL_RCC_OscConfig+0x4e6>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d111      	bne.n	800bb18 <HAL_RCC_OscConfig+0x4ac>
 800baf4:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800baf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baf8:	4a05      	ldr	r2, [pc, #20]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800bafa:	f023 0301 	bic.w	r3, r3, #1
 800bafe:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb00:	4b03      	ldr	r3, [pc, #12]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800bb02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb04:	4a02      	ldr	r2, [pc, #8]	@ (800bb10 <HAL_RCC_OscConfig+0x4a4>)
 800bb06:	f023 0304 	bic.w	r3, r3, #4
 800bb0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb0c:	e021      	b.n	800bb52 <HAL_RCC_OscConfig+0x4e6>
 800bb0e:	bf00      	nop
 800bb10:	58024400 	.word	0x58024400
 800bb14:	58024800 	.word	0x58024800
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	2b05      	cmp	r3, #5
 800bb1e:	d10c      	bne.n	800bb3a <HAL_RCC_OscConfig+0x4ce>
 800bb20:	4b83      	ldr	r3, [pc, #524]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bb22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb24:	4a82      	ldr	r2, [pc, #520]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bb26:	f043 0304 	orr.w	r3, r3, #4
 800bb2a:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb2c:	4b80      	ldr	r3, [pc, #512]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bb2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb30:	4a7f      	ldr	r2, [pc, #508]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bb32:	f043 0301 	orr.w	r3, r3, #1
 800bb36:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb38:	e00b      	b.n	800bb52 <HAL_RCC_OscConfig+0x4e6>
 800bb3a:	4b7d      	ldr	r3, [pc, #500]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bb3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb3e:	4a7c      	ldr	r2, [pc, #496]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bb40:	f023 0301 	bic.w	r3, r3, #1
 800bb44:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb46:	4b7a      	ldr	r3, [pc, #488]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bb48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb4a:	4a79      	ldr	r2, [pc, #484]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bb4c:	f023 0304 	bic.w	r3, r3, #4
 800bb50:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d015      	beq.n	800bb86 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb5a:	f7fb faf1 	bl	8007140 <HAL_GetTick>
 800bb5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb60:	e00a      	b.n	800bb78 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb62:	f7fb faed 	bl	8007140 <HAL_GetTick>
 800bb66:	4602      	mov	r2, r0
 800bb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d901      	bls.n	800bb78 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800bb74:	2303      	movs	r3, #3
 800bb76:	e14b      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb78:	4b6d      	ldr	r3, [pc, #436]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bb7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb7c:	f003 0302 	and.w	r3, r3, #2
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d0ee      	beq.n	800bb62 <HAL_RCC_OscConfig+0x4f6>
 800bb84:	e014      	b.n	800bbb0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb86:	f7fb fadb 	bl	8007140 <HAL_GetTick>
 800bb8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb8c:	e00a      	b.n	800bba4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb8e:	f7fb fad7 	bl	8007140 <HAL_GetTick>
 800bb92:	4602      	mov	r2, r0
 800bb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d901      	bls.n	800bba4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	e135      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bba4:	4b62      	ldr	r3, [pc, #392]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bba8:	f003 0302 	and.w	r3, r3, #2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1ee      	bne.n	800bb8e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 812a 	beq.w	800be0e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bbba:	4b5d      	ldr	r3, [pc, #372]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bbc2:	2b18      	cmp	r3, #24
 800bbc4:	f000 80ba 	beq.w	800bd3c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	f040 8095 	bne.w	800bcfc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbd2:	4b57      	ldr	r3, [pc, #348]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a56      	ldr	r2, [pc, #344]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bbd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bbdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbde:	f7fb faaf 	bl	8007140 <HAL_GetTick>
 800bbe2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbe4:	e008      	b.n	800bbf8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbe6:	f7fb faab 	bl	8007140 <HAL_GetTick>
 800bbea:	4602      	mov	r2, r0
 800bbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbee:	1ad3      	subs	r3, r2, r3
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d901      	bls.n	800bbf8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	e10b      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbf8:	4b4d      	ldr	r3, [pc, #308]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1f0      	bne.n	800bbe6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc04:	4b4a      	ldr	r3, [pc, #296]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc08:	4b4a      	ldr	r3, [pc, #296]	@ (800bd34 <HAL_RCC_OscConfig+0x6c8>)
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bc14:	0112      	lsls	r2, r2, #4
 800bc16:	430a      	orrs	r2, r1
 800bc18:	4945      	ldr	r1, [pc, #276]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	628b      	str	r3, [r1, #40]	@ 0x28
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc22:	3b01      	subs	r3, #1
 800bc24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	025b      	lsls	r3, r3, #9
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	431a      	orrs	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	041b      	lsls	r3, r3, #16
 800bc3c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bc40:	431a      	orrs	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc46:	3b01      	subs	r3, #1
 800bc48:	061b      	lsls	r3, r3, #24
 800bc4a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bc4e:	4938      	ldr	r1, [pc, #224]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bc54:	4b36      	ldr	r3, [pc, #216]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc58:	4a35      	ldr	r2, [pc, #212]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc5a:	f023 0301 	bic.w	r3, r3, #1
 800bc5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bc60:	4b33      	ldr	r3, [pc, #204]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc64:	4b34      	ldr	r3, [pc, #208]	@ (800bd38 <HAL_RCC_OscConfig+0x6cc>)
 800bc66:	4013      	ands	r3, r2
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bc6c:	00d2      	lsls	r2, r2, #3
 800bc6e:	4930      	ldr	r1, [pc, #192]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc70:	4313      	orrs	r3, r2
 800bc72:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bc74:	4b2e      	ldr	r3, [pc, #184]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc78:	f023 020c 	bic.w	r2, r3, #12
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc80:	492b      	ldr	r1, [pc, #172]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc82:	4313      	orrs	r3, r2
 800bc84:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bc86:	4b2a      	ldr	r3, [pc, #168]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc8a:	f023 0202 	bic.w	r2, r3, #2
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc92:	4927      	ldr	r1, [pc, #156]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc94:	4313      	orrs	r3, r2
 800bc96:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc98:	4b25      	ldr	r3, [pc, #148]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9c:	4a24      	ldr	r2, [pc, #144]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bc9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bca4:	4b22      	ldr	r3, [pc, #136]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca8:	4a21      	ldr	r2, [pc, #132]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bcaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bcb0:	4b1f      	ldr	r3, [pc, #124]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bcb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb4:	4a1e      	ldr	r2, [pc, #120]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bcb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bcba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bcbc:	4b1c      	ldr	r3, [pc, #112]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bcbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc0:	4a1b      	ldr	r2, [pc, #108]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bcc2:	f043 0301 	orr.w	r3, r3, #1
 800bcc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bcc8:	4b19      	ldr	r3, [pc, #100]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a18      	ldr	r2, [pc, #96]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bcce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bcd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcd4:	f7fb fa34 	bl	8007140 <HAL_GetTick>
 800bcd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bcda:	e008      	b.n	800bcee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcdc:	f7fb fa30 	bl	8007140 <HAL_GetTick>
 800bce0:	4602      	mov	r2, r0
 800bce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d901      	bls.n	800bcee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e090      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bcee:	4b10      	ldr	r3, [pc, #64]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d0f0      	beq.n	800bcdc <HAL_RCC_OscConfig+0x670>
 800bcfa:	e088      	b.n	800be0e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcfc:	4b0c      	ldr	r3, [pc, #48]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a0b      	ldr	r2, [pc, #44]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bd02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd08:	f7fb fa1a 	bl	8007140 <HAL_GetTick>
 800bd0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd0e:	e008      	b.n	800bd22 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd10:	f7fb fa16 	bl	8007140 <HAL_GetTick>
 800bd14:	4602      	mov	r2, r0
 800bd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d901      	bls.n	800bd22 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	e076      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd22:	4b03      	ldr	r3, [pc, #12]	@ (800bd30 <HAL_RCC_OscConfig+0x6c4>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1f0      	bne.n	800bd10 <HAL_RCC_OscConfig+0x6a4>
 800bd2e:	e06e      	b.n	800be0e <HAL_RCC_OscConfig+0x7a2>
 800bd30:	58024400 	.word	0x58024400
 800bd34:	fffffc0c 	.word	0xfffffc0c
 800bd38:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bd3c:	4b36      	ldr	r3, [pc, #216]	@ (800be18 <HAL_RCC_OscConfig+0x7ac>)
 800bd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bd42:	4b35      	ldr	r3, [pc, #212]	@ (800be18 <HAL_RCC_OscConfig+0x7ac>)
 800bd44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d031      	beq.n	800bdb4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	f003 0203 	and.w	r2, r3, #3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d12a      	bne.n	800bdb4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	091b      	lsrs	r3, r3, #4
 800bd62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d122      	bne.n	800bdb4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d11a      	bne.n	800bdb4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	0a5b      	lsrs	r3, r3, #9
 800bd82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d111      	bne.n	800bdb4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	0c1b      	lsrs	r3, r3, #16
 800bd94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d108      	bne.n	800bdb4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	0e1b      	lsrs	r3, r3, #24
 800bda6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d001      	beq.n	800bdb8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e02b      	b.n	800be10 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bdb8:	4b17      	ldr	r3, [pc, #92]	@ (800be18 <HAL_RCC_OscConfig+0x7ac>)
 800bdba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdbc:	08db      	lsrs	r3, r3, #3
 800bdbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdc2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d01f      	beq.n	800be0e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bdce:	4b12      	ldr	r3, [pc, #72]	@ (800be18 <HAL_RCC_OscConfig+0x7ac>)
 800bdd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd2:	4a11      	ldr	r2, [pc, #68]	@ (800be18 <HAL_RCC_OscConfig+0x7ac>)
 800bdd4:	f023 0301 	bic.w	r3, r3, #1
 800bdd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bdda:	f7fb f9b1 	bl	8007140 <HAL_GetTick>
 800bdde:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bde0:	bf00      	nop
 800bde2:	f7fb f9ad 	bl	8007140 <HAL_GetTick>
 800bde6:	4602      	mov	r2, r0
 800bde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d0f9      	beq.n	800bde2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bdee:	4b0a      	ldr	r3, [pc, #40]	@ (800be18 <HAL_RCC_OscConfig+0x7ac>)
 800bdf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bdf2:	4b0a      	ldr	r3, [pc, #40]	@ (800be1c <HAL_RCC_OscConfig+0x7b0>)
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bdfa:	00d2      	lsls	r2, r2, #3
 800bdfc:	4906      	ldr	r1, [pc, #24]	@ (800be18 <HAL_RCC_OscConfig+0x7ac>)
 800bdfe:	4313      	orrs	r3, r2
 800be00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800be02:	4b05      	ldr	r3, [pc, #20]	@ (800be18 <HAL_RCC_OscConfig+0x7ac>)
 800be04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be06:	4a04      	ldr	r2, [pc, #16]	@ (800be18 <HAL_RCC_OscConfig+0x7ac>)
 800be08:	f043 0301 	orr.w	r3, r3, #1
 800be0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3730      	adds	r7, #48	@ 0x30
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	58024400 	.word	0x58024400
 800be1c:	ffff0007 	.word	0xffff0007

0800be20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e19c      	b.n	800c16e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be34:	4b8a      	ldr	r3, [pc, #552]	@ (800c060 <HAL_RCC_ClockConfig+0x240>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f003 030f 	and.w	r3, r3, #15
 800be3c:	683a      	ldr	r2, [r7, #0]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d910      	bls.n	800be64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be42:	4b87      	ldr	r3, [pc, #540]	@ (800c060 <HAL_RCC_ClockConfig+0x240>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f023 020f 	bic.w	r2, r3, #15
 800be4a:	4985      	ldr	r1, [pc, #532]	@ (800c060 <HAL_RCC_ClockConfig+0x240>)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	4313      	orrs	r3, r2
 800be50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be52:	4b83      	ldr	r3, [pc, #524]	@ (800c060 <HAL_RCC_ClockConfig+0x240>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f003 030f 	and.w	r3, r3, #15
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d001      	beq.n	800be64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	e184      	b.n	800c16e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 0304 	and.w	r3, r3, #4
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d010      	beq.n	800be92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	691a      	ldr	r2, [r3, #16]
 800be74:	4b7b      	ldr	r3, [pc, #492]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d908      	bls.n	800be92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be80:	4b78      	ldr	r3, [pc, #480]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	4975      	ldr	r1, [pc, #468]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800be8e:	4313      	orrs	r3, r2
 800be90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f003 0308 	and.w	r3, r3, #8
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d010      	beq.n	800bec0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	695a      	ldr	r2, [r3, #20]
 800bea2:	4b70      	ldr	r3, [pc, #448]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bea4:	69db      	ldr	r3, [r3, #28]
 800bea6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800beaa:	429a      	cmp	r2, r3
 800beac:	d908      	bls.n	800bec0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800beae:	4b6d      	ldr	r3, [pc, #436]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800beb0:	69db      	ldr	r3, [r3, #28]
 800beb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	695b      	ldr	r3, [r3, #20]
 800beba:	496a      	ldr	r1, [pc, #424]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bebc:	4313      	orrs	r3, r2
 800bebe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f003 0310 	and.w	r3, r3, #16
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d010      	beq.n	800beee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	699a      	ldr	r2, [r3, #24]
 800bed0:	4b64      	ldr	r3, [pc, #400]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bed2:	69db      	ldr	r3, [r3, #28]
 800bed4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bed8:	429a      	cmp	r2, r3
 800beda:	d908      	bls.n	800beee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bedc:	4b61      	ldr	r3, [pc, #388]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bede:	69db      	ldr	r3, [r3, #28]
 800bee0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	699b      	ldr	r3, [r3, #24]
 800bee8:	495e      	ldr	r1, [pc, #376]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800beea:	4313      	orrs	r3, r2
 800beec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f003 0320 	and.w	r3, r3, #32
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d010      	beq.n	800bf1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	69da      	ldr	r2, [r3, #28]
 800befe:	4b59      	ldr	r3, [pc, #356]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d908      	bls.n	800bf1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bf0a:	4b56      	ldr	r3, [pc, #344]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bf0c:	6a1b      	ldr	r3, [r3, #32]
 800bf0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	4953      	ldr	r1, [pc, #332]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 0302 	and.w	r3, r3, #2
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d010      	beq.n	800bf4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	68da      	ldr	r2, [r3, #12]
 800bf2c:	4b4d      	ldr	r3, [pc, #308]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	f003 030f 	and.w	r3, r3, #15
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d908      	bls.n	800bf4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf38:	4b4a      	ldr	r3, [pc, #296]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	f023 020f 	bic.w	r2, r3, #15
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	4947      	ldr	r1, [pc, #284]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bf46:	4313      	orrs	r3, r2
 800bf48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d055      	beq.n	800c002 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bf56:	4b43      	ldr	r3, [pc, #268]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	4940      	ldr	r1, [pc, #256]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bf64:	4313      	orrs	r3, r2
 800bf66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d107      	bne.n	800bf80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bf70:	4b3c      	ldr	r3, [pc, #240]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d121      	bne.n	800bfc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e0f6      	b.n	800c16e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2b03      	cmp	r3, #3
 800bf86:	d107      	bne.n	800bf98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf88:	4b36      	ldr	r3, [pc, #216]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d115      	bne.n	800bfc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	e0ea      	b.n	800c16e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d107      	bne.n	800bfb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bfa0:	4b30      	ldr	r3, [pc, #192]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d109      	bne.n	800bfc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	e0de      	b.n	800c16e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bfb0:	4b2c      	ldr	r3, [pc, #176]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 0304 	and.w	r3, r3, #4
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d101      	bne.n	800bfc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e0d6      	b.n	800c16e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bfc0:	4b28      	ldr	r3, [pc, #160]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	f023 0207 	bic.w	r2, r3, #7
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	4925      	ldr	r1, [pc, #148]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfd2:	f7fb f8b5 	bl	8007140 <HAL_GetTick>
 800bfd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfd8:	e00a      	b.n	800bff0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bfda:	f7fb f8b1 	bl	8007140 <HAL_GetTick>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d901      	bls.n	800bff0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bfec:	2303      	movs	r3, #3
 800bfee:	e0be      	b.n	800c16e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bff0:	4b1c      	ldr	r3, [pc, #112]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	429a      	cmp	r2, r3
 800c000:	d1eb      	bne.n	800bfda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 0302 	and.w	r3, r3, #2
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d010      	beq.n	800c030 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	68da      	ldr	r2, [r3, #12]
 800c012:	4b14      	ldr	r3, [pc, #80]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	f003 030f 	and.w	r3, r3, #15
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d208      	bcs.n	800c030 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c01e:	4b11      	ldr	r3, [pc, #68]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	f023 020f 	bic.w	r2, r3, #15
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	490e      	ldr	r1, [pc, #56]	@ (800c064 <HAL_RCC_ClockConfig+0x244>)
 800c02c:	4313      	orrs	r3, r2
 800c02e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c030:	4b0b      	ldr	r3, [pc, #44]	@ (800c060 <HAL_RCC_ClockConfig+0x240>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 030f 	and.w	r3, r3, #15
 800c038:	683a      	ldr	r2, [r7, #0]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d214      	bcs.n	800c068 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c03e:	4b08      	ldr	r3, [pc, #32]	@ (800c060 <HAL_RCC_ClockConfig+0x240>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f023 020f 	bic.w	r2, r3, #15
 800c046:	4906      	ldr	r1, [pc, #24]	@ (800c060 <HAL_RCC_ClockConfig+0x240>)
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c04e:	4b04      	ldr	r3, [pc, #16]	@ (800c060 <HAL_RCC_ClockConfig+0x240>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 030f 	and.w	r3, r3, #15
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d005      	beq.n	800c068 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c05c:	2301      	movs	r3, #1
 800c05e:	e086      	b.n	800c16e <HAL_RCC_ClockConfig+0x34e>
 800c060:	52002000 	.word	0x52002000
 800c064:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d010      	beq.n	800c096 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	691a      	ldr	r2, [r3, #16]
 800c078:	4b3f      	ldr	r3, [pc, #252]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c080:	429a      	cmp	r2, r3
 800c082:	d208      	bcs.n	800c096 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c084:	4b3c      	ldr	r3, [pc, #240]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	4939      	ldr	r1, [pc, #228]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c092:	4313      	orrs	r3, r2
 800c094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 0308 	and.w	r3, r3, #8
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d010      	beq.n	800c0c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	695a      	ldr	r2, [r3, #20]
 800c0a6:	4b34      	ldr	r3, [pc, #208]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c0a8:	69db      	ldr	r3, [r3, #28]
 800c0aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d208      	bcs.n	800c0c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c0b2:	4b31      	ldr	r3, [pc, #196]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	695b      	ldr	r3, [r3, #20]
 800c0be:	492e      	ldr	r1, [pc, #184]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 0310 	and.w	r3, r3, #16
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d010      	beq.n	800c0f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	699a      	ldr	r2, [r3, #24]
 800c0d4:	4b28      	ldr	r3, [pc, #160]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c0d6:	69db      	ldr	r3, [r3, #28]
 800c0d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d208      	bcs.n	800c0f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c0e0:	4b25      	ldr	r3, [pc, #148]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c0e2:	69db      	ldr	r3, [r3, #28]
 800c0e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	4922      	ldr	r1, [pc, #136]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0320 	and.w	r3, r3, #32
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d010      	beq.n	800c120 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	69da      	ldr	r2, [r3, #28]
 800c102:	4b1d      	ldr	r3, [pc, #116]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d208      	bcs.n	800c120 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c10e:	4b1a      	ldr	r3, [pc, #104]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	69db      	ldr	r3, [r3, #28]
 800c11a:	4917      	ldr	r1, [pc, #92]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c11c:	4313      	orrs	r3, r2
 800c11e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c120:	f000 f844 	bl	800c1ac <HAL_RCC_GetSysClockFreq>
 800c124:	4602      	mov	r2, r0
 800c126:	4b14      	ldr	r3, [pc, #80]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	0a1b      	lsrs	r3, r3, #8
 800c12c:	f003 030f 	and.w	r3, r3, #15
 800c130:	4912      	ldr	r1, [pc, #72]	@ (800c17c <HAL_RCC_ClockConfig+0x35c>)
 800c132:	5ccb      	ldrb	r3, [r1, r3]
 800c134:	f003 031f 	and.w	r3, r3, #31
 800c138:	fa22 f303 	lsr.w	r3, r2, r3
 800c13c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c13e:	4b0e      	ldr	r3, [pc, #56]	@ (800c178 <HAL_RCC_ClockConfig+0x358>)
 800c140:	699b      	ldr	r3, [r3, #24]
 800c142:	f003 030f 	and.w	r3, r3, #15
 800c146:	4a0d      	ldr	r2, [pc, #52]	@ (800c17c <HAL_RCC_ClockConfig+0x35c>)
 800c148:	5cd3      	ldrb	r3, [r2, r3]
 800c14a:	f003 031f 	and.w	r3, r3, #31
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	fa22 f303 	lsr.w	r3, r2, r3
 800c154:	4a0a      	ldr	r2, [pc, #40]	@ (800c180 <HAL_RCC_ClockConfig+0x360>)
 800c156:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c158:	4a0a      	ldr	r2, [pc, #40]	@ (800c184 <HAL_RCC_ClockConfig+0x364>)
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c15e:	4b0a      	ldr	r3, [pc, #40]	@ (800c188 <HAL_RCC_ClockConfig+0x368>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4618      	mov	r0, r3
 800c164:	f7fa ffa2 	bl	80070ac <HAL_InitTick>
 800c168:	4603      	mov	r3, r0
 800c16a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3718      	adds	r7, #24
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	58024400 	.word	0x58024400
 800c17c:	0801b2ac 	.word	0x0801b2ac
 800c180:	24000150 	.word	0x24000150
 800c184:	2400014c 	.word	0x2400014c
 800c188:	24000184 	.word	0x24000184

0800c18c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800c18c:	b480      	push	{r7}
 800c18e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800c190:	4b05      	ldr	r3, [pc, #20]	@ (800c1a8 <HAL_RCC_EnableCSS+0x1c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a04      	ldr	r2, [pc, #16]	@ (800c1a8 <HAL_RCC_EnableCSS+0x1c>)
 800c196:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c19a:	6013      	str	r3, [r2, #0]
}
 800c19c:	bf00      	nop
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	58024400 	.word	0x58024400

0800c1ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b089      	sub	sp, #36	@ 0x24
 800c1b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c1b2:	4bb3      	ldr	r3, [pc, #716]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1b4:	691b      	ldr	r3, [r3, #16]
 800c1b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1ba:	2b18      	cmp	r3, #24
 800c1bc:	f200 8155 	bhi.w	800c46a <HAL_RCC_GetSysClockFreq+0x2be>
 800c1c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c1c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c6:	bf00      	nop
 800c1c8:	0800c22d 	.word	0x0800c22d
 800c1cc:	0800c46b 	.word	0x0800c46b
 800c1d0:	0800c46b 	.word	0x0800c46b
 800c1d4:	0800c46b 	.word	0x0800c46b
 800c1d8:	0800c46b 	.word	0x0800c46b
 800c1dc:	0800c46b 	.word	0x0800c46b
 800c1e0:	0800c46b 	.word	0x0800c46b
 800c1e4:	0800c46b 	.word	0x0800c46b
 800c1e8:	0800c253 	.word	0x0800c253
 800c1ec:	0800c46b 	.word	0x0800c46b
 800c1f0:	0800c46b 	.word	0x0800c46b
 800c1f4:	0800c46b 	.word	0x0800c46b
 800c1f8:	0800c46b 	.word	0x0800c46b
 800c1fc:	0800c46b 	.word	0x0800c46b
 800c200:	0800c46b 	.word	0x0800c46b
 800c204:	0800c46b 	.word	0x0800c46b
 800c208:	0800c259 	.word	0x0800c259
 800c20c:	0800c46b 	.word	0x0800c46b
 800c210:	0800c46b 	.word	0x0800c46b
 800c214:	0800c46b 	.word	0x0800c46b
 800c218:	0800c46b 	.word	0x0800c46b
 800c21c:	0800c46b 	.word	0x0800c46b
 800c220:	0800c46b 	.word	0x0800c46b
 800c224:	0800c46b 	.word	0x0800c46b
 800c228:	0800c25f 	.word	0x0800c25f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c22c:	4b94      	ldr	r3, [pc, #592]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 0320 	and.w	r3, r3, #32
 800c234:	2b00      	cmp	r3, #0
 800c236:	d009      	beq.n	800c24c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c238:	4b91      	ldr	r3, [pc, #580]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	08db      	lsrs	r3, r3, #3
 800c23e:	f003 0303 	and.w	r3, r3, #3
 800c242:	4a90      	ldr	r2, [pc, #576]	@ (800c484 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c244:	fa22 f303 	lsr.w	r3, r2, r3
 800c248:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c24a:	e111      	b.n	800c470 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c24c:	4b8d      	ldr	r3, [pc, #564]	@ (800c484 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c24e:	61bb      	str	r3, [r7, #24]
      break;
 800c250:	e10e      	b.n	800c470 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c252:	4b8d      	ldr	r3, [pc, #564]	@ (800c488 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c254:	61bb      	str	r3, [r7, #24]
      break;
 800c256:	e10b      	b.n	800c470 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c258:	4b8c      	ldr	r3, [pc, #560]	@ (800c48c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c25a:	61bb      	str	r3, [r7, #24]
      break;
 800c25c:	e108      	b.n	800c470 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c25e:	4b88      	ldr	r3, [pc, #544]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c262:	f003 0303 	and.w	r3, r3, #3
 800c266:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c268:	4b85      	ldr	r3, [pc, #532]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c26c:	091b      	lsrs	r3, r3, #4
 800c26e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c272:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c274:	4b82      	ldr	r3, [pc, #520]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c278:	f003 0301 	and.w	r3, r3, #1
 800c27c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c27e:	4b80      	ldr	r3, [pc, #512]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c282:	08db      	lsrs	r3, r3, #3
 800c284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	fb02 f303 	mul.w	r3, r2, r3
 800c28e:	ee07 3a90 	vmov	s15, r3
 800c292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c296:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f000 80e1 	beq.w	800c464 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	f000 8083 	beq.w	800c3b0 <HAL_RCC_GetSysClockFreq+0x204>
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	2b02      	cmp	r3, #2
 800c2ae:	f200 80a1 	bhi.w	800c3f4 <HAL_RCC_GetSysClockFreq+0x248>
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <HAL_RCC_GetSysClockFreq+0x114>
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d056      	beq.n	800c36c <HAL_RCC_GetSysClockFreq+0x1c0>
 800c2be:	e099      	b.n	800c3f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2c0:	4b6f      	ldr	r3, [pc, #444]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f003 0320 	and.w	r3, r3, #32
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d02d      	beq.n	800c328 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2cc:	4b6c      	ldr	r3, [pc, #432]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	08db      	lsrs	r3, r3, #3
 800c2d2:	f003 0303 	and.w	r3, r3, #3
 800c2d6:	4a6b      	ldr	r2, [pc, #428]	@ (800c484 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c2d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c2dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	ee07 3a90 	vmov	s15, r3
 800c2e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	ee07 3a90 	vmov	s15, r3
 800c2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2f6:	4b62      	ldr	r3, [pc, #392]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2fe:	ee07 3a90 	vmov	s15, r3
 800c302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c306:	ed97 6a02 	vldr	s12, [r7, #8]
 800c30a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c490 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c30e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c31a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c31e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c322:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c326:	e087      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	ee07 3a90 	vmov	s15, r3
 800c32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c332:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c494 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c33a:	4b51      	ldr	r3, [pc, #324]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c33e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c342:	ee07 3a90 	vmov	s15, r3
 800c346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c34a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c34e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c490 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c35a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c35e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c362:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c36a:	e065      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	ee07 3a90 	vmov	s15, r3
 800c372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c376:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c498 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c37a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c37e:	4b40      	ldr	r3, [pc, #256]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c386:	ee07 3a90 	vmov	s15, r3
 800c38a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c38e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c392:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c490 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c39a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c39e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c3ae:	e043      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	ee07 3a90 	vmov	s15, r3
 800c3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c49c <HAL_RCC_GetSysClockFreq+0x2f0>
 800c3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3c2:	4b2f      	ldr	r3, [pc, #188]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ca:	ee07 3a90 	vmov	s15, r3
 800c3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c490 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c3f2:	e021      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	ee07 3a90 	vmov	s15, r3
 800c3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c498 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c406:	4b1e      	ldr	r3, [pc, #120]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c40e:	ee07 3a90 	vmov	s15, r3
 800c412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c416:	ed97 6a02 	vldr	s12, [r7, #8]
 800c41a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c490 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c436:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c438:	4b11      	ldr	r3, [pc, #68]	@ (800c480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c43c:	0a5b      	lsrs	r3, r3, #9
 800c43e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c442:	3301      	adds	r3, #1
 800c444:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	ee07 3a90 	vmov	s15, r3
 800c44c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c450:	edd7 6a07 	vldr	s13, [r7, #28]
 800c454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c45c:	ee17 3a90 	vmov	r3, s15
 800c460:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c462:	e005      	b.n	800c470 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c464:	2300      	movs	r3, #0
 800c466:	61bb      	str	r3, [r7, #24]
      break;
 800c468:	e002      	b.n	800c470 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c46a:	4b07      	ldr	r3, [pc, #28]	@ (800c488 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c46c:	61bb      	str	r3, [r7, #24]
      break;
 800c46e:	bf00      	nop
  }

  return sysclockfreq;
 800c470:	69bb      	ldr	r3, [r7, #24]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3724      	adds	r7, #36	@ 0x24
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	58024400 	.word	0x58024400
 800c484:	03d09000 	.word	0x03d09000
 800c488:	003d0900 	.word	0x003d0900
 800c48c:	02dc6c00 	.word	0x02dc6c00
 800c490:	46000000 	.word	0x46000000
 800c494:	4c742400 	.word	0x4c742400
 800c498:	4a742400 	.word	0x4a742400
 800c49c:	4c371b00 	.word	0x4c371b00

0800c4a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c4a6:	f7ff fe81 	bl	800c1ac <HAL_RCC_GetSysClockFreq>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	4b10      	ldr	r3, [pc, #64]	@ (800c4f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	0a1b      	lsrs	r3, r3, #8
 800c4b2:	f003 030f 	and.w	r3, r3, #15
 800c4b6:	490f      	ldr	r1, [pc, #60]	@ (800c4f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800c4b8:	5ccb      	ldrb	r3, [r1, r3]
 800c4ba:	f003 031f 	and.w	r3, r3, #31
 800c4be:	fa22 f303 	lsr.w	r3, r2, r3
 800c4c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c4c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	f003 030f 	and.w	r3, r3, #15
 800c4cc:	4a09      	ldr	r2, [pc, #36]	@ (800c4f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800c4ce:	5cd3      	ldrb	r3, [r2, r3]
 800c4d0:	f003 031f 	and.w	r3, r3, #31
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c4da:	4a07      	ldr	r2, [pc, #28]	@ (800c4f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800c4dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c4de:	4a07      	ldr	r2, [pc, #28]	@ (800c4fc <HAL_RCC_GetHCLKFreq+0x5c>)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c4e4:	4b04      	ldr	r3, [pc, #16]	@ (800c4f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	58024400 	.word	0x58024400
 800c4f4:	0801b2ac 	.word	0x0801b2ac
 800c4f8:	24000150 	.word	0x24000150
 800c4fc:	2400014c 	.word	0x2400014c

0800c500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c504:	f7ff ffcc 	bl	800c4a0 <HAL_RCC_GetHCLKFreq>
 800c508:	4602      	mov	r2, r0
 800c50a:	4b06      	ldr	r3, [pc, #24]	@ (800c524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c50c:	69db      	ldr	r3, [r3, #28]
 800c50e:	091b      	lsrs	r3, r3, #4
 800c510:	f003 0307 	and.w	r3, r3, #7
 800c514:	4904      	ldr	r1, [pc, #16]	@ (800c528 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c516:	5ccb      	ldrb	r3, [r1, r3]
 800c518:	f003 031f 	and.w	r3, r3, #31
 800c51c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c520:	4618      	mov	r0, r3
 800c522:	bd80      	pop	{r7, pc}
 800c524:	58024400 	.word	0x58024400
 800c528:	0801b2ac 	.word	0x0801b2ac

0800c52c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c530:	f7ff ffb6 	bl	800c4a0 <HAL_RCC_GetHCLKFreq>
 800c534:	4602      	mov	r2, r0
 800c536:	4b06      	ldr	r3, [pc, #24]	@ (800c550 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	0a1b      	lsrs	r3, r3, #8
 800c53c:	f003 0307 	and.w	r3, r3, #7
 800c540:	4904      	ldr	r1, [pc, #16]	@ (800c554 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c542:	5ccb      	ldrb	r3, [r1, r3]
 800c544:	f003 031f 	and.w	r3, r3, #31
 800c548:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	58024400 	.word	0x58024400
 800c554:	0801b2ac 	.word	0x0801b2ac

0800c558 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800c55c:	4b07      	ldr	r3, [pc, #28]	@ (800c57c <HAL_RCC_NMI_IRQHandler+0x24>)
 800c55e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c568:	d105      	bne.n	800c576 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800c56a:	f000 f809 	bl	800c580 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800c56e:	4b03      	ldr	r3, [pc, #12]	@ (800c57c <HAL_RCC_NMI_IRQHandler+0x24>)
 800c570:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c574:	669a      	str	r2, [r3, #104]	@ 0x68
  }
}
 800c576:	bf00      	nop
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	58024400 	.word	0x58024400

0800c580 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800c580:	b480      	push	{r7}
 800c582:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800c584:	bf00      	nop
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr
	...

0800c590 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c594:	b0c6      	sub	sp, #280	@ 0x118
 800c596:	af00      	add	r7, sp, #0
 800c598:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c59c:	2300      	movs	r3, #0
 800c59e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c5b4:	2500      	movs	r5, #0
 800c5b6:	ea54 0305 	orrs.w	r3, r4, r5
 800c5ba:	d049      	beq.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c5c6:	d02f      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c5c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c5cc:	d828      	bhi.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c5ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5d2:	d01a      	beq.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c5d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5d8:	d822      	bhi.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d003      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c5de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5e2:	d007      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c5e4:	e01c      	b.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5e6:	4bab      	ldr	r3, [pc, #684]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ea:	4aaa      	ldr	r2, [pc, #680]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c5ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c5f2:	e01a      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5f8:	3308      	adds	r3, #8
 800c5fa:	2102      	movs	r1, #2
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f002 fa49 	bl	800ea94 <RCCEx_PLL2_Config>
 800c602:	4603      	mov	r3, r0
 800c604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c608:	e00f      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c60e:	3328      	adds	r3, #40	@ 0x28
 800c610:	2102      	movs	r1, #2
 800c612:	4618      	mov	r0, r3
 800c614:	f002 faf0 	bl	800ebf8 <RCCEx_PLL3_Config>
 800c618:	4603      	mov	r3, r0
 800c61a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c61e:	e004      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c626:	e000      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c62a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10a      	bne.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c632:	4b98      	ldr	r3, [pc, #608]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c636:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c63e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c640:	4a94      	ldr	r2, [pc, #592]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c642:	430b      	orrs	r3, r1
 800c644:	6513      	str	r3, [r2, #80]	@ 0x50
 800c646:	e003      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c64c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c65c:	f04f 0900 	mov.w	r9, #0
 800c660:	ea58 0309 	orrs.w	r3, r8, r9
 800c664:	d047      	beq.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c66a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c66c:	2b04      	cmp	r3, #4
 800c66e:	d82a      	bhi.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c670:	a201      	add	r2, pc, #4	@ (adr r2, 800c678 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c676:	bf00      	nop
 800c678:	0800c68d 	.word	0x0800c68d
 800c67c:	0800c69b 	.word	0x0800c69b
 800c680:	0800c6b1 	.word	0x0800c6b1
 800c684:	0800c6cf 	.word	0x0800c6cf
 800c688:	0800c6cf 	.word	0x0800c6cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c68c:	4b81      	ldr	r3, [pc, #516]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c690:	4a80      	ldr	r2, [pc, #512]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c698:	e01a      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c69e:	3308      	adds	r3, #8
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f002 f9f6 	bl	800ea94 <RCCEx_PLL2_Config>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6ae:	e00f      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b4:	3328      	adds	r3, #40	@ 0x28
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f002 fa9d 	bl	800ebf8 <RCCEx_PLL3_Config>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6c4:	e004      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c6cc:	e000      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c6ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10a      	bne.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c6d8:	4b6e      	ldr	r3, [pc, #440]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c6da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6dc:	f023 0107 	bic.w	r1, r3, #7
 800c6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6e6:	4a6b      	ldr	r2, [pc, #428]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c6e8:	430b      	orrs	r3, r1
 800c6ea:	6513      	str	r3, [r2, #80]	@ 0x50
 800c6ec:	e003      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c702:	f04f 0b00 	mov.w	fp, #0
 800c706:	ea5a 030b 	orrs.w	r3, sl, fp
 800c70a:	d05b      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c710:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c714:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c718:	d03b      	beq.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c71a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c71e:	d834      	bhi.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c720:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c724:	d037      	beq.n	800c796 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c726:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c72a:	d82e      	bhi.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c72c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c730:	d033      	beq.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c732:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c736:	d828      	bhi.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c738:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c73c:	d01a      	beq.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c73e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c742:	d822      	bhi.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c744:	2b00      	cmp	r3, #0
 800c746:	d003      	beq.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c748:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c74c:	d007      	beq.n	800c75e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c74e:	e01c      	b.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c750:	4b50      	ldr	r3, [pc, #320]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c754:	4a4f      	ldr	r2, [pc, #316]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c75a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c75c:	e01e      	b.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c762:	3308      	adds	r3, #8
 800c764:	2100      	movs	r1, #0
 800c766:	4618      	mov	r0, r3
 800c768:	f002 f994 	bl	800ea94 <RCCEx_PLL2_Config>
 800c76c:	4603      	mov	r3, r0
 800c76e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c772:	e013      	b.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c778:	3328      	adds	r3, #40	@ 0x28
 800c77a:	2100      	movs	r1, #0
 800c77c:	4618      	mov	r0, r3
 800c77e:	f002 fa3b 	bl	800ebf8 <RCCEx_PLL3_Config>
 800c782:	4603      	mov	r3, r0
 800c784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c788:	e008      	b.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c790:	e004      	b.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c792:	bf00      	nop
 800c794:	e002      	b.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c796:	bf00      	nop
 800c798:	e000      	b.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c79a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c79c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10b      	bne.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c7a4:	4b3b      	ldr	r3, [pc, #236]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c7a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7a8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c7b4:	4a37      	ldr	r2, [pc, #220]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c7b6:	430b      	orrs	r3, r1
 800c7b8:	6593      	str	r3, [r2, #88]	@ 0x58
 800c7ba:	e003      	b.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c7d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c7da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c7de:	460b      	mov	r3, r1
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	d05d      	beq.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c7ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c7f0:	d03b      	beq.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c7f2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c7f6:	d834      	bhi.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c7f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c7fc:	d037      	beq.n	800c86e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c7fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c802:	d82e      	bhi.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c804:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c808:	d033      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c80a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c80e:	d828      	bhi.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c810:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c814:	d01a      	beq.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c81a:	d822      	bhi.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c824:	d007      	beq.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c826:	e01c      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c828:	4b1a      	ldr	r3, [pc, #104]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c82c:	4a19      	ldr	r2, [pc, #100]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c82e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c834:	e01e      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c83a:	3308      	adds	r3, #8
 800c83c:	2100      	movs	r1, #0
 800c83e:	4618      	mov	r0, r3
 800c840:	f002 f928 	bl	800ea94 <RCCEx_PLL2_Config>
 800c844:	4603      	mov	r3, r0
 800c846:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c84a:	e013      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c850:	3328      	adds	r3, #40	@ 0x28
 800c852:	2100      	movs	r1, #0
 800c854:	4618      	mov	r0, r3
 800c856:	f002 f9cf 	bl	800ebf8 <RCCEx_PLL3_Config>
 800c85a:	4603      	mov	r3, r0
 800c85c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c860:	e008      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c868:	e004      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c86a:	bf00      	nop
 800c86c:	e002      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c86e:	bf00      	nop
 800c870:	e000      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c872:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c874:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10d      	bne.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c87c:	4b05      	ldr	r3, [pc, #20]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c87e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c880:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c888:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c88c:	4a01      	ldr	r2, [pc, #4]	@ (800c894 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c88e:	430b      	orrs	r3, r1
 800c890:	6593      	str	r3, [r2, #88]	@ 0x58
 800c892:	e005      	b.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c89c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c8ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c8b6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	d03a      	beq.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8c6:	2b30      	cmp	r3, #48	@ 0x30
 800c8c8:	d01f      	beq.n	800c90a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c8ca:	2b30      	cmp	r3, #48	@ 0x30
 800c8cc:	d819      	bhi.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c8ce:	2b20      	cmp	r3, #32
 800c8d0:	d00c      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c8d2:	2b20      	cmp	r3, #32
 800c8d4:	d815      	bhi.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d019      	beq.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c8da:	2b10      	cmp	r3, #16
 800c8dc:	d111      	bne.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8de:	4baa      	ldr	r3, [pc, #680]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8e2:	4aa9      	ldr	r2, [pc, #676]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c8e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c8ea:	e011      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8f0:	3308      	adds	r3, #8
 800c8f2:	2102      	movs	r1, #2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f002 f8cd 	bl	800ea94 <RCCEx_PLL2_Config>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c900:	e006      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c908:	e002      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c90a:	bf00      	nop
 800c90c:	e000      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c90e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c910:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c914:	2b00      	cmp	r3, #0
 800c916:	d10a      	bne.n	800c92e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c918:	4b9b      	ldr	r3, [pc, #620]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c91a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c91c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c926:	4a98      	ldr	r2, [pc, #608]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c928:	430b      	orrs	r3, r1
 800c92a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c92c:	e003      	b.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c92e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c932:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c942:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c946:	2300      	movs	r3, #0
 800c948:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c94c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c950:	460b      	mov	r3, r1
 800c952:	4313      	orrs	r3, r2
 800c954:	d051      	beq.n	800c9fa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c95a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c95c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c960:	d035      	beq.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c962:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c966:	d82e      	bhi.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c968:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c96c:	d031      	beq.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c96e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c972:	d828      	bhi.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c978:	d01a      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c97a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c97e:	d822      	bhi.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c980:	2b00      	cmp	r3, #0
 800c982:	d003      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c988:	d007      	beq.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c98a:	e01c      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c98c:	4b7e      	ldr	r3, [pc, #504]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c990:	4a7d      	ldr	r2, [pc, #500]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c998:	e01c      	b.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c99e:	3308      	adds	r3, #8
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f002 f876 	bl	800ea94 <RCCEx_PLL2_Config>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c9ae:	e011      	b.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9b4:	3328      	adds	r3, #40	@ 0x28
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f002 f91d 	bl	800ebf8 <RCCEx_PLL3_Config>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c9c4:	e006      	b.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9cc:	e002      	b.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c9ce:	bf00      	nop
 800c9d0:	e000      	b.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c9d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10a      	bne.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c9dc:	4b6a      	ldr	r3, [pc, #424]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c9de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9ea:	4a67      	ldr	r2, [pc, #412]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c9ec:	430b      	orrs	r3, r1
 800c9ee:	6513      	str	r3, [r2, #80]	@ 0x50
 800c9f0:	e003      	b.n	800c9fa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ca06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ca10:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ca14:	460b      	mov	r3, r1
 800ca16:	4313      	orrs	r3, r2
 800ca18:	d053      	beq.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ca1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca24:	d033      	beq.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ca26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca2a:	d82c      	bhi.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ca2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ca30:	d02f      	beq.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ca32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ca36:	d826      	bhi.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ca38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ca3c:	d02b      	beq.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ca3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ca42:	d820      	bhi.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ca44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca48:	d012      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ca4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca4e:	d81a      	bhi.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d022      	beq.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ca54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca58:	d115      	bne.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca5e:	3308      	adds	r3, #8
 800ca60:	2101      	movs	r1, #1
 800ca62:	4618      	mov	r0, r3
 800ca64:	f002 f816 	bl	800ea94 <RCCEx_PLL2_Config>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ca6e:	e015      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca74:	3328      	adds	r3, #40	@ 0x28
 800ca76:	2101      	movs	r1, #1
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f002 f8bd 	bl	800ebf8 <RCCEx_PLL3_Config>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ca84:	e00a      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca86:	2301      	movs	r3, #1
 800ca88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca8c:	e006      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ca8e:	bf00      	nop
 800ca90:	e004      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ca92:	bf00      	nop
 800ca94:	e002      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ca96:	bf00      	nop
 800ca98:	e000      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ca9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10a      	bne.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800caa4:	4b38      	ldr	r3, [pc, #224]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800caa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caa8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800caac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cab2:	4a35      	ldr	r2, [pc, #212]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cab4:	430b      	orrs	r3, r1
 800cab6:	6513      	str	r3, [r2, #80]	@ 0x50
 800cab8:	e003      	b.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cabe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800cace:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cad2:	2300      	movs	r3, #0
 800cad4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cad8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cadc:	460b      	mov	r3, r1
 800cade:	4313      	orrs	r3, r2
 800cae0:	d058      	beq.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800caea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800caee:	d033      	beq.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800caf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800caf4:	d82c      	bhi.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800caf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cafa:	d02f      	beq.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800cafc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb00:	d826      	bhi.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cb02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cb06:	d02b      	beq.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800cb08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cb0c:	d820      	bhi.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cb0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb12:	d012      	beq.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800cb14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb18:	d81a      	bhi.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d022      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cb1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb22:	d115      	bne.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb28:	3308      	adds	r3, #8
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f001 ffb1 	bl	800ea94 <RCCEx_PLL2_Config>
 800cb32:	4603      	mov	r3, r0
 800cb34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cb38:	e015      	b.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb3e:	3328      	adds	r3, #40	@ 0x28
 800cb40:	2101      	movs	r1, #1
 800cb42:	4618      	mov	r0, r3
 800cb44:	f002 f858 	bl	800ebf8 <RCCEx_PLL3_Config>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cb4e:	e00a      	b.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb56:	e006      	b.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb58:	bf00      	nop
 800cb5a:	e004      	b.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb5c:	bf00      	nop
 800cb5e:	e002      	b.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb60:	bf00      	nop
 800cb62:	e000      	b.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10e      	bne.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cb6e:	4b06      	ldr	r3, [pc, #24]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb72:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cb76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cb7e:	4a02      	ldr	r2, [pc, #8]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb80:	430b      	orrs	r3, r1
 800cb82:	6593      	str	r3, [r2, #88]	@ 0x58
 800cb84:	e006      	b.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800cb86:	bf00      	nop
 800cb88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800cba0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cba4:	2300      	movs	r3, #0
 800cba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cbaa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	d037      	beq.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbbe:	d00e      	beq.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800cbc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbc4:	d816      	bhi.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d018      	beq.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800cbca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbce:	d111      	bne.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbd0:	4bc4      	ldr	r3, [pc, #784]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cbd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd4:	4ac3      	ldr	r2, [pc, #780]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cbd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cbdc:	e00f      	b.n	800cbfe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe2:	3308      	adds	r3, #8
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f001 ff54 	bl	800ea94 <RCCEx_PLL2_Config>
 800cbec:	4603      	mov	r3, r0
 800cbee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cbf2:	e004      	b.n	800cbfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cbfa:	e000      	b.n	800cbfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800cbfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10a      	bne.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cc06:	4bb7      	ldr	r3, [pc, #732]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc0a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cc0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc14:	4ab3      	ldr	r2, [pc, #716]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc16:	430b      	orrs	r3, r1
 800cc18:	6513      	str	r3, [r2, #80]	@ 0x50
 800cc1a:	e003      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800cc30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cc34:	2300      	movs	r3, #0
 800cc36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cc3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4313      	orrs	r3, r2
 800cc42:	d039      	beq.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cc44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d81c      	bhi.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800cc4e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc54 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800cc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc54:	0800cc91 	.word	0x0800cc91
 800cc58:	0800cc65 	.word	0x0800cc65
 800cc5c:	0800cc73 	.word	0x0800cc73
 800cc60:	0800cc91 	.word	0x0800cc91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc64:	4b9f      	ldr	r3, [pc, #636]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc68:	4a9e      	ldr	r2, [pc, #632]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cc70:	e00f      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc76:	3308      	adds	r3, #8
 800cc78:	2102      	movs	r1, #2
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f001 ff0a 	bl	800ea94 <RCCEx_PLL2_Config>
 800cc80:	4603      	mov	r3, r0
 800cc82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cc86:	e004      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc8e:	e000      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800cc90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10a      	bne.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cc9a:	4b92      	ldr	r3, [pc, #584]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc9e:	f023 0103 	bic.w	r1, r3, #3
 800cca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cca8:	4a8e      	ldr	r2, [pc, #568]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccaa:	430b      	orrs	r3, r1
 800ccac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ccae:	e003      	b.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ccb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ccc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ccce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	f000 8099 	beq.w	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ccda:	4b83      	ldr	r3, [pc, #524]	@ (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a82      	ldr	r2, [pc, #520]	@ (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cce4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cce6:	f7fa fa2b 	bl	8007140 <HAL_GetTick>
 800ccea:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccee:	e00b      	b.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ccf0:	f7fa fa26 	bl	8007140 <HAL_GetTick>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	2b64      	cmp	r3, #100	@ 0x64
 800ccfe:	d903      	bls.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800cd00:	2303      	movs	r3, #3
 800cd02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd06:	e005      	b.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd08:	4b77      	ldr	r3, [pc, #476]	@ (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d0ed      	beq.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800cd14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d173      	bne.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cd1c:	4b71      	ldr	r3, [pc, #452]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cd20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd28:	4053      	eors	r3, r2
 800cd2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d015      	beq.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cd32:	4b6c      	ldr	r3, [pc, #432]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd3a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd3e:	4b69      	ldr	r3, [pc, #420]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd42:	4a68      	ldr	r2, [pc, #416]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd48:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd4a:	4b66      	ldr	r3, [pc, #408]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd4e:	4a65      	ldr	r2, [pc, #404]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cd54:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cd56:	4a63      	ldr	r2, [pc, #396]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cd5c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cd5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd6a:	d118      	bne.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd6c:	f7fa f9e8 	bl	8007140 <HAL_GetTick>
 800cd70:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd74:	e00d      	b.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd76:	f7fa f9e3 	bl	8007140 <HAL_GetTick>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800cd80:	1ad2      	subs	r2, r2, r3
 800cd82:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d903      	bls.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800cd8a:	2303      	movs	r3, #3
 800cd8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800cd90:	e005      	b.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd92:	4b54      	ldr	r3, [pc, #336]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd96:	f003 0302 	and.w	r3, r3, #2
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d0eb      	beq.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800cd9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d129      	bne.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cda6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cdae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cdb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cdb6:	d10e      	bne.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800cdb8:	4b4a      	ldr	r3, [pc, #296]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdba:	691b      	ldr	r3, [r3, #16]
 800cdbc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800cdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cdc8:	091a      	lsrs	r2, r3, #4
 800cdca:	4b48      	ldr	r3, [pc, #288]	@ (800ceec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800cdcc:	4013      	ands	r3, r2
 800cdce:	4a45      	ldr	r2, [pc, #276]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdd0:	430b      	orrs	r3, r1
 800cdd2:	6113      	str	r3, [r2, #16]
 800cdd4:	e005      	b.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800cdd6:	4b43      	ldr	r3, [pc, #268]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	4a42      	ldr	r2, [pc, #264]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cddc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cde0:	6113      	str	r3, [r2, #16]
 800cde2:	4b40      	ldr	r3, [pc, #256]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cde4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cdee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdf2:	4a3c      	ldr	r2, [pc, #240]	@ (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdf4:	430b      	orrs	r3, r1
 800cdf6:	6713      	str	r3, [r2, #112]	@ 0x70
 800cdf8:	e008      	b.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cdfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ce02:	e003      	b.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ce0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce14:	f002 0301 	and.w	r3, r2, #1
 800ce18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ce22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ce26:	460b      	mov	r3, r1
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	f000 808f 	beq.w	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ce2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce34:	2b28      	cmp	r3, #40	@ 0x28
 800ce36:	d871      	bhi.n	800cf1c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ce38:	a201      	add	r2, pc, #4	@ (adr r2, 800ce40 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ce3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3e:	bf00      	nop
 800ce40:	0800cf25 	.word	0x0800cf25
 800ce44:	0800cf1d 	.word	0x0800cf1d
 800ce48:	0800cf1d 	.word	0x0800cf1d
 800ce4c:	0800cf1d 	.word	0x0800cf1d
 800ce50:	0800cf1d 	.word	0x0800cf1d
 800ce54:	0800cf1d 	.word	0x0800cf1d
 800ce58:	0800cf1d 	.word	0x0800cf1d
 800ce5c:	0800cf1d 	.word	0x0800cf1d
 800ce60:	0800cef1 	.word	0x0800cef1
 800ce64:	0800cf1d 	.word	0x0800cf1d
 800ce68:	0800cf1d 	.word	0x0800cf1d
 800ce6c:	0800cf1d 	.word	0x0800cf1d
 800ce70:	0800cf1d 	.word	0x0800cf1d
 800ce74:	0800cf1d 	.word	0x0800cf1d
 800ce78:	0800cf1d 	.word	0x0800cf1d
 800ce7c:	0800cf1d 	.word	0x0800cf1d
 800ce80:	0800cf07 	.word	0x0800cf07
 800ce84:	0800cf1d 	.word	0x0800cf1d
 800ce88:	0800cf1d 	.word	0x0800cf1d
 800ce8c:	0800cf1d 	.word	0x0800cf1d
 800ce90:	0800cf1d 	.word	0x0800cf1d
 800ce94:	0800cf1d 	.word	0x0800cf1d
 800ce98:	0800cf1d 	.word	0x0800cf1d
 800ce9c:	0800cf1d 	.word	0x0800cf1d
 800cea0:	0800cf25 	.word	0x0800cf25
 800cea4:	0800cf1d 	.word	0x0800cf1d
 800cea8:	0800cf1d 	.word	0x0800cf1d
 800ceac:	0800cf1d 	.word	0x0800cf1d
 800ceb0:	0800cf1d 	.word	0x0800cf1d
 800ceb4:	0800cf1d 	.word	0x0800cf1d
 800ceb8:	0800cf1d 	.word	0x0800cf1d
 800cebc:	0800cf1d 	.word	0x0800cf1d
 800cec0:	0800cf25 	.word	0x0800cf25
 800cec4:	0800cf1d 	.word	0x0800cf1d
 800cec8:	0800cf1d 	.word	0x0800cf1d
 800cecc:	0800cf1d 	.word	0x0800cf1d
 800ced0:	0800cf1d 	.word	0x0800cf1d
 800ced4:	0800cf1d 	.word	0x0800cf1d
 800ced8:	0800cf1d 	.word	0x0800cf1d
 800cedc:	0800cf1d 	.word	0x0800cf1d
 800cee0:	0800cf25 	.word	0x0800cf25
 800cee4:	58024400 	.word	0x58024400
 800cee8:	58024800 	.word	0x58024800
 800ceec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cef4:	3308      	adds	r3, #8
 800cef6:	2101      	movs	r1, #1
 800cef8:	4618      	mov	r0, r3
 800cefa:	f001 fdcb 	bl	800ea94 <RCCEx_PLL2_Config>
 800cefe:	4603      	mov	r3, r0
 800cf00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf04:	e00f      	b.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf0a:	3328      	adds	r3, #40	@ 0x28
 800cf0c:	2101      	movs	r1, #1
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f001 fe72 	bl	800ebf8 <RCCEx_PLL3_Config>
 800cf14:	4603      	mov	r3, r0
 800cf16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf1a:	e004      	b.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cf22:	e000      	b.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800cf24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d10a      	bne.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cf2e:	4bbf      	ldr	r3, [pc, #764]	@ (800d22c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cf30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf32:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cf36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf3c:	4abb      	ldr	r2, [pc, #748]	@ (800d22c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cf3e:	430b      	orrs	r3, r1
 800cf40:	6553      	str	r3, [r2, #84]	@ 0x54
 800cf42:	e003      	b.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cf4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	f002 0302 	and.w	r3, r2, #2
 800cf58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800cf66:	460b      	mov	r3, r1
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	d041      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cf6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf72:	2b05      	cmp	r3, #5
 800cf74:	d824      	bhi.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800cf76:	a201      	add	r2, pc, #4	@ (adr r2, 800cf7c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800cf78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf7c:	0800cfc9 	.word	0x0800cfc9
 800cf80:	0800cf95 	.word	0x0800cf95
 800cf84:	0800cfab 	.word	0x0800cfab
 800cf88:	0800cfc9 	.word	0x0800cfc9
 800cf8c:	0800cfc9 	.word	0x0800cfc9
 800cf90:	0800cfc9 	.word	0x0800cfc9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf98:	3308      	adds	r3, #8
 800cf9a:	2101      	movs	r1, #1
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f001 fd79 	bl	800ea94 <RCCEx_PLL2_Config>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cfa8:	e00f      	b.n	800cfca <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfae:	3328      	adds	r3, #40	@ 0x28
 800cfb0:	2101      	movs	r1, #1
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f001 fe20 	bl	800ebf8 <RCCEx_PLL3_Config>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cfbe:	e004      	b.n	800cfca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cfc6:	e000      	b.n	800cfca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800cfc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d10a      	bne.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cfd2:	4b96      	ldr	r3, [pc, #600]	@ (800d22c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cfd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfd6:	f023 0107 	bic.w	r1, r3, #7
 800cfda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfe0:	4a92      	ldr	r2, [pc, #584]	@ (800d22c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cfe2:	430b      	orrs	r3, r1
 800cfe4:	6553      	str	r3, [r2, #84]	@ 0x54
 800cfe6:	e003      	b.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff8:	f002 0304 	and.w	r3, r2, #4
 800cffc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d000:	2300      	movs	r3, #0
 800d002:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d006:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d00a:	460b      	mov	r3, r1
 800d00c:	4313      	orrs	r3, r2
 800d00e:	d044      	beq.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d018:	2b05      	cmp	r3, #5
 800d01a:	d825      	bhi.n	800d068 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800d01c:	a201      	add	r2, pc, #4	@ (adr r2, 800d024 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800d01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d022:	bf00      	nop
 800d024:	0800d071 	.word	0x0800d071
 800d028:	0800d03d 	.word	0x0800d03d
 800d02c:	0800d053 	.word	0x0800d053
 800d030:	0800d071 	.word	0x0800d071
 800d034:	0800d071 	.word	0x0800d071
 800d038:	0800d071 	.word	0x0800d071
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d040:	3308      	adds	r3, #8
 800d042:	2101      	movs	r1, #1
 800d044:	4618      	mov	r0, r3
 800d046:	f001 fd25 	bl	800ea94 <RCCEx_PLL2_Config>
 800d04a:	4603      	mov	r3, r0
 800d04c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d050:	e00f      	b.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d056:	3328      	adds	r3, #40	@ 0x28
 800d058:	2101      	movs	r1, #1
 800d05a:	4618      	mov	r0, r3
 800d05c:	f001 fdcc 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d060:	4603      	mov	r3, r0
 800d062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d066:	e004      	b.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d06e:	e000      	b.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800d070:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d072:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10b      	bne.n	800d092 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d07a:	4b6c      	ldr	r3, [pc, #432]	@ (800d22c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d07c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d07e:	f023 0107 	bic.w	r1, r3, #7
 800d082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d08a:	4a68      	ldr	r2, [pc, #416]	@ (800d22c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d08c:	430b      	orrs	r3, r1
 800d08e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d090:	e003      	b.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d092:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d096:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a2:	f002 0320 	and.w	r3, r2, #32
 800d0a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d0b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	d055      	beq.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d0c6:	d033      	beq.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800d0c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d0cc:	d82c      	bhi.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0d2:	d02f      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0d8:	d826      	bhi.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d0da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d0de:	d02b      	beq.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d0e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d0e4:	d820      	bhi.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d0e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0ea:	d012      	beq.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800d0ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0f0:	d81a      	bhi.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d022      	beq.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d0f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0fa:	d115      	bne.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d100:	3308      	adds	r3, #8
 800d102:	2100      	movs	r1, #0
 800d104:	4618      	mov	r0, r3
 800d106:	f001 fcc5 	bl	800ea94 <RCCEx_PLL2_Config>
 800d10a:	4603      	mov	r3, r0
 800d10c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d110:	e015      	b.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d116:	3328      	adds	r3, #40	@ 0x28
 800d118:	2102      	movs	r1, #2
 800d11a:	4618      	mov	r0, r3
 800d11c:	f001 fd6c 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d120:	4603      	mov	r3, r0
 800d122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d126:	e00a      	b.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d12e:	e006      	b.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d130:	bf00      	nop
 800d132:	e004      	b.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d134:	bf00      	nop
 800d136:	e002      	b.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d138:	bf00      	nop
 800d13a:	e000      	b.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d13c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d13e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10b      	bne.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d146:	4b39      	ldr	r3, [pc, #228]	@ (800d22c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d14a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d156:	4a35      	ldr	r2, [pc, #212]	@ (800d22c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d158:	430b      	orrs	r3, r1
 800d15a:	6553      	str	r3, [r2, #84]	@ 0x54
 800d15c:	e003      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d15e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d162:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d172:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d176:	2300      	movs	r3, #0
 800d178:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d17c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d180:	460b      	mov	r3, r1
 800d182:	4313      	orrs	r3, r2
 800d184:	d058      	beq.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d18a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d18e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d192:	d033      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800d194:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d198:	d82c      	bhi.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d19a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d19e:	d02f      	beq.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800d1a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1a4:	d826      	bhi.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d1a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1aa:	d02b      	beq.n	800d204 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800d1ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1b0:	d820      	bhi.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d1b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1b6:	d012      	beq.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800d1b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1bc:	d81a      	bhi.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d022      	beq.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800d1c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1c6:	d115      	bne.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1cc:	3308      	adds	r3, #8
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f001 fc5f 	bl	800ea94 <RCCEx_PLL2_Config>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d1dc:	e015      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1e2:	3328      	adds	r3, #40	@ 0x28
 800d1e4:	2102      	movs	r1, #2
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f001 fd06 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d1f2:	e00a      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d1fa:	e006      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d1fc:	bf00      	nop
 800d1fe:	e004      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d200:	bf00      	nop
 800d202:	e002      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d204:	bf00      	nop
 800d206:	e000      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d20a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10e      	bne.n	800d230 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d212:	4b06      	ldr	r3, [pc, #24]	@ (800d22c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d216:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d21e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d222:	4a02      	ldr	r2, [pc, #8]	@ (800d22c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d224:	430b      	orrs	r3, r1
 800d226:	6593      	str	r3, [r2, #88]	@ 0x58
 800d228:	e006      	b.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800d22a:	bf00      	nop
 800d22c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d230:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d234:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d240:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d244:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d248:	2300      	movs	r3, #0
 800d24a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d24e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d252:	460b      	mov	r3, r1
 800d254:	4313      	orrs	r3, r2
 800d256:	d055      	beq.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d25c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d260:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d264:	d033      	beq.n	800d2ce <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800d266:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d26a:	d82c      	bhi.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d26c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d270:	d02f      	beq.n	800d2d2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800d272:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d276:	d826      	bhi.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d278:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d27c:	d02b      	beq.n	800d2d6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d27e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d282:	d820      	bhi.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d284:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d288:	d012      	beq.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800d28a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d28e:	d81a      	bhi.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d290:	2b00      	cmp	r3, #0
 800d292:	d022      	beq.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d298:	d115      	bne.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d29e:	3308      	adds	r3, #8
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f001 fbf6 	bl	800ea94 <RCCEx_PLL2_Config>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d2ae:	e015      	b.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2b4:	3328      	adds	r3, #40	@ 0x28
 800d2b6:	2102      	movs	r1, #2
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f001 fc9d 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d2c4:	e00a      	b.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d2cc:	e006      	b.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d2ce:	bf00      	nop
 800d2d0:	e004      	b.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d2d2:	bf00      	nop
 800d2d4:	e002      	b.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d2d6:	bf00      	nop
 800d2d8:	e000      	b.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d2da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d10b      	bne.n	800d2fc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d2e4:	4ba0      	ldr	r3, [pc, #640]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d2e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2e8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d2f4:	4a9c      	ldr	r2, [pc, #624]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d2f6:	430b      	orrs	r3, r1
 800d2f8:	6593      	str	r3, [r2, #88]	@ 0x58
 800d2fa:	e003      	b.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d300:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800d304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	f002 0308 	and.w	r3, r2, #8
 800d310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d314:	2300      	movs	r3, #0
 800d316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d31a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d31e:	460b      	mov	r3, r1
 800d320:	4313      	orrs	r3, r2
 800d322:	d01e      	beq.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800d324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d32c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d330:	d10c      	bne.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d336:	3328      	adds	r3, #40	@ 0x28
 800d338:	2102      	movs	r1, #2
 800d33a:	4618      	mov	r0, r3
 800d33c:	f001 fc5c 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d002      	beq.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800d34c:	4b86      	ldr	r3, [pc, #536]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d34e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d350:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d35c:	4a82      	ldr	r2, [pc, #520]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d35e:	430b      	orrs	r3, r1
 800d360:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36a:	f002 0310 	and.w	r3, r2, #16
 800d36e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d372:	2300      	movs	r3, #0
 800d374:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d378:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d37c:	460b      	mov	r3, r1
 800d37e:	4313      	orrs	r3, r2
 800d380:	d01e      	beq.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d38a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d38e:	d10c      	bne.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d394:	3328      	adds	r3, #40	@ 0x28
 800d396:	2102      	movs	r1, #2
 800d398:	4618      	mov	r0, r3
 800d39a:	f001 fc2d 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d002      	beq.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d3aa:	4b6f      	ldr	r3, [pc, #444]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d3ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d3ba:	4a6b      	ldr	r2, [pc, #428]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d3bc:	430b      	orrs	r3, r1
 800d3be:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d3cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d3d2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	d03e      	beq.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d3e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d3e8:	d022      	beq.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d3ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d3ee:	d81b      	bhi.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d003      	beq.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800d3f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3f8:	d00b      	beq.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800d3fa:	e015      	b.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d400:	3308      	adds	r3, #8
 800d402:	2100      	movs	r1, #0
 800d404:	4618      	mov	r0, r3
 800d406:	f001 fb45 	bl	800ea94 <RCCEx_PLL2_Config>
 800d40a:	4603      	mov	r3, r0
 800d40c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d410:	e00f      	b.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d416:	3328      	adds	r3, #40	@ 0x28
 800d418:	2102      	movs	r1, #2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f001 fbec 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d420:	4603      	mov	r3, r0
 800d422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d426:	e004      	b.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d42e:	e000      	b.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800d430:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10b      	bne.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d43a:	4b4b      	ldr	r3, [pc, #300]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d43c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d43e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d446:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d44a:	4a47      	ldr	r2, [pc, #284]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d44c:	430b      	orrs	r3, r1
 800d44e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d450:	e003      	b.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d456:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d462:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d466:	673b      	str	r3, [r7, #112]	@ 0x70
 800d468:	2300      	movs	r3, #0
 800d46a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d46c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d470:	460b      	mov	r3, r1
 800d472:	4313      	orrs	r3, r2
 800d474:	d03b      	beq.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d47a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d47e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d482:	d01f      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d484:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d488:	d818      	bhi.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d48a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d48e:	d003      	beq.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d490:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d494:	d007      	beq.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d496:	e011      	b.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d498:	4b33      	ldr	r3, [pc, #204]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d49c:	4a32      	ldr	r2, [pc, #200]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d49e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d4a4:	e00f      	b.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4aa:	3328      	adds	r3, #40	@ 0x28
 800d4ac:	2101      	movs	r1, #1
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f001 fba2 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d4ba:	e004      	b.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d4c2:	e000      	b.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d4c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10b      	bne.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d4ce:	4b26      	ldr	r3, [pc, #152]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d4de:	4a22      	ldr	r2, [pc, #136]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d4e0:	430b      	orrs	r3, r1
 800d4e2:	6553      	str	r3, [r2, #84]	@ 0x54
 800d4e4:	e003      	b.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d4fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d500:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d504:	460b      	mov	r3, r1
 800d506:	4313      	orrs	r3, r2
 800d508:	d034      	beq.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d50e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d510:	2b00      	cmp	r3, #0
 800d512:	d003      	beq.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d518:	d007      	beq.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d51a:	e011      	b.n	800d540 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d51c:	4b12      	ldr	r3, [pc, #72]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d520:	4a11      	ldr	r2, [pc, #68]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d528:	e00e      	b.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d52e:	3308      	adds	r3, #8
 800d530:	2102      	movs	r1, #2
 800d532:	4618      	mov	r0, r3
 800d534:	f001 faae 	bl	800ea94 <RCCEx_PLL2_Config>
 800d538:	4603      	mov	r3, r0
 800d53a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d53e:	e003      	b.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d540:	2301      	movs	r3, #1
 800d542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d546:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10d      	bne.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d550:	4b05      	ldr	r3, [pc, #20]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d554:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d55c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d55e:	4a02      	ldr	r2, [pc, #8]	@ (800d568 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d560:	430b      	orrs	r3, r1
 800d562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d564:	e006      	b.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d566:	bf00      	nop
 800d568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d56c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d580:	663b      	str	r3, [r7, #96]	@ 0x60
 800d582:	2300      	movs	r3, #0
 800d584:	667b      	str	r3, [r7, #100]	@ 0x64
 800d586:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d58a:	460b      	mov	r3, r1
 800d58c:	4313      	orrs	r3, r2
 800d58e:	d00c      	beq.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d594:	3328      	adds	r3, #40	@ 0x28
 800d596:	2102      	movs	r1, #2
 800d598:	4618      	mov	r0, r3
 800d59a:	f001 fb2d 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d5b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d5bc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	d036      	beq.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d5cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d5d0:	d018      	beq.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d5d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d5d6:	d811      	bhi.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d5d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5dc:	d014      	beq.n	800d608 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d5de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5e2:	d80b      	bhi.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d011      	beq.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d5e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5ec:	d106      	bne.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5ee:	4bb7      	ldr	r3, [pc, #732]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f2:	4ab6      	ldr	r2, [pc, #728]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d5f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d5f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d5fa:	e008      	b.n	800d60e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d602:	e004      	b.n	800d60e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d604:	bf00      	nop
 800d606:	e002      	b.n	800d60e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d608:	bf00      	nop
 800d60a:	e000      	b.n	800d60e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d60c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d60e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10a      	bne.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d616:	4bad      	ldr	r3, [pc, #692]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d61a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d622:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d624:	4aa9      	ldr	r2, [pc, #676]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d626:	430b      	orrs	r3, r1
 800d628:	6553      	str	r3, [r2, #84]	@ 0x54
 800d62a:	e003      	b.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d62c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d630:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d640:	653b      	str	r3, [r7, #80]	@ 0x50
 800d642:	2300      	movs	r3, #0
 800d644:	657b      	str	r3, [r7, #84]	@ 0x54
 800d646:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d64a:	460b      	mov	r3, r1
 800d64c:	4313      	orrs	r3, r2
 800d64e:	d009      	beq.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d650:	4b9e      	ldr	r3, [pc, #632]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d654:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d65c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d65e:	4a9b      	ldr	r2, [pc, #620]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d660:	430b      	orrs	r3, r1
 800d662:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d670:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d672:	2300      	movs	r3, #0
 800d674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d676:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d67a:	460b      	mov	r3, r1
 800d67c:	4313      	orrs	r3, r2
 800d67e:	d009      	beq.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d680:	4b92      	ldr	r3, [pc, #584]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d684:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d68c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d68e:	4a8f      	ldr	r2, [pc, #572]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d690:	430b      	orrs	r3, r1
 800d692:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d6a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	d00e      	beq.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d6b0:	4b86      	ldr	r3, [pc, #536]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	4a85      	ldr	r2, [pc, #532]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d6ba:	6113      	str	r3, [r2, #16]
 800d6bc:	4b83      	ldr	r3, [pc, #524]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6be:	6919      	ldr	r1, [r3, #16]
 800d6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d6c8:	4a80      	ldr	r2, [pc, #512]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6ca:	430b      	orrs	r3, r1
 800d6cc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d6da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d6dc:	2300      	movs	r3, #0
 800d6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	d009      	beq.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d6ea:	4b78      	ldr	r3, [pc, #480]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6f8:	4a74      	ldr	r2, [pc, #464]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6fa:	430b      	orrs	r3, r1
 800d6fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d706:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d70a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d70c:	2300      	movs	r3, #0
 800d70e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d710:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d714:	460b      	mov	r3, r1
 800d716:	4313      	orrs	r3, r2
 800d718:	d00a      	beq.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d71a:	4b6c      	ldr	r3, [pc, #432]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d71c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d71e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d72a:	4a68      	ldr	r2, [pc, #416]	@ (800d8cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d72c:	430b      	orrs	r3, r1
 800d72e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	2100      	movs	r1, #0
 800d73a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d73c:	f003 0301 	and.w	r3, r3, #1
 800d740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d742:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d746:	460b      	mov	r3, r1
 800d748:	4313      	orrs	r3, r2
 800d74a:	d011      	beq.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d750:	3308      	adds	r3, #8
 800d752:	2100      	movs	r1, #0
 800d754:	4618      	mov	r0, r3
 800d756:	f001 f99d 	bl	800ea94 <RCCEx_PLL2_Config>
 800d75a:	4603      	mov	r3, r0
 800d75c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d764:	2b00      	cmp	r3, #0
 800d766:	d003      	beq.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d76c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	2100      	movs	r1, #0
 800d77a:	6239      	str	r1, [r7, #32]
 800d77c:	f003 0302 	and.w	r3, r3, #2
 800d780:	627b      	str	r3, [r7, #36]	@ 0x24
 800d782:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d786:	460b      	mov	r3, r1
 800d788:	4313      	orrs	r3, r2
 800d78a:	d011      	beq.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d790:	3308      	adds	r3, #8
 800d792:	2101      	movs	r1, #1
 800d794:	4618      	mov	r0, r3
 800d796:	f001 f97d 	bl	800ea94 <RCCEx_PLL2_Config>
 800d79a:	4603      	mov	r3, r0
 800d79c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d7a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d003      	beq.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	61b9      	str	r1, [r7, #24]
 800d7bc:	f003 0304 	and.w	r3, r3, #4
 800d7c0:	61fb      	str	r3, [r7, #28]
 800d7c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	d011      	beq.n	800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7d0:	3308      	adds	r3, #8
 800d7d2:	2102      	movs	r1, #2
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f001 f95d 	bl	800ea94 <RCCEx_PLL2_Config>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d7e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d003      	beq.n	800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	6139      	str	r1, [r7, #16]
 800d7fc:	f003 0308 	and.w	r3, r3, #8
 800d800:	617b      	str	r3, [r7, #20]
 800d802:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d806:	460b      	mov	r3, r1
 800d808:	4313      	orrs	r3, r2
 800d80a:	d011      	beq.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d810:	3328      	adds	r3, #40	@ 0x28
 800d812:	2100      	movs	r1, #0
 800d814:	4618      	mov	r0, r3
 800d816:	f001 f9ef 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d81a:	4603      	mov	r3, r0
 800d81c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d824:	2b00      	cmp	r3, #0
 800d826:	d003      	beq.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d82c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	2100      	movs	r1, #0
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	f003 0310 	and.w	r3, r3, #16
 800d840:	60fb      	str	r3, [r7, #12]
 800d842:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d846:	460b      	mov	r3, r1
 800d848:	4313      	orrs	r3, r2
 800d84a:	d011      	beq.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d850:	3328      	adds	r3, #40	@ 0x28
 800d852:	2101      	movs	r1, #1
 800d854:	4618      	mov	r0, r3
 800d856:	f001 f9cf 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d85a:	4603      	mov	r3, r0
 800d85c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d864:	2b00      	cmp	r3, #0
 800d866:	d003      	beq.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d86c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	2100      	movs	r1, #0
 800d87a:	6039      	str	r1, [r7, #0]
 800d87c:	f003 0320 	and.w	r3, r3, #32
 800d880:	607b      	str	r3, [r7, #4]
 800d882:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d886:	460b      	mov	r3, r1
 800d888:	4313      	orrs	r3, r2
 800d88a:	d011      	beq.n	800d8b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d890:	3328      	adds	r3, #40	@ 0x28
 800d892:	2102      	movs	r1, #2
 800d894:	4618      	mov	r0, r3
 800d896:	f001 f9af 	bl	800ebf8 <RCCEx_PLL3_Config>
 800d89a:	4603      	mov	r3, r0
 800d89c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d8a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d8b0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	e000      	b.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d8ca:	bf00      	nop
 800d8cc:	58024400 	.word	0x58024400

0800d8d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b090      	sub	sp, #64	@ 0x40
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d8da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8de:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d8e2:	430b      	orrs	r3, r1
 800d8e4:	f040 8094 	bne.w	800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d8e8:	4b9b      	ldr	r3, [pc, #620]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d8ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8ec:	f003 0307 	and.w	r3, r3, #7
 800d8f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f4:	2b04      	cmp	r3, #4
 800d8f6:	f200 8087 	bhi.w	800da08 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d900 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d900:	0800d915 	.word	0x0800d915
 800d904:	0800d93d 	.word	0x0800d93d
 800d908:	0800d965 	.word	0x0800d965
 800d90c:	0800da01 	.word	0x0800da01
 800d910:	0800d98d 	.word	0x0800d98d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d914:	4b90      	ldr	r3, [pc, #576]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d91c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d920:	d108      	bne.n	800d934 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d926:	4618      	mov	r0, r3
 800d928:	f000 ff62 	bl	800e7f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d930:	f000 bc93 	b.w	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d938:	f000 bc8f 	b.w	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d93c:	4b86      	ldr	r3, [pc, #536]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d944:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d948:	d108      	bne.n	800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d94a:	f107 0318 	add.w	r3, r7, #24
 800d94e:	4618      	mov	r0, r3
 800d950:	f000 fca6 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d958:	f000 bc7f 	b.w	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d95c:	2300      	movs	r3, #0
 800d95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d960:	f000 bc7b 	b.w	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d964:	4b7c      	ldr	r3, [pc, #496]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d96c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d970:	d108      	bne.n	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d972:	f107 030c 	add.w	r3, r7, #12
 800d976:	4618      	mov	r0, r3
 800d978:	f000 fde6 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d980:	f000 bc6b 	b.w	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d988:	f000 bc67 	b.w	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d98c:	4b72      	ldr	r3, [pc, #456]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d98e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d990:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d994:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d996:	4b70      	ldr	r3, [pc, #448]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f003 0304 	and.w	r3, r3, #4
 800d99e:	2b04      	cmp	r3, #4
 800d9a0:	d10c      	bne.n	800d9bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d109      	bne.n	800d9bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d9a8:	4b6b      	ldr	r3, [pc, #428]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	08db      	lsrs	r3, r3, #3
 800d9ae:	f003 0303 	and.w	r3, r3, #3
 800d9b2:	4a6a      	ldr	r2, [pc, #424]	@ (800db5c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d9b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9ba:	e01f      	b.n	800d9fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d9bc:	4b66      	ldr	r3, [pc, #408]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9c8:	d106      	bne.n	800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d9ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d9d0:	d102      	bne.n	800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d9d2:	4b63      	ldr	r3, [pc, #396]	@ (800db60 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9d6:	e011      	b.n	800d9fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d9d8:	4b5f      	ldr	r3, [pc, #380]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9e4:	d106      	bne.n	800d9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d9ec:	d102      	bne.n	800d9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d9ee:	4b5d      	ldr	r3, [pc, #372]	@ (800db64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9f2:	e003      	b.n	800d9fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d9f8:	f000 bc2f 	b.w	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d9fc:	f000 bc2d 	b.w	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800da00:	4b59      	ldr	r3, [pc, #356]	@ (800db68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800da02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da04:	f000 bc29 	b.w	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800da08:	2300      	movs	r3, #0
 800da0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da0c:	f000 bc25 	b.w	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800da10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da14:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800da18:	430b      	orrs	r3, r1
 800da1a:	f040 80a7 	bne.w	800db6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800da1e:	4b4e      	ldr	r3, [pc, #312]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da22:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800da26:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800da28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da2e:	d054      	beq.n	800dada <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800da30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da36:	f200 808b 	bhi.w	800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800da3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800da40:	f000 8083 	beq.w	800db4a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800da44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800da4a:	f200 8081 	bhi.w	800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800da4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da54:	d02f      	beq.n	800dab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800da56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da5c:	d878      	bhi.n	800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800da5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da60:	2b00      	cmp	r3, #0
 800da62:	d004      	beq.n	800da6e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800da64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da6a:	d012      	beq.n	800da92 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800da6c:	e070      	b.n	800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800da6e:	4b3a      	ldr	r3, [pc, #232]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da7a:	d107      	bne.n	800da8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da80:	4618      	mov	r0, r3
 800da82:	f000 feb5 	bl	800e7f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800da86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da8a:	e3e6      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da90:	e3e3      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da92:	4b31      	ldr	r3, [pc, #196]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da9e:	d107      	bne.n	800dab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800daa0:	f107 0318 	add.w	r3, r7, #24
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 fbfb 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800daae:	e3d4      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dab4:	e3d1      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dab6:	4b28      	ldr	r3, [pc, #160]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dabe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dac2:	d107      	bne.n	800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dac4:	f107 030c 	add.w	r3, r7, #12
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 fd3d 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dad2:	e3c2      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dad4:	2300      	movs	r3, #0
 800dad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dad8:	e3bf      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dada:	4b1f      	ldr	r3, [pc, #124]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dadc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dade:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dae2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dae4:	4b1c      	ldr	r3, [pc, #112]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f003 0304 	and.w	r3, r3, #4
 800daec:	2b04      	cmp	r3, #4
 800daee:	d10c      	bne.n	800db0a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800daf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d109      	bne.n	800db0a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800daf6:	4b18      	ldr	r3, [pc, #96]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	08db      	lsrs	r3, r3, #3
 800dafc:	f003 0303 	and.w	r3, r3, #3
 800db00:	4a16      	ldr	r2, [pc, #88]	@ (800db5c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800db02:	fa22 f303 	lsr.w	r3, r2, r3
 800db06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db08:	e01e      	b.n	800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800db0a:	4b13      	ldr	r3, [pc, #76]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db16:	d106      	bne.n	800db26 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800db18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db1e:	d102      	bne.n	800db26 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800db20:	4b0f      	ldr	r3, [pc, #60]	@ (800db60 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800db22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db24:	e010      	b.n	800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800db26:	4b0c      	ldr	r3, [pc, #48]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db32:	d106      	bne.n	800db42 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800db34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db3a:	d102      	bne.n	800db42 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800db3c:	4b09      	ldr	r3, [pc, #36]	@ (800db64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db40:	e002      	b.n	800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800db42:	2300      	movs	r3, #0
 800db44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800db46:	e388      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800db48:	e387      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800db4a:	4b07      	ldr	r3, [pc, #28]	@ (800db68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800db4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db4e:	e384      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800db50:	2300      	movs	r3, #0
 800db52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db54:	e381      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800db56:	bf00      	nop
 800db58:	58024400 	.word	0x58024400
 800db5c:	03d09000 	.word	0x03d09000
 800db60:	003d0900 	.word	0x003d0900
 800db64:	02dc6c00 	.word	0x02dc6c00
 800db68:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800db6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db70:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800db74:	430b      	orrs	r3, r1
 800db76:	f040 809c 	bne.w	800dcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800db7a:	4b9e      	ldr	r3, [pc, #632]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800db7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db7e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800db82:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800db84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800db8a:	d054      	beq.n	800dc36 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800db8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800db92:	f200 808b 	bhi.w	800dcac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800db96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800db9c:	f000 8083 	beq.w	800dca6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800dba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dba6:	f200 8081 	bhi.w	800dcac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dbb0:	d02f      	beq.n	800dc12 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dbb8:	d878      	bhi.n	800dcac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800dbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d004      	beq.n	800dbca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dbc6:	d012      	beq.n	800dbee <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800dbc8:	e070      	b.n	800dcac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dbca:	4b8a      	ldr	r3, [pc, #552]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dbd6:	d107      	bne.n	800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f000 fe07 	bl	800e7f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbe6:	e338      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbec:	e335      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dbee:	4b81      	ldr	r3, [pc, #516]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dbf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dbfa:	d107      	bne.n	800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbfc:	f107 0318 	add.w	r3, r7, #24
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 fb4d 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc0a:	e326      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc10:	e323      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dc12:	4b78      	ldr	r3, [pc, #480]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dc1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc1e:	d107      	bne.n	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc20:	f107 030c 	add.w	r3, r7, #12
 800dc24:	4618      	mov	r0, r3
 800dc26:	f000 fc8f 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc2e:	e314      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc34:	e311      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dc36:	4b6f      	ldr	r3, [pc, #444]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dc38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dc3e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dc40:	4b6c      	ldr	r3, [pc, #432]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f003 0304 	and.w	r3, r3, #4
 800dc48:	2b04      	cmp	r3, #4
 800dc4a:	d10c      	bne.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800dc4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d109      	bne.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc52:	4b68      	ldr	r3, [pc, #416]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	08db      	lsrs	r3, r3, #3
 800dc58:	f003 0303 	and.w	r3, r3, #3
 800dc5c:	4a66      	ldr	r2, [pc, #408]	@ (800ddf8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800dc5e:	fa22 f303 	lsr.w	r3, r2, r3
 800dc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc64:	e01e      	b.n	800dca4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dc66:	4b63      	ldr	r3, [pc, #396]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc72:	d106      	bne.n	800dc82 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800dc74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc7a:	d102      	bne.n	800dc82 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dc7c:	4b5f      	ldr	r3, [pc, #380]	@ (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800dc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc80:	e010      	b.n	800dca4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dc82:	4b5c      	ldr	r3, [pc, #368]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc8e:	d106      	bne.n	800dc9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800dc90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc96:	d102      	bne.n	800dc9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dc98:	4b59      	ldr	r3, [pc, #356]	@ (800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc9c:	e002      	b.n	800dca4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800dca2:	e2da      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dca4:	e2d9      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dca6:	4b57      	ldr	r3, [pc, #348]	@ (800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800dca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcaa:	e2d6      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800dcac:	2300      	movs	r3, #0
 800dcae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcb0:	e2d3      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800dcb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcb6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800dcba:	430b      	orrs	r3, r1
 800dcbc:	f040 80a7 	bne.w	800de0e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800dcc0:	4b4c      	ldr	r3, [pc, #304]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dcc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcc4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800dcc8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dccc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dcd0:	d055      	beq.n	800dd7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800dcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dcd8:	f200 8096 	bhi.w	800de08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800dcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dce2:	f000 8084 	beq.w	800ddee <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800dce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dcec:	f200 808c 	bhi.w	800de08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800dcf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcf6:	d030      	beq.n	800dd5a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800dcf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcfe:	f200 8083 	bhi.w	800de08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800dd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d004      	beq.n	800dd12 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800dd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd0e:	d012      	beq.n	800dd36 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800dd10:	e07a      	b.n	800de08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dd12:	4b38      	ldr	r3, [pc, #224]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd1e:	d107      	bne.n	800dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dd20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd24:	4618      	mov	r0, r3
 800dd26:	f000 fd63 	bl	800e7f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd2e:	e294      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd30:	2300      	movs	r3, #0
 800dd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd34:	e291      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dd36:	4b2f      	ldr	r3, [pc, #188]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dd42:	d107      	bne.n	800dd54 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd44:	f107 0318 	add.w	r3, r7, #24
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f000 faa9 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd52:	e282      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd54:	2300      	movs	r3, #0
 800dd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd58:	e27f      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dd5a:	4b26      	ldr	r3, [pc, #152]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dd62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd66:	d107      	bne.n	800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd68:	f107 030c 	add.w	r3, r7, #12
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 fbeb 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd76:	e270      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd7c:	e26d      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dd7e:	4b1d      	ldr	r3, [pc, #116]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dd86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dd88:	4b1a      	ldr	r3, [pc, #104]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f003 0304 	and.w	r3, r3, #4
 800dd90:	2b04      	cmp	r3, #4
 800dd92:	d10c      	bne.n	800ddae <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800dd94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d109      	bne.n	800ddae <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd9a:	4b16      	ldr	r3, [pc, #88]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	08db      	lsrs	r3, r3, #3
 800dda0:	f003 0303 	and.w	r3, r3, #3
 800dda4:	4a14      	ldr	r2, [pc, #80]	@ (800ddf8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800dda6:	fa22 f303 	lsr.w	r3, r2, r3
 800ddaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddac:	e01e      	b.n	800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ddae:	4b11      	ldr	r3, [pc, #68]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ddba:	d106      	bne.n	800ddca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ddbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ddc2:	d102      	bne.n	800ddca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ddc4:	4b0d      	ldr	r3, [pc, #52]	@ (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ddc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddc8:	e010      	b.n	800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ddca:	4b0a      	ldr	r3, [pc, #40]	@ (800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ddd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ddd6:	d106      	bne.n	800dde6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ddd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ddde:	d102      	bne.n	800dde6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dde0:	4b07      	ldr	r3, [pc, #28]	@ (800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dde4:	e002      	b.n	800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ddea:	e236      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ddec:	e235      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ddee:	4b05      	ldr	r3, [pc, #20]	@ (800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ddf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddf2:	e232      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ddf4:	58024400 	.word	0x58024400
 800ddf8:	03d09000 	.word	0x03d09000
 800ddfc:	003d0900 	.word	0x003d0900
 800de00:	02dc6c00 	.word	0x02dc6c00
 800de04:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800de08:	2300      	movs	r3, #0
 800de0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de0c:	e225      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800de0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de12:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800de16:	430b      	orrs	r3, r1
 800de18:	f040 8085 	bne.w	800df26 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800de1c:	4b9c      	ldr	r3, [pc, #624]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800de1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de20:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800de24:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800de26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800de2c:	d06b      	beq.n	800df06 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800de2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800de34:	d874      	bhi.n	800df20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800de36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800de3c:	d056      	beq.n	800deec <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800de3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800de44:	d86c      	bhi.n	800df20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800de46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de4c:	d03b      	beq.n	800dec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800de4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de54:	d864      	bhi.n	800df20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800de56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de5c:	d021      	beq.n	800dea2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800de5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de64:	d85c      	bhi.n	800df20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800de66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d004      	beq.n	800de76 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800de6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de72:	d004      	beq.n	800de7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800de74:	e054      	b.n	800df20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800de76:	f7fe fb43 	bl	800c500 <HAL_RCC_GetPCLK1Freq>
 800de7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de7c:	e1ed      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800de7e:	4b84      	ldr	r3, [pc, #528]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de8a:	d107      	bne.n	800de9c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de8c:	f107 0318 	add.w	r3, r7, #24
 800de90:	4618      	mov	r0, r3
 800de92:	f000 fa05 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de9a:	e1de      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de9c:	2300      	movs	r3, #0
 800de9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dea0:	e1db      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dea2:	4b7b      	ldr	r3, [pc, #492]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800deaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800deae:	d107      	bne.n	800dec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800deb0:	f107 030c 	add.w	r3, r7, #12
 800deb4:	4618      	mov	r0, r3
 800deb6:	f000 fb47 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800debe:	e1cc      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dec0:	2300      	movs	r3, #0
 800dec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dec4:	e1c9      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dec6:	4b72      	ldr	r3, [pc, #456]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f003 0304 	and.w	r3, r3, #4
 800dece:	2b04      	cmp	r3, #4
 800ded0:	d109      	bne.n	800dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ded2:	4b6f      	ldr	r3, [pc, #444]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	08db      	lsrs	r3, r3, #3
 800ded8:	f003 0303 	and.w	r3, r3, #3
 800dedc:	4a6d      	ldr	r2, [pc, #436]	@ (800e094 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800dede:	fa22 f303 	lsr.w	r3, r2, r3
 800dee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dee4:	e1b9      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dee6:	2300      	movs	r3, #0
 800dee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800deea:	e1b6      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800deec:	4b68      	ldr	r3, [pc, #416]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800def4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800def8:	d102      	bne.n	800df00 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800defa:	4b67      	ldr	r3, [pc, #412]	@ (800e098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800defc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800defe:	e1ac      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df04:	e1a9      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800df06:	4b62      	ldr	r3, [pc, #392]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df12:	d102      	bne.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800df14:	4b61      	ldr	r3, [pc, #388]	@ (800e09c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800df16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df18:	e19f      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800df1a:	2300      	movs	r3, #0
 800df1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df1e:	e19c      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800df20:	2300      	movs	r3, #0
 800df22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df24:	e199      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800df26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df2a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800df2e:	430b      	orrs	r3, r1
 800df30:	d173      	bne.n	800e01a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800df32:	4b57      	ldr	r3, [pc, #348]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800df34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800df3a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800df3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df42:	d02f      	beq.n	800dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800df44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df4a:	d863      	bhi.n	800e014 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800df4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d004      	beq.n	800df5c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800df52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df58:	d012      	beq.n	800df80 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800df5a:	e05b      	b.n	800e014 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df5c:	4b4c      	ldr	r3, [pc, #304]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800df68:	d107      	bne.n	800df7a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df6a:	f107 0318 	add.w	r3, r7, #24
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 f996 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df78:	e16f      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800df7a:	2300      	movs	r3, #0
 800df7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df7e:	e16c      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800df80:	4b43      	ldr	r3, [pc, #268]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800df88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df8c:	d107      	bne.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df8e:	f107 030c 	add.w	r3, r7, #12
 800df92:	4618      	mov	r0, r3
 800df94:	f000 fad8 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df9c:	e15d      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfa2:	e15a      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dfa4:	4b3a      	ldr	r3, [pc, #232]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dfa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dfac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dfae:	4b38      	ldr	r3, [pc, #224]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f003 0304 	and.w	r3, r3, #4
 800dfb6:	2b04      	cmp	r3, #4
 800dfb8:	d10c      	bne.n	800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800dfba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d109      	bne.n	800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dfc0:	4b33      	ldr	r3, [pc, #204]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	08db      	lsrs	r3, r3, #3
 800dfc6:	f003 0303 	and.w	r3, r3, #3
 800dfca:	4a32      	ldr	r2, [pc, #200]	@ (800e094 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800dfcc:	fa22 f303 	lsr.w	r3, r2, r3
 800dfd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dfd2:	e01e      	b.n	800e012 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dfd4:	4b2e      	ldr	r3, [pc, #184]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dfe0:	d106      	bne.n	800dff0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800dfe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dfe8:	d102      	bne.n	800dff0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dfea:	4b2b      	ldr	r3, [pc, #172]	@ (800e098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800dfec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dfee:	e010      	b.n	800e012 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dff0:	4b27      	ldr	r3, [pc, #156]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dffc:	d106      	bne.n	800e00c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800dffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e004:	d102      	bne.n	800e00c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e006:	4b25      	ldr	r3, [pc, #148]	@ (800e09c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800e008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e00a:	e002      	b.n	800e012 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e00c:	2300      	movs	r3, #0
 800e00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e010:	e123      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e012:	e122      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e018:	e11f      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e01a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e01e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800e022:	430b      	orrs	r3, r1
 800e024:	d13c      	bne.n	800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e026:	4b1a      	ldr	r3, [pc, #104]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e02a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e02e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e032:	2b00      	cmp	r3, #0
 800e034:	d004      	beq.n	800e040 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800e036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e03c:	d012      	beq.n	800e064 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800e03e:	e023      	b.n	800e088 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e040:	4b13      	ldr	r3, [pc, #76]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e048:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e04c:	d107      	bne.n	800e05e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e04e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e052:	4618      	mov	r0, r3
 800e054:	f000 fbcc 	bl	800e7f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e05c:	e0fd      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e062:	e0fa      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e064:	4b0a      	ldr	r3, [pc, #40]	@ (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e06c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e070:	d107      	bne.n	800e082 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e072:	f107 0318 	add.w	r3, r7, #24
 800e076:	4618      	mov	r0, r3
 800e078:	f000 f912 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e07c:	6a3b      	ldr	r3, [r7, #32]
 800e07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e080:	e0eb      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e082:	2300      	movs	r3, #0
 800e084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e086:	e0e8      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e08c:	e0e5      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e08e:	bf00      	nop
 800e090:	58024400 	.word	0x58024400
 800e094:	03d09000 	.word	0x03d09000
 800e098:	003d0900 	.word	0x003d0900
 800e09c:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0a4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800e0a8:	430b      	orrs	r3, r1
 800e0aa:	f040 8085 	bne.w	800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e0ae:	4b6d      	ldr	r3, [pc, #436]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e0b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0b2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800e0b6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e0be:	d06b      	beq.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800e0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e0c6:	d874      	bhi.n	800e1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0ce:	d056      	beq.n	800e17e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800e0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0d6:	d86c      	bhi.n	800e1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e0de:	d03b      	beq.n	800e158 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e0e6:	d864      	bhi.n	800e1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e0ee:	d021      	beq.n	800e134 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e0f6:	d85c      	bhi.n	800e1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d004      	beq.n	800e108 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800e0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e100:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e104:	d004      	beq.n	800e110 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800e106:	e054      	b.n	800e1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e108:	f000 f8b4 	bl	800e274 <HAL_RCCEx_GetD3PCLK1Freq>
 800e10c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e10e:	e0a4      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e110:	4b54      	ldr	r3, [pc, #336]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e11c:	d107      	bne.n	800e12e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e11e:	f107 0318 	add.w	r3, r7, #24
 800e122:	4618      	mov	r0, r3
 800e124:	f000 f8bc 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e12c:	e095      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e12e:	2300      	movs	r3, #0
 800e130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e132:	e092      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e134:	4b4b      	ldr	r3, [pc, #300]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e13c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e140:	d107      	bne.n	800e152 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e142:	f107 030c 	add.w	r3, r7, #12
 800e146:	4618      	mov	r0, r3
 800e148:	f000 f9fe 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e150:	e083      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e152:	2300      	movs	r3, #0
 800e154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e156:	e080      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e158:	4b42      	ldr	r3, [pc, #264]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f003 0304 	and.w	r3, r3, #4
 800e160:	2b04      	cmp	r3, #4
 800e162:	d109      	bne.n	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e164:	4b3f      	ldr	r3, [pc, #252]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	08db      	lsrs	r3, r3, #3
 800e16a:	f003 0303 	and.w	r3, r3, #3
 800e16e:	4a3e      	ldr	r2, [pc, #248]	@ (800e268 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800e170:	fa22 f303 	lsr.w	r3, r2, r3
 800e174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e176:	e070      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e17c:	e06d      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e17e:	4b39      	ldr	r3, [pc, #228]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e18a:	d102      	bne.n	800e192 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800e18c:	4b37      	ldr	r3, [pc, #220]	@ (800e26c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e190:	e063      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e192:	2300      	movs	r3, #0
 800e194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e196:	e060      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e198:	4b32      	ldr	r3, [pc, #200]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e1a4:	d102      	bne.n	800e1ac <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800e1a6:	4b32      	ldr	r3, [pc, #200]	@ (800e270 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800e1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1aa:	e056      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1b0:	e053      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1b6:	e050      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e1b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1bc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800e1c0:	430b      	orrs	r3, r1
 800e1c2:	d148      	bne.n	800e256 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e1c4:	4b27      	ldr	r3, [pc, #156]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e1c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e1cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e1d4:	d02a      	beq.n	800e22c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800e1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e1dc:	d838      	bhi.n	800e250 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800e1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d004      	beq.n	800e1ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1ea:	d00d      	beq.n	800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800e1ec:	e030      	b.n	800e250 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e1ee:	4b1d      	ldr	r3, [pc, #116]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e1fa:	d102      	bne.n	800e202 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800e1fc:	4b1c      	ldr	r3, [pc, #112]	@ (800e270 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800e1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e200:	e02b      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e202:	2300      	movs	r3, #0
 800e204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e206:	e028      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e208:	4b16      	ldr	r3, [pc, #88]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e210:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e214:	d107      	bne.n	800e226 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e21a:	4618      	mov	r0, r3
 800e21c:	f000 fae8 	bl	800e7f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e224:	e019      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e226:	2300      	movs	r3, #0
 800e228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e22a:	e016      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e22c:	4b0d      	ldr	r3, [pc, #52]	@ (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e234:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e238:	d107      	bne.n	800e24a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e23a:	f107 0318 	add.w	r3, r7, #24
 800e23e:	4618      	mov	r0, r3
 800e240:	f000 f82e 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e248:	e007      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e24a:	2300      	movs	r3, #0
 800e24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e24e:	e004      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e250:	2300      	movs	r3, #0
 800e252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e254:	e001      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800e256:	2300      	movs	r3, #0
 800e258:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800e25a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3740      	adds	r7, #64	@ 0x40
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	58024400 	.word	0x58024400
 800e268:	03d09000 	.word	0x03d09000
 800e26c:	003d0900 	.word	0x003d0900
 800e270:	02dc6c00 	.word	0x02dc6c00

0800e274 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e278:	f7fe f912 	bl	800c4a0 <HAL_RCC_GetHCLKFreq>
 800e27c:	4602      	mov	r2, r0
 800e27e:	4b06      	ldr	r3, [pc, #24]	@ (800e298 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	091b      	lsrs	r3, r3, #4
 800e284:	f003 0307 	and.w	r3, r3, #7
 800e288:	4904      	ldr	r1, [pc, #16]	@ (800e29c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e28a:	5ccb      	ldrb	r3, [r1, r3]
 800e28c:	f003 031f 	and.w	r3, r3, #31
 800e290:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e294:	4618      	mov	r0, r3
 800e296:	bd80      	pop	{r7, pc}
 800e298:	58024400 	.word	0x58024400
 800e29c:	0801b2ac 	.word	0x0801b2ac

0800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b089      	sub	sp, #36	@ 0x24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e2a8:	4ba1      	ldr	r3, [pc, #644]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2ac:	f003 0303 	and.w	r3, r3, #3
 800e2b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e2b2:	4b9f      	ldr	r3, [pc, #636]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2b6:	0b1b      	lsrs	r3, r3, #12
 800e2b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e2be:	4b9c      	ldr	r3, [pc, #624]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c2:	091b      	lsrs	r3, r3, #4
 800e2c4:	f003 0301 	and.w	r3, r3, #1
 800e2c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e2ca:	4b99      	ldr	r3, [pc, #612]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e2cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2ce:	08db      	lsrs	r3, r3, #3
 800e2d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2d4:	693a      	ldr	r2, [r7, #16]
 800e2d6:	fb02 f303 	mul.w	r3, r2, r3
 800e2da:	ee07 3a90 	vmov	s15, r3
 800e2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f000 8111 	beq.w	800e510 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	f000 8083 	beq.w	800e3fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	2b02      	cmp	r3, #2
 800e2fa:	f200 80a1 	bhi.w	800e440 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e2fe:	69bb      	ldr	r3, [r7, #24]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d003      	beq.n	800e30c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	2b01      	cmp	r3, #1
 800e308:	d056      	beq.n	800e3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e30a:	e099      	b.n	800e440 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e30c:	4b88      	ldr	r3, [pc, #544]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f003 0320 	and.w	r3, r3, #32
 800e314:	2b00      	cmp	r3, #0
 800e316:	d02d      	beq.n	800e374 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e318:	4b85      	ldr	r3, [pc, #532]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	08db      	lsrs	r3, r3, #3
 800e31e:	f003 0303 	and.w	r3, r3, #3
 800e322:	4a84      	ldr	r2, [pc, #528]	@ (800e534 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e324:	fa22 f303 	lsr.w	r3, r2, r3
 800e328:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	ee07 3a90 	vmov	s15, r3
 800e330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	ee07 3a90 	vmov	s15, r3
 800e33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e342:	4b7b      	ldr	r3, [pc, #492]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e34a:	ee07 3a90 	vmov	s15, r3
 800e34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e352:	ed97 6a03 	vldr	s12, [r7, #12]
 800e356:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e538 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e36e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e372:	e087      	b.n	800e484 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	ee07 3a90 	vmov	s15, r3
 800e37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e37e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e53c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e386:	4b6a      	ldr	r3, [pc, #424]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e38e:	ee07 3a90 	vmov	s15, r3
 800e392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e396:	ed97 6a03 	vldr	s12, [r7, #12]
 800e39a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e538 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e3a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e3b6:	e065      	b.n	800e484 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	ee07 3a90 	vmov	s15, r3
 800e3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e540 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e3ca:	4b59      	ldr	r3, [pc, #356]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3d2:	ee07 3a90 	vmov	s15, r3
 800e3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e3da:	ed97 6a03 	vldr	s12, [r7, #12]
 800e3de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e538 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e3ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e3fa:	e043      	b.n	800e484 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	ee07 3a90 	vmov	s15, r3
 800e402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e406:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e544 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e40e:	4b48      	ldr	r3, [pc, #288]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e416:	ee07 3a90 	vmov	s15, r3
 800e41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e41e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e422:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e538 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e42e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e43a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e43e:	e021      	b.n	800e484 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	ee07 3a90 	vmov	s15, r3
 800e446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e44a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e540 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e452:	4b37      	ldr	r3, [pc, #220]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e45a:	ee07 3a90 	vmov	s15, r3
 800e45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e462:	ed97 6a03 	vldr	s12, [r7, #12]
 800e466:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e538 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e47e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e482:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e484:	4b2a      	ldr	r3, [pc, #168]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e488:	0a5b      	lsrs	r3, r3, #9
 800e48a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e48e:	ee07 3a90 	vmov	s15, r3
 800e492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e49a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e49e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e4a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4aa:	ee17 2a90 	vmov	r2, s15
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e4b2:	4b1f      	ldr	r3, [pc, #124]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4b6:	0c1b      	lsrs	r3, r3, #16
 800e4b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4bc:	ee07 3a90 	vmov	s15, r3
 800e4c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e4c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e4cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800e4d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4d8:	ee17 2a90 	vmov	r2, s15
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e4e0:	4b13      	ldr	r3, [pc, #76]	@ (800e530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4e4:	0e1b      	lsrs	r3, r3, #24
 800e4e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4ea:	ee07 3a90 	vmov	s15, r3
 800e4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e4f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e4fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800e4fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e506:	ee17 2a90 	vmov	r2, s15
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e50e:	e008      	b.n	800e522 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2200      	movs	r2, #0
 800e51a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	609a      	str	r2, [r3, #8]
}
 800e522:	bf00      	nop
 800e524:	3724      	adds	r7, #36	@ 0x24
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	58024400 	.word	0x58024400
 800e534:	03d09000 	.word	0x03d09000
 800e538:	46000000 	.word	0x46000000
 800e53c:	4c742400 	.word	0x4c742400
 800e540:	4a742400 	.word	0x4a742400
 800e544:	4c371b00 	.word	0x4c371b00

0800e548 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e548:	b480      	push	{r7}
 800e54a:	b089      	sub	sp, #36	@ 0x24
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e550:	4ba1      	ldr	r3, [pc, #644]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e554:	f003 0303 	and.w	r3, r3, #3
 800e558:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e55a:	4b9f      	ldr	r3, [pc, #636]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e55e:	0d1b      	lsrs	r3, r3, #20
 800e560:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e564:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e566:	4b9c      	ldr	r3, [pc, #624]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e56a:	0a1b      	lsrs	r3, r3, #8
 800e56c:	f003 0301 	and.w	r3, r3, #1
 800e570:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e572:	4b99      	ldr	r3, [pc, #612]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e576:	08db      	lsrs	r3, r3, #3
 800e578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	fb02 f303 	mul.w	r3, r2, r3
 800e582:	ee07 3a90 	vmov	s15, r3
 800e586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e58a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	2b00      	cmp	r3, #0
 800e592:	f000 8111 	beq.w	800e7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	2b02      	cmp	r3, #2
 800e59a:	f000 8083 	beq.w	800e6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	f200 80a1 	bhi.w	800e6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d003      	beq.n	800e5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d056      	beq.n	800e660 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e5b2:	e099      	b.n	800e6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5b4:	4b88      	ldr	r3, [pc, #544]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f003 0320 	and.w	r3, r3, #32
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d02d      	beq.n	800e61c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5c0:	4b85      	ldr	r3, [pc, #532]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	08db      	lsrs	r3, r3, #3
 800e5c6:	f003 0303 	and.w	r3, r3, #3
 800e5ca:	4a84      	ldr	r2, [pc, #528]	@ (800e7dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e5cc:	fa22 f303 	lsr.w	r3, r2, r3
 800e5d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	ee07 3a90 	vmov	s15, r3
 800e5d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	ee07 3a90 	vmov	s15, r3
 800e5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5ea:	4b7b      	ldr	r3, [pc, #492]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5f2:	ee07 3a90 	vmov	s15, r3
 800e5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e60a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e616:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e61a:	e087      	b.n	800e72c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	ee07 3a90 	vmov	s15, r3
 800e622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e626:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e62e:	4b6a      	ldr	r3, [pc, #424]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e636:	ee07 3a90 	vmov	s15, r3
 800e63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e63e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e642:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e64e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e65a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e65e:	e065      	b.n	800e72c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	ee07 3a90 	vmov	s15, r3
 800e666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e66a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e672:	4b59      	ldr	r3, [pc, #356]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e67a:	ee07 3a90 	vmov	s15, r3
 800e67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e682:	ed97 6a03 	vldr	s12, [r7, #12]
 800e686:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e69e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6a2:	e043      	b.n	800e72c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	ee07 3a90 	vmov	s15, r3
 800e6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e7ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6b6:	4b48      	ldr	r3, [pc, #288]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6be:	ee07 3a90 	vmov	s15, r3
 800e6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6e6:	e021      	b.n	800e72c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	ee07 3a90 	vmov	s15, r3
 800e6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6fa:	4b37      	ldr	r3, [pc, #220]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e702:	ee07 3a90 	vmov	s15, r3
 800e706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e70a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e70e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e71a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e72a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e72c:	4b2a      	ldr	r3, [pc, #168]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e72e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e730:	0a5b      	lsrs	r3, r3, #9
 800e732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e736:	ee07 3a90 	vmov	s15, r3
 800e73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e73e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e742:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e746:	edd7 6a07 	vldr	s13, [r7, #28]
 800e74a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e74e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e752:	ee17 2a90 	vmov	r2, s15
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e75a:	4b1f      	ldr	r3, [pc, #124]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e75c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e75e:	0c1b      	lsrs	r3, r3, #16
 800e760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e764:	ee07 3a90 	vmov	s15, r3
 800e768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e76c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e770:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e774:	edd7 6a07 	vldr	s13, [r7, #28]
 800e778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e77c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e780:	ee17 2a90 	vmov	r2, s15
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e788:	4b13      	ldr	r3, [pc, #76]	@ (800e7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e78a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e78c:	0e1b      	lsrs	r3, r3, #24
 800e78e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e792:	ee07 3a90 	vmov	s15, r3
 800e796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e79a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e79e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e7a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7ae:	ee17 2a90 	vmov	r2, s15
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e7b6:	e008      	b.n	800e7ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	609a      	str	r2, [r3, #8]
}
 800e7ca:	bf00      	nop
 800e7cc:	3724      	adds	r7, #36	@ 0x24
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr
 800e7d6:	bf00      	nop
 800e7d8:	58024400 	.word	0x58024400
 800e7dc:	03d09000 	.word	0x03d09000
 800e7e0:	46000000 	.word	0x46000000
 800e7e4:	4c742400 	.word	0x4c742400
 800e7e8:	4a742400 	.word	0x4a742400
 800e7ec:	4c371b00 	.word	0x4c371b00

0800e7f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b089      	sub	sp, #36	@ 0x24
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e7f8:	4ba0      	ldr	r3, [pc, #640]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7fc:	f003 0303 	and.w	r3, r3, #3
 800e800:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e802:	4b9e      	ldr	r3, [pc, #632]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e806:	091b      	lsrs	r3, r3, #4
 800e808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e80c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e80e:	4b9b      	ldr	r3, [pc, #620]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e812:	f003 0301 	and.w	r3, r3, #1
 800e816:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e818:	4b98      	ldr	r3, [pc, #608]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e81a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e81c:	08db      	lsrs	r3, r3, #3
 800e81e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e822:	693a      	ldr	r2, [r7, #16]
 800e824:	fb02 f303 	mul.w	r3, r2, r3
 800e828:	ee07 3a90 	vmov	s15, r3
 800e82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e830:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	2b00      	cmp	r3, #0
 800e838:	f000 8111 	beq.w	800ea5e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	2b02      	cmp	r3, #2
 800e840:	f000 8083 	beq.w	800e94a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	2b02      	cmp	r3, #2
 800e848:	f200 80a1 	bhi.w	800e98e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d003      	beq.n	800e85a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d056      	beq.n	800e906 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e858:	e099      	b.n	800e98e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e85a:	4b88      	ldr	r3, [pc, #544]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f003 0320 	and.w	r3, r3, #32
 800e862:	2b00      	cmp	r3, #0
 800e864:	d02d      	beq.n	800e8c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e866:	4b85      	ldr	r3, [pc, #532]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	08db      	lsrs	r3, r3, #3
 800e86c:	f003 0303 	and.w	r3, r3, #3
 800e870:	4a83      	ldr	r2, [pc, #524]	@ (800ea80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e872:	fa22 f303 	lsr.w	r3, r2, r3
 800e876:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	ee07 3a90 	vmov	s15, r3
 800e87e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	ee07 3a90 	vmov	s15, r3
 800e888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e88c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e890:	4b7a      	ldr	r3, [pc, #488]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e898:	ee07 3a90 	vmov	s15, r3
 800e89c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8a4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ea84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e8a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e8b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e8c0:	e087      	b.n	800e9d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	ee07 3a90 	vmov	s15, r3
 800e8c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8cc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ea88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e8d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8d4:	4b69      	ldr	r3, [pc, #420]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8dc:	ee07 3a90 	vmov	s15, r3
 800e8e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8e8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ea84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e8ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e8f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e904:	e065      	b.n	800e9d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	ee07 3a90 	vmov	s15, r3
 800e90c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e910:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ea8c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e918:	4b58      	ldr	r3, [pc, #352]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e920:	ee07 3a90 	vmov	s15, r3
 800e924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e928:	ed97 6a03 	vldr	s12, [r7, #12]
 800e92c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ea84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e93c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e940:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e944:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e948:	e043      	b.n	800e9d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	ee07 3a90 	vmov	s15, r3
 800e950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e954:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ea90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e95c:	4b47      	ldr	r3, [pc, #284]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e964:	ee07 3a90 	vmov	s15, r3
 800e968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e96c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e970:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ea84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e974:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e97c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e984:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e988:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e98c:	e021      	b.n	800e9d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	ee07 3a90 	vmov	s15, r3
 800e994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e998:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ea88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e99c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9a0:	4b36      	ldr	r3, [pc, #216]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9a8:	ee07 3a90 	vmov	s15, r3
 800e9ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9b4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ea84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e9b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e9d2:	4b2a      	ldr	r3, [pc, #168]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9d6:	0a5b      	lsrs	r3, r3, #9
 800e9d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9dc:	ee07 3a90 	vmov	s15, r3
 800e9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e9e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e9ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9f8:	ee17 2a90 	vmov	r2, s15
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ea00:	4b1e      	ldr	r3, [pc, #120]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea04:	0c1b      	lsrs	r3, r3, #16
 800ea06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea0a:	ee07 3a90 	vmov	s15, r3
 800ea0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea26:	ee17 2a90 	vmov	r2, s15
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ea2e:	4b13      	ldr	r3, [pc, #76]	@ (800ea7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea32:	0e1b      	lsrs	r3, r3, #24
 800ea34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea38:	ee07 3a90 	vmov	s15, r3
 800ea3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea54:	ee17 2a90 	vmov	r2, s15
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ea5c:	e008      	b.n	800ea70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	609a      	str	r2, [r3, #8]
}
 800ea70:	bf00      	nop
 800ea72:	3724      	adds	r7, #36	@ 0x24
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr
 800ea7c:	58024400 	.word	0x58024400
 800ea80:	03d09000 	.word	0x03d09000
 800ea84:	46000000 	.word	0x46000000
 800ea88:	4c742400 	.word	0x4c742400
 800ea8c:	4a742400 	.word	0x4a742400
 800ea90:	4c371b00 	.word	0x4c371b00

0800ea94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eaa2:	4b53      	ldr	r3, [pc, #332]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eaa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaa6:	f003 0303 	and.w	r3, r3, #3
 800eaaa:	2b03      	cmp	r3, #3
 800eaac:	d101      	bne.n	800eab2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800eaae:	2301      	movs	r3, #1
 800eab0:	e099      	b.n	800ebe6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800eab2:	4b4f      	ldr	r3, [pc, #316]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a4e      	ldr	r2, [pc, #312]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eab8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eabc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eabe:	f7f8 fb3f 	bl	8007140 <HAL_GetTick>
 800eac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eac4:	e008      	b.n	800ead8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eac6:	f7f8 fb3b 	bl	8007140 <HAL_GetTick>
 800eaca:	4602      	mov	r2, r0
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	2b02      	cmp	r3, #2
 800ead2:	d901      	bls.n	800ead8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ead4:	2303      	movs	r3, #3
 800ead6:	e086      	b.n	800ebe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ead8:	4b45      	ldr	r3, [pc, #276]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1f0      	bne.n	800eac6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800eae4:	4b42      	ldr	r3, [pc, #264]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eae8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	031b      	lsls	r3, r3, #12
 800eaf2:	493f      	ldr	r1, [pc, #252]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	628b      	str	r3, [r1, #40]	@ 0x28
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	3b01      	subs	r3, #1
 800eb08:	025b      	lsls	r3, r3, #9
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	431a      	orrs	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	3b01      	subs	r3, #1
 800eb14:	041b      	lsls	r3, r3, #16
 800eb16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800eb1a:	431a      	orrs	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	691b      	ldr	r3, [r3, #16]
 800eb20:	3b01      	subs	r3, #1
 800eb22:	061b      	lsls	r3, r3, #24
 800eb24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800eb28:	4931      	ldr	r1, [pc, #196]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800eb2e:	4b30      	ldr	r3, [pc, #192]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	492d      	ldr	r1, [pc, #180]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800eb40:	4b2b      	ldr	r3, [pc, #172]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb44:	f023 0220 	bic.w	r2, r3, #32
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	699b      	ldr	r3, [r3, #24]
 800eb4c:	4928      	ldr	r1, [pc, #160]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800eb52:	4b27      	ldr	r3, [pc, #156]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb56:	4a26      	ldr	r2, [pc, #152]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb58:	f023 0310 	bic.w	r3, r3, #16
 800eb5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800eb5e:	4b24      	ldr	r3, [pc, #144]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb62:	4b24      	ldr	r3, [pc, #144]	@ (800ebf4 <RCCEx_PLL2_Config+0x160>)
 800eb64:	4013      	ands	r3, r2
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	69d2      	ldr	r2, [r2, #28]
 800eb6a:	00d2      	lsls	r2, r2, #3
 800eb6c:	4920      	ldr	r1, [pc, #128]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800eb72:	4b1f      	ldr	r3, [pc, #124]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb76:	4a1e      	ldr	r2, [pc, #120]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb78:	f043 0310 	orr.w	r3, r3, #16
 800eb7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d106      	bne.n	800eb92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800eb84:	4b1a      	ldr	r3, [pc, #104]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb88:	4a19      	ldr	r2, [pc, #100]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800eb90:	e00f      	b.n	800ebb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d106      	bne.n	800eba6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800eb98:	4b15      	ldr	r3, [pc, #84]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9c:	4a14      	ldr	r2, [pc, #80]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eb9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eba2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800eba4:	e005      	b.n	800ebb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800eba6:	4b12      	ldr	r3, [pc, #72]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800eba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebaa:	4a11      	ldr	r2, [pc, #68]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800ebac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ebb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ebb2:	4b0f      	ldr	r3, [pc, #60]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4a0e      	ldr	r2, [pc, #56]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800ebb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ebbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ebbe:	f7f8 fabf 	bl	8007140 <HAL_GetTick>
 800ebc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ebc4:	e008      	b.n	800ebd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ebc6:	f7f8 fabb 	bl	8007140 <HAL_GetTick>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	2b02      	cmp	r3, #2
 800ebd2:	d901      	bls.n	800ebd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ebd4:	2303      	movs	r3, #3
 800ebd6:	e006      	b.n	800ebe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ebd8:	4b05      	ldr	r3, [pc, #20]	@ (800ebf0 <RCCEx_PLL2_Config+0x15c>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d0f0      	beq.n	800ebc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ebe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	58024400 	.word	0x58024400
 800ebf4:	ffff0007 	.word	0xffff0007

0800ebf8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec02:	2300      	movs	r3, #0
 800ec04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ec06:	4b53      	ldr	r3, [pc, #332]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ec08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec0a:	f003 0303 	and.w	r3, r3, #3
 800ec0e:	2b03      	cmp	r3, #3
 800ec10:	d101      	bne.n	800ec16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ec12:	2301      	movs	r3, #1
 800ec14:	e099      	b.n	800ed4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ec16:	4b4f      	ldr	r3, [pc, #316]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4a4e      	ldr	r2, [pc, #312]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ec1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec22:	f7f8 fa8d 	bl	8007140 <HAL_GetTick>
 800ec26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ec28:	e008      	b.n	800ec3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ec2a:	f7f8 fa89 	bl	8007140 <HAL_GetTick>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	2b02      	cmp	r3, #2
 800ec36:	d901      	bls.n	800ec3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ec38:	2303      	movs	r3, #3
 800ec3a:	e086      	b.n	800ed4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ec3c:	4b45      	ldr	r3, [pc, #276]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1f0      	bne.n	800ec2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ec48:	4b42      	ldr	r3, [pc, #264]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ec4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec4c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	051b      	lsls	r3, r3, #20
 800ec56:	493f      	ldr	r1, [pc, #252]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	628b      	str	r3, [r1, #40]	@ 0x28
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	3b01      	subs	r3, #1
 800ec62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	025b      	lsls	r3, r3, #9
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	431a      	orrs	r2, r3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	3b01      	subs	r3, #1
 800ec78:	041b      	lsls	r3, r3, #16
 800ec7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ec7e:	431a      	orrs	r2, r3
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	691b      	ldr	r3, [r3, #16]
 800ec84:	3b01      	subs	r3, #1
 800ec86:	061b      	lsls	r3, r3, #24
 800ec88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ec8c:	4931      	ldr	r1, [pc, #196]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ec92:	4b30      	ldr	r3, [pc, #192]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ec94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	695b      	ldr	r3, [r3, #20]
 800ec9e:	492d      	ldr	r1, [pc, #180]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800eca0:	4313      	orrs	r3, r2
 800eca2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800eca4:	4b2b      	ldr	r3, [pc, #172]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800eca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eca8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	4928      	ldr	r1, [pc, #160]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ecb6:	4b27      	ldr	r3, [pc, #156]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ecb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecba:	4a26      	ldr	r2, [pc, #152]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ecbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ecc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ecc2:	4b24      	ldr	r3, [pc, #144]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ecc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ecc6:	4b24      	ldr	r3, [pc, #144]	@ (800ed58 <RCCEx_PLL3_Config+0x160>)
 800ecc8:	4013      	ands	r3, r2
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	69d2      	ldr	r2, [r2, #28]
 800ecce:	00d2      	lsls	r2, r2, #3
 800ecd0:	4920      	ldr	r1, [pc, #128]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ecd6:	4b1f      	ldr	r3, [pc, #124]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ecd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecda:	4a1e      	ldr	r2, [pc, #120]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ecdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ece0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d106      	bne.n	800ecf6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ece8:	4b1a      	ldr	r3, [pc, #104]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ecea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecec:	4a19      	ldr	r2, [pc, #100]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ecee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ecf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ecf4:	e00f      	b.n	800ed16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d106      	bne.n	800ed0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ecfc:	4b15      	ldr	r3, [pc, #84]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ecfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed00:	4a14      	ldr	r2, [pc, #80]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ed02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ed06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ed08:	e005      	b.n	800ed16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ed0a:	4b12      	ldr	r3, [pc, #72]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ed0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed0e:	4a11      	ldr	r2, [pc, #68]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ed10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ed14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ed16:	4b0f      	ldr	r3, [pc, #60]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4a0e      	ldr	r2, [pc, #56]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ed1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed22:	f7f8 fa0d 	bl	8007140 <HAL_GetTick>
 800ed26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ed28:	e008      	b.n	800ed3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ed2a:	f7f8 fa09 	bl	8007140 <HAL_GetTick>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d901      	bls.n	800ed3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ed38:	2303      	movs	r3, #3
 800ed3a:	e006      	b.n	800ed4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ed3c:	4b05      	ldr	r3, [pc, #20]	@ (800ed54 <RCCEx_PLL3_Config+0x15c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d0f0      	beq.n	800ed2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ed48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	58024400 	.word	0x58024400
 800ed58:	ffff0007 	.word	0xffff0007

0800ed5c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b08a      	sub	sp, #40	@ 0x28
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d101      	bne.n	800ed6e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e075      	b.n	800ee5a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d105      	bne.n	800ed86 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7f7 f88f 	bl	8005ea4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2204      	movs	r2, #4
 800ed8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f868 	bl	800ee64 <HAL_SD_InitCard>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d001      	beq.n	800ed9e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e05d      	b.n	800ee5a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ed9e:	f107 0308 	add.w	r3, r7, #8
 800eda2:	4619      	mov	r1, r3
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f000 fdb5 	bl	800f914 <HAL_SD_GetCardStatus>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800edb0:	2301      	movs	r3, #1
 800edb2:	e052      	b.n	800ee5a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800edb4:	7e3b      	ldrb	r3, [r7, #24]
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800edba:	7e7b      	ldrb	r3, [r7, #25]
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d10a      	bne.n	800edde <HAL_SD_Init+0x82>
 800edc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <HAL_SD_Init+0x78>
 800edce:	6a3b      	ldr	r3, [r7, #32]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d004      	beq.n	800edde <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edda:	659a      	str	r2, [r3, #88]	@ 0x58
 800eddc:	e00b      	b.n	800edf6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d104      	bne.n	800edf0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800edec:	659a      	str	r2, [r3, #88]	@ 0x58
 800edee:	e002      	b.n	800edf6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	4619      	mov	r1, r3
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 fe73 	bl	800fae8 <HAL_SD_ConfigWideBusOperation>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d001      	beq.n	800ee0c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	e026      	b.n	800ee5a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800ee0c:	f7f8 f998 	bl	8007140 <HAL_GetTick>
 800ee10:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ee12:	e011      	b.n	800ee38 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ee14:	f7f8 f994 	bl	8007140 <HAL_GetTick>
 800ee18:	4602      	mov	r2, r0
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	1ad3      	subs	r3, r2, r3
 800ee1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee22:	d109      	bne.n	800ee38 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ee2a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800ee34:	2303      	movs	r3, #3
 800ee36:	e010      	b.n	800ee5a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 ff67 	bl	800fd0c <HAL_SD_GetCardState>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b04      	cmp	r3, #4
 800ee42:	d1e7      	bne.n	800ee14 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800ee58:	2300      	movs	r3, #0
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3728      	adds	r7, #40	@ 0x28
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
	...

0800ee64 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ee64:	b590      	push	{r4, r7, lr}
 800ee66:	b08d      	sub	sp, #52	@ 0x34
 800ee68:	af02      	add	r7, sp, #8
 800ee6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ee70:	2300      	movs	r3, #0
 800ee72:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ee74:	2300      	movs	r3, #0
 800ee76:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ee7c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800ee80:	f04f 0100 	mov.w	r1, #0
 800ee84:	f7fe fd24 	bl	800d8d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ee88:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800ee8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d109      	bne.n	800eea4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ee9e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800eea0:	2301      	movs	r3, #1
 800eea2:	e070      	b.n	800ef86 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800eea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eea6:	0a1b      	lsrs	r3, r3, #8
 800eea8:	4a39      	ldr	r2, [pc, #228]	@ (800ef90 <HAL_SD_InitCard+0x12c>)
 800eeaa:	fba2 2303 	umull	r2, r3, r2, r3
 800eeae:	091b      	lsrs	r3, r3, #4
 800eeb0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681c      	ldr	r4, [r3, #0]
 800eeb6:	466a      	mov	r2, sp
 800eeb8:	f107 0318 	add.w	r3, r7, #24
 800eebc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eec0:	e882 0003 	stmia.w	r2, {r0, r1}
 800eec4:	f107 030c 	add.w	r3, r7, #12
 800eec8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eeca:	4620      	mov	r0, r4
 800eecc:	f006 fe12 	bl	8015af4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f006 fe55 	bl	8015b84 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d005      	beq.n	800eeec <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	005b      	lsls	r3, r3, #1
 800eee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eee6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eeea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800eeec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d007      	beq.n	800ef02 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800eef2:	4a28      	ldr	r2, [pc, #160]	@ (800ef94 <HAL_SD_InitCard+0x130>)
 800eef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eefa:	3301      	adds	r3, #1
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7f8 f92b 	bl	8007158 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 fff0 	bl	800fee8 <SD_PowerON>
 800ef08:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef0a:	6a3b      	ldr	r3, [r7, #32]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00b      	beq.n	800ef28 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2201      	movs	r2, #1
 800ef14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef1c:	6a3b      	ldr	r3, [r7, #32]
 800ef1e:	431a      	orrs	r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ef24:	2301      	movs	r3, #1
 800ef26:	e02e      	b.n	800ef86 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 ff0f 	bl	800fd4c <SD_InitCard>
 800ef2e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef30:	6a3b      	ldr	r3, [r7, #32]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d00b      	beq.n	800ef4e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef42:	6a3b      	ldr	r3, [r7, #32]
 800ef44:	431a      	orrs	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e01b      	b.n	800ef86 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ef56:	4618      	mov	r0, r3
 800ef58:	f006 feaa 	bl	8015cb0 <SDMMC_CmdBlockLength>
 800ef5c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef5e:	6a3b      	ldr	r3, [r7, #32]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00f      	beq.n	800ef84 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a0b      	ldr	r2, [pc, #44]	@ (800ef98 <HAL_SD_InitCard+0x134>)
 800ef6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef70:	6a3b      	ldr	r3, [r7, #32]
 800ef72:	431a      	orrs	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800ef80:	2301      	movs	r3, #1
 800ef82:	e000      	b.n	800ef86 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800ef84:	2300      	movs	r3, #0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	372c      	adds	r7, #44	@ 0x2c
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd90      	pop	{r4, r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	014f8b59 	.word	0x014f8b59
 800ef94:	00012110 	.word	0x00012110
 800ef98:	1fe00fff 	.word	0x1fe00fff

0800ef9c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b092      	sub	sp, #72	@ 0x48
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
 800efa8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800efaa:	f7f8 f8c9 	bl	8007140 <HAL_GetTick>
 800efae:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d107      	bne.n	800efce <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	e167      	b.n	800f29e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	f040 815a 	bne.w	800f290 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800efe2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	441a      	add	r2, r3
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efec:	429a      	cmp	r2, r3
 800efee:	d907      	bls.n	800f000 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eff4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800effc:	2301      	movs	r3, #1
 800effe:	e14e      	b.n	800f29e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2203      	movs	r2, #3
 800f004:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	2200      	movs	r2, #0
 800f00e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f014:	2b01      	cmp	r3, #1
 800f016:	d002      	beq.n	800f01e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800f018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f01a:	025b      	lsls	r3, r3, #9
 800f01c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f01e:	f04f 33ff 	mov.w	r3, #4294967295
 800f022:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	025b      	lsls	r3, r3, #9
 800f028:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f02a:	2390      	movs	r3, #144	@ 0x90
 800f02c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f02e:	2302      	movs	r3, #2
 800f030:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f032:	2300      	movs	r3, #0
 800f034:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800f036:	2300      	movs	r3, #0
 800f038:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f107 0214 	add.w	r2, r7, #20
 800f042:	4611      	mov	r1, r2
 800f044:	4618      	mov	r0, r3
 800f046:	f006 fe07 	bl	8015c58 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	68da      	ldr	r2, [r3, #12]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f058:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d90a      	bls.n	800f076 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2202      	movs	r2, #2
 800f064:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f06c:	4618      	mov	r0, r3
 800f06e:	f006 fe65 	bl	8015d3c <SDMMC_CmdReadMultiBlock>
 800f072:	6478      	str	r0, [r7, #68]	@ 0x44
 800f074:	e009      	b.n	800f08a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2201      	movs	r2, #1
 800f07a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f082:	4618      	mov	r0, r3
 800f084:	f006 fe37 	bl	8015cf6 <SDMMC_CmdReadSingleBlock>
 800f088:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800f08a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d012      	beq.n	800f0b6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a84      	ldr	r2, [pc, #528]	@ (800f2a8 <HAL_SD_ReadBlocks+0x30c>)
 800f096:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f09c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f09e:	431a      	orrs	r2, r3
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e0f3      	b.n	800f29e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800f0b6:	69bb      	ldr	r3, [r7, #24]
 800f0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f0ba:	e058      	b.n	800f16e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d033      	beq.n	800f132 <HAL_SD_ReadBlocks+0x196>
 800f0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0cc:	2b1f      	cmp	r3, #31
 800f0ce:	d930      	bls.n	800f132 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f0d4:	e027      	b.n	800f126 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f006 fd34 	bl	8015b48 <SDMMC_ReadFIFO>
 800f0e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800f0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e4:	b2da      	uxtb	r2, r3
 800f0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800f0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f2:	0a1b      	lsrs	r3, r3, #8
 800f0f4:	b2da      	uxtb	r2, r3
 800f0f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800f100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f102:	0c1b      	lsrs	r3, r3, #16
 800f104:	b2da      	uxtb	r2, r3
 800f106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f108:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f10a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f10c:	3301      	adds	r3, #1
 800f10e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800f110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f112:	0e1b      	lsrs	r3, r3, #24
 800f114:	b2da      	uxtb	r2, r3
 800f116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f118:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f11a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f11c:	3301      	adds	r3, #1
 800f11e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800f120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f122:	3301      	adds	r3, #1
 800f124:	643b      	str	r3, [r7, #64]	@ 0x40
 800f126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f128:	2b07      	cmp	r3, #7
 800f12a:	d9d4      	bls.n	800f0d6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800f12c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f12e:	3b20      	subs	r3, #32
 800f130:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800f132:	f7f8 f805 	bl	8007140 <HAL_GetTick>
 800f136:	4602      	mov	r2, r0
 800f138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f13a:	1ad3      	subs	r3, r2, r3
 800f13c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f13e:	429a      	cmp	r2, r3
 800f140:	d902      	bls.n	800f148 <HAL_SD_ReadBlocks+0x1ac>
 800f142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f144:	2b00      	cmp	r3, #0
 800f146:	d112      	bne.n	800f16e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4a56      	ldr	r2, [pc, #344]	@ (800f2a8 <HAL_SD_ReadBlocks+0x30c>)
 800f14e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f154:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2201      	movs	r2, #1
 800f160:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2200      	movs	r2, #0
 800f168:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800f16a:	2303      	movs	r3, #3
 800f16c:	e097      	b.n	800f29e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f174:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d09f      	beq.n	800f0bc <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	68da      	ldr	r2, [r3, #12]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f18a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f196:	2b00      	cmp	r3, #0
 800f198:	d022      	beq.n	800f1e0 <HAL_SD_ReadBlocks+0x244>
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d91f      	bls.n	800f1e0 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1a4:	2b03      	cmp	r3, #3
 800f1a6:	d01b      	beq.n	800f1e0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f006 fe2f 	bl	8015e10 <SDMMC_CmdStopTransfer>
 800f1b2:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800f1b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d012      	beq.n	800f1e0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4a3a      	ldr	r2, [pc, #232]	@ (800f2a8 <HAL_SD_ReadBlocks+0x30c>)
 800f1c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f1c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1c8:	431a      	orrs	r2, r3
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	e05e      	b.n	800f29e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1e6:	f003 0308 	and.w	r3, r3, #8
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d012      	beq.n	800f214 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	4a2d      	ldr	r2, [pc, #180]	@ (800f2a8 <HAL_SD_ReadBlocks+0x30c>)
 800f1f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1fa:	f043 0208 	orr.w	r2, r3, #8
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	2201      	movs	r2, #1
 800f206:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2200      	movs	r2, #0
 800f20e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f210:	2301      	movs	r3, #1
 800f212:	e044      	b.n	800f29e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f21a:	f003 0302 	and.w	r3, r3, #2
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d012      	beq.n	800f248 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a20      	ldr	r2, [pc, #128]	@ (800f2a8 <HAL_SD_ReadBlocks+0x30c>)
 800f228:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f22e:	f043 0202 	orr.w	r2, r3, #2
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2201      	movs	r2, #1
 800f23a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2200      	movs	r2, #0
 800f242:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f244:	2301      	movs	r3, #1
 800f246:	e02a      	b.n	800f29e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f24e:	f003 0320 	and.w	r3, r3, #32
 800f252:	2b00      	cmp	r3, #0
 800f254:	d012      	beq.n	800f27c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a13      	ldr	r2, [pc, #76]	@ (800f2a8 <HAL_SD_ReadBlocks+0x30c>)
 800f25c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f262:	f043 0220 	orr.w	r2, r3, #32
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2201      	movs	r2, #1
 800f26e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	2200      	movs	r2, #0
 800f276:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f278:	2301      	movs	r3, #1
 800f27a:	e010      	b.n	800f29e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a0a      	ldr	r2, [pc, #40]	@ (800f2ac <HAL_SD_ReadBlocks+0x310>)
 800f282:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2201      	movs	r2, #1
 800f288:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800f28c:	2300      	movs	r3, #0
 800f28e:	e006      	b.n	800f29e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f294:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
  }
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3748      	adds	r7, #72	@ 0x48
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	1fe00fff 	.word	0x1fe00fff
 800f2ac:	18000f3a 	.word	0x18000f3a

0800f2b0 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b092      	sub	sp, #72	@ 0x48
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	60f8      	str	r0, [r7, #12]
 800f2b8:	60b9      	str	r1, [r7, #8]
 800f2ba:	607a      	str	r2, [r7, #4]
 800f2bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f2be:	f7f7 ff3f 	bl	8007140 <HAL_GetTick>
 800f2c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d107      	bne.n	800f2e2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e16b      	b.n	800f5ba <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	f040 815e 	bne.w	800f5ac <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f2f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	441a      	add	r2, r3
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f300:	429a      	cmp	r2, r3
 800f302:	d907      	bls.n	800f314 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f308:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f310:	2301      	movs	r3, #1
 800f312:	e152      	b.n	800f5ba <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2203      	movs	r2, #3
 800f318:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	2200      	movs	r2, #0
 800f322:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d002      	beq.n	800f332 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800f32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32e:	025b      	lsls	r3, r3, #9
 800f330:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f332:	f04f 33ff 	mov.w	r3, #4294967295
 800f336:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	025b      	lsls	r3, r3, #9
 800f33c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f33e:	2390      	movs	r3, #144	@ 0x90
 800f340:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f342:	2300      	movs	r3, #0
 800f344:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f346:	2300      	movs	r3, #0
 800f348:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800f34a:	2300      	movs	r3, #0
 800f34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f107 0218 	add.w	r2, r7, #24
 800f356:	4611      	mov	r1, r2
 800f358:	4618      	mov	r0, r3
 800f35a:	f006 fc7d 	bl	8015c58 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	68da      	ldr	r2, [r3, #12]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f36c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d90a      	bls.n	800f38a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2220      	movs	r2, #32
 800f378:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f380:	4618      	mov	r0, r3
 800f382:	f006 fd21 	bl	8015dc8 <SDMMC_CmdWriteMultiBlock>
 800f386:	6478      	str	r0, [r7, #68]	@ 0x44
 800f388:	e009      	b.n	800f39e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2210      	movs	r2, #16
 800f38e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f396:	4618      	mov	r0, r3
 800f398:	f006 fcf3 	bl	8015d82 <SDMMC_CmdWriteSingleBlock>
 800f39c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800f39e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d012      	beq.n	800f3ca <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4a86      	ldr	r2, [pc, #536]	@ (800f5c4 <HAL_SD_WriteBlocks+0x314>)
 800f3aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f3b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3b2:	431a      	orrs	r2, r3
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	e0f7      	b.n	800f5ba <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800f3ce:	e05c      	b.n	800f48a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d037      	beq.n	800f44e <HAL_SD_WriteBlocks+0x19e>
 800f3de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3e0:	2b1f      	cmp	r3, #31
 800f3e2:	d934      	bls.n	800f44e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f3e8:	e02b      	b.n	800f442 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800f3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800f3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800f3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	021a      	lsls	r2, r3, #8
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	4313      	orrs	r3, r2
 800f400:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800f402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f404:	3301      	adds	r3, #1
 800f406:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800f408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	041a      	lsls	r2, r3, #16
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	4313      	orrs	r3, r2
 800f412:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800f414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f416:	3301      	adds	r3, #1
 800f418:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800f41a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	061a      	lsls	r2, r3, #24
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	4313      	orrs	r3, r2
 800f424:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800f426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f428:	3301      	adds	r3, #1
 800f42a:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f107 0214 	add.w	r2, r7, #20
 800f434:	4611      	mov	r1, r2
 800f436:	4618      	mov	r0, r3
 800f438:	f006 fb93 	bl	8015b62 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800f43c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f43e:	3301      	adds	r3, #1
 800f440:	643b      	str	r3, [r7, #64]	@ 0x40
 800f442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f444:	2b07      	cmp	r3, #7
 800f446:	d9d0      	bls.n	800f3ea <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800f448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f44a:	3b20      	subs	r3, #32
 800f44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800f44e:	f7f7 fe77 	bl	8007140 <HAL_GetTick>
 800f452:	4602      	mov	r2, r0
 800f454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f456:	1ad3      	subs	r3, r2, r3
 800f458:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d902      	bls.n	800f464 <HAL_SD_WriteBlocks+0x1b4>
 800f45e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f460:	2b00      	cmp	r3, #0
 800f462:	d112      	bne.n	800f48a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4a56      	ldr	r2, [pc, #344]	@ (800f5c4 <HAL_SD_WriteBlocks+0x314>)
 800f46a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f472:	431a      	orrs	r2, r3
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2201      	movs	r2, #1
 800f47c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2200      	movs	r2, #0
 800f484:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800f486:	2303      	movs	r3, #3
 800f488:	e097      	b.n	800f5ba <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f490:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800f494:	2b00      	cmp	r3, #0
 800f496:	d09b      	beq.n	800f3d0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	68da      	ldr	r2, [r3, #12]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f4a6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d022      	beq.n	800f4fc <HAL_SD_WriteBlocks+0x24c>
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d91f      	bls.n	800f4fc <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4c0:	2b03      	cmp	r3, #3
 800f4c2:	d01b      	beq.n	800f4fc <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f006 fca1 	bl	8015e10 <SDMMC_CmdStopTransfer>
 800f4ce:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800f4d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d012      	beq.n	800f4fc <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4a3a      	ldr	r2, [pc, #232]	@ (800f5c4 <HAL_SD_WriteBlocks+0x314>)
 800f4dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f4e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4e4:	431a      	orrs	r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e05e      	b.n	800f5ba <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f502:	f003 0308 	and.w	r3, r3, #8
 800f506:	2b00      	cmp	r3, #0
 800f508:	d012      	beq.n	800f530 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4a2d      	ldr	r2, [pc, #180]	@ (800f5c4 <HAL_SD_WriteBlocks+0x314>)
 800f510:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f516:	f043 0208 	orr.w	r2, r3, #8
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2201      	movs	r2, #1
 800f522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2200      	movs	r2, #0
 800f52a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f52c:	2301      	movs	r3, #1
 800f52e:	e044      	b.n	800f5ba <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f536:	f003 0302 	and.w	r3, r3, #2
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d012      	beq.n	800f564 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	4a20      	ldr	r2, [pc, #128]	@ (800f5c4 <HAL_SD_WriteBlocks+0x314>)
 800f544:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f54a:	f043 0202 	orr.w	r2, r3, #2
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2201      	movs	r2, #1
 800f556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2200      	movs	r2, #0
 800f55e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f560:	2301      	movs	r3, #1
 800f562:	e02a      	b.n	800f5ba <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f56a:	f003 0310 	and.w	r3, r3, #16
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d012      	beq.n	800f598 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a13      	ldr	r2, [pc, #76]	@ (800f5c4 <HAL_SD_WriteBlocks+0x314>)
 800f578:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f57e:	f043 0210 	orr.w	r2, r3, #16
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2201      	movs	r2, #1
 800f58a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2200      	movs	r2, #0
 800f592:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f594:	2301      	movs	r3, #1
 800f596:	e010      	b.n	800f5ba <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a0a      	ldr	r2, [pc, #40]	@ (800f5c8 <HAL_SD_WriteBlocks+0x318>)
 800f59e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	e006      	b.n	800f5ba <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f5b8:	2301      	movs	r3, #1
  }
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3748      	adds	r7, #72	@ 0x48
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	1fe00fff 	.word	0x1fe00fff
 800f5c8:	18000f3a 	.word	0x18000f3a

0800f5cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f5da:	0f9b      	lsrs	r3, r3, #30
 800f5dc:	b2da      	uxtb	r2, r3
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f5e6:	0e9b      	lsrs	r3, r3, #26
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	f003 030f 	and.w	r3, r3, #15
 800f5ee:	b2da      	uxtb	r2, r3
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f5f8:	0e1b      	lsrs	r3, r3, #24
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	f003 0303 	and.w	r3, r3, #3
 800f600:	b2da      	uxtb	r2, r3
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f60a:	0c1b      	lsrs	r3, r3, #16
 800f60c:	b2da      	uxtb	r2, r3
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f616:	0a1b      	lsrs	r3, r3, #8
 800f618:	b2da      	uxtb	r2, r3
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f622:	b2da      	uxtb	r2, r3
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f62c:	0d1b      	lsrs	r3, r3, #20
 800f62e:	b29a      	uxth	r2, r3
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f638:	0c1b      	lsrs	r3, r3, #16
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	f003 030f 	and.w	r3, r3, #15
 800f640:	b2da      	uxtb	r2, r3
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f64a:	0bdb      	lsrs	r3, r3, #15
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	f003 0301 	and.w	r3, r3, #1
 800f652:	b2da      	uxtb	r2, r3
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f65c:	0b9b      	lsrs	r3, r3, #14
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	f003 0301 	and.w	r3, r3, #1
 800f664:	b2da      	uxtb	r2, r3
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f66e:	0b5b      	lsrs	r3, r3, #13
 800f670:	b2db      	uxtb	r3, r3
 800f672:	f003 0301 	and.w	r3, r3, #1
 800f676:	b2da      	uxtb	r2, r3
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f680:	0b1b      	lsrs	r3, r3, #12
 800f682:	b2db      	uxtb	r3, r3
 800f684:	f003 0301 	and.w	r3, r3, #1
 800f688:	b2da      	uxtb	r2, r3
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	2200      	movs	r2, #0
 800f692:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d163      	bne.n	800f764 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f6a0:	009a      	lsls	r2, r3, #2
 800f6a2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800f6a6:	4013      	ands	r3, r2
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800f6ac:	0f92      	lsrs	r2, r2, #30
 800f6ae:	431a      	orrs	r2, r3
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6b8:	0edb      	lsrs	r3, r3, #27
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	f003 0307 	and.w	r3, r3, #7
 800f6c0:	b2da      	uxtb	r2, r3
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6ca:	0e1b      	lsrs	r3, r3, #24
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	f003 0307 	and.w	r3, r3, #7
 800f6d2:	b2da      	uxtb	r2, r3
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6dc:	0d5b      	lsrs	r3, r3, #21
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	f003 0307 	and.w	r3, r3, #7
 800f6e4:	b2da      	uxtb	r2, r3
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6ee:	0c9b      	lsrs	r3, r3, #18
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	f003 0307 	and.w	r3, r3, #7
 800f6f6:	b2da      	uxtb	r2, r3
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f700:	0bdb      	lsrs	r3, r3, #15
 800f702:	b2db      	uxtb	r3, r3
 800f704:	f003 0307 	and.w	r3, r3, #7
 800f708:	b2da      	uxtb	r2, r3
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	691b      	ldr	r3, [r3, #16]
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	7e1b      	ldrb	r3, [r3, #24]
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	f003 0307 	and.w	r3, r3, #7
 800f722:	3302      	adds	r3, #2
 800f724:	2201      	movs	r2, #1
 800f726:	fa02 f303 	lsl.w	r3, r2, r3
 800f72a:	687a      	ldr	r2, [r7, #4]
 800f72c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f72e:	fb03 f202 	mul.w	r2, r3, r2
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	7a1b      	ldrb	r3, [r3, #8]
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	f003 030f 	and.w	r3, r3, #15
 800f740:	2201      	movs	r2, #1
 800f742:	409a      	lsls	r2, r3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f74c:	687a      	ldr	r2, [r7, #4]
 800f74e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800f750:	0a52      	lsrs	r2, r2, #9
 800f752:	fb03 f202 	mul.w	r2, r3, r2
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f760:	655a      	str	r2, [r3, #84]	@ 0x54
 800f762:	e031      	b.n	800f7c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d11d      	bne.n	800f7a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f770:	041b      	lsls	r3, r3, #16
 800f772:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f77a:	0c1b      	lsrs	r3, r3, #16
 800f77c:	431a      	orrs	r2, r3
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	3301      	adds	r3, #1
 800f788:	029a      	lsls	r2, r3, #10
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f79c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	655a      	str	r2, [r3, #84]	@ 0x54
 800f7a6:	e00f      	b.n	800f7c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a58      	ldr	r2, [pc, #352]	@ (800f910 <HAL_SD_GetCardCSD+0x344>)
 800f7ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	e09d      	b.n	800f904 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7cc:	0b9b      	lsrs	r3, r3, #14
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	f003 0301 	and.w	r3, r3, #1
 800f7d4:	b2da      	uxtb	r2, r3
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7de:	09db      	lsrs	r3, r3, #7
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7e6:	b2da      	uxtb	r2, r3
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7f6:	b2da      	uxtb	r2, r3
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f800:	0fdb      	lsrs	r3, r3, #31
 800f802:	b2da      	uxtb	r2, r3
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f80c:	0f5b      	lsrs	r3, r3, #29
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	f003 0303 	and.w	r3, r3, #3
 800f814:	b2da      	uxtb	r2, r3
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f81e:	0e9b      	lsrs	r3, r3, #26
 800f820:	b2db      	uxtb	r3, r3
 800f822:	f003 0307 	and.w	r3, r3, #7
 800f826:	b2da      	uxtb	r2, r3
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f830:	0d9b      	lsrs	r3, r3, #22
 800f832:	b2db      	uxtb	r3, r3
 800f834:	f003 030f 	and.w	r3, r3, #15
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f842:	0d5b      	lsrs	r3, r3, #21
 800f844:	b2db      	uxtb	r3, r3
 800f846:	f003 0301 	and.w	r3, r3, #1
 800f84a:	b2da      	uxtb	r2, r3
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	2200      	movs	r2, #0
 800f856:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f85e:	0c1b      	lsrs	r3, r3, #16
 800f860:	b2db      	uxtb	r3, r3
 800f862:	f003 0301 	and.w	r3, r3, #1
 800f866:	b2da      	uxtb	r2, r3
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f872:	0bdb      	lsrs	r3, r3, #15
 800f874:	b2db      	uxtb	r3, r3
 800f876:	f003 0301 	and.w	r3, r3, #1
 800f87a:	b2da      	uxtb	r2, r3
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f886:	0b9b      	lsrs	r3, r3, #14
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	f003 0301 	and.w	r3, r3, #1
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f89a:	0b5b      	lsrs	r3, r3, #13
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	f003 0301 	and.w	r3, r3, #1
 800f8a2:	b2da      	uxtb	r2, r3
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f8ae:	0b1b      	lsrs	r3, r3, #12
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	f003 0301 	and.w	r3, r3, #1
 800f8b6:	b2da      	uxtb	r2, r3
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f8c2:	0a9b      	lsrs	r3, r3, #10
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	f003 0303 	and.w	r3, r3, #3
 800f8ca:	b2da      	uxtb	r2, r3
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f8d6:	0a1b      	lsrs	r3, r3, #8
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	f003 0303 	and.w	r3, r3, #3
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f8ea:	085b      	lsrs	r3, r3, #1
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8f2:	b2da      	uxtb	r2, r3
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800f902:	2300      	movs	r3, #0
}
 800f904:	4618      	mov	r0, r3
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr
 800f910:	1fe00fff 	.word	0x1fe00fff

0800f914 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b094      	sub	sp, #80	@ 0x50
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800f91e:	2300      	movs	r3, #0
 800f920:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	2b03      	cmp	r3, #3
 800f92e:	d101      	bne.n	800f934 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800f930:	2301      	movs	r3, #1
 800f932:	e0a7      	b.n	800fa84 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800f934:	f107 0308 	add.w	r3, r7, #8
 800f938:	4619      	mov	r1, r3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 fb62 	bl	8010004 <SD_SendSDStatus>
 800f940:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800f942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f944:	2b00      	cmp	r3, #0
 800f946:	d011      	beq.n	800f96c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a4f      	ldr	r2, [pc, #316]	@ (800fa8c <HAL_SD_GetCardStatus+0x178>)
 800f94e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f956:	431a      	orrs	r2, r3
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800f964:	2301      	movs	r3, #1
 800f966:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f96a:	e070      	b.n	800fa4e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	099b      	lsrs	r3, r3, #6
 800f970:	b2db      	uxtb	r3, r3
 800f972:	f003 0303 	and.w	r3, r3, #3
 800f976:	b2da      	uxtb	r2, r3
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	095b      	lsrs	r3, r3, #5
 800f980:	b2db      	uxtb	r3, r3
 800f982:	f003 0301 	and.w	r3, r3, #1
 800f986:	b2da      	uxtb	r2, r3
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	0a1b      	lsrs	r3, r3, #8
 800f990:	b29b      	uxth	r3, r3
 800f992:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f996:	b29a      	uxth	r2, r3
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	0e1b      	lsrs	r3, r3, #24
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	061a      	lsls	r2, r3, #24
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	021b      	lsls	r3, r3, #8
 800f9ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f9b2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	0a1b      	lsrs	r3, r3, #8
 800f9b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f9bc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	0e1b      	lsrs	r3, r3, #24
 800f9c2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	b2da      	uxtb	r2, r3
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	0a1b      	lsrs	r3, r3, #8
 800f9d4:	b2da      	uxtb	r2, r3
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	0d1b      	lsrs	r3, r3, #20
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	f003 030f 	and.w	r3, r3, #15
 800f9e4:	b2da      	uxtb	r2, r3
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	0c1b      	lsrs	r3, r3, #16
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f9f4:	b29a      	uxth	r2, r3
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	0a9b      	lsrs	r3, r3, #10
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa10:	b2da      	uxtb	r2, r3
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	0a1b      	lsrs	r3, r3, #8
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	f003 0303 	and.w	r3, r3, #3
 800fa20:	b2da      	uxtb	r2, r3
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	091b      	lsrs	r3, r3, #4
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	f003 030f 	and.w	r3, r3, #15
 800fa30:	b2da      	uxtb	r2, r3
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	f003 030f 	and.w	r3, r3, #15
 800fa3e:	b2da      	uxtb	r2, r3
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	0e1b      	lsrs	r3, r3, #24
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fa56:	4618      	mov	r0, r3
 800fa58:	f006 f92a 	bl	8015cb0 <SDMMC_CmdBlockLength>
 800fa5c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800fa5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d00d      	beq.n	800fa80 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a08      	ldr	r2, [pc, #32]	@ (800fa8c <HAL_SD_GetCardStatus+0x178>)
 800fa6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fa70:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2201      	movs	r2, #1
 800fa76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800fa80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3750      	adds	r7, #80	@ 0x50
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	1fe00fff 	.word	0x1fe00fff

0800fa90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800fae8:	b590      	push	{r4, r7, lr}
 800faea:	b08d      	sub	sp, #52	@ 0x34
 800faec:	af02      	add	r7, sp, #8
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800faf2:	2300      	movs	r3, #0
 800faf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2203      	movs	r2, #3
 800fafc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb04:	2b03      	cmp	r3, #3
 800fb06:	d02e      	beq.n	800fb66 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fb0e:	d106      	bne.n	800fb1e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	635a      	str	r2, [r3, #52]	@ 0x34
 800fb1c:	e029      	b.n	800fb72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fb24:	d10a      	bne.n	800fb3c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fb64 	bl	80101f4 <SD_WideBus_Enable>
 800fb2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb32:	6a3b      	ldr	r3, [r7, #32]
 800fb34:	431a      	orrs	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	635a      	str	r2, [r3, #52]	@ 0x34
 800fb3a:	e01a      	b.n	800fb72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d10a      	bne.n	800fb58 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 fba1 	bl	801028a <SD_WideBus_Disable>
 800fb48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb4e:	6a3b      	ldr	r3, [r7, #32]
 800fb50:	431a      	orrs	r2, r3
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	635a      	str	r2, [r3, #52]	@ 0x34
 800fb56:	e00c      	b.n	800fb72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb5c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	635a      	str	r2, [r3, #52]	@ 0x34
 800fb64:	e005      	b.n	800fb72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb6a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d007      	beq.n	800fb8a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a5f      	ldr	r2, [pc, #380]	@ (800fcfc <HAL_SD_ConfigWideBusOperation+0x214>)
 800fb80:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800fb82:	2301      	movs	r3, #1
 800fb84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fb88:	e096      	b.n	800fcb8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800fb8a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800fb8e:	f04f 0100 	mov.w	r1, #0
 800fb92:	f7fd fe9d 	bl	800d8d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800fb96:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800fb98:	69fb      	ldr	r3, [r7, #28]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	f000 8083 	beq.w	800fca6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	689b      	ldr	r3, [r3, #8]
 800fbaa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	691b      	ldr	r3, [r3, #16]
 800fbb4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	695a      	ldr	r2, [r3, #20]
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	4950      	ldr	r1, [pc, #320]	@ (800fd00 <HAL_SD_ConfigWideBusOperation+0x218>)
 800fbbe:	fba1 1303 	umull	r1, r3, r1, r3
 800fbc2:	0e1b      	lsrs	r3, r3, #24
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d303      	bcc.n	800fbd0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	695b      	ldr	r3, [r3, #20]
 800fbcc:	61bb      	str	r3, [r7, #24]
 800fbce:	e05a      	b.n	800fc86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbd8:	d103      	bne.n	800fbe2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	695b      	ldr	r3, [r3, #20]
 800fbde:	61bb      	str	r3, [r7, #24]
 800fbe0:	e051      	b.n	800fc86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbea:	d126      	bne.n	800fc3a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	695b      	ldr	r3, [r3, #20]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d10e      	bne.n	800fc12 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	4a43      	ldr	r2, [pc, #268]	@ (800fd04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d906      	bls.n	800fc0a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	4a40      	ldr	r2, [pc, #256]	@ (800fd00 <HAL_SD_ConfigWideBusOperation+0x218>)
 800fc00:	fba2 2303 	umull	r2, r3, r2, r3
 800fc04:	0e5b      	lsrs	r3, r3, #25
 800fc06:	61bb      	str	r3, [r7, #24]
 800fc08:	e03d      	b.n	800fc86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	695b      	ldr	r3, [r3, #20]
 800fc0e:	61bb      	str	r3, [r7, #24]
 800fc10:	e039      	b.n	800fc86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	695b      	ldr	r3, [r3, #20]
 800fc16:	005b      	lsls	r3, r3, #1
 800fc18:	69fa      	ldr	r2, [r7, #28]
 800fc1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc1e:	4a39      	ldr	r2, [pc, #228]	@ (800fd04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d906      	bls.n	800fc32 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	4a36      	ldr	r2, [pc, #216]	@ (800fd00 <HAL_SD_ConfigWideBusOperation+0x218>)
 800fc28:	fba2 2303 	umull	r2, r3, r2, r3
 800fc2c:	0e5b      	lsrs	r3, r3, #25
 800fc2e:	61bb      	str	r3, [r7, #24]
 800fc30:	e029      	b.n	800fc86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	695b      	ldr	r3, [r3, #20]
 800fc36:	61bb      	str	r3, [r7, #24]
 800fc38:	e025      	b.n	800fc86 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	695b      	ldr	r3, [r3, #20]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d10e      	bne.n	800fc60 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	4a30      	ldr	r2, [pc, #192]	@ (800fd08 <HAL_SD_ConfigWideBusOperation+0x220>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d906      	bls.n	800fc58 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	4a2c      	ldr	r2, [pc, #176]	@ (800fd00 <HAL_SD_ConfigWideBusOperation+0x218>)
 800fc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc52:	0e1b      	lsrs	r3, r3, #24
 800fc54:	61bb      	str	r3, [r7, #24]
 800fc56:	e016      	b.n	800fc86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	695b      	ldr	r3, [r3, #20]
 800fc5c:	61bb      	str	r3, [r7, #24]
 800fc5e:	e012      	b.n	800fc86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	695b      	ldr	r3, [r3, #20]
 800fc64:	005b      	lsls	r3, r3, #1
 800fc66:	69fa      	ldr	r2, [r7, #28]
 800fc68:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc6c:	4a26      	ldr	r2, [pc, #152]	@ (800fd08 <HAL_SD_ConfigWideBusOperation+0x220>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d906      	bls.n	800fc80 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	4a22      	ldr	r2, [pc, #136]	@ (800fd00 <HAL_SD_ConfigWideBusOperation+0x218>)
 800fc76:	fba2 2303 	umull	r2, r3, r2, r3
 800fc7a:	0e1b      	lsrs	r3, r3, #24
 800fc7c:	61bb      	str	r3, [r7, #24]
 800fc7e:	e002      	b.n	800fc86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	695b      	ldr	r3, [r3, #20]
 800fc84:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681c      	ldr	r4, [r3, #0]
 800fc8a:	466a      	mov	r2, sp
 800fc8c:	f107 0314 	add.w	r3, r7, #20
 800fc90:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc94:	e882 0003 	stmia.w	r2, {r0, r1}
 800fc98:	f107 0308 	add.w	r3, r7, #8
 800fc9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f005 ff28 	bl	8015af4 <SDMMC_Init>
 800fca4:	e008      	b.n	800fcb8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcaa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f005 fff5 	bl	8015cb0 <SDMMC_CmdBlockLength>
 800fcc6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fcc8:	6a3b      	ldr	r3, [r7, #32]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d00c      	beq.n	800fce8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a0a      	ldr	r2, [pc, #40]	@ (800fcfc <HAL_SD_ConfigWideBusOperation+0x214>)
 800fcd4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	431a      	orrs	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800fce2:	2301      	movs	r3, #1
 800fce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2201      	movs	r2, #1
 800fcec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800fcf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	372c      	adds	r7, #44	@ 0x2c
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd90      	pop	{r4, r7, pc}
 800fcfc:	1fe00fff 	.word	0x1fe00fff
 800fd00:	55e63b89 	.word	0x55e63b89
 800fd04:	02faf080 	.word	0x02faf080
 800fd08:	017d7840 	.word	0x017d7840

0800fd0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800fd14:	2300      	movs	r3, #0
 800fd16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800fd18:	f107 030c 	add.w	r3, r7, #12
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f000 fa40 	bl	80101a4 <SD_SendStatus>
 800fd24:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d005      	beq.n	800fd38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	431a      	orrs	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	0a5b      	lsrs	r3, r3, #9
 800fd3c:	f003 030f 	and.w	r3, r3, #15
 800fd40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800fd42:	693b      	ldr	r3, [r7, #16]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3718      	adds	r7, #24
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b090      	sub	sp, #64	@ 0x40
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800fd54:	2300      	movs	r3, #0
 800fd56:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800fd58:	f7f7 f9f2 	bl	8007140 <HAL_GetTick>
 800fd5c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f005 ff1f 	bl	8015ba6 <SDMMC_GetPowerState>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d102      	bne.n	800fd74 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fd6e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800fd72:	e0b5      	b.n	800fee0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd78:	2b03      	cmp	r3, #3
 800fd7a:	d02e      	beq.n	800fdda <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f006 f96a 	bl	801605a <SDMMC_CmdSendCID>
 800fd86:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800fd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d001      	beq.n	800fd92 <SD_InitCard+0x46>
    {
      return errorstate;
 800fd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd90:	e0a6      	b.n	800fee0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2100      	movs	r1, #0
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f005 ff4a 	bl	8015c32 <SDMMC_GetResponse>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2104      	movs	r1, #4
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f005 ff41 	bl	8015c32 <SDMMC_GetResponse>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2108      	movs	r1, #8
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f005 ff38 	bl	8015c32 <SDMMC_GetResponse>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	210c      	movs	r1, #12
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f005 ff2f 	bl	8015c32 <SDMMC_GetResponse>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdde:	2b03      	cmp	r3, #3
 800fde0:	d01d      	beq.n	800fe1e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800fde2:	e019      	b.n	800fe18 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f107 020a 	add.w	r2, r7, #10
 800fdec:	4611      	mov	r1, r2
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f006 f972 	bl	80160d8 <SDMMC_CmdSetRelAdd>
 800fdf4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d001      	beq.n	800fe00 <SD_InitCard+0xb4>
      {
        return errorstate;
 800fdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdfe:	e06f      	b.n	800fee0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800fe00:	f7f7 f99e 	bl	8007140 <HAL_GetTick>
 800fe04:	4602      	mov	r2, r0
 800fe06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d902      	bls.n	800fe18 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800fe12:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fe16:	e063      	b.n	800fee0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800fe18:	897b      	ldrh	r3, [r7, #10]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d0e2      	beq.n	800fde4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe22:	2b03      	cmp	r3, #3
 800fe24:	d036      	beq.n	800fe94 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800fe26:	897b      	ldrh	r3, [r7, #10]
 800fe28:	461a      	mov	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe36:	041b      	lsls	r3, r3, #16
 800fe38:	4619      	mov	r1, r3
 800fe3a:	4610      	mov	r0, r2
 800fe3c:	f006 f92c 	bl	8016098 <SDMMC_CmdSendCSD>
 800fe40:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800fe42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d001      	beq.n	800fe4c <SD_InitCard+0x100>
    {
      return errorstate;
 800fe48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe4a:	e049      	b.n	800fee0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2100      	movs	r1, #0
 800fe52:	4618      	mov	r0, r3
 800fe54:	f005 feed 	bl	8015c32 <SDMMC_GetResponse>
 800fe58:	4602      	mov	r2, r0
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2104      	movs	r1, #4
 800fe64:	4618      	mov	r0, r3
 800fe66:	f005 fee4 	bl	8015c32 <SDMMC_GetResponse>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2108      	movs	r1, #8
 800fe76:	4618      	mov	r0, r3
 800fe78:	f005 fedb 	bl	8015c32 <SDMMC_GetResponse>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	210c      	movs	r1, #12
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f005 fed2 	bl	8015c32 <SDMMC_GetResponse>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2104      	movs	r1, #4
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f005 fec9 	bl	8015c32 <SDMMC_GetResponse>
 800fea0:	4603      	mov	r3, r0
 800fea2:	0d1a      	lsrs	r2, r3, #20
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800fea8:	f107 030c 	add.w	r3, r7, #12
 800feac:	4619      	mov	r1, r3
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f7ff fb8c 	bl	800f5cc <HAL_SD_GetCardCSD>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d002      	beq.n	800fec0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800feba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800febe:	e00f      	b.n	800fee0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fec8:	041b      	lsls	r3, r3, #16
 800feca:	4619      	mov	r1, r3
 800fecc:	4610      	mov	r0, r2
 800fece:	f005 ffdb 	bl	8015e88 <SDMMC_CmdSelDesel>
 800fed2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800fed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d001      	beq.n	800fede <SD_InitCard+0x192>
  {
    return errorstate;
 800feda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fedc:	e000      	b.n	800fee0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3740      	adds	r7, #64	@ 0x40
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b086      	sub	sp, #24
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fef0:	2300      	movs	r3, #0
 800fef2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800fef4:	2300      	movs	r3, #0
 800fef6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800fef8:	2300      	movs	r3, #0
 800fefa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f005 ffe4 	bl	8015ece <SDMMC_CmdGoIdleState>
 800ff06:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d001      	beq.n	800ff12 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	e072      	b.n	800fff8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	4618      	mov	r0, r3
 800ff18:	f005 fff7 	bl	8015f0a <SDMMC_CmdOperCond>
 800ff1c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ff24:	d10d      	bne.n	800ff42 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4618      	mov	r0, r3
 800ff32:	f005 ffcc 	bl	8015ece <SDMMC_CmdGoIdleState>
 800ff36:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d004      	beq.n	800ff48 <SD_PowerON+0x60>
    {
      return errorstate;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	e05a      	b.n	800fff8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2201      	movs	r2, #1
 800ff46:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	d137      	bne.n	800ffc0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2100      	movs	r1, #0
 800ff56:	4618      	mov	r0, r3
 800ff58:	f005 fff7 	bl	8015f4a <SDMMC_CmdAppCommand>
 800ff5c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d02d      	beq.n	800ffc0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ff64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ff68:	e046      	b.n	800fff8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	2100      	movs	r1, #0
 800ff70:	4618      	mov	r0, r3
 800ff72:	f005 ffea 	bl	8015f4a <SDMMC_CmdAppCommand>
 800ff76:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d001      	beq.n	800ff82 <SD_PowerON+0x9a>
    {
      return errorstate;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	e03a      	b.n	800fff8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	491e      	ldr	r1, [pc, #120]	@ (8010000 <SD_PowerON+0x118>)
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f006 f801 	bl	8015f90 <SDMMC_CmdAppOperCommand>
 800ff8e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d002      	beq.n	800ff9c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ff96:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ff9a:	e02d      	b.n	800fff8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f005 fe45 	bl	8015c32 <SDMMC_GetResponse>
 800ffa8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	0fdb      	lsrs	r3, r3, #31
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d101      	bne.n	800ffb6 <SD_PowerON+0xce>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e000      	b.n	800ffb8 <SD_PowerON+0xd0>
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	613b      	str	r3, [r7, #16]

    count++;
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d802      	bhi.n	800ffd0 <SD_PowerON+0xe8>
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d0cc      	beq.n	800ff6a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d902      	bls.n	800ffe0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ffda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ffde:	e00b      	b.n	800fff8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d002      	beq.n	800fff6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2201      	movs	r2, #1
 800fff4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800fff6:	2300      	movs	r3, #0
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3718      	adds	r7, #24
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	c1100000 	.word	0xc1100000

08010004 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b08c      	sub	sp, #48	@ 0x30
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801000e:	f7f7 f897 	bl	8007140 <HAL_GetTick>
 8010012:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2100      	movs	r1, #0
 801001e:	4618      	mov	r0, r3
 8010020:	f005 fe07 	bl	8015c32 <SDMMC_GetResponse>
 8010024:	4603      	mov	r3, r0
 8010026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801002a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801002e:	d102      	bne.n	8010036 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010030:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010034:	e0b0      	b.n	8010198 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2140      	movs	r1, #64	@ 0x40
 801003c:	4618      	mov	r0, r3
 801003e:	f005 fe37 	bl	8015cb0 <SDMMC_CmdBlockLength>
 8010042:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010044:	6a3b      	ldr	r3, [r7, #32]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d005      	beq.n	8010056 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8010052:	6a3b      	ldr	r3, [r7, #32]
 8010054:	e0a0      	b.n	8010198 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801005e:	041b      	lsls	r3, r3, #16
 8010060:	4619      	mov	r1, r3
 8010062:	4610      	mov	r0, r2
 8010064:	f005 ff71 	bl	8015f4a <SDMMC_CmdAppCommand>
 8010068:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801006a:	6a3b      	ldr	r3, [r7, #32]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d005      	beq.n	801007c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8010078:	6a3b      	ldr	r3, [r7, #32]
 801007a:	e08d      	b.n	8010198 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801007c:	f04f 33ff 	mov.w	r3, #4294967295
 8010080:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8010082:	2340      	movs	r3, #64	@ 0x40
 8010084:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8010086:	2360      	movs	r3, #96	@ 0x60
 8010088:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801008a:	2302      	movs	r3, #2
 801008c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801008e:	2300      	movs	r3, #0
 8010090:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010092:	2301      	movs	r3, #1
 8010094:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f107 0208 	add.w	r2, r7, #8
 801009e:	4611      	mov	r1, r2
 80100a0:	4618      	mov	r0, r3
 80100a2:	f005 fdd9 	bl	8015c58 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4618      	mov	r0, r3
 80100ac:	f006 f859 	bl	8016162 <SDMMC_CmdStatusRegister>
 80100b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80100b2:	6a3b      	ldr	r3, [r7, #32]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d02b      	beq.n	8010110 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80100c0:	6a3b      	ldr	r3, [r7, #32]
 80100c2:	e069      	b.n	8010198 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d013      	beq.n	80100fa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80100d2:	2300      	movs	r3, #0
 80100d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80100d6:	e00d      	b.n	80100f4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4618      	mov	r0, r3
 80100de:	f005 fd33 	bl	8015b48 <SDMMC_ReadFIFO>
 80100e2:	4602      	mov	r2, r0
 80100e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100e6:	601a      	str	r2, [r3, #0]
        pData++;
 80100e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ea:	3304      	adds	r3, #4
 80100ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80100ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f0:	3301      	adds	r3, #1
 80100f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80100f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f6:	2b07      	cmp	r3, #7
 80100f8:	d9ee      	bls.n	80100d8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80100fa:	f7f7 f821 	bl	8007140 <HAL_GetTick>
 80100fe:	4602      	mov	r2, r0
 8010100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010108:	d102      	bne.n	8010110 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801010a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801010e:	e043      	b.n	8010198 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010116:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801011a:	2b00      	cmp	r3, #0
 801011c:	d0d2      	beq.n	80100c4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010124:	f003 0308 	and.w	r3, r3, #8
 8010128:	2b00      	cmp	r3, #0
 801012a:	d001      	beq.n	8010130 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801012c:	2308      	movs	r3, #8
 801012e:	e033      	b.n	8010198 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010136:	f003 0302 	and.w	r3, r3, #2
 801013a:	2b00      	cmp	r3, #0
 801013c:	d001      	beq.n	8010142 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801013e:	2302      	movs	r3, #2
 8010140:	e02a      	b.n	8010198 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010148:	f003 0320 	and.w	r3, r3, #32
 801014c:	2b00      	cmp	r3, #0
 801014e:	d017      	beq.n	8010180 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8010150:	2320      	movs	r3, #32
 8010152:	e021      	b.n	8010198 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4618      	mov	r0, r3
 801015a:	f005 fcf5 	bl	8015b48 <SDMMC_ReadFIFO>
 801015e:	4602      	mov	r2, r0
 8010160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010162:	601a      	str	r2, [r3, #0]
    pData++;
 8010164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010166:	3304      	adds	r3, #4
 8010168:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801016a:	f7f6 ffe9 	bl	8007140 <HAL_GetTick>
 801016e:	4602      	mov	r2, r0
 8010170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010172:	1ad3      	subs	r3, r2, r3
 8010174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010178:	d102      	bne.n	8010180 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801017a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801017e:	e00b      	b.n	8010198 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1e2      	bne.n	8010154 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	4a03      	ldr	r2, [pc, #12]	@ (80101a0 <SD_SendSDStatus+0x19c>)
 8010194:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8010196:	2300      	movs	r3, #0
}
 8010198:	4618      	mov	r0, r3
 801019a:	3730      	adds	r7, #48	@ 0x30
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	18000f3a 	.word	0x18000f3a

080101a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b084      	sub	sp, #16
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d102      	bne.n	80101ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80101b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80101b8:	e018      	b.n	80101ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101c2:	041b      	lsls	r3, r3, #16
 80101c4:	4619      	mov	r1, r3
 80101c6:	4610      	mov	r0, r2
 80101c8:	f005 ffa8 	bl	801611c <SDMMC_CmdSendStatus>
 80101cc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d001      	beq.n	80101d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	e009      	b.n	80101ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	2100      	movs	r1, #0
 80101de:	4618      	mov	r0, r3
 80101e0:	f005 fd27 	bl	8015c32 <SDMMC_GetResponse>
 80101e4:	4602      	mov	r2, r0
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80101ea:	2300      	movs	r3, #0
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b086      	sub	sp, #24
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80101fc:	2300      	movs	r3, #0
 80101fe:	60fb      	str	r3, [r7, #12]
 8010200:	2300      	movs	r3, #0
 8010202:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2100      	movs	r1, #0
 801020a:	4618      	mov	r0, r3
 801020c:	f005 fd11 	bl	8015c32 <SDMMC_GetResponse>
 8010210:	4603      	mov	r3, r0
 8010212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010216:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801021a:	d102      	bne.n	8010222 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801021c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010220:	e02f      	b.n	8010282 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010222:	f107 030c 	add.w	r3, r7, #12
 8010226:	4619      	mov	r1, r3
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 f879 	bl	8010320 <SD_FindSCR>
 801022e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d001      	beq.n	801023a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	e023      	b.n	8010282 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010240:	2b00      	cmp	r3, #0
 8010242:	d01c      	beq.n	801027e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801024c:	041b      	lsls	r3, r3, #16
 801024e:	4619      	mov	r1, r3
 8010250:	4610      	mov	r0, r2
 8010252:	f005 fe7a 	bl	8015f4a <SDMMC_CmdAppCommand>
 8010256:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d001      	beq.n	8010262 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	e00f      	b.n	8010282 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2102      	movs	r1, #2
 8010268:	4618      	mov	r0, r3
 801026a:	f005 feb1 	bl	8015fd0 <SDMMC_CmdBusWidth>
 801026e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d001      	beq.n	801027a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	e003      	b.n	8010282 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801027a:	2300      	movs	r3, #0
 801027c:	e001      	b.n	8010282 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801027e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8010282:	4618      	mov	r0, r3
 8010284:	3718      	adds	r7, #24
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801028a:	b580      	push	{r7, lr}
 801028c:	b086      	sub	sp, #24
 801028e:	af00      	add	r7, sp, #0
 8010290:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8010292:	2300      	movs	r3, #0
 8010294:	60fb      	str	r3, [r7, #12]
 8010296:	2300      	movs	r3, #0
 8010298:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2100      	movs	r1, #0
 80102a0:	4618      	mov	r0, r3
 80102a2:	f005 fcc6 	bl	8015c32 <SDMMC_GetResponse>
 80102a6:	4603      	mov	r3, r0
 80102a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80102b0:	d102      	bne.n	80102b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80102b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80102b6:	e02f      	b.n	8010318 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80102b8:	f107 030c 	add.w	r3, r7, #12
 80102bc:	4619      	mov	r1, r3
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f000 f82e 	bl	8010320 <SD_FindSCR>
 80102c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d001      	beq.n	80102d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	e023      	b.n	8010318 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d01c      	beq.n	8010314 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102e2:	041b      	lsls	r3, r3, #16
 80102e4:	4619      	mov	r1, r3
 80102e6:	4610      	mov	r0, r2
 80102e8:	f005 fe2f 	bl	8015f4a <SDMMC_CmdAppCommand>
 80102ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d001      	beq.n	80102f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	e00f      	b.n	8010318 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2100      	movs	r1, #0
 80102fe:	4618      	mov	r0, r3
 8010300:	f005 fe66 	bl	8015fd0 <SDMMC_CmdBusWidth>
 8010304:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d001      	beq.n	8010310 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	e003      	b.n	8010318 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010310:	2300      	movs	r3, #0
 8010312:	e001      	b.n	8010318 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010314:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8010318:	4618      	mov	r0, r3
 801031a:	3718      	adds	r7, #24
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b08e      	sub	sp, #56	@ 0x38
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801032a:	f7f6 ff09 	bl	8007140 <HAL_GetTick>
 801032e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8010330:	2300      	movs	r3, #0
 8010332:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8010334:	2300      	movs	r3, #0
 8010336:	60bb      	str	r3, [r7, #8]
 8010338:	2300      	movs	r3, #0
 801033a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2108      	movs	r1, #8
 8010346:	4618      	mov	r0, r3
 8010348:	f005 fcb2 	bl	8015cb0 <SDMMC_CmdBlockLength>
 801034c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801034e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010350:	2b00      	cmp	r3, #0
 8010352:	d001      	beq.n	8010358 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010356:	e0ad      	b.n	80104b4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010360:	041b      	lsls	r3, r3, #16
 8010362:	4619      	mov	r1, r3
 8010364:	4610      	mov	r0, r2
 8010366:	f005 fdf0 	bl	8015f4a <SDMMC_CmdAppCommand>
 801036a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801036c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801036e:	2b00      	cmp	r3, #0
 8010370:	d001      	beq.n	8010376 <SD_FindSCR+0x56>
  {
    return errorstate;
 8010372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010374:	e09e      	b.n	80104b4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010376:	f04f 33ff 	mov.w	r3, #4294967295
 801037a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801037c:	2308      	movs	r3, #8
 801037e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010380:	2330      	movs	r3, #48	@ 0x30
 8010382:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010384:	2302      	movs	r3, #2
 8010386:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010388:	2300      	movs	r3, #0
 801038a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801038c:	2301      	movs	r3, #1
 801038e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f107 0210 	add.w	r2, r7, #16
 8010398:	4611      	mov	r1, r2
 801039a:	4618      	mov	r0, r3
 801039c:	f005 fc5c 	bl	8015c58 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4618      	mov	r0, r3
 80103a6:	f005 fe36 	bl	8016016 <SDMMC_CmdSendSCR>
 80103aa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80103ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d027      	beq.n	8010402 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80103b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103b4:	e07e      	b.n	80104b4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d113      	bne.n	80103ec <SD_FindSCR+0xcc>
 80103c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d110      	bne.n	80103ec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4618      	mov	r0, r3
 80103d0:	f005 fbba 	bl	8015b48 <SDMMC_ReadFIFO>
 80103d4:	4603      	mov	r3, r0
 80103d6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	4618      	mov	r0, r3
 80103de:	f005 fbb3 	bl	8015b48 <SDMMC_ReadFIFO>
 80103e2:	4603      	mov	r3, r0
 80103e4:	60fb      	str	r3, [r7, #12]
      index++;
 80103e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103e8:	3301      	adds	r3, #1
 80103ea:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80103ec:	f7f6 fea8 	bl	8007140 <HAL_GetTick>
 80103f0:	4602      	mov	r2, r0
 80103f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f4:	1ad3      	subs	r3, r2, r3
 80103f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103fa:	d102      	bne.n	8010402 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80103fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010400:	e058      	b.n	80104b4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010408:	f240 532a 	movw	r3, #1322	@ 0x52a
 801040c:	4013      	ands	r3, r2
 801040e:	2b00      	cmp	r3, #0
 8010410:	d0d1      	beq.n	80103b6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010418:	f003 0308 	and.w	r3, r3, #8
 801041c:	2b00      	cmp	r3, #0
 801041e:	d005      	beq.n	801042c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2208      	movs	r2, #8
 8010426:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010428:	2308      	movs	r3, #8
 801042a:	e043      	b.n	80104b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010432:	f003 0302 	and.w	r3, r3, #2
 8010436:	2b00      	cmp	r3, #0
 8010438:	d005      	beq.n	8010446 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	2202      	movs	r2, #2
 8010440:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010442:	2302      	movs	r3, #2
 8010444:	e036      	b.n	80104b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801044c:	f003 0320 	and.w	r3, r3, #32
 8010450:	2b00      	cmp	r3, #0
 8010452:	d005      	beq.n	8010460 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2220      	movs	r2, #32
 801045a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801045c:	2320      	movs	r3, #32
 801045e:	e029      	b.n	80104b4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4a15      	ldr	r2, [pc, #84]	@ (80104bc <SD_FindSCR+0x19c>)
 8010466:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	061a      	lsls	r2, r3, #24
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	021b      	lsls	r3, r3, #8
 8010470:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010474:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	0a1b      	lsrs	r3, r3, #8
 801047a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801047e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	0e1b      	lsrs	r3, r3, #24
 8010484:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010488:	601a      	str	r2, [r3, #0]
    scr++;
 801048a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801048c:	3304      	adds	r3, #4
 801048e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	061a      	lsls	r2, r3, #24
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	021b      	lsls	r3, r3, #8
 8010498:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801049c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	0a1b      	lsrs	r3, r3, #8
 80104a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80104a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	0e1b      	lsrs	r3, r3, #24
 80104ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80104ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80104b2:	2300      	movs	r3, #0
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3738      	adds	r7, #56	@ 0x38
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	18000f3a 	.word	0x18000f3a

080104c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d101      	bne.n	80104d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80104ce:	2301      	movs	r3, #1
 80104d0:	e10f      	b.n	80106f2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2200      	movs	r2, #0
 80104d6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	4a87      	ldr	r2, [pc, #540]	@ (80106fc <HAL_SPI_Init+0x23c>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d00f      	beq.n	8010502 <HAL_SPI_Init+0x42>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4a86      	ldr	r2, [pc, #536]	@ (8010700 <HAL_SPI_Init+0x240>)
 80104e8:	4293      	cmp	r3, r2
 80104ea:	d00a      	beq.n	8010502 <HAL_SPI_Init+0x42>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	4a84      	ldr	r2, [pc, #528]	@ (8010704 <HAL_SPI_Init+0x244>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d005      	beq.n	8010502 <HAL_SPI_Init+0x42>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	2b0f      	cmp	r3, #15
 80104fc:	d901      	bls.n	8010502 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80104fe:	2301      	movs	r3, #1
 8010500:	e0f7      	b.n	80106f2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 fe2e 	bl	8011164 <SPI_GetPacketSize>
 8010508:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a7b      	ldr	r2, [pc, #492]	@ (80106fc <HAL_SPI_Init+0x23c>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d00c      	beq.n	801052e <HAL_SPI_Init+0x6e>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	4a79      	ldr	r2, [pc, #484]	@ (8010700 <HAL_SPI_Init+0x240>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d007      	beq.n	801052e <HAL_SPI_Init+0x6e>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a78      	ldr	r2, [pc, #480]	@ (8010704 <HAL_SPI_Init+0x244>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d002      	beq.n	801052e <HAL_SPI_Init+0x6e>
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2b08      	cmp	r3, #8
 801052c:	d811      	bhi.n	8010552 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010532:	4a72      	ldr	r2, [pc, #456]	@ (80106fc <HAL_SPI_Init+0x23c>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d009      	beq.n	801054c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4a70      	ldr	r2, [pc, #448]	@ (8010700 <HAL_SPI_Init+0x240>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d004      	beq.n	801054c <HAL_SPI_Init+0x8c>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4a6f      	ldr	r2, [pc, #444]	@ (8010704 <HAL_SPI_Init+0x244>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d104      	bne.n	8010556 <HAL_SPI_Init+0x96>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2b10      	cmp	r3, #16
 8010550:	d901      	bls.n	8010556 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010552:	2301      	movs	r3, #1
 8010554:	e0cd      	b.n	80106f2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801055c:	b2db      	uxtb	r3, r3
 801055e:	2b00      	cmp	r3, #0
 8010560:	d106      	bne.n	8010570 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2200      	movs	r2, #0
 8010566:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7f5 fd28 	bl	8005fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2202      	movs	r2, #2
 8010574:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f022 0201 	bic.w	r2, r2, #1
 8010586:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	689b      	ldr	r3, [r3, #8]
 801058e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8010592:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	699b      	ldr	r3, [r3, #24]
 8010598:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801059c:	d119      	bne.n	80105d2 <HAL_SPI_Init+0x112>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80105a6:	d103      	bne.n	80105b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d008      	beq.n	80105c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d10c      	bne.n	80105d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80105bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80105c0:	d107      	bne.n	80105d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80105d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00f      	beq.n	80105fe <HAL_SPI_Init+0x13e>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	68db      	ldr	r3, [r3, #12]
 80105e2:	2b06      	cmp	r3, #6
 80105e4:	d90b      	bls.n	80105fe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	430a      	orrs	r2, r1
 80105fa:	601a      	str	r2, [r3, #0]
 80105fc:	e007      	b.n	801060e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801060c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	69da      	ldr	r2, [r3, #28]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010616:	431a      	orrs	r2, r3
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	431a      	orrs	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010620:	ea42 0103 	orr.w	r1, r2, r3
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	68da      	ldr	r2, [r3, #12]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	430a      	orrs	r2, r1
 801062e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010638:	431a      	orrs	r2, r3
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801063e:	431a      	orrs	r2, r3
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	699b      	ldr	r3, [r3, #24]
 8010644:	431a      	orrs	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	691b      	ldr	r3, [r3, #16]
 801064a:	431a      	orrs	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	695b      	ldr	r3, [r3, #20]
 8010650:	431a      	orrs	r2, r3
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6a1b      	ldr	r3, [r3, #32]
 8010656:	431a      	orrs	r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	685b      	ldr	r3, [r3, #4]
 801065c:	431a      	orrs	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010662:	431a      	orrs	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	689b      	ldr	r3, [r3, #8]
 8010668:	431a      	orrs	r2, r3
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801066e:	ea42 0103 	orr.w	r1, r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	430a      	orrs	r2, r1
 801067c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d113      	bne.n	80106ae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010698:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	689b      	ldr	r3, [r3, #8]
 80106a0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80106ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f022 0201 	bic.w	r2, r2, #1
 80106bc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d00a      	beq.n	80106e0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	68db      	ldr	r3, [r3, #12]
 80106d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	430a      	orrs	r2, r1
 80106de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2201      	movs	r2, #1
 80106ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80106f0:	2300      	movs	r3, #0
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	40013000 	.word	0x40013000
 8010700:	40003800 	.word	0x40003800
 8010704:	40003c00 	.word	0x40003c00

08010708 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b088      	sub	sp, #32
 801070c:	af02      	add	r7, sp, #8
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	603b      	str	r3, [r7, #0]
 8010714:	4613      	mov	r3, r2
 8010716:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	3320      	adds	r3, #32
 801071e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010720:	f7f6 fd0e 	bl	8007140 <HAL_GetTick>
 8010724:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801072c:	b2db      	uxtb	r3, r3
 801072e:	2b01      	cmp	r3, #1
 8010730:	d001      	beq.n	8010736 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8010732:	2302      	movs	r3, #2
 8010734:	e1d1      	b.n	8010ada <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d002      	beq.n	8010742 <HAL_SPI_Transmit+0x3a>
 801073c:	88fb      	ldrh	r3, [r7, #6]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d101      	bne.n	8010746 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8010742:	2301      	movs	r3, #1
 8010744:	e1c9      	b.n	8010ada <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801074c:	2b01      	cmp	r3, #1
 801074e:	d101      	bne.n	8010754 <HAL_SPI_Transmit+0x4c>
 8010750:	2302      	movs	r3, #2
 8010752:	e1c2      	b.n	8010ada <HAL_SPI_Transmit+0x3d2>
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2201      	movs	r2, #1
 8010758:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2203      	movs	r2, #3
 8010760:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2200      	movs	r2, #0
 8010768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	68ba      	ldr	r2, [r7, #8]
 8010770:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	88fa      	ldrh	r2, [r7, #6]
 8010776:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	88fa      	ldrh	r2, [r7, #6]
 801077e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2200      	movs	r2, #0
 8010786:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2200      	movs	r2, #0
 801078c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2200      	movs	r2, #0
 801079c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2200      	movs	r2, #0
 80107a2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80107ac:	d108      	bne.n	80107c0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80107bc:	601a      	str	r2, [r3, #0]
 80107be:	e009      	b.n	80107d4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80107d2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	685a      	ldr	r2, [r3, #4]
 80107da:	4b96      	ldr	r3, [pc, #600]	@ (8010a34 <HAL_SPI_Transmit+0x32c>)
 80107dc:	4013      	ands	r3, r2
 80107de:	88f9      	ldrh	r1, [r7, #6]
 80107e0:	68fa      	ldr	r2, [r7, #12]
 80107e2:	6812      	ldr	r2, [r2, #0]
 80107e4:	430b      	orrs	r3, r1
 80107e6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f042 0201 	orr.w	r2, r2, #1
 80107f6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010800:	d107      	bne.n	8010812 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010810:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	2b0f      	cmp	r3, #15
 8010818:	d947      	bls.n	80108aa <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801081a:	e03f      	b.n	801089c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	695b      	ldr	r3, [r3, #20]
 8010822:	f003 0302 	and.w	r3, r3, #2
 8010826:	2b02      	cmp	r3, #2
 8010828:	d114      	bne.n	8010854 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	6812      	ldr	r2, [r2, #0]
 8010834:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801083a:	1d1a      	adds	r2, r3, #4
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010846:	b29b      	uxth	r3, r3
 8010848:	3b01      	subs	r3, #1
 801084a:	b29a      	uxth	r2, r3
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010852:	e023      	b.n	801089c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010854:	f7f6 fc74 	bl	8007140 <HAL_GetTick>
 8010858:	4602      	mov	r2, r0
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	683a      	ldr	r2, [r7, #0]
 8010860:	429a      	cmp	r2, r3
 8010862:	d803      	bhi.n	801086c <HAL_SPI_Transmit+0x164>
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801086a:	d102      	bne.n	8010872 <HAL_SPI_Transmit+0x16a>
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d114      	bne.n	801089c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010872:	68f8      	ldr	r0, [r7, #12]
 8010874:	f000 fba8 	bl	8010fc8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801087e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2201      	movs	r2, #1
 801088c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2200      	movs	r2, #0
 8010894:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010898:	2303      	movs	r3, #3
 801089a:	e11e      	b.n	8010ada <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108a2:	b29b      	uxth	r3, r3
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d1b9      	bne.n	801081c <HAL_SPI_Transmit+0x114>
 80108a8:	e0f1      	b.n	8010a8e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	2b07      	cmp	r3, #7
 80108b0:	f240 80e6 	bls.w	8010a80 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80108b4:	e05d      	b.n	8010972 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	695b      	ldr	r3, [r3, #20]
 80108bc:	f003 0302 	and.w	r3, r3, #2
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	d132      	bne.n	801092a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d918      	bls.n	8010902 <HAL_SPI_Transmit+0x1fa>
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d014      	beq.n	8010902 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	6812      	ldr	r2, [r2, #0]
 80108e2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80108e8:	1d1a      	adds	r2, r3, #4
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	3b02      	subs	r3, #2
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010900:	e037      	b.n	8010972 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010906:	881a      	ldrh	r2, [r3, #0]
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010910:	1c9a      	adds	r2, r3, #2
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801091c:	b29b      	uxth	r3, r3
 801091e:	3b01      	subs	r3, #1
 8010920:	b29a      	uxth	r2, r3
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010928:	e023      	b.n	8010972 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801092a:	f7f6 fc09 	bl	8007140 <HAL_GetTick>
 801092e:	4602      	mov	r2, r0
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	1ad3      	subs	r3, r2, r3
 8010934:	683a      	ldr	r2, [r7, #0]
 8010936:	429a      	cmp	r2, r3
 8010938:	d803      	bhi.n	8010942 <HAL_SPI_Transmit+0x23a>
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010940:	d102      	bne.n	8010948 <HAL_SPI_Transmit+0x240>
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d114      	bne.n	8010972 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010948:	68f8      	ldr	r0, [r7, #12]
 801094a:	f000 fb3d 	bl	8010fc8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010954:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2201      	movs	r2, #1
 8010962:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2200      	movs	r2, #0
 801096a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801096e:	2303      	movs	r3, #3
 8010970:	e0b3      	b.n	8010ada <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010978:	b29b      	uxth	r3, r3
 801097a:	2b00      	cmp	r3, #0
 801097c:	d19b      	bne.n	80108b6 <HAL_SPI_Transmit+0x1ae>
 801097e:	e086      	b.n	8010a8e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	695b      	ldr	r3, [r3, #20]
 8010986:	f003 0302 	and.w	r3, r3, #2
 801098a:	2b02      	cmp	r3, #2
 801098c:	d154      	bne.n	8010a38 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010994:	b29b      	uxth	r3, r3
 8010996:	2b03      	cmp	r3, #3
 8010998:	d918      	bls.n	80109cc <HAL_SPI_Transmit+0x2c4>
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801099e:	2b40      	cmp	r3, #64	@ 0x40
 80109a0:	d914      	bls.n	80109cc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	6812      	ldr	r2, [r2, #0]
 80109ac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109b2:	1d1a      	adds	r2, r3, #4
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80109be:	b29b      	uxth	r3, r3
 80109c0:	3b04      	subs	r3, #4
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80109ca:	e059      	b.n	8010a80 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d917      	bls.n	8010a08 <HAL_SPI_Transmit+0x300>
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d013      	beq.n	8010a08 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109e4:	881a      	ldrh	r2, [r3, #0]
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109ee:	1c9a      	adds	r2, r3, #2
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	3b02      	subs	r3, #2
 80109fe:	b29a      	uxth	r2, r3
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010a06:	e03b      	b.n	8010a80 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	3320      	adds	r3, #32
 8010a12:	7812      	ldrb	r2, [r2, #0]
 8010a14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a1a:	1c5a      	adds	r2, r3, #1
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	3b01      	subs	r3, #1
 8010a2a:	b29a      	uxth	r2, r3
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010a32:	e025      	b.n	8010a80 <HAL_SPI_Transmit+0x378>
 8010a34:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a38:	f7f6 fb82 	bl	8007140 <HAL_GetTick>
 8010a3c:	4602      	mov	r2, r0
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	683a      	ldr	r2, [r7, #0]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d803      	bhi.n	8010a50 <HAL_SPI_Transmit+0x348>
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a4e:	d102      	bne.n	8010a56 <HAL_SPI_Transmit+0x34e>
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d114      	bne.n	8010a80 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f000 fab6 	bl	8010fc8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2201      	movs	r2, #1
 8010a70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2200      	movs	r2, #0
 8010a78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	e02c      	b.n	8010ada <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	f47f af79 	bne.w	8010980 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	9300      	str	r3, [sp, #0]
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	2200      	movs	r2, #0
 8010a96:	2108      	movs	r1, #8
 8010a98:	68f8      	ldr	r0, [r7, #12]
 8010a9a:	f000 fb35 	bl	8011108 <SPI_WaitOnFlagUntilTimeout>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d007      	beq.n	8010ab4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010aaa:	f043 0220 	orr.w	r2, r3, #32
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f000 fa87 	bl	8010fc8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2201      	movs	r2, #1
 8010abe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d001      	beq.n	8010ad8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	e000      	b.n	8010ada <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8010ad8:	2300      	movs	r3, #0
  }
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3718      	adds	r7, #24
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop

08010ae4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b088      	sub	sp, #32
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	60b9      	str	r1, [r7, #8]
 8010aee:	603b      	str	r3, [r7, #0]
 8010af0:	4613      	mov	r3, r2
 8010af2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010af8:	095b      	lsrs	r3, r3, #5
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	3301      	adds	r3, #1
 8010afe:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	3330      	adds	r3, #48	@ 0x30
 8010b06:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010b08:	f7f6 fb1a 	bl	8007140 <HAL_GetTick>
 8010b0c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010b14:	b2db      	uxtb	r3, r3
 8010b16:	2b01      	cmp	r3, #1
 8010b18:	d001      	beq.n	8010b1e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8010b1a:	2302      	movs	r3, #2
 8010b1c:	e250      	b.n	8010fc0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d002      	beq.n	8010b2a <HAL_SPI_Receive+0x46>
 8010b24:	88fb      	ldrh	r3, [r7, #6]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d101      	bne.n	8010b2e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	e248      	b.n	8010fc0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010b34:	2b01      	cmp	r3, #1
 8010b36:	d101      	bne.n	8010b3c <HAL_SPI_Receive+0x58>
 8010b38:	2302      	movs	r3, #2
 8010b3a:	e241      	b.n	8010fc0 <HAL_SPI_Receive+0x4dc>
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2201      	movs	r2, #1
 8010b40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2204      	movs	r2, #4
 8010b48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2200      	movs	r2, #0
 8010b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	88fa      	ldrh	r2, [r7, #6]
 8010b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	88fa      	ldrh	r2, [r7, #6]
 8010b66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2200      	movs	r2, #0
 8010b84:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	689b      	ldr	r3, [r3, #8]
 8010b90:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010b94:	d108      	bne.n	8010ba8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010ba4:	601a      	str	r2, [r3, #0]
 8010ba6:	e009      	b.n	8010bbc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8010bba:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	685a      	ldr	r2, [r3, #4]
 8010bc2:	4b95      	ldr	r3, [pc, #596]	@ (8010e18 <HAL_SPI_Receive+0x334>)
 8010bc4:	4013      	ands	r3, r2
 8010bc6:	88f9      	ldrh	r1, [r7, #6]
 8010bc8:	68fa      	ldr	r2, [r7, #12]
 8010bca:	6812      	ldr	r2, [r2, #0]
 8010bcc:	430b      	orrs	r3, r1
 8010bce:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	681a      	ldr	r2, [r3, #0]
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f042 0201 	orr.w	r2, r2, #1
 8010bde:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010be8:	d107      	bne.n	8010bfa <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010bf8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	2b0f      	cmp	r3, #15
 8010c00:	d96c      	bls.n	8010cdc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010c02:	e064      	b.n	8010cce <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	695b      	ldr	r3, [r3, #20]
 8010c0a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	695b      	ldr	r3, [r3, #20]
 8010c12:	f003 0301 	and.w	r3, r3, #1
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d114      	bne.n	8010c44 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c22:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010c24:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c2a:	1d1a      	adds	r2, r3, #4
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010c42:	e044      	b.n	8010cce <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	8bfa      	ldrh	r2, [r7, #30]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d919      	bls.n	8010c86 <HAL_SPI_Receive+0x1a2>
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d014      	beq.n	8010c86 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681a      	ldr	r2, [r3, #0]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010c66:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c6c:	1d1a      	adds	r2, r3, #4
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	3b01      	subs	r3, #1
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010c84:	e023      	b.n	8010cce <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c86:	f7f6 fa5b 	bl	8007140 <HAL_GetTick>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	1ad3      	subs	r3, r2, r3
 8010c90:	683a      	ldr	r2, [r7, #0]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d803      	bhi.n	8010c9e <HAL_SPI_Receive+0x1ba>
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c9c:	d102      	bne.n	8010ca4 <HAL_SPI_Receive+0x1c0>
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d114      	bne.n	8010cce <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010ca4:	68f8      	ldr	r0, [r7, #12]
 8010ca6:	f000 f98f 	bl	8010fc8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010cb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010cca:	2303      	movs	r3, #3
 8010ccc:	e178      	b.n	8010fc0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d194      	bne.n	8010c04 <HAL_SPI_Receive+0x120>
 8010cda:	e15e      	b.n	8010f9a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	2b07      	cmp	r3, #7
 8010ce2:	f240 8153 	bls.w	8010f8c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010ce6:	e08f      	b.n	8010e08 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	695b      	ldr	r3, [r3, #20]
 8010cee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	f003 0301 	and.w	r3, r3, #1
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d114      	bne.n	8010d28 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d02:	69ba      	ldr	r2, [r7, #24]
 8010d04:	8812      	ldrh	r2, [r2, #0]
 8010d06:	b292      	uxth	r2, r2
 8010d08:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d0e:	1c9a      	adds	r2, r3, #2
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	3b01      	subs	r3, #1
 8010d1e:	b29a      	uxth	r2, r3
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010d26:	e06f      	b.n	8010e08 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	8bfa      	ldrh	r2, [r7, #30]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d924      	bls.n	8010d80 <HAL_SPI_Receive+0x29c>
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d01f      	beq.n	8010d80 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d44:	69ba      	ldr	r2, [r7, #24]
 8010d46:	8812      	ldrh	r2, [r2, #0]
 8010d48:	b292      	uxth	r2, r2
 8010d4a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d50:	1c9a      	adds	r2, r3, #2
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d5a:	69ba      	ldr	r2, [r7, #24]
 8010d5c:	8812      	ldrh	r2, [r2, #0]
 8010d5e:	b292      	uxth	r2, r2
 8010d60:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d66:	1c9a      	adds	r2, r3, #2
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d72:	b29b      	uxth	r3, r3
 8010d74:	3b02      	subs	r3, #2
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010d7e:	e043      	b.n	8010e08 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	d119      	bne.n	8010dc0 <HAL_SPI_Receive+0x2dc>
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d014      	beq.n	8010dc0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d9a:	69ba      	ldr	r2, [r7, #24]
 8010d9c:	8812      	ldrh	r2, [r2, #0]
 8010d9e:	b292      	uxth	r2, r2
 8010da0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010da6:	1c9a      	adds	r2, r3, #2
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010db2:	b29b      	uxth	r3, r3
 8010db4:	3b01      	subs	r3, #1
 8010db6:	b29a      	uxth	r2, r3
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010dbe:	e023      	b.n	8010e08 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010dc0:	f7f6 f9be 	bl	8007140 <HAL_GetTick>
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	683a      	ldr	r2, [r7, #0]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d803      	bhi.n	8010dd8 <HAL_SPI_Receive+0x2f4>
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dd6:	d102      	bne.n	8010dde <HAL_SPI_Receive+0x2fa>
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d114      	bne.n	8010e08 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	f000 f8f2 	bl	8010fc8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010dea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2201      	movs	r2, #1
 8010df8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010e04:	2303      	movs	r3, #3
 8010e06:	e0db      	b.n	8010fc0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	f47f af69 	bne.w	8010ce8 <HAL_SPI_Receive+0x204>
 8010e16:	e0c0      	b.n	8010f9a <HAL_SPI_Receive+0x4b6>
 8010e18:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	695b      	ldr	r3, [r3, #20]
 8010e22:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	695b      	ldr	r3, [r3, #20]
 8010e2a:	f003 0301 	and.w	r3, r3, #1
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d117      	bne.n	8010e62 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e3e:	7812      	ldrb	r2, [r2, #0]
 8010e40:	b2d2      	uxtb	r2, r2
 8010e42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e48:	1c5a      	adds	r2, r3, #1
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	3b01      	subs	r3, #1
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010e60:	e094      	b.n	8010f8c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	8bfa      	ldrh	r2, [r7, #30]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d946      	bls.n	8010efe <HAL_SPI_Receive+0x41a>
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d041      	beq.n	8010efe <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e86:	7812      	ldrb	r2, [r2, #0]
 8010e88:	b2d2      	uxtb	r2, r2
 8010e8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e90:	1c5a      	adds	r2, r3, #1
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ea2:	7812      	ldrb	r2, [r2, #0]
 8010ea4:	b2d2      	uxtb	r2, r2
 8010ea6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010eac:	1c5a      	adds	r2, r3, #1
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ebe:	7812      	ldrb	r2, [r2, #0]
 8010ec0:	b2d2      	uxtb	r2, r2
 8010ec2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ec8:	1c5a      	adds	r2, r3, #1
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010eda:	7812      	ldrb	r2, [r2, #0]
 8010edc:	b2d2      	uxtb	r2, r2
 8010ede:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ee4:	1c5a      	adds	r2, r3, #1
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	3b04      	subs	r3, #4
 8010ef4:	b29a      	uxth	r2, r3
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010efc:	e046      	b.n	8010f8c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	2b03      	cmp	r3, #3
 8010f08:	d81c      	bhi.n	8010f44 <HAL_SPI_Receive+0x460>
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d017      	beq.n	8010f44 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f20:	7812      	ldrb	r2, [r2, #0]
 8010f22:	b2d2      	uxtb	r2, r2
 8010f24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f2a:	1c5a      	adds	r2, r3, #1
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	3b01      	subs	r3, #1
 8010f3a:	b29a      	uxth	r2, r3
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010f42:	e023      	b.n	8010f8c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f44:	f7f6 f8fc 	bl	8007140 <HAL_GetTick>
 8010f48:	4602      	mov	r2, r0
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	1ad3      	subs	r3, r2, r3
 8010f4e:	683a      	ldr	r2, [r7, #0]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d803      	bhi.n	8010f5c <HAL_SPI_Receive+0x478>
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f5a:	d102      	bne.n	8010f62 <HAL_SPI_Receive+0x47e>
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d114      	bne.n	8010f8c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010f62:	68f8      	ldr	r0, [r7, #12]
 8010f64:	f000 f830 	bl	8010fc8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2200      	movs	r2, #0
 8010f84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010f88:	2303      	movs	r3, #3
 8010f8a:	e019      	b.n	8010fc0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f47f af41 	bne.w	8010e1c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010f9a:	68f8      	ldr	r0, [r7, #12]
 8010f9c:	f000 f814 	bl	8010fc8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2200      	movs	r2, #0
 8010fac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d001      	beq.n	8010fbe <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	e000      	b.n	8010fc0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8010fbe:	2300      	movs	r3, #0
  }
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3720      	adds	r7, #32
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	695b      	ldr	r3, [r3, #20]
 8010fd6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	699a      	ldr	r2, [r3, #24]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f042 0208 	orr.w	r2, r2, #8
 8010fe6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	699a      	ldr	r2, [r3, #24]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f042 0210 	orr.w	r2, r2, #16
 8010ff6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	681a      	ldr	r2, [r3, #0]
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	f022 0201 	bic.w	r2, r2, #1
 8011006:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	6919      	ldr	r1, [r3, #16]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	4b3c      	ldr	r3, [pc, #240]	@ (8011104 <SPI_CloseTransfer+0x13c>)
 8011014:	400b      	ands	r3, r1
 8011016:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	689a      	ldr	r2, [r3, #8]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011026:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801102e:	b2db      	uxtb	r3, r3
 8011030:	2b04      	cmp	r3, #4
 8011032:	d014      	beq.n	801105e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	f003 0320 	and.w	r3, r3, #32
 801103a:	2b00      	cmp	r3, #0
 801103c:	d00f      	beq.n	801105e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011044:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	699a      	ldr	r2, [r3, #24]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f042 0220 	orr.w	r2, r2, #32
 801105c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011064:	b2db      	uxtb	r3, r3
 8011066:	2b03      	cmp	r3, #3
 8011068:	d014      	beq.n	8011094 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011070:	2b00      	cmp	r3, #0
 8011072:	d00f      	beq.n	8011094 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801107a:	f043 0204 	orr.w	r2, r3, #4
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	699a      	ldr	r2, [r3, #24]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011092:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801109a:	2b00      	cmp	r3, #0
 801109c:	d00f      	beq.n	80110be <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80110a4:	f043 0201 	orr.w	r2, r3, #1
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	699a      	ldr	r2, [r3, #24]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80110bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d00f      	beq.n	80110e8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80110ce:	f043 0208 	orr.w	r2, r3, #8
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	699a      	ldr	r2, [r3, #24]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80110e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2200      	movs	r2, #0
 80110f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80110f8:	bf00      	nop
 80110fa:	3714      	adds	r7, #20
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr
 8011104:	fffffc90 	.word	0xfffffc90

08011108 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	603b      	str	r3, [r7, #0]
 8011114:	4613      	mov	r3, r2
 8011116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011118:	e010      	b.n	801113c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801111a:	f7f6 f811 	bl	8007140 <HAL_GetTick>
 801111e:	4602      	mov	r2, r0
 8011120:	69bb      	ldr	r3, [r7, #24]
 8011122:	1ad3      	subs	r3, r2, r3
 8011124:	683a      	ldr	r2, [r7, #0]
 8011126:	429a      	cmp	r2, r3
 8011128:	d803      	bhi.n	8011132 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011130:	d102      	bne.n	8011138 <SPI_WaitOnFlagUntilTimeout+0x30>
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d101      	bne.n	801113c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011138:	2303      	movs	r3, #3
 801113a:	e00f      	b.n	801115c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	695a      	ldr	r2, [r3, #20]
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	4013      	ands	r3, r2
 8011146:	68ba      	ldr	r2, [r7, #8]
 8011148:	429a      	cmp	r2, r3
 801114a:	bf0c      	ite	eq
 801114c:	2301      	moveq	r3, #1
 801114e:	2300      	movne	r3, #0
 8011150:	b2db      	uxtb	r3, r3
 8011152:	461a      	mov	r2, r3
 8011154:	79fb      	ldrb	r3, [r7, #7]
 8011156:	429a      	cmp	r2, r3
 8011158:	d0df      	beq.n	801111a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801115a:	2300      	movs	r3, #0
}
 801115c:	4618      	mov	r0, r3
 801115e:	3710      	adds	r7, #16
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011164:	b480      	push	{r7}
 8011166:	b085      	sub	sp, #20
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011170:	095b      	lsrs	r3, r3, #5
 8011172:	3301      	adds	r3, #1
 8011174:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	3301      	adds	r3, #1
 801117c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	3307      	adds	r3, #7
 8011182:	08db      	lsrs	r3, r3, #3
 8011184:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	68fa      	ldr	r2, [r7, #12]
 801118a:	fb02 f303 	mul.w	r3, r2, r3
}
 801118e:	4618      	mov	r0, r3
 8011190:	3714      	adds	r7, #20
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr

0801119a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801119a:	b580      	push	{r7, lr}
 801119c:	b082      	sub	sp, #8
 801119e:	af00      	add	r7, sp, #0
 80111a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d101      	bne.n	80111ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80111a8:	2301      	movs	r3, #1
 80111aa:	e049      	b.n	8011240 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d106      	bne.n	80111c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2200      	movs	r2, #0
 80111bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f7f5 f877 	bl	80062b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2202      	movs	r2, #2
 80111ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	3304      	adds	r3, #4
 80111d6:	4619      	mov	r1, r3
 80111d8:	4610      	mov	r0, r2
 80111da:	f000 fa99 	bl	8011710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2201      	movs	r2, #1
 80111e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2201      	movs	r2, #1
 80111ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2201      	movs	r2, #1
 80111f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2201      	movs	r2, #1
 80111fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2201      	movs	r2, #1
 8011202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2201      	movs	r2, #1
 801120a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2201      	movs	r2, #1
 8011212:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2201      	movs	r2, #1
 801121a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2201      	movs	r2, #1
 8011222:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2201      	movs	r2, #1
 801122a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2201      	movs	r2, #1
 8011232:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2201      	movs	r2, #1
 801123a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801123e:	2300      	movs	r3, #0
}
 8011240:	4618      	mov	r0, r3
 8011242:	3708      	adds	r7, #8
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}

08011248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d101      	bne.n	801125a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011256:	2301      	movs	r3, #1
 8011258:	e049      	b.n	80112ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011260:	b2db      	uxtb	r3, r3
 8011262:	2b00      	cmp	r3, #0
 8011264:	d106      	bne.n	8011274 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2200      	movs	r2, #0
 801126a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f7f5 f842 	bl	80062f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2202      	movs	r2, #2
 8011278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	3304      	adds	r3, #4
 8011284:	4619      	mov	r1, r3
 8011286:	4610      	mov	r0, r2
 8011288:	f000 fa42 	bl	8011710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2201      	movs	r2, #1
 8011290:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2201      	movs	r2, #1
 8011298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2201      	movs	r2, #1
 80112a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2201      	movs	r2, #1
 80112a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2201      	movs	r2, #1
 80112b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2201      	movs	r2, #1
 80112b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2201      	movs	r2, #1
 80112c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2201      	movs	r2, #1
 80112c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2201      	movs	r2, #1
 80112d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2201      	movs	r2, #1
 80112d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2201      	movs	r2, #1
 80112e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2201      	movs	r2, #1
 80112e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80112ec:	2300      	movs	r3, #0
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3708      	adds	r7, #8
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
	...

080112f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b086      	sub	sp, #24
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	60f8      	str	r0, [r7, #12]
 8011300:	60b9      	str	r1, [r7, #8]
 8011302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011304:	2300      	movs	r3, #0
 8011306:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801130e:	2b01      	cmp	r3, #1
 8011310:	d101      	bne.n	8011316 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011312:	2302      	movs	r3, #2
 8011314:	e0ff      	b.n	8011516 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2201      	movs	r2, #1
 801131a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2b14      	cmp	r3, #20
 8011322:	f200 80f0 	bhi.w	8011506 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011326:	a201      	add	r2, pc, #4	@ (adr r2, 801132c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801132c:	08011381 	.word	0x08011381
 8011330:	08011507 	.word	0x08011507
 8011334:	08011507 	.word	0x08011507
 8011338:	08011507 	.word	0x08011507
 801133c:	080113c1 	.word	0x080113c1
 8011340:	08011507 	.word	0x08011507
 8011344:	08011507 	.word	0x08011507
 8011348:	08011507 	.word	0x08011507
 801134c:	08011403 	.word	0x08011403
 8011350:	08011507 	.word	0x08011507
 8011354:	08011507 	.word	0x08011507
 8011358:	08011507 	.word	0x08011507
 801135c:	08011443 	.word	0x08011443
 8011360:	08011507 	.word	0x08011507
 8011364:	08011507 	.word	0x08011507
 8011368:	08011507 	.word	0x08011507
 801136c:	08011485 	.word	0x08011485
 8011370:	08011507 	.word	0x08011507
 8011374:	08011507 	.word	0x08011507
 8011378:	08011507 	.word	0x08011507
 801137c:	080114c5 	.word	0x080114c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	68b9      	ldr	r1, [r7, #8]
 8011386:	4618      	mov	r0, r3
 8011388:	f000 fa74 	bl	8011874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	699a      	ldr	r2, [r3, #24]
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	f042 0208 	orr.w	r2, r2, #8
 801139a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	699a      	ldr	r2, [r3, #24]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f022 0204 	bic.w	r2, r2, #4
 80113aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	6999      	ldr	r1, [r3, #24]
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	691a      	ldr	r2, [r3, #16]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	430a      	orrs	r2, r1
 80113bc:	619a      	str	r2, [r3, #24]
      break;
 80113be:	e0a5      	b.n	801150c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	68b9      	ldr	r1, [r7, #8]
 80113c6:	4618      	mov	r0, r3
 80113c8:	f000 fae4 	bl	8011994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	699a      	ldr	r2, [r3, #24]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80113da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	699a      	ldr	r2, [r3, #24]
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80113ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	6999      	ldr	r1, [r3, #24]
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	691b      	ldr	r3, [r3, #16]
 80113f6:	021a      	lsls	r2, r3, #8
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	430a      	orrs	r2, r1
 80113fe:	619a      	str	r2, [r3, #24]
      break;
 8011400:	e084      	b.n	801150c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	68b9      	ldr	r1, [r7, #8]
 8011408:	4618      	mov	r0, r3
 801140a:	f000 fb4d 	bl	8011aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	69da      	ldr	r2, [r3, #28]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f042 0208 	orr.w	r2, r2, #8
 801141c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	69da      	ldr	r2, [r3, #28]
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f022 0204 	bic.w	r2, r2, #4
 801142c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	69d9      	ldr	r1, [r3, #28]
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	691a      	ldr	r2, [r3, #16]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	430a      	orrs	r2, r1
 801143e:	61da      	str	r2, [r3, #28]
      break;
 8011440:	e064      	b.n	801150c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	68b9      	ldr	r1, [r7, #8]
 8011448:	4618      	mov	r0, r3
 801144a:	f000 fbb5 	bl	8011bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	69da      	ldr	r2, [r3, #28]
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801145c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	69da      	ldr	r2, [r3, #28]
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801146c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	69d9      	ldr	r1, [r3, #28]
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	691b      	ldr	r3, [r3, #16]
 8011478:	021a      	lsls	r2, r3, #8
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	430a      	orrs	r2, r1
 8011480:	61da      	str	r2, [r3, #28]
      break;
 8011482:	e043      	b.n	801150c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	68b9      	ldr	r1, [r7, #8]
 801148a:	4618      	mov	r0, r3
 801148c:	f000 fbfe 	bl	8011c8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f042 0208 	orr.w	r2, r2, #8
 801149e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f022 0204 	bic.w	r2, r2, #4
 80114ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	691a      	ldr	r2, [r3, #16]
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	430a      	orrs	r2, r1
 80114c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80114c2:	e023      	b.n	801150c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	68b9      	ldr	r1, [r7, #8]
 80114ca:	4618      	mov	r0, r3
 80114cc:	f000 fc42 	bl	8011d54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80114de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80114ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	691b      	ldr	r3, [r3, #16]
 80114fa:	021a      	lsls	r2, r3, #8
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	430a      	orrs	r2, r1
 8011502:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011504:	e002      	b.n	801150c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011506:	2301      	movs	r3, #1
 8011508:	75fb      	strb	r3, [r7, #23]
      break;
 801150a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	2200      	movs	r2, #0
 8011510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011514:	7dfb      	ldrb	r3, [r7, #23]
}
 8011516:	4618      	mov	r0, r3
 8011518:	3718      	adds	r7, #24
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop

08011520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801152a:	2300      	movs	r3, #0
 801152c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011534:	2b01      	cmp	r3, #1
 8011536:	d101      	bne.n	801153c <HAL_TIM_ConfigClockSource+0x1c>
 8011538:	2302      	movs	r3, #2
 801153a:	e0dc      	b.n	80116f6 <HAL_TIM_ConfigClockSource+0x1d6>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2201      	movs	r2, #1
 8011540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2202      	movs	r2, #2
 8011548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	689b      	ldr	r3, [r3, #8]
 8011552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	4b6a      	ldr	r3, [pc, #424]	@ (8011700 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011558:	4013      	ands	r3, r2
 801155a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	68ba      	ldr	r2, [r7, #8]
 801156a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	4a64      	ldr	r2, [pc, #400]	@ (8011704 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011572:	4293      	cmp	r3, r2
 8011574:	f000 80a9 	beq.w	80116ca <HAL_TIM_ConfigClockSource+0x1aa>
 8011578:	4a62      	ldr	r2, [pc, #392]	@ (8011704 <HAL_TIM_ConfigClockSource+0x1e4>)
 801157a:	4293      	cmp	r3, r2
 801157c:	f200 80ae 	bhi.w	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 8011580:	4a61      	ldr	r2, [pc, #388]	@ (8011708 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011582:	4293      	cmp	r3, r2
 8011584:	f000 80a1 	beq.w	80116ca <HAL_TIM_ConfigClockSource+0x1aa>
 8011588:	4a5f      	ldr	r2, [pc, #380]	@ (8011708 <HAL_TIM_ConfigClockSource+0x1e8>)
 801158a:	4293      	cmp	r3, r2
 801158c:	f200 80a6 	bhi.w	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 8011590:	4a5e      	ldr	r2, [pc, #376]	@ (801170c <HAL_TIM_ConfigClockSource+0x1ec>)
 8011592:	4293      	cmp	r3, r2
 8011594:	f000 8099 	beq.w	80116ca <HAL_TIM_ConfigClockSource+0x1aa>
 8011598:	4a5c      	ldr	r2, [pc, #368]	@ (801170c <HAL_TIM_ConfigClockSource+0x1ec>)
 801159a:	4293      	cmp	r3, r2
 801159c:	f200 809e 	bhi.w	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 80115a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80115a4:	f000 8091 	beq.w	80116ca <HAL_TIM_ConfigClockSource+0x1aa>
 80115a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80115ac:	f200 8096 	bhi.w	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 80115b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115b4:	f000 8089 	beq.w	80116ca <HAL_TIM_ConfigClockSource+0x1aa>
 80115b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115bc:	f200 808e 	bhi.w	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 80115c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80115c4:	d03e      	beq.n	8011644 <HAL_TIM_ConfigClockSource+0x124>
 80115c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80115ca:	f200 8087 	bhi.w	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 80115ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80115d2:	f000 8086 	beq.w	80116e2 <HAL_TIM_ConfigClockSource+0x1c2>
 80115d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80115da:	d87f      	bhi.n	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 80115dc:	2b70      	cmp	r3, #112	@ 0x70
 80115de:	d01a      	beq.n	8011616 <HAL_TIM_ConfigClockSource+0xf6>
 80115e0:	2b70      	cmp	r3, #112	@ 0x70
 80115e2:	d87b      	bhi.n	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 80115e4:	2b60      	cmp	r3, #96	@ 0x60
 80115e6:	d050      	beq.n	801168a <HAL_TIM_ConfigClockSource+0x16a>
 80115e8:	2b60      	cmp	r3, #96	@ 0x60
 80115ea:	d877      	bhi.n	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 80115ec:	2b50      	cmp	r3, #80	@ 0x50
 80115ee:	d03c      	beq.n	801166a <HAL_TIM_ConfigClockSource+0x14a>
 80115f0:	2b50      	cmp	r3, #80	@ 0x50
 80115f2:	d873      	bhi.n	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 80115f4:	2b40      	cmp	r3, #64	@ 0x40
 80115f6:	d058      	beq.n	80116aa <HAL_TIM_ConfigClockSource+0x18a>
 80115f8:	2b40      	cmp	r3, #64	@ 0x40
 80115fa:	d86f      	bhi.n	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 80115fc:	2b30      	cmp	r3, #48	@ 0x30
 80115fe:	d064      	beq.n	80116ca <HAL_TIM_ConfigClockSource+0x1aa>
 8011600:	2b30      	cmp	r3, #48	@ 0x30
 8011602:	d86b      	bhi.n	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 8011604:	2b20      	cmp	r3, #32
 8011606:	d060      	beq.n	80116ca <HAL_TIM_ConfigClockSource+0x1aa>
 8011608:	2b20      	cmp	r3, #32
 801160a:	d867      	bhi.n	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
 801160c:	2b00      	cmp	r3, #0
 801160e:	d05c      	beq.n	80116ca <HAL_TIM_ConfigClockSource+0x1aa>
 8011610:	2b10      	cmp	r3, #16
 8011612:	d05a      	beq.n	80116ca <HAL_TIM_ConfigClockSource+0x1aa>
 8011614:	e062      	b.n	80116dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011626:	f000 fc79 	bl	8011f1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	689b      	ldr	r3, [r3, #8]
 8011630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	68ba      	ldr	r2, [r7, #8]
 8011640:	609a      	str	r2, [r3, #8]
      break;
 8011642:	e04f      	b.n	80116e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011654:	f000 fc62 	bl	8011f1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	689a      	ldr	r2, [r3, #8]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011666:	609a      	str	r2, [r3, #8]
      break;
 8011668:	e03c      	b.n	80116e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011676:	461a      	mov	r2, r3
 8011678:	f000 fbd2 	bl	8011e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	2150      	movs	r1, #80	@ 0x50
 8011682:	4618      	mov	r0, r3
 8011684:	f000 fc2c 	bl	8011ee0 <TIM_ITRx_SetConfig>
      break;
 8011688:	e02c      	b.n	80116e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011696:	461a      	mov	r2, r3
 8011698:	f000 fbf1 	bl	8011e7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2160      	movs	r1, #96	@ 0x60
 80116a2:	4618      	mov	r0, r3
 80116a4:	f000 fc1c 	bl	8011ee0 <TIM_ITRx_SetConfig>
      break;
 80116a8:	e01c      	b.n	80116e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80116b6:	461a      	mov	r2, r3
 80116b8:	f000 fbb2 	bl	8011e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2140      	movs	r1, #64	@ 0x40
 80116c2:	4618      	mov	r0, r3
 80116c4:	f000 fc0c 	bl	8011ee0 <TIM_ITRx_SetConfig>
      break;
 80116c8:	e00c      	b.n	80116e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	4619      	mov	r1, r3
 80116d4:	4610      	mov	r0, r2
 80116d6:	f000 fc03 	bl	8011ee0 <TIM_ITRx_SetConfig>
      break;
 80116da:	e003      	b.n	80116e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80116dc:	2301      	movs	r3, #1
 80116de:	73fb      	strb	r3, [r7, #15]
      break;
 80116e0:	e000      	b.n	80116e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80116e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2201      	movs	r2, #1
 80116e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2200      	movs	r2, #0
 80116f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80116f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3710      	adds	r7, #16
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	ffceff88 	.word	0xffceff88
 8011704:	00100040 	.word	0x00100040
 8011708:	00100030 	.word	0x00100030
 801170c:	00100020 	.word	0x00100020

08011710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011710:	b480      	push	{r7}
 8011712:	b085      	sub	sp, #20
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	4a4a      	ldr	r2, [pc, #296]	@ (801184c <TIM_Base_SetConfig+0x13c>)
 8011724:	4293      	cmp	r3, r2
 8011726:	d013      	beq.n	8011750 <TIM_Base_SetConfig+0x40>
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801172e:	d00f      	beq.n	8011750 <TIM_Base_SetConfig+0x40>
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	4a47      	ldr	r2, [pc, #284]	@ (8011850 <TIM_Base_SetConfig+0x140>)
 8011734:	4293      	cmp	r3, r2
 8011736:	d00b      	beq.n	8011750 <TIM_Base_SetConfig+0x40>
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	4a46      	ldr	r2, [pc, #280]	@ (8011854 <TIM_Base_SetConfig+0x144>)
 801173c:	4293      	cmp	r3, r2
 801173e:	d007      	beq.n	8011750 <TIM_Base_SetConfig+0x40>
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	4a45      	ldr	r2, [pc, #276]	@ (8011858 <TIM_Base_SetConfig+0x148>)
 8011744:	4293      	cmp	r3, r2
 8011746:	d003      	beq.n	8011750 <TIM_Base_SetConfig+0x40>
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	4a44      	ldr	r2, [pc, #272]	@ (801185c <TIM_Base_SetConfig+0x14c>)
 801174c:	4293      	cmp	r3, r2
 801174e:	d108      	bne.n	8011762 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	68fa      	ldr	r2, [r7, #12]
 801175e:	4313      	orrs	r3, r2
 8011760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	4a39      	ldr	r2, [pc, #228]	@ (801184c <TIM_Base_SetConfig+0x13c>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d027      	beq.n	80117ba <TIM_Base_SetConfig+0xaa>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011770:	d023      	beq.n	80117ba <TIM_Base_SetConfig+0xaa>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	4a36      	ldr	r2, [pc, #216]	@ (8011850 <TIM_Base_SetConfig+0x140>)
 8011776:	4293      	cmp	r3, r2
 8011778:	d01f      	beq.n	80117ba <TIM_Base_SetConfig+0xaa>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	4a35      	ldr	r2, [pc, #212]	@ (8011854 <TIM_Base_SetConfig+0x144>)
 801177e:	4293      	cmp	r3, r2
 8011780:	d01b      	beq.n	80117ba <TIM_Base_SetConfig+0xaa>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	4a34      	ldr	r2, [pc, #208]	@ (8011858 <TIM_Base_SetConfig+0x148>)
 8011786:	4293      	cmp	r3, r2
 8011788:	d017      	beq.n	80117ba <TIM_Base_SetConfig+0xaa>
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	4a33      	ldr	r2, [pc, #204]	@ (801185c <TIM_Base_SetConfig+0x14c>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d013      	beq.n	80117ba <TIM_Base_SetConfig+0xaa>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4a32      	ldr	r2, [pc, #200]	@ (8011860 <TIM_Base_SetConfig+0x150>)
 8011796:	4293      	cmp	r3, r2
 8011798:	d00f      	beq.n	80117ba <TIM_Base_SetConfig+0xaa>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	4a31      	ldr	r2, [pc, #196]	@ (8011864 <TIM_Base_SetConfig+0x154>)
 801179e:	4293      	cmp	r3, r2
 80117a0:	d00b      	beq.n	80117ba <TIM_Base_SetConfig+0xaa>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4a30      	ldr	r2, [pc, #192]	@ (8011868 <TIM_Base_SetConfig+0x158>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d007      	beq.n	80117ba <TIM_Base_SetConfig+0xaa>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4a2f      	ldr	r2, [pc, #188]	@ (801186c <TIM_Base_SetConfig+0x15c>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d003      	beq.n	80117ba <TIM_Base_SetConfig+0xaa>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4a2e      	ldr	r2, [pc, #184]	@ (8011870 <TIM_Base_SetConfig+0x160>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d108      	bne.n	80117cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80117c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	68fa      	ldr	r2, [r7, #12]
 80117c8:	4313      	orrs	r3, r2
 80117ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	695b      	ldr	r3, [r3, #20]
 80117d6:	4313      	orrs	r3, r2
 80117d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	68fa      	ldr	r2, [r7, #12]
 80117de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	689a      	ldr	r2, [r3, #8]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	4a16      	ldr	r2, [pc, #88]	@ (801184c <TIM_Base_SetConfig+0x13c>)
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d00f      	beq.n	8011818 <TIM_Base_SetConfig+0x108>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4a18      	ldr	r2, [pc, #96]	@ (801185c <TIM_Base_SetConfig+0x14c>)
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d00b      	beq.n	8011818 <TIM_Base_SetConfig+0x108>
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	4a17      	ldr	r2, [pc, #92]	@ (8011860 <TIM_Base_SetConfig+0x150>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d007      	beq.n	8011818 <TIM_Base_SetConfig+0x108>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	4a16      	ldr	r2, [pc, #88]	@ (8011864 <TIM_Base_SetConfig+0x154>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d003      	beq.n	8011818 <TIM_Base_SetConfig+0x108>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	4a15      	ldr	r2, [pc, #84]	@ (8011868 <TIM_Base_SetConfig+0x158>)
 8011814:	4293      	cmp	r3, r2
 8011816:	d103      	bne.n	8011820 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	691a      	ldr	r2, [r3, #16]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2201      	movs	r2, #1
 8011824:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	691b      	ldr	r3, [r3, #16]
 801182a:	f003 0301 	and.w	r3, r3, #1
 801182e:	2b01      	cmp	r3, #1
 8011830:	d105      	bne.n	801183e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	691b      	ldr	r3, [r3, #16]
 8011836:	f023 0201 	bic.w	r2, r3, #1
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	611a      	str	r2, [r3, #16]
  }
}
 801183e:	bf00      	nop
 8011840:	3714      	adds	r7, #20
 8011842:	46bd      	mov	sp, r7
 8011844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	40010000 	.word	0x40010000
 8011850:	40000400 	.word	0x40000400
 8011854:	40000800 	.word	0x40000800
 8011858:	40000c00 	.word	0x40000c00
 801185c:	40010400 	.word	0x40010400
 8011860:	40014000 	.word	0x40014000
 8011864:	40014400 	.word	0x40014400
 8011868:	40014800 	.word	0x40014800
 801186c:	4000e000 	.word	0x4000e000
 8011870:	4000e400 	.word	0x4000e400

08011874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011874:	b480      	push	{r7}
 8011876:	b087      	sub	sp, #28
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6a1b      	ldr	r3, [r3, #32]
 8011882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6a1b      	ldr	r3, [r3, #32]
 8011888:	f023 0201 	bic.w	r2, r3, #1
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	699b      	ldr	r3, [r3, #24]
 801189a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801189c:	68fa      	ldr	r2, [r7, #12]
 801189e:	4b37      	ldr	r3, [pc, #220]	@ (801197c <TIM_OC1_SetConfig+0x108>)
 80118a0:	4013      	ands	r3, r2
 80118a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f023 0303 	bic.w	r3, r3, #3
 80118aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	68fa      	ldr	r2, [r7, #12]
 80118b2:	4313      	orrs	r3, r2
 80118b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	f023 0302 	bic.w	r3, r3, #2
 80118bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	689b      	ldr	r3, [r3, #8]
 80118c2:	697a      	ldr	r2, [r7, #20]
 80118c4:	4313      	orrs	r3, r2
 80118c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	4a2d      	ldr	r2, [pc, #180]	@ (8011980 <TIM_OC1_SetConfig+0x10c>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d00f      	beq.n	80118f0 <TIM_OC1_SetConfig+0x7c>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	4a2c      	ldr	r2, [pc, #176]	@ (8011984 <TIM_OC1_SetConfig+0x110>)
 80118d4:	4293      	cmp	r3, r2
 80118d6:	d00b      	beq.n	80118f0 <TIM_OC1_SetConfig+0x7c>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	4a2b      	ldr	r2, [pc, #172]	@ (8011988 <TIM_OC1_SetConfig+0x114>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d007      	beq.n	80118f0 <TIM_OC1_SetConfig+0x7c>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	4a2a      	ldr	r2, [pc, #168]	@ (801198c <TIM_OC1_SetConfig+0x118>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d003      	beq.n	80118f0 <TIM_OC1_SetConfig+0x7c>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	4a29      	ldr	r2, [pc, #164]	@ (8011990 <TIM_OC1_SetConfig+0x11c>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d10c      	bne.n	801190a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	f023 0308 	bic.w	r3, r3, #8
 80118f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	68db      	ldr	r3, [r3, #12]
 80118fc:	697a      	ldr	r2, [r7, #20]
 80118fe:	4313      	orrs	r3, r2
 8011900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	f023 0304 	bic.w	r3, r3, #4
 8011908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4a1c      	ldr	r2, [pc, #112]	@ (8011980 <TIM_OC1_SetConfig+0x10c>)
 801190e:	4293      	cmp	r3, r2
 8011910:	d00f      	beq.n	8011932 <TIM_OC1_SetConfig+0xbe>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	4a1b      	ldr	r2, [pc, #108]	@ (8011984 <TIM_OC1_SetConfig+0x110>)
 8011916:	4293      	cmp	r3, r2
 8011918:	d00b      	beq.n	8011932 <TIM_OC1_SetConfig+0xbe>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	4a1a      	ldr	r2, [pc, #104]	@ (8011988 <TIM_OC1_SetConfig+0x114>)
 801191e:	4293      	cmp	r3, r2
 8011920:	d007      	beq.n	8011932 <TIM_OC1_SetConfig+0xbe>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4a19      	ldr	r2, [pc, #100]	@ (801198c <TIM_OC1_SetConfig+0x118>)
 8011926:	4293      	cmp	r3, r2
 8011928:	d003      	beq.n	8011932 <TIM_OC1_SetConfig+0xbe>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	4a18      	ldr	r2, [pc, #96]	@ (8011990 <TIM_OC1_SetConfig+0x11c>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d111      	bne.n	8011956 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	695b      	ldr	r3, [r3, #20]
 8011946:	693a      	ldr	r2, [r7, #16]
 8011948:	4313      	orrs	r3, r2
 801194a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	699b      	ldr	r3, [r3, #24]
 8011950:	693a      	ldr	r2, [r7, #16]
 8011952:	4313      	orrs	r3, r2
 8011954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	693a      	ldr	r2, [r7, #16]
 801195a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	68fa      	ldr	r2, [r7, #12]
 8011960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	685a      	ldr	r2, [r3, #4]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	697a      	ldr	r2, [r7, #20]
 801196e:	621a      	str	r2, [r3, #32]
}
 8011970:	bf00      	nop
 8011972:	371c      	adds	r7, #28
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr
 801197c:	fffeff8f 	.word	0xfffeff8f
 8011980:	40010000 	.word	0x40010000
 8011984:	40010400 	.word	0x40010400
 8011988:	40014000 	.word	0x40014000
 801198c:	40014400 	.word	0x40014400
 8011990:	40014800 	.word	0x40014800

08011994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011994:	b480      	push	{r7}
 8011996:	b087      	sub	sp, #28
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6a1b      	ldr	r3, [r3, #32]
 80119a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6a1b      	ldr	r3, [r3, #32]
 80119a8:	f023 0210 	bic.w	r2, r3, #16
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	699b      	ldr	r3, [r3, #24]
 80119ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80119bc:	68fa      	ldr	r2, [r7, #12]
 80119be:	4b34      	ldr	r3, [pc, #208]	@ (8011a90 <TIM_OC2_SetConfig+0xfc>)
 80119c0:	4013      	ands	r3, r2
 80119c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80119ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	021b      	lsls	r3, r3, #8
 80119d2:	68fa      	ldr	r2, [r7, #12]
 80119d4:	4313      	orrs	r3, r2
 80119d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	f023 0320 	bic.w	r3, r3, #32
 80119de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	689b      	ldr	r3, [r3, #8]
 80119e4:	011b      	lsls	r3, r3, #4
 80119e6:	697a      	ldr	r2, [r7, #20]
 80119e8:	4313      	orrs	r3, r2
 80119ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	4a29      	ldr	r2, [pc, #164]	@ (8011a94 <TIM_OC2_SetConfig+0x100>)
 80119f0:	4293      	cmp	r3, r2
 80119f2:	d003      	beq.n	80119fc <TIM_OC2_SetConfig+0x68>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	4a28      	ldr	r2, [pc, #160]	@ (8011a98 <TIM_OC2_SetConfig+0x104>)
 80119f8:	4293      	cmp	r3, r2
 80119fa:	d10d      	bne.n	8011a18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	011b      	lsls	r3, r3, #4
 8011a0a:	697a      	ldr	r2, [r7, #20]
 8011a0c:	4313      	orrs	r3, r2
 8011a0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8011a94 <TIM_OC2_SetConfig+0x100>)
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	d00f      	beq.n	8011a40 <TIM_OC2_SetConfig+0xac>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4a1d      	ldr	r2, [pc, #116]	@ (8011a98 <TIM_OC2_SetConfig+0x104>)
 8011a24:	4293      	cmp	r3, r2
 8011a26:	d00b      	beq.n	8011a40 <TIM_OC2_SetConfig+0xac>
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8011a9c <TIM_OC2_SetConfig+0x108>)
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	d007      	beq.n	8011a40 <TIM_OC2_SetConfig+0xac>
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	4a1b      	ldr	r2, [pc, #108]	@ (8011aa0 <TIM_OC2_SetConfig+0x10c>)
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d003      	beq.n	8011a40 <TIM_OC2_SetConfig+0xac>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8011aa4 <TIM_OC2_SetConfig+0x110>)
 8011a3c:	4293      	cmp	r3, r2
 8011a3e:	d113      	bne.n	8011a68 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	695b      	ldr	r3, [r3, #20]
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	693a      	ldr	r2, [r7, #16]
 8011a58:	4313      	orrs	r3, r2
 8011a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	699b      	ldr	r3, [r3, #24]
 8011a60:	009b      	lsls	r3, r3, #2
 8011a62:	693a      	ldr	r2, [r7, #16]
 8011a64:	4313      	orrs	r3, r2
 8011a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	693a      	ldr	r2, [r7, #16]
 8011a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	68fa      	ldr	r2, [r7, #12]
 8011a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	685a      	ldr	r2, [r3, #4]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	697a      	ldr	r2, [r7, #20]
 8011a80:	621a      	str	r2, [r3, #32]
}
 8011a82:	bf00      	nop
 8011a84:	371c      	adds	r7, #28
 8011a86:	46bd      	mov	sp, r7
 8011a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8c:	4770      	bx	lr
 8011a8e:	bf00      	nop
 8011a90:	feff8fff 	.word	0xfeff8fff
 8011a94:	40010000 	.word	0x40010000
 8011a98:	40010400 	.word	0x40010400
 8011a9c:	40014000 	.word	0x40014000
 8011aa0:	40014400 	.word	0x40014400
 8011aa4:	40014800 	.word	0x40014800

08011aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b087      	sub	sp, #28
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6a1b      	ldr	r3, [r3, #32]
 8011ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6a1b      	ldr	r3, [r3, #32]
 8011abc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	69db      	ldr	r3, [r3, #28]
 8011ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011ad0:	68fa      	ldr	r2, [r7, #12]
 8011ad2:	4b33      	ldr	r3, [pc, #204]	@ (8011ba0 <TIM_OC3_SetConfig+0xf8>)
 8011ad4:	4013      	ands	r3, r2
 8011ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	f023 0303 	bic.w	r3, r3, #3
 8011ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	68fa      	ldr	r2, [r7, #12]
 8011ae6:	4313      	orrs	r3, r2
 8011ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	689b      	ldr	r3, [r3, #8]
 8011af6:	021b      	lsls	r3, r3, #8
 8011af8:	697a      	ldr	r2, [r7, #20]
 8011afa:	4313      	orrs	r3, r2
 8011afc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	4a28      	ldr	r2, [pc, #160]	@ (8011ba4 <TIM_OC3_SetConfig+0xfc>)
 8011b02:	4293      	cmp	r3, r2
 8011b04:	d003      	beq.n	8011b0e <TIM_OC3_SetConfig+0x66>
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	4a27      	ldr	r2, [pc, #156]	@ (8011ba8 <TIM_OC3_SetConfig+0x100>)
 8011b0a:	4293      	cmp	r3, r2
 8011b0c:	d10d      	bne.n	8011b2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011b14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	021b      	lsls	r3, r3, #8
 8011b1c:	697a      	ldr	r2, [r7, #20]
 8011b1e:	4313      	orrs	r3, r2
 8011b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8011ba4 <TIM_OC3_SetConfig+0xfc>)
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d00f      	beq.n	8011b52 <TIM_OC3_SetConfig+0xaa>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	4a1c      	ldr	r2, [pc, #112]	@ (8011ba8 <TIM_OC3_SetConfig+0x100>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d00b      	beq.n	8011b52 <TIM_OC3_SetConfig+0xaa>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8011bac <TIM_OC3_SetConfig+0x104>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d007      	beq.n	8011b52 <TIM_OC3_SetConfig+0xaa>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4a1a      	ldr	r2, [pc, #104]	@ (8011bb0 <TIM_OC3_SetConfig+0x108>)
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d003      	beq.n	8011b52 <TIM_OC3_SetConfig+0xaa>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4a19      	ldr	r2, [pc, #100]	@ (8011bb4 <TIM_OC3_SetConfig+0x10c>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d113      	bne.n	8011b7a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	695b      	ldr	r3, [r3, #20]
 8011b66:	011b      	lsls	r3, r3, #4
 8011b68:	693a      	ldr	r2, [r7, #16]
 8011b6a:	4313      	orrs	r3, r2
 8011b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	699b      	ldr	r3, [r3, #24]
 8011b72:	011b      	lsls	r3, r3, #4
 8011b74:	693a      	ldr	r2, [r7, #16]
 8011b76:	4313      	orrs	r3, r2
 8011b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	693a      	ldr	r2, [r7, #16]
 8011b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	68fa      	ldr	r2, [r7, #12]
 8011b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	685a      	ldr	r2, [r3, #4]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	697a      	ldr	r2, [r7, #20]
 8011b92:	621a      	str	r2, [r3, #32]
}
 8011b94:	bf00      	nop
 8011b96:	371c      	adds	r7, #28
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr
 8011ba0:	fffeff8f 	.word	0xfffeff8f
 8011ba4:	40010000 	.word	0x40010000
 8011ba8:	40010400 	.word	0x40010400
 8011bac:	40014000 	.word	0x40014000
 8011bb0:	40014400 	.word	0x40014400
 8011bb4:	40014800 	.word	0x40014800

08011bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b087      	sub	sp, #28
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6a1b      	ldr	r3, [r3, #32]
 8011bc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6a1b      	ldr	r3, [r3, #32]
 8011bcc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	685b      	ldr	r3, [r3, #4]
 8011bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	69db      	ldr	r3, [r3, #28]
 8011bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011be0:	68fa      	ldr	r2, [r7, #12]
 8011be2:	4b24      	ldr	r3, [pc, #144]	@ (8011c74 <TIM_OC4_SetConfig+0xbc>)
 8011be4:	4013      	ands	r3, r2
 8011be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	021b      	lsls	r3, r3, #8
 8011bf6:	68fa      	ldr	r2, [r7, #12]
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	689b      	ldr	r3, [r3, #8]
 8011c08:	031b      	lsls	r3, r3, #12
 8011c0a:	693a      	ldr	r2, [r7, #16]
 8011c0c:	4313      	orrs	r3, r2
 8011c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	4a19      	ldr	r2, [pc, #100]	@ (8011c78 <TIM_OC4_SetConfig+0xc0>)
 8011c14:	4293      	cmp	r3, r2
 8011c16:	d00f      	beq.n	8011c38 <TIM_OC4_SetConfig+0x80>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	4a18      	ldr	r2, [pc, #96]	@ (8011c7c <TIM_OC4_SetConfig+0xc4>)
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	d00b      	beq.n	8011c38 <TIM_OC4_SetConfig+0x80>
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	4a17      	ldr	r2, [pc, #92]	@ (8011c80 <TIM_OC4_SetConfig+0xc8>)
 8011c24:	4293      	cmp	r3, r2
 8011c26:	d007      	beq.n	8011c38 <TIM_OC4_SetConfig+0x80>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	4a16      	ldr	r2, [pc, #88]	@ (8011c84 <TIM_OC4_SetConfig+0xcc>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	d003      	beq.n	8011c38 <TIM_OC4_SetConfig+0x80>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	4a15      	ldr	r2, [pc, #84]	@ (8011c88 <TIM_OC4_SetConfig+0xd0>)
 8011c34:	4293      	cmp	r3, r2
 8011c36:	d109      	bne.n	8011c4c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	695b      	ldr	r3, [r3, #20]
 8011c44:	019b      	lsls	r3, r3, #6
 8011c46:	697a      	ldr	r2, [r7, #20]
 8011c48:	4313      	orrs	r3, r2
 8011c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	697a      	ldr	r2, [r7, #20]
 8011c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	68fa      	ldr	r2, [r7, #12]
 8011c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	685a      	ldr	r2, [r3, #4]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	693a      	ldr	r2, [r7, #16]
 8011c64:	621a      	str	r2, [r3, #32]
}
 8011c66:	bf00      	nop
 8011c68:	371c      	adds	r7, #28
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c70:	4770      	bx	lr
 8011c72:	bf00      	nop
 8011c74:	feff8fff 	.word	0xfeff8fff
 8011c78:	40010000 	.word	0x40010000
 8011c7c:	40010400 	.word	0x40010400
 8011c80:	40014000 	.word	0x40014000
 8011c84:	40014400 	.word	0x40014400
 8011c88:	40014800 	.word	0x40014800

08011c8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	b087      	sub	sp, #28
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6a1b      	ldr	r3, [r3, #32]
 8011c9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6a1b      	ldr	r3, [r3, #32]
 8011ca0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011cb4:	68fa      	ldr	r2, [r7, #12]
 8011cb6:	4b21      	ldr	r3, [pc, #132]	@ (8011d3c <TIM_OC5_SetConfig+0xb0>)
 8011cb8:	4013      	ands	r3, r2
 8011cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	68fa      	ldr	r2, [r7, #12]
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011ccc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	041b      	lsls	r3, r3, #16
 8011cd4:	693a      	ldr	r2, [r7, #16]
 8011cd6:	4313      	orrs	r3, r2
 8011cd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	4a18      	ldr	r2, [pc, #96]	@ (8011d40 <TIM_OC5_SetConfig+0xb4>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d00f      	beq.n	8011d02 <TIM_OC5_SetConfig+0x76>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	4a17      	ldr	r2, [pc, #92]	@ (8011d44 <TIM_OC5_SetConfig+0xb8>)
 8011ce6:	4293      	cmp	r3, r2
 8011ce8:	d00b      	beq.n	8011d02 <TIM_OC5_SetConfig+0x76>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	4a16      	ldr	r2, [pc, #88]	@ (8011d48 <TIM_OC5_SetConfig+0xbc>)
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	d007      	beq.n	8011d02 <TIM_OC5_SetConfig+0x76>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4a15      	ldr	r2, [pc, #84]	@ (8011d4c <TIM_OC5_SetConfig+0xc0>)
 8011cf6:	4293      	cmp	r3, r2
 8011cf8:	d003      	beq.n	8011d02 <TIM_OC5_SetConfig+0x76>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	4a14      	ldr	r2, [pc, #80]	@ (8011d50 <TIM_OC5_SetConfig+0xc4>)
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d109      	bne.n	8011d16 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011d08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	695b      	ldr	r3, [r3, #20]
 8011d0e:	021b      	lsls	r3, r3, #8
 8011d10:	697a      	ldr	r2, [r7, #20]
 8011d12:	4313      	orrs	r3, r2
 8011d14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	697a      	ldr	r2, [r7, #20]
 8011d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	68fa      	ldr	r2, [r7, #12]
 8011d20:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	685a      	ldr	r2, [r3, #4]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	693a      	ldr	r2, [r7, #16]
 8011d2e:	621a      	str	r2, [r3, #32]
}
 8011d30:	bf00      	nop
 8011d32:	371c      	adds	r7, #28
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr
 8011d3c:	fffeff8f 	.word	0xfffeff8f
 8011d40:	40010000 	.word	0x40010000
 8011d44:	40010400 	.word	0x40010400
 8011d48:	40014000 	.word	0x40014000
 8011d4c:	40014400 	.word	0x40014400
 8011d50:	40014800 	.word	0x40014800

08011d54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011d54:	b480      	push	{r7}
 8011d56:	b087      	sub	sp, #28
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6a1b      	ldr	r3, [r3, #32]
 8011d62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6a1b      	ldr	r3, [r3, #32]
 8011d68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011d7c:	68fa      	ldr	r2, [r7, #12]
 8011d7e:	4b22      	ldr	r3, [pc, #136]	@ (8011e08 <TIM_OC6_SetConfig+0xb4>)
 8011d80:	4013      	ands	r3, r2
 8011d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	021b      	lsls	r3, r3, #8
 8011d8a:	68fa      	ldr	r2, [r7, #12]
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	689b      	ldr	r3, [r3, #8]
 8011d9c:	051b      	lsls	r3, r3, #20
 8011d9e:	693a      	ldr	r2, [r7, #16]
 8011da0:	4313      	orrs	r3, r2
 8011da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	4a19      	ldr	r2, [pc, #100]	@ (8011e0c <TIM_OC6_SetConfig+0xb8>)
 8011da8:	4293      	cmp	r3, r2
 8011daa:	d00f      	beq.n	8011dcc <TIM_OC6_SetConfig+0x78>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	4a18      	ldr	r2, [pc, #96]	@ (8011e10 <TIM_OC6_SetConfig+0xbc>)
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d00b      	beq.n	8011dcc <TIM_OC6_SetConfig+0x78>
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	4a17      	ldr	r2, [pc, #92]	@ (8011e14 <TIM_OC6_SetConfig+0xc0>)
 8011db8:	4293      	cmp	r3, r2
 8011dba:	d007      	beq.n	8011dcc <TIM_OC6_SetConfig+0x78>
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	4a16      	ldr	r2, [pc, #88]	@ (8011e18 <TIM_OC6_SetConfig+0xc4>)
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	d003      	beq.n	8011dcc <TIM_OC6_SetConfig+0x78>
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	4a15      	ldr	r2, [pc, #84]	@ (8011e1c <TIM_OC6_SetConfig+0xc8>)
 8011dc8:	4293      	cmp	r3, r2
 8011dca:	d109      	bne.n	8011de0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	695b      	ldr	r3, [r3, #20]
 8011dd8:	029b      	lsls	r3, r3, #10
 8011dda:	697a      	ldr	r2, [r7, #20]
 8011ddc:	4313      	orrs	r3, r2
 8011dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	697a      	ldr	r2, [r7, #20]
 8011de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	68fa      	ldr	r2, [r7, #12]
 8011dea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	685a      	ldr	r2, [r3, #4]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	693a      	ldr	r2, [r7, #16]
 8011df8:	621a      	str	r2, [r3, #32]
}
 8011dfa:	bf00      	nop
 8011dfc:	371c      	adds	r7, #28
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr
 8011e06:	bf00      	nop
 8011e08:	feff8fff 	.word	0xfeff8fff
 8011e0c:	40010000 	.word	0x40010000
 8011e10:	40010400 	.word	0x40010400
 8011e14:	40014000 	.word	0x40014000
 8011e18:	40014400 	.word	0x40014400
 8011e1c:	40014800 	.word	0x40014800

08011e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011e20:	b480      	push	{r7}
 8011e22:	b087      	sub	sp, #28
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	6a1b      	ldr	r3, [r3, #32]
 8011e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	6a1b      	ldr	r3, [r3, #32]
 8011e36:	f023 0201 	bic.w	r2, r3, #1
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	699b      	ldr	r3, [r3, #24]
 8011e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	011b      	lsls	r3, r3, #4
 8011e50:	693a      	ldr	r2, [r7, #16]
 8011e52:	4313      	orrs	r3, r2
 8011e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	f023 030a 	bic.w	r3, r3, #10
 8011e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011e5e:	697a      	ldr	r2, [r7, #20]
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	4313      	orrs	r3, r2
 8011e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	693a      	ldr	r2, [r7, #16]
 8011e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	697a      	ldr	r2, [r7, #20]
 8011e70:	621a      	str	r2, [r3, #32]
}
 8011e72:	bf00      	nop
 8011e74:	371c      	adds	r7, #28
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr

08011e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011e7e:	b480      	push	{r7}
 8011e80:	b087      	sub	sp, #28
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	60f8      	str	r0, [r7, #12]
 8011e86:	60b9      	str	r1, [r7, #8]
 8011e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	6a1b      	ldr	r3, [r3, #32]
 8011e8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6a1b      	ldr	r3, [r3, #32]
 8011e94:	f023 0210 	bic.w	r2, r3, #16
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	699b      	ldr	r3, [r3, #24]
 8011ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	031b      	lsls	r3, r3, #12
 8011eae:	693a      	ldr	r2, [r7, #16]
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011eba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	011b      	lsls	r3, r3, #4
 8011ec0:	697a      	ldr	r2, [r7, #20]
 8011ec2:	4313      	orrs	r3, r2
 8011ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	693a      	ldr	r2, [r7, #16]
 8011eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	697a      	ldr	r2, [r7, #20]
 8011ed0:	621a      	str	r2, [r3, #32]
}
 8011ed2:	bf00      	nop
 8011ed4:	371c      	adds	r7, #28
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011edc:	4770      	bx	lr
	...

08011ee0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b085      	sub	sp, #20
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	689b      	ldr	r3, [r3, #8]
 8011eee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011ef0:	68fa      	ldr	r2, [r7, #12]
 8011ef2:	4b09      	ldr	r3, [pc, #36]	@ (8011f18 <TIM_ITRx_SetConfig+0x38>)
 8011ef4:	4013      	ands	r3, r2
 8011ef6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011ef8:	683a      	ldr	r2, [r7, #0]
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	4313      	orrs	r3, r2
 8011efe:	f043 0307 	orr.w	r3, r3, #7
 8011f02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	68fa      	ldr	r2, [r7, #12]
 8011f08:	609a      	str	r2, [r3, #8]
}
 8011f0a:	bf00      	nop
 8011f0c:	3714      	adds	r7, #20
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f14:	4770      	bx	lr
 8011f16:	bf00      	nop
 8011f18:	ffcfff8f 	.word	0xffcfff8f

08011f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b087      	sub	sp, #28
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	60b9      	str	r1, [r7, #8]
 8011f26:	607a      	str	r2, [r7, #4]
 8011f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	689b      	ldr	r3, [r3, #8]
 8011f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	021a      	lsls	r2, r3, #8
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	431a      	orrs	r2, r3
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	4313      	orrs	r3, r2
 8011f44:	697a      	ldr	r2, [r7, #20]
 8011f46:	4313      	orrs	r3, r2
 8011f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	697a      	ldr	r2, [r7, #20]
 8011f4e:	609a      	str	r2, [r3, #8]
}
 8011f50:	bf00      	nop
 8011f52:	371c      	adds	r7, #28
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr

08011f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b085      	sub	sp, #20
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011f6c:	2b01      	cmp	r3, #1
 8011f6e:	d101      	bne.n	8011f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011f70:	2302      	movs	r3, #2
 8011f72:	e077      	b.n	8012064 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2201      	movs	r2, #1
 8011f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2202      	movs	r2, #2
 8011f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	685b      	ldr	r3, [r3, #4]
 8011f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	4a35      	ldr	r2, [pc, #212]	@ (8012070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011f9a:	4293      	cmp	r3, r2
 8011f9c:	d004      	beq.n	8011fa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	4a34      	ldr	r2, [pc, #208]	@ (8012074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	d108      	bne.n	8011fba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011fae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	68fa      	ldr	r2, [r7, #12]
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011fc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	4313      	orrs	r3, r2
 8011fca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	68fa      	ldr	r2, [r7, #12]
 8011fd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4a25      	ldr	r2, [pc, #148]	@ (8012070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	d02c      	beq.n	8012038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011fe6:	d027      	beq.n	8012038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4a22      	ldr	r2, [pc, #136]	@ (8012078 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d022      	beq.n	8012038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	4a21      	ldr	r2, [pc, #132]	@ (801207c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	d01d      	beq.n	8012038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	4a1f      	ldr	r2, [pc, #124]	@ (8012080 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8012002:	4293      	cmp	r3, r2
 8012004:	d018      	beq.n	8012038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4a1a      	ldr	r2, [pc, #104]	@ (8012074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801200c:	4293      	cmp	r3, r2
 801200e:	d013      	beq.n	8012038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	4a1b      	ldr	r2, [pc, #108]	@ (8012084 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8012016:	4293      	cmp	r3, r2
 8012018:	d00e      	beq.n	8012038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	4a1a      	ldr	r2, [pc, #104]	@ (8012088 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8012020:	4293      	cmp	r3, r2
 8012022:	d009      	beq.n	8012038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	4a18      	ldr	r2, [pc, #96]	@ (801208c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801202a:	4293      	cmp	r3, r2
 801202c:	d004      	beq.n	8012038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	4a17      	ldr	r2, [pc, #92]	@ (8012090 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8012034:	4293      	cmp	r3, r2
 8012036:	d10c      	bne.n	8012052 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801203e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	689b      	ldr	r3, [r3, #8]
 8012044:	68ba      	ldr	r2, [r7, #8]
 8012046:	4313      	orrs	r3, r2
 8012048:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	68ba      	ldr	r2, [r7, #8]
 8012050:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2201      	movs	r2, #1
 8012056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012062:	2300      	movs	r3, #0
}
 8012064:	4618      	mov	r0, r3
 8012066:	3714      	adds	r7, #20
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr
 8012070:	40010000 	.word	0x40010000
 8012074:	40010400 	.word	0x40010400
 8012078:	40000400 	.word	0x40000400
 801207c:	40000800 	.word	0x40000800
 8012080:	40000c00 	.word	0x40000c00
 8012084:	40001800 	.word	0x40001800
 8012088:	40014000 	.word	0x40014000
 801208c:	4000e000 	.word	0x4000e000
 8012090:	4000e400 	.word	0x4000e400

08012094 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012094:	b480      	push	{r7}
 8012096:	b085      	sub	sp, #20
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801209e:	2300      	movs	r3, #0
 80120a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80120a8:	2b01      	cmp	r3, #1
 80120aa:	d101      	bne.n	80120b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80120ac:	2302      	movs	r3, #2
 80120ae:	e073      	b.n	8012198 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2201      	movs	r2, #1
 80120b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	68db      	ldr	r3, [r3, #12]
 80120c2:	4313      	orrs	r3, r2
 80120c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	689b      	ldr	r3, [r3, #8]
 80120d0:	4313      	orrs	r3, r2
 80120d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	4313      	orrs	r3, r2
 80120e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	4313      	orrs	r3, r2
 80120ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	691b      	ldr	r3, [r3, #16]
 80120fa:	4313      	orrs	r3, r2
 80120fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	695b      	ldr	r3, [r3, #20]
 8012108:	4313      	orrs	r3, r2
 801210a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012116:	4313      	orrs	r3, r2
 8012118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	699b      	ldr	r3, [r3, #24]
 8012124:	041b      	lsls	r3, r3, #16
 8012126:	4313      	orrs	r3, r2
 8012128:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	69db      	ldr	r3, [r3, #28]
 8012134:	4313      	orrs	r3, r2
 8012136:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	4a19      	ldr	r2, [pc, #100]	@ (80121a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 801213e:	4293      	cmp	r3, r2
 8012140:	d004      	beq.n	801214c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	4a18      	ldr	r2, [pc, #96]	@ (80121a8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8012148:	4293      	cmp	r3, r2
 801214a:	d11c      	bne.n	8012186 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012156:	051b      	lsls	r3, r3, #20
 8012158:	4313      	orrs	r3, r2
 801215a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	6a1b      	ldr	r3, [r3, #32]
 8012166:	4313      	orrs	r3, r2
 8012168:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012174:	4313      	orrs	r3, r2
 8012176:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012182:	4313      	orrs	r3, r2
 8012184:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	68fa      	ldr	r2, [r7, #12]
 801218c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2200      	movs	r2, #0
 8012192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012196:	2300      	movs	r3, #0
}
 8012198:	4618      	mov	r0, r3
 801219a:	3714      	adds	r7, #20
 801219c:	46bd      	mov	sp, r7
 801219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a2:	4770      	bx	lr
 80121a4:	40010000 	.word	0x40010000
 80121a8:	40010400 	.word	0x40010400

080121ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d101      	bne.n	80121be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80121ba:	2301      	movs	r3, #1
 80121bc:	e042      	b.n	8012244 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d106      	bne.n	80121d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2200      	movs	r2, #0
 80121cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f7f4 fa8d 	bl	80066f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2224      	movs	r2, #36	@ 0x24
 80121da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	681a      	ldr	r2, [r3, #0]
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	f022 0201 	bic.w	r2, r2, #1
 80121ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d002      	beq.n	80121fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f001 fac4 	bl	8013784 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f000 fc55 	bl	8012aac <UART_SetConfig>
 8012202:	4603      	mov	r3, r0
 8012204:	2b01      	cmp	r3, #1
 8012206:	d101      	bne.n	801220c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8012208:	2301      	movs	r3, #1
 801220a:	e01b      	b.n	8012244 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	685a      	ldr	r2, [r3, #4]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801221a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	689a      	ldr	r2, [r3, #8]
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801222a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	681a      	ldr	r2, [r3, #0]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	f042 0201 	orr.w	r2, r2, #1
 801223a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f001 fb43 	bl	80138c8 <UART_CheckIdleState>
 8012242:	4603      	mov	r3, r0
}
 8012244:	4618      	mov	r0, r3
 8012246:	3708      	adds	r7, #8
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b08a      	sub	sp, #40	@ 0x28
 8012250:	af00      	add	r7, sp, #0
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	4613      	mov	r3, r2
 8012258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012260:	2b20      	cmp	r3, #32
 8012262:	d137      	bne.n	80122d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d002      	beq.n	8012270 <HAL_UART_Receive_IT+0x24>
 801226a:	88fb      	ldrh	r3, [r7, #6]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d101      	bne.n	8012274 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8012270:	2301      	movs	r3, #1
 8012272:	e030      	b.n	80122d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2200      	movs	r2, #0
 8012278:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	4a18      	ldr	r2, [pc, #96]	@ (80122e0 <HAL_UART_Receive_IT+0x94>)
 8012280:	4293      	cmp	r3, r2
 8012282:	d01f      	beq.n	80122c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	685b      	ldr	r3, [r3, #4]
 801228a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801228e:	2b00      	cmp	r3, #0
 8012290:	d018      	beq.n	80122c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	e853 3f00 	ldrex	r3, [r3]
 801229e:	613b      	str	r3, [r7, #16]
   return(result);
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80122a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	461a      	mov	r2, r3
 80122ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b0:	623b      	str	r3, [r7, #32]
 80122b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b4:	69f9      	ldr	r1, [r7, #28]
 80122b6:	6a3a      	ldr	r2, [r7, #32]
 80122b8:	e841 2300 	strex	r3, r2, [r1]
 80122bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80122be:	69bb      	ldr	r3, [r7, #24]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d1e6      	bne.n	8012292 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80122c4:	88fb      	ldrh	r3, [r7, #6]
 80122c6:	461a      	mov	r2, r3
 80122c8:	68b9      	ldr	r1, [r7, #8]
 80122ca:	68f8      	ldr	r0, [r7, #12]
 80122cc:	f001 fc14 	bl	8013af8 <UART_Start_Receive_IT>
 80122d0:	4603      	mov	r3, r0
 80122d2:	e000      	b.n	80122d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80122d4:	2302      	movs	r3, #2
  }
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3728      	adds	r7, #40	@ 0x28
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	58000c00 	.word	0x58000c00

080122e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b0ba      	sub	sp, #232	@ 0xe8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	69db      	ldr	r3, [r3, #28]
 80122f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	689b      	ldr	r3, [r3, #8]
 8012306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801230a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801230e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8012312:	4013      	ands	r3, r2
 8012314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8012318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801231c:	2b00      	cmp	r3, #0
 801231e:	d11b      	bne.n	8012358 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012324:	f003 0320 	and.w	r3, r3, #32
 8012328:	2b00      	cmp	r3, #0
 801232a:	d015      	beq.n	8012358 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801232c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012330:	f003 0320 	and.w	r3, r3, #32
 8012334:	2b00      	cmp	r3, #0
 8012336:	d105      	bne.n	8012344 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801233c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012340:	2b00      	cmp	r3, #0
 8012342:	d009      	beq.n	8012358 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012348:	2b00      	cmp	r3, #0
 801234a:	f000 8377 	beq.w	8012a3c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	4798      	blx	r3
      }
      return;
 8012356:	e371      	b.n	8012a3c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801235c:	2b00      	cmp	r3, #0
 801235e:	f000 8123 	beq.w	80125a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012362:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012366:	4b8d      	ldr	r3, [pc, #564]	@ (801259c <HAL_UART_IRQHandler+0x2b8>)
 8012368:	4013      	ands	r3, r2
 801236a:	2b00      	cmp	r3, #0
 801236c:	d106      	bne.n	801237c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801236e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8012372:	4b8b      	ldr	r3, [pc, #556]	@ (80125a0 <HAL_UART_IRQHandler+0x2bc>)
 8012374:	4013      	ands	r3, r2
 8012376:	2b00      	cmp	r3, #0
 8012378:	f000 8116 	beq.w	80125a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801237c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012380:	f003 0301 	and.w	r3, r3, #1
 8012384:	2b00      	cmp	r3, #0
 8012386:	d011      	beq.n	80123ac <HAL_UART_IRQHandler+0xc8>
 8012388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801238c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012390:	2b00      	cmp	r3, #0
 8012392:	d00b      	beq.n	80123ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	2201      	movs	r2, #1
 801239a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123a2:	f043 0201 	orr.w	r2, r3, #1
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80123ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123b0:	f003 0302 	and.w	r3, r3, #2
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d011      	beq.n	80123dc <HAL_UART_IRQHandler+0xf8>
 80123b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80123bc:	f003 0301 	and.w	r3, r3, #1
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d00b      	beq.n	80123dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2202      	movs	r2, #2
 80123ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123d2:	f043 0204 	orr.w	r2, r3, #4
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80123dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123e0:	f003 0304 	and.w	r3, r3, #4
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d011      	beq.n	801240c <HAL_UART_IRQHandler+0x128>
 80123e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80123ec:	f003 0301 	and.w	r3, r3, #1
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d00b      	beq.n	801240c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	2204      	movs	r2, #4
 80123fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012402:	f043 0202 	orr.w	r2, r3, #2
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801240c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012410:	f003 0308 	and.w	r3, r3, #8
 8012414:	2b00      	cmp	r3, #0
 8012416:	d017      	beq.n	8012448 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801241c:	f003 0320 	and.w	r3, r3, #32
 8012420:	2b00      	cmp	r3, #0
 8012422:	d105      	bne.n	8012430 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012424:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012428:	4b5c      	ldr	r3, [pc, #368]	@ (801259c <HAL_UART_IRQHandler+0x2b8>)
 801242a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801242c:	2b00      	cmp	r3, #0
 801242e:	d00b      	beq.n	8012448 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	2208      	movs	r2, #8
 8012436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801243e:	f043 0208 	orr.w	r2, r3, #8
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801244c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012450:	2b00      	cmp	r3, #0
 8012452:	d012      	beq.n	801247a <HAL_UART_IRQHandler+0x196>
 8012454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012458:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801245c:	2b00      	cmp	r3, #0
 801245e:	d00c      	beq.n	801247a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012470:	f043 0220 	orr.w	r2, r3, #32
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012480:	2b00      	cmp	r3, #0
 8012482:	f000 82dd 	beq.w	8012a40 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801248a:	f003 0320 	and.w	r3, r3, #32
 801248e:	2b00      	cmp	r3, #0
 8012490:	d013      	beq.n	80124ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012496:	f003 0320 	and.w	r3, r3, #32
 801249a:	2b00      	cmp	r3, #0
 801249c:	d105      	bne.n	80124aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801249e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80124a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d007      	beq.n	80124ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d003      	beq.n	80124ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80124c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	689b      	ldr	r3, [r3, #8]
 80124ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124ce:	2b40      	cmp	r3, #64	@ 0x40
 80124d0:	d005      	beq.n	80124de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80124d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80124d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d054      	beq.n	8012588 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	f001 fc2c 	bl	8013d3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	689b      	ldr	r3, [r3, #8]
 80124ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124ee:	2b40      	cmp	r3, #64	@ 0x40
 80124f0:	d146      	bne.n	8012580 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	3308      	adds	r3, #8
 80124f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012500:	e853 3f00 	ldrex	r3, [r3]
 8012504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8012508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801250c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	3308      	adds	r3, #8
 801251a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801251e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801252a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801252e:	e841 2300 	strex	r3, r2, [r1]
 8012532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801253a:	2b00      	cmp	r3, #0
 801253c:	d1d9      	bne.n	80124f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012544:	2b00      	cmp	r3, #0
 8012546:	d017      	beq.n	8012578 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801254e:	4a15      	ldr	r2, [pc, #84]	@ (80125a4 <HAL_UART_IRQHandler+0x2c0>)
 8012550:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012558:	4618      	mov	r0, r3
 801255a:	f7f6 fe3b 	bl	80091d4 <HAL_DMA_Abort_IT>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d019      	beq.n	8012598 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801256a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801256c:	687a      	ldr	r2, [r7, #4]
 801256e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8012572:	4610      	mov	r0, r2
 8012574:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012576:	e00f      	b.n	8012598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f000 fa81 	bl	8012a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801257e:	e00b      	b.n	8012598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f000 fa7d 	bl	8012a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012586:	e007      	b.n	8012598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f000 fa79 	bl	8012a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2200      	movs	r2, #0
 8012592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8012596:	e253      	b.n	8012a40 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012598:	bf00      	nop
    return;
 801259a:	e251      	b.n	8012a40 <HAL_UART_IRQHandler+0x75c>
 801259c:	10000001 	.word	0x10000001
 80125a0:	04000120 	.word	0x04000120
 80125a4:	08013e09 	.word	0x08013e09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125ac:	2b01      	cmp	r3, #1
 80125ae:	f040 81e7 	bne.w	8012980 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80125b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125b6:	f003 0310 	and.w	r3, r3, #16
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	f000 81e0 	beq.w	8012980 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80125c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80125c4:	f003 0310 	and.w	r3, r3, #16
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f000 81d9 	beq.w	8012980 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	2210      	movs	r2, #16
 80125d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	689b      	ldr	r3, [r3, #8]
 80125dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125e0:	2b40      	cmp	r3, #64	@ 0x40
 80125e2:	f040 8151 	bne.w	8012888 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	4a96      	ldr	r2, [pc, #600]	@ (8012848 <HAL_UART_IRQHandler+0x564>)
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d068      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	4a93      	ldr	r2, [pc, #588]	@ (801284c <HAL_UART_IRQHandler+0x568>)
 80125fe:	4293      	cmp	r3, r2
 8012600:	d061      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4a91      	ldr	r2, [pc, #580]	@ (8012850 <HAL_UART_IRQHandler+0x56c>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d05a      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	4a8e      	ldr	r2, [pc, #568]	@ (8012854 <HAL_UART_IRQHandler+0x570>)
 801261a:	4293      	cmp	r3, r2
 801261c:	d053      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	4a8c      	ldr	r2, [pc, #560]	@ (8012858 <HAL_UART_IRQHandler+0x574>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d04c      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4a89      	ldr	r2, [pc, #548]	@ (801285c <HAL_UART_IRQHandler+0x578>)
 8012636:	4293      	cmp	r3, r2
 8012638:	d045      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	4a87      	ldr	r2, [pc, #540]	@ (8012860 <HAL_UART_IRQHandler+0x57c>)
 8012644:	4293      	cmp	r3, r2
 8012646:	d03e      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4a84      	ldr	r2, [pc, #528]	@ (8012864 <HAL_UART_IRQHandler+0x580>)
 8012652:	4293      	cmp	r3, r2
 8012654:	d037      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	4a82      	ldr	r2, [pc, #520]	@ (8012868 <HAL_UART_IRQHandler+0x584>)
 8012660:	4293      	cmp	r3, r2
 8012662:	d030      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	4a7f      	ldr	r2, [pc, #508]	@ (801286c <HAL_UART_IRQHandler+0x588>)
 801266e:	4293      	cmp	r3, r2
 8012670:	d029      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	4a7d      	ldr	r2, [pc, #500]	@ (8012870 <HAL_UART_IRQHandler+0x58c>)
 801267c:	4293      	cmp	r3, r2
 801267e:	d022      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	4a7a      	ldr	r2, [pc, #488]	@ (8012874 <HAL_UART_IRQHandler+0x590>)
 801268a:	4293      	cmp	r3, r2
 801268c:	d01b      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	4a78      	ldr	r2, [pc, #480]	@ (8012878 <HAL_UART_IRQHandler+0x594>)
 8012698:	4293      	cmp	r3, r2
 801269a:	d014      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	4a75      	ldr	r2, [pc, #468]	@ (801287c <HAL_UART_IRQHandler+0x598>)
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d00d      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	4a73      	ldr	r2, [pc, #460]	@ (8012880 <HAL_UART_IRQHandler+0x59c>)
 80126b4:	4293      	cmp	r3, r2
 80126b6:	d006      	beq.n	80126c6 <HAL_UART_IRQHandler+0x3e2>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	4a70      	ldr	r2, [pc, #448]	@ (8012884 <HAL_UART_IRQHandler+0x5a0>)
 80126c2:	4293      	cmp	r3, r2
 80126c4:	d106      	bne.n	80126d4 <HAL_UART_IRQHandler+0x3f0>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	b29b      	uxth	r3, r3
 80126d2:	e005      	b.n	80126e0 <HAL_UART_IRQHandler+0x3fc>
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	b29b      	uxth	r3, r3
 80126e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80126e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f000 81ab 	beq.w	8012a44 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80126f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80126f8:	429a      	cmp	r2, r3
 80126fa:	f080 81a3 	bcs.w	8012a44 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012704:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801270e:	69db      	ldr	r3, [r3, #28]
 8012710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012714:	f000 8087 	beq.w	8012826 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012720:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012724:	e853 3f00 	ldrex	r3, [r3]
 8012728:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801272c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	461a      	mov	r2, r3
 801273e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012742:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012746:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801274a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801274e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012752:	e841 2300 	strex	r3, r2, [r1]
 8012756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801275a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801275e:	2b00      	cmp	r3, #0
 8012760:	d1da      	bne.n	8012718 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	3308      	adds	r3, #8
 8012768:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801276a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801276c:	e853 3f00 	ldrex	r3, [r3]
 8012770:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012772:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012774:	f023 0301 	bic.w	r3, r3, #1
 8012778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	3308      	adds	r3, #8
 8012782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012786:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801278a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801278c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801278e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012792:	e841 2300 	strex	r3, r2, [r1]
 8012796:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012798:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801279a:	2b00      	cmp	r3, #0
 801279c:	d1e1      	bne.n	8012762 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	3308      	adds	r3, #8
 80127a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80127a8:	e853 3f00 	ldrex	r3, [r3]
 80127ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80127ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80127b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	3308      	adds	r3, #8
 80127be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80127c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80127c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80127c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80127ca:	e841 2300 	strex	r3, r2, [r1]
 80127ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80127d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1e3      	bne.n	801279e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2220      	movs	r2, #32
 80127da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2200      	movs	r2, #0
 80127e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127ec:	e853 3f00 	ldrex	r3, [r3]
 80127f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80127f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127f4:	f023 0310 	bic.w	r3, r3, #16
 80127f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	461a      	mov	r2, r3
 8012802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012806:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012808:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801280a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801280c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801280e:	e841 2300 	strex	r3, r2, [r1]
 8012812:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012816:	2b00      	cmp	r3, #0
 8012818:	d1e4      	bne.n	80127e4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012820:	4618      	mov	r0, r3
 8012822:	f7f6 f9b9 	bl	8008b98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2202      	movs	r2, #2
 801282a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012838:	b29b      	uxth	r3, r3
 801283a:	1ad3      	subs	r3, r2, r3
 801283c:	b29b      	uxth	r3, r3
 801283e:	4619      	mov	r1, r3
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f000 f927 	bl	8012a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012846:	e0fd      	b.n	8012a44 <HAL_UART_IRQHandler+0x760>
 8012848:	40020010 	.word	0x40020010
 801284c:	40020028 	.word	0x40020028
 8012850:	40020040 	.word	0x40020040
 8012854:	40020058 	.word	0x40020058
 8012858:	40020070 	.word	0x40020070
 801285c:	40020088 	.word	0x40020088
 8012860:	400200a0 	.word	0x400200a0
 8012864:	400200b8 	.word	0x400200b8
 8012868:	40020410 	.word	0x40020410
 801286c:	40020428 	.word	0x40020428
 8012870:	40020440 	.word	0x40020440
 8012874:	40020458 	.word	0x40020458
 8012878:	40020470 	.word	0x40020470
 801287c:	40020488 	.word	0x40020488
 8012880:	400204a0 	.word	0x400204a0
 8012884:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012894:	b29b      	uxth	r3, r3
 8012896:	1ad3      	subs	r3, r2, r3
 8012898:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	f000 80cf 	beq.w	8012a48 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80128aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f000 80ca 	beq.w	8012a48 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128bc:	e853 3f00 	ldrex	r3, [r3]
 80128c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80128c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80128c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	461a      	mov	r2, r3
 80128d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80128d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80128d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80128dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80128de:	e841 2300 	strex	r3, r2, [r1]
 80128e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80128e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d1e4      	bne.n	80128b4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	3308      	adds	r3, #8
 80128f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f4:	e853 3f00 	ldrex	r3, [r3]
 80128f8:	623b      	str	r3, [r7, #32]
   return(result);
 80128fa:	6a3a      	ldr	r2, [r7, #32]
 80128fc:	4b55      	ldr	r3, [pc, #340]	@ (8012a54 <HAL_UART_IRQHandler+0x770>)
 80128fe:	4013      	ands	r3, r2
 8012900:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	3308      	adds	r3, #8
 801290a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801290e:	633a      	str	r2, [r7, #48]	@ 0x30
 8012910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012916:	e841 2300 	strex	r3, r2, [r1]
 801291a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801291e:	2b00      	cmp	r3, #0
 8012920:	d1e3      	bne.n	80128ea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2220      	movs	r2, #32
 8012926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2200      	movs	r2, #0
 801292e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	e853 3f00 	ldrex	r3, [r3]
 8012942:	60fb      	str	r3, [r7, #12]
   return(result);
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	f023 0310 	bic.w	r3, r3, #16
 801294a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	461a      	mov	r2, r3
 8012954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012958:	61fb      	str	r3, [r7, #28]
 801295a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801295c:	69b9      	ldr	r1, [r7, #24]
 801295e:	69fa      	ldr	r2, [r7, #28]
 8012960:	e841 2300 	strex	r3, r2, [r1]
 8012964:	617b      	str	r3, [r7, #20]
   return(result);
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d1e4      	bne.n	8012936 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2202      	movs	r2, #2
 8012970:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012976:	4619      	mov	r1, r3
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f000 f88b 	bl	8012a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801297e:	e063      	b.n	8012a48 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012988:	2b00      	cmp	r3, #0
 801298a:	d00e      	beq.n	80129aa <HAL_UART_IRQHandler+0x6c6>
 801298c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012994:	2b00      	cmp	r3, #0
 8012996:	d008      	beq.n	80129aa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80129a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	f001 ff8e 	bl	80148c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80129a8:	e051      	b.n	8012a4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80129aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d014      	beq.n	80129e0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80129b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d105      	bne.n	80129ce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80129c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80129c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d008      	beq.n	80129e0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d03a      	beq.n	8012a4c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	4798      	blx	r3
    }
    return;
 80129de:	e035      	b.n	8012a4c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80129e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d009      	beq.n	8012a00 <HAL_UART_IRQHandler+0x71c>
 80129ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d003      	beq.n	8012a00 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f001 fa1b 	bl	8013e34 <UART_EndTransmit_IT>
    return;
 80129fe:	e026      	b.n	8012a4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d009      	beq.n	8012a20 <HAL_UART_IRQHandler+0x73c>
 8012a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d003      	beq.n	8012a20 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f001 ff67 	bl	80148ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012a1e:	e016      	b.n	8012a4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d010      	beq.n	8012a4e <HAL_UART_IRQHandler+0x76a>
 8012a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	da0c      	bge.n	8012a4e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f001 ff4f 	bl	80148d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012a3a:	e008      	b.n	8012a4e <HAL_UART_IRQHandler+0x76a>
      return;
 8012a3c:	bf00      	nop
 8012a3e:	e006      	b.n	8012a4e <HAL_UART_IRQHandler+0x76a>
    return;
 8012a40:	bf00      	nop
 8012a42:	e004      	b.n	8012a4e <HAL_UART_IRQHandler+0x76a>
      return;
 8012a44:	bf00      	nop
 8012a46:	e002      	b.n	8012a4e <HAL_UART_IRQHandler+0x76a>
      return;
 8012a48:	bf00      	nop
 8012a4a:	e000      	b.n	8012a4e <HAL_UART_IRQHandler+0x76a>
    return;
 8012a4c:	bf00      	nop
  }
}
 8012a4e:	37e8      	adds	r7, #232	@ 0xe8
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	effffffe 	.word	0xeffffffe

08012a58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012a58:	b480      	push	{r7}
 8012a5a:	b083      	sub	sp, #12
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012a60:	bf00      	nop
 8012a62:	370c      	adds	r7, #12
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr

08012a6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b083      	sub	sp, #12
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8012a74:	bf00      	nop
 8012a76:	370c      	adds	r7, #12
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7e:	4770      	bx	lr

08012a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012a80:	b480      	push	{r7}
 8012a82:	b083      	sub	sp, #12
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012a88:	bf00      	nop
 8012a8a:	370c      	adds	r7, #12
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012a94:	b480      	push	{r7}
 8012a96:	b083      	sub	sp, #12
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	460b      	mov	r3, r1
 8012a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012aa0:	bf00      	nop
 8012aa2:	370c      	adds	r7, #12
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aaa:	4770      	bx	lr

08012aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012ab0:	b092      	sub	sp, #72	@ 0x48
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	689a      	ldr	r2, [r3, #8]
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	691b      	ldr	r3, [r3, #16]
 8012ac4:	431a      	orrs	r2, r3
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	695b      	ldr	r3, [r3, #20]
 8012aca:	431a      	orrs	r2, r3
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	69db      	ldr	r3, [r3, #28]
 8012ad0:	4313      	orrs	r3, r2
 8012ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	4bbe      	ldr	r3, [pc, #760]	@ (8012dd4 <UART_SetConfig+0x328>)
 8012adc:	4013      	ands	r3, r2
 8012ade:	697a      	ldr	r2, [r7, #20]
 8012ae0:	6812      	ldr	r2, [r2, #0]
 8012ae2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012ae4:	430b      	orrs	r3, r1
 8012ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	68da      	ldr	r2, [r3, #12]
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	430a      	orrs	r2, r1
 8012afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	699b      	ldr	r3, [r3, #24]
 8012b02:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4ab3      	ldr	r2, [pc, #716]	@ (8012dd8 <UART_SetConfig+0x32c>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d004      	beq.n	8012b18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	6a1b      	ldr	r3, [r3, #32]
 8012b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012b14:	4313      	orrs	r3, r2
 8012b16:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	689a      	ldr	r2, [r3, #8]
 8012b1e:	4baf      	ldr	r3, [pc, #700]	@ (8012ddc <UART_SetConfig+0x330>)
 8012b20:	4013      	ands	r3, r2
 8012b22:	697a      	ldr	r2, [r7, #20]
 8012b24:	6812      	ldr	r2, [r2, #0]
 8012b26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012b28:	430b      	orrs	r3, r1
 8012b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b32:	f023 010f 	bic.w	r1, r3, #15
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	430a      	orrs	r2, r1
 8012b40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	4aa6      	ldr	r2, [pc, #664]	@ (8012de0 <UART_SetConfig+0x334>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d177      	bne.n	8012c3c <UART_SetConfig+0x190>
 8012b4c:	4ba5      	ldr	r3, [pc, #660]	@ (8012de4 <UART_SetConfig+0x338>)
 8012b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012b54:	2b28      	cmp	r3, #40	@ 0x28
 8012b56:	d86d      	bhi.n	8012c34 <UART_SetConfig+0x188>
 8012b58:	a201      	add	r2, pc, #4	@ (adr r2, 8012b60 <UART_SetConfig+0xb4>)
 8012b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b5e:	bf00      	nop
 8012b60:	08012c05 	.word	0x08012c05
 8012b64:	08012c35 	.word	0x08012c35
 8012b68:	08012c35 	.word	0x08012c35
 8012b6c:	08012c35 	.word	0x08012c35
 8012b70:	08012c35 	.word	0x08012c35
 8012b74:	08012c35 	.word	0x08012c35
 8012b78:	08012c35 	.word	0x08012c35
 8012b7c:	08012c35 	.word	0x08012c35
 8012b80:	08012c0d 	.word	0x08012c0d
 8012b84:	08012c35 	.word	0x08012c35
 8012b88:	08012c35 	.word	0x08012c35
 8012b8c:	08012c35 	.word	0x08012c35
 8012b90:	08012c35 	.word	0x08012c35
 8012b94:	08012c35 	.word	0x08012c35
 8012b98:	08012c35 	.word	0x08012c35
 8012b9c:	08012c35 	.word	0x08012c35
 8012ba0:	08012c15 	.word	0x08012c15
 8012ba4:	08012c35 	.word	0x08012c35
 8012ba8:	08012c35 	.word	0x08012c35
 8012bac:	08012c35 	.word	0x08012c35
 8012bb0:	08012c35 	.word	0x08012c35
 8012bb4:	08012c35 	.word	0x08012c35
 8012bb8:	08012c35 	.word	0x08012c35
 8012bbc:	08012c35 	.word	0x08012c35
 8012bc0:	08012c1d 	.word	0x08012c1d
 8012bc4:	08012c35 	.word	0x08012c35
 8012bc8:	08012c35 	.word	0x08012c35
 8012bcc:	08012c35 	.word	0x08012c35
 8012bd0:	08012c35 	.word	0x08012c35
 8012bd4:	08012c35 	.word	0x08012c35
 8012bd8:	08012c35 	.word	0x08012c35
 8012bdc:	08012c35 	.word	0x08012c35
 8012be0:	08012c25 	.word	0x08012c25
 8012be4:	08012c35 	.word	0x08012c35
 8012be8:	08012c35 	.word	0x08012c35
 8012bec:	08012c35 	.word	0x08012c35
 8012bf0:	08012c35 	.word	0x08012c35
 8012bf4:	08012c35 	.word	0x08012c35
 8012bf8:	08012c35 	.word	0x08012c35
 8012bfc:	08012c35 	.word	0x08012c35
 8012c00:	08012c2d 	.word	0x08012c2d
 8012c04:	2301      	movs	r3, #1
 8012c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c0a:	e326      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c0c:	2304      	movs	r3, #4
 8012c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c12:	e322      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c14:	2308      	movs	r3, #8
 8012c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c1a:	e31e      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c1c:	2310      	movs	r3, #16
 8012c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c22:	e31a      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c24:	2320      	movs	r3, #32
 8012c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c2a:	e316      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c2c:	2340      	movs	r3, #64	@ 0x40
 8012c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c32:	e312      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c34:	2380      	movs	r3, #128	@ 0x80
 8012c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c3a:	e30e      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	4a69      	ldr	r2, [pc, #420]	@ (8012de8 <UART_SetConfig+0x33c>)
 8012c42:	4293      	cmp	r3, r2
 8012c44:	d130      	bne.n	8012ca8 <UART_SetConfig+0x1fc>
 8012c46:	4b67      	ldr	r3, [pc, #412]	@ (8012de4 <UART_SetConfig+0x338>)
 8012c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c4a:	f003 0307 	and.w	r3, r3, #7
 8012c4e:	2b05      	cmp	r3, #5
 8012c50:	d826      	bhi.n	8012ca0 <UART_SetConfig+0x1f4>
 8012c52:	a201      	add	r2, pc, #4	@ (adr r2, 8012c58 <UART_SetConfig+0x1ac>)
 8012c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c58:	08012c71 	.word	0x08012c71
 8012c5c:	08012c79 	.word	0x08012c79
 8012c60:	08012c81 	.word	0x08012c81
 8012c64:	08012c89 	.word	0x08012c89
 8012c68:	08012c91 	.word	0x08012c91
 8012c6c:	08012c99 	.word	0x08012c99
 8012c70:	2300      	movs	r3, #0
 8012c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c76:	e2f0      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c78:	2304      	movs	r3, #4
 8012c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c7e:	e2ec      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c80:	2308      	movs	r3, #8
 8012c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c86:	e2e8      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c88:	2310      	movs	r3, #16
 8012c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c8e:	e2e4      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c90:	2320      	movs	r3, #32
 8012c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c96:	e2e0      	b.n	801325a <UART_SetConfig+0x7ae>
 8012c98:	2340      	movs	r3, #64	@ 0x40
 8012c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c9e:	e2dc      	b.n	801325a <UART_SetConfig+0x7ae>
 8012ca0:	2380      	movs	r3, #128	@ 0x80
 8012ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ca6:	e2d8      	b.n	801325a <UART_SetConfig+0x7ae>
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	4a4f      	ldr	r2, [pc, #316]	@ (8012dec <UART_SetConfig+0x340>)
 8012cae:	4293      	cmp	r3, r2
 8012cb0:	d130      	bne.n	8012d14 <UART_SetConfig+0x268>
 8012cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8012de4 <UART_SetConfig+0x338>)
 8012cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cb6:	f003 0307 	and.w	r3, r3, #7
 8012cba:	2b05      	cmp	r3, #5
 8012cbc:	d826      	bhi.n	8012d0c <UART_SetConfig+0x260>
 8012cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8012cc4 <UART_SetConfig+0x218>)
 8012cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cc4:	08012cdd 	.word	0x08012cdd
 8012cc8:	08012ce5 	.word	0x08012ce5
 8012ccc:	08012ced 	.word	0x08012ced
 8012cd0:	08012cf5 	.word	0x08012cf5
 8012cd4:	08012cfd 	.word	0x08012cfd
 8012cd8:	08012d05 	.word	0x08012d05
 8012cdc:	2300      	movs	r3, #0
 8012cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ce2:	e2ba      	b.n	801325a <UART_SetConfig+0x7ae>
 8012ce4:	2304      	movs	r3, #4
 8012ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cea:	e2b6      	b.n	801325a <UART_SetConfig+0x7ae>
 8012cec:	2308      	movs	r3, #8
 8012cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cf2:	e2b2      	b.n	801325a <UART_SetConfig+0x7ae>
 8012cf4:	2310      	movs	r3, #16
 8012cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cfa:	e2ae      	b.n	801325a <UART_SetConfig+0x7ae>
 8012cfc:	2320      	movs	r3, #32
 8012cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d02:	e2aa      	b.n	801325a <UART_SetConfig+0x7ae>
 8012d04:	2340      	movs	r3, #64	@ 0x40
 8012d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d0a:	e2a6      	b.n	801325a <UART_SetConfig+0x7ae>
 8012d0c:	2380      	movs	r3, #128	@ 0x80
 8012d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d12:	e2a2      	b.n	801325a <UART_SetConfig+0x7ae>
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	4a35      	ldr	r2, [pc, #212]	@ (8012df0 <UART_SetConfig+0x344>)
 8012d1a:	4293      	cmp	r3, r2
 8012d1c:	d130      	bne.n	8012d80 <UART_SetConfig+0x2d4>
 8012d1e:	4b31      	ldr	r3, [pc, #196]	@ (8012de4 <UART_SetConfig+0x338>)
 8012d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d22:	f003 0307 	and.w	r3, r3, #7
 8012d26:	2b05      	cmp	r3, #5
 8012d28:	d826      	bhi.n	8012d78 <UART_SetConfig+0x2cc>
 8012d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8012d30 <UART_SetConfig+0x284>)
 8012d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d30:	08012d49 	.word	0x08012d49
 8012d34:	08012d51 	.word	0x08012d51
 8012d38:	08012d59 	.word	0x08012d59
 8012d3c:	08012d61 	.word	0x08012d61
 8012d40:	08012d69 	.word	0x08012d69
 8012d44:	08012d71 	.word	0x08012d71
 8012d48:	2300      	movs	r3, #0
 8012d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d4e:	e284      	b.n	801325a <UART_SetConfig+0x7ae>
 8012d50:	2304      	movs	r3, #4
 8012d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d56:	e280      	b.n	801325a <UART_SetConfig+0x7ae>
 8012d58:	2308      	movs	r3, #8
 8012d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d5e:	e27c      	b.n	801325a <UART_SetConfig+0x7ae>
 8012d60:	2310      	movs	r3, #16
 8012d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d66:	e278      	b.n	801325a <UART_SetConfig+0x7ae>
 8012d68:	2320      	movs	r3, #32
 8012d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d6e:	e274      	b.n	801325a <UART_SetConfig+0x7ae>
 8012d70:	2340      	movs	r3, #64	@ 0x40
 8012d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d76:	e270      	b.n	801325a <UART_SetConfig+0x7ae>
 8012d78:	2380      	movs	r3, #128	@ 0x80
 8012d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d7e:	e26c      	b.n	801325a <UART_SetConfig+0x7ae>
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4a1b      	ldr	r2, [pc, #108]	@ (8012df4 <UART_SetConfig+0x348>)
 8012d86:	4293      	cmp	r3, r2
 8012d88:	d142      	bne.n	8012e10 <UART_SetConfig+0x364>
 8012d8a:	4b16      	ldr	r3, [pc, #88]	@ (8012de4 <UART_SetConfig+0x338>)
 8012d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d8e:	f003 0307 	and.w	r3, r3, #7
 8012d92:	2b05      	cmp	r3, #5
 8012d94:	d838      	bhi.n	8012e08 <UART_SetConfig+0x35c>
 8012d96:	a201      	add	r2, pc, #4	@ (adr r2, 8012d9c <UART_SetConfig+0x2f0>)
 8012d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d9c:	08012db5 	.word	0x08012db5
 8012da0:	08012dbd 	.word	0x08012dbd
 8012da4:	08012dc5 	.word	0x08012dc5
 8012da8:	08012dcd 	.word	0x08012dcd
 8012dac:	08012df9 	.word	0x08012df9
 8012db0:	08012e01 	.word	0x08012e01
 8012db4:	2300      	movs	r3, #0
 8012db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dba:	e24e      	b.n	801325a <UART_SetConfig+0x7ae>
 8012dbc:	2304      	movs	r3, #4
 8012dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dc2:	e24a      	b.n	801325a <UART_SetConfig+0x7ae>
 8012dc4:	2308      	movs	r3, #8
 8012dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dca:	e246      	b.n	801325a <UART_SetConfig+0x7ae>
 8012dcc:	2310      	movs	r3, #16
 8012dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dd2:	e242      	b.n	801325a <UART_SetConfig+0x7ae>
 8012dd4:	cfff69f3 	.word	0xcfff69f3
 8012dd8:	58000c00 	.word	0x58000c00
 8012ddc:	11fff4ff 	.word	0x11fff4ff
 8012de0:	40011000 	.word	0x40011000
 8012de4:	58024400 	.word	0x58024400
 8012de8:	40004400 	.word	0x40004400
 8012dec:	40004800 	.word	0x40004800
 8012df0:	40004c00 	.word	0x40004c00
 8012df4:	40005000 	.word	0x40005000
 8012df8:	2320      	movs	r3, #32
 8012dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dfe:	e22c      	b.n	801325a <UART_SetConfig+0x7ae>
 8012e00:	2340      	movs	r3, #64	@ 0x40
 8012e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e06:	e228      	b.n	801325a <UART_SetConfig+0x7ae>
 8012e08:	2380      	movs	r3, #128	@ 0x80
 8012e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e0e:	e224      	b.n	801325a <UART_SetConfig+0x7ae>
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4ab1      	ldr	r2, [pc, #708]	@ (80130dc <UART_SetConfig+0x630>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d176      	bne.n	8012f08 <UART_SetConfig+0x45c>
 8012e1a:	4bb1      	ldr	r3, [pc, #708]	@ (80130e0 <UART_SetConfig+0x634>)
 8012e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012e22:	2b28      	cmp	r3, #40	@ 0x28
 8012e24:	d86c      	bhi.n	8012f00 <UART_SetConfig+0x454>
 8012e26:	a201      	add	r2, pc, #4	@ (adr r2, 8012e2c <UART_SetConfig+0x380>)
 8012e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e2c:	08012ed1 	.word	0x08012ed1
 8012e30:	08012f01 	.word	0x08012f01
 8012e34:	08012f01 	.word	0x08012f01
 8012e38:	08012f01 	.word	0x08012f01
 8012e3c:	08012f01 	.word	0x08012f01
 8012e40:	08012f01 	.word	0x08012f01
 8012e44:	08012f01 	.word	0x08012f01
 8012e48:	08012f01 	.word	0x08012f01
 8012e4c:	08012ed9 	.word	0x08012ed9
 8012e50:	08012f01 	.word	0x08012f01
 8012e54:	08012f01 	.word	0x08012f01
 8012e58:	08012f01 	.word	0x08012f01
 8012e5c:	08012f01 	.word	0x08012f01
 8012e60:	08012f01 	.word	0x08012f01
 8012e64:	08012f01 	.word	0x08012f01
 8012e68:	08012f01 	.word	0x08012f01
 8012e6c:	08012ee1 	.word	0x08012ee1
 8012e70:	08012f01 	.word	0x08012f01
 8012e74:	08012f01 	.word	0x08012f01
 8012e78:	08012f01 	.word	0x08012f01
 8012e7c:	08012f01 	.word	0x08012f01
 8012e80:	08012f01 	.word	0x08012f01
 8012e84:	08012f01 	.word	0x08012f01
 8012e88:	08012f01 	.word	0x08012f01
 8012e8c:	08012ee9 	.word	0x08012ee9
 8012e90:	08012f01 	.word	0x08012f01
 8012e94:	08012f01 	.word	0x08012f01
 8012e98:	08012f01 	.word	0x08012f01
 8012e9c:	08012f01 	.word	0x08012f01
 8012ea0:	08012f01 	.word	0x08012f01
 8012ea4:	08012f01 	.word	0x08012f01
 8012ea8:	08012f01 	.word	0x08012f01
 8012eac:	08012ef1 	.word	0x08012ef1
 8012eb0:	08012f01 	.word	0x08012f01
 8012eb4:	08012f01 	.word	0x08012f01
 8012eb8:	08012f01 	.word	0x08012f01
 8012ebc:	08012f01 	.word	0x08012f01
 8012ec0:	08012f01 	.word	0x08012f01
 8012ec4:	08012f01 	.word	0x08012f01
 8012ec8:	08012f01 	.word	0x08012f01
 8012ecc:	08012ef9 	.word	0x08012ef9
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ed6:	e1c0      	b.n	801325a <UART_SetConfig+0x7ae>
 8012ed8:	2304      	movs	r3, #4
 8012eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ede:	e1bc      	b.n	801325a <UART_SetConfig+0x7ae>
 8012ee0:	2308      	movs	r3, #8
 8012ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ee6:	e1b8      	b.n	801325a <UART_SetConfig+0x7ae>
 8012ee8:	2310      	movs	r3, #16
 8012eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eee:	e1b4      	b.n	801325a <UART_SetConfig+0x7ae>
 8012ef0:	2320      	movs	r3, #32
 8012ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ef6:	e1b0      	b.n	801325a <UART_SetConfig+0x7ae>
 8012ef8:	2340      	movs	r3, #64	@ 0x40
 8012efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012efe:	e1ac      	b.n	801325a <UART_SetConfig+0x7ae>
 8012f00:	2380      	movs	r3, #128	@ 0x80
 8012f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f06:	e1a8      	b.n	801325a <UART_SetConfig+0x7ae>
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	4a75      	ldr	r2, [pc, #468]	@ (80130e4 <UART_SetConfig+0x638>)
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d130      	bne.n	8012f74 <UART_SetConfig+0x4c8>
 8012f12:	4b73      	ldr	r3, [pc, #460]	@ (80130e0 <UART_SetConfig+0x634>)
 8012f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f16:	f003 0307 	and.w	r3, r3, #7
 8012f1a:	2b05      	cmp	r3, #5
 8012f1c:	d826      	bhi.n	8012f6c <UART_SetConfig+0x4c0>
 8012f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8012f24 <UART_SetConfig+0x478>)
 8012f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f24:	08012f3d 	.word	0x08012f3d
 8012f28:	08012f45 	.word	0x08012f45
 8012f2c:	08012f4d 	.word	0x08012f4d
 8012f30:	08012f55 	.word	0x08012f55
 8012f34:	08012f5d 	.word	0x08012f5d
 8012f38:	08012f65 	.word	0x08012f65
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f42:	e18a      	b.n	801325a <UART_SetConfig+0x7ae>
 8012f44:	2304      	movs	r3, #4
 8012f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f4a:	e186      	b.n	801325a <UART_SetConfig+0x7ae>
 8012f4c:	2308      	movs	r3, #8
 8012f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f52:	e182      	b.n	801325a <UART_SetConfig+0x7ae>
 8012f54:	2310      	movs	r3, #16
 8012f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f5a:	e17e      	b.n	801325a <UART_SetConfig+0x7ae>
 8012f5c:	2320      	movs	r3, #32
 8012f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f62:	e17a      	b.n	801325a <UART_SetConfig+0x7ae>
 8012f64:	2340      	movs	r3, #64	@ 0x40
 8012f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f6a:	e176      	b.n	801325a <UART_SetConfig+0x7ae>
 8012f6c:	2380      	movs	r3, #128	@ 0x80
 8012f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f72:	e172      	b.n	801325a <UART_SetConfig+0x7ae>
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4a5b      	ldr	r2, [pc, #364]	@ (80130e8 <UART_SetConfig+0x63c>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d130      	bne.n	8012fe0 <UART_SetConfig+0x534>
 8012f7e:	4b58      	ldr	r3, [pc, #352]	@ (80130e0 <UART_SetConfig+0x634>)
 8012f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f82:	f003 0307 	and.w	r3, r3, #7
 8012f86:	2b05      	cmp	r3, #5
 8012f88:	d826      	bhi.n	8012fd8 <UART_SetConfig+0x52c>
 8012f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8012f90 <UART_SetConfig+0x4e4>)
 8012f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f90:	08012fa9 	.word	0x08012fa9
 8012f94:	08012fb1 	.word	0x08012fb1
 8012f98:	08012fb9 	.word	0x08012fb9
 8012f9c:	08012fc1 	.word	0x08012fc1
 8012fa0:	08012fc9 	.word	0x08012fc9
 8012fa4:	08012fd1 	.word	0x08012fd1
 8012fa8:	2300      	movs	r3, #0
 8012faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fae:	e154      	b.n	801325a <UART_SetConfig+0x7ae>
 8012fb0:	2304      	movs	r3, #4
 8012fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fb6:	e150      	b.n	801325a <UART_SetConfig+0x7ae>
 8012fb8:	2308      	movs	r3, #8
 8012fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fbe:	e14c      	b.n	801325a <UART_SetConfig+0x7ae>
 8012fc0:	2310      	movs	r3, #16
 8012fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fc6:	e148      	b.n	801325a <UART_SetConfig+0x7ae>
 8012fc8:	2320      	movs	r3, #32
 8012fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fce:	e144      	b.n	801325a <UART_SetConfig+0x7ae>
 8012fd0:	2340      	movs	r3, #64	@ 0x40
 8012fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fd6:	e140      	b.n	801325a <UART_SetConfig+0x7ae>
 8012fd8:	2380      	movs	r3, #128	@ 0x80
 8012fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fde:	e13c      	b.n	801325a <UART_SetConfig+0x7ae>
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4a41      	ldr	r2, [pc, #260]	@ (80130ec <UART_SetConfig+0x640>)
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	f040 8082 	bne.w	80130f0 <UART_SetConfig+0x644>
 8012fec:	4b3c      	ldr	r3, [pc, #240]	@ (80130e0 <UART_SetConfig+0x634>)
 8012fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ff0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012ff4:	2b28      	cmp	r3, #40	@ 0x28
 8012ff6:	d86d      	bhi.n	80130d4 <UART_SetConfig+0x628>
 8012ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8013000 <UART_SetConfig+0x554>)
 8012ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ffe:	bf00      	nop
 8013000:	080130a5 	.word	0x080130a5
 8013004:	080130d5 	.word	0x080130d5
 8013008:	080130d5 	.word	0x080130d5
 801300c:	080130d5 	.word	0x080130d5
 8013010:	080130d5 	.word	0x080130d5
 8013014:	080130d5 	.word	0x080130d5
 8013018:	080130d5 	.word	0x080130d5
 801301c:	080130d5 	.word	0x080130d5
 8013020:	080130ad 	.word	0x080130ad
 8013024:	080130d5 	.word	0x080130d5
 8013028:	080130d5 	.word	0x080130d5
 801302c:	080130d5 	.word	0x080130d5
 8013030:	080130d5 	.word	0x080130d5
 8013034:	080130d5 	.word	0x080130d5
 8013038:	080130d5 	.word	0x080130d5
 801303c:	080130d5 	.word	0x080130d5
 8013040:	080130b5 	.word	0x080130b5
 8013044:	080130d5 	.word	0x080130d5
 8013048:	080130d5 	.word	0x080130d5
 801304c:	080130d5 	.word	0x080130d5
 8013050:	080130d5 	.word	0x080130d5
 8013054:	080130d5 	.word	0x080130d5
 8013058:	080130d5 	.word	0x080130d5
 801305c:	080130d5 	.word	0x080130d5
 8013060:	080130bd 	.word	0x080130bd
 8013064:	080130d5 	.word	0x080130d5
 8013068:	080130d5 	.word	0x080130d5
 801306c:	080130d5 	.word	0x080130d5
 8013070:	080130d5 	.word	0x080130d5
 8013074:	080130d5 	.word	0x080130d5
 8013078:	080130d5 	.word	0x080130d5
 801307c:	080130d5 	.word	0x080130d5
 8013080:	080130c5 	.word	0x080130c5
 8013084:	080130d5 	.word	0x080130d5
 8013088:	080130d5 	.word	0x080130d5
 801308c:	080130d5 	.word	0x080130d5
 8013090:	080130d5 	.word	0x080130d5
 8013094:	080130d5 	.word	0x080130d5
 8013098:	080130d5 	.word	0x080130d5
 801309c:	080130d5 	.word	0x080130d5
 80130a0:	080130cd 	.word	0x080130cd
 80130a4:	2301      	movs	r3, #1
 80130a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130aa:	e0d6      	b.n	801325a <UART_SetConfig+0x7ae>
 80130ac:	2304      	movs	r3, #4
 80130ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130b2:	e0d2      	b.n	801325a <UART_SetConfig+0x7ae>
 80130b4:	2308      	movs	r3, #8
 80130b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ba:	e0ce      	b.n	801325a <UART_SetConfig+0x7ae>
 80130bc:	2310      	movs	r3, #16
 80130be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130c2:	e0ca      	b.n	801325a <UART_SetConfig+0x7ae>
 80130c4:	2320      	movs	r3, #32
 80130c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ca:	e0c6      	b.n	801325a <UART_SetConfig+0x7ae>
 80130cc:	2340      	movs	r3, #64	@ 0x40
 80130ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130d2:	e0c2      	b.n	801325a <UART_SetConfig+0x7ae>
 80130d4:	2380      	movs	r3, #128	@ 0x80
 80130d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130da:	e0be      	b.n	801325a <UART_SetConfig+0x7ae>
 80130dc:	40011400 	.word	0x40011400
 80130e0:	58024400 	.word	0x58024400
 80130e4:	40007800 	.word	0x40007800
 80130e8:	40007c00 	.word	0x40007c00
 80130ec:	40011800 	.word	0x40011800
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	4aad      	ldr	r2, [pc, #692]	@ (80133ac <UART_SetConfig+0x900>)
 80130f6:	4293      	cmp	r3, r2
 80130f8:	d176      	bne.n	80131e8 <UART_SetConfig+0x73c>
 80130fa:	4bad      	ldr	r3, [pc, #692]	@ (80133b0 <UART_SetConfig+0x904>)
 80130fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013102:	2b28      	cmp	r3, #40	@ 0x28
 8013104:	d86c      	bhi.n	80131e0 <UART_SetConfig+0x734>
 8013106:	a201      	add	r2, pc, #4	@ (adr r2, 801310c <UART_SetConfig+0x660>)
 8013108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801310c:	080131b1 	.word	0x080131b1
 8013110:	080131e1 	.word	0x080131e1
 8013114:	080131e1 	.word	0x080131e1
 8013118:	080131e1 	.word	0x080131e1
 801311c:	080131e1 	.word	0x080131e1
 8013120:	080131e1 	.word	0x080131e1
 8013124:	080131e1 	.word	0x080131e1
 8013128:	080131e1 	.word	0x080131e1
 801312c:	080131b9 	.word	0x080131b9
 8013130:	080131e1 	.word	0x080131e1
 8013134:	080131e1 	.word	0x080131e1
 8013138:	080131e1 	.word	0x080131e1
 801313c:	080131e1 	.word	0x080131e1
 8013140:	080131e1 	.word	0x080131e1
 8013144:	080131e1 	.word	0x080131e1
 8013148:	080131e1 	.word	0x080131e1
 801314c:	080131c1 	.word	0x080131c1
 8013150:	080131e1 	.word	0x080131e1
 8013154:	080131e1 	.word	0x080131e1
 8013158:	080131e1 	.word	0x080131e1
 801315c:	080131e1 	.word	0x080131e1
 8013160:	080131e1 	.word	0x080131e1
 8013164:	080131e1 	.word	0x080131e1
 8013168:	080131e1 	.word	0x080131e1
 801316c:	080131c9 	.word	0x080131c9
 8013170:	080131e1 	.word	0x080131e1
 8013174:	080131e1 	.word	0x080131e1
 8013178:	080131e1 	.word	0x080131e1
 801317c:	080131e1 	.word	0x080131e1
 8013180:	080131e1 	.word	0x080131e1
 8013184:	080131e1 	.word	0x080131e1
 8013188:	080131e1 	.word	0x080131e1
 801318c:	080131d1 	.word	0x080131d1
 8013190:	080131e1 	.word	0x080131e1
 8013194:	080131e1 	.word	0x080131e1
 8013198:	080131e1 	.word	0x080131e1
 801319c:	080131e1 	.word	0x080131e1
 80131a0:	080131e1 	.word	0x080131e1
 80131a4:	080131e1 	.word	0x080131e1
 80131a8:	080131e1 	.word	0x080131e1
 80131ac:	080131d9 	.word	0x080131d9
 80131b0:	2301      	movs	r3, #1
 80131b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131b6:	e050      	b.n	801325a <UART_SetConfig+0x7ae>
 80131b8:	2304      	movs	r3, #4
 80131ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131be:	e04c      	b.n	801325a <UART_SetConfig+0x7ae>
 80131c0:	2308      	movs	r3, #8
 80131c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131c6:	e048      	b.n	801325a <UART_SetConfig+0x7ae>
 80131c8:	2310      	movs	r3, #16
 80131ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131ce:	e044      	b.n	801325a <UART_SetConfig+0x7ae>
 80131d0:	2320      	movs	r3, #32
 80131d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131d6:	e040      	b.n	801325a <UART_SetConfig+0x7ae>
 80131d8:	2340      	movs	r3, #64	@ 0x40
 80131da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131de:	e03c      	b.n	801325a <UART_SetConfig+0x7ae>
 80131e0:	2380      	movs	r3, #128	@ 0x80
 80131e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131e6:	e038      	b.n	801325a <UART_SetConfig+0x7ae>
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4a71      	ldr	r2, [pc, #452]	@ (80133b4 <UART_SetConfig+0x908>)
 80131ee:	4293      	cmp	r3, r2
 80131f0:	d130      	bne.n	8013254 <UART_SetConfig+0x7a8>
 80131f2:	4b6f      	ldr	r3, [pc, #444]	@ (80133b0 <UART_SetConfig+0x904>)
 80131f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131f6:	f003 0307 	and.w	r3, r3, #7
 80131fa:	2b05      	cmp	r3, #5
 80131fc:	d826      	bhi.n	801324c <UART_SetConfig+0x7a0>
 80131fe:	a201      	add	r2, pc, #4	@ (adr r2, 8013204 <UART_SetConfig+0x758>)
 8013200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013204:	0801321d 	.word	0x0801321d
 8013208:	08013225 	.word	0x08013225
 801320c:	0801322d 	.word	0x0801322d
 8013210:	08013235 	.word	0x08013235
 8013214:	0801323d 	.word	0x0801323d
 8013218:	08013245 	.word	0x08013245
 801321c:	2302      	movs	r3, #2
 801321e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013222:	e01a      	b.n	801325a <UART_SetConfig+0x7ae>
 8013224:	2304      	movs	r3, #4
 8013226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801322a:	e016      	b.n	801325a <UART_SetConfig+0x7ae>
 801322c:	2308      	movs	r3, #8
 801322e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013232:	e012      	b.n	801325a <UART_SetConfig+0x7ae>
 8013234:	2310      	movs	r3, #16
 8013236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801323a:	e00e      	b.n	801325a <UART_SetConfig+0x7ae>
 801323c:	2320      	movs	r3, #32
 801323e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013242:	e00a      	b.n	801325a <UART_SetConfig+0x7ae>
 8013244:	2340      	movs	r3, #64	@ 0x40
 8013246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801324a:	e006      	b.n	801325a <UART_SetConfig+0x7ae>
 801324c:	2380      	movs	r3, #128	@ 0x80
 801324e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013252:	e002      	b.n	801325a <UART_SetConfig+0x7ae>
 8013254:	2380      	movs	r3, #128	@ 0x80
 8013256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	4a55      	ldr	r2, [pc, #340]	@ (80133b4 <UART_SetConfig+0x908>)
 8013260:	4293      	cmp	r3, r2
 8013262:	f040 80f8 	bne.w	8013456 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013266:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801326a:	2b20      	cmp	r3, #32
 801326c:	dc46      	bgt.n	80132fc <UART_SetConfig+0x850>
 801326e:	2b02      	cmp	r3, #2
 8013270:	db75      	blt.n	801335e <UART_SetConfig+0x8b2>
 8013272:	3b02      	subs	r3, #2
 8013274:	2b1e      	cmp	r3, #30
 8013276:	d872      	bhi.n	801335e <UART_SetConfig+0x8b2>
 8013278:	a201      	add	r2, pc, #4	@ (adr r2, 8013280 <UART_SetConfig+0x7d4>)
 801327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801327e:	bf00      	nop
 8013280:	08013303 	.word	0x08013303
 8013284:	0801335f 	.word	0x0801335f
 8013288:	0801330b 	.word	0x0801330b
 801328c:	0801335f 	.word	0x0801335f
 8013290:	0801335f 	.word	0x0801335f
 8013294:	0801335f 	.word	0x0801335f
 8013298:	0801331b 	.word	0x0801331b
 801329c:	0801335f 	.word	0x0801335f
 80132a0:	0801335f 	.word	0x0801335f
 80132a4:	0801335f 	.word	0x0801335f
 80132a8:	0801335f 	.word	0x0801335f
 80132ac:	0801335f 	.word	0x0801335f
 80132b0:	0801335f 	.word	0x0801335f
 80132b4:	0801335f 	.word	0x0801335f
 80132b8:	0801332b 	.word	0x0801332b
 80132bc:	0801335f 	.word	0x0801335f
 80132c0:	0801335f 	.word	0x0801335f
 80132c4:	0801335f 	.word	0x0801335f
 80132c8:	0801335f 	.word	0x0801335f
 80132cc:	0801335f 	.word	0x0801335f
 80132d0:	0801335f 	.word	0x0801335f
 80132d4:	0801335f 	.word	0x0801335f
 80132d8:	0801335f 	.word	0x0801335f
 80132dc:	0801335f 	.word	0x0801335f
 80132e0:	0801335f 	.word	0x0801335f
 80132e4:	0801335f 	.word	0x0801335f
 80132e8:	0801335f 	.word	0x0801335f
 80132ec:	0801335f 	.word	0x0801335f
 80132f0:	0801335f 	.word	0x0801335f
 80132f4:	0801335f 	.word	0x0801335f
 80132f8:	08013351 	.word	0x08013351
 80132fc:	2b40      	cmp	r3, #64	@ 0x40
 80132fe:	d02a      	beq.n	8013356 <UART_SetConfig+0x8aa>
 8013300:	e02d      	b.n	801335e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013302:	f7fa ffb7 	bl	800e274 <HAL_RCCEx_GetD3PCLK1Freq>
 8013306:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013308:	e02f      	b.n	801336a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801330a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801330e:	4618      	mov	r0, r3
 8013310:	f7fa ffc6 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013318:	e027      	b.n	801336a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801331a:	f107 0318 	add.w	r3, r7, #24
 801331e:	4618      	mov	r0, r3
 8013320:	f7fb f912 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013328:	e01f      	b.n	801336a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801332a:	4b21      	ldr	r3, [pc, #132]	@ (80133b0 <UART_SetConfig+0x904>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	f003 0320 	and.w	r3, r3, #32
 8013332:	2b00      	cmp	r3, #0
 8013334:	d009      	beq.n	801334a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013336:	4b1e      	ldr	r3, [pc, #120]	@ (80133b0 <UART_SetConfig+0x904>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	08db      	lsrs	r3, r3, #3
 801333c:	f003 0303 	and.w	r3, r3, #3
 8013340:	4a1d      	ldr	r2, [pc, #116]	@ (80133b8 <UART_SetConfig+0x90c>)
 8013342:	fa22 f303 	lsr.w	r3, r2, r3
 8013346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013348:	e00f      	b.n	801336a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801334a:	4b1b      	ldr	r3, [pc, #108]	@ (80133b8 <UART_SetConfig+0x90c>)
 801334c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801334e:	e00c      	b.n	801336a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013350:	4b1a      	ldr	r3, [pc, #104]	@ (80133bc <UART_SetConfig+0x910>)
 8013352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013354:	e009      	b.n	801336a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801335a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801335c:	e005      	b.n	801336a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801335e:	2300      	movs	r3, #0
 8013360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013362:	2301      	movs	r3, #1
 8013364:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013368:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801336a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801336c:	2b00      	cmp	r3, #0
 801336e:	f000 81ee 	beq.w	801374e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013376:	4a12      	ldr	r2, [pc, #72]	@ (80133c0 <UART_SetConfig+0x914>)
 8013378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801337c:	461a      	mov	r2, r3
 801337e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013380:	fbb3 f3f2 	udiv	r3, r3, r2
 8013384:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	685a      	ldr	r2, [r3, #4]
 801338a:	4613      	mov	r3, r2
 801338c:	005b      	lsls	r3, r3, #1
 801338e:	4413      	add	r3, r2
 8013390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013392:	429a      	cmp	r2, r3
 8013394:	d305      	bcc.n	80133a2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801339c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801339e:	429a      	cmp	r2, r3
 80133a0:	d910      	bls.n	80133c4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80133a2:	2301      	movs	r3, #1
 80133a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80133a8:	e1d1      	b.n	801374e <UART_SetConfig+0xca2>
 80133aa:	bf00      	nop
 80133ac:	40011c00 	.word	0x40011c00
 80133b0:	58024400 	.word	0x58024400
 80133b4:	58000c00 	.word	0x58000c00
 80133b8:	03d09000 	.word	0x03d09000
 80133bc:	003d0900 	.word	0x003d0900
 80133c0:	0801b2bc 	.word	0x0801b2bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80133c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133c6:	2200      	movs	r2, #0
 80133c8:	60bb      	str	r3, [r7, #8]
 80133ca:	60fa      	str	r2, [r7, #12]
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133d0:	4ac0      	ldr	r2, [pc, #768]	@ (80136d4 <UART_SetConfig+0xc28>)
 80133d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133d6:	b29b      	uxth	r3, r3
 80133d8:	2200      	movs	r2, #0
 80133da:	603b      	str	r3, [r7, #0]
 80133dc:	607a      	str	r2, [r7, #4]
 80133de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80133e6:	f7ed f9a7 	bl	8000738 <__aeabi_uldivmod>
 80133ea:	4602      	mov	r2, r0
 80133ec:	460b      	mov	r3, r1
 80133ee:	4610      	mov	r0, r2
 80133f0:	4619      	mov	r1, r3
 80133f2:	f04f 0200 	mov.w	r2, #0
 80133f6:	f04f 0300 	mov.w	r3, #0
 80133fa:	020b      	lsls	r3, r1, #8
 80133fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013400:	0202      	lsls	r2, r0, #8
 8013402:	6979      	ldr	r1, [r7, #20]
 8013404:	6849      	ldr	r1, [r1, #4]
 8013406:	0849      	lsrs	r1, r1, #1
 8013408:	2000      	movs	r0, #0
 801340a:	460c      	mov	r4, r1
 801340c:	4605      	mov	r5, r0
 801340e:	eb12 0804 	adds.w	r8, r2, r4
 8013412:	eb43 0905 	adc.w	r9, r3, r5
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	685b      	ldr	r3, [r3, #4]
 801341a:	2200      	movs	r2, #0
 801341c:	469a      	mov	sl, r3
 801341e:	4693      	mov	fp, r2
 8013420:	4652      	mov	r2, sl
 8013422:	465b      	mov	r3, fp
 8013424:	4640      	mov	r0, r8
 8013426:	4649      	mov	r1, r9
 8013428:	f7ed f986 	bl	8000738 <__aeabi_uldivmod>
 801342c:	4602      	mov	r2, r0
 801342e:	460b      	mov	r3, r1
 8013430:	4613      	mov	r3, r2
 8013432:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801343a:	d308      	bcc.n	801344e <UART_SetConfig+0x9a2>
 801343c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801343e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013442:	d204      	bcs.n	801344e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801344a:	60da      	str	r2, [r3, #12]
 801344c:	e17f      	b.n	801374e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801344e:	2301      	movs	r3, #1
 8013450:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013454:	e17b      	b.n	801374e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	69db      	ldr	r3, [r3, #28]
 801345a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801345e:	f040 80bd 	bne.w	80135dc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8013462:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013466:	2b20      	cmp	r3, #32
 8013468:	dc48      	bgt.n	80134fc <UART_SetConfig+0xa50>
 801346a:	2b00      	cmp	r3, #0
 801346c:	db7b      	blt.n	8013566 <UART_SetConfig+0xaba>
 801346e:	2b20      	cmp	r3, #32
 8013470:	d879      	bhi.n	8013566 <UART_SetConfig+0xaba>
 8013472:	a201      	add	r2, pc, #4	@ (adr r2, 8013478 <UART_SetConfig+0x9cc>)
 8013474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013478:	08013503 	.word	0x08013503
 801347c:	0801350b 	.word	0x0801350b
 8013480:	08013567 	.word	0x08013567
 8013484:	08013567 	.word	0x08013567
 8013488:	08013513 	.word	0x08013513
 801348c:	08013567 	.word	0x08013567
 8013490:	08013567 	.word	0x08013567
 8013494:	08013567 	.word	0x08013567
 8013498:	08013523 	.word	0x08013523
 801349c:	08013567 	.word	0x08013567
 80134a0:	08013567 	.word	0x08013567
 80134a4:	08013567 	.word	0x08013567
 80134a8:	08013567 	.word	0x08013567
 80134ac:	08013567 	.word	0x08013567
 80134b0:	08013567 	.word	0x08013567
 80134b4:	08013567 	.word	0x08013567
 80134b8:	08013533 	.word	0x08013533
 80134bc:	08013567 	.word	0x08013567
 80134c0:	08013567 	.word	0x08013567
 80134c4:	08013567 	.word	0x08013567
 80134c8:	08013567 	.word	0x08013567
 80134cc:	08013567 	.word	0x08013567
 80134d0:	08013567 	.word	0x08013567
 80134d4:	08013567 	.word	0x08013567
 80134d8:	08013567 	.word	0x08013567
 80134dc:	08013567 	.word	0x08013567
 80134e0:	08013567 	.word	0x08013567
 80134e4:	08013567 	.word	0x08013567
 80134e8:	08013567 	.word	0x08013567
 80134ec:	08013567 	.word	0x08013567
 80134f0:	08013567 	.word	0x08013567
 80134f4:	08013567 	.word	0x08013567
 80134f8:	08013559 	.word	0x08013559
 80134fc:	2b40      	cmp	r3, #64	@ 0x40
 80134fe:	d02e      	beq.n	801355e <UART_SetConfig+0xab2>
 8013500:	e031      	b.n	8013566 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013502:	f7f8 fffd 	bl	800c500 <HAL_RCC_GetPCLK1Freq>
 8013506:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013508:	e033      	b.n	8013572 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801350a:	f7f9 f80f 	bl	800c52c <HAL_RCC_GetPCLK2Freq>
 801350e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013510:	e02f      	b.n	8013572 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013516:	4618      	mov	r0, r3
 8013518:	f7fa fec2 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801351e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013520:	e027      	b.n	8013572 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013522:	f107 0318 	add.w	r3, r7, #24
 8013526:	4618      	mov	r0, r3
 8013528:	f7fb f80e 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801352c:	69fb      	ldr	r3, [r7, #28]
 801352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013530:	e01f      	b.n	8013572 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013532:	4b69      	ldr	r3, [pc, #420]	@ (80136d8 <UART_SetConfig+0xc2c>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f003 0320 	and.w	r3, r3, #32
 801353a:	2b00      	cmp	r3, #0
 801353c:	d009      	beq.n	8013552 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801353e:	4b66      	ldr	r3, [pc, #408]	@ (80136d8 <UART_SetConfig+0xc2c>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	08db      	lsrs	r3, r3, #3
 8013544:	f003 0303 	and.w	r3, r3, #3
 8013548:	4a64      	ldr	r2, [pc, #400]	@ (80136dc <UART_SetConfig+0xc30>)
 801354a:	fa22 f303 	lsr.w	r3, r2, r3
 801354e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013550:	e00f      	b.n	8013572 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8013552:	4b62      	ldr	r3, [pc, #392]	@ (80136dc <UART_SetConfig+0xc30>)
 8013554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013556:	e00c      	b.n	8013572 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013558:	4b61      	ldr	r3, [pc, #388]	@ (80136e0 <UART_SetConfig+0xc34>)
 801355a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801355c:	e009      	b.n	8013572 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801355e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013564:	e005      	b.n	8013572 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8013566:	2300      	movs	r3, #0
 8013568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801356a:	2301      	movs	r3, #1
 801356c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013570:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013574:	2b00      	cmp	r3, #0
 8013576:	f000 80ea 	beq.w	801374e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801357e:	4a55      	ldr	r2, [pc, #340]	@ (80136d4 <UART_SetConfig+0xc28>)
 8013580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013584:	461a      	mov	r2, r3
 8013586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013588:	fbb3 f3f2 	udiv	r3, r3, r2
 801358c:	005a      	lsls	r2, r3, #1
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	685b      	ldr	r3, [r3, #4]
 8013592:	085b      	lsrs	r3, r3, #1
 8013594:	441a      	add	r2, r3
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	fbb2 f3f3 	udiv	r3, r2, r3
 801359e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80135a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a2:	2b0f      	cmp	r3, #15
 80135a4:	d916      	bls.n	80135d4 <UART_SetConfig+0xb28>
 80135a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135ac:	d212      	bcs.n	80135d4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80135ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b0:	b29b      	uxth	r3, r3
 80135b2:	f023 030f 	bic.w	r3, r3, #15
 80135b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80135b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ba:	085b      	lsrs	r3, r3, #1
 80135bc:	b29b      	uxth	r3, r3
 80135be:	f003 0307 	and.w	r3, r3, #7
 80135c2:	b29a      	uxth	r2, r3
 80135c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80135c6:	4313      	orrs	r3, r2
 80135c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80135d0:	60da      	str	r2, [r3, #12]
 80135d2:	e0bc      	b.n	801374e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80135d4:	2301      	movs	r3, #1
 80135d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80135da:	e0b8      	b.n	801374e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80135dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80135e0:	2b20      	cmp	r3, #32
 80135e2:	dc4b      	bgt.n	801367c <UART_SetConfig+0xbd0>
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	f2c0 8087 	blt.w	80136f8 <UART_SetConfig+0xc4c>
 80135ea:	2b20      	cmp	r3, #32
 80135ec:	f200 8084 	bhi.w	80136f8 <UART_SetConfig+0xc4c>
 80135f0:	a201      	add	r2, pc, #4	@ (adr r2, 80135f8 <UART_SetConfig+0xb4c>)
 80135f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135f6:	bf00      	nop
 80135f8:	08013683 	.word	0x08013683
 80135fc:	0801368b 	.word	0x0801368b
 8013600:	080136f9 	.word	0x080136f9
 8013604:	080136f9 	.word	0x080136f9
 8013608:	08013693 	.word	0x08013693
 801360c:	080136f9 	.word	0x080136f9
 8013610:	080136f9 	.word	0x080136f9
 8013614:	080136f9 	.word	0x080136f9
 8013618:	080136a3 	.word	0x080136a3
 801361c:	080136f9 	.word	0x080136f9
 8013620:	080136f9 	.word	0x080136f9
 8013624:	080136f9 	.word	0x080136f9
 8013628:	080136f9 	.word	0x080136f9
 801362c:	080136f9 	.word	0x080136f9
 8013630:	080136f9 	.word	0x080136f9
 8013634:	080136f9 	.word	0x080136f9
 8013638:	080136b3 	.word	0x080136b3
 801363c:	080136f9 	.word	0x080136f9
 8013640:	080136f9 	.word	0x080136f9
 8013644:	080136f9 	.word	0x080136f9
 8013648:	080136f9 	.word	0x080136f9
 801364c:	080136f9 	.word	0x080136f9
 8013650:	080136f9 	.word	0x080136f9
 8013654:	080136f9 	.word	0x080136f9
 8013658:	080136f9 	.word	0x080136f9
 801365c:	080136f9 	.word	0x080136f9
 8013660:	080136f9 	.word	0x080136f9
 8013664:	080136f9 	.word	0x080136f9
 8013668:	080136f9 	.word	0x080136f9
 801366c:	080136f9 	.word	0x080136f9
 8013670:	080136f9 	.word	0x080136f9
 8013674:	080136f9 	.word	0x080136f9
 8013678:	080136eb 	.word	0x080136eb
 801367c:	2b40      	cmp	r3, #64	@ 0x40
 801367e:	d037      	beq.n	80136f0 <UART_SetConfig+0xc44>
 8013680:	e03a      	b.n	80136f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013682:	f7f8 ff3d 	bl	800c500 <HAL_RCC_GetPCLK1Freq>
 8013686:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013688:	e03c      	b.n	8013704 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801368a:	f7f8 ff4f 	bl	800c52c <HAL_RCC_GetPCLK2Freq>
 801368e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013690:	e038      	b.n	8013704 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013696:	4618      	mov	r0, r3
 8013698:	f7fa fe02 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801369e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136a0:	e030      	b.n	8013704 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136a2:	f107 0318 	add.w	r3, r7, #24
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7fa ff4e 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80136ac:	69fb      	ldr	r3, [r7, #28]
 80136ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136b0:	e028      	b.n	8013704 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80136b2:	4b09      	ldr	r3, [pc, #36]	@ (80136d8 <UART_SetConfig+0xc2c>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f003 0320 	and.w	r3, r3, #32
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d012      	beq.n	80136e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80136be:	4b06      	ldr	r3, [pc, #24]	@ (80136d8 <UART_SetConfig+0xc2c>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	08db      	lsrs	r3, r3, #3
 80136c4:	f003 0303 	and.w	r3, r3, #3
 80136c8:	4a04      	ldr	r2, [pc, #16]	@ (80136dc <UART_SetConfig+0xc30>)
 80136ca:	fa22 f303 	lsr.w	r3, r2, r3
 80136ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80136d0:	e018      	b.n	8013704 <UART_SetConfig+0xc58>
 80136d2:	bf00      	nop
 80136d4:	0801b2bc 	.word	0x0801b2bc
 80136d8:	58024400 	.word	0x58024400
 80136dc:	03d09000 	.word	0x03d09000
 80136e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80136e4:	4b24      	ldr	r3, [pc, #144]	@ (8013778 <UART_SetConfig+0xccc>)
 80136e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136e8:	e00c      	b.n	8013704 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80136ea:	4b24      	ldr	r3, [pc, #144]	@ (801377c <UART_SetConfig+0xcd0>)
 80136ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136ee:	e009      	b.n	8013704 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80136f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80136f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136f6:	e005      	b.n	8013704 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80136f8:	2300      	movs	r3, #0
 80136fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80136fc:	2301      	movs	r3, #1
 80136fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013702:	bf00      	nop
    }

    if (pclk != 0U)
 8013704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013706:	2b00      	cmp	r3, #0
 8013708:	d021      	beq.n	801374e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801370e:	4a1c      	ldr	r2, [pc, #112]	@ (8013780 <UART_SetConfig+0xcd4>)
 8013710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013714:	461a      	mov	r2, r3
 8013716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013718:	fbb3 f2f2 	udiv	r2, r3, r2
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	085b      	lsrs	r3, r3, #1
 8013722:	441a      	add	r2, r3
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	685b      	ldr	r3, [r3, #4]
 8013728:	fbb2 f3f3 	udiv	r3, r2, r3
 801372c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801372e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013730:	2b0f      	cmp	r3, #15
 8013732:	d909      	bls.n	8013748 <UART_SetConfig+0xc9c>
 8013734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801373a:	d205      	bcs.n	8013748 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801373c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801373e:	b29a      	uxth	r2, r3
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	60da      	str	r2, [r3, #12]
 8013746:	e002      	b.n	801374e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013748:	2301      	movs	r3, #1
 801374a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	2201      	movs	r2, #1
 8013752:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	2201      	movs	r2, #1
 801375a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	2200      	movs	r2, #0
 8013762:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	2200      	movs	r2, #0
 8013768:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801376a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801376e:	4618      	mov	r0, r3
 8013770:	3748      	adds	r7, #72	@ 0x48
 8013772:	46bd      	mov	sp, r7
 8013774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013778:	03d09000 	.word	0x03d09000
 801377c:	003d0900 	.word	0x003d0900
 8013780:	0801b2bc 	.word	0x0801b2bc

08013784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013784:	b480      	push	{r7}
 8013786:	b083      	sub	sp, #12
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013790:	f003 0308 	and.w	r3, r3, #8
 8013794:	2b00      	cmp	r3, #0
 8013796:	d00a      	beq.n	80137ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	685b      	ldr	r3, [r3, #4]
 801379e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	430a      	orrs	r2, r1
 80137ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137b2:	f003 0301 	and.w	r3, r3, #1
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d00a      	beq.n	80137d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	685b      	ldr	r3, [r3, #4]
 80137c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	430a      	orrs	r2, r1
 80137ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137d4:	f003 0302 	and.w	r3, r3, #2
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d00a      	beq.n	80137f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	430a      	orrs	r2, r1
 80137f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137f6:	f003 0304 	and.w	r3, r3, #4
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d00a      	beq.n	8013814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	430a      	orrs	r2, r1
 8013812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013818:	f003 0310 	and.w	r3, r3, #16
 801381c:	2b00      	cmp	r3, #0
 801381e:	d00a      	beq.n	8013836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	689b      	ldr	r3, [r3, #8]
 8013826:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	430a      	orrs	r2, r1
 8013834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801383a:	f003 0320 	and.w	r3, r3, #32
 801383e:	2b00      	cmp	r3, #0
 8013840:	d00a      	beq.n	8013858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	689b      	ldr	r3, [r3, #8]
 8013848:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	430a      	orrs	r2, r1
 8013856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801385c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013860:	2b00      	cmp	r3, #0
 8013862:	d01a      	beq.n	801389a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	430a      	orrs	r2, r1
 8013878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801387e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013882:	d10a      	bne.n	801389a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	430a      	orrs	r2, r1
 8013898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801389e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d00a      	beq.n	80138bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	685b      	ldr	r3, [r3, #4]
 80138ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	430a      	orrs	r2, r1
 80138ba:	605a      	str	r2, [r3, #4]
  }
}
 80138bc:	bf00      	nop
 80138be:	370c      	adds	r7, #12
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr

080138c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b098      	sub	sp, #96	@ 0x60
 80138cc:	af02      	add	r7, sp, #8
 80138ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2200      	movs	r2, #0
 80138d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80138d8:	f7f3 fc32 	bl	8007140 <HAL_GetTick>
 80138dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	f003 0308 	and.w	r3, r3, #8
 80138e8:	2b08      	cmp	r3, #8
 80138ea:	d12f      	bne.n	801394c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80138ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80138f0:	9300      	str	r3, [sp, #0]
 80138f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138f4:	2200      	movs	r2, #0
 80138f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f000 f88e 	bl	8013a1c <UART_WaitOnFlagUntilTimeout>
 8013900:	4603      	mov	r3, r0
 8013902:	2b00      	cmp	r3, #0
 8013904:	d022      	beq.n	801394c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390e:	e853 3f00 	ldrex	r3, [r3]
 8013912:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801391a:	653b      	str	r3, [r7, #80]	@ 0x50
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	461a      	mov	r2, r3
 8013922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013924:	647b      	str	r3, [r7, #68]	@ 0x44
 8013926:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013928:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801392a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801392c:	e841 2300 	strex	r3, r2, [r1]
 8013930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013934:	2b00      	cmp	r3, #0
 8013936:	d1e6      	bne.n	8013906 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2220      	movs	r2, #32
 801393c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2200      	movs	r2, #0
 8013944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013948:	2303      	movs	r3, #3
 801394a:	e063      	b.n	8013a14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	f003 0304 	and.w	r3, r3, #4
 8013956:	2b04      	cmp	r3, #4
 8013958:	d149      	bne.n	80139ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801395a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801395e:	9300      	str	r3, [sp, #0]
 8013960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013962:	2200      	movs	r2, #0
 8013964:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f000 f857 	bl	8013a1c <UART_WaitOnFlagUntilTimeout>
 801396e:	4603      	mov	r3, r0
 8013970:	2b00      	cmp	r3, #0
 8013972:	d03c      	beq.n	80139ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801397c:	e853 3f00 	ldrex	r3, [r3]
 8013980:	623b      	str	r3, [r7, #32]
   return(result);
 8013982:	6a3b      	ldr	r3, [r7, #32]
 8013984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	461a      	mov	r2, r3
 8013990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013992:	633b      	str	r3, [r7, #48]	@ 0x30
 8013994:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801399a:	e841 2300 	strex	r3, r2, [r1]
 801399e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80139a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d1e6      	bne.n	8013974 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	3308      	adds	r3, #8
 80139ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	e853 3f00 	ldrex	r3, [r3]
 80139b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	f023 0301 	bic.w	r3, r3, #1
 80139bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	3308      	adds	r3, #8
 80139c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139c6:	61fa      	str	r2, [r7, #28]
 80139c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139ca:	69b9      	ldr	r1, [r7, #24]
 80139cc:	69fa      	ldr	r2, [r7, #28]
 80139ce:	e841 2300 	strex	r3, r2, [r1]
 80139d2:	617b      	str	r3, [r7, #20]
   return(result);
 80139d4:	697b      	ldr	r3, [r7, #20]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d1e5      	bne.n	80139a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	2220      	movs	r2, #32
 80139de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2200      	movs	r2, #0
 80139e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80139ea:	2303      	movs	r3, #3
 80139ec:	e012      	b.n	8013a14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2220      	movs	r2, #32
 80139f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2220      	movs	r2, #32
 80139fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2200      	movs	r2, #0
 8013a02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2200      	movs	r2, #0
 8013a08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013a12:	2300      	movs	r3, #0
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3758      	adds	r7, #88	@ 0x58
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b084      	sub	sp, #16
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	60f8      	str	r0, [r7, #12]
 8013a24:	60b9      	str	r1, [r7, #8]
 8013a26:	603b      	str	r3, [r7, #0]
 8013a28:	4613      	mov	r3, r2
 8013a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013a2c:	e04f      	b.n	8013ace <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013a2e:	69bb      	ldr	r3, [r7, #24]
 8013a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a34:	d04b      	beq.n	8013ace <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013a36:	f7f3 fb83 	bl	8007140 <HAL_GetTick>
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	1ad3      	subs	r3, r2, r3
 8013a40:	69ba      	ldr	r2, [r7, #24]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d302      	bcc.n	8013a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8013a46:	69bb      	ldr	r3, [r7, #24]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d101      	bne.n	8013a50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013a4c:	2303      	movs	r3, #3
 8013a4e:	e04e      	b.n	8013aee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	f003 0304 	and.w	r3, r3, #4
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d037      	beq.n	8013ace <UART_WaitOnFlagUntilTimeout+0xb2>
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	2b80      	cmp	r3, #128	@ 0x80
 8013a62:	d034      	beq.n	8013ace <UART_WaitOnFlagUntilTimeout+0xb2>
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2b40      	cmp	r3, #64	@ 0x40
 8013a68:	d031      	beq.n	8013ace <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	69db      	ldr	r3, [r3, #28]
 8013a70:	f003 0308 	and.w	r3, r3, #8
 8013a74:	2b08      	cmp	r3, #8
 8013a76:	d110      	bne.n	8013a9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	2208      	movs	r2, #8
 8013a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013a80:	68f8      	ldr	r0, [r7, #12]
 8013a82:	f000 f95b 	bl	8013d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	2208      	movs	r2, #8
 8013a8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	2200      	movs	r2, #0
 8013a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013a96:	2301      	movs	r3, #1
 8013a98:	e029      	b.n	8013aee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	69db      	ldr	r3, [r3, #28]
 8013aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013aa8:	d111      	bne.n	8013ace <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013ab4:	68f8      	ldr	r0, [r7, #12]
 8013ab6:	f000 f941 	bl	8013d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2220      	movs	r2, #32
 8013abe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013aca:	2303      	movs	r3, #3
 8013acc:	e00f      	b.n	8013aee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	69da      	ldr	r2, [r3, #28]
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	4013      	ands	r3, r2
 8013ad8:	68ba      	ldr	r2, [r7, #8]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	bf0c      	ite	eq
 8013ade:	2301      	moveq	r3, #1
 8013ae0:	2300      	movne	r3, #0
 8013ae2:	b2db      	uxtb	r3, r3
 8013ae4:	461a      	mov	r2, r3
 8013ae6:	79fb      	ldrb	r3, [r7, #7]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d0a0      	beq.n	8013a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013aec:	2300      	movs	r3, #0
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3710      	adds	r7, #16
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}
	...

08013af8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013af8:	b480      	push	{r7}
 8013afa:	b0a3      	sub	sp, #140	@ 0x8c
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	60b9      	str	r1, [r7, #8]
 8013b02:	4613      	mov	r3, r2
 8013b04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	68ba      	ldr	r2, [r7, #8]
 8013b0a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	88fa      	ldrh	r2, [r7, #6]
 8013b10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	88fa      	ldrh	r2, [r7, #6]
 8013b18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	689b      	ldr	r3, [r3, #8]
 8013b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013b2a:	d10e      	bne.n	8013b4a <UART_Start_Receive_IT+0x52>
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	691b      	ldr	r3, [r3, #16]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d105      	bne.n	8013b40 <UART_Start_Receive_IT+0x48>
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8013b3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013b3e:	e02d      	b.n	8013b9c <UART_Start_Receive_IT+0xa4>
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	22ff      	movs	r2, #255	@ 0xff
 8013b44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013b48:	e028      	b.n	8013b9c <UART_Start_Receive_IT+0xa4>
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	689b      	ldr	r3, [r3, #8]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d10d      	bne.n	8013b6e <UART_Start_Receive_IT+0x76>
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	691b      	ldr	r3, [r3, #16]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d104      	bne.n	8013b64 <UART_Start_Receive_IT+0x6c>
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	22ff      	movs	r2, #255	@ 0xff
 8013b5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013b62:	e01b      	b.n	8013b9c <UART_Start_Receive_IT+0xa4>
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	227f      	movs	r2, #127	@ 0x7f
 8013b68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013b6c:	e016      	b.n	8013b9c <UART_Start_Receive_IT+0xa4>
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	689b      	ldr	r3, [r3, #8]
 8013b72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b76:	d10d      	bne.n	8013b94 <UART_Start_Receive_IT+0x9c>
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	691b      	ldr	r3, [r3, #16]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d104      	bne.n	8013b8a <UART_Start_Receive_IT+0x92>
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	227f      	movs	r2, #127	@ 0x7f
 8013b84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013b88:	e008      	b.n	8013b9c <UART_Start_Receive_IT+0xa4>
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	223f      	movs	r2, #63	@ 0x3f
 8013b8e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013b92:	e003      	b.n	8013b9c <UART_Start_Receive_IT+0xa4>
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2200      	movs	r2, #0
 8013b98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	2222      	movs	r2, #34	@ 0x22
 8013ba8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	3308      	adds	r3, #8
 8013bb2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013bb6:	e853 3f00 	ldrex	r3, [r3]
 8013bba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8013bbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013bbe:	f043 0301 	orr.w	r3, r3, #1
 8013bc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	3308      	adds	r3, #8
 8013bcc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013bd0:	673a      	str	r2, [r7, #112]	@ 0x70
 8013bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bd4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8013bd6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013bd8:	e841 2300 	strex	r3, r2, [r1]
 8013bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8013bde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d1e3      	bne.n	8013bac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013bec:	d14f      	bne.n	8013c8e <UART_Start_Receive_IT+0x196>
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013bf4:	88fa      	ldrh	r2, [r7, #6]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d349      	bcc.n	8013c8e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	689b      	ldr	r3, [r3, #8]
 8013bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013c02:	d107      	bne.n	8013c14 <UART_Start_Receive_IT+0x11c>
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	691b      	ldr	r3, [r3, #16]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d103      	bne.n	8013c14 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	4a47      	ldr	r2, [pc, #284]	@ (8013d2c <UART_Start_Receive_IT+0x234>)
 8013c10:	675a      	str	r2, [r3, #116]	@ 0x74
 8013c12:	e002      	b.n	8013c1a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	4a46      	ldr	r2, [pc, #280]	@ (8013d30 <UART_Start_Receive_IT+0x238>)
 8013c18:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	691b      	ldr	r3, [r3, #16]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d01a      	beq.n	8013c58 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c2a:	e853 3f00 	ldrex	r3, [r3]
 8013c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8013c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013c36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	461a      	mov	r2, r3
 8013c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013c46:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c48:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013c4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013c4c:	e841 2300 	strex	r3, r2, [r1]
 8013c50:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8013c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d1e4      	bne.n	8013c22 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	3308      	adds	r3, #8
 8013c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c62:	e853 3f00 	ldrex	r3, [r3]
 8013c66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	3308      	adds	r3, #8
 8013c76:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013c78:	64ba      	str	r2, [r7, #72]	@ 0x48
 8013c7a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013c7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013c80:	e841 2300 	strex	r3, r2, [r1]
 8013c84:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8013c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d1e5      	bne.n	8013c58 <UART_Start_Receive_IT+0x160>
 8013c8c:	e046      	b.n	8013d1c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	689b      	ldr	r3, [r3, #8]
 8013c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013c96:	d107      	bne.n	8013ca8 <UART_Start_Receive_IT+0x1b0>
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	691b      	ldr	r3, [r3, #16]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d103      	bne.n	8013ca8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	4a24      	ldr	r2, [pc, #144]	@ (8013d34 <UART_Start_Receive_IT+0x23c>)
 8013ca4:	675a      	str	r2, [r3, #116]	@ 0x74
 8013ca6:	e002      	b.n	8013cae <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	4a23      	ldr	r2, [pc, #140]	@ (8013d38 <UART_Start_Receive_IT+0x240>)
 8013cac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	691b      	ldr	r3, [r3, #16]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d019      	beq.n	8013cea <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cbe:	e853 3f00 	ldrex	r3, [r3]
 8013cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8013cca:	677b      	str	r3, [r7, #116]	@ 0x74
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8013cd6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013cda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013cdc:	e841 2300 	strex	r3, r2, [r1]
 8013ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8013ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d1e6      	bne.n	8013cb6 <UART_Start_Receive_IT+0x1be>
 8013ce8:	e018      	b.n	8013d1c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	e853 3f00 	ldrex	r3, [r3]
 8013cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8013cf8:	693b      	ldr	r3, [r7, #16]
 8013cfa:	f043 0320 	orr.w	r3, r3, #32
 8013cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	461a      	mov	r2, r3
 8013d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d08:	623b      	str	r3, [r7, #32]
 8013d0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d0c:	69f9      	ldr	r1, [r7, #28]
 8013d0e:	6a3a      	ldr	r2, [r7, #32]
 8013d10:	e841 2300 	strex	r3, r2, [r1]
 8013d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8013d16:	69bb      	ldr	r3, [r7, #24]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d1e6      	bne.n	8013cea <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8013d1c:	2300      	movs	r3, #0
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	378c      	adds	r7, #140	@ 0x8c
 8013d22:	46bd      	mov	sp, r7
 8013d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d28:	4770      	bx	lr
 8013d2a:	bf00      	nop
 8013d2c:	0801455d 	.word	0x0801455d
 8013d30:	080141fd 	.word	0x080141fd
 8013d34:	08014045 	.word	0x08014045
 8013d38:	08013e8d 	.word	0x08013e8d

08013d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	b095      	sub	sp, #84	@ 0x54
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d4c:	e853 3f00 	ldrex	r3, [r3]
 8013d50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	461a      	mov	r2, r3
 8013d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d62:	643b      	str	r3, [r7, #64]	@ 0x40
 8013d64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013d6a:	e841 2300 	strex	r3, r2, [r1]
 8013d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d1e6      	bne.n	8013d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	3308      	adds	r3, #8
 8013d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d7e:	6a3b      	ldr	r3, [r7, #32]
 8013d80:	e853 3f00 	ldrex	r3, [r3]
 8013d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8013d86:	69fa      	ldr	r2, [r7, #28]
 8013d88:	4b1e      	ldr	r3, [pc, #120]	@ (8013e04 <UART_EndRxTransfer+0xc8>)
 8013d8a:	4013      	ands	r3, r2
 8013d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	3308      	adds	r3, #8
 8013d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013d96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013d9e:	e841 2300 	strex	r3, r2, [r1]
 8013da2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d1e5      	bne.n	8013d76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013dae:	2b01      	cmp	r3, #1
 8013db0:	d118      	bne.n	8013de4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	e853 3f00 	ldrex	r3, [r3]
 8013dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	f023 0310 	bic.w	r3, r3, #16
 8013dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	461a      	mov	r2, r3
 8013dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dd0:	61bb      	str	r3, [r7, #24]
 8013dd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dd4:	6979      	ldr	r1, [r7, #20]
 8013dd6:	69ba      	ldr	r2, [r7, #24]
 8013dd8:	e841 2300 	strex	r3, r2, [r1]
 8013ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d1e6      	bne.n	8013db2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2220      	movs	r2, #32
 8013de8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2200      	movs	r2, #0
 8013df0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2200      	movs	r2, #0
 8013df6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013df8:	bf00      	nop
 8013dfa:	3754      	adds	r7, #84	@ 0x54
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e02:	4770      	bx	lr
 8013e04:	effffffe 	.word	0xeffffffe

08013e08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b084      	sub	sp, #16
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013e26:	68f8      	ldr	r0, [r7, #12]
 8013e28:	f7fe fe2a 	bl	8012a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013e2c:	bf00      	nop
 8013e2e:	3710      	adds	r7, #16
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b088      	sub	sp, #32
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	e853 3f00 	ldrex	r3, [r3]
 8013e48:	60bb      	str	r3, [r7, #8]
   return(result);
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013e50:	61fb      	str	r3, [r7, #28]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	461a      	mov	r2, r3
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	61bb      	str	r3, [r7, #24]
 8013e5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e5e:	6979      	ldr	r1, [r7, #20]
 8013e60:	69ba      	ldr	r2, [r7, #24]
 8013e62:	e841 2300 	strex	r3, r2, [r1]
 8013e66:	613b      	str	r3, [r7, #16]
   return(result);
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d1e6      	bne.n	8013e3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2220      	movs	r2, #32
 8013e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f7fe fdeb 	bl	8012a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013e82:	bf00      	nop
 8013e84:	3720      	adds	r7, #32
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
	...

08013e8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b09c      	sub	sp, #112	@ 0x70
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013e9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013ea4:	2b22      	cmp	r3, #34	@ 0x22
 8013ea6:	f040 80be 	bne.w	8014026 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013eb0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013eb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8013eb8:	b2d9      	uxtb	r1, r3
 8013eba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8013ebe:	b2da      	uxtb	r2, r3
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013ec4:	400a      	ands	r2, r1
 8013ec6:	b2d2      	uxtb	r2, r2
 8013ec8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013ece:	1c5a      	adds	r2, r3, #1
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	3b01      	subs	r3, #1
 8013ede:	b29a      	uxth	r2, r3
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	f040 80a1 	bne.w	8014036 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013efc:	e853 3f00 	ldrex	r3, [r3]
 8013f00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013f08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	461a      	mov	r2, r3
 8013f10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013f12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013f14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013f18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013f1a:	e841 2300 	strex	r3, r2, [r1]
 8013f1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d1e6      	bne.n	8013ef4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	3308      	adds	r3, #8
 8013f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f30:	e853 3f00 	ldrex	r3, [r3]
 8013f34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f38:	f023 0301 	bic.w	r3, r3, #1
 8013f3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	3308      	adds	r3, #8
 8013f44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013f46:	647a      	str	r2, [r7, #68]	@ 0x44
 8013f48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013f4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f4e:	e841 2300 	strex	r3, r2, [r1]
 8013f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d1e5      	bne.n	8013f26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2220      	movs	r2, #32
 8013f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2200      	movs	r2, #0
 8013f66:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	4a33      	ldr	r2, [pc, #204]	@ (8014040 <UART_RxISR_8BIT+0x1b4>)
 8013f74:	4293      	cmp	r3, r2
 8013f76:	d01f      	beq.n	8013fb8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d018      	beq.n	8013fb8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8e:	e853 3f00 	ldrex	r3, [r3]
 8013f92:	623b      	str	r3, [r7, #32]
   return(result);
 8013f94:	6a3b      	ldr	r3, [r7, #32]
 8013f96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013f9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8013fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013fac:	e841 2300 	strex	r3, r2, [r1]
 8013fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d1e6      	bne.n	8013f86 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	d12e      	bne.n	801401e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	e853 3f00 	ldrex	r3, [r3]
 8013fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	f023 0310 	bic.w	r3, r3, #16
 8013fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	461a      	mov	r2, r3
 8013fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013fe4:	61fb      	str	r3, [r7, #28]
 8013fe6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fe8:	69b9      	ldr	r1, [r7, #24]
 8013fea:	69fa      	ldr	r2, [r7, #28]
 8013fec:	e841 2300 	strex	r3, r2, [r1]
 8013ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d1e6      	bne.n	8013fc6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	69db      	ldr	r3, [r3, #28]
 8013ffe:	f003 0310 	and.w	r3, r3, #16
 8014002:	2b10      	cmp	r3, #16
 8014004:	d103      	bne.n	801400e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	2210      	movs	r2, #16
 801400c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014014:	4619      	mov	r1, r3
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f7fe fd3c 	bl	8012a94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801401c:	e00b      	b.n	8014036 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801401e:	6878      	ldr	r0, [r7, #4]
 8014020:	f7fe fd24 	bl	8012a6c <HAL_UART_RxCpltCallback>
}
 8014024:	e007      	b.n	8014036 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	699a      	ldr	r2, [r3, #24]
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f042 0208 	orr.w	r2, r2, #8
 8014034:	619a      	str	r2, [r3, #24]
}
 8014036:	bf00      	nop
 8014038:	3770      	adds	r7, #112	@ 0x70
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
 801403e:	bf00      	nop
 8014040:	58000c00 	.word	0x58000c00

08014044 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b09c      	sub	sp, #112	@ 0x70
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014052:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801405c:	2b22      	cmp	r3, #34	@ 0x22
 801405e:	f040 80be 	bne.w	80141de <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014068:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014070:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8014072:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8014076:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801407a:	4013      	ands	r3, r2
 801407c:	b29a      	uxth	r2, r3
 801407e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014080:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014086:	1c9a      	adds	r2, r3, #2
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014092:	b29b      	uxth	r3, r3
 8014094:	3b01      	subs	r3, #1
 8014096:	b29a      	uxth	r2, r3
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80140a4:	b29b      	uxth	r3, r3
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	f040 80a1 	bne.w	80141ee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80140b4:	e853 3f00 	ldrex	r3, [r3]
 80140b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80140ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80140c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	461a      	mov	r2, r3
 80140c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80140ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80140cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80140d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80140d2:	e841 2300 	strex	r3, r2, [r1]
 80140d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80140d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d1e6      	bne.n	80140ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	3308      	adds	r3, #8
 80140e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140e8:	e853 3f00 	ldrex	r3, [r3]
 80140ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80140ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140f0:	f023 0301 	bic.w	r3, r3, #1
 80140f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	3308      	adds	r3, #8
 80140fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80140fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8014100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014102:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014104:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014106:	e841 2300 	strex	r3, r2, [r1]
 801410a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801410e:	2b00      	cmp	r3, #0
 8014110:	d1e5      	bne.n	80140de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2220      	movs	r2, #32
 8014116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	2200      	movs	r2, #0
 801411e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2200      	movs	r2, #0
 8014124:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	4a33      	ldr	r2, [pc, #204]	@ (80141f8 <UART_RxISR_16BIT+0x1b4>)
 801412c:	4293      	cmp	r3, r2
 801412e:	d01f      	beq.n	8014170 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	685b      	ldr	r3, [r3, #4]
 8014136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801413a:	2b00      	cmp	r3, #0
 801413c:	d018      	beq.n	8014170 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014144:	6a3b      	ldr	r3, [r7, #32]
 8014146:	e853 3f00 	ldrex	r3, [r3]
 801414a:	61fb      	str	r3, [r7, #28]
   return(result);
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014152:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	461a      	mov	r2, r3
 801415a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801415c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801415e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014164:	e841 2300 	strex	r3, r2, [r1]
 8014168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801416c:	2b00      	cmp	r3, #0
 801416e:	d1e6      	bne.n	801413e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014174:	2b01      	cmp	r3, #1
 8014176:	d12e      	bne.n	80141d6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	2200      	movs	r2, #0
 801417c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	e853 3f00 	ldrex	r3, [r3]
 801418a:	60bb      	str	r3, [r7, #8]
   return(result);
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	f023 0310 	bic.w	r3, r3, #16
 8014192:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	461a      	mov	r2, r3
 801419a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801419c:	61bb      	str	r3, [r7, #24]
 801419e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141a0:	6979      	ldr	r1, [r7, #20]
 80141a2:	69ba      	ldr	r2, [r7, #24]
 80141a4:	e841 2300 	strex	r3, r2, [r1]
 80141a8:	613b      	str	r3, [r7, #16]
   return(result);
 80141aa:	693b      	ldr	r3, [r7, #16]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d1e6      	bne.n	801417e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	69db      	ldr	r3, [r3, #28]
 80141b6:	f003 0310 	and.w	r3, r3, #16
 80141ba:	2b10      	cmp	r3, #16
 80141bc:	d103      	bne.n	80141c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	2210      	movs	r2, #16
 80141c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80141cc:	4619      	mov	r1, r3
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f7fe fc60 	bl	8012a94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80141d4:	e00b      	b.n	80141ee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f7fe fc48 	bl	8012a6c <HAL_UART_RxCpltCallback>
}
 80141dc:	e007      	b.n	80141ee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	699a      	ldr	r2, [r3, #24]
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	f042 0208 	orr.w	r2, r2, #8
 80141ec:	619a      	str	r2, [r3, #24]
}
 80141ee:	bf00      	nop
 80141f0:	3770      	adds	r7, #112	@ 0x70
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
 80141f6:	bf00      	nop
 80141f8:	58000c00 	.word	0x58000c00

080141fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b0ac      	sub	sp, #176	@ 0xb0
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801420a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	69db      	ldr	r3, [r3, #28]
 8014214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	689b      	ldr	r3, [r3, #8]
 8014228:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014232:	2b22      	cmp	r3, #34	@ 0x22
 8014234:	f040 8180 	bne.w	8014538 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801423e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014242:	e123      	b.n	801448c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801424a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801424e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8014252:	b2d9      	uxtb	r1, r3
 8014254:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8014258:	b2da      	uxtb	r2, r3
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801425e:	400a      	ands	r2, r1
 8014260:	b2d2      	uxtb	r2, r2
 8014262:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014268:	1c5a      	adds	r2, r3, #1
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014274:	b29b      	uxth	r3, r3
 8014276:	3b01      	subs	r3, #1
 8014278:	b29a      	uxth	r2, r3
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	69db      	ldr	r3, [r3, #28]
 8014286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801428a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801428e:	f003 0307 	and.w	r3, r3, #7
 8014292:	2b00      	cmp	r3, #0
 8014294:	d053      	beq.n	801433e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801429a:	f003 0301 	and.w	r3, r3, #1
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d011      	beq.n	80142c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80142a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80142a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d00b      	beq.n	80142c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	2201      	movs	r2, #1
 80142b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80142bc:	f043 0201 	orr.w	r2, r3, #1
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80142c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80142ca:	f003 0302 	and.w	r3, r3, #2
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d011      	beq.n	80142f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80142d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142d6:	f003 0301 	and.w	r3, r3, #1
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d00b      	beq.n	80142f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	2202      	movs	r2, #2
 80142e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80142ec:	f043 0204 	orr.w	r2, r3, #4
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80142f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80142fa:	f003 0304 	and.w	r3, r3, #4
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d011      	beq.n	8014326 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8014302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014306:	f003 0301 	and.w	r3, r3, #1
 801430a:	2b00      	cmp	r3, #0
 801430c:	d00b      	beq.n	8014326 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2204      	movs	r2, #4
 8014314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801431c:	f043 0202 	orr.w	r2, r3, #2
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801432c:	2b00      	cmp	r3, #0
 801432e:	d006      	beq.n	801433e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f7fe fba5 	bl	8012a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2200      	movs	r2, #0
 801433a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014344:	b29b      	uxth	r3, r3
 8014346:	2b00      	cmp	r3, #0
 8014348:	f040 80a0 	bne.w	801448c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014352:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014354:	e853 3f00 	ldrex	r3, [r3]
 8014358:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801435a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801435c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	461a      	mov	r2, r3
 801436a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801436e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014370:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014372:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8014374:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014376:	e841 2300 	strex	r3, r2, [r1]
 801437a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801437c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801437e:	2b00      	cmp	r3, #0
 8014380:	d1e4      	bne.n	801434c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	3308      	adds	r3, #8
 8014388:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801438a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801438c:	e853 3f00 	ldrex	r3, [r3]
 8014390:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8014392:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014394:	4b6e      	ldr	r3, [pc, #440]	@ (8014550 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8014396:	4013      	ands	r3, r2
 8014398:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	3308      	adds	r3, #8
 80143a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80143a6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80143a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143aa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80143ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80143ae:	e841 2300 	strex	r3, r2, [r1]
 80143b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80143b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d1e3      	bne.n	8014382 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	2220      	movs	r2, #32
 80143be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	2200      	movs	r2, #0
 80143c6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2200      	movs	r2, #0
 80143cc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	4a60      	ldr	r2, [pc, #384]	@ (8014554 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d021      	beq.n	801441c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d01a      	beq.n	801441c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80143ee:	e853 3f00 	ldrex	r3, [r3]
 80143f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80143f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80143f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80143fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	461a      	mov	r2, r3
 8014404:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014408:	657b      	str	r3, [r7, #84]	@ 0x54
 801440a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801440c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801440e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014410:	e841 2300 	strex	r3, r2, [r1]
 8014414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8014416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014418:	2b00      	cmp	r3, #0
 801441a:	d1e4      	bne.n	80143e6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014420:	2b01      	cmp	r3, #1
 8014422:	d130      	bne.n	8014486 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2200      	movs	r2, #0
 8014428:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014432:	e853 3f00 	ldrex	r3, [r3]
 8014436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801443a:	f023 0310 	bic.w	r3, r3, #16
 801443e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	461a      	mov	r2, r3
 8014448:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801444c:	643b      	str	r3, [r7, #64]	@ 0x40
 801444e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014452:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014454:	e841 2300 	strex	r3, r2, [r1]
 8014458:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801445a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801445c:	2b00      	cmp	r3, #0
 801445e:	d1e4      	bne.n	801442a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	69db      	ldr	r3, [r3, #28]
 8014466:	f003 0310 	and.w	r3, r3, #16
 801446a:	2b10      	cmp	r3, #16
 801446c:	d103      	bne.n	8014476 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	2210      	movs	r2, #16
 8014474:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801447c:	4619      	mov	r1, r3
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f7fe fb08 	bl	8012a94 <HAL_UARTEx_RxEventCallback>
 8014484:	e002      	b.n	801448c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f7fe faf0 	bl	8012a6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801448c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8014490:	2b00      	cmp	r3, #0
 8014492:	d006      	beq.n	80144a2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8014494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014498:	f003 0320 	and.w	r3, r3, #32
 801449c:	2b00      	cmp	r3, #0
 801449e:	f47f aed1 	bne.w	8014244 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80144a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80144ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d049      	beq.n	8014548 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80144ba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80144be:	429a      	cmp	r2, r3
 80144c0:	d242      	bcs.n	8014548 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	3308      	adds	r3, #8
 80144c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144ca:	6a3b      	ldr	r3, [r7, #32]
 80144cc:	e853 3f00 	ldrex	r3, [r3]
 80144d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80144d2:	69fb      	ldr	r3, [r7, #28]
 80144d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80144d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	3308      	adds	r3, #8
 80144e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80144e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80144e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80144ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80144ee:	e841 2300 	strex	r3, r2, [r1]
 80144f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80144f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d1e3      	bne.n	80144c2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	4a16      	ldr	r2, [pc, #88]	@ (8014558 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80144fe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	e853 3f00 	ldrex	r3, [r3]
 801450c:	60bb      	str	r3, [r7, #8]
   return(result);
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	f043 0320 	orr.w	r3, r3, #32
 8014514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	461a      	mov	r2, r3
 801451e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014522:	61bb      	str	r3, [r7, #24]
 8014524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014526:	6979      	ldr	r1, [r7, #20]
 8014528:	69ba      	ldr	r2, [r7, #24]
 801452a:	e841 2300 	strex	r3, r2, [r1]
 801452e:	613b      	str	r3, [r7, #16]
   return(result);
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d1e4      	bne.n	8014500 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014536:	e007      	b.n	8014548 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	699a      	ldr	r2, [r3, #24]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	f042 0208 	orr.w	r2, r2, #8
 8014546:	619a      	str	r2, [r3, #24]
}
 8014548:	bf00      	nop
 801454a:	37b0      	adds	r7, #176	@ 0xb0
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	effffffe 	.word	0xeffffffe
 8014554:	58000c00 	.word	0x58000c00
 8014558:	08013e8d 	.word	0x08013e8d

0801455c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b0ae      	sub	sp, #184	@ 0xb8
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801456a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	69db      	ldr	r3, [r3, #28]
 8014574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	689b      	ldr	r3, [r3, #8]
 8014588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014592:	2b22      	cmp	r3, #34	@ 0x22
 8014594:	f040 8184 	bne.w	80148a0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801459e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80145a2:	e127      	b.n	80147f4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80145b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80145b6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80145ba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80145be:	4013      	ands	r3, r2
 80145c0:	b29a      	uxth	r2, r3
 80145c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80145c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80145cc:	1c9a      	adds	r2, r3, #2
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80145d8:	b29b      	uxth	r3, r3
 80145da:	3b01      	subs	r3, #1
 80145dc:	b29a      	uxth	r2, r3
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	69db      	ldr	r3, [r3, #28]
 80145ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80145ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80145f2:	f003 0307 	and.w	r3, r3, #7
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d053      	beq.n	80146a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80145fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80145fe:	f003 0301 	and.w	r3, r3, #1
 8014602:	2b00      	cmp	r3, #0
 8014604:	d011      	beq.n	801462a <UART_RxISR_16BIT_FIFOEN+0xce>
 8014606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801460a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801460e:	2b00      	cmp	r3, #0
 8014610:	d00b      	beq.n	801462a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	2201      	movs	r2, #1
 8014618:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014620:	f043 0201 	orr.w	r2, r3, #1
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801462a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801462e:	f003 0302 	and.w	r3, r3, #2
 8014632:	2b00      	cmp	r3, #0
 8014634:	d011      	beq.n	801465a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8014636:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801463a:	f003 0301 	and.w	r3, r3, #1
 801463e:	2b00      	cmp	r3, #0
 8014640:	d00b      	beq.n	801465a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	2202      	movs	r2, #2
 8014648:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014650:	f043 0204 	orr.w	r2, r3, #4
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801465a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801465e:	f003 0304 	and.w	r3, r3, #4
 8014662:	2b00      	cmp	r3, #0
 8014664:	d011      	beq.n	801468a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8014666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801466a:	f003 0301 	and.w	r3, r3, #1
 801466e:	2b00      	cmp	r3, #0
 8014670:	d00b      	beq.n	801468a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	2204      	movs	r2, #4
 8014678:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014680:	f043 0202 	orr.w	r2, r3, #2
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014690:	2b00      	cmp	r3, #0
 8014692:	d006      	beq.n	80146a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f7fe f9f3 	bl	8012a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	2200      	movs	r2, #0
 801469e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80146a8:	b29b      	uxth	r3, r3
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	f040 80a2 	bne.w	80147f4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80146b8:	e853 3f00 	ldrex	r3, [r3]
 80146bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80146be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80146c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80146c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	461a      	mov	r2, r3
 80146ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80146d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80146d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80146da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80146de:	e841 2300 	strex	r3, r2, [r1]
 80146e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80146e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d1e2      	bne.n	80146b0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	3308      	adds	r3, #8
 80146f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80146f4:	e853 3f00 	ldrex	r3, [r3]
 80146f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80146fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80146fc:	4b6e      	ldr	r3, [pc, #440]	@ (80148b8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80146fe:	4013      	ands	r3, r2
 8014700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	3308      	adds	r3, #8
 801470a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801470e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014710:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014712:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014714:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014716:	e841 2300 	strex	r3, r2, [r1]
 801471a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801471c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801471e:	2b00      	cmp	r3, #0
 8014720:	d1e3      	bne.n	80146ea <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2220      	movs	r2, #32
 8014726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2200      	movs	r2, #0
 801472e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2200      	movs	r2, #0
 8014734:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	4a60      	ldr	r2, [pc, #384]	@ (80148bc <UART_RxISR_16BIT_FIFOEN+0x360>)
 801473c:	4293      	cmp	r3, r2
 801473e:	d021      	beq.n	8014784 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801474a:	2b00      	cmp	r3, #0
 801474c:	d01a      	beq.n	8014784 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014756:	e853 3f00 	ldrex	r3, [r3]
 801475a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801475c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801475e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014762:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	461a      	mov	r2, r3
 801476c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014770:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014772:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014774:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014776:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014778:	e841 2300 	strex	r3, r2, [r1]
 801477c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801477e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014780:	2b00      	cmp	r3, #0
 8014782:	d1e4      	bne.n	801474e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014788:	2b01      	cmp	r3, #1
 801478a:	d130      	bne.n	80147ee <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2200      	movs	r2, #0
 8014790:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801479a:	e853 3f00 	ldrex	r3, [r3]
 801479e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80147a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147a2:	f023 0310 	bic.w	r3, r3, #16
 80147a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	461a      	mov	r2, r3
 80147b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80147b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80147b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80147ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80147bc:	e841 2300 	strex	r3, r2, [r1]
 80147c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80147c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d1e4      	bne.n	8014792 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	69db      	ldr	r3, [r3, #28]
 80147ce:	f003 0310 	and.w	r3, r3, #16
 80147d2:	2b10      	cmp	r3, #16
 80147d4:	d103      	bne.n	80147de <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	2210      	movs	r2, #16
 80147dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80147e4:	4619      	mov	r1, r3
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f7fe f954 	bl	8012a94 <HAL_UARTEx_RxEventCallback>
 80147ec:	e002      	b.n	80147f4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f7fe f93c 	bl	8012a6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80147f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d006      	beq.n	801480a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80147fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014800:	f003 0320 	and.w	r3, r3, #32
 8014804:	2b00      	cmp	r3, #0
 8014806:	f47f aecd 	bne.w	80145a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014810:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014814:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8014818:	2b00      	cmp	r3, #0
 801481a:	d049      	beq.n	80148b0 <UART_RxISR_16BIT_FIFOEN+0x354>
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014822:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8014826:	429a      	cmp	r2, r3
 8014828:	d242      	bcs.n	80148b0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	3308      	adds	r3, #8
 8014830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014834:	e853 3f00 	ldrex	r3, [r3]
 8014838:	623b      	str	r3, [r7, #32]
   return(result);
 801483a:	6a3b      	ldr	r3, [r7, #32]
 801483c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	3308      	adds	r3, #8
 801484a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801484e:	633a      	str	r2, [r7, #48]	@ 0x30
 8014850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014852:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014856:	e841 2300 	strex	r3, r2, [r1]
 801485a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801485e:	2b00      	cmp	r3, #0
 8014860:	d1e3      	bne.n	801482a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	4a16      	ldr	r2, [pc, #88]	@ (80148c0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8014866:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801486e:	693b      	ldr	r3, [r7, #16]
 8014870:	e853 3f00 	ldrex	r3, [r3]
 8014874:	60fb      	str	r3, [r7, #12]
   return(result);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	f043 0320 	orr.w	r3, r3, #32
 801487c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	461a      	mov	r2, r3
 8014886:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801488a:	61fb      	str	r3, [r7, #28]
 801488c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801488e:	69b9      	ldr	r1, [r7, #24]
 8014890:	69fa      	ldr	r2, [r7, #28]
 8014892:	e841 2300 	strex	r3, r2, [r1]
 8014896:	617b      	str	r3, [r7, #20]
   return(result);
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d1e4      	bne.n	8014868 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801489e:	e007      	b.n	80148b0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	699a      	ldr	r2, [r3, #24]
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	f042 0208 	orr.w	r2, r2, #8
 80148ae:	619a      	str	r2, [r3, #24]
}
 80148b0:	bf00      	nop
 80148b2:	37b8      	adds	r7, #184	@ 0xb8
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}
 80148b8:	effffffe 	.word	0xeffffffe
 80148bc:	58000c00 	.word	0x58000c00
 80148c0:	08014045 	.word	0x08014045

080148c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80148c4:	b480      	push	{r7}
 80148c6:	b083      	sub	sp, #12
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80148cc:	bf00      	nop
 80148ce:	370c      	adds	r7, #12
 80148d0:	46bd      	mov	sp, r7
 80148d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d6:	4770      	bx	lr

080148d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80148d8:	b480      	push	{r7}
 80148da:	b083      	sub	sp, #12
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80148e0:	bf00      	nop
 80148e2:	370c      	adds	r7, #12
 80148e4:	46bd      	mov	sp, r7
 80148e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ea:	4770      	bx	lr

080148ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80148ec:	b480      	push	{r7}
 80148ee:	b083      	sub	sp, #12
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80148f4:	bf00      	nop
 80148f6:	370c      	adds	r7, #12
 80148f8:	46bd      	mov	sp, r7
 80148fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fe:	4770      	bx	lr

08014900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014900:	b480      	push	{r7}
 8014902:	b085      	sub	sp, #20
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801490e:	2b01      	cmp	r3, #1
 8014910:	d101      	bne.n	8014916 <HAL_UARTEx_DisableFifoMode+0x16>
 8014912:	2302      	movs	r3, #2
 8014914:	e027      	b.n	8014966 <HAL_UARTEx_DisableFifoMode+0x66>
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2201      	movs	r2, #1
 801491a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	2224      	movs	r2, #36	@ 0x24
 8014922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	681a      	ldr	r2, [r3, #0]
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	f022 0201 	bic.w	r2, r2, #1
 801493c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8014944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2200      	movs	r2, #0
 801494a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	68fa      	ldr	r2, [r7, #12]
 8014952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	2220      	movs	r2, #32
 8014958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2200      	movs	r2, #0
 8014960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014964:	2300      	movs	r3, #0
}
 8014966:	4618      	mov	r0, r3
 8014968:	3714      	adds	r7, #20
 801496a:	46bd      	mov	sp, r7
 801496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014970:	4770      	bx	lr

08014972 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014972:	b580      	push	{r7, lr}
 8014974:	b084      	sub	sp, #16
 8014976:	af00      	add	r7, sp, #0
 8014978:	6078      	str	r0, [r7, #4]
 801497a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014982:	2b01      	cmp	r3, #1
 8014984:	d101      	bne.n	801498a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014986:	2302      	movs	r3, #2
 8014988:	e02d      	b.n	80149e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2201      	movs	r2, #1
 801498e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	2224      	movs	r2, #36	@ 0x24
 8014996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	681a      	ldr	r2, [r3, #0]
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	f022 0201 	bic.w	r2, r2, #1
 80149b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	689b      	ldr	r3, [r3, #8]
 80149b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	683a      	ldr	r2, [r7, #0]
 80149c2:	430a      	orrs	r2, r1
 80149c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 f850 	bl	8014a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	68fa      	ldr	r2, [r7, #12]
 80149d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2220      	movs	r2, #32
 80149d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2200      	movs	r2, #0
 80149e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80149e4:	2300      	movs	r3, #0
}
 80149e6:	4618      	mov	r0, r3
 80149e8:	3710      	adds	r7, #16
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}

080149ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80149ee:	b580      	push	{r7, lr}
 80149f0:	b084      	sub	sp, #16
 80149f2:	af00      	add	r7, sp, #0
 80149f4:	6078      	str	r0, [r7, #4]
 80149f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80149fe:	2b01      	cmp	r3, #1
 8014a00:	d101      	bne.n	8014a06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014a02:	2302      	movs	r3, #2
 8014a04:	e02d      	b.n	8014a62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	2201      	movs	r2, #1
 8014a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	2224      	movs	r2, #36	@ 0x24
 8014a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	f022 0201 	bic.w	r2, r2, #1
 8014a2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	689b      	ldr	r3, [r3, #8]
 8014a34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	683a      	ldr	r2, [r7, #0]
 8014a3e:	430a      	orrs	r2, r1
 8014a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 f812 	bl	8014a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2220      	movs	r2, #32
 8014a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014a60:	2300      	movs	r3, #0
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3710      	adds	r7, #16
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
	...

08014a6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b085      	sub	sp, #20
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d108      	bne.n	8014a8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2201      	movs	r2, #1
 8014a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2201      	movs	r2, #1
 8014a88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014a8c:	e031      	b.n	8014af2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014a8e:	2310      	movs	r3, #16
 8014a90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014a92:	2310      	movs	r3, #16
 8014a94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	689b      	ldr	r3, [r3, #8]
 8014a9c:	0e5b      	lsrs	r3, r3, #25
 8014a9e:	b2db      	uxtb	r3, r3
 8014aa0:	f003 0307 	and.w	r3, r3, #7
 8014aa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	689b      	ldr	r3, [r3, #8]
 8014aac:	0f5b      	lsrs	r3, r3, #29
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	f003 0307 	and.w	r3, r3, #7
 8014ab4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014ab6:	7bbb      	ldrb	r3, [r7, #14]
 8014ab8:	7b3a      	ldrb	r2, [r7, #12]
 8014aba:	4911      	ldr	r1, [pc, #68]	@ (8014b00 <UARTEx_SetNbDataToProcess+0x94>)
 8014abc:	5c8a      	ldrb	r2, [r1, r2]
 8014abe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014ac2:	7b3a      	ldrb	r2, [r7, #12]
 8014ac4:	490f      	ldr	r1, [pc, #60]	@ (8014b04 <UARTEx_SetNbDataToProcess+0x98>)
 8014ac6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8014acc:	b29a      	uxth	r2, r3
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014ad4:	7bfb      	ldrb	r3, [r7, #15]
 8014ad6:	7b7a      	ldrb	r2, [r7, #13]
 8014ad8:	4909      	ldr	r1, [pc, #36]	@ (8014b00 <UARTEx_SetNbDataToProcess+0x94>)
 8014ada:	5c8a      	ldrb	r2, [r1, r2]
 8014adc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014ae0:	7b7a      	ldrb	r2, [r7, #13]
 8014ae2:	4908      	ldr	r1, [pc, #32]	@ (8014b04 <UARTEx_SetNbDataToProcess+0x98>)
 8014ae4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014ae6:	fb93 f3f2 	sdiv	r3, r3, r2
 8014aea:	b29a      	uxth	r2, r3
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8014af2:	bf00      	nop
 8014af4:	3714      	adds	r7, #20
 8014af6:	46bd      	mov	sp, r7
 8014af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afc:	4770      	bx	lr
 8014afe:	bf00      	nop
 8014b00:	0801b2d4 	.word	0x0801b2d4
 8014b04:	0801b2dc 	.word	0x0801b2dc

08014b08 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d101      	bne.n	8014b1a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8014b16:	2301      	movs	r3, #1
 8014b18:	e03c      	b.n	8014b94 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8014b20:	b2db      	uxtb	r3, r3
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d106      	bne.n	8014b34 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	2200      	movs	r2, #0
 8014b2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f7f1 ff8a 	bl	8006a48 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2202      	movs	r2, #2
 8014b38:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	681a      	ldr	r2, [r3, #0]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	f022 0201 	bic.w	r2, r2, #1
 8014b4a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f000 f85b 	bl	8014c08 <USART_SetConfig>
 8014b52:	4603      	mov	r3, r0
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	d101      	bne.n	8014b5c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8014b58:	2301      	movs	r3, #1
 8014b5a:	e01b      	b.n	8014b94 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	685a      	ldr	r2, [r3, #4]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8014b6a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	689a      	ldr	r2, [r3, #8]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8014b7a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	681a      	ldr	r2, [r3, #0]
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	f042 0201 	orr.w	r2, r2, #1
 8014b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f000 fddd 	bl	801574c <USART_CheckIdleState>
 8014b92:	4603      	mov	r3, r0
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	3708      	adds	r7, #8
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b084      	sub	sp, #16
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	603b      	str	r3, [r7, #0]
 8014ba8:	4613      	mov	r3, r2
 8014baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8014bac:	e018      	b.n	8014be0 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014bae:	69bb      	ldr	r3, [r7, #24]
 8014bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bb4:	d014      	beq.n	8014be0 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014bb6:	f7f2 fac3 	bl	8007140 <HAL_GetTick>
 8014bba:	4602      	mov	r2, r0
 8014bbc:	683b      	ldr	r3, [r7, #0]
 8014bbe:	1ad3      	subs	r3, r2, r3
 8014bc0:	69ba      	ldr	r2, [r7, #24]
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d302      	bcc.n	8014bcc <USART_WaitOnFlagUntilTimeout+0x30>
 8014bc6:	69bb      	ldr	r3, [r7, #24]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d109      	bne.n	8014be0 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	2201      	movs	r2, #1
 8014bd0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8014bdc:	2303      	movs	r3, #3
 8014bde:	e00f      	b.n	8014c00 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	69da      	ldr	r2, [r3, #28]
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	4013      	ands	r3, r2
 8014bea:	68ba      	ldr	r2, [r7, #8]
 8014bec:	429a      	cmp	r2, r3
 8014bee:	bf0c      	ite	eq
 8014bf0:	2301      	moveq	r3, #1
 8014bf2:	2300      	movne	r3, #0
 8014bf4:	b2db      	uxtb	r3, r3
 8014bf6:	461a      	mov	r2, r3
 8014bf8:	79fb      	ldrb	r3, [r7, #7]
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d0d7      	beq.n	8014bae <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014bfe:	2300      	movs	r3, #0
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	3710      	adds	r7, #16
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b08e      	sub	sp, #56	@ 0x38
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8014c10:	2300      	movs	r3, #0
 8014c12:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8014c16:	2300      	movs	r3, #0
 8014c18:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	689a      	ldr	r2, [r3, #8]
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	691b      	ldr	r3, [r3, #16]
 8014c22:	431a      	orrs	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	695b      	ldr	r3, [r3, #20]
 8014c28:	4313      	orrs	r3, r2
 8014c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8014c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	681a      	ldr	r2, [r3, #0]
 8014c36:	4bc9      	ldr	r3, [pc, #804]	@ (8014f5c <USART_SetConfig+0x354>)
 8014c38:	4013      	ands	r3, r2
 8014c3a:	687a      	ldr	r2, [r7, #4]
 8014c3c:	6812      	ldr	r2, [r2, #0]
 8014c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c40:	430b      	orrs	r3, r1
 8014c42:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8014c44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6a1b      	ldr	r3, [r3, #32]
 8014c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c50:	4313      	orrs	r3, r2
 8014c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	699a      	ldr	r2, [r3, #24]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	69db      	ldr	r3, [r3, #28]
 8014c5c:	4313      	orrs	r3, r2
 8014c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c60:	4313      	orrs	r3, r2
 8014c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c6a:	4313      	orrs	r3, r2
 8014c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	685a      	ldr	r2, [r3, #4]
 8014c74:	4bba      	ldr	r3, [pc, #744]	@ (8014f60 <USART_SetConfig+0x358>)
 8014c76:	4013      	ands	r3, r2
 8014c78:	687a      	ldr	r2, [r7, #4]
 8014c7a:	6812      	ldr	r2, [r2, #0]
 8014c7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c7e:	430b      	orrs	r3, r1
 8014c80:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c88:	f023 010f 	bic.w	r1, r3, #15
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	430a      	orrs	r2, r1
 8014c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	4ab1      	ldr	r2, [pc, #708]	@ (8014f64 <USART_SetConfig+0x35c>)
 8014c9e:	4293      	cmp	r3, r2
 8014ca0:	d176      	bne.n	8014d90 <USART_SetConfig+0x188>
 8014ca2:	4bb1      	ldr	r3, [pc, #708]	@ (8014f68 <USART_SetConfig+0x360>)
 8014ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014caa:	2b28      	cmp	r3, #40	@ 0x28
 8014cac:	d86c      	bhi.n	8014d88 <USART_SetConfig+0x180>
 8014cae:	a201      	add	r2, pc, #4	@ (adr r2, 8014cb4 <USART_SetConfig+0xac>)
 8014cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cb4:	08014d59 	.word	0x08014d59
 8014cb8:	08014d89 	.word	0x08014d89
 8014cbc:	08014d89 	.word	0x08014d89
 8014cc0:	08014d89 	.word	0x08014d89
 8014cc4:	08014d89 	.word	0x08014d89
 8014cc8:	08014d89 	.word	0x08014d89
 8014ccc:	08014d89 	.word	0x08014d89
 8014cd0:	08014d89 	.word	0x08014d89
 8014cd4:	08014d61 	.word	0x08014d61
 8014cd8:	08014d89 	.word	0x08014d89
 8014cdc:	08014d89 	.word	0x08014d89
 8014ce0:	08014d89 	.word	0x08014d89
 8014ce4:	08014d89 	.word	0x08014d89
 8014ce8:	08014d89 	.word	0x08014d89
 8014cec:	08014d89 	.word	0x08014d89
 8014cf0:	08014d89 	.word	0x08014d89
 8014cf4:	08014d69 	.word	0x08014d69
 8014cf8:	08014d89 	.word	0x08014d89
 8014cfc:	08014d89 	.word	0x08014d89
 8014d00:	08014d89 	.word	0x08014d89
 8014d04:	08014d89 	.word	0x08014d89
 8014d08:	08014d89 	.word	0x08014d89
 8014d0c:	08014d89 	.word	0x08014d89
 8014d10:	08014d89 	.word	0x08014d89
 8014d14:	08014d71 	.word	0x08014d71
 8014d18:	08014d89 	.word	0x08014d89
 8014d1c:	08014d89 	.word	0x08014d89
 8014d20:	08014d89 	.word	0x08014d89
 8014d24:	08014d89 	.word	0x08014d89
 8014d28:	08014d89 	.word	0x08014d89
 8014d2c:	08014d89 	.word	0x08014d89
 8014d30:	08014d89 	.word	0x08014d89
 8014d34:	08014d79 	.word	0x08014d79
 8014d38:	08014d89 	.word	0x08014d89
 8014d3c:	08014d89 	.word	0x08014d89
 8014d40:	08014d89 	.word	0x08014d89
 8014d44:	08014d89 	.word	0x08014d89
 8014d48:	08014d89 	.word	0x08014d89
 8014d4c:	08014d89 	.word	0x08014d89
 8014d50:	08014d89 	.word	0x08014d89
 8014d54:	08014d81 	.word	0x08014d81
 8014d58:	2301      	movs	r3, #1
 8014d5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014d5e:	e18e      	b.n	801507e <USART_SetConfig+0x476>
 8014d60:	2302      	movs	r3, #2
 8014d62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014d66:	e18a      	b.n	801507e <USART_SetConfig+0x476>
 8014d68:	2304      	movs	r3, #4
 8014d6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014d6e:	e186      	b.n	801507e <USART_SetConfig+0x476>
 8014d70:	2308      	movs	r3, #8
 8014d72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014d76:	e182      	b.n	801507e <USART_SetConfig+0x476>
 8014d78:	2310      	movs	r3, #16
 8014d7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014d7e:	e17e      	b.n	801507e <USART_SetConfig+0x476>
 8014d80:	2320      	movs	r3, #32
 8014d82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014d86:	e17a      	b.n	801507e <USART_SetConfig+0x476>
 8014d88:	2340      	movs	r3, #64	@ 0x40
 8014d8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014d8e:	e176      	b.n	801507e <USART_SetConfig+0x476>
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	4a75      	ldr	r2, [pc, #468]	@ (8014f6c <USART_SetConfig+0x364>)
 8014d96:	4293      	cmp	r3, r2
 8014d98:	d130      	bne.n	8014dfc <USART_SetConfig+0x1f4>
 8014d9a:	4b73      	ldr	r3, [pc, #460]	@ (8014f68 <USART_SetConfig+0x360>)
 8014d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d9e:	f003 0307 	and.w	r3, r3, #7
 8014da2:	2b05      	cmp	r3, #5
 8014da4:	d826      	bhi.n	8014df4 <USART_SetConfig+0x1ec>
 8014da6:	a201      	add	r2, pc, #4	@ (adr r2, 8014dac <USART_SetConfig+0x1a4>)
 8014da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dac:	08014dc5 	.word	0x08014dc5
 8014db0:	08014dcd 	.word	0x08014dcd
 8014db4:	08014dd5 	.word	0x08014dd5
 8014db8:	08014ddd 	.word	0x08014ddd
 8014dbc:	08014de5 	.word	0x08014de5
 8014dc0:	08014ded 	.word	0x08014ded
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014dca:	e158      	b.n	801507e <USART_SetConfig+0x476>
 8014dcc:	2302      	movs	r3, #2
 8014dce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014dd2:	e154      	b.n	801507e <USART_SetConfig+0x476>
 8014dd4:	2304      	movs	r3, #4
 8014dd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014dda:	e150      	b.n	801507e <USART_SetConfig+0x476>
 8014ddc:	2308      	movs	r3, #8
 8014dde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014de2:	e14c      	b.n	801507e <USART_SetConfig+0x476>
 8014de4:	2310      	movs	r3, #16
 8014de6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014dea:	e148      	b.n	801507e <USART_SetConfig+0x476>
 8014dec:	2320      	movs	r3, #32
 8014dee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014df2:	e144      	b.n	801507e <USART_SetConfig+0x476>
 8014df4:	2340      	movs	r3, #64	@ 0x40
 8014df6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014dfa:	e140      	b.n	801507e <USART_SetConfig+0x476>
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	4a5b      	ldr	r2, [pc, #364]	@ (8014f70 <USART_SetConfig+0x368>)
 8014e02:	4293      	cmp	r3, r2
 8014e04:	d130      	bne.n	8014e68 <USART_SetConfig+0x260>
 8014e06:	4b58      	ldr	r3, [pc, #352]	@ (8014f68 <USART_SetConfig+0x360>)
 8014e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e0a:	f003 0307 	and.w	r3, r3, #7
 8014e0e:	2b05      	cmp	r3, #5
 8014e10:	d826      	bhi.n	8014e60 <USART_SetConfig+0x258>
 8014e12:	a201      	add	r2, pc, #4	@ (adr r2, 8014e18 <USART_SetConfig+0x210>)
 8014e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e18:	08014e31 	.word	0x08014e31
 8014e1c:	08014e39 	.word	0x08014e39
 8014e20:	08014e41 	.word	0x08014e41
 8014e24:	08014e49 	.word	0x08014e49
 8014e28:	08014e51 	.word	0x08014e51
 8014e2c:	08014e59 	.word	0x08014e59
 8014e30:	2300      	movs	r3, #0
 8014e32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014e36:	e122      	b.n	801507e <USART_SetConfig+0x476>
 8014e38:	2302      	movs	r3, #2
 8014e3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014e3e:	e11e      	b.n	801507e <USART_SetConfig+0x476>
 8014e40:	2304      	movs	r3, #4
 8014e42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014e46:	e11a      	b.n	801507e <USART_SetConfig+0x476>
 8014e48:	2308      	movs	r3, #8
 8014e4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014e4e:	e116      	b.n	801507e <USART_SetConfig+0x476>
 8014e50:	2310      	movs	r3, #16
 8014e52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014e56:	e112      	b.n	801507e <USART_SetConfig+0x476>
 8014e58:	2320      	movs	r3, #32
 8014e5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014e5e:	e10e      	b.n	801507e <USART_SetConfig+0x476>
 8014e60:	2340      	movs	r3, #64	@ 0x40
 8014e62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014e66:	e10a      	b.n	801507e <USART_SetConfig+0x476>
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	4a41      	ldr	r2, [pc, #260]	@ (8014f74 <USART_SetConfig+0x36c>)
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	f040 8086 	bne.w	8014f80 <USART_SetConfig+0x378>
 8014e74:	4b3c      	ldr	r3, [pc, #240]	@ (8014f68 <USART_SetConfig+0x360>)
 8014e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014e7c:	2b28      	cmp	r3, #40	@ 0x28
 8014e7e:	d87b      	bhi.n	8014f78 <USART_SetConfig+0x370>
 8014e80:	a201      	add	r2, pc, #4	@ (adr r2, 8014e88 <USART_SetConfig+0x280>)
 8014e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e86:	bf00      	nop
 8014e88:	08014f2d 	.word	0x08014f2d
 8014e8c:	08014f79 	.word	0x08014f79
 8014e90:	08014f79 	.word	0x08014f79
 8014e94:	08014f79 	.word	0x08014f79
 8014e98:	08014f79 	.word	0x08014f79
 8014e9c:	08014f79 	.word	0x08014f79
 8014ea0:	08014f79 	.word	0x08014f79
 8014ea4:	08014f79 	.word	0x08014f79
 8014ea8:	08014f35 	.word	0x08014f35
 8014eac:	08014f79 	.word	0x08014f79
 8014eb0:	08014f79 	.word	0x08014f79
 8014eb4:	08014f79 	.word	0x08014f79
 8014eb8:	08014f79 	.word	0x08014f79
 8014ebc:	08014f79 	.word	0x08014f79
 8014ec0:	08014f79 	.word	0x08014f79
 8014ec4:	08014f79 	.word	0x08014f79
 8014ec8:	08014f3d 	.word	0x08014f3d
 8014ecc:	08014f79 	.word	0x08014f79
 8014ed0:	08014f79 	.word	0x08014f79
 8014ed4:	08014f79 	.word	0x08014f79
 8014ed8:	08014f79 	.word	0x08014f79
 8014edc:	08014f79 	.word	0x08014f79
 8014ee0:	08014f79 	.word	0x08014f79
 8014ee4:	08014f79 	.word	0x08014f79
 8014ee8:	08014f45 	.word	0x08014f45
 8014eec:	08014f79 	.word	0x08014f79
 8014ef0:	08014f79 	.word	0x08014f79
 8014ef4:	08014f79 	.word	0x08014f79
 8014ef8:	08014f79 	.word	0x08014f79
 8014efc:	08014f79 	.word	0x08014f79
 8014f00:	08014f79 	.word	0x08014f79
 8014f04:	08014f79 	.word	0x08014f79
 8014f08:	08014f4d 	.word	0x08014f4d
 8014f0c:	08014f79 	.word	0x08014f79
 8014f10:	08014f79 	.word	0x08014f79
 8014f14:	08014f79 	.word	0x08014f79
 8014f18:	08014f79 	.word	0x08014f79
 8014f1c:	08014f79 	.word	0x08014f79
 8014f20:	08014f79 	.word	0x08014f79
 8014f24:	08014f79 	.word	0x08014f79
 8014f28:	08014f55 	.word	0x08014f55
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014f32:	e0a4      	b.n	801507e <USART_SetConfig+0x476>
 8014f34:	2302      	movs	r3, #2
 8014f36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014f3a:	e0a0      	b.n	801507e <USART_SetConfig+0x476>
 8014f3c:	2304      	movs	r3, #4
 8014f3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014f42:	e09c      	b.n	801507e <USART_SetConfig+0x476>
 8014f44:	2308      	movs	r3, #8
 8014f46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014f4a:	e098      	b.n	801507e <USART_SetConfig+0x476>
 8014f4c:	2310      	movs	r3, #16
 8014f4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014f52:	e094      	b.n	801507e <USART_SetConfig+0x476>
 8014f54:	2320      	movs	r3, #32
 8014f56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014f5a:	e090      	b.n	801507e <USART_SetConfig+0x476>
 8014f5c:	cfff69f3 	.word	0xcfff69f3
 8014f60:	ffffc0f6 	.word	0xffffc0f6
 8014f64:	40011000 	.word	0x40011000
 8014f68:	58024400 	.word	0x58024400
 8014f6c:	40004400 	.word	0x40004400
 8014f70:	40004800 	.word	0x40004800
 8014f74:	40011400 	.word	0x40011400
 8014f78:	2340      	movs	r3, #64	@ 0x40
 8014f7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014f7e:	e07e      	b.n	801507e <USART_SetConfig+0x476>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	4ab5      	ldr	r2, [pc, #724]	@ (801525c <USART_SetConfig+0x654>)
 8014f86:	4293      	cmp	r3, r2
 8014f88:	d176      	bne.n	8015078 <USART_SetConfig+0x470>
 8014f8a:	4bb5      	ldr	r3, [pc, #724]	@ (8015260 <USART_SetConfig+0x658>)
 8014f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014f92:	2b28      	cmp	r3, #40	@ 0x28
 8014f94:	d86c      	bhi.n	8015070 <USART_SetConfig+0x468>
 8014f96:	a201      	add	r2, pc, #4	@ (adr r2, 8014f9c <USART_SetConfig+0x394>)
 8014f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f9c:	08015041 	.word	0x08015041
 8014fa0:	08015071 	.word	0x08015071
 8014fa4:	08015071 	.word	0x08015071
 8014fa8:	08015071 	.word	0x08015071
 8014fac:	08015071 	.word	0x08015071
 8014fb0:	08015071 	.word	0x08015071
 8014fb4:	08015071 	.word	0x08015071
 8014fb8:	08015071 	.word	0x08015071
 8014fbc:	08015049 	.word	0x08015049
 8014fc0:	08015071 	.word	0x08015071
 8014fc4:	08015071 	.word	0x08015071
 8014fc8:	08015071 	.word	0x08015071
 8014fcc:	08015071 	.word	0x08015071
 8014fd0:	08015071 	.word	0x08015071
 8014fd4:	08015071 	.word	0x08015071
 8014fd8:	08015071 	.word	0x08015071
 8014fdc:	08015051 	.word	0x08015051
 8014fe0:	08015071 	.word	0x08015071
 8014fe4:	08015071 	.word	0x08015071
 8014fe8:	08015071 	.word	0x08015071
 8014fec:	08015071 	.word	0x08015071
 8014ff0:	08015071 	.word	0x08015071
 8014ff4:	08015071 	.word	0x08015071
 8014ff8:	08015071 	.word	0x08015071
 8014ffc:	08015059 	.word	0x08015059
 8015000:	08015071 	.word	0x08015071
 8015004:	08015071 	.word	0x08015071
 8015008:	08015071 	.word	0x08015071
 801500c:	08015071 	.word	0x08015071
 8015010:	08015071 	.word	0x08015071
 8015014:	08015071 	.word	0x08015071
 8015018:	08015071 	.word	0x08015071
 801501c:	08015061 	.word	0x08015061
 8015020:	08015071 	.word	0x08015071
 8015024:	08015071 	.word	0x08015071
 8015028:	08015071 	.word	0x08015071
 801502c:	08015071 	.word	0x08015071
 8015030:	08015071 	.word	0x08015071
 8015034:	08015071 	.word	0x08015071
 8015038:	08015071 	.word	0x08015071
 801503c:	08015069 	.word	0x08015069
 8015040:	2301      	movs	r3, #1
 8015042:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015046:	e01a      	b.n	801507e <USART_SetConfig+0x476>
 8015048:	2302      	movs	r3, #2
 801504a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801504e:	e016      	b.n	801507e <USART_SetConfig+0x476>
 8015050:	2304      	movs	r3, #4
 8015052:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015056:	e012      	b.n	801507e <USART_SetConfig+0x476>
 8015058:	2308      	movs	r3, #8
 801505a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801505e:	e00e      	b.n	801507e <USART_SetConfig+0x476>
 8015060:	2310      	movs	r3, #16
 8015062:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015066:	e00a      	b.n	801507e <USART_SetConfig+0x476>
 8015068:	2320      	movs	r3, #32
 801506a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801506e:	e006      	b.n	801507e <USART_SetConfig+0x476>
 8015070:	2340      	movs	r3, #64	@ 0x40
 8015072:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015076:	e002      	b.n	801507e <USART_SetConfig+0x476>
 8015078:	2340      	movs	r3, #64	@ 0x40
 801507a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 801507e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015082:	2b20      	cmp	r3, #32
 8015084:	f200 832f 	bhi.w	80156e6 <USART_SetConfig+0xade>
 8015088:	a201      	add	r2, pc, #4	@ (adr r2, 8015090 <USART_SetConfig+0x488>)
 801508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801508e:	bf00      	nop
 8015090:	08015115 	.word	0x08015115
 8015094:	080151cb 	.word	0x080151cb
 8015098:	0801528b 	.word	0x0801528b
 801509c:	080156e7 	.word	0x080156e7
 80150a0:	08015345 	.word	0x08015345
 80150a4:	080156e7 	.word	0x080156e7
 80150a8:	080156e7 	.word	0x080156e7
 80150ac:	080156e7 	.word	0x080156e7
 80150b0:	080153ff 	.word	0x080153ff
 80150b4:	080156e7 	.word	0x080156e7
 80150b8:	080156e7 	.word	0x080156e7
 80150bc:	080156e7 	.word	0x080156e7
 80150c0:	080156e7 	.word	0x080156e7
 80150c4:	080156e7 	.word	0x080156e7
 80150c8:	080156e7 	.word	0x080156e7
 80150cc:	080156e7 	.word	0x080156e7
 80150d0:	08015577 	.word	0x08015577
 80150d4:	080156e7 	.word	0x080156e7
 80150d8:	080156e7 	.word	0x080156e7
 80150dc:	080156e7 	.word	0x080156e7
 80150e0:	080156e7 	.word	0x080156e7
 80150e4:	080156e7 	.word	0x080156e7
 80150e8:	080156e7 	.word	0x080156e7
 80150ec:	080156e7 	.word	0x080156e7
 80150f0:	080156e7 	.word	0x080156e7
 80150f4:	080156e7 	.word	0x080156e7
 80150f8:	080156e7 	.word	0x080156e7
 80150fc:	080156e7 	.word	0x080156e7
 8015100:	080156e7 	.word	0x080156e7
 8015104:	080156e7 	.word	0x080156e7
 8015108:	080156e7 	.word	0x080156e7
 801510c:	080156e7 	.word	0x080156e7
 8015110:	08015635 	.word	0x08015635
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8015114:	f7f7 f9f4 	bl	800c500 <HAL_RCC_GetPCLK1Freq>
 8015118:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801511e:	2b00      	cmp	r3, #0
 8015120:	d044      	beq.n	80151ac <USART_SetConfig+0x5a4>
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015126:	2b01      	cmp	r3, #1
 8015128:	d03e      	beq.n	80151a8 <USART_SetConfig+0x5a0>
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801512e:	2b02      	cmp	r3, #2
 8015130:	d038      	beq.n	80151a4 <USART_SetConfig+0x59c>
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015136:	2b03      	cmp	r3, #3
 8015138:	d032      	beq.n	80151a0 <USART_SetConfig+0x598>
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801513e:	2b04      	cmp	r3, #4
 8015140:	d02c      	beq.n	801519c <USART_SetConfig+0x594>
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015146:	2b05      	cmp	r3, #5
 8015148:	d026      	beq.n	8015198 <USART_SetConfig+0x590>
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801514e:	2b06      	cmp	r3, #6
 8015150:	d020      	beq.n	8015194 <USART_SetConfig+0x58c>
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015156:	2b07      	cmp	r3, #7
 8015158:	d01a      	beq.n	8015190 <USART_SetConfig+0x588>
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801515e:	2b08      	cmp	r3, #8
 8015160:	d014      	beq.n	801518c <USART_SetConfig+0x584>
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015166:	2b09      	cmp	r3, #9
 8015168:	d00e      	beq.n	8015188 <USART_SetConfig+0x580>
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801516e:	2b0a      	cmp	r3, #10
 8015170:	d008      	beq.n	8015184 <USART_SetConfig+0x57c>
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015176:	2b0b      	cmp	r3, #11
 8015178:	d102      	bne.n	8015180 <USART_SetConfig+0x578>
 801517a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801517e:	e016      	b.n	80151ae <USART_SetConfig+0x5a6>
 8015180:	2301      	movs	r3, #1
 8015182:	e014      	b.n	80151ae <USART_SetConfig+0x5a6>
 8015184:	2380      	movs	r3, #128	@ 0x80
 8015186:	e012      	b.n	80151ae <USART_SetConfig+0x5a6>
 8015188:	2340      	movs	r3, #64	@ 0x40
 801518a:	e010      	b.n	80151ae <USART_SetConfig+0x5a6>
 801518c:	2320      	movs	r3, #32
 801518e:	e00e      	b.n	80151ae <USART_SetConfig+0x5a6>
 8015190:	2310      	movs	r3, #16
 8015192:	e00c      	b.n	80151ae <USART_SetConfig+0x5a6>
 8015194:	230c      	movs	r3, #12
 8015196:	e00a      	b.n	80151ae <USART_SetConfig+0x5a6>
 8015198:	230a      	movs	r3, #10
 801519a:	e008      	b.n	80151ae <USART_SetConfig+0x5a6>
 801519c:	2308      	movs	r3, #8
 801519e:	e006      	b.n	80151ae <USART_SetConfig+0x5a6>
 80151a0:	2306      	movs	r3, #6
 80151a2:	e004      	b.n	80151ae <USART_SetConfig+0x5a6>
 80151a4:	2304      	movs	r3, #4
 80151a6:	e002      	b.n	80151ae <USART_SetConfig+0x5a6>
 80151a8:	2302      	movs	r3, #2
 80151aa:	e000      	b.n	80151ae <USART_SetConfig+0x5a6>
 80151ac:	2301      	movs	r3, #1
 80151ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80151b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80151b4:	005a      	lsls	r2, r3, #1
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	085b      	lsrs	r3, r3, #1
 80151bc:	441a      	add	r2, r3
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	685b      	ldr	r3, [r3, #4]
 80151c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80151c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80151c8:	e291      	b.n	80156ee <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80151ca:	f7f7 f9af 	bl	800c52c <HAL_RCC_GetPCLK2Freq>
 80151ce:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d049      	beq.n	801526c <USART_SetConfig+0x664>
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151dc:	2b01      	cmp	r3, #1
 80151de:	d043      	beq.n	8015268 <USART_SetConfig+0x660>
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151e4:	2b02      	cmp	r3, #2
 80151e6:	d03d      	beq.n	8015264 <USART_SetConfig+0x65c>
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151ec:	2b03      	cmp	r3, #3
 80151ee:	d032      	beq.n	8015256 <USART_SetConfig+0x64e>
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151f4:	2b04      	cmp	r3, #4
 80151f6:	d02c      	beq.n	8015252 <USART_SetConfig+0x64a>
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151fc:	2b05      	cmp	r3, #5
 80151fe:	d026      	beq.n	801524e <USART_SetConfig+0x646>
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015204:	2b06      	cmp	r3, #6
 8015206:	d020      	beq.n	801524a <USART_SetConfig+0x642>
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801520c:	2b07      	cmp	r3, #7
 801520e:	d01a      	beq.n	8015246 <USART_SetConfig+0x63e>
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015214:	2b08      	cmp	r3, #8
 8015216:	d014      	beq.n	8015242 <USART_SetConfig+0x63a>
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801521c:	2b09      	cmp	r3, #9
 801521e:	d00e      	beq.n	801523e <USART_SetConfig+0x636>
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015224:	2b0a      	cmp	r3, #10
 8015226:	d008      	beq.n	801523a <USART_SetConfig+0x632>
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801522c:	2b0b      	cmp	r3, #11
 801522e:	d102      	bne.n	8015236 <USART_SetConfig+0x62e>
 8015230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015234:	e01b      	b.n	801526e <USART_SetConfig+0x666>
 8015236:	2301      	movs	r3, #1
 8015238:	e019      	b.n	801526e <USART_SetConfig+0x666>
 801523a:	2380      	movs	r3, #128	@ 0x80
 801523c:	e017      	b.n	801526e <USART_SetConfig+0x666>
 801523e:	2340      	movs	r3, #64	@ 0x40
 8015240:	e015      	b.n	801526e <USART_SetConfig+0x666>
 8015242:	2320      	movs	r3, #32
 8015244:	e013      	b.n	801526e <USART_SetConfig+0x666>
 8015246:	2310      	movs	r3, #16
 8015248:	e011      	b.n	801526e <USART_SetConfig+0x666>
 801524a:	230c      	movs	r3, #12
 801524c:	e00f      	b.n	801526e <USART_SetConfig+0x666>
 801524e:	230a      	movs	r3, #10
 8015250:	e00d      	b.n	801526e <USART_SetConfig+0x666>
 8015252:	2308      	movs	r3, #8
 8015254:	e00b      	b.n	801526e <USART_SetConfig+0x666>
 8015256:	2306      	movs	r3, #6
 8015258:	e009      	b.n	801526e <USART_SetConfig+0x666>
 801525a:	bf00      	nop
 801525c:	40011c00 	.word	0x40011c00
 8015260:	58024400 	.word	0x58024400
 8015264:	2304      	movs	r3, #4
 8015266:	e002      	b.n	801526e <USART_SetConfig+0x666>
 8015268:	2302      	movs	r3, #2
 801526a:	e000      	b.n	801526e <USART_SetConfig+0x666>
 801526c:	2301      	movs	r3, #1
 801526e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015270:	fbb2 f3f3 	udiv	r3, r2, r3
 8015274:	005a      	lsls	r2, r3, #1
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	685b      	ldr	r3, [r3, #4]
 801527a:	085b      	lsrs	r3, r3, #1
 801527c:	441a      	add	r2, r3
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	685b      	ldr	r3, [r3, #4]
 8015282:	fbb2 f3f3 	udiv	r3, r2, r3
 8015286:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015288:	e231      	b.n	80156ee <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801528a:	f107 0318 	add.w	r3, r7, #24
 801528e:	4618      	mov	r0, r3
 8015290:	f7f9 f806 	bl	800e2a0 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8015294:	69fa      	ldr	r2, [r7, #28]
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801529a:	2b00      	cmp	r3, #0
 801529c:	d044      	beq.n	8015328 <USART_SetConfig+0x720>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152a2:	2b01      	cmp	r3, #1
 80152a4:	d03e      	beq.n	8015324 <USART_SetConfig+0x71c>
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152aa:	2b02      	cmp	r3, #2
 80152ac:	d038      	beq.n	8015320 <USART_SetConfig+0x718>
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152b2:	2b03      	cmp	r3, #3
 80152b4:	d032      	beq.n	801531c <USART_SetConfig+0x714>
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152ba:	2b04      	cmp	r3, #4
 80152bc:	d02c      	beq.n	8015318 <USART_SetConfig+0x710>
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152c2:	2b05      	cmp	r3, #5
 80152c4:	d026      	beq.n	8015314 <USART_SetConfig+0x70c>
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152ca:	2b06      	cmp	r3, #6
 80152cc:	d020      	beq.n	8015310 <USART_SetConfig+0x708>
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152d2:	2b07      	cmp	r3, #7
 80152d4:	d01a      	beq.n	801530c <USART_SetConfig+0x704>
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152da:	2b08      	cmp	r3, #8
 80152dc:	d014      	beq.n	8015308 <USART_SetConfig+0x700>
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152e2:	2b09      	cmp	r3, #9
 80152e4:	d00e      	beq.n	8015304 <USART_SetConfig+0x6fc>
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152ea:	2b0a      	cmp	r3, #10
 80152ec:	d008      	beq.n	8015300 <USART_SetConfig+0x6f8>
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152f2:	2b0b      	cmp	r3, #11
 80152f4:	d102      	bne.n	80152fc <USART_SetConfig+0x6f4>
 80152f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80152fa:	e016      	b.n	801532a <USART_SetConfig+0x722>
 80152fc:	2301      	movs	r3, #1
 80152fe:	e014      	b.n	801532a <USART_SetConfig+0x722>
 8015300:	2380      	movs	r3, #128	@ 0x80
 8015302:	e012      	b.n	801532a <USART_SetConfig+0x722>
 8015304:	2340      	movs	r3, #64	@ 0x40
 8015306:	e010      	b.n	801532a <USART_SetConfig+0x722>
 8015308:	2320      	movs	r3, #32
 801530a:	e00e      	b.n	801532a <USART_SetConfig+0x722>
 801530c:	2310      	movs	r3, #16
 801530e:	e00c      	b.n	801532a <USART_SetConfig+0x722>
 8015310:	230c      	movs	r3, #12
 8015312:	e00a      	b.n	801532a <USART_SetConfig+0x722>
 8015314:	230a      	movs	r3, #10
 8015316:	e008      	b.n	801532a <USART_SetConfig+0x722>
 8015318:	2308      	movs	r3, #8
 801531a:	e006      	b.n	801532a <USART_SetConfig+0x722>
 801531c:	2306      	movs	r3, #6
 801531e:	e004      	b.n	801532a <USART_SetConfig+0x722>
 8015320:	2304      	movs	r3, #4
 8015322:	e002      	b.n	801532a <USART_SetConfig+0x722>
 8015324:	2302      	movs	r3, #2
 8015326:	e000      	b.n	801532a <USART_SetConfig+0x722>
 8015328:	2301      	movs	r3, #1
 801532a:	fbb2 f3f3 	udiv	r3, r2, r3
 801532e:	005a      	lsls	r2, r3, #1
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	685b      	ldr	r3, [r3, #4]
 8015334:	085b      	lsrs	r3, r3, #1
 8015336:	441a      	add	r2, r3
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	685b      	ldr	r3, [r3, #4]
 801533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015340:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8015342:	e1d4      	b.n	80156ee <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015344:	f107 030c 	add.w	r3, r7, #12
 8015348:	4618      	mov	r0, r3
 801534a:	f7f9 f8fd 	bl	800e548 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 801534e:	693a      	ldr	r2, [r7, #16]
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015354:	2b00      	cmp	r3, #0
 8015356:	d044      	beq.n	80153e2 <USART_SetConfig+0x7da>
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801535c:	2b01      	cmp	r3, #1
 801535e:	d03e      	beq.n	80153de <USART_SetConfig+0x7d6>
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015364:	2b02      	cmp	r3, #2
 8015366:	d038      	beq.n	80153da <USART_SetConfig+0x7d2>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801536c:	2b03      	cmp	r3, #3
 801536e:	d032      	beq.n	80153d6 <USART_SetConfig+0x7ce>
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015374:	2b04      	cmp	r3, #4
 8015376:	d02c      	beq.n	80153d2 <USART_SetConfig+0x7ca>
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801537c:	2b05      	cmp	r3, #5
 801537e:	d026      	beq.n	80153ce <USART_SetConfig+0x7c6>
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015384:	2b06      	cmp	r3, #6
 8015386:	d020      	beq.n	80153ca <USART_SetConfig+0x7c2>
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801538c:	2b07      	cmp	r3, #7
 801538e:	d01a      	beq.n	80153c6 <USART_SetConfig+0x7be>
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015394:	2b08      	cmp	r3, #8
 8015396:	d014      	beq.n	80153c2 <USART_SetConfig+0x7ba>
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801539c:	2b09      	cmp	r3, #9
 801539e:	d00e      	beq.n	80153be <USART_SetConfig+0x7b6>
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153a4:	2b0a      	cmp	r3, #10
 80153a6:	d008      	beq.n	80153ba <USART_SetConfig+0x7b2>
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153ac:	2b0b      	cmp	r3, #11
 80153ae:	d102      	bne.n	80153b6 <USART_SetConfig+0x7ae>
 80153b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80153b4:	e016      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153b6:	2301      	movs	r3, #1
 80153b8:	e014      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153ba:	2380      	movs	r3, #128	@ 0x80
 80153bc:	e012      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153be:	2340      	movs	r3, #64	@ 0x40
 80153c0:	e010      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153c2:	2320      	movs	r3, #32
 80153c4:	e00e      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153c6:	2310      	movs	r3, #16
 80153c8:	e00c      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153ca:	230c      	movs	r3, #12
 80153cc:	e00a      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153ce:	230a      	movs	r3, #10
 80153d0:	e008      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153d2:	2308      	movs	r3, #8
 80153d4:	e006      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153d6:	2306      	movs	r3, #6
 80153d8:	e004      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153da:	2304      	movs	r3, #4
 80153dc:	e002      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153de:	2302      	movs	r3, #2
 80153e0:	e000      	b.n	80153e4 <USART_SetConfig+0x7dc>
 80153e2:	2301      	movs	r3, #1
 80153e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80153e8:	005a      	lsls	r2, r3, #1
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	085b      	lsrs	r3, r3, #1
 80153f0:	441a      	add	r2, r3
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	685b      	ldr	r3, [r3, #4]
 80153f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80153fa:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 80153fc:	e177      	b.n	80156ee <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80153fe:	4b8a      	ldr	r3, [pc, #552]	@ (8015628 <USART_SetConfig+0xa20>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	f003 0320 	and.w	r3, r3, #32
 8015406:	2b00      	cmp	r3, #0
 8015408:	d05d      	beq.n	80154c6 <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 801540a:	4b87      	ldr	r3, [pc, #540]	@ (8015628 <USART_SetConfig+0xa20>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	08db      	lsrs	r3, r3, #3
 8015410:	f003 0303 	and.w	r3, r3, #3
 8015414:	4a85      	ldr	r2, [pc, #532]	@ (801562c <USART_SetConfig+0xa24>)
 8015416:	40da      	lsrs	r2, r3
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801541c:	2b00      	cmp	r3, #0
 801541e:	d044      	beq.n	80154aa <USART_SetConfig+0x8a2>
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015424:	2b01      	cmp	r3, #1
 8015426:	d03e      	beq.n	80154a6 <USART_SetConfig+0x89e>
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801542c:	2b02      	cmp	r3, #2
 801542e:	d038      	beq.n	80154a2 <USART_SetConfig+0x89a>
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015434:	2b03      	cmp	r3, #3
 8015436:	d032      	beq.n	801549e <USART_SetConfig+0x896>
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801543c:	2b04      	cmp	r3, #4
 801543e:	d02c      	beq.n	801549a <USART_SetConfig+0x892>
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015444:	2b05      	cmp	r3, #5
 8015446:	d026      	beq.n	8015496 <USART_SetConfig+0x88e>
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801544c:	2b06      	cmp	r3, #6
 801544e:	d020      	beq.n	8015492 <USART_SetConfig+0x88a>
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015454:	2b07      	cmp	r3, #7
 8015456:	d01a      	beq.n	801548e <USART_SetConfig+0x886>
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801545c:	2b08      	cmp	r3, #8
 801545e:	d014      	beq.n	801548a <USART_SetConfig+0x882>
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015464:	2b09      	cmp	r3, #9
 8015466:	d00e      	beq.n	8015486 <USART_SetConfig+0x87e>
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801546c:	2b0a      	cmp	r3, #10
 801546e:	d008      	beq.n	8015482 <USART_SetConfig+0x87a>
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015474:	2b0b      	cmp	r3, #11
 8015476:	d102      	bne.n	801547e <USART_SetConfig+0x876>
 8015478:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801547c:	e016      	b.n	80154ac <USART_SetConfig+0x8a4>
 801547e:	2301      	movs	r3, #1
 8015480:	e014      	b.n	80154ac <USART_SetConfig+0x8a4>
 8015482:	2380      	movs	r3, #128	@ 0x80
 8015484:	e012      	b.n	80154ac <USART_SetConfig+0x8a4>
 8015486:	2340      	movs	r3, #64	@ 0x40
 8015488:	e010      	b.n	80154ac <USART_SetConfig+0x8a4>
 801548a:	2320      	movs	r3, #32
 801548c:	e00e      	b.n	80154ac <USART_SetConfig+0x8a4>
 801548e:	2310      	movs	r3, #16
 8015490:	e00c      	b.n	80154ac <USART_SetConfig+0x8a4>
 8015492:	230c      	movs	r3, #12
 8015494:	e00a      	b.n	80154ac <USART_SetConfig+0x8a4>
 8015496:	230a      	movs	r3, #10
 8015498:	e008      	b.n	80154ac <USART_SetConfig+0x8a4>
 801549a:	2308      	movs	r3, #8
 801549c:	e006      	b.n	80154ac <USART_SetConfig+0x8a4>
 801549e:	2306      	movs	r3, #6
 80154a0:	e004      	b.n	80154ac <USART_SetConfig+0x8a4>
 80154a2:	2304      	movs	r3, #4
 80154a4:	e002      	b.n	80154ac <USART_SetConfig+0x8a4>
 80154a6:	2302      	movs	r3, #2
 80154a8:	e000      	b.n	80154ac <USART_SetConfig+0x8a4>
 80154aa:	2301      	movs	r3, #1
 80154ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80154b0:	005a      	lsls	r2, r3, #1
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	085b      	lsrs	r3, r3, #1
 80154b8:	441a      	add	r2, r3
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	fbb2 f3f3 	udiv	r3, r2, r3
 80154c2:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 80154c4:	e113      	b.n	80156ee <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d044      	beq.n	8015558 <USART_SetConfig+0x950>
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154d2:	2b01      	cmp	r3, #1
 80154d4:	d03e      	beq.n	8015554 <USART_SetConfig+0x94c>
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154da:	2b02      	cmp	r3, #2
 80154dc:	d038      	beq.n	8015550 <USART_SetConfig+0x948>
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154e2:	2b03      	cmp	r3, #3
 80154e4:	d032      	beq.n	801554c <USART_SetConfig+0x944>
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154ea:	2b04      	cmp	r3, #4
 80154ec:	d02c      	beq.n	8015548 <USART_SetConfig+0x940>
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154f2:	2b05      	cmp	r3, #5
 80154f4:	d026      	beq.n	8015544 <USART_SetConfig+0x93c>
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154fa:	2b06      	cmp	r3, #6
 80154fc:	d020      	beq.n	8015540 <USART_SetConfig+0x938>
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015502:	2b07      	cmp	r3, #7
 8015504:	d01a      	beq.n	801553c <USART_SetConfig+0x934>
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801550a:	2b08      	cmp	r3, #8
 801550c:	d014      	beq.n	8015538 <USART_SetConfig+0x930>
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015512:	2b09      	cmp	r3, #9
 8015514:	d00e      	beq.n	8015534 <USART_SetConfig+0x92c>
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801551a:	2b0a      	cmp	r3, #10
 801551c:	d008      	beq.n	8015530 <USART_SetConfig+0x928>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015522:	2b0b      	cmp	r3, #11
 8015524:	d102      	bne.n	801552c <USART_SetConfig+0x924>
 8015526:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801552a:	e016      	b.n	801555a <USART_SetConfig+0x952>
 801552c:	2301      	movs	r3, #1
 801552e:	e014      	b.n	801555a <USART_SetConfig+0x952>
 8015530:	2380      	movs	r3, #128	@ 0x80
 8015532:	e012      	b.n	801555a <USART_SetConfig+0x952>
 8015534:	2340      	movs	r3, #64	@ 0x40
 8015536:	e010      	b.n	801555a <USART_SetConfig+0x952>
 8015538:	2320      	movs	r3, #32
 801553a:	e00e      	b.n	801555a <USART_SetConfig+0x952>
 801553c:	2310      	movs	r3, #16
 801553e:	e00c      	b.n	801555a <USART_SetConfig+0x952>
 8015540:	230c      	movs	r3, #12
 8015542:	e00a      	b.n	801555a <USART_SetConfig+0x952>
 8015544:	230a      	movs	r3, #10
 8015546:	e008      	b.n	801555a <USART_SetConfig+0x952>
 8015548:	2308      	movs	r3, #8
 801554a:	e006      	b.n	801555a <USART_SetConfig+0x952>
 801554c:	2306      	movs	r3, #6
 801554e:	e004      	b.n	801555a <USART_SetConfig+0x952>
 8015550:	2304      	movs	r3, #4
 8015552:	e002      	b.n	801555a <USART_SetConfig+0x952>
 8015554:	2302      	movs	r3, #2
 8015556:	e000      	b.n	801555a <USART_SetConfig+0x952>
 8015558:	2301      	movs	r3, #1
 801555a:	4a34      	ldr	r2, [pc, #208]	@ (801562c <USART_SetConfig+0xa24>)
 801555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015560:	005a      	lsls	r2, r3, #1
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	685b      	ldr	r3, [r3, #4]
 8015566:	085b      	lsrs	r3, r3, #1
 8015568:	441a      	add	r2, r3
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	685b      	ldr	r3, [r3, #4]
 801556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015572:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015574:	e0bb      	b.n	80156ee <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801557a:	2b00      	cmp	r3, #0
 801557c:	d044      	beq.n	8015608 <USART_SetConfig+0xa00>
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015582:	2b01      	cmp	r3, #1
 8015584:	d03e      	beq.n	8015604 <USART_SetConfig+0x9fc>
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801558a:	2b02      	cmp	r3, #2
 801558c:	d038      	beq.n	8015600 <USART_SetConfig+0x9f8>
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015592:	2b03      	cmp	r3, #3
 8015594:	d032      	beq.n	80155fc <USART_SetConfig+0x9f4>
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801559a:	2b04      	cmp	r3, #4
 801559c:	d02c      	beq.n	80155f8 <USART_SetConfig+0x9f0>
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155a2:	2b05      	cmp	r3, #5
 80155a4:	d026      	beq.n	80155f4 <USART_SetConfig+0x9ec>
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155aa:	2b06      	cmp	r3, #6
 80155ac:	d020      	beq.n	80155f0 <USART_SetConfig+0x9e8>
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155b2:	2b07      	cmp	r3, #7
 80155b4:	d01a      	beq.n	80155ec <USART_SetConfig+0x9e4>
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155ba:	2b08      	cmp	r3, #8
 80155bc:	d014      	beq.n	80155e8 <USART_SetConfig+0x9e0>
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155c2:	2b09      	cmp	r3, #9
 80155c4:	d00e      	beq.n	80155e4 <USART_SetConfig+0x9dc>
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155ca:	2b0a      	cmp	r3, #10
 80155cc:	d008      	beq.n	80155e0 <USART_SetConfig+0x9d8>
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155d2:	2b0b      	cmp	r3, #11
 80155d4:	d102      	bne.n	80155dc <USART_SetConfig+0x9d4>
 80155d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80155da:	e016      	b.n	801560a <USART_SetConfig+0xa02>
 80155dc:	2301      	movs	r3, #1
 80155de:	e014      	b.n	801560a <USART_SetConfig+0xa02>
 80155e0:	2380      	movs	r3, #128	@ 0x80
 80155e2:	e012      	b.n	801560a <USART_SetConfig+0xa02>
 80155e4:	2340      	movs	r3, #64	@ 0x40
 80155e6:	e010      	b.n	801560a <USART_SetConfig+0xa02>
 80155e8:	2320      	movs	r3, #32
 80155ea:	e00e      	b.n	801560a <USART_SetConfig+0xa02>
 80155ec:	2310      	movs	r3, #16
 80155ee:	e00c      	b.n	801560a <USART_SetConfig+0xa02>
 80155f0:	230c      	movs	r3, #12
 80155f2:	e00a      	b.n	801560a <USART_SetConfig+0xa02>
 80155f4:	230a      	movs	r3, #10
 80155f6:	e008      	b.n	801560a <USART_SetConfig+0xa02>
 80155f8:	2308      	movs	r3, #8
 80155fa:	e006      	b.n	801560a <USART_SetConfig+0xa02>
 80155fc:	2306      	movs	r3, #6
 80155fe:	e004      	b.n	801560a <USART_SetConfig+0xa02>
 8015600:	2304      	movs	r3, #4
 8015602:	e002      	b.n	801560a <USART_SetConfig+0xa02>
 8015604:	2302      	movs	r3, #2
 8015606:	e000      	b.n	801560a <USART_SetConfig+0xa02>
 8015608:	2301      	movs	r3, #1
 801560a:	4a09      	ldr	r2, [pc, #36]	@ (8015630 <USART_SetConfig+0xa28>)
 801560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015610:	005a      	lsls	r2, r3, #1
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	085b      	lsrs	r3, r3, #1
 8015618:	441a      	add	r2, r3
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	685b      	ldr	r3, [r3, #4]
 801561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015622:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015624:	e063      	b.n	80156ee <USART_SetConfig+0xae6>
 8015626:	bf00      	nop
 8015628:	58024400 	.word	0x58024400
 801562c:	03d09000 	.word	0x03d09000
 8015630:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015638:	2b00      	cmp	r3, #0
 801563a:	d044      	beq.n	80156c6 <USART_SetConfig+0xabe>
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015640:	2b01      	cmp	r3, #1
 8015642:	d03e      	beq.n	80156c2 <USART_SetConfig+0xaba>
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015648:	2b02      	cmp	r3, #2
 801564a:	d038      	beq.n	80156be <USART_SetConfig+0xab6>
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015650:	2b03      	cmp	r3, #3
 8015652:	d032      	beq.n	80156ba <USART_SetConfig+0xab2>
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015658:	2b04      	cmp	r3, #4
 801565a:	d02c      	beq.n	80156b6 <USART_SetConfig+0xaae>
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015660:	2b05      	cmp	r3, #5
 8015662:	d026      	beq.n	80156b2 <USART_SetConfig+0xaaa>
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015668:	2b06      	cmp	r3, #6
 801566a:	d020      	beq.n	80156ae <USART_SetConfig+0xaa6>
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015670:	2b07      	cmp	r3, #7
 8015672:	d01a      	beq.n	80156aa <USART_SetConfig+0xaa2>
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015678:	2b08      	cmp	r3, #8
 801567a:	d014      	beq.n	80156a6 <USART_SetConfig+0xa9e>
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015680:	2b09      	cmp	r3, #9
 8015682:	d00e      	beq.n	80156a2 <USART_SetConfig+0xa9a>
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015688:	2b0a      	cmp	r3, #10
 801568a:	d008      	beq.n	801569e <USART_SetConfig+0xa96>
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015690:	2b0b      	cmp	r3, #11
 8015692:	d102      	bne.n	801569a <USART_SetConfig+0xa92>
 8015694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015698:	e016      	b.n	80156c8 <USART_SetConfig+0xac0>
 801569a:	2301      	movs	r3, #1
 801569c:	e014      	b.n	80156c8 <USART_SetConfig+0xac0>
 801569e:	2380      	movs	r3, #128	@ 0x80
 80156a0:	e012      	b.n	80156c8 <USART_SetConfig+0xac0>
 80156a2:	2340      	movs	r3, #64	@ 0x40
 80156a4:	e010      	b.n	80156c8 <USART_SetConfig+0xac0>
 80156a6:	2320      	movs	r3, #32
 80156a8:	e00e      	b.n	80156c8 <USART_SetConfig+0xac0>
 80156aa:	2310      	movs	r3, #16
 80156ac:	e00c      	b.n	80156c8 <USART_SetConfig+0xac0>
 80156ae:	230c      	movs	r3, #12
 80156b0:	e00a      	b.n	80156c8 <USART_SetConfig+0xac0>
 80156b2:	230a      	movs	r3, #10
 80156b4:	e008      	b.n	80156c8 <USART_SetConfig+0xac0>
 80156b6:	2308      	movs	r3, #8
 80156b8:	e006      	b.n	80156c8 <USART_SetConfig+0xac0>
 80156ba:	2306      	movs	r3, #6
 80156bc:	e004      	b.n	80156c8 <USART_SetConfig+0xac0>
 80156be:	2304      	movs	r3, #4
 80156c0:	e002      	b.n	80156c8 <USART_SetConfig+0xac0>
 80156c2:	2302      	movs	r3, #2
 80156c4:	e000      	b.n	80156c8 <USART_SetConfig+0xac0>
 80156c6:	2301      	movs	r3, #1
 80156c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80156cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80156d0:	005a      	lsls	r2, r3, #1
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	085b      	lsrs	r3, r3, #1
 80156d8:	441a      	add	r2, r3
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	fbb2 f3f3 	udiv	r3, r2, r3
 80156e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80156e4:	e003      	b.n	80156ee <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 80156e6:	2301      	movs	r3, #1
 80156e8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 80156ec:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80156ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156f0:	2b0f      	cmp	r3, #15
 80156f2:	d916      	bls.n	8015722 <USART_SetConfig+0xb1a>
 80156f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80156fa:	d212      	bcs.n	8015722 <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80156fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156fe:	b29b      	uxth	r3, r3
 8015700:	f023 030f 	bic.w	r3, r3, #15
 8015704:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015708:	085b      	lsrs	r3, r3, #1
 801570a:	b29b      	uxth	r3, r3
 801570c:	f003 0307 	and.w	r3, r3, #7
 8015710:	b29a      	uxth	r2, r3
 8015712:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015714:	4313      	orrs	r3, r2
 8015716:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801571e:	60da      	str	r2, [r3, #12]
 8015720:	e002      	b.n	8015728 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 8015722:	2301      	movs	r3, #1
 8015724:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2201      	movs	r2, #1
 801572c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2201      	movs	r2, #1
 8015732:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2200      	movs	r2, #0
 8015738:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2200      	movs	r2, #0
 801573e:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8015740:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 8015744:	4618      	mov	r0, r3
 8015746:	3738      	adds	r7, #56	@ 0x38
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}

0801574c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b086      	sub	sp, #24
 8015750:	af02      	add	r7, sp, #8
 8015752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2200      	movs	r2, #0
 8015758:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801575a:	f7f1 fcf1 	bl	8007140 <HAL_GetTick>
 801575e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	f003 0308 	and.w	r3, r3, #8
 801576a:	2b08      	cmp	r3, #8
 801576c:	d10e      	bne.n	801578c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801576e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	2200      	movs	r2, #0
 8015778:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	f7ff fa0d 	bl	8014b9c <USART_WaitOnFlagUntilTimeout>
 8015782:	4603      	mov	r3, r0
 8015784:	2b00      	cmp	r3, #0
 8015786:	d001      	beq.n	801578c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015788:	2303      	movs	r3, #3
 801578a:	e01e      	b.n	80157ca <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	f003 0304 	and.w	r3, r3, #4
 8015796:	2b04      	cmp	r3, #4
 8015798:	d10e      	bne.n	80157b8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801579a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801579e:	9300      	str	r3, [sp, #0]
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	2200      	movs	r2, #0
 80157a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80157a8:	6878      	ldr	r0, [r7, #4]
 80157aa:	f7ff f9f7 	bl	8014b9c <USART_WaitOnFlagUntilTimeout>
 80157ae:	4603      	mov	r3, r0
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d001      	beq.n	80157b8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80157b4:	2303      	movs	r3, #3
 80157b6:	e008      	b.n	80157ca <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2201      	movs	r2, #1
 80157bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2200      	movs	r2, #0
 80157c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80157c8:	2300      	movs	r3, #0
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3710      	adds	r7, #16
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}

080157d2 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 80157d2:	b480      	push	{r7}
 80157d4:	b085      	sub	sp, #20
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80157e0:	2b01      	cmp	r3, #1
 80157e2:	d101      	bne.n	80157e8 <HAL_USARTEx_EnableSlaveMode+0x16>
 80157e4:	2302      	movs	r3, #2
 80157e6:	e043      	b.n	8015870 <HAL_USARTEx_EnableSlaveMode+0x9e>
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2201      	movs	r2, #1
 80157ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2202      	movs	r2, #2
 80157f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	681a      	ldr	r2, [r3, #0]
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	f022 0201 	bic.w	r2, r2, #1
 801580e:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	685a      	ldr	r2, [r3, #4]
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801581e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	689a      	ldr	r2, [r3, #8]
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801582e:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	685a      	ldr	r2, [r3, #4]
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	f042 0201 	orr.w	r2, r2, #1
 801583e:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	68fa      	ldr	r2, [r7, #12]
 8015846:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2201      	movs	r2, #1
 801584c:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2201      	movs	r2, #1
 8015852:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	681a      	ldr	r2, [r3, #0]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	f042 0201 	orr.w	r2, r2, #1
 8015864:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2200      	movs	r2, #0
 801586a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 801586e:	2300      	movs	r3, #0
}
 8015870:	4618      	mov	r0, r3
 8015872:	3714      	adds	r7, #20
 8015874:	46bd      	mov	sp, r7
 8015876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587a:	4770      	bx	lr

0801587c <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 801587c:	b480      	push	{r7}
 801587e:	b085      	sub	sp, #20
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
 8015884:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801588c:	2b01      	cmp	r3, #1
 801588e:	d101      	bne.n	8015894 <HAL_USARTEx_ConfigNSS+0x18>
 8015890:	2302      	movs	r3, #2
 8015892:	e02a      	b.n	80158ea <HAL_USARTEx_ConfigNSS+0x6e>
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2201      	movs	r2, #1
 8015898:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2202      	movs	r2, #2
 80158a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	681a      	ldr	r2, [r3, #0]
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	f022 0201 	bic.w	r2, r2, #1
 80158ba:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	685b      	ldr	r3, [r3, #4]
 80158c2:	f023 0108 	bic.w	r1, r3, #8
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	683a      	ldr	r2, [r7, #0]
 80158cc:	430a      	orrs	r2, r1
 80158ce:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	68fa      	ldr	r2, [r7, #12]
 80158d6:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2201      	movs	r2, #1
 80158dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2200      	movs	r2, #0
 80158e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80158e8:	2300      	movs	r3, #0
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3714      	adds	r7, #20
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr

080158f6 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80158f6:	b480      	push	{r7}
 80158f8:	b085      	sub	sp, #20
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8015904:	2b01      	cmp	r3, #1
 8015906:	d101      	bne.n	801590c <HAL_USARTEx_DisableFifoMode+0x16>
 8015908:	2302      	movs	r3, #2
 801590a:	e027      	b.n	801595c <HAL_USARTEx_DisableFifoMode+0x66>
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2201      	movs	r2, #1
 8015910:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2202      	movs	r2, #2
 8015918:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	681a      	ldr	r2, [r3, #0]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	f022 0201 	bic.w	r2, r2, #1
 8015932:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801593a:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	2200      	movs	r2, #0
 8015940:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	68fa      	ldr	r2, [r7, #12]
 8015948:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	2201      	movs	r2, #1
 801594e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	2200      	movs	r2, #0
 8015956:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 801595a:	2300      	movs	r3, #0
}
 801595c:	4618      	mov	r0, r3
 801595e:	3714      	adds	r7, #20
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr

08015968 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b084      	sub	sp, #16
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8015978:	2b01      	cmp	r3, #1
 801597a:	d101      	bne.n	8015980 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 801597c:	2302      	movs	r3, #2
 801597e:	e02d      	b.n	80159dc <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	2201      	movs	r2, #1
 8015984:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2202      	movs	r2, #2
 801598c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	f022 0201 	bic.w	r2, r2, #1
 80159a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	689b      	ldr	r3, [r3, #8]
 80159ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	683a      	ldr	r2, [r7, #0]
 80159b8:	430a      	orrs	r2, r1
 80159ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f000 f84f 	bl	8015a60 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	68fa      	ldr	r2, [r7, #12]
 80159c8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	2201      	movs	r2, #1
 80159ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	2200      	movs	r2, #0
 80159d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80159da:	2300      	movs	r3, #0
}
 80159dc:	4618      	mov	r0, r3
 80159de:	3710      	adds	r7, #16
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd80      	pop	{r7, pc}

080159e4 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b084      	sub	sp, #16
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
 80159ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80159f4:	2b01      	cmp	r3, #1
 80159f6:	d101      	bne.n	80159fc <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80159f8:	2302      	movs	r3, #2
 80159fa:	e02d      	b.n	8015a58 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	2201      	movs	r2, #1
 8015a00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2202      	movs	r2, #2
 8015a08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	681a      	ldr	r2, [r3, #0]
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	f022 0201 	bic.w	r2, r2, #1
 8015a22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	689b      	ldr	r3, [r3, #8]
 8015a2a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	683a      	ldr	r2, [r7, #0]
 8015a34:	430a      	orrs	r2, r1
 8015a36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f000 f811 	bl	8015a60 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	68fa      	ldr	r2, [r7, #12]
 8015a44:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2201      	movs	r2, #1
 8015a4a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2200      	movs	r2, #0
 8015a52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8015a56:	2300      	movs	r3, #0
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3710      	adds	r7, #16
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8015a60:	b480      	push	{r7}
 8015a62:	b085      	sub	sp, #20
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d106      	bne.n	8015a7e <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	2201      	movs	r2, #1
 8015a74:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2201      	movs	r2, #1
 8015a7a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015a7c:	e02f      	b.n	8015ade <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015a7e:	2310      	movs	r3, #16
 8015a80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015a82:	2310      	movs	r3, #16
 8015a84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8015a8c:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8015a8e:	b2db      	uxtb	r3, r3
 8015a90:	f003 0307 	and.w	r3, r3, #7
 8015a94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8015a9c:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8015a9e:	b2db      	uxtb	r3, r3
 8015aa0:	f003 0307 	and.w	r3, r3, #7
 8015aa4:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015aa6:	7bbb      	ldrb	r3, [r7, #14]
 8015aa8:	7b3a      	ldrb	r2, [r7, #12]
 8015aaa:	4910      	ldr	r1, [pc, #64]	@ (8015aec <USARTEx_SetNbDataToProcess+0x8c>)
 8015aac:	5c8a      	ldrb	r2, [r1, r2]
 8015aae:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8015ab2:	7b3a      	ldrb	r2, [r7, #12]
 8015ab4:	490e      	ldr	r1, [pc, #56]	@ (8015af0 <USARTEx_SetNbDataToProcess+0x90>)
 8015ab6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8015abc:	b29a      	uxth	r2, r3
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015ac2:	7bfb      	ldrb	r3, [r7, #15]
 8015ac4:	7b7a      	ldrb	r2, [r7, #13]
 8015ac6:	4909      	ldr	r1, [pc, #36]	@ (8015aec <USARTEx_SetNbDataToProcess+0x8c>)
 8015ac8:	5c8a      	ldrb	r2, [r1, r2]
 8015aca:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8015ace:	7b7a      	ldrb	r2, [r7, #13]
 8015ad0:	4907      	ldr	r1, [pc, #28]	@ (8015af0 <USARTEx_SetNbDataToProcess+0x90>)
 8015ad2:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015ad4:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ad8:	b29a      	uxth	r2, r3
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 8015ade:	bf00      	nop
 8015ae0:	3714      	adds	r7, #20
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae8:	4770      	bx	lr
 8015aea:	bf00      	nop
 8015aec:	0801b2e4 	.word	0x0801b2e4
 8015af0:	0801b2ec 	.word	0x0801b2ec

08015af4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8015af4:	b084      	sub	sp, #16
 8015af6:	b480      	push	{r7}
 8015af8:	b085      	sub	sp, #20
 8015afa:	af00      	add	r7, sp, #0
 8015afc:	6078      	str	r0, [r7, #4]
 8015afe:	f107 001c 	add.w	r0, r7, #28
 8015b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8015b06:	2300      	movs	r3, #0
 8015b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8015b0a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8015b0c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8015b0e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8015b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8015b12:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8015b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8015b16:	431a      	orrs	r2, r3
             Init.ClockDiv
 8015b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8015b1a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8015b1c:	68fa      	ldr	r2, [r7, #12]
 8015b1e:	4313      	orrs	r3, r2
 8015b20:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	685a      	ldr	r2, [r3, #4]
 8015b26:	4b07      	ldr	r3, [pc, #28]	@ (8015b44 <SDMMC_Init+0x50>)
 8015b28:	4013      	ands	r3, r2
 8015b2a:	68fa      	ldr	r2, [r7, #12]
 8015b2c:	431a      	orrs	r2, r3
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8015b32:	2300      	movs	r3, #0
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	3714      	adds	r7, #20
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3e:	b004      	add	sp, #16
 8015b40:	4770      	bx	lr
 8015b42:	bf00      	nop
 8015b44:	ffc02c00 	.word	0xffc02c00

08015b48 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8015b48:	b480      	push	{r7}
 8015b4a:	b083      	sub	sp, #12
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8015b56:	4618      	mov	r0, r3
 8015b58:	370c      	adds	r7, #12
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b60:	4770      	bx	lr

08015b62 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8015b62:	b480      	push	{r7}
 8015b64:	b083      	sub	sp, #12
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	6078      	str	r0, [r7, #4]
 8015b6a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015b76:	2300      	movs	r3, #0
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	370c      	adds	r7, #12
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b82:	4770      	bx	lr

08015b84 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8015b84:	b480      	push	{r7}
 8015b86:	b083      	sub	sp, #12
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f043 0203 	orr.w	r2, r3, #3
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8015b98:	2300      	movs	r3, #0
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	370c      	adds	r7, #12
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba4:	4770      	bx	lr

08015ba6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8015ba6:	b480      	push	{r7}
 8015ba8:	b083      	sub	sp, #12
 8015baa:	af00      	add	r7, sp, #0
 8015bac:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	f003 0303 	and.w	r3, r3, #3
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	370c      	adds	r7, #12
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc0:	4770      	bx	lr
	...

08015bc4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b085      	sub	sp, #20
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	681a      	ldr	r2, [r3, #0]
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8015be2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8015be8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8015bee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8015bf0:	68fa      	ldr	r2, [r7, #12]
 8015bf2:	4313      	orrs	r3, r2
 8015bf4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	68da      	ldr	r2, [r3, #12]
 8015bfa:	4b06      	ldr	r3, [pc, #24]	@ (8015c14 <SDMMC_SendCommand+0x50>)
 8015bfc:	4013      	ands	r3, r2
 8015bfe:	68fa      	ldr	r2, [r7, #12]
 8015c00:	431a      	orrs	r2, r3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015c06:	2300      	movs	r3, #0
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3714      	adds	r7, #20
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c12:	4770      	bx	lr
 8015c14:	fffee0c0 	.word	0xfffee0c0

08015c18 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8015c18:	b480      	push	{r7}
 8015c1a:	b083      	sub	sp, #12
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	691b      	ldr	r3, [r3, #16]
 8015c24:	b2db      	uxtb	r3, r3
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	370c      	adds	r7, #12
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c30:	4770      	bx	lr

08015c32 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8015c32:	b480      	push	{r7}
 8015c34:	b085      	sub	sp, #20
 8015c36:	af00      	add	r7, sp, #0
 8015c38:	6078      	str	r0, [r7, #4]
 8015c3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	3314      	adds	r3, #20
 8015c40:	461a      	mov	r2, r3
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	4413      	add	r3, r2
 8015c46:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	681b      	ldr	r3, [r3, #0]
}
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	3714      	adds	r7, #20
 8015c50:	46bd      	mov	sp, r7
 8015c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c56:	4770      	bx	lr

08015c58 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8015c58:	b480      	push	{r7}
 8015c5a:	b085      	sub	sp, #20
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
 8015c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8015c62:	2300      	movs	r3, #0
 8015c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	681a      	ldr	r2, [r3, #0]
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	685a      	ldr	r2, [r3, #4]
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8015c7a:	683b      	ldr	r3, [r7, #0]
 8015c7c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8015c7e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8015c80:	683b      	ldr	r3, [r7, #0]
 8015c82:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8015c84:	431a      	orrs	r2, r3
                       Data->DPSM);
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8015c8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8015c8c:	68fa      	ldr	r2, [r7, #12]
 8015c8e:	4313      	orrs	r3, r2
 8015c90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	431a      	orrs	r2, r3
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8015ca2:	2300      	movs	r3, #0

}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	3714      	adds	r7, #20
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cae:	4770      	bx	lr

08015cb0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b088      	sub	sp, #32
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8015cbe:	2310      	movs	r3, #16
 8015cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015ccc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015cd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015cd2:	f107 0308 	add.w	r3, r7, #8
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	6878      	ldr	r0, [r7, #4]
 8015cda:	f7ff ff73 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8015cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015ce2:	2110      	movs	r1, #16
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f000 fa5f 	bl	80161a8 <SDMMC_GetCmdResp1>
 8015cea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015cec:	69fb      	ldr	r3, [r7, #28]
}
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3720      	adds	r7, #32
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}

08015cf6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8015cf6:	b580      	push	{r7, lr}
 8015cf8:	b088      	sub	sp, #32
 8015cfa:	af00      	add	r7, sp, #0
 8015cfc:	6078      	str	r0, [r7, #4]
 8015cfe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8015d04:	2311      	movs	r3, #17
 8015d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015d08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015d0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015d12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015d16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015d18:	f107 0308 	add.w	r3, r7, #8
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f7ff ff50 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8015d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015d28:	2111      	movs	r1, #17
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f000 fa3c 	bl	80161a8 <SDMMC_GetCmdResp1>
 8015d30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015d32:	69fb      	ldr	r3, [r7, #28]
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3720      	adds	r7, #32
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b088      	sub	sp, #32
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
 8015d44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8015d46:	683b      	ldr	r3, [r7, #0]
 8015d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8015d4a:	2312      	movs	r3, #18
 8015d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015d52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015d54:	2300      	movs	r3, #0
 8015d56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015d5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015d5e:	f107 0308 	add.w	r3, r7, #8
 8015d62:	4619      	mov	r1, r3
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f7ff ff2d 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8015d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015d6e:	2112      	movs	r1, #18
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f000 fa19 	bl	80161a8 <SDMMC_GetCmdResp1>
 8015d76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015d78:	69fb      	ldr	r3, [r7, #28]
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	3720      	adds	r7, #32
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd80      	pop	{r7, pc}

08015d82 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8015d82:	b580      	push	{r7, lr}
 8015d84:	b088      	sub	sp, #32
 8015d86:	af00      	add	r7, sp, #0
 8015d88:	6078      	str	r0, [r7, #4]
 8015d8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8015d90:	2318      	movs	r3, #24
 8015d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015d94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015d9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015da2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015da4:	f107 0308 	add.w	r3, r7, #8
 8015da8:	4619      	mov	r1, r3
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f7ff ff0a 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8015db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015db4:	2118      	movs	r1, #24
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f000 f9f6 	bl	80161a8 <SDMMC_GetCmdResp1>
 8015dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015dbe:	69fb      	ldr	r3, [r7, #28]
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	3720      	adds	r7, #32
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}

08015dc8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b088      	sub	sp, #32
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8015dd6:	2319      	movs	r3, #25
 8015dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015de0:	2300      	movs	r3, #0
 8015de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015de8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015dea:	f107 0308 	add.w	r3, r7, #8
 8015dee:	4619      	mov	r1, r3
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f7ff fee7 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8015df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015dfa:	2119      	movs	r1, #25
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f000 f9d3 	bl	80161a8 <SDMMC_GetCmdResp1>
 8015e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015e04:	69fb      	ldr	r3, [r7, #28]
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3720      	adds	r7, #32
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
	...

08015e10 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b088      	sub	sp, #32
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8015e1c:	230c      	movs	r3, #12
 8015e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015e20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015e26:	2300      	movs	r3, #0
 8015e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015e2e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	68db      	ldr	r3, [r3, #12]
 8015e34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	68db      	ldr	r3, [r3, #12]
 8015e40:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015e48:	f107 0308 	add.w	r3, r7, #8
 8015e4c:	4619      	mov	r1, r3
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f7ff feb8 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8015e54:	4a0b      	ldr	r2, [pc, #44]	@ (8015e84 <SDMMC_CmdStopTransfer+0x74>)
 8015e56:	210c      	movs	r1, #12
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f000 f9a5 	bl	80161a8 <SDMMC_GetCmdResp1>
 8015e5e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	68db      	ldr	r3, [r3, #12]
 8015e64:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015e72:	d101      	bne.n	8015e78 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8015e74:	2300      	movs	r3, #0
 8015e76:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8015e78:	69fb      	ldr	r3, [r7, #28]
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3720      	adds	r7, #32
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	05f5e100 	.word	0x05f5e100

08015e88 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b088      	sub	sp, #32
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
 8015e90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8015e96:	2307      	movs	r3, #7
 8015e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015e9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015e9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015ea8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015eaa:	f107 0308 	add.w	r3, r7, #8
 8015eae:	4619      	mov	r1, r3
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f7ff fe87 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8015eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015eba:	2107      	movs	r1, #7
 8015ebc:	6878      	ldr	r0, [r7, #4]
 8015ebe:	f000 f973 	bl	80161a8 <SDMMC_GetCmdResp1>
 8015ec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015ec4:	69fb      	ldr	r3, [r7, #28]
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3720      	adds	r7, #32
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}

08015ece <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8015ece:	b580      	push	{r7, lr}
 8015ed0:	b088      	sub	sp, #32
 8015ed2:	af00      	add	r7, sp, #0
 8015ed4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8015eda:	2300      	movs	r3, #0
 8015edc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015eea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015eec:	f107 0308 	add.w	r3, r7, #8
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f7ff fe66 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 fb97 	bl	801662c <SDMMC_GetCmdError>
 8015efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015f00:	69fb      	ldr	r3, [r7, #28]
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	3720      	adds	r7, #32
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}

08015f0a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8015f0a:	b580      	push	{r7, lr}
 8015f0c:	b088      	sub	sp, #32
 8015f0e:	af00      	add	r7, sp, #0
 8015f10:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8015f12:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8015f16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8015f18:	2308      	movs	r3, #8
 8015f1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015f1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015f22:	2300      	movs	r3, #0
 8015f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015f2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015f2c:	f107 0308 	add.w	r3, r7, #8
 8015f30:	4619      	mov	r1, r3
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f7ff fe46 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f000 fb29 	bl	8016590 <SDMMC_GetCmdResp7>
 8015f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015f40:	69fb      	ldr	r3, [r7, #28]
}
 8015f42:	4618      	mov	r0, r3
 8015f44:	3720      	adds	r7, #32
 8015f46:	46bd      	mov	sp, r7
 8015f48:	bd80      	pop	{r7, pc}

08015f4a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8015f4a:	b580      	push	{r7, lr}
 8015f4c:	b088      	sub	sp, #32
 8015f4e:	af00      	add	r7, sp, #0
 8015f50:	6078      	str	r0, [r7, #4]
 8015f52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8015f58:	2337      	movs	r3, #55	@ 0x37
 8015f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015f5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015f62:	2300      	movs	r3, #0
 8015f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015f66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015f6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015f6c:	f107 0308 	add.w	r3, r7, #8
 8015f70:	4619      	mov	r1, r3
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f7ff fe26 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8015f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015f7c:	2137      	movs	r1, #55	@ 0x37
 8015f7e:	6878      	ldr	r0, [r7, #4]
 8015f80:	f000 f912 	bl	80161a8 <SDMMC_GetCmdResp1>
 8015f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015f86:	69fb      	ldr	r3, [r7, #28]
}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3720      	adds	r7, #32
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b088      	sub	sp, #32
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
 8015f98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8015f9e:	2329      	movs	r3, #41	@ 0x29
 8015fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015fa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015fa8:	2300      	movs	r3, #0
 8015faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015fb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015fb2:	f107 0308 	add.w	r3, r7, #8
 8015fb6:	4619      	mov	r1, r3
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f7ff fe03 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8015fbe:	6878      	ldr	r0, [r7, #4]
 8015fc0:	f000 fa2e 	bl	8016420 <SDMMC_GetCmdResp3>
 8015fc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015fc6:	69fb      	ldr	r3, [r7, #28]
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3720      	adds	r7, #32
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b088      	sub	sp, #32
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8015fde:	2306      	movs	r3, #6
 8015fe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015ff0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015ff2:	f107 0308 	add.w	r3, r7, #8
 8015ff6:	4619      	mov	r1, r3
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f7ff fde3 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8015ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016002:	2106      	movs	r1, #6
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f000 f8cf 	bl	80161a8 <SDMMC_GetCmdResp1>
 801600a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801600c:	69fb      	ldr	r3, [r7, #28]
}
 801600e:	4618      	mov	r0, r3
 8016010:	3720      	adds	r7, #32
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}

08016016 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8016016:	b580      	push	{r7, lr}
 8016018:	b088      	sub	sp, #32
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801601e:	2300      	movs	r3, #0
 8016020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8016022:	2333      	movs	r3, #51	@ 0x33
 8016024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016026:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801602a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801602c:	2300      	movs	r3, #0
 801602e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016030:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016034:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8016036:	f107 0308 	add.w	r3, r7, #8
 801603a:	4619      	mov	r1, r3
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f7ff fdc1 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8016042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016046:	2133      	movs	r1, #51	@ 0x33
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f000 f8ad 	bl	80161a8 <SDMMC_GetCmdResp1>
 801604e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016050:	69fb      	ldr	r3, [r7, #28]
}
 8016052:	4618      	mov	r0, r3
 8016054:	3720      	adds	r7, #32
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}

0801605a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801605a:	b580      	push	{r7, lr}
 801605c:	b088      	sub	sp, #32
 801605e:	af00      	add	r7, sp, #0
 8016060:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8016062:	2300      	movs	r3, #0
 8016064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8016066:	2302      	movs	r3, #2
 8016068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801606a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801606e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016070:	2300      	movs	r3, #0
 8016072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016078:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801607a:	f107 0308 	add.w	r3, r7, #8
 801607e:	4619      	mov	r1, r3
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7ff fd9f 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f000 f980 	bl	801638c <SDMMC_GetCmdResp2>
 801608c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801608e:	69fb      	ldr	r3, [r7, #28]
}
 8016090:	4618      	mov	r0, r3
 8016092:	3720      	adds	r7, #32
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}

08016098 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b088      	sub	sp, #32
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
 80160a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80160a2:	683b      	ldr	r3, [r7, #0]
 80160a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80160a6:	2309      	movs	r3, #9
 80160a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80160aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80160ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80160b0:	2300      	movs	r3, #0
 80160b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80160b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80160b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80160ba:	f107 0308 	add.w	r3, r7, #8
 80160be:	4619      	mov	r1, r3
 80160c0:	6878      	ldr	r0, [r7, #4]
 80160c2:	f7ff fd7f 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f000 f960 	bl	801638c <SDMMC_GetCmdResp2>
 80160cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80160ce:	69fb      	ldr	r3, [r7, #28]
}
 80160d0:	4618      	mov	r0, r3
 80160d2:	3720      	adds	r7, #32
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}

080160d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b088      	sub	sp, #32
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
 80160e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80160e2:	2300      	movs	r3, #0
 80160e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80160e6:	2303      	movs	r3, #3
 80160e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80160ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80160ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80160f0:	2300      	movs	r3, #0
 80160f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80160f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80160f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80160fa:	f107 0308 	add.w	r3, r7, #8
 80160fe:	4619      	mov	r1, r3
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f7ff fd5f 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8016106:	683a      	ldr	r2, [r7, #0]
 8016108:	2103      	movs	r1, #3
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f000 f9c8 	bl	80164a0 <SDMMC_GetCmdResp6>
 8016110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016112:	69fb      	ldr	r3, [r7, #28]
}
 8016114:	4618      	mov	r0, r3
 8016116:	3720      	adds	r7, #32
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}

0801611c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b088      	sub	sp, #32
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
 8016124:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801612a:	230d      	movs	r3, #13
 801612c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801612e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016134:	2300      	movs	r3, #0
 8016136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801613c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801613e:	f107 0308 	add.w	r3, r7, #8
 8016142:	4619      	mov	r1, r3
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f7ff fd3d 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801614a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801614e:	210d      	movs	r1, #13
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 f829 	bl	80161a8 <SDMMC_GetCmdResp1>
 8016156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016158:	69fb      	ldr	r3, [r7, #28]
}
 801615a:	4618      	mov	r0, r3
 801615c:	3720      	adds	r7, #32
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}

08016162 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8016162:	b580      	push	{r7, lr}
 8016164:	b088      	sub	sp, #32
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801616a:	2300      	movs	r3, #0
 801616c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801616e:	230d      	movs	r3, #13
 8016170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016178:	2300      	movs	r3, #0
 801617a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801617c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016180:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8016182:	f107 0308 	add.w	r3, r7, #8
 8016186:	4619      	mov	r1, r3
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f7ff fd1b 	bl	8015bc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801618e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016192:	210d      	movs	r1, #13
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f000 f807 	bl	80161a8 <SDMMC_GetCmdResp1>
 801619a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801619c:	69fb      	ldr	r3, [r7, #28]
}
 801619e:	4618      	mov	r0, r3
 80161a0:	3720      	adds	r7, #32
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bd80      	pop	{r7, pc}
	...

080161a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b088      	sub	sp, #32
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	60f8      	str	r0, [r7, #12]
 80161b0:	460b      	mov	r3, r1
 80161b2:	607a      	str	r2, [r7, #4]
 80161b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80161b6:	4b70      	ldr	r3, [pc, #448]	@ (8016378 <SDMMC_GetCmdResp1+0x1d0>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	4a70      	ldr	r2, [pc, #448]	@ (801637c <SDMMC_GetCmdResp1+0x1d4>)
 80161bc:	fba2 2303 	umull	r2, r3, r2, r3
 80161c0:	0a5a      	lsrs	r2, r3, #9
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	fb02 f303 	mul.w	r3, r2, r3
 80161c8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80161ca:	69fb      	ldr	r3, [r7, #28]
 80161cc:	1e5a      	subs	r2, r3, #1
 80161ce:	61fa      	str	r2, [r7, #28]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d102      	bne.n	80161da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80161d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80161d8:	e0c9      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80161de:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80161e0:	69ba      	ldr	r2, [r7, #24]
 80161e2:	4b67      	ldr	r3, [pc, #412]	@ (8016380 <SDMMC_GetCmdResp1+0x1d8>)
 80161e4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d0ef      	beq.n	80161ca <SDMMC_GetCmdResp1+0x22>
 80161ea:	69bb      	ldr	r3, [r7, #24]
 80161ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d1ea      	bne.n	80161ca <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80161f8:	f003 0304 	and.w	r3, r3, #4
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d004      	beq.n	801620a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2204      	movs	r2, #4
 8016204:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016206:	2304      	movs	r3, #4
 8016208:	e0b1      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801620e:	f003 0301 	and.w	r3, r3, #1
 8016212:	2b00      	cmp	r3, #0
 8016214:	d004      	beq.n	8016220 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	2201      	movs	r2, #1
 801621a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801621c:	2301      	movs	r3, #1
 801621e:	e0a6      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	4a58      	ldr	r2, [pc, #352]	@ (8016384 <SDMMC_GetCmdResp1+0x1dc>)
 8016224:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016226:	68f8      	ldr	r0, [r7, #12]
 8016228:	f7ff fcf6 	bl	8015c18 <SDMMC_GetCommandResponse>
 801622c:	4603      	mov	r3, r0
 801622e:	461a      	mov	r2, r3
 8016230:	7afb      	ldrb	r3, [r7, #11]
 8016232:	4293      	cmp	r3, r2
 8016234:	d001      	beq.n	801623a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016236:	2301      	movs	r3, #1
 8016238:	e099      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801623a:	2100      	movs	r1, #0
 801623c:	68f8      	ldr	r0, [r7, #12]
 801623e:	f7ff fcf8 	bl	8015c32 <SDMMC_GetResponse>
 8016242:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8016244:	697a      	ldr	r2, [r7, #20]
 8016246:	4b50      	ldr	r3, [pc, #320]	@ (8016388 <SDMMC_GetCmdResp1+0x1e0>)
 8016248:	4013      	ands	r3, r2
 801624a:	2b00      	cmp	r3, #0
 801624c:	d101      	bne.n	8016252 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801624e:	2300      	movs	r3, #0
 8016250:	e08d      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	2b00      	cmp	r3, #0
 8016256:	da02      	bge.n	801625e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8016258:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801625c:	e087      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801625e:	697b      	ldr	r3, [r7, #20]
 8016260:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8016264:	2b00      	cmp	r3, #0
 8016266:	d001      	beq.n	801626c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8016268:	2340      	movs	r3, #64	@ 0x40
 801626a:	e080      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801626c:	697b      	ldr	r3, [r7, #20]
 801626e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016272:	2b00      	cmp	r3, #0
 8016274:	d001      	beq.n	801627a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8016276:	2380      	movs	r3, #128	@ 0x80
 8016278:	e079      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801627a:	697b      	ldr	r3, [r7, #20]
 801627c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016280:	2b00      	cmp	r3, #0
 8016282:	d002      	beq.n	801628a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8016284:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016288:	e071      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801628a:	697b      	ldr	r3, [r7, #20]
 801628c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016290:	2b00      	cmp	r3, #0
 8016292:	d002      	beq.n	801629a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8016294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016298:	e069      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d002      	beq.n	80162aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80162a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80162a8:	e061      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d002      	beq.n	80162ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80162b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80162b8:	e059      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80162ba:	697b      	ldr	r3, [r7, #20]
 80162bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d002      	beq.n	80162ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80162c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80162c8:	e051      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80162ca:	697b      	ldr	r3, [r7, #20]
 80162cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d002      	beq.n	80162da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80162d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80162d8:	e049      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d002      	beq.n	80162ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80162e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80162e8:	e041      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d002      	beq.n	80162fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80162f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80162f8:	e039      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80162fa:	697b      	ldr	r3, [r7, #20]
 80162fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8016300:	2b00      	cmp	r3, #0
 8016302:	d002      	beq.n	801630a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8016304:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8016308:	e031      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801630a:	697b      	ldr	r3, [r7, #20]
 801630c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016310:	2b00      	cmp	r3, #0
 8016312:	d002      	beq.n	801631a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016314:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8016318:	e029      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016320:	2b00      	cmp	r3, #0
 8016322:	d002      	beq.n	801632a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8016324:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016328:	e021      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016330:	2b00      	cmp	r3, #0
 8016332:	d002      	beq.n	801633a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8016334:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016338:	e019      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016340:	2b00      	cmp	r3, #0
 8016342:	d002      	beq.n	801634a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8016344:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8016348:	e011      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016350:	2b00      	cmp	r3, #0
 8016352:	d002      	beq.n	801635a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8016354:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8016358:	e009      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801635a:	697b      	ldr	r3, [r7, #20]
 801635c:	f003 0308 	and.w	r3, r3, #8
 8016360:	2b00      	cmp	r3, #0
 8016362:	d002      	beq.n	801636a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8016364:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8016368:	e001      	b.n	801636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801636a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801636e:	4618      	mov	r0, r3
 8016370:	3720      	adds	r7, #32
 8016372:	46bd      	mov	sp, r7
 8016374:	bd80      	pop	{r7, pc}
 8016376:	bf00      	nop
 8016378:	2400014c 	.word	0x2400014c
 801637c:	10624dd3 	.word	0x10624dd3
 8016380:	00200045 	.word	0x00200045
 8016384:	002000c5 	.word	0x002000c5
 8016388:	fdffe008 	.word	0xfdffe008

0801638c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801638c:	b480      	push	{r7}
 801638e:	b085      	sub	sp, #20
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8016394:	4b1f      	ldr	r3, [pc, #124]	@ (8016414 <SDMMC_GetCmdResp2+0x88>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	4a1f      	ldr	r2, [pc, #124]	@ (8016418 <SDMMC_GetCmdResp2+0x8c>)
 801639a:	fba2 2303 	umull	r2, r3, r2, r3
 801639e:	0a5b      	lsrs	r3, r3, #9
 80163a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80163a4:	fb02 f303 	mul.w	r3, r2, r3
 80163a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	1e5a      	subs	r2, r3, #1
 80163ae:	60fa      	str	r2, [r7, #12]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d102      	bne.n	80163ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80163b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80163b8:	e026      	b.n	8016408 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80163be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80163c0:	68bb      	ldr	r3, [r7, #8]
 80163c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d0ef      	beq.n	80163aa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80163ca:	68bb      	ldr	r3, [r7, #8]
 80163cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d1ea      	bne.n	80163aa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80163d8:	f003 0304 	and.w	r3, r3, #4
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d004      	beq.n	80163ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2204      	movs	r2, #4
 80163e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80163e6:	2304      	movs	r3, #4
 80163e8:	e00e      	b.n	8016408 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80163ee:	f003 0301 	and.w	r3, r3, #1
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d004      	beq.n	8016400 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	2201      	movs	r2, #1
 80163fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80163fc:	2301      	movs	r3, #1
 80163fe:	e003      	b.n	8016408 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	4a06      	ldr	r2, [pc, #24]	@ (801641c <SDMMC_GetCmdResp2+0x90>)
 8016404:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8016406:	2300      	movs	r3, #0
}
 8016408:	4618      	mov	r0, r3
 801640a:	3714      	adds	r7, #20
 801640c:	46bd      	mov	sp, r7
 801640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016412:	4770      	bx	lr
 8016414:	2400014c 	.word	0x2400014c
 8016418:	10624dd3 	.word	0x10624dd3
 801641c:	002000c5 	.word	0x002000c5

08016420 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8016420:	b480      	push	{r7}
 8016422:	b085      	sub	sp, #20
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8016428:	4b1a      	ldr	r3, [pc, #104]	@ (8016494 <SDMMC_GetCmdResp3+0x74>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	4a1a      	ldr	r2, [pc, #104]	@ (8016498 <SDMMC_GetCmdResp3+0x78>)
 801642e:	fba2 2303 	umull	r2, r3, r2, r3
 8016432:	0a5b      	lsrs	r3, r3, #9
 8016434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016438:	fb02 f303 	mul.w	r3, r2, r3
 801643c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	1e5a      	subs	r2, r3, #1
 8016442:	60fa      	str	r2, [r7, #12]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d102      	bne.n	801644e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016448:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801644c:	e01b      	b.n	8016486 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016452:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801645a:	2b00      	cmp	r3, #0
 801645c:	d0ef      	beq.n	801643e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801645e:	68bb      	ldr	r3, [r7, #8]
 8016460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016464:	2b00      	cmp	r3, #0
 8016466:	d1ea      	bne.n	801643e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801646c:	f003 0304 	and.w	r3, r3, #4
 8016470:	2b00      	cmp	r3, #0
 8016472:	d004      	beq.n	801647e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2204      	movs	r2, #4
 8016478:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801647a:	2304      	movs	r3, #4
 801647c:	e003      	b.n	8016486 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	4a06      	ldr	r2, [pc, #24]	@ (801649c <SDMMC_GetCmdResp3+0x7c>)
 8016482:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8016484:	2300      	movs	r3, #0
}
 8016486:	4618      	mov	r0, r3
 8016488:	3714      	adds	r7, #20
 801648a:	46bd      	mov	sp, r7
 801648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016490:	4770      	bx	lr
 8016492:	bf00      	nop
 8016494:	2400014c 	.word	0x2400014c
 8016498:	10624dd3 	.word	0x10624dd3
 801649c:	002000c5 	.word	0x002000c5

080164a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b088      	sub	sp, #32
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	60f8      	str	r0, [r7, #12]
 80164a8:	460b      	mov	r3, r1
 80164aa:	607a      	str	r2, [r7, #4]
 80164ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80164ae:	4b35      	ldr	r3, [pc, #212]	@ (8016584 <SDMMC_GetCmdResp6+0xe4>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	4a35      	ldr	r2, [pc, #212]	@ (8016588 <SDMMC_GetCmdResp6+0xe8>)
 80164b4:	fba2 2303 	umull	r2, r3, r2, r3
 80164b8:	0a5b      	lsrs	r3, r3, #9
 80164ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80164be:	fb02 f303 	mul.w	r3, r2, r3
 80164c2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80164c4:	69fb      	ldr	r3, [r7, #28]
 80164c6:	1e5a      	subs	r2, r3, #1
 80164c8:	61fa      	str	r2, [r7, #28]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d102      	bne.n	80164d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80164ce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80164d2:	e052      	b.n	801657a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80164d8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80164da:	69bb      	ldr	r3, [r7, #24]
 80164dc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d0ef      	beq.n	80164c4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80164e4:	69bb      	ldr	r3, [r7, #24]
 80164e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d1ea      	bne.n	80164c4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80164f2:	f003 0304 	and.w	r3, r3, #4
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d004      	beq.n	8016504 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	2204      	movs	r2, #4
 80164fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016500:	2304      	movs	r3, #4
 8016502:	e03a      	b.n	801657a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016508:	f003 0301 	and.w	r3, r3, #1
 801650c:	2b00      	cmp	r3, #0
 801650e:	d004      	beq.n	801651a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	2201      	movs	r2, #1
 8016514:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016516:	2301      	movs	r3, #1
 8016518:	e02f      	b.n	801657a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801651a:	68f8      	ldr	r0, [r7, #12]
 801651c:	f7ff fb7c 	bl	8015c18 <SDMMC_GetCommandResponse>
 8016520:	4603      	mov	r3, r0
 8016522:	461a      	mov	r2, r3
 8016524:	7afb      	ldrb	r3, [r7, #11]
 8016526:	4293      	cmp	r3, r2
 8016528:	d001      	beq.n	801652e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801652a:	2301      	movs	r3, #1
 801652c:	e025      	b.n	801657a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	4a16      	ldr	r2, [pc, #88]	@ (801658c <SDMMC_GetCmdResp6+0xec>)
 8016532:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8016534:	2100      	movs	r1, #0
 8016536:	68f8      	ldr	r0, [r7, #12]
 8016538:	f7ff fb7b 	bl	8015c32 <SDMMC_GetResponse>
 801653c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8016544:	2b00      	cmp	r3, #0
 8016546:	d106      	bne.n	8016556 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	0c1b      	lsrs	r3, r3, #16
 801654c:	b29a      	uxth	r2, r3
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8016552:	2300      	movs	r3, #0
 8016554:	e011      	b.n	801657a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801655c:	2b00      	cmp	r3, #0
 801655e:	d002      	beq.n	8016566 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8016560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8016564:	e009      	b.n	801657a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8016566:	697b      	ldr	r3, [r7, #20]
 8016568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801656c:	2b00      	cmp	r3, #0
 801656e:	d002      	beq.n	8016576 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016574:	e001      	b.n	801657a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8016576:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801657a:	4618      	mov	r0, r3
 801657c:	3720      	adds	r7, #32
 801657e:	46bd      	mov	sp, r7
 8016580:	bd80      	pop	{r7, pc}
 8016582:	bf00      	nop
 8016584:	2400014c 	.word	0x2400014c
 8016588:	10624dd3 	.word	0x10624dd3
 801658c:	002000c5 	.word	0x002000c5

08016590 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8016590:	b480      	push	{r7}
 8016592:	b085      	sub	sp, #20
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8016598:	4b22      	ldr	r3, [pc, #136]	@ (8016624 <SDMMC_GetCmdResp7+0x94>)
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	4a22      	ldr	r2, [pc, #136]	@ (8016628 <SDMMC_GetCmdResp7+0x98>)
 801659e:	fba2 2303 	umull	r2, r3, r2, r3
 80165a2:	0a5b      	lsrs	r3, r3, #9
 80165a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80165a8:	fb02 f303 	mul.w	r3, r2, r3
 80165ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	1e5a      	subs	r2, r3, #1
 80165b2:	60fa      	str	r2, [r7, #12]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d102      	bne.n	80165be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80165b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80165bc:	e02c      	b.n	8016618 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80165c2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80165c4:	68bb      	ldr	r3, [r7, #8]
 80165c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d0ef      	beq.n	80165ae <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d1ea      	bne.n	80165ae <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80165dc:	f003 0304 	and.w	r3, r3, #4
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d004      	beq.n	80165ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2204      	movs	r2, #4
 80165e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80165ea:	2304      	movs	r3, #4
 80165ec:	e014      	b.n	8016618 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80165f2:	f003 0301 	and.w	r3, r3, #1
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d004      	beq.n	8016604 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2201      	movs	r2, #1
 80165fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016600:	2301      	movs	r3, #1
 8016602:	e009      	b.n	8016618 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801660c:	2b00      	cmp	r3, #0
 801660e:	d002      	beq.n	8016616 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2240      	movs	r2, #64	@ 0x40
 8016614:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8016616:	2300      	movs	r3, #0

}
 8016618:	4618      	mov	r0, r3
 801661a:	3714      	adds	r7, #20
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr
 8016624:	2400014c 	.word	0x2400014c
 8016628:	10624dd3 	.word	0x10624dd3

0801662c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801662c:	b480      	push	{r7}
 801662e:	b085      	sub	sp, #20
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8016634:	4b11      	ldr	r3, [pc, #68]	@ (801667c <SDMMC_GetCmdError+0x50>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	4a11      	ldr	r2, [pc, #68]	@ (8016680 <SDMMC_GetCmdError+0x54>)
 801663a:	fba2 2303 	umull	r2, r3, r2, r3
 801663e:	0a5b      	lsrs	r3, r3, #9
 8016640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016644:	fb02 f303 	mul.w	r3, r2, r3
 8016648:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	1e5a      	subs	r2, r3, #1
 801664e:	60fa      	str	r2, [r7, #12]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d102      	bne.n	801665a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016654:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016658:	e009      	b.n	801666e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801665e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016662:	2b00      	cmp	r3, #0
 8016664:	d0f1      	beq.n	801664a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	4a06      	ldr	r2, [pc, #24]	@ (8016684 <SDMMC_GetCmdError+0x58>)
 801666a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801666c:	2300      	movs	r3, #0
}
 801666e:	4618      	mov	r0, r3
 8016670:	3714      	adds	r7, #20
 8016672:	46bd      	mov	sp, r7
 8016674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016678:	4770      	bx	lr
 801667a:	bf00      	nop
 801667c:	2400014c 	.word	0x2400014c
 8016680:	10624dd3 	.word	0x10624dd3
 8016684:	002000c5 	.word	0x002000c5

08016688 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801668c:	4904      	ldr	r1, [pc, #16]	@ (80166a0 <MX_FATFS_Init+0x18>)
 801668e:	4805      	ldr	r0, [pc, #20]	@ (80166a4 <MX_FATFS_Init+0x1c>)
 8016690:	f000 f9e4 	bl	8016a5c <FATFS_LinkDriver>
 8016694:	4603      	mov	r3, r0
 8016696:	461a      	mov	r2, r3
 8016698:	4b03      	ldr	r3, [pc, #12]	@ (80166a8 <MX_FATFS_Init+0x20>)
 801669a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801669c:	bf00      	nop
 801669e:	bd80      	pop	{r7, pc}
 80166a0:	2400104c 	.word	0x2400104c
 80166a4:	0801b2f4 	.word	0x0801b2f4
 80166a8:	24001048 	.word	0x24001048

080166ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b082      	sub	sp, #8
 80166b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80166b2:	2300      	movs	r3, #0
 80166b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80166b6:	f000 f879 	bl	80167ac <BSP_SD_IsDetected>
 80166ba:	4603      	mov	r3, r0
 80166bc:	2b01      	cmp	r3, #1
 80166be:	d001      	beq.n	80166c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80166c0:	2302      	movs	r3, #2
 80166c2:	e012      	b.n	80166ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80166c4:	480b      	ldr	r0, [pc, #44]	@ (80166f4 <BSP_SD_Init+0x48>)
 80166c6:	f7f8 fb49 	bl	800ed5c <HAL_SD_Init>
 80166ca:	4603      	mov	r3, r0
 80166cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80166ce:	79fb      	ldrb	r3, [r7, #7]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d109      	bne.n	80166e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80166d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80166d8:	4806      	ldr	r0, [pc, #24]	@ (80166f4 <BSP_SD_Init+0x48>)
 80166da:	f7f9 fa05 	bl	800fae8 <HAL_SD_ConfigWideBusOperation>
 80166de:	4603      	mov	r3, r0
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d001      	beq.n	80166e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80166e4:	2301      	movs	r3, #1
 80166e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80166e8:	79fb      	ldrb	r3, [r7, #7]
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	24000858 	.word	0x24000858

080166f8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b088      	sub	sp, #32
 80166fc:	af02      	add	r7, sp, #8
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	60b9      	str	r1, [r7, #8]
 8016702:	607a      	str	r2, [r7, #4]
 8016704:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8016706:	2300      	movs	r3, #0
 8016708:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	9300      	str	r3, [sp, #0]
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	68ba      	ldr	r2, [r7, #8]
 8016712:	68f9      	ldr	r1, [r7, #12]
 8016714:	4806      	ldr	r0, [pc, #24]	@ (8016730 <BSP_SD_ReadBlocks+0x38>)
 8016716:	f7f8 fc41 	bl	800ef9c <HAL_SD_ReadBlocks>
 801671a:	4603      	mov	r3, r0
 801671c:	2b00      	cmp	r3, #0
 801671e:	d001      	beq.n	8016724 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8016720:	2301      	movs	r3, #1
 8016722:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8016724:	7dfb      	ldrb	r3, [r7, #23]
}
 8016726:	4618      	mov	r0, r3
 8016728:	3718      	adds	r7, #24
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}
 801672e:	bf00      	nop
 8016730:	24000858 	.word	0x24000858

08016734 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8016734:	b580      	push	{r7, lr}
 8016736:	b088      	sub	sp, #32
 8016738:	af02      	add	r7, sp, #8
 801673a:	60f8      	str	r0, [r7, #12]
 801673c:	60b9      	str	r1, [r7, #8]
 801673e:	607a      	str	r2, [r7, #4]
 8016740:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8016742:	2300      	movs	r3, #0
 8016744:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8016746:	683b      	ldr	r3, [r7, #0]
 8016748:	9300      	str	r3, [sp, #0]
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	68ba      	ldr	r2, [r7, #8]
 801674e:	68f9      	ldr	r1, [r7, #12]
 8016750:	4806      	ldr	r0, [pc, #24]	@ (801676c <BSP_SD_WriteBlocks+0x38>)
 8016752:	f7f8 fdad 	bl	800f2b0 <HAL_SD_WriteBlocks>
 8016756:	4603      	mov	r3, r0
 8016758:	2b00      	cmp	r3, #0
 801675a:	d001      	beq.n	8016760 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801675c:	2301      	movs	r3, #1
 801675e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8016760:	7dfb      	ldrb	r3, [r7, #23]
}
 8016762:	4618      	mov	r0, r3
 8016764:	3718      	adds	r7, #24
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	24000858 	.word	0x24000858

08016770 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8016774:	4805      	ldr	r0, [pc, #20]	@ (801678c <BSP_SD_GetCardState+0x1c>)
 8016776:	f7f9 fac9 	bl	800fd0c <HAL_SD_GetCardState>
 801677a:	4603      	mov	r3, r0
 801677c:	2b04      	cmp	r3, #4
 801677e:	bf14      	ite	ne
 8016780:	2301      	movne	r3, #1
 8016782:	2300      	moveq	r3, #0
 8016784:	b2db      	uxtb	r3, r3
}
 8016786:	4618      	mov	r0, r3
 8016788:	bd80      	pop	{r7, pc}
 801678a:	bf00      	nop
 801678c:	24000858 	.word	0x24000858

08016790 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8016798:	6879      	ldr	r1, [r7, #4]
 801679a:	4803      	ldr	r0, [pc, #12]	@ (80167a8 <BSP_SD_GetCardInfo+0x18>)
 801679c:	f7f9 f978 	bl	800fa90 <HAL_SD_GetCardInfo>
}
 80167a0:	bf00      	nop
 80167a2:	3708      	adds	r7, #8
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	24000858 	.word	0x24000858

080167ac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80167b2:	2301      	movs	r3, #1
 80167b4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80167b6:	f000 f80b 	bl	80167d0 <BSP_PlatformIsDetected>
 80167ba:	4603      	mov	r3, r0
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d101      	bne.n	80167c4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80167c0:	2300      	movs	r3, #0
 80167c2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80167c4:	79fb      	ldrb	r3, [r7, #7]
 80167c6:	b2db      	uxtb	r3, r3
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	3708      	adds	r7, #8
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80167d6:	2301      	movs	r3, #1
 80167d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80167da:	2180      	movs	r1, #128	@ 0x80
 80167dc:	4806      	ldr	r0, [pc, #24]	@ (80167f8 <BSP_PlatformIsDetected+0x28>)
 80167de:	f7f3 f8f5 	bl	80099cc <HAL_GPIO_ReadPin>
 80167e2:	4603      	mov	r3, r0
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d001      	beq.n	80167ec <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80167e8:	2300      	movs	r3, #0
 80167ea:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80167ec:	79fb      	ldrb	r3, [r7, #7]
}
 80167ee:	4618      	mov	r0, r3
 80167f0:	3708      	adds	r7, #8
 80167f2:	46bd      	mov	sp, r7
 80167f4:	bd80      	pop	{r7, pc}
 80167f6:	bf00      	nop
 80167f8:	58020800 	.word	0x58020800

080167fc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	4603      	mov	r3, r0
 8016804:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8016806:	4b0b      	ldr	r3, [pc, #44]	@ (8016834 <SD_CheckStatus+0x38>)
 8016808:	2201      	movs	r2, #1
 801680a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801680c:	f7ff ffb0 	bl	8016770 <BSP_SD_GetCardState>
 8016810:	4603      	mov	r3, r0
 8016812:	2b00      	cmp	r3, #0
 8016814:	d107      	bne.n	8016826 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8016816:	4b07      	ldr	r3, [pc, #28]	@ (8016834 <SD_CheckStatus+0x38>)
 8016818:	781b      	ldrb	r3, [r3, #0]
 801681a:	b2db      	uxtb	r3, r3
 801681c:	f023 0301 	bic.w	r3, r3, #1
 8016820:	b2da      	uxtb	r2, r3
 8016822:	4b04      	ldr	r3, [pc, #16]	@ (8016834 <SD_CheckStatus+0x38>)
 8016824:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8016826:	4b03      	ldr	r3, [pc, #12]	@ (8016834 <SD_CheckStatus+0x38>)
 8016828:	781b      	ldrb	r3, [r3, #0]
 801682a:	b2db      	uxtb	r3, r3
}
 801682c:	4618      	mov	r0, r3
 801682e:	3708      	adds	r7, #8
 8016830:	46bd      	mov	sp, r7
 8016832:	bd80      	pop	{r7, pc}
 8016834:	24000189 	.word	0x24000189

08016838 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	4603      	mov	r3, r0
 8016840:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8016842:	4b0b      	ldr	r3, [pc, #44]	@ (8016870 <SD_initialize+0x38>)
 8016844:	2201      	movs	r2, #1
 8016846:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8016848:	f7ff ff30 	bl	80166ac <BSP_SD_Init>
 801684c:	4603      	mov	r3, r0
 801684e:	2b00      	cmp	r3, #0
 8016850:	d107      	bne.n	8016862 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8016852:	79fb      	ldrb	r3, [r7, #7]
 8016854:	4618      	mov	r0, r3
 8016856:	f7ff ffd1 	bl	80167fc <SD_CheckStatus>
 801685a:	4603      	mov	r3, r0
 801685c:	461a      	mov	r2, r3
 801685e:	4b04      	ldr	r3, [pc, #16]	@ (8016870 <SD_initialize+0x38>)
 8016860:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8016862:	4b03      	ldr	r3, [pc, #12]	@ (8016870 <SD_initialize+0x38>)
 8016864:	781b      	ldrb	r3, [r3, #0]
 8016866:	b2db      	uxtb	r3, r3
}
 8016868:	4618      	mov	r0, r3
 801686a:	3708      	adds	r7, #8
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}
 8016870:	24000189 	.word	0x24000189

08016874 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b082      	sub	sp, #8
 8016878:	af00      	add	r7, sp, #0
 801687a:	4603      	mov	r3, r0
 801687c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801687e:	79fb      	ldrb	r3, [r7, #7]
 8016880:	4618      	mov	r0, r3
 8016882:	f7ff ffbb 	bl	80167fc <SD_CheckStatus>
 8016886:	4603      	mov	r3, r0
}
 8016888:	4618      	mov	r0, r3
 801688a:	3708      	adds	r7, #8
 801688c:	46bd      	mov	sp, r7
 801688e:	bd80      	pop	{r7, pc}

08016890 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b086      	sub	sp, #24
 8016894:	af00      	add	r7, sp, #0
 8016896:	60b9      	str	r1, [r7, #8]
 8016898:	607a      	str	r2, [r7, #4]
 801689a:	603b      	str	r3, [r7, #0]
 801689c:	4603      	mov	r3, r0
 801689e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80168a0:	2301      	movs	r3, #1
 80168a2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80168a4:	f04f 33ff 	mov.w	r3, #4294967295
 80168a8:	683a      	ldr	r2, [r7, #0]
 80168aa:	6879      	ldr	r1, [r7, #4]
 80168ac:	68b8      	ldr	r0, [r7, #8]
 80168ae:	f7ff ff23 	bl	80166f8 <BSP_SD_ReadBlocks>
 80168b2:	4603      	mov	r3, r0
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d107      	bne.n	80168c8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80168b8:	bf00      	nop
 80168ba:	f7ff ff59 	bl	8016770 <BSP_SD_GetCardState>
 80168be:	4603      	mov	r3, r0
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d1fa      	bne.n	80168ba <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80168c4:	2300      	movs	r3, #0
 80168c6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80168c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	3718      	adds	r7, #24
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}

080168d2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80168d2:	b580      	push	{r7, lr}
 80168d4:	b086      	sub	sp, #24
 80168d6:	af00      	add	r7, sp, #0
 80168d8:	60b9      	str	r1, [r7, #8]
 80168da:	607a      	str	r2, [r7, #4]
 80168dc:	603b      	str	r3, [r7, #0]
 80168de:	4603      	mov	r3, r0
 80168e0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80168e2:	2301      	movs	r3, #1
 80168e4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80168e6:	f04f 33ff 	mov.w	r3, #4294967295
 80168ea:	683a      	ldr	r2, [r7, #0]
 80168ec:	6879      	ldr	r1, [r7, #4]
 80168ee:	68b8      	ldr	r0, [r7, #8]
 80168f0:	f7ff ff20 	bl	8016734 <BSP_SD_WriteBlocks>
 80168f4:	4603      	mov	r3, r0
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d107      	bne.n	801690a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80168fa:	bf00      	nop
 80168fc:	f7ff ff38 	bl	8016770 <BSP_SD_GetCardState>
 8016900:	4603      	mov	r3, r0
 8016902:	2b00      	cmp	r3, #0
 8016904:	d1fa      	bne.n	80168fc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8016906:	2300      	movs	r3, #0
 8016908:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801690a:	7dfb      	ldrb	r3, [r7, #23]
}
 801690c:	4618      	mov	r0, r3
 801690e:	3718      	adds	r7, #24
 8016910:	46bd      	mov	sp, r7
 8016912:	bd80      	pop	{r7, pc}

08016914 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b08c      	sub	sp, #48	@ 0x30
 8016918:	af00      	add	r7, sp, #0
 801691a:	4603      	mov	r3, r0
 801691c:	603a      	str	r2, [r7, #0]
 801691e:	71fb      	strb	r3, [r7, #7]
 8016920:	460b      	mov	r3, r1
 8016922:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8016924:	2301      	movs	r3, #1
 8016926:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801692a:	4b25      	ldr	r3, [pc, #148]	@ (80169c0 <SD_ioctl+0xac>)
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	b2db      	uxtb	r3, r3
 8016930:	f003 0301 	and.w	r3, r3, #1
 8016934:	2b00      	cmp	r3, #0
 8016936:	d001      	beq.n	801693c <SD_ioctl+0x28>
 8016938:	2303      	movs	r3, #3
 801693a:	e03c      	b.n	80169b6 <SD_ioctl+0xa2>

  switch (cmd)
 801693c:	79bb      	ldrb	r3, [r7, #6]
 801693e:	2b03      	cmp	r3, #3
 8016940:	d834      	bhi.n	80169ac <SD_ioctl+0x98>
 8016942:	a201      	add	r2, pc, #4	@ (adr r2, 8016948 <SD_ioctl+0x34>)
 8016944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016948:	08016959 	.word	0x08016959
 801694c:	08016961 	.word	0x08016961
 8016950:	08016979 	.word	0x08016979
 8016954:	08016993 	.word	0x08016993
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8016958:	2300      	movs	r3, #0
 801695a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801695e:	e028      	b.n	80169b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8016960:	f107 0308 	add.w	r3, r7, #8
 8016964:	4618      	mov	r0, r3
 8016966:	f7ff ff13 	bl	8016790 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801696a:	6a3a      	ldr	r2, [r7, #32]
 801696c:	683b      	ldr	r3, [r7, #0]
 801696e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016970:	2300      	movs	r3, #0
 8016972:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8016976:	e01c      	b.n	80169b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016978:	f107 0308 	add.w	r3, r7, #8
 801697c:	4618      	mov	r0, r3
 801697e:	f7ff ff07 	bl	8016790 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8016982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016984:	b29a      	uxth	r2, r3
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801698a:	2300      	movs	r3, #0
 801698c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8016990:	e00f      	b.n	80169b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016992:	f107 0308 	add.w	r3, r7, #8
 8016996:	4618      	mov	r0, r3
 8016998:	f7ff fefa 	bl	8016790 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801699e:	0a5a      	lsrs	r2, r3, #9
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80169a4:	2300      	movs	r3, #0
 80169a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80169aa:	e002      	b.n	80169b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80169ac:	2304      	movs	r3, #4
 80169ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80169b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80169b6:	4618      	mov	r0, r3
 80169b8:	3730      	adds	r7, #48	@ 0x30
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd80      	pop	{r7, pc}
 80169be:	bf00      	nop
 80169c0:	24000189 	.word	0x24000189

080169c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80169c4:	b480      	push	{r7}
 80169c6:	b087      	sub	sp, #28
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	60f8      	str	r0, [r7, #12]
 80169cc:	60b9      	str	r1, [r7, #8]
 80169ce:	4613      	mov	r3, r2
 80169d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80169d2:	2301      	movs	r3, #1
 80169d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80169d6:	2300      	movs	r3, #0
 80169d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80169da:	4b1f      	ldr	r3, [pc, #124]	@ (8016a58 <FATFS_LinkDriverEx+0x94>)
 80169dc:	7a5b      	ldrb	r3, [r3, #9]
 80169de:	b2db      	uxtb	r3, r3
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d131      	bne.n	8016a48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80169e4:	4b1c      	ldr	r3, [pc, #112]	@ (8016a58 <FATFS_LinkDriverEx+0x94>)
 80169e6:	7a5b      	ldrb	r3, [r3, #9]
 80169e8:	b2db      	uxtb	r3, r3
 80169ea:	461a      	mov	r2, r3
 80169ec:	4b1a      	ldr	r3, [pc, #104]	@ (8016a58 <FATFS_LinkDriverEx+0x94>)
 80169ee:	2100      	movs	r1, #0
 80169f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80169f2:	4b19      	ldr	r3, [pc, #100]	@ (8016a58 <FATFS_LinkDriverEx+0x94>)
 80169f4:	7a5b      	ldrb	r3, [r3, #9]
 80169f6:	b2db      	uxtb	r3, r3
 80169f8:	4a17      	ldr	r2, [pc, #92]	@ (8016a58 <FATFS_LinkDriverEx+0x94>)
 80169fa:	009b      	lsls	r3, r3, #2
 80169fc:	4413      	add	r3, r2
 80169fe:	68fa      	ldr	r2, [r7, #12]
 8016a00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016a02:	4b15      	ldr	r3, [pc, #84]	@ (8016a58 <FATFS_LinkDriverEx+0x94>)
 8016a04:	7a5b      	ldrb	r3, [r3, #9]
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	461a      	mov	r2, r3
 8016a0a:	4b13      	ldr	r3, [pc, #76]	@ (8016a58 <FATFS_LinkDriverEx+0x94>)
 8016a0c:	4413      	add	r3, r2
 8016a0e:	79fa      	ldrb	r2, [r7, #7]
 8016a10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016a12:	4b11      	ldr	r3, [pc, #68]	@ (8016a58 <FATFS_LinkDriverEx+0x94>)
 8016a14:	7a5b      	ldrb	r3, [r3, #9]
 8016a16:	b2db      	uxtb	r3, r3
 8016a18:	1c5a      	adds	r2, r3, #1
 8016a1a:	b2d1      	uxtb	r1, r2
 8016a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8016a58 <FATFS_LinkDriverEx+0x94>)
 8016a1e:	7251      	strb	r1, [r2, #9]
 8016a20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016a22:	7dbb      	ldrb	r3, [r7, #22]
 8016a24:	3330      	adds	r3, #48	@ 0x30
 8016a26:	b2da      	uxtb	r2, r3
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	3301      	adds	r3, #1
 8016a30:	223a      	movs	r2, #58	@ 0x3a
 8016a32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016a34:	68bb      	ldr	r3, [r7, #8]
 8016a36:	3302      	adds	r3, #2
 8016a38:	222f      	movs	r2, #47	@ 0x2f
 8016a3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	3303      	adds	r3, #3
 8016a40:	2200      	movs	r2, #0
 8016a42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016a44:	2300      	movs	r3, #0
 8016a46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	371c      	adds	r7, #28
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a54:	4770      	bx	lr
 8016a56:	bf00      	nop
 8016a58:	24001050 	.word	0x24001050

08016a5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b082      	sub	sp, #8
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016a66:	2200      	movs	r2, #0
 8016a68:	6839      	ldr	r1, [r7, #0]
 8016a6a:	6878      	ldr	r0, [r7, #4]
 8016a6c:	f7ff ffaa 	bl	80169c4 <FATFS_LinkDriverEx>
 8016a70:	4603      	mov	r3, r0
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	3708      	adds	r7, #8
 8016a76:	46bd      	mov	sp, r7
 8016a78:	bd80      	pop	{r7, pc}

08016a7a <__cvt>:
 8016a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a7c:	ed2d 8b02 	vpush	{d8}
 8016a80:	eeb0 8b40 	vmov.f64	d8, d0
 8016a84:	b085      	sub	sp, #20
 8016a86:	4617      	mov	r7, r2
 8016a88:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8016a8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016a8c:	ee18 2a90 	vmov	r2, s17
 8016a90:	f025 0520 	bic.w	r5, r5, #32
 8016a94:	2a00      	cmp	r2, #0
 8016a96:	bfb6      	itet	lt
 8016a98:	222d      	movlt	r2, #45	@ 0x2d
 8016a9a:	2200      	movge	r2, #0
 8016a9c:	eeb1 8b40 	vneglt.f64	d8, d0
 8016aa0:	2d46      	cmp	r5, #70	@ 0x46
 8016aa2:	460c      	mov	r4, r1
 8016aa4:	701a      	strb	r2, [r3, #0]
 8016aa6:	d004      	beq.n	8016ab2 <__cvt+0x38>
 8016aa8:	2d45      	cmp	r5, #69	@ 0x45
 8016aaa:	d100      	bne.n	8016aae <__cvt+0x34>
 8016aac:	3401      	adds	r4, #1
 8016aae:	2102      	movs	r1, #2
 8016ab0:	e000      	b.n	8016ab4 <__cvt+0x3a>
 8016ab2:	2103      	movs	r1, #3
 8016ab4:	ab03      	add	r3, sp, #12
 8016ab6:	9301      	str	r3, [sp, #4]
 8016ab8:	ab02      	add	r3, sp, #8
 8016aba:	9300      	str	r3, [sp, #0]
 8016abc:	4622      	mov	r2, r4
 8016abe:	4633      	mov	r3, r6
 8016ac0:	eeb0 0b48 	vmov.f64	d0, d8
 8016ac4:	f001 f964 	bl	8017d90 <_dtoa_r>
 8016ac8:	2d47      	cmp	r5, #71	@ 0x47
 8016aca:	d114      	bne.n	8016af6 <__cvt+0x7c>
 8016acc:	07fb      	lsls	r3, r7, #31
 8016ace:	d50a      	bpl.n	8016ae6 <__cvt+0x6c>
 8016ad0:	1902      	adds	r2, r0, r4
 8016ad2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ada:	bf08      	it	eq
 8016adc:	9203      	streq	r2, [sp, #12]
 8016ade:	2130      	movs	r1, #48	@ 0x30
 8016ae0:	9b03      	ldr	r3, [sp, #12]
 8016ae2:	4293      	cmp	r3, r2
 8016ae4:	d319      	bcc.n	8016b1a <__cvt+0xa0>
 8016ae6:	9b03      	ldr	r3, [sp, #12]
 8016ae8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016aea:	1a1b      	subs	r3, r3, r0
 8016aec:	6013      	str	r3, [r2, #0]
 8016aee:	b005      	add	sp, #20
 8016af0:	ecbd 8b02 	vpop	{d8}
 8016af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016af6:	2d46      	cmp	r5, #70	@ 0x46
 8016af8:	eb00 0204 	add.w	r2, r0, r4
 8016afc:	d1e9      	bne.n	8016ad2 <__cvt+0x58>
 8016afe:	7803      	ldrb	r3, [r0, #0]
 8016b00:	2b30      	cmp	r3, #48	@ 0x30
 8016b02:	d107      	bne.n	8016b14 <__cvt+0x9a>
 8016b04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b0c:	bf1c      	itt	ne
 8016b0e:	f1c4 0401 	rsbne	r4, r4, #1
 8016b12:	6034      	strne	r4, [r6, #0]
 8016b14:	6833      	ldr	r3, [r6, #0]
 8016b16:	441a      	add	r2, r3
 8016b18:	e7db      	b.n	8016ad2 <__cvt+0x58>
 8016b1a:	1c5c      	adds	r4, r3, #1
 8016b1c:	9403      	str	r4, [sp, #12]
 8016b1e:	7019      	strb	r1, [r3, #0]
 8016b20:	e7de      	b.n	8016ae0 <__cvt+0x66>

08016b22 <__exponent>:
 8016b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b24:	2900      	cmp	r1, #0
 8016b26:	bfba      	itte	lt
 8016b28:	4249      	neglt	r1, r1
 8016b2a:	232d      	movlt	r3, #45	@ 0x2d
 8016b2c:	232b      	movge	r3, #43	@ 0x2b
 8016b2e:	2909      	cmp	r1, #9
 8016b30:	7002      	strb	r2, [r0, #0]
 8016b32:	7043      	strb	r3, [r0, #1]
 8016b34:	dd29      	ble.n	8016b8a <__exponent+0x68>
 8016b36:	f10d 0307 	add.w	r3, sp, #7
 8016b3a:	461d      	mov	r5, r3
 8016b3c:	270a      	movs	r7, #10
 8016b3e:	461a      	mov	r2, r3
 8016b40:	fbb1 f6f7 	udiv	r6, r1, r7
 8016b44:	fb07 1416 	mls	r4, r7, r6, r1
 8016b48:	3430      	adds	r4, #48	@ 0x30
 8016b4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8016b4e:	460c      	mov	r4, r1
 8016b50:	2c63      	cmp	r4, #99	@ 0x63
 8016b52:	f103 33ff 	add.w	r3, r3, #4294967295
 8016b56:	4631      	mov	r1, r6
 8016b58:	dcf1      	bgt.n	8016b3e <__exponent+0x1c>
 8016b5a:	3130      	adds	r1, #48	@ 0x30
 8016b5c:	1e94      	subs	r4, r2, #2
 8016b5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016b62:	1c41      	adds	r1, r0, #1
 8016b64:	4623      	mov	r3, r4
 8016b66:	42ab      	cmp	r3, r5
 8016b68:	d30a      	bcc.n	8016b80 <__exponent+0x5e>
 8016b6a:	f10d 0309 	add.w	r3, sp, #9
 8016b6e:	1a9b      	subs	r3, r3, r2
 8016b70:	42ac      	cmp	r4, r5
 8016b72:	bf88      	it	hi
 8016b74:	2300      	movhi	r3, #0
 8016b76:	3302      	adds	r3, #2
 8016b78:	4403      	add	r3, r0
 8016b7a:	1a18      	subs	r0, r3, r0
 8016b7c:	b003      	add	sp, #12
 8016b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016b84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8016b88:	e7ed      	b.n	8016b66 <__exponent+0x44>
 8016b8a:	2330      	movs	r3, #48	@ 0x30
 8016b8c:	3130      	adds	r1, #48	@ 0x30
 8016b8e:	7083      	strb	r3, [r0, #2]
 8016b90:	70c1      	strb	r1, [r0, #3]
 8016b92:	1d03      	adds	r3, r0, #4
 8016b94:	e7f1      	b.n	8016b7a <__exponent+0x58>
	...

08016b98 <_printf_float>:
 8016b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b9c:	b08d      	sub	sp, #52	@ 0x34
 8016b9e:	460c      	mov	r4, r1
 8016ba0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016ba4:	4616      	mov	r6, r2
 8016ba6:	461f      	mov	r7, r3
 8016ba8:	4605      	mov	r5, r0
 8016baa:	f000 ffdb 	bl	8017b64 <_localeconv_r>
 8016bae:	f8d0 b000 	ldr.w	fp, [r0]
 8016bb2:	4658      	mov	r0, fp
 8016bb4:	f7e9 fbfc 	bl	80003b0 <strlen>
 8016bb8:	2300      	movs	r3, #0
 8016bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8016bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8016bc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016bc4:	6822      	ldr	r2, [r4, #0]
 8016bc6:	9005      	str	r0, [sp, #20]
 8016bc8:	3307      	adds	r3, #7
 8016bca:	f023 0307 	bic.w	r3, r3, #7
 8016bce:	f103 0108 	add.w	r1, r3, #8
 8016bd2:	f8c8 1000 	str.w	r1, [r8]
 8016bd6:	ed93 0b00 	vldr	d0, [r3]
 8016bda:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8016e38 <_printf_float+0x2a0>
 8016bde:	eeb0 7bc0 	vabs.f64	d7, d0
 8016be2:	eeb4 7b46 	vcmp.f64	d7, d6
 8016be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8016bee:	dd24      	ble.n	8016c3a <_printf_float+0xa2>
 8016bf0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf8:	d502      	bpl.n	8016c00 <_printf_float+0x68>
 8016bfa:	232d      	movs	r3, #45	@ 0x2d
 8016bfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016c00:	498f      	ldr	r1, [pc, #572]	@ (8016e40 <_printf_float+0x2a8>)
 8016c02:	4b90      	ldr	r3, [pc, #576]	@ (8016e44 <_printf_float+0x2ac>)
 8016c04:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8016c08:	bf94      	ite	ls
 8016c0a:	4688      	movls	r8, r1
 8016c0c:	4698      	movhi	r8, r3
 8016c0e:	f022 0204 	bic.w	r2, r2, #4
 8016c12:	2303      	movs	r3, #3
 8016c14:	6123      	str	r3, [r4, #16]
 8016c16:	6022      	str	r2, [r4, #0]
 8016c18:	f04f 0a00 	mov.w	sl, #0
 8016c1c:	9700      	str	r7, [sp, #0]
 8016c1e:	4633      	mov	r3, r6
 8016c20:	aa0b      	add	r2, sp, #44	@ 0x2c
 8016c22:	4621      	mov	r1, r4
 8016c24:	4628      	mov	r0, r5
 8016c26:	f000 f9d1 	bl	8016fcc <_printf_common>
 8016c2a:	3001      	adds	r0, #1
 8016c2c:	f040 8089 	bne.w	8016d42 <_printf_float+0x1aa>
 8016c30:	f04f 30ff 	mov.w	r0, #4294967295
 8016c34:	b00d      	add	sp, #52	@ 0x34
 8016c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c3a:	eeb4 0b40 	vcmp.f64	d0, d0
 8016c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c42:	d709      	bvc.n	8016c58 <_printf_float+0xc0>
 8016c44:	ee10 3a90 	vmov	r3, s1
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	bfbc      	itt	lt
 8016c4c:	232d      	movlt	r3, #45	@ 0x2d
 8016c4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8016c52:	497d      	ldr	r1, [pc, #500]	@ (8016e48 <_printf_float+0x2b0>)
 8016c54:	4b7d      	ldr	r3, [pc, #500]	@ (8016e4c <_printf_float+0x2b4>)
 8016c56:	e7d5      	b.n	8016c04 <_printf_float+0x6c>
 8016c58:	6863      	ldr	r3, [r4, #4]
 8016c5a:	1c59      	adds	r1, r3, #1
 8016c5c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8016c60:	d139      	bne.n	8016cd6 <_printf_float+0x13e>
 8016c62:	2306      	movs	r3, #6
 8016c64:	6063      	str	r3, [r4, #4]
 8016c66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	6022      	str	r2, [r4, #0]
 8016c6e:	9303      	str	r3, [sp, #12]
 8016c70:	ab0a      	add	r3, sp, #40	@ 0x28
 8016c72:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8016c76:	ab09      	add	r3, sp, #36	@ 0x24
 8016c78:	9300      	str	r3, [sp, #0]
 8016c7a:	6861      	ldr	r1, [r4, #4]
 8016c7c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8016c80:	4628      	mov	r0, r5
 8016c82:	f7ff fefa 	bl	8016a7a <__cvt>
 8016c86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016c8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016c8c:	4680      	mov	r8, r0
 8016c8e:	d129      	bne.n	8016ce4 <_printf_float+0x14c>
 8016c90:	1cc8      	adds	r0, r1, #3
 8016c92:	db02      	blt.n	8016c9a <_printf_float+0x102>
 8016c94:	6863      	ldr	r3, [r4, #4]
 8016c96:	4299      	cmp	r1, r3
 8016c98:	dd41      	ble.n	8016d1e <_printf_float+0x186>
 8016c9a:	f1a9 0902 	sub.w	r9, r9, #2
 8016c9e:	fa5f f989 	uxtb.w	r9, r9
 8016ca2:	3901      	subs	r1, #1
 8016ca4:	464a      	mov	r2, r9
 8016ca6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016caa:	9109      	str	r1, [sp, #36]	@ 0x24
 8016cac:	f7ff ff39 	bl	8016b22 <__exponent>
 8016cb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016cb2:	1813      	adds	r3, r2, r0
 8016cb4:	2a01      	cmp	r2, #1
 8016cb6:	4682      	mov	sl, r0
 8016cb8:	6123      	str	r3, [r4, #16]
 8016cba:	dc02      	bgt.n	8016cc2 <_printf_float+0x12a>
 8016cbc:	6822      	ldr	r2, [r4, #0]
 8016cbe:	07d2      	lsls	r2, r2, #31
 8016cc0:	d501      	bpl.n	8016cc6 <_printf_float+0x12e>
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	6123      	str	r3, [r4, #16]
 8016cc6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d0a6      	beq.n	8016c1c <_printf_float+0x84>
 8016cce:	232d      	movs	r3, #45	@ 0x2d
 8016cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016cd4:	e7a2      	b.n	8016c1c <_printf_float+0x84>
 8016cd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016cda:	d1c4      	bne.n	8016c66 <_printf_float+0xce>
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d1c2      	bne.n	8016c66 <_printf_float+0xce>
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	e7bf      	b.n	8016c64 <_printf_float+0xcc>
 8016ce4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8016ce8:	d9db      	bls.n	8016ca2 <_printf_float+0x10a>
 8016cea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8016cee:	d118      	bne.n	8016d22 <_printf_float+0x18a>
 8016cf0:	2900      	cmp	r1, #0
 8016cf2:	6863      	ldr	r3, [r4, #4]
 8016cf4:	dd0b      	ble.n	8016d0e <_printf_float+0x176>
 8016cf6:	6121      	str	r1, [r4, #16]
 8016cf8:	b913      	cbnz	r3, 8016d00 <_printf_float+0x168>
 8016cfa:	6822      	ldr	r2, [r4, #0]
 8016cfc:	07d0      	lsls	r0, r2, #31
 8016cfe:	d502      	bpl.n	8016d06 <_printf_float+0x16e>
 8016d00:	3301      	adds	r3, #1
 8016d02:	440b      	add	r3, r1
 8016d04:	6123      	str	r3, [r4, #16]
 8016d06:	65a1      	str	r1, [r4, #88]	@ 0x58
 8016d08:	f04f 0a00 	mov.w	sl, #0
 8016d0c:	e7db      	b.n	8016cc6 <_printf_float+0x12e>
 8016d0e:	b913      	cbnz	r3, 8016d16 <_printf_float+0x17e>
 8016d10:	6822      	ldr	r2, [r4, #0]
 8016d12:	07d2      	lsls	r2, r2, #31
 8016d14:	d501      	bpl.n	8016d1a <_printf_float+0x182>
 8016d16:	3302      	adds	r3, #2
 8016d18:	e7f4      	b.n	8016d04 <_printf_float+0x16c>
 8016d1a:	2301      	movs	r3, #1
 8016d1c:	e7f2      	b.n	8016d04 <_printf_float+0x16c>
 8016d1e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8016d22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d24:	4299      	cmp	r1, r3
 8016d26:	db05      	blt.n	8016d34 <_printf_float+0x19c>
 8016d28:	6823      	ldr	r3, [r4, #0]
 8016d2a:	6121      	str	r1, [r4, #16]
 8016d2c:	07d8      	lsls	r0, r3, #31
 8016d2e:	d5ea      	bpl.n	8016d06 <_printf_float+0x16e>
 8016d30:	1c4b      	adds	r3, r1, #1
 8016d32:	e7e7      	b.n	8016d04 <_printf_float+0x16c>
 8016d34:	2900      	cmp	r1, #0
 8016d36:	bfd4      	ite	le
 8016d38:	f1c1 0202 	rsble	r2, r1, #2
 8016d3c:	2201      	movgt	r2, #1
 8016d3e:	4413      	add	r3, r2
 8016d40:	e7e0      	b.n	8016d04 <_printf_float+0x16c>
 8016d42:	6823      	ldr	r3, [r4, #0]
 8016d44:	055a      	lsls	r2, r3, #21
 8016d46:	d407      	bmi.n	8016d58 <_printf_float+0x1c0>
 8016d48:	6923      	ldr	r3, [r4, #16]
 8016d4a:	4642      	mov	r2, r8
 8016d4c:	4631      	mov	r1, r6
 8016d4e:	4628      	mov	r0, r5
 8016d50:	47b8      	blx	r7
 8016d52:	3001      	adds	r0, #1
 8016d54:	d12a      	bne.n	8016dac <_printf_float+0x214>
 8016d56:	e76b      	b.n	8016c30 <_printf_float+0x98>
 8016d58:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8016d5c:	f240 80e0 	bls.w	8016f20 <_printf_float+0x388>
 8016d60:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8016d64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d6c:	d133      	bne.n	8016dd6 <_printf_float+0x23e>
 8016d6e:	4a38      	ldr	r2, [pc, #224]	@ (8016e50 <_printf_float+0x2b8>)
 8016d70:	2301      	movs	r3, #1
 8016d72:	4631      	mov	r1, r6
 8016d74:	4628      	mov	r0, r5
 8016d76:	47b8      	blx	r7
 8016d78:	3001      	adds	r0, #1
 8016d7a:	f43f af59 	beq.w	8016c30 <_printf_float+0x98>
 8016d7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016d82:	4543      	cmp	r3, r8
 8016d84:	db02      	blt.n	8016d8c <_printf_float+0x1f4>
 8016d86:	6823      	ldr	r3, [r4, #0]
 8016d88:	07d8      	lsls	r0, r3, #31
 8016d8a:	d50f      	bpl.n	8016dac <_printf_float+0x214>
 8016d8c:	9b05      	ldr	r3, [sp, #20]
 8016d8e:	465a      	mov	r2, fp
 8016d90:	4631      	mov	r1, r6
 8016d92:	4628      	mov	r0, r5
 8016d94:	47b8      	blx	r7
 8016d96:	3001      	adds	r0, #1
 8016d98:	f43f af4a 	beq.w	8016c30 <_printf_float+0x98>
 8016d9c:	f04f 0900 	mov.w	r9, #0
 8016da0:	f108 38ff 	add.w	r8, r8, #4294967295
 8016da4:	f104 0a1a 	add.w	sl, r4, #26
 8016da8:	45c8      	cmp	r8, r9
 8016daa:	dc09      	bgt.n	8016dc0 <_printf_float+0x228>
 8016dac:	6823      	ldr	r3, [r4, #0]
 8016dae:	079b      	lsls	r3, r3, #30
 8016db0:	f100 8107 	bmi.w	8016fc2 <_printf_float+0x42a>
 8016db4:	68e0      	ldr	r0, [r4, #12]
 8016db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016db8:	4298      	cmp	r0, r3
 8016dba:	bfb8      	it	lt
 8016dbc:	4618      	movlt	r0, r3
 8016dbe:	e739      	b.n	8016c34 <_printf_float+0x9c>
 8016dc0:	2301      	movs	r3, #1
 8016dc2:	4652      	mov	r2, sl
 8016dc4:	4631      	mov	r1, r6
 8016dc6:	4628      	mov	r0, r5
 8016dc8:	47b8      	blx	r7
 8016dca:	3001      	adds	r0, #1
 8016dcc:	f43f af30 	beq.w	8016c30 <_printf_float+0x98>
 8016dd0:	f109 0901 	add.w	r9, r9, #1
 8016dd4:	e7e8      	b.n	8016da8 <_printf_float+0x210>
 8016dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	dc3b      	bgt.n	8016e54 <_printf_float+0x2bc>
 8016ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8016e50 <_printf_float+0x2b8>)
 8016dde:	2301      	movs	r3, #1
 8016de0:	4631      	mov	r1, r6
 8016de2:	4628      	mov	r0, r5
 8016de4:	47b8      	blx	r7
 8016de6:	3001      	adds	r0, #1
 8016de8:	f43f af22 	beq.w	8016c30 <_printf_float+0x98>
 8016dec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016df0:	ea59 0303 	orrs.w	r3, r9, r3
 8016df4:	d102      	bne.n	8016dfc <_printf_float+0x264>
 8016df6:	6823      	ldr	r3, [r4, #0]
 8016df8:	07d9      	lsls	r1, r3, #31
 8016dfa:	d5d7      	bpl.n	8016dac <_printf_float+0x214>
 8016dfc:	9b05      	ldr	r3, [sp, #20]
 8016dfe:	465a      	mov	r2, fp
 8016e00:	4631      	mov	r1, r6
 8016e02:	4628      	mov	r0, r5
 8016e04:	47b8      	blx	r7
 8016e06:	3001      	adds	r0, #1
 8016e08:	f43f af12 	beq.w	8016c30 <_printf_float+0x98>
 8016e0c:	f04f 0a00 	mov.w	sl, #0
 8016e10:	f104 0b1a 	add.w	fp, r4, #26
 8016e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e16:	425b      	negs	r3, r3
 8016e18:	4553      	cmp	r3, sl
 8016e1a:	dc01      	bgt.n	8016e20 <_printf_float+0x288>
 8016e1c:	464b      	mov	r3, r9
 8016e1e:	e794      	b.n	8016d4a <_printf_float+0x1b2>
 8016e20:	2301      	movs	r3, #1
 8016e22:	465a      	mov	r2, fp
 8016e24:	4631      	mov	r1, r6
 8016e26:	4628      	mov	r0, r5
 8016e28:	47b8      	blx	r7
 8016e2a:	3001      	adds	r0, #1
 8016e2c:	f43f af00 	beq.w	8016c30 <_printf_float+0x98>
 8016e30:	f10a 0a01 	add.w	sl, sl, #1
 8016e34:	e7ee      	b.n	8016e14 <_printf_float+0x27c>
 8016e36:	bf00      	nop
 8016e38:	ffffffff 	.word	0xffffffff
 8016e3c:	7fefffff 	.word	0x7fefffff
 8016e40:	0801b308 	.word	0x0801b308
 8016e44:	0801b30c 	.word	0x0801b30c
 8016e48:	0801b310 	.word	0x0801b310
 8016e4c:	0801b314 	.word	0x0801b314
 8016e50:	0801b318 	.word	0x0801b318
 8016e54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016e56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016e5a:	4553      	cmp	r3, sl
 8016e5c:	bfa8      	it	ge
 8016e5e:	4653      	movge	r3, sl
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	4699      	mov	r9, r3
 8016e64:	dc37      	bgt.n	8016ed6 <_printf_float+0x33e>
 8016e66:	2300      	movs	r3, #0
 8016e68:	9307      	str	r3, [sp, #28]
 8016e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016e6e:	f104 021a 	add.w	r2, r4, #26
 8016e72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016e74:	9907      	ldr	r1, [sp, #28]
 8016e76:	9306      	str	r3, [sp, #24]
 8016e78:	eba3 0309 	sub.w	r3, r3, r9
 8016e7c:	428b      	cmp	r3, r1
 8016e7e:	dc31      	bgt.n	8016ee4 <_printf_float+0x34c>
 8016e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e82:	459a      	cmp	sl, r3
 8016e84:	dc3b      	bgt.n	8016efe <_printf_float+0x366>
 8016e86:	6823      	ldr	r3, [r4, #0]
 8016e88:	07da      	lsls	r2, r3, #31
 8016e8a:	d438      	bmi.n	8016efe <_printf_float+0x366>
 8016e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e8e:	ebaa 0903 	sub.w	r9, sl, r3
 8016e92:	9b06      	ldr	r3, [sp, #24]
 8016e94:	ebaa 0303 	sub.w	r3, sl, r3
 8016e98:	4599      	cmp	r9, r3
 8016e9a:	bfa8      	it	ge
 8016e9c:	4699      	movge	r9, r3
 8016e9e:	f1b9 0f00 	cmp.w	r9, #0
 8016ea2:	dc34      	bgt.n	8016f0e <_printf_float+0x376>
 8016ea4:	f04f 0800 	mov.w	r8, #0
 8016ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016eac:	f104 0b1a 	add.w	fp, r4, #26
 8016eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016eb2:	ebaa 0303 	sub.w	r3, sl, r3
 8016eb6:	eba3 0309 	sub.w	r3, r3, r9
 8016eba:	4543      	cmp	r3, r8
 8016ebc:	f77f af76 	ble.w	8016dac <_printf_float+0x214>
 8016ec0:	2301      	movs	r3, #1
 8016ec2:	465a      	mov	r2, fp
 8016ec4:	4631      	mov	r1, r6
 8016ec6:	4628      	mov	r0, r5
 8016ec8:	47b8      	blx	r7
 8016eca:	3001      	adds	r0, #1
 8016ecc:	f43f aeb0 	beq.w	8016c30 <_printf_float+0x98>
 8016ed0:	f108 0801 	add.w	r8, r8, #1
 8016ed4:	e7ec      	b.n	8016eb0 <_printf_float+0x318>
 8016ed6:	4642      	mov	r2, r8
 8016ed8:	4631      	mov	r1, r6
 8016eda:	4628      	mov	r0, r5
 8016edc:	47b8      	blx	r7
 8016ede:	3001      	adds	r0, #1
 8016ee0:	d1c1      	bne.n	8016e66 <_printf_float+0x2ce>
 8016ee2:	e6a5      	b.n	8016c30 <_printf_float+0x98>
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	4631      	mov	r1, r6
 8016ee8:	4628      	mov	r0, r5
 8016eea:	9206      	str	r2, [sp, #24]
 8016eec:	47b8      	blx	r7
 8016eee:	3001      	adds	r0, #1
 8016ef0:	f43f ae9e 	beq.w	8016c30 <_printf_float+0x98>
 8016ef4:	9b07      	ldr	r3, [sp, #28]
 8016ef6:	9a06      	ldr	r2, [sp, #24]
 8016ef8:	3301      	adds	r3, #1
 8016efa:	9307      	str	r3, [sp, #28]
 8016efc:	e7b9      	b.n	8016e72 <_printf_float+0x2da>
 8016efe:	9b05      	ldr	r3, [sp, #20]
 8016f00:	465a      	mov	r2, fp
 8016f02:	4631      	mov	r1, r6
 8016f04:	4628      	mov	r0, r5
 8016f06:	47b8      	blx	r7
 8016f08:	3001      	adds	r0, #1
 8016f0a:	d1bf      	bne.n	8016e8c <_printf_float+0x2f4>
 8016f0c:	e690      	b.n	8016c30 <_printf_float+0x98>
 8016f0e:	9a06      	ldr	r2, [sp, #24]
 8016f10:	464b      	mov	r3, r9
 8016f12:	4442      	add	r2, r8
 8016f14:	4631      	mov	r1, r6
 8016f16:	4628      	mov	r0, r5
 8016f18:	47b8      	blx	r7
 8016f1a:	3001      	adds	r0, #1
 8016f1c:	d1c2      	bne.n	8016ea4 <_printf_float+0x30c>
 8016f1e:	e687      	b.n	8016c30 <_printf_float+0x98>
 8016f20:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8016f24:	f1b9 0f01 	cmp.w	r9, #1
 8016f28:	dc01      	bgt.n	8016f2e <_printf_float+0x396>
 8016f2a:	07db      	lsls	r3, r3, #31
 8016f2c:	d536      	bpl.n	8016f9c <_printf_float+0x404>
 8016f2e:	2301      	movs	r3, #1
 8016f30:	4642      	mov	r2, r8
 8016f32:	4631      	mov	r1, r6
 8016f34:	4628      	mov	r0, r5
 8016f36:	47b8      	blx	r7
 8016f38:	3001      	adds	r0, #1
 8016f3a:	f43f ae79 	beq.w	8016c30 <_printf_float+0x98>
 8016f3e:	9b05      	ldr	r3, [sp, #20]
 8016f40:	465a      	mov	r2, fp
 8016f42:	4631      	mov	r1, r6
 8016f44:	4628      	mov	r0, r5
 8016f46:	47b8      	blx	r7
 8016f48:	3001      	adds	r0, #1
 8016f4a:	f43f ae71 	beq.w	8016c30 <_printf_float+0x98>
 8016f4e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8016f52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8016f5e:	d018      	beq.n	8016f92 <_printf_float+0x3fa>
 8016f60:	464b      	mov	r3, r9
 8016f62:	f108 0201 	add.w	r2, r8, #1
 8016f66:	4631      	mov	r1, r6
 8016f68:	4628      	mov	r0, r5
 8016f6a:	47b8      	blx	r7
 8016f6c:	3001      	adds	r0, #1
 8016f6e:	d10c      	bne.n	8016f8a <_printf_float+0x3f2>
 8016f70:	e65e      	b.n	8016c30 <_printf_float+0x98>
 8016f72:	2301      	movs	r3, #1
 8016f74:	465a      	mov	r2, fp
 8016f76:	4631      	mov	r1, r6
 8016f78:	4628      	mov	r0, r5
 8016f7a:	47b8      	blx	r7
 8016f7c:	3001      	adds	r0, #1
 8016f7e:	f43f ae57 	beq.w	8016c30 <_printf_float+0x98>
 8016f82:	f108 0801 	add.w	r8, r8, #1
 8016f86:	45c8      	cmp	r8, r9
 8016f88:	dbf3      	blt.n	8016f72 <_printf_float+0x3da>
 8016f8a:	4653      	mov	r3, sl
 8016f8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016f90:	e6dc      	b.n	8016d4c <_printf_float+0x1b4>
 8016f92:	f04f 0800 	mov.w	r8, #0
 8016f96:	f104 0b1a 	add.w	fp, r4, #26
 8016f9a:	e7f4      	b.n	8016f86 <_printf_float+0x3ee>
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	4642      	mov	r2, r8
 8016fa0:	e7e1      	b.n	8016f66 <_printf_float+0x3ce>
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	464a      	mov	r2, r9
 8016fa6:	4631      	mov	r1, r6
 8016fa8:	4628      	mov	r0, r5
 8016faa:	47b8      	blx	r7
 8016fac:	3001      	adds	r0, #1
 8016fae:	f43f ae3f 	beq.w	8016c30 <_printf_float+0x98>
 8016fb2:	f108 0801 	add.w	r8, r8, #1
 8016fb6:	68e3      	ldr	r3, [r4, #12]
 8016fb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016fba:	1a5b      	subs	r3, r3, r1
 8016fbc:	4543      	cmp	r3, r8
 8016fbe:	dcf0      	bgt.n	8016fa2 <_printf_float+0x40a>
 8016fc0:	e6f8      	b.n	8016db4 <_printf_float+0x21c>
 8016fc2:	f04f 0800 	mov.w	r8, #0
 8016fc6:	f104 0919 	add.w	r9, r4, #25
 8016fca:	e7f4      	b.n	8016fb6 <_printf_float+0x41e>

08016fcc <_printf_common>:
 8016fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fd0:	4616      	mov	r6, r2
 8016fd2:	4698      	mov	r8, r3
 8016fd4:	688a      	ldr	r2, [r1, #8]
 8016fd6:	690b      	ldr	r3, [r1, #16]
 8016fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016fdc:	4293      	cmp	r3, r2
 8016fde:	bfb8      	it	lt
 8016fe0:	4613      	movlt	r3, r2
 8016fe2:	6033      	str	r3, [r6, #0]
 8016fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016fe8:	4607      	mov	r7, r0
 8016fea:	460c      	mov	r4, r1
 8016fec:	b10a      	cbz	r2, 8016ff2 <_printf_common+0x26>
 8016fee:	3301      	adds	r3, #1
 8016ff0:	6033      	str	r3, [r6, #0]
 8016ff2:	6823      	ldr	r3, [r4, #0]
 8016ff4:	0699      	lsls	r1, r3, #26
 8016ff6:	bf42      	ittt	mi
 8016ff8:	6833      	ldrmi	r3, [r6, #0]
 8016ffa:	3302      	addmi	r3, #2
 8016ffc:	6033      	strmi	r3, [r6, #0]
 8016ffe:	6825      	ldr	r5, [r4, #0]
 8017000:	f015 0506 	ands.w	r5, r5, #6
 8017004:	d106      	bne.n	8017014 <_printf_common+0x48>
 8017006:	f104 0a19 	add.w	sl, r4, #25
 801700a:	68e3      	ldr	r3, [r4, #12]
 801700c:	6832      	ldr	r2, [r6, #0]
 801700e:	1a9b      	subs	r3, r3, r2
 8017010:	42ab      	cmp	r3, r5
 8017012:	dc26      	bgt.n	8017062 <_printf_common+0x96>
 8017014:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017018:	6822      	ldr	r2, [r4, #0]
 801701a:	3b00      	subs	r3, #0
 801701c:	bf18      	it	ne
 801701e:	2301      	movne	r3, #1
 8017020:	0692      	lsls	r2, r2, #26
 8017022:	d42b      	bmi.n	801707c <_printf_common+0xb0>
 8017024:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017028:	4641      	mov	r1, r8
 801702a:	4638      	mov	r0, r7
 801702c:	47c8      	blx	r9
 801702e:	3001      	adds	r0, #1
 8017030:	d01e      	beq.n	8017070 <_printf_common+0xa4>
 8017032:	6823      	ldr	r3, [r4, #0]
 8017034:	6922      	ldr	r2, [r4, #16]
 8017036:	f003 0306 	and.w	r3, r3, #6
 801703a:	2b04      	cmp	r3, #4
 801703c:	bf02      	ittt	eq
 801703e:	68e5      	ldreq	r5, [r4, #12]
 8017040:	6833      	ldreq	r3, [r6, #0]
 8017042:	1aed      	subeq	r5, r5, r3
 8017044:	68a3      	ldr	r3, [r4, #8]
 8017046:	bf0c      	ite	eq
 8017048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801704c:	2500      	movne	r5, #0
 801704e:	4293      	cmp	r3, r2
 8017050:	bfc4      	itt	gt
 8017052:	1a9b      	subgt	r3, r3, r2
 8017054:	18ed      	addgt	r5, r5, r3
 8017056:	2600      	movs	r6, #0
 8017058:	341a      	adds	r4, #26
 801705a:	42b5      	cmp	r5, r6
 801705c:	d11a      	bne.n	8017094 <_printf_common+0xc8>
 801705e:	2000      	movs	r0, #0
 8017060:	e008      	b.n	8017074 <_printf_common+0xa8>
 8017062:	2301      	movs	r3, #1
 8017064:	4652      	mov	r2, sl
 8017066:	4641      	mov	r1, r8
 8017068:	4638      	mov	r0, r7
 801706a:	47c8      	blx	r9
 801706c:	3001      	adds	r0, #1
 801706e:	d103      	bne.n	8017078 <_printf_common+0xac>
 8017070:	f04f 30ff 	mov.w	r0, #4294967295
 8017074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017078:	3501      	adds	r5, #1
 801707a:	e7c6      	b.n	801700a <_printf_common+0x3e>
 801707c:	18e1      	adds	r1, r4, r3
 801707e:	1c5a      	adds	r2, r3, #1
 8017080:	2030      	movs	r0, #48	@ 0x30
 8017082:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017086:	4422      	add	r2, r4
 8017088:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801708c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017090:	3302      	adds	r3, #2
 8017092:	e7c7      	b.n	8017024 <_printf_common+0x58>
 8017094:	2301      	movs	r3, #1
 8017096:	4622      	mov	r2, r4
 8017098:	4641      	mov	r1, r8
 801709a:	4638      	mov	r0, r7
 801709c:	47c8      	blx	r9
 801709e:	3001      	adds	r0, #1
 80170a0:	d0e6      	beq.n	8017070 <_printf_common+0xa4>
 80170a2:	3601      	adds	r6, #1
 80170a4:	e7d9      	b.n	801705a <_printf_common+0x8e>
	...

080170a8 <_printf_i>:
 80170a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80170ac:	7e0f      	ldrb	r7, [r1, #24]
 80170ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80170b0:	2f78      	cmp	r7, #120	@ 0x78
 80170b2:	4691      	mov	r9, r2
 80170b4:	4680      	mov	r8, r0
 80170b6:	460c      	mov	r4, r1
 80170b8:	469a      	mov	sl, r3
 80170ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80170be:	d807      	bhi.n	80170d0 <_printf_i+0x28>
 80170c0:	2f62      	cmp	r7, #98	@ 0x62
 80170c2:	d80a      	bhi.n	80170da <_printf_i+0x32>
 80170c4:	2f00      	cmp	r7, #0
 80170c6:	f000 80d2 	beq.w	801726e <_printf_i+0x1c6>
 80170ca:	2f58      	cmp	r7, #88	@ 0x58
 80170cc:	f000 80b9 	beq.w	8017242 <_printf_i+0x19a>
 80170d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80170d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80170d8:	e03a      	b.n	8017150 <_printf_i+0xa8>
 80170da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80170de:	2b15      	cmp	r3, #21
 80170e0:	d8f6      	bhi.n	80170d0 <_printf_i+0x28>
 80170e2:	a101      	add	r1, pc, #4	@ (adr r1, 80170e8 <_printf_i+0x40>)
 80170e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80170e8:	08017141 	.word	0x08017141
 80170ec:	08017155 	.word	0x08017155
 80170f0:	080170d1 	.word	0x080170d1
 80170f4:	080170d1 	.word	0x080170d1
 80170f8:	080170d1 	.word	0x080170d1
 80170fc:	080170d1 	.word	0x080170d1
 8017100:	08017155 	.word	0x08017155
 8017104:	080170d1 	.word	0x080170d1
 8017108:	080170d1 	.word	0x080170d1
 801710c:	080170d1 	.word	0x080170d1
 8017110:	080170d1 	.word	0x080170d1
 8017114:	08017255 	.word	0x08017255
 8017118:	0801717f 	.word	0x0801717f
 801711c:	0801720f 	.word	0x0801720f
 8017120:	080170d1 	.word	0x080170d1
 8017124:	080170d1 	.word	0x080170d1
 8017128:	08017277 	.word	0x08017277
 801712c:	080170d1 	.word	0x080170d1
 8017130:	0801717f 	.word	0x0801717f
 8017134:	080170d1 	.word	0x080170d1
 8017138:	080170d1 	.word	0x080170d1
 801713c:	08017217 	.word	0x08017217
 8017140:	6833      	ldr	r3, [r6, #0]
 8017142:	1d1a      	adds	r2, r3, #4
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	6032      	str	r2, [r6, #0]
 8017148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801714c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017150:	2301      	movs	r3, #1
 8017152:	e09d      	b.n	8017290 <_printf_i+0x1e8>
 8017154:	6833      	ldr	r3, [r6, #0]
 8017156:	6820      	ldr	r0, [r4, #0]
 8017158:	1d19      	adds	r1, r3, #4
 801715a:	6031      	str	r1, [r6, #0]
 801715c:	0606      	lsls	r6, r0, #24
 801715e:	d501      	bpl.n	8017164 <_printf_i+0xbc>
 8017160:	681d      	ldr	r5, [r3, #0]
 8017162:	e003      	b.n	801716c <_printf_i+0xc4>
 8017164:	0645      	lsls	r5, r0, #25
 8017166:	d5fb      	bpl.n	8017160 <_printf_i+0xb8>
 8017168:	f9b3 5000 	ldrsh.w	r5, [r3]
 801716c:	2d00      	cmp	r5, #0
 801716e:	da03      	bge.n	8017178 <_printf_i+0xd0>
 8017170:	232d      	movs	r3, #45	@ 0x2d
 8017172:	426d      	negs	r5, r5
 8017174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017178:	4859      	ldr	r0, [pc, #356]	@ (80172e0 <_printf_i+0x238>)
 801717a:	230a      	movs	r3, #10
 801717c:	e011      	b.n	80171a2 <_printf_i+0xfa>
 801717e:	6821      	ldr	r1, [r4, #0]
 8017180:	6833      	ldr	r3, [r6, #0]
 8017182:	0608      	lsls	r0, r1, #24
 8017184:	f853 5b04 	ldr.w	r5, [r3], #4
 8017188:	d402      	bmi.n	8017190 <_printf_i+0xe8>
 801718a:	0649      	lsls	r1, r1, #25
 801718c:	bf48      	it	mi
 801718e:	b2ad      	uxthmi	r5, r5
 8017190:	2f6f      	cmp	r7, #111	@ 0x6f
 8017192:	4853      	ldr	r0, [pc, #332]	@ (80172e0 <_printf_i+0x238>)
 8017194:	6033      	str	r3, [r6, #0]
 8017196:	bf14      	ite	ne
 8017198:	230a      	movne	r3, #10
 801719a:	2308      	moveq	r3, #8
 801719c:	2100      	movs	r1, #0
 801719e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80171a2:	6866      	ldr	r6, [r4, #4]
 80171a4:	60a6      	str	r6, [r4, #8]
 80171a6:	2e00      	cmp	r6, #0
 80171a8:	bfa2      	ittt	ge
 80171aa:	6821      	ldrge	r1, [r4, #0]
 80171ac:	f021 0104 	bicge.w	r1, r1, #4
 80171b0:	6021      	strge	r1, [r4, #0]
 80171b2:	b90d      	cbnz	r5, 80171b8 <_printf_i+0x110>
 80171b4:	2e00      	cmp	r6, #0
 80171b6:	d04b      	beq.n	8017250 <_printf_i+0x1a8>
 80171b8:	4616      	mov	r6, r2
 80171ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80171be:	fb03 5711 	mls	r7, r3, r1, r5
 80171c2:	5dc7      	ldrb	r7, [r0, r7]
 80171c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80171c8:	462f      	mov	r7, r5
 80171ca:	42bb      	cmp	r3, r7
 80171cc:	460d      	mov	r5, r1
 80171ce:	d9f4      	bls.n	80171ba <_printf_i+0x112>
 80171d0:	2b08      	cmp	r3, #8
 80171d2:	d10b      	bne.n	80171ec <_printf_i+0x144>
 80171d4:	6823      	ldr	r3, [r4, #0]
 80171d6:	07df      	lsls	r7, r3, #31
 80171d8:	d508      	bpl.n	80171ec <_printf_i+0x144>
 80171da:	6923      	ldr	r3, [r4, #16]
 80171dc:	6861      	ldr	r1, [r4, #4]
 80171de:	4299      	cmp	r1, r3
 80171e0:	bfde      	ittt	le
 80171e2:	2330      	movle	r3, #48	@ 0x30
 80171e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80171e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80171ec:	1b92      	subs	r2, r2, r6
 80171ee:	6122      	str	r2, [r4, #16]
 80171f0:	f8cd a000 	str.w	sl, [sp]
 80171f4:	464b      	mov	r3, r9
 80171f6:	aa03      	add	r2, sp, #12
 80171f8:	4621      	mov	r1, r4
 80171fa:	4640      	mov	r0, r8
 80171fc:	f7ff fee6 	bl	8016fcc <_printf_common>
 8017200:	3001      	adds	r0, #1
 8017202:	d14a      	bne.n	801729a <_printf_i+0x1f2>
 8017204:	f04f 30ff 	mov.w	r0, #4294967295
 8017208:	b004      	add	sp, #16
 801720a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801720e:	6823      	ldr	r3, [r4, #0]
 8017210:	f043 0320 	orr.w	r3, r3, #32
 8017214:	6023      	str	r3, [r4, #0]
 8017216:	4833      	ldr	r0, [pc, #204]	@ (80172e4 <_printf_i+0x23c>)
 8017218:	2778      	movs	r7, #120	@ 0x78
 801721a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801721e:	6823      	ldr	r3, [r4, #0]
 8017220:	6831      	ldr	r1, [r6, #0]
 8017222:	061f      	lsls	r7, r3, #24
 8017224:	f851 5b04 	ldr.w	r5, [r1], #4
 8017228:	d402      	bmi.n	8017230 <_printf_i+0x188>
 801722a:	065f      	lsls	r7, r3, #25
 801722c:	bf48      	it	mi
 801722e:	b2ad      	uxthmi	r5, r5
 8017230:	6031      	str	r1, [r6, #0]
 8017232:	07d9      	lsls	r1, r3, #31
 8017234:	bf44      	itt	mi
 8017236:	f043 0320 	orrmi.w	r3, r3, #32
 801723a:	6023      	strmi	r3, [r4, #0]
 801723c:	b11d      	cbz	r5, 8017246 <_printf_i+0x19e>
 801723e:	2310      	movs	r3, #16
 8017240:	e7ac      	b.n	801719c <_printf_i+0xf4>
 8017242:	4827      	ldr	r0, [pc, #156]	@ (80172e0 <_printf_i+0x238>)
 8017244:	e7e9      	b.n	801721a <_printf_i+0x172>
 8017246:	6823      	ldr	r3, [r4, #0]
 8017248:	f023 0320 	bic.w	r3, r3, #32
 801724c:	6023      	str	r3, [r4, #0]
 801724e:	e7f6      	b.n	801723e <_printf_i+0x196>
 8017250:	4616      	mov	r6, r2
 8017252:	e7bd      	b.n	80171d0 <_printf_i+0x128>
 8017254:	6833      	ldr	r3, [r6, #0]
 8017256:	6825      	ldr	r5, [r4, #0]
 8017258:	6961      	ldr	r1, [r4, #20]
 801725a:	1d18      	adds	r0, r3, #4
 801725c:	6030      	str	r0, [r6, #0]
 801725e:	062e      	lsls	r6, r5, #24
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	d501      	bpl.n	8017268 <_printf_i+0x1c0>
 8017264:	6019      	str	r1, [r3, #0]
 8017266:	e002      	b.n	801726e <_printf_i+0x1c6>
 8017268:	0668      	lsls	r0, r5, #25
 801726a:	d5fb      	bpl.n	8017264 <_printf_i+0x1bc>
 801726c:	8019      	strh	r1, [r3, #0]
 801726e:	2300      	movs	r3, #0
 8017270:	6123      	str	r3, [r4, #16]
 8017272:	4616      	mov	r6, r2
 8017274:	e7bc      	b.n	80171f0 <_printf_i+0x148>
 8017276:	6833      	ldr	r3, [r6, #0]
 8017278:	1d1a      	adds	r2, r3, #4
 801727a:	6032      	str	r2, [r6, #0]
 801727c:	681e      	ldr	r6, [r3, #0]
 801727e:	6862      	ldr	r2, [r4, #4]
 8017280:	2100      	movs	r1, #0
 8017282:	4630      	mov	r0, r6
 8017284:	f7e9 f844 	bl	8000310 <memchr>
 8017288:	b108      	cbz	r0, 801728e <_printf_i+0x1e6>
 801728a:	1b80      	subs	r0, r0, r6
 801728c:	6060      	str	r0, [r4, #4]
 801728e:	6863      	ldr	r3, [r4, #4]
 8017290:	6123      	str	r3, [r4, #16]
 8017292:	2300      	movs	r3, #0
 8017294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017298:	e7aa      	b.n	80171f0 <_printf_i+0x148>
 801729a:	6923      	ldr	r3, [r4, #16]
 801729c:	4632      	mov	r2, r6
 801729e:	4649      	mov	r1, r9
 80172a0:	4640      	mov	r0, r8
 80172a2:	47d0      	blx	sl
 80172a4:	3001      	adds	r0, #1
 80172a6:	d0ad      	beq.n	8017204 <_printf_i+0x15c>
 80172a8:	6823      	ldr	r3, [r4, #0]
 80172aa:	079b      	lsls	r3, r3, #30
 80172ac:	d413      	bmi.n	80172d6 <_printf_i+0x22e>
 80172ae:	68e0      	ldr	r0, [r4, #12]
 80172b0:	9b03      	ldr	r3, [sp, #12]
 80172b2:	4298      	cmp	r0, r3
 80172b4:	bfb8      	it	lt
 80172b6:	4618      	movlt	r0, r3
 80172b8:	e7a6      	b.n	8017208 <_printf_i+0x160>
 80172ba:	2301      	movs	r3, #1
 80172bc:	4632      	mov	r2, r6
 80172be:	4649      	mov	r1, r9
 80172c0:	4640      	mov	r0, r8
 80172c2:	47d0      	blx	sl
 80172c4:	3001      	adds	r0, #1
 80172c6:	d09d      	beq.n	8017204 <_printf_i+0x15c>
 80172c8:	3501      	adds	r5, #1
 80172ca:	68e3      	ldr	r3, [r4, #12]
 80172cc:	9903      	ldr	r1, [sp, #12]
 80172ce:	1a5b      	subs	r3, r3, r1
 80172d0:	42ab      	cmp	r3, r5
 80172d2:	dcf2      	bgt.n	80172ba <_printf_i+0x212>
 80172d4:	e7eb      	b.n	80172ae <_printf_i+0x206>
 80172d6:	2500      	movs	r5, #0
 80172d8:	f104 0619 	add.w	r6, r4, #25
 80172dc:	e7f5      	b.n	80172ca <_printf_i+0x222>
 80172de:	bf00      	nop
 80172e0:	0801b31a 	.word	0x0801b31a
 80172e4:	0801b32b 	.word	0x0801b32b

080172e8 <_scanf_float>:
 80172e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ec:	b087      	sub	sp, #28
 80172ee:	4617      	mov	r7, r2
 80172f0:	9303      	str	r3, [sp, #12]
 80172f2:	688b      	ldr	r3, [r1, #8]
 80172f4:	1e5a      	subs	r2, r3, #1
 80172f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80172fa:	bf81      	itttt	hi
 80172fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017300:	eb03 0b05 	addhi.w	fp, r3, r5
 8017304:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017308:	608b      	strhi	r3, [r1, #8]
 801730a:	680b      	ldr	r3, [r1, #0]
 801730c:	460a      	mov	r2, r1
 801730e:	f04f 0500 	mov.w	r5, #0
 8017312:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8017316:	f842 3b1c 	str.w	r3, [r2], #28
 801731a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801731e:	4680      	mov	r8, r0
 8017320:	460c      	mov	r4, r1
 8017322:	bf98      	it	ls
 8017324:	f04f 0b00 	movls.w	fp, #0
 8017328:	9201      	str	r2, [sp, #4]
 801732a:	4616      	mov	r6, r2
 801732c:	46aa      	mov	sl, r5
 801732e:	46a9      	mov	r9, r5
 8017330:	9502      	str	r5, [sp, #8]
 8017332:	68a2      	ldr	r2, [r4, #8]
 8017334:	b152      	cbz	r2, 801734c <_scanf_float+0x64>
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	781b      	ldrb	r3, [r3, #0]
 801733a:	2b4e      	cmp	r3, #78	@ 0x4e
 801733c:	d864      	bhi.n	8017408 <_scanf_float+0x120>
 801733e:	2b40      	cmp	r3, #64	@ 0x40
 8017340:	d83c      	bhi.n	80173bc <_scanf_float+0xd4>
 8017342:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8017346:	b2c8      	uxtb	r0, r1
 8017348:	280e      	cmp	r0, #14
 801734a:	d93a      	bls.n	80173c2 <_scanf_float+0xda>
 801734c:	f1b9 0f00 	cmp.w	r9, #0
 8017350:	d003      	beq.n	801735a <_scanf_float+0x72>
 8017352:	6823      	ldr	r3, [r4, #0]
 8017354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017358:	6023      	str	r3, [r4, #0]
 801735a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801735e:	f1ba 0f01 	cmp.w	sl, #1
 8017362:	f200 8117 	bhi.w	8017594 <_scanf_float+0x2ac>
 8017366:	9b01      	ldr	r3, [sp, #4]
 8017368:	429e      	cmp	r6, r3
 801736a:	f200 8108 	bhi.w	801757e <_scanf_float+0x296>
 801736e:	2001      	movs	r0, #1
 8017370:	b007      	add	sp, #28
 8017372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017376:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801737a:	2a0d      	cmp	r2, #13
 801737c:	d8e6      	bhi.n	801734c <_scanf_float+0x64>
 801737e:	a101      	add	r1, pc, #4	@ (adr r1, 8017384 <_scanf_float+0x9c>)
 8017380:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017384:	080174cb 	.word	0x080174cb
 8017388:	0801734d 	.word	0x0801734d
 801738c:	0801734d 	.word	0x0801734d
 8017390:	0801734d 	.word	0x0801734d
 8017394:	0801752b 	.word	0x0801752b
 8017398:	08017503 	.word	0x08017503
 801739c:	0801734d 	.word	0x0801734d
 80173a0:	0801734d 	.word	0x0801734d
 80173a4:	080174d9 	.word	0x080174d9
 80173a8:	0801734d 	.word	0x0801734d
 80173ac:	0801734d 	.word	0x0801734d
 80173b0:	0801734d 	.word	0x0801734d
 80173b4:	0801734d 	.word	0x0801734d
 80173b8:	08017491 	.word	0x08017491
 80173bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80173c0:	e7db      	b.n	801737a <_scanf_float+0x92>
 80173c2:	290e      	cmp	r1, #14
 80173c4:	d8c2      	bhi.n	801734c <_scanf_float+0x64>
 80173c6:	a001      	add	r0, pc, #4	@ (adr r0, 80173cc <_scanf_float+0xe4>)
 80173c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80173cc:	08017481 	.word	0x08017481
 80173d0:	0801734d 	.word	0x0801734d
 80173d4:	08017481 	.word	0x08017481
 80173d8:	08017517 	.word	0x08017517
 80173dc:	0801734d 	.word	0x0801734d
 80173e0:	08017429 	.word	0x08017429
 80173e4:	08017467 	.word	0x08017467
 80173e8:	08017467 	.word	0x08017467
 80173ec:	08017467 	.word	0x08017467
 80173f0:	08017467 	.word	0x08017467
 80173f4:	08017467 	.word	0x08017467
 80173f8:	08017467 	.word	0x08017467
 80173fc:	08017467 	.word	0x08017467
 8017400:	08017467 	.word	0x08017467
 8017404:	08017467 	.word	0x08017467
 8017408:	2b6e      	cmp	r3, #110	@ 0x6e
 801740a:	d809      	bhi.n	8017420 <_scanf_float+0x138>
 801740c:	2b60      	cmp	r3, #96	@ 0x60
 801740e:	d8b2      	bhi.n	8017376 <_scanf_float+0x8e>
 8017410:	2b54      	cmp	r3, #84	@ 0x54
 8017412:	d07b      	beq.n	801750c <_scanf_float+0x224>
 8017414:	2b59      	cmp	r3, #89	@ 0x59
 8017416:	d199      	bne.n	801734c <_scanf_float+0x64>
 8017418:	2d07      	cmp	r5, #7
 801741a:	d197      	bne.n	801734c <_scanf_float+0x64>
 801741c:	2508      	movs	r5, #8
 801741e:	e02c      	b.n	801747a <_scanf_float+0x192>
 8017420:	2b74      	cmp	r3, #116	@ 0x74
 8017422:	d073      	beq.n	801750c <_scanf_float+0x224>
 8017424:	2b79      	cmp	r3, #121	@ 0x79
 8017426:	e7f6      	b.n	8017416 <_scanf_float+0x12e>
 8017428:	6821      	ldr	r1, [r4, #0]
 801742a:	05c8      	lsls	r0, r1, #23
 801742c:	d51b      	bpl.n	8017466 <_scanf_float+0x17e>
 801742e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8017432:	6021      	str	r1, [r4, #0]
 8017434:	f109 0901 	add.w	r9, r9, #1
 8017438:	f1bb 0f00 	cmp.w	fp, #0
 801743c:	d003      	beq.n	8017446 <_scanf_float+0x15e>
 801743e:	3201      	adds	r2, #1
 8017440:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017444:	60a2      	str	r2, [r4, #8]
 8017446:	68a3      	ldr	r3, [r4, #8]
 8017448:	3b01      	subs	r3, #1
 801744a:	60a3      	str	r3, [r4, #8]
 801744c:	6923      	ldr	r3, [r4, #16]
 801744e:	3301      	adds	r3, #1
 8017450:	6123      	str	r3, [r4, #16]
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	3b01      	subs	r3, #1
 8017456:	2b00      	cmp	r3, #0
 8017458:	607b      	str	r3, [r7, #4]
 801745a:	f340 8087 	ble.w	801756c <_scanf_float+0x284>
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	3301      	adds	r3, #1
 8017462:	603b      	str	r3, [r7, #0]
 8017464:	e765      	b.n	8017332 <_scanf_float+0x4a>
 8017466:	eb1a 0105 	adds.w	r1, sl, r5
 801746a:	f47f af6f 	bne.w	801734c <_scanf_float+0x64>
 801746e:	6822      	ldr	r2, [r4, #0]
 8017470:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8017474:	6022      	str	r2, [r4, #0]
 8017476:	460d      	mov	r5, r1
 8017478:	468a      	mov	sl, r1
 801747a:	f806 3b01 	strb.w	r3, [r6], #1
 801747e:	e7e2      	b.n	8017446 <_scanf_float+0x15e>
 8017480:	6822      	ldr	r2, [r4, #0]
 8017482:	0610      	lsls	r0, r2, #24
 8017484:	f57f af62 	bpl.w	801734c <_scanf_float+0x64>
 8017488:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801748c:	6022      	str	r2, [r4, #0]
 801748e:	e7f4      	b.n	801747a <_scanf_float+0x192>
 8017490:	f1ba 0f00 	cmp.w	sl, #0
 8017494:	d10e      	bne.n	80174b4 <_scanf_float+0x1cc>
 8017496:	f1b9 0f00 	cmp.w	r9, #0
 801749a:	d10e      	bne.n	80174ba <_scanf_float+0x1d2>
 801749c:	6822      	ldr	r2, [r4, #0]
 801749e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80174a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80174a6:	d108      	bne.n	80174ba <_scanf_float+0x1d2>
 80174a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80174ac:	6022      	str	r2, [r4, #0]
 80174ae:	f04f 0a01 	mov.w	sl, #1
 80174b2:	e7e2      	b.n	801747a <_scanf_float+0x192>
 80174b4:	f1ba 0f02 	cmp.w	sl, #2
 80174b8:	d055      	beq.n	8017566 <_scanf_float+0x27e>
 80174ba:	2d01      	cmp	r5, #1
 80174bc:	d002      	beq.n	80174c4 <_scanf_float+0x1dc>
 80174be:	2d04      	cmp	r5, #4
 80174c0:	f47f af44 	bne.w	801734c <_scanf_float+0x64>
 80174c4:	3501      	adds	r5, #1
 80174c6:	b2ed      	uxtb	r5, r5
 80174c8:	e7d7      	b.n	801747a <_scanf_float+0x192>
 80174ca:	f1ba 0f01 	cmp.w	sl, #1
 80174ce:	f47f af3d 	bne.w	801734c <_scanf_float+0x64>
 80174d2:	f04f 0a02 	mov.w	sl, #2
 80174d6:	e7d0      	b.n	801747a <_scanf_float+0x192>
 80174d8:	b97d      	cbnz	r5, 80174fa <_scanf_float+0x212>
 80174da:	f1b9 0f00 	cmp.w	r9, #0
 80174de:	f47f af38 	bne.w	8017352 <_scanf_float+0x6a>
 80174e2:	6822      	ldr	r2, [r4, #0]
 80174e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80174e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80174ec:	f040 8101 	bne.w	80176f2 <_scanf_float+0x40a>
 80174f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80174f4:	6022      	str	r2, [r4, #0]
 80174f6:	2501      	movs	r5, #1
 80174f8:	e7bf      	b.n	801747a <_scanf_float+0x192>
 80174fa:	2d03      	cmp	r5, #3
 80174fc:	d0e2      	beq.n	80174c4 <_scanf_float+0x1dc>
 80174fe:	2d05      	cmp	r5, #5
 8017500:	e7de      	b.n	80174c0 <_scanf_float+0x1d8>
 8017502:	2d02      	cmp	r5, #2
 8017504:	f47f af22 	bne.w	801734c <_scanf_float+0x64>
 8017508:	2503      	movs	r5, #3
 801750a:	e7b6      	b.n	801747a <_scanf_float+0x192>
 801750c:	2d06      	cmp	r5, #6
 801750e:	f47f af1d 	bne.w	801734c <_scanf_float+0x64>
 8017512:	2507      	movs	r5, #7
 8017514:	e7b1      	b.n	801747a <_scanf_float+0x192>
 8017516:	6822      	ldr	r2, [r4, #0]
 8017518:	0591      	lsls	r1, r2, #22
 801751a:	f57f af17 	bpl.w	801734c <_scanf_float+0x64>
 801751e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8017522:	6022      	str	r2, [r4, #0]
 8017524:	f8cd 9008 	str.w	r9, [sp, #8]
 8017528:	e7a7      	b.n	801747a <_scanf_float+0x192>
 801752a:	6822      	ldr	r2, [r4, #0]
 801752c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8017530:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017534:	d006      	beq.n	8017544 <_scanf_float+0x25c>
 8017536:	0550      	lsls	r0, r2, #21
 8017538:	f57f af08 	bpl.w	801734c <_scanf_float+0x64>
 801753c:	f1b9 0f00 	cmp.w	r9, #0
 8017540:	f000 80d7 	beq.w	80176f2 <_scanf_float+0x40a>
 8017544:	0591      	lsls	r1, r2, #22
 8017546:	bf58      	it	pl
 8017548:	9902      	ldrpl	r1, [sp, #8]
 801754a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801754e:	bf58      	it	pl
 8017550:	eba9 0101 	subpl.w	r1, r9, r1
 8017554:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8017558:	bf58      	it	pl
 801755a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801755e:	6022      	str	r2, [r4, #0]
 8017560:	f04f 0900 	mov.w	r9, #0
 8017564:	e789      	b.n	801747a <_scanf_float+0x192>
 8017566:	f04f 0a03 	mov.w	sl, #3
 801756a:	e786      	b.n	801747a <_scanf_float+0x192>
 801756c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017570:	4639      	mov	r1, r7
 8017572:	4640      	mov	r0, r8
 8017574:	4798      	blx	r3
 8017576:	2800      	cmp	r0, #0
 8017578:	f43f aedb 	beq.w	8017332 <_scanf_float+0x4a>
 801757c:	e6e6      	b.n	801734c <_scanf_float+0x64>
 801757e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017582:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017586:	463a      	mov	r2, r7
 8017588:	4640      	mov	r0, r8
 801758a:	4798      	blx	r3
 801758c:	6923      	ldr	r3, [r4, #16]
 801758e:	3b01      	subs	r3, #1
 8017590:	6123      	str	r3, [r4, #16]
 8017592:	e6e8      	b.n	8017366 <_scanf_float+0x7e>
 8017594:	1e6b      	subs	r3, r5, #1
 8017596:	2b06      	cmp	r3, #6
 8017598:	d824      	bhi.n	80175e4 <_scanf_float+0x2fc>
 801759a:	2d02      	cmp	r5, #2
 801759c:	d836      	bhi.n	801760c <_scanf_float+0x324>
 801759e:	9b01      	ldr	r3, [sp, #4]
 80175a0:	429e      	cmp	r6, r3
 80175a2:	f67f aee4 	bls.w	801736e <_scanf_float+0x86>
 80175a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80175aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80175ae:	463a      	mov	r2, r7
 80175b0:	4640      	mov	r0, r8
 80175b2:	4798      	blx	r3
 80175b4:	6923      	ldr	r3, [r4, #16]
 80175b6:	3b01      	subs	r3, #1
 80175b8:	6123      	str	r3, [r4, #16]
 80175ba:	e7f0      	b.n	801759e <_scanf_float+0x2b6>
 80175bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80175c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80175c4:	463a      	mov	r2, r7
 80175c6:	4640      	mov	r0, r8
 80175c8:	4798      	blx	r3
 80175ca:	6923      	ldr	r3, [r4, #16]
 80175cc:	3b01      	subs	r3, #1
 80175ce:	6123      	str	r3, [r4, #16]
 80175d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175d4:	fa5f fa8a 	uxtb.w	sl, sl
 80175d8:	f1ba 0f02 	cmp.w	sl, #2
 80175dc:	d1ee      	bne.n	80175bc <_scanf_float+0x2d4>
 80175de:	3d03      	subs	r5, #3
 80175e0:	b2ed      	uxtb	r5, r5
 80175e2:	1b76      	subs	r6, r6, r5
 80175e4:	6823      	ldr	r3, [r4, #0]
 80175e6:	05da      	lsls	r2, r3, #23
 80175e8:	d530      	bpl.n	801764c <_scanf_float+0x364>
 80175ea:	055b      	lsls	r3, r3, #21
 80175ec:	d511      	bpl.n	8017612 <_scanf_float+0x32a>
 80175ee:	9b01      	ldr	r3, [sp, #4]
 80175f0:	429e      	cmp	r6, r3
 80175f2:	f67f aebc 	bls.w	801736e <_scanf_float+0x86>
 80175f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80175fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80175fe:	463a      	mov	r2, r7
 8017600:	4640      	mov	r0, r8
 8017602:	4798      	blx	r3
 8017604:	6923      	ldr	r3, [r4, #16]
 8017606:	3b01      	subs	r3, #1
 8017608:	6123      	str	r3, [r4, #16]
 801760a:	e7f0      	b.n	80175ee <_scanf_float+0x306>
 801760c:	46aa      	mov	sl, r5
 801760e:	46b3      	mov	fp, r6
 8017610:	e7de      	b.n	80175d0 <_scanf_float+0x2e8>
 8017612:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017616:	6923      	ldr	r3, [r4, #16]
 8017618:	2965      	cmp	r1, #101	@ 0x65
 801761a:	f103 33ff 	add.w	r3, r3, #4294967295
 801761e:	f106 35ff 	add.w	r5, r6, #4294967295
 8017622:	6123      	str	r3, [r4, #16]
 8017624:	d00c      	beq.n	8017640 <_scanf_float+0x358>
 8017626:	2945      	cmp	r1, #69	@ 0x45
 8017628:	d00a      	beq.n	8017640 <_scanf_float+0x358>
 801762a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801762e:	463a      	mov	r2, r7
 8017630:	4640      	mov	r0, r8
 8017632:	4798      	blx	r3
 8017634:	6923      	ldr	r3, [r4, #16]
 8017636:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801763a:	3b01      	subs	r3, #1
 801763c:	1eb5      	subs	r5, r6, #2
 801763e:	6123      	str	r3, [r4, #16]
 8017640:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017644:	463a      	mov	r2, r7
 8017646:	4640      	mov	r0, r8
 8017648:	4798      	blx	r3
 801764a:	462e      	mov	r6, r5
 801764c:	6822      	ldr	r2, [r4, #0]
 801764e:	f012 0210 	ands.w	r2, r2, #16
 8017652:	d001      	beq.n	8017658 <_scanf_float+0x370>
 8017654:	2000      	movs	r0, #0
 8017656:	e68b      	b.n	8017370 <_scanf_float+0x88>
 8017658:	7032      	strb	r2, [r6, #0]
 801765a:	6823      	ldr	r3, [r4, #0]
 801765c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8017660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017664:	d11a      	bne.n	801769c <_scanf_float+0x3b4>
 8017666:	9b02      	ldr	r3, [sp, #8]
 8017668:	454b      	cmp	r3, r9
 801766a:	eba3 0209 	sub.w	r2, r3, r9
 801766e:	d121      	bne.n	80176b4 <_scanf_float+0x3cc>
 8017670:	9901      	ldr	r1, [sp, #4]
 8017672:	2200      	movs	r2, #0
 8017674:	4640      	mov	r0, r8
 8017676:	f002 fc41 	bl	8019efc <_strtod_r>
 801767a:	9b03      	ldr	r3, [sp, #12]
 801767c:	6821      	ldr	r1, [r4, #0]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	f011 0f02 	tst.w	r1, #2
 8017684:	f103 0204 	add.w	r2, r3, #4
 8017688:	d01f      	beq.n	80176ca <_scanf_float+0x3e2>
 801768a:	9903      	ldr	r1, [sp, #12]
 801768c:	600a      	str	r2, [r1, #0]
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	ed83 0b00 	vstr	d0, [r3]
 8017694:	68e3      	ldr	r3, [r4, #12]
 8017696:	3301      	adds	r3, #1
 8017698:	60e3      	str	r3, [r4, #12]
 801769a:	e7db      	b.n	8017654 <_scanf_float+0x36c>
 801769c:	9b04      	ldr	r3, [sp, #16]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d0e6      	beq.n	8017670 <_scanf_float+0x388>
 80176a2:	9905      	ldr	r1, [sp, #20]
 80176a4:	230a      	movs	r3, #10
 80176a6:	3101      	adds	r1, #1
 80176a8:	4640      	mov	r0, r8
 80176aa:	f002 fca7 	bl	8019ffc <_strtol_r>
 80176ae:	9b04      	ldr	r3, [sp, #16]
 80176b0:	9e05      	ldr	r6, [sp, #20]
 80176b2:	1ac2      	subs	r2, r0, r3
 80176b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80176b8:	429e      	cmp	r6, r3
 80176ba:	bf28      	it	cs
 80176bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80176c0:	490d      	ldr	r1, [pc, #52]	@ (80176f8 <_scanf_float+0x410>)
 80176c2:	4630      	mov	r0, r6
 80176c4:	f000 f94e 	bl	8017964 <siprintf>
 80176c8:	e7d2      	b.n	8017670 <_scanf_float+0x388>
 80176ca:	f011 0f04 	tst.w	r1, #4
 80176ce:	9903      	ldr	r1, [sp, #12]
 80176d0:	600a      	str	r2, [r1, #0]
 80176d2:	d1dc      	bne.n	801768e <_scanf_float+0x3a6>
 80176d4:	eeb4 0b40 	vcmp.f64	d0, d0
 80176d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176dc:	681d      	ldr	r5, [r3, #0]
 80176de:	d705      	bvc.n	80176ec <_scanf_float+0x404>
 80176e0:	4806      	ldr	r0, [pc, #24]	@ (80176fc <_scanf_float+0x414>)
 80176e2:	f000 fac5 	bl	8017c70 <nanf>
 80176e6:	ed85 0a00 	vstr	s0, [r5]
 80176ea:	e7d3      	b.n	8017694 <_scanf_float+0x3ac>
 80176ec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80176f0:	e7f9      	b.n	80176e6 <_scanf_float+0x3fe>
 80176f2:	f04f 0900 	mov.w	r9, #0
 80176f6:	e630      	b.n	801735a <_scanf_float+0x72>
 80176f8:	0801b33c 	.word	0x0801b33c
 80176fc:	0801b6d5 	.word	0x0801b6d5

08017700 <std>:
 8017700:	2300      	movs	r3, #0
 8017702:	b510      	push	{r4, lr}
 8017704:	4604      	mov	r4, r0
 8017706:	e9c0 3300 	strd	r3, r3, [r0]
 801770a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801770e:	6083      	str	r3, [r0, #8]
 8017710:	8181      	strh	r1, [r0, #12]
 8017712:	6643      	str	r3, [r0, #100]	@ 0x64
 8017714:	81c2      	strh	r2, [r0, #14]
 8017716:	6183      	str	r3, [r0, #24]
 8017718:	4619      	mov	r1, r3
 801771a:	2208      	movs	r2, #8
 801771c:	305c      	adds	r0, #92	@ 0x5c
 801771e:	f000 fa19 	bl	8017b54 <memset>
 8017722:	4b0d      	ldr	r3, [pc, #52]	@ (8017758 <std+0x58>)
 8017724:	6263      	str	r3, [r4, #36]	@ 0x24
 8017726:	4b0d      	ldr	r3, [pc, #52]	@ (801775c <std+0x5c>)
 8017728:	62a3      	str	r3, [r4, #40]	@ 0x28
 801772a:	4b0d      	ldr	r3, [pc, #52]	@ (8017760 <std+0x60>)
 801772c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801772e:	4b0d      	ldr	r3, [pc, #52]	@ (8017764 <std+0x64>)
 8017730:	6323      	str	r3, [r4, #48]	@ 0x30
 8017732:	4b0d      	ldr	r3, [pc, #52]	@ (8017768 <std+0x68>)
 8017734:	6224      	str	r4, [r4, #32]
 8017736:	429c      	cmp	r4, r3
 8017738:	d006      	beq.n	8017748 <std+0x48>
 801773a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801773e:	4294      	cmp	r4, r2
 8017740:	d002      	beq.n	8017748 <std+0x48>
 8017742:	33d0      	adds	r3, #208	@ 0xd0
 8017744:	429c      	cmp	r4, r3
 8017746:	d105      	bne.n	8017754 <std+0x54>
 8017748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017750:	f000 ba7c 	b.w	8017c4c <__retarget_lock_init_recursive>
 8017754:	bd10      	pop	{r4, pc}
 8017756:	bf00      	nop
 8017758:	080179a5 	.word	0x080179a5
 801775c:	080179c7 	.word	0x080179c7
 8017760:	080179ff 	.word	0x080179ff
 8017764:	08017a23 	.word	0x08017a23
 8017768:	2400105c 	.word	0x2400105c

0801776c <stdio_exit_handler>:
 801776c:	4a02      	ldr	r2, [pc, #8]	@ (8017778 <stdio_exit_handler+0xc>)
 801776e:	4903      	ldr	r1, [pc, #12]	@ (801777c <stdio_exit_handler+0x10>)
 8017770:	4803      	ldr	r0, [pc, #12]	@ (8017780 <stdio_exit_handler+0x14>)
 8017772:	f000 b869 	b.w	8017848 <_fwalk_sglue>
 8017776:	bf00      	nop
 8017778:	2400018c 	.word	0x2400018c
 801777c:	0801a63d 	.word	0x0801a63d
 8017780:	2400019c 	.word	0x2400019c

08017784 <cleanup_stdio>:
 8017784:	6841      	ldr	r1, [r0, #4]
 8017786:	4b0c      	ldr	r3, [pc, #48]	@ (80177b8 <cleanup_stdio+0x34>)
 8017788:	4299      	cmp	r1, r3
 801778a:	b510      	push	{r4, lr}
 801778c:	4604      	mov	r4, r0
 801778e:	d001      	beq.n	8017794 <cleanup_stdio+0x10>
 8017790:	f002 ff54 	bl	801a63c <_fflush_r>
 8017794:	68a1      	ldr	r1, [r4, #8]
 8017796:	4b09      	ldr	r3, [pc, #36]	@ (80177bc <cleanup_stdio+0x38>)
 8017798:	4299      	cmp	r1, r3
 801779a:	d002      	beq.n	80177a2 <cleanup_stdio+0x1e>
 801779c:	4620      	mov	r0, r4
 801779e:	f002 ff4d 	bl	801a63c <_fflush_r>
 80177a2:	68e1      	ldr	r1, [r4, #12]
 80177a4:	4b06      	ldr	r3, [pc, #24]	@ (80177c0 <cleanup_stdio+0x3c>)
 80177a6:	4299      	cmp	r1, r3
 80177a8:	d004      	beq.n	80177b4 <cleanup_stdio+0x30>
 80177aa:	4620      	mov	r0, r4
 80177ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177b0:	f002 bf44 	b.w	801a63c <_fflush_r>
 80177b4:	bd10      	pop	{r4, pc}
 80177b6:	bf00      	nop
 80177b8:	2400105c 	.word	0x2400105c
 80177bc:	240010c4 	.word	0x240010c4
 80177c0:	2400112c 	.word	0x2400112c

080177c4 <global_stdio_init.part.0>:
 80177c4:	b510      	push	{r4, lr}
 80177c6:	4b0b      	ldr	r3, [pc, #44]	@ (80177f4 <global_stdio_init.part.0+0x30>)
 80177c8:	4c0b      	ldr	r4, [pc, #44]	@ (80177f8 <global_stdio_init.part.0+0x34>)
 80177ca:	4a0c      	ldr	r2, [pc, #48]	@ (80177fc <global_stdio_init.part.0+0x38>)
 80177cc:	601a      	str	r2, [r3, #0]
 80177ce:	4620      	mov	r0, r4
 80177d0:	2200      	movs	r2, #0
 80177d2:	2104      	movs	r1, #4
 80177d4:	f7ff ff94 	bl	8017700 <std>
 80177d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80177dc:	2201      	movs	r2, #1
 80177de:	2109      	movs	r1, #9
 80177e0:	f7ff ff8e 	bl	8017700 <std>
 80177e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80177e8:	2202      	movs	r2, #2
 80177ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177ee:	2112      	movs	r1, #18
 80177f0:	f7ff bf86 	b.w	8017700 <std>
 80177f4:	24001194 	.word	0x24001194
 80177f8:	2400105c 	.word	0x2400105c
 80177fc:	0801776d 	.word	0x0801776d

08017800 <__sfp_lock_acquire>:
 8017800:	4801      	ldr	r0, [pc, #4]	@ (8017808 <__sfp_lock_acquire+0x8>)
 8017802:	f000 ba24 	b.w	8017c4e <__retarget_lock_acquire_recursive>
 8017806:	bf00      	nop
 8017808:	2400119d 	.word	0x2400119d

0801780c <__sfp_lock_release>:
 801780c:	4801      	ldr	r0, [pc, #4]	@ (8017814 <__sfp_lock_release+0x8>)
 801780e:	f000 ba1f 	b.w	8017c50 <__retarget_lock_release_recursive>
 8017812:	bf00      	nop
 8017814:	2400119d 	.word	0x2400119d

08017818 <__sinit>:
 8017818:	b510      	push	{r4, lr}
 801781a:	4604      	mov	r4, r0
 801781c:	f7ff fff0 	bl	8017800 <__sfp_lock_acquire>
 8017820:	6a23      	ldr	r3, [r4, #32]
 8017822:	b11b      	cbz	r3, 801782c <__sinit+0x14>
 8017824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017828:	f7ff bff0 	b.w	801780c <__sfp_lock_release>
 801782c:	4b04      	ldr	r3, [pc, #16]	@ (8017840 <__sinit+0x28>)
 801782e:	6223      	str	r3, [r4, #32]
 8017830:	4b04      	ldr	r3, [pc, #16]	@ (8017844 <__sinit+0x2c>)
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d1f5      	bne.n	8017824 <__sinit+0xc>
 8017838:	f7ff ffc4 	bl	80177c4 <global_stdio_init.part.0>
 801783c:	e7f2      	b.n	8017824 <__sinit+0xc>
 801783e:	bf00      	nop
 8017840:	08017785 	.word	0x08017785
 8017844:	24001194 	.word	0x24001194

08017848 <_fwalk_sglue>:
 8017848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801784c:	4607      	mov	r7, r0
 801784e:	4688      	mov	r8, r1
 8017850:	4614      	mov	r4, r2
 8017852:	2600      	movs	r6, #0
 8017854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017858:	f1b9 0901 	subs.w	r9, r9, #1
 801785c:	d505      	bpl.n	801786a <_fwalk_sglue+0x22>
 801785e:	6824      	ldr	r4, [r4, #0]
 8017860:	2c00      	cmp	r4, #0
 8017862:	d1f7      	bne.n	8017854 <_fwalk_sglue+0xc>
 8017864:	4630      	mov	r0, r6
 8017866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801786a:	89ab      	ldrh	r3, [r5, #12]
 801786c:	2b01      	cmp	r3, #1
 801786e:	d907      	bls.n	8017880 <_fwalk_sglue+0x38>
 8017870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017874:	3301      	adds	r3, #1
 8017876:	d003      	beq.n	8017880 <_fwalk_sglue+0x38>
 8017878:	4629      	mov	r1, r5
 801787a:	4638      	mov	r0, r7
 801787c:	47c0      	blx	r8
 801787e:	4306      	orrs	r6, r0
 8017880:	3568      	adds	r5, #104	@ 0x68
 8017882:	e7e9      	b.n	8017858 <_fwalk_sglue+0x10>

08017884 <iprintf>:
 8017884:	b40f      	push	{r0, r1, r2, r3}
 8017886:	b507      	push	{r0, r1, r2, lr}
 8017888:	4906      	ldr	r1, [pc, #24]	@ (80178a4 <iprintf+0x20>)
 801788a:	ab04      	add	r3, sp, #16
 801788c:	6808      	ldr	r0, [r1, #0]
 801788e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017892:	6881      	ldr	r1, [r0, #8]
 8017894:	9301      	str	r3, [sp, #4]
 8017896:	f002 fd35 	bl	801a304 <_vfiprintf_r>
 801789a:	b003      	add	sp, #12
 801789c:	f85d eb04 	ldr.w	lr, [sp], #4
 80178a0:	b004      	add	sp, #16
 80178a2:	4770      	bx	lr
 80178a4:	24000198 	.word	0x24000198

080178a8 <_puts_r>:
 80178a8:	6a03      	ldr	r3, [r0, #32]
 80178aa:	b570      	push	{r4, r5, r6, lr}
 80178ac:	6884      	ldr	r4, [r0, #8]
 80178ae:	4605      	mov	r5, r0
 80178b0:	460e      	mov	r6, r1
 80178b2:	b90b      	cbnz	r3, 80178b8 <_puts_r+0x10>
 80178b4:	f7ff ffb0 	bl	8017818 <__sinit>
 80178b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80178ba:	07db      	lsls	r3, r3, #31
 80178bc:	d405      	bmi.n	80178ca <_puts_r+0x22>
 80178be:	89a3      	ldrh	r3, [r4, #12]
 80178c0:	0598      	lsls	r0, r3, #22
 80178c2:	d402      	bmi.n	80178ca <_puts_r+0x22>
 80178c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178c6:	f000 f9c2 	bl	8017c4e <__retarget_lock_acquire_recursive>
 80178ca:	89a3      	ldrh	r3, [r4, #12]
 80178cc:	0719      	lsls	r1, r3, #28
 80178ce:	d502      	bpl.n	80178d6 <_puts_r+0x2e>
 80178d0:	6923      	ldr	r3, [r4, #16]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d135      	bne.n	8017942 <_puts_r+0x9a>
 80178d6:	4621      	mov	r1, r4
 80178d8:	4628      	mov	r0, r5
 80178da:	f000 f8e5 	bl	8017aa8 <__swsetup_r>
 80178de:	b380      	cbz	r0, 8017942 <_puts_r+0x9a>
 80178e0:	f04f 35ff 	mov.w	r5, #4294967295
 80178e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80178e6:	07da      	lsls	r2, r3, #31
 80178e8:	d405      	bmi.n	80178f6 <_puts_r+0x4e>
 80178ea:	89a3      	ldrh	r3, [r4, #12]
 80178ec:	059b      	lsls	r3, r3, #22
 80178ee:	d402      	bmi.n	80178f6 <_puts_r+0x4e>
 80178f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178f2:	f000 f9ad 	bl	8017c50 <__retarget_lock_release_recursive>
 80178f6:	4628      	mov	r0, r5
 80178f8:	bd70      	pop	{r4, r5, r6, pc}
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	da04      	bge.n	8017908 <_puts_r+0x60>
 80178fe:	69a2      	ldr	r2, [r4, #24]
 8017900:	429a      	cmp	r2, r3
 8017902:	dc17      	bgt.n	8017934 <_puts_r+0x8c>
 8017904:	290a      	cmp	r1, #10
 8017906:	d015      	beq.n	8017934 <_puts_r+0x8c>
 8017908:	6823      	ldr	r3, [r4, #0]
 801790a:	1c5a      	adds	r2, r3, #1
 801790c:	6022      	str	r2, [r4, #0]
 801790e:	7019      	strb	r1, [r3, #0]
 8017910:	68a3      	ldr	r3, [r4, #8]
 8017912:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017916:	3b01      	subs	r3, #1
 8017918:	60a3      	str	r3, [r4, #8]
 801791a:	2900      	cmp	r1, #0
 801791c:	d1ed      	bne.n	80178fa <_puts_r+0x52>
 801791e:	2b00      	cmp	r3, #0
 8017920:	da11      	bge.n	8017946 <_puts_r+0x9e>
 8017922:	4622      	mov	r2, r4
 8017924:	210a      	movs	r1, #10
 8017926:	4628      	mov	r0, r5
 8017928:	f000 f87f 	bl	8017a2a <__swbuf_r>
 801792c:	3001      	adds	r0, #1
 801792e:	d0d7      	beq.n	80178e0 <_puts_r+0x38>
 8017930:	250a      	movs	r5, #10
 8017932:	e7d7      	b.n	80178e4 <_puts_r+0x3c>
 8017934:	4622      	mov	r2, r4
 8017936:	4628      	mov	r0, r5
 8017938:	f000 f877 	bl	8017a2a <__swbuf_r>
 801793c:	3001      	adds	r0, #1
 801793e:	d1e7      	bne.n	8017910 <_puts_r+0x68>
 8017940:	e7ce      	b.n	80178e0 <_puts_r+0x38>
 8017942:	3e01      	subs	r6, #1
 8017944:	e7e4      	b.n	8017910 <_puts_r+0x68>
 8017946:	6823      	ldr	r3, [r4, #0]
 8017948:	1c5a      	adds	r2, r3, #1
 801794a:	6022      	str	r2, [r4, #0]
 801794c:	220a      	movs	r2, #10
 801794e:	701a      	strb	r2, [r3, #0]
 8017950:	e7ee      	b.n	8017930 <_puts_r+0x88>
	...

08017954 <puts>:
 8017954:	4b02      	ldr	r3, [pc, #8]	@ (8017960 <puts+0xc>)
 8017956:	4601      	mov	r1, r0
 8017958:	6818      	ldr	r0, [r3, #0]
 801795a:	f7ff bfa5 	b.w	80178a8 <_puts_r>
 801795e:	bf00      	nop
 8017960:	24000198 	.word	0x24000198

08017964 <siprintf>:
 8017964:	b40e      	push	{r1, r2, r3}
 8017966:	b500      	push	{lr}
 8017968:	b09c      	sub	sp, #112	@ 0x70
 801796a:	ab1d      	add	r3, sp, #116	@ 0x74
 801796c:	9002      	str	r0, [sp, #8]
 801796e:	9006      	str	r0, [sp, #24]
 8017970:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017974:	4809      	ldr	r0, [pc, #36]	@ (801799c <siprintf+0x38>)
 8017976:	9107      	str	r1, [sp, #28]
 8017978:	9104      	str	r1, [sp, #16]
 801797a:	4909      	ldr	r1, [pc, #36]	@ (80179a0 <siprintf+0x3c>)
 801797c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017980:	9105      	str	r1, [sp, #20]
 8017982:	6800      	ldr	r0, [r0, #0]
 8017984:	9301      	str	r3, [sp, #4]
 8017986:	a902      	add	r1, sp, #8
 8017988:	f002 fb96 	bl	801a0b8 <_svfiprintf_r>
 801798c:	9b02      	ldr	r3, [sp, #8]
 801798e:	2200      	movs	r2, #0
 8017990:	701a      	strb	r2, [r3, #0]
 8017992:	b01c      	add	sp, #112	@ 0x70
 8017994:	f85d eb04 	ldr.w	lr, [sp], #4
 8017998:	b003      	add	sp, #12
 801799a:	4770      	bx	lr
 801799c:	24000198 	.word	0x24000198
 80179a0:	ffff0208 	.word	0xffff0208

080179a4 <__sread>:
 80179a4:	b510      	push	{r4, lr}
 80179a6:	460c      	mov	r4, r1
 80179a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179ac:	f000 f900 	bl	8017bb0 <_read_r>
 80179b0:	2800      	cmp	r0, #0
 80179b2:	bfab      	itete	ge
 80179b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80179b6:	89a3      	ldrhlt	r3, [r4, #12]
 80179b8:	181b      	addge	r3, r3, r0
 80179ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80179be:	bfac      	ite	ge
 80179c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80179c2:	81a3      	strhlt	r3, [r4, #12]
 80179c4:	bd10      	pop	{r4, pc}

080179c6 <__swrite>:
 80179c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179ca:	461f      	mov	r7, r3
 80179cc:	898b      	ldrh	r3, [r1, #12]
 80179ce:	05db      	lsls	r3, r3, #23
 80179d0:	4605      	mov	r5, r0
 80179d2:	460c      	mov	r4, r1
 80179d4:	4616      	mov	r6, r2
 80179d6:	d505      	bpl.n	80179e4 <__swrite+0x1e>
 80179d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179dc:	2302      	movs	r3, #2
 80179de:	2200      	movs	r2, #0
 80179e0:	f000 f8d4 	bl	8017b8c <_lseek_r>
 80179e4:	89a3      	ldrh	r3, [r4, #12]
 80179e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80179ee:	81a3      	strh	r3, [r4, #12]
 80179f0:	4632      	mov	r2, r6
 80179f2:	463b      	mov	r3, r7
 80179f4:	4628      	mov	r0, r5
 80179f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179fa:	f000 b8eb 	b.w	8017bd4 <_write_r>

080179fe <__sseek>:
 80179fe:	b510      	push	{r4, lr}
 8017a00:	460c      	mov	r4, r1
 8017a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a06:	f000 f8c1 	bl	8017b8c <_lseek_r>
 8017a0a:	1c43      	adds	r3, r0, #1
 8017a0c:	89a3      	ldrh	r3, [r4, #12]
 8017a0e:	bf15      	itete	ne
 8017a10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017a12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017a16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017a1a:	81a3      	strheq	r3, [r4, #12]
 8017a1c:	bf18      	it	ne
 8017a1e:	81a3      	strhne	r3, [r4, #12]
 8017a20:	bd10      	pop	{r4, pc}

08017a22 <__sclose>:
 8017a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a26:	f000 b8a1 	b.w	8017b6c <_close_r>

08017a2a <__swbuf_r>:
 8017a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a2c:	460e      	mov	r6, r1
 8017a2e:	4614      	mov	r4, r2
 8017a30:	4605      	mov	r5, r0
 8017a32:	b118      	cbz	r0, 8017a3c <__swbuf_r+0x12>
 8017a34:	6a03      	ldr	r3, [r0, #32]
 8017a36:	b90b      	cbnz	r3, 8017a3c <__swbuf_r+0x12>
 8017a38:	f7ff feee 	bl	8017818 <__sinit>
 8017a3c:	69a3      	ldr	r3, [r4, #24]
 8017a3e:	60a3      	str	r3, [r4, #8]
 8017a40:	89a3      	ldrh	r3, [r4, #12]
 8017a42:	071a      	lsls	r2, r3, #28
 8017a44:	d501      	bpl.n	8017a4a <__swbuf_r+0x20>
 8017a46:	6923      	ldr	r3, [r4, #16]
 8017a48:	b943      	cbnz	r3, 8017a5c <__swbuf_r+0x32>
 8017a4a:	4621      	mov	r1, r4
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	f000 f82b 	bl	8017aa8 <__swsetup_r>
 8017a52:	b118      	cbz	r0, 8017a5c <__swbuf_r+0x32>
 8017a54:	f04f 37ff 	mov.w	r7, #4294967295
 8017a58:	4638      	mov	r0, r7
 8017a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a5c:	6823      	ldr	r3, [r4, #0]
 8017a5e:	6922      	ldr	r2, [r4, #16]
 8017a60:	1a98      	subs	r0, r3, r2
 8017a62:	6963      	ldr	r3, [r4, #20]
 8017a64:	b2f6      	uxtb	r6, r6
 8017a66:	4283      	cmp	r3, r0
 8017a68:	4637      	mov	r7, r6
 8017a6a:	dc05      	bgt.n	8017a78 <__swbuf_r+0x4e>
 8017a6c:	4621      	mov	r1, r4
 8017a6e:	4628      	mov	r0, r5
 8017a70:	f002 fde4 	bl	801a63c <_fflush_r>
 8017a74:	2800      	cmp	r0, #0
 8017a76:	d1ed      	bne.n	8017a54 <__swbuf_r+0x2a>
 8017a78:	68a3      	ldr	r3, [r4, #8]
 8017a7a:	3b01      	subs	r3, #1
 8017a7c:	60a3      	str	r3, [r4, #8]
 8017a7e:	6823      	ldr	r3, [r4, #0]
 8017a80:	1c5a      	adds	r2, r3, #1
 8017a82:	6022      	str	r2, [r4, #0]
 8017a84:	701e      	strb	r6, [r3, #0]
 8017a86:	6962      	ldr	r2, [r4, #20]
 8017a88:	1c43      	adds	r3, r0, #1
 8017a8a:	429a      	cmp	r2, r3
 8017a8c:	d004      	beq.n	8017a98 <__swbuf_r+0x6e>
 8017a8e:	89a3      	ldrh	r3, [r4, #12]
 8017a90:	07db      	lsls	r3, r3, #31
 8017a92:	d5e1      	bpl.n	8017a58 <__swbuf_r+0x2e>
 8017a94:	2e0a      	cmp	r6, #10
 8017a96:	d1df      	bne.n	8017a58 <__swbuf_r+0x2e>
 8017a98:	4621      	mov	r1, r4
 8017a9a:	4628      	mov	r0, r5
 8017a9c:	f002 fdce 	bl	801a63c <_fflush_r>
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	d0d9      	beq.n	8017a58 <__swbuf_r+0x2e>
 8017aa4:	e7d6      	b.n	8017a54 <__swbuf_r+0x2a>
	...

08017aa8 <__swsetup_r>:
 8017aa8:	b538      	push	{r3, r4, r5, lr}
 8017aaa:	4b29      	ldr	r3, [pc, #164]	@ (8017b50 <__swsetup_r+0xa8>)
 8017aac:	4605      	mov	r5, r0
 8017aae:	6818      	ldr	r0, [r3, #0]
 8017ab0:	460c      	mov	r4, r1
 8017ab2:	b118      	cbz	r0, 8017abc <__swsetup_r+0x14>
 8017ab4:	6a03      	ldr	r3, [r0, #32]
 8017ab6:	b90b      	cbnz	r3, 8017abc <__swsetup_r+0x14>
 8017ab8:	f7ff feae 	bl	8017818 <__sinit>
 8017abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ac0:	0719      	lsls	r1, r3, #28
 8017ac2:	d422      	bmi.n	8017b0a <__swsetup_r+0x62>
 8017ac4:	06da      	lsls	r2, r3, #27
 8017ac6:	d407      	bmi.n	8017ad8 <__swsetup_r+0x30>
 8017ac8:	2209      	movs	r2, #9
 8017aca:	602a      	str	r2, [r5, #0]
 8017acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ad0:	81a3      	strh	r3, [r4, #12]
 8017ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ad6:	e033      	b.n	8017b40 <__swsetup_r+0x98>
 8017ad8:	0758      	lsls	r0, r3, #29
 8017ada:	d512      	bpl.n	8017b02 <__swsetup_r+0x5a>
 8017adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ade:	b141      	cbz	r1, 8017af2 <__swsetup_r+0x4a>
 8017ae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017ae4:	4299      	cmp	r1, r3
 8017ae6:	d002      	beq.n	8017aee <__swsetup_r+0x46>
 8017ae8:	4628      	mov	r0, r5
 8017aea:	f000 fea7 	bl	801883c <_free_r>
 8017aee:	2300      	movs	r3, #0
 8017af0:	6363      	str	r3, [r4, #52]	@ 0x34
 8017af2:	89a3      	ldrh	r3, [r4, #12]
 8017af4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017af8:	81a3      	strh	r3, [r4, #12]
 8017afa:	2300      	movs	r3, #0
 8017afc:	6063      	str	r3, [r4, #4]
 8017afe:	6923      	ldr	r3, [r4, #16]
 8017b00:	6023      	str	r3, [r4, #0]
 8017b02:	89a3      	ldrh	r3, [r4, #12]
 8017b04:	f043 0308 	orr.w	r3, r3, #8
 8017b08:	81a3      	strh	r3, [r4, #12]
 8017b0a:	6923      	ldr	r3, [r4, #16]
 8017b0c:	b94b      	cbnz	r3, 8017b22 <__swsetup_r+0x7a>
 8017b0e:	89a3      	ldrh	r3, [r4, #12]
 8017b10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017b18:	d003      	beq.n	8017b22 <__swsetup_r+0x7a>
 8017b1a:	4621      	mov	r1, r4
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	f002 fddb 	bl	801a6d8 <__smakebuf_r>
 8017b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b26:	f013 0201 	ands.w	r2, r3, #1
 8017b2a:	d00a      	beq.n	8017b42 <__swsetup_r+0x9a>
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	60a2      	str	r2, [r4, #8]
 8017b30:	6962      	ldr	r2, [r4, #20]
 8017b32:	4252      	negs	r2, r2
 8017b34:	61a2      	str	r2, [r4, #24]
 8017b36:	6922      	ldr	r2, [r4, #16]
 8017b38:	b942      	cbnz	r2, 8017b4c <__swsetup_r+0xa4>
 8017b3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017b3e:	d1c5      	bne.n	8017acc <__swsetup_r+0x24>
 8017b40:	bd38      	pop	{r3, r4, r5, pc}
 8017b42:	0799      	lsls	r1, r3, #30
 8017b44:	bf58      	it	pl
 8017b46:	6962      	ldrpl	r2, [r4, #20]
 8017b48:	60a2      	str	r2, [r4, #8]
 8017b4a:	e7f4      	b.n	8017b36 <__swsetup_r+0x8e>
 8017b4c:	2000      	movs	r0, #0
 8017b4e:	e7f7      	b.n	8017b40 <__swsetup_r+0x98>
 8017b50:	24000198 	.word	0x24000198

08017b54 <memset>:
 8017b54:	4402      	add	r2, r0
 8017b56:	4603      	mov	r3, r0
 8017b58:	4293      	cmp	r3, r2
 8017b5a:	d100      	bne.n	8017b5e <memset+0xa>
 8017b5c:	4770      	bx	lr
 8017b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8017b62:	e7f9      	b.n	8017b58 <memset+0x4>

08017b64 <_localeconv_r>:
 8017b64:	4800      	ldr	r0, [pc, #0]	@ (8017b68 <_localeconv_r+0x4>)
 8017b66:	4770      	bx	lr
 8017b68:	240002d8 	.word	0x240002d8

08017b6c <_close_r>:
 8017b6c:	b538      	push	{r3, r4, r5, lr}
 8017b6e:	4d06      	ldr	r5, [pc, #24]	@ (8017b88 <_close_r+0x1c>)
 8017b70:	2300      	movs	r3, #0
 8017b72:	4604      	mov	r4, r0
 8017b74:	4608      	mov	r0, r1
 8017b76:	602b      	str	r3, [r5, #0]
 8017b78:	f7ef f8fe 	bl	8006d78 <_close>
 8017b7c:	1c43      	adds	r3, r0, #1
 8017b7e:	d102      	bne.n	8017b86 <_close_r+0x1a>
 8017b80:	682b      	ldr	r3, [r5, #0]
 8017b82:	b103      	cbz	r3, 8017b86 <_close_r+0x1a>
 8017b84:	6023      	str	r3, [r4, #0]
 8017b86:	bd38      	pop	{r3, r4, r5, pc}
 8017b88:	24001198 	.word	0x24001198

08017b8c <_lseek_r>:
 8017b8c:	b538      	push	{r3, r4, r5, lr}
 8017b8e:	4d07      	ldr	r5, [pc, #28]	@ (8017bac <_lseek_r+0x20>)
 8017b90:	4604      	mov	r4, r0
 8017b92:	4608      	mov	r0, r1
 8017b94:	4611      	mov	r1, r2
 8017b96:	2200      	movs	r2, #0
 8017b98:	602a      	str	r2, [r5, #0]
 8017b9a:	461a      	mov	r2, r3
 8017b9c:	f7ef f913 	bl	8006dc6 <_lseek>
 8017ba0:	1c43      	adds	r3, r0, #1
 8017ba2:	d102      	bne.n	8017baa <_lseek_r+0x1e>
 8017ba4:	682b      	ldr	r3, [r5, #0]
 8017ba6:	b103      	cbz	r3, 8017baa <_lseek_r+0x1e>
 8017ba8:	6023      	str	r3, [r4, #0]
 8017baa:	bd38      	pop	{r3, r4, r5, pc}
 8017bac:	24001198 	.word	0x24001198

08017bb0 <_read_r>:
 8017bb0:	b538      	push	{r3, r4, r5, lr}
 8017bb2:	4d07      	ldr	r5, [pc, #28]	@ (8017bd0 <_read_r+0x20>)
 8017bb4:	4604      	mov	r4, r0
 8017bb6:	4608      	mov	r0, r1
 8017bb8:	4611      	mov	r1, r2
 8017bba:	2200      	movs	r2, #0
 8017bbc:	602a      	str	r2, [r5, #0]
 8017bbe:	461a      	mov	r2, r3
 8017bc0:	f7ef f8bd 	bl	8006d3e <_read>
 8017bc4:	1c43      	adds	r3, r0, #1
 8017bc6:	d102      	bne.n	8017bce <_read_r+0x1e>
 8017bc8:	682b      	ldr	r3, [r5, #0]
 8017bca:	b103      	cbz	r3, 8017bce <_read_r+0x1e>
 8017bcc:	6023      	str	r3, [r4, #0]
 8017bce:	bd38      	pop	{r3, r4, r5, pc}
 8017bd0:	24001198 	.word	0x24001198

08017bd4 <_write_r>:
 8017bd4:	b538      	push	{r3, r4, r5, lr}
 8017bd6:	4d07      	ldr	r5, [pc, #28]	@ (8017bf4 <_write_r+0x20>)
 8017bd8:	4604      	mov	r4, r0
 8017bda:	4608      	mov	r0, r1
 8017bdc:	4611      	mov	r1, r2
 8017bde:	2200      	movs	r2, #0
 8017be0:	602a      	str	r2, [r5, #0]
 8017be2:	461a      	mov	r2, r3
 8017be4:	f7ec fc94 	bl	8004510 <_write>
 8017be8:	1c43      	adds	r3, r0, #1
 8017bea:	d102      	bne.n	8017bf2 <_write_r+0x1e>
 8017bec:	682b      	ldr	r3, [r5, #0]
 8017bee:	b103      	cbz	r3, 8017bf2 <_write_r+0x1e>
 8017bf0:	6023      	str	r3, [r4, #0]
 8017bf2:	bd38      	pop	{r3, r4, r5, pc}
 8017bf4:	24001198 	.word	0x24001198

08017bf8 <__errno>:
 8017bf8:	4b01      	ldr	r3, [pc, #4]	@ (8017c00 <__errno+0x8>)
 8017bfa:	6818      	ldr	r0, [r3, #0]
 8017bfc:	4770      	bx	lr
 8017bfe:	bf00      	nop
 8017c00:	24000198 	.word	0x24000198

08017c04 <__libc_init_array>:
 8017c04:	b570      	push	{r4, r5, r6, lr}
 8017c06:	4d0d      	ldr	r5, [pc, #52]	@ (8017c3c <__libc_init_array+0x38>)
 8017c08:	4c0d      	ldr	r4, [pc, #52]	@ (8017c40 <__libc_init_array+0x3c>)
 8017c0a:	1b64      	subs	r4, r4, r5
 8017c0c:	10a4      	asrs	r4, r4, #2
 8017c0e:	2600      	movs	r6, #0
 8017c10:	42a6      	cmp	r6, r4
 8017c12:	d109      	bne.n	8017c28 <__libc_init_array+0x24>
 8017c14:	4d0b      	ldr	r5, [pc, #44]	@ (8017c44 <__libc_init_array+0x40>)
 8017c16:	4c0c      	ldr	r4, [pc, #48]	@ (8017c48 <__libc_init_array+0x44>)
 8017c18:	f003 fa20 	bl	801b05c <_init>
 8017c1c:	1b64      	subs	r4, r4, r5
 8017c1e:	10a4      	asrs	r4, r4, #2
 8017c20:	2600      	movs	r6, #0
 8017c22:	42a6      	cmp	r6, r4
 8017c24:	d105      	bne.n	8017c32 <__libc_init_array+0x2e>
 8017c26:	bd70      	pop	{r4, r5, r6, pc}
 8017c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c2c:	4798      	blx	r3
 8017c2e:	3601      	adds	r6, #1
 8017c30:	e7ee      	b.n	8017c10 <__libc_init_array+0xc>
 8017c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c36:	4798      	blx	r3
 8017c38:	3601      	adds	r6, #1
 8017c3a:	e7f2      	b.n	8017c22 <__libc_init_array+0x1e>
 8017c3c:	0801b740 	.word	0x0801b740
 8017c40:	0801b740 	.word	0x0801b740
 8017c44:	0801b740 	.word	0x0801b740
 8017c48:	0801b744 	.word	0x0801b744

08017c4c <__retarget_lock_init_recursive>:
 8017c4c:	4770      	bx	lr

08017c4e <__retarget_lock_acquire_recursive>:
 8017c4e:	4770      	bx	lr

08017c50 <__retarget_lock_release_recursive>:
 8017c50:	4770      	bx	lr

08017c52 <memcpy>:
 8017c52:	440a      	add	r2, r1
 8017c54:	4291      	cmp	r1, r2
 8017c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8017c5a:	d100      	bne.n	8017c5e <memcpy+0xc>
 8017c5c:	4770      	bx	lr
 8017c5e:	b510      	push	{r4, lr}
 8017c60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c68:	4291      	cmp	r1, r2
 8017c6a:	d1f9      	bne.n	8017c60 <memcpy+0xe>
 8017c6c:	bd10      	pop	{r4, pc}
	...

08017c70 <nanf>:
 8017c70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017c78 <nanf+0x8>
 8017c74:	4770      	bx	lr
 8017c76:	bf00      	nop
 8017c78:	7fc00000 	.word	0x7fc00000

08017c7c <quorem>:
 8017c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c80:	6903      	ldr	r3, [r0, #16]
 8017c82:	690c      	ldr	r4, [r1, #16]
 8017c84:	42a3      	cmp	r3, r4
 8017c86:	4607      	mov	r7, r0
 8017c88:	db7e      	blt.n	8017d88 <quorem+0x10c>
 8017c8a:	3c01      	subs	r4, #1
 8017c8c:	f101 0814 	add.w	r8, r1, #20
 8017c90:	00a3      	lsls	r3, r4, #2
 8017c92:	f100 0514 	add.w	r5, r0, #20
 8017c96:	9300      	str	r3, [sp, #0]
 8017c98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017c9c:	9301      	str	r3, [sp, #4]
 8017c9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017ca2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ca6:	3301      	adds	r3, #1
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017cae:	fbb2 f6f3 	udiv	r6, r2, r3
 8017cb2:	d32e      	bcc.n	8017d12 <quorem+0x96>
 8017cb4:	f04f 0a00 	mov.w	sl, #0
 8017cb8:	46c4      	mov	ip, r8
 8017cba:	46ae      	mov	lr, r5
 8017cbc:	46d3      	mov	fp, sl
 8017cbe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017cc2:	b298      	uxth	r0, r3
 8017cc4:	fb06 a000 	mla	r0, r6, r0, sl
 8017cc8:	0c02      	lsrs	r2, r0, #16
 8017cca:	0c1b      	lsrs	r3, r3, #16
 8017ccc:	fb06 2303 	mla	r3, r6, r3, r2
 8017cd0:	f8de 2000 	ldr.w	r2, [lr]
 8017cd4:	b280      	uxth	r0, r0
 8017cd6:	b292      	uxth	r2, r2
 8017cd8:	1a12      	subs	r2, r2, r0
 8017cda:	445a      	add	r2, fp
 8017cdc:	f8de 0000 	ldr.w	r0, [lr]
 8017ce0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017ce4:	b29b      	uxth	r3, r3
 8017ce6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017cea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8017cee:	b292      	uxth	r2, r2
 8017cf0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8017cf4:	45e1      	cmp	r9, ip
 8017cf6:	f84e 2b04 	str.w	r2, [lr], #4
 8017cfa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8017cfe:	d2de      	bcs.n	8017cbe <quorem+0x42>
 8017d00:	9b00      	ldr	r3, [sp, #0]
 8017d02:	58eb      	ldr	r3, [r5, r3]
 8017d04:	b92b      	cbnz	r3, 8017d12 <quorem+0x96>
 8017d06:	9b01      	ldr	r3, [sp, #4]
 8017d08:	3b04      	subs	r3, #4
 8017d0a:	429d      	cmp	r5, r3
 8017d0c:	461a      	mov	r2, r3
 8017d0e:	d32f      	bcc.n	8017d70 <quorem+0xf4>
 8017d10:	613c      	str	r4, [r7, #16]
 8017d12:	4638      	mov	r0, r7
 8017d14:	f001 f956 	bl	8018fc4 <__mcmp>
 8017d18:	2800      	cmp	r0, #0
 8017d1a:	db25      	blt.n	8017d68 <quorem+0xec>
 8017d1c:	4629      	mov	r1, r5
 8017d1e:	2000      	movs	r0, #0
 8017d20:	f858 2b04 	ldr.w	r2, [r8], #4
 8017d24:	f8d1 c000 	ldr.w	ip, [r1]
 8017d28:	fa1f fe82 	uxth.w	lr, r2
 8017d2c:	fa1f f38c 	uxth.w	r3, ip
 8017d30:	eba3 030e 	sub.w	r3, r3, lr
 8017d34:	4403      	add	r3, r0
 8017d36:	0c12      	lsrs	r2, r2, #16
 8017d38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017d3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8017d40:	b29b      	uxth	r3, r3
 8017d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d46:	45c1      	cmp	r9, r8
 8017d48:	f841 3b04 	str.w	r3, [r1], #4
 8017d4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017d50:	d2e6      	bcs.n	8017d20 <quorem+0xa4>
 8017d52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d5a:	b922      	cbnz	r2, 8017d66 <quorem+0xea>
 8017d5c:	3b04      	subs	r3, #4
 8017d5e:	429d      	cmp	r5, r3
 8017d60:	461a      	mov	r2, r3
 8017d62:	d30b      	bcc.n	8017d7c <quorem+0x100>
 8017d64:	613c      	str	r4, [r7, #16]
 8017d66:	3601      	adds	r6, #1
 8017d68:	4630      	mov	r0, r6
 8017d6a:	b003      	add	sp, #12
 8017d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d70:	6812      	ldr	r2, [r2, #0]
 8017d72:	3b04      	subs	r3, #4
 8017d74:	2a00      	cmp	r2, #0
 8017d76:	d1cb      	bne.n	8017d10 <quorem+0x94>
 8017d78:	3c01      	subs	r4, #1
 8017d7a:	e7c6      	b.n	8017d0a <quorem+0x8e>
 8017d7c:	6812      	ldr	r2, [r2, #0]
 8017d7e:	3b04      	subs	r3, #4
 8017d80:	2a00      	cmp	r2, #0
 8017d82:	d1ef      	bne.n	8017d64 <quorem+0xe8>
 8017d84:	3c01      	subs	r4, #1
 8017d86:	e7ea      	b.n	8017d5e <quorem+0xe2>
 8017d88:	2000      	movs	r0, #0
 8017d8a:	e7ee      	b.n	8017d6a <quorem+0xee>
 8017d8c:	0000      	movs	r0, r0
	...

08017d90 <_dtoa_r>:
 8017d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d94:	ed2d 8b02 	vpush	{d8}
 8017d98:	69c7      	ldr	r7, [r0, #28]
 8017d9a:	b091      	sub	sp, #68	@ 0x44
 8017d9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017da0:	ec55 4b10 	vmov	r4, r5, d0
 8017da4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8017da6:	9107      	str	r1, [sp, #28]
 8017da8:	4681      	mov	r9, r0
 8017daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8017dac:	930d      	str	r3, [sp, #52]	@ 0x34
 8017dae:	b97f      	cbnz	r7, 8017dd0 <_dtoa_r+0x40>
 8017db0:	2010      	movs	r0, #16
 8017db2:	f000 fd8d 	bl	80188d0 <malloc>
 8017db6:	4602      	mov	r2, r0
 8017db8:	f8c9 001c 	str.w	r0, [r9, #28]
 8017dbc:	b920      	cbnz	r0, 8017dc8 <_dtoa_r+0x38>
 8017dbe:	4ba0      	ldr	r3, [pc, #640]	@ (8018040 <_dtoa_r+0x2b0>)
 8017dc0:	21ef      	movs	r1, #239	@ 0xef
 8017dc2:	48a0      	ldr	r0, [pc, #640]	@ (8018044 <_dtoa_r+0x2b4>)
 8017dc4:	f002 fd2c 	bl	801a820 <__assert_func>
 8017dc8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8017dcc:	6007      	str	r7, [r0, #0]
 8017dce:	60c7      	str	r7, [r0, #12]
 8017dd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8017dd4:	6819      	ldr	r1, [r3, #0]
 8017dd6:	b159      	cbz	r1, 8017df0 <_dtoa_r+0x60>
 8017dd8:	685a      	ldr	r2, [r3, #4]
 8017dda:	604a      	str	r2, [r1, #4]
 8017ddc:	2301      	movs	r3, #1
 8017dde:	4093      	lsls	r3, r2
 8017de0:	608b      	str	r3, [r1, #8]
 8017de2:	4648      	mov	r0, r9
 8017de4:	f000 fe6a 	bl	8018abc <_Bfree>
 8017de8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8017dec:	2200      	movs	r2, #0
 8017dee:	601a      	str	r2, [r3, #0]
 8017df0:	1e2b      	subs	r3, r5, #0
 8017df2:	bfbb      	ittet	lt
 8017df4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8017df8:	9303      	strlt	r3, [sp, #12]
 8017dfa:	2300      	movge	r3, #0
 8017dfc:	2201      	movlt	r2, #1
 8017dfe:	bfac      	ite	ge
 8017e00:	6033      	strge	r3, [r6, #0]
 8017e02:	6032      	strlt	r2, [r6, #0]
 8017e04:	4b90      	ldr	r3, [pc, #576]	@ (8018048 <_dtoa_r+0x2b8>)
 8017e06:	9e03      	ldr	r6, [sp, #12]
 8017e08:	43b3      	bics	r3, r6
 8017e0a:	d110      	bne.n	8017e2e <_dtoa_r+0x9e>
 8017e0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017e0e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8017e12:	6013      	str	r3, [r2, #0]
 8017e14:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8017e18:	4323      	orrs	r3, r4
 8017e1a:	f000 84de 	beq.w	80187da <_dtoa_r+0xa4a>
 8017e1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017e20:	4f8a      	ldr	r7, [pc, #552]	@ (801804c <_dtoa_r+0x2bc>)
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	f000 84e0 	beq.w	80187e8 <_dtoa_r+0xa58>
 8017e28:	1cfb      	adds	r3, r7, #3
 8017e2a:	f000 bcdb 	b.w	80187e4 <_dtoa_r+0xa54>
 8017e2e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8017e32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e3a:	d10a      	bne.n	8017e52 <_dtoa_r+0xc2>
 8017e3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017e3e:	2301      	movs	r3, #1
 8017e40:	6013      	str	r3, [r2, #0]
 8017e42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017e44:	b113      	cbz	r3, 8017e4c <_dtoa_r+0xbc>
 8017e46:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8017e48:	4b81      	ldr	r3, [pc, #516]	@ (8018050 <_dtoa_r+0x2c0>)
 8017e4a:	6013      	str	r3, [r2, #0]
 8017e4c:	4f81      	ldr	r7, [pc, #516]	@ (8018054 <_dtoa_r+0x2c4>)
 8017e4e:	f000 bccb 	b.w	80187e8 <_dtoa_r+0xa58>
 8017e52:	aa0e      	add	r2, sp, #56	@ 0x38
 8017e54:	a90f      	add	r1, sp, #60	@ 0x3c
 8017e56:	4648      	mov	r0, r9
 8017e58:	eeb0 0b48 	vmov.f64	d0, d8
 8017e5c:	f001 f9d2 	bl	8019204 <__d2b>
 8017e60:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8017e64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017e66:	9001      	str	r0, [sp, #4]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d045      	beq.n	8017ef8 <_dtoa_r+0x168>
 8017e6c:	eeb0 7b48 	vmov.f64	d7, d8
 8017e70:	ee18 1a90 	vmov	r1, s17
 8017e74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8017e78:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8017e7c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8017e80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8017e84:	2500      	movs	r5, #0
 8017e86:	ee07 1a90 	vmov	s15, r1
 8017e8a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8017e8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018028 <_dtoa_r+0x298>
 8017e92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017e96:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8018030 <_dtoa_r+0x2a0>
 8017e9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017e9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018038 <_dtoa_r+0x2a8>
 8017ea2:	ee07 3a90 	vmov	s15, r3
 8017ea6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8017eaa:	eeb0 7b46 	vmov.f64	d7, d6
 8017eae:	eea4 7b05 	vfma.f64	d7, d4, d5
 8017eb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017eb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ebe:	ee16 8a90 	vmov	r8, s13
 8017ec2:	d508      	bpl.n	8017ed6 <_dtoa_r+0x146>
 8017ec4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017ec8:	eeb4 6b47 	vcmp.f64	d6, d7
 8017ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ed0:	bf18      	it	ne
 8017ed2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8017ed6:	f1b8 0f16 	cmp.w	r8, #22
 8017eda:	d82b      	bhi.n	8017f34 <_dtoa_r+0x1a4>
 8017edc:	495e      	ldr	r1, [pc, #376]	@ (8018058 <_dtoa_r+0x2c8>)
 8017ede:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8017ee2:	ed91 7b00 	vldr	d7, [r1]
 8017ee6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eee:	d501      	bpl.n	8017ef4 <_dtoa_r+0x164>
 8017ef0:	f108 38ff 	add.w	r8, r8, #4294967295
 8017ef4:	2100      	movs	r1, #0
 8017ef6:	e01e      	b.n	8017f36 <_dtoa_r+0x1a6>
 8017ef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017efa:	4413      	add	r3, r2
 8017efc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8017f00:	2920      	cmp	r1, #32
 8017f02:	bfc1      	itttt	gt
 8017f04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8017f08:	408e      	lslgt	r6, r1
 8017f0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8017f0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8017f12:	bfd6      	itet	le
 8017f14:	f1c1 0120 	rsble	r1, r1, #32
 8017f18:	4331      	orrgt	r1, r6
 8017f1a:	fa04 f101 	lslle.w	r1, r4, r1
 8017f1e:	ee07 1a90 	vmov	s15, r1
 8017f22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017f26:	3b01      	subs	r3, #1
 8017f28:	ee17 1a90 	vmov	r1, s15
 8017f2c:	2501      	movs	r5, #1
 8017f2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8017f32:	e7a8      	b.n	8017e86 <_dtoa_r+0xf6>
 8017f34:	2101      	movs	r1, #1
 8017f36:	1ad2      	subs	r2, r2, r3
 8017f38:	1e53      	subs	r3, r2, #1
 8017f3a:	9306      	str	r3, [sp, #24]
 8017f3c:	bf45      	ittet	mi
 8017f3e:	f1c2 0301 	rsbmi	r3, r2, #1
 8017f42:	9305      	strmi	r3, [sp, #20]
 8017f44:	2300      	movpl	r3, #0
 8017f46:	2300      	movmi	r3, #0
 8017f48:	bf4c      	ite	mi
 8017f4a:	9306      	strmi	r3, [sp, #24]
 8017f4c:	9305      	strpl	r3, [sp, #20]
 8017f4e:	f1b8 0f00 	cmp.w	r8, #0
 8017f52:	910c      	str	r1, [sp, #48]	@ 0x30
 8017f54:	db18      	blt.n	8017f88 <_dtoa_r+0x1f8>
 8017f56:	9b06      	ldr	r3, [sp, #24]
 8017f58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8017f5c:	4443      	add	r3, r8
 8017f5e:	9306      	str	r3, [sp, #24]
 8017f60:	2300      	movs	r3, #0
 8017f62:	9a07      	ldr	r2, [sp, #28]
 8017f64:	2a09      	cmp	r2, #9
 8017f66:	d849      	bhi.n	8017ffc <_dtoa_r+0x26c>
 8017f68:	2a05      	cmp	r2, #5
 8017f6a:	bfc4      	itt	gt
 8017f6c:	3a04      	subgt	r2, #4
 8017f6e:	9207      	strgt	r2, [sp, #28]
 8017f70:	9a07      	ldr	r2, [sp, #28]
 8017f72:	f1a2 0202 	sub.w	r2, r2, #2
 8017f76:	bfcc      	ite	gt
 8017f78:	2400      	movgt	r4, #0
 8017f7a:	2401      	movle	r4, #1
 8017f7c:	2a03      	cmp	r2, #3
 8017f7e:	d848      	bhi.n	8018012 <_dtoa_r+0x282>
 8017f80:	e8df f002 	tbb	[pc, r2]
 8017f84:	3a2c2e0b 	.word	0x3a2c2e0b
 8017f88:	9b05      	ldr	r3, [sp, #20]
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	eba3 0308 	sub.w	r3, r3, r8
 8017f90:	9305      	str	r3, [sp, #20]
 8017f92:	920a      	str	r2, [sp, #40]	@ 0x28
 8017f94:	f1c8 0300 	rsb	r3, r8, #0
 8017f98:	e7e3      	b.n	8017f62 <_dtoa_r+0x1d2>
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	9208      	str	r2, [sp, #32]
 8017f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017fa0:	2a00      	cmp	r2, #0
 8017fa2:	dc39      	bgt.n	8018018 <_dtoa_r+0x288>
 8017fa4:	f04f 0b01 	mov.w	fp, #1
 8017fa8:	46da      	mov	sl, fp
 8017faa:	465a      	mov	r2, fp
 8017fac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8017fb0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8017fb4:	2100      	movs	r1, #0
 8017fb6:	2004      	movs	r0, #4
 8017fb8:	f100 0614 	add.w	r6, r0, #20
 8017fbc:	4296      	cmp	r6, r2
 8017fbe:	d930      	bls.n	8018022 <_dtoa_r+0x292>
 8017fc0:	6079      	str	r1, [r7, #4]
 8017fc2:	4648      	mov	r0, r9
 8017fc4:	9304      	str	r3, [sp, #16]
 8017fc6:	f000 fd39 	bl	8018a3c <_Balloc>
 8017fca:	9b04      	ldr	r3, [sp, #16]
 8017fcc:	4607      	mov	r7, r0
 8017fce:	2800      	cmp	r0, #0
 8017fd0:	d146      	bne.n	8018060 <_dtoa_r+0x2d0>
 8017fd2:	4b22      	ldr	r3, [pc, #136]	@ (801805c <_dtoa_r+0x2cc>)
 8017fd4:	4602      	mov	r2, r0
 8017fd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8017fda:	e6f2      	b.n	8017dc2 <_dtoa_r+0x32>
 8017fdc:	2201      	movs	r2, #1
 8017fde:	e7dd      	b.n	8017f9c <_dtoa_r+0x20c>
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	9208      	str	r2, [sp, #32]
 8017fe4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017fe6:	eb08 0b02 	add.w	fp, r8, r2
 8017fea:	f10b 0a01 	add.w	sl, fp, #1
 8017fee:	4652      	mov	r2, sl
 8017ff0:	2a01      	cmp	r2, #1
 8017ff2:	bfb8      	it	lt
 8017ff4:	2201      	movlt	r2, #1
 8017ff6:	e7db      	b.n	8017fb0 <_dtoa_r+0x220>
 8017ff8:	2201      	movs	r2, #1
 8017ffa:	e7f2      	b.n	8017fe2 <_dtoa_r+0x252>
 8017ffc:	2401      	movs	r4, #1
 8017ffe:	2200      	movs	r2, #0
 8018000:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8018004:	f04f 3bff 	mov.w	fp, #4294967295
 8018008:	2100      	movs	r1, #0
 801800a:	46da      	mov	sl, fp
 801800c:	2212      	movs	r2, #18
 801800e:	9109      	str	r1, [sp, #36]	@ 0x24
 8018010:	e7ce      	b.n	8017fb0 <_dtoa_r+0x220>
 8018012:	2201      	movs	r2, #1
 8018014:	9208      	str	r2, [sp, #32]
 8018016:	e7f5      	b.n	8018004 <_dtoa_r+0x274>
 8018018:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801801c:	46da      	mov	sl, fp
 801801e:	465a      	mov	r2, fp
 8018020:	e7c6      	b.n	8017fb0 <_dtoa_r+0x220>
 8018022:	3101      	adds	r1, #1
 8018024:	0040      	lsls	r0, r0, #1
 8018026:	e7c7      	b.n	8017fb8 <_dtoa_r+0x228>
 8018028:	636f4361 	.word	0x636f4361
 801802c:	3fd287a7 	.word	0x3fd287a7
 8018030:	8b60c8b3 	.word	0x8b60c8b3
 8018034:	3fc68a28 	.word	0x3fc68a28
 8018038:	509f79fb 	.word	0x509f79fb
 801803c:	3fd34413 	.word	0x3fd34413
 8018040:	0801b34e 	.word	0x0801b34e
 8018044:	0801b365 	.word	0x0801b365
 8018048:	7ff00000 	.word	0x7ff00000
 801804c:	0801b34a 	.word	0x0801b34a
 8018050:	0801b319 	.word	0x0801b319
 8018054:	0801b318 	.word	0x0801b318
 8018058:	0801b460 	.word	0x0801b460
 801805c:	0801b3bd 	.word	0x0801b3bd
 8018060:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8018064:	f1ba 0f0e 	cmp.w	sl, #14
 8018068:	6010      	str	r0, [r2, #0]
 801806a:	d86f      	bhi.n	801814c <_dtoa_r+0x3bc>
 801806c:	2c00      	cmp	r4, #0
 801806e:	d06d      	beq.n	801814c <_dtoa_r+0x3bc>
 8018070:	f1b8 0f00 	cmp.w	r8, #0
 8018074:	f340 80c2 	ble.w	80181fc <_dtoa_r+0x46c>
 8018078:	4aca      	ldr	r2, [pc, #808]	@ (80183a4 <_dtoa_r+0x614>)
 801807a:	f008 010f 	and.w	r1, r8, #15
 801807e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018082:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8018086:	ed92 7b00 	vldr	d7, [r2]
 801808a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801808e:	f000 80a9 	beq.w	80181e4 <_dtoa_r+0x454>
 8018092:	4ac5      	ldr	r2, [pc, #788]	@ (80183a8 <_dtoa_r+0x618>)
 8018094:	ed92 6b08 	vldr	d6, [r2, #32]
 8018098:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801809c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80180a0:	f001 010f 	and.w	r1, r1, #15
 80180a4:	2203      	movs	r2, #3
 80180a6:	48c0      	ldr	r0, [pc, #768]	@ (80183a8 <_dtoa_r+0x618>)
 80180a8:	2900      	cmp	r1, #0
 80180aa:	f040 809d 	bne.w	80181e8 <_dtoa_r+0x458>
 80180ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80180b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80180b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80180ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80180bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80180c0:	2900      	cmp	r1, #0
 80180c2:	f000 80c1 	beq.w	8018248 <_dtoa_r+0x4b8>
 80180c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80180ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80180ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180d2:	f140 80b9 	bpl.w	8018248 <_dtoa_r+0x4b8>
 80180d6:	f1ba 0f00 	cmp.w	sl, #0
 80180da:	f000 80b5 	beq.w	8018248 <_dtoa_r+0x4b8>
 80180de:	f1bb 0f00 	cmp.w	fp, #0
 80180e2:	dd31      	ble.n	8018148 <_dtoa_r+0x3b8>
 80180e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80180e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80180ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80180f0:	f108 31ff 	add.w	r1, r8, #4294967295
 80180f4:	9104      	str	r1, [sp, #16]
 80180f6:	3201      	adds	r2, #1
 80180f8:	465c      	mov	r4, fp
 80180fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80180fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8018102:	ee07 2a90 	vmov	s15, r2
 8018106:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801810a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801810e:	ee15 2a90 	vmov	r2, s11
 8018112:	ec51 0b15 	vmov	r0, r1, d5
 8018116:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801811a:	2c00      	cmp	r4, #0
 801811c:	f040 8098 	bne.w	8018250 <_dtoa_r+0x4c0>
 8018120:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018124:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018128:	ec41 0b17 	vmov	d7, r0, r1
 801812c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018134:	f300 8261 	bgt.w	80185fa <_dtoa_r+0x86a>
 8018138:	eeb1 7b47 	vneg.f64	d7, d7
 801813c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018144:	f100 80f5 	bmi.w	8018332 <_dtoa_r+0x5a2>
 8018148:	ed8d 8b02 	vstr	d8, [sp, #8]
 801814c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801814e:	2a00      	cmp	r2, #0
 8018150:	f2c0 812c 	blt.w	80183ac <_dtoa_r+0x61c>
 8018154:	f1b8 0f0e 	cmp.w	r8, #14
 8018158:	f300 8128 	bgt.w	80183ac <_dtoa_r+0x61c>
 801815c:	4b91      	ldr	r3, [pc, #580]	@ (80183a4 <_dtoa_r+0x614>)
 801815e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018162:	ed93 6b00 	vldr	d6, [r3]
 8018166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018168:	2b00      	cmp	r3, #0
 801816a:	da03      	bge.n	8018174 <_dtoa_r+0x3e4>
 801816c:	f1ba 0f00 	cmp.w	sl, #0
 8018170:	f340 80d2 	ble.w	8018318 <_dtoa_r+0x588>
 8018174:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8018178:	ed9d 7b02 	vldr	d7, [sp, #8]
 801817c:	463e      	mov	r6, r7
 801817e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018182:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018186:	ee15 3a10 	vmov	r3, s10
 801818a:	3330      	adds	r3, #48	@ 0x30
 801818c:	f806 3b01 	strb.w	r3, [r6], #1
 8018190:	1bf3      	subs	r3, r6, r7
 8018192:	459a      	cmp	sl, r3
 8018194:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018198:	eea3 7b46 	vfms.f64	d7, d3, d6
 801819c:	f040 80f8 	bne.w	8018390 <_dtoa_r+0x600>
 80181a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80181a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80181a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ac:	f300 80dd 	bgt.w	801836a <_dtoa_r+0x5da>
 80181b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80181b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181b8:	d104      	bne.n	80181c4 <_dtoa_r+0x434>
 80181ba:	ee15 3a10 	vmov	r3, s10
 80181be:	07db      	lsls	r3, r3, #31
 80181c0:	f100 80d3 	bmi.w	801836a <_dtoa_r+0x5da>
 80181c4:	9901      	ldr	r1, [sp, #4]
 80181c6:	4648      	mov	r0, r9
 80181c8:	f000 fc78 	bl	8018abc <_Bfree>
 80181cc:	2300      	movs	r3, #0
 80181ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80181d0:	7033      	strb	r3, [r6, #0]
 80181d2:	f108 0301 	add.w	r3, r8, #1
 80181d6:	6013      	str	r3, [r2, #0]
 80181d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80181da:	2b00      	cmp	r3, #0
 80181dc:	f000 8304 	beq.w	80187e8 <_dtoa_r+0xa58>
 80181e0:	601e      	str	r6, [r3, #0]
 80181e2:	e301      	b.n	80187e8 <_dtoa_r+0xa58>
 80181e4:	2202      	movs	r2, #2
 80181e6:	e75e      	b.n	80180a6 <_dtoa_r+0x316>
 80181e8:	07cc      	lsls	r4, r1, #31
 80181ea:	d504      	bpl.n	80181f6 <_dtoa_r+0x466>
 80181ec:	ed90 6b00 	vldr	d6, [r0]
 80181f0:	3201      	adds	r2, #1
 80181f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80181f6:	1049      	asrs	r1, r1, #1
 80181f8:	3008      	adds	r0, #8
 80181fa:	e755      	b.n	80180a8 <_dtoa_r+0x318>
 80181fc:	d022      	beq.n	8018244 <_dtoa_r+0x4b4>
 80181fe:	f1c8 0100 	rsb	r1, r8, #0
 8018202:	4a68      	ldr	r2, [pc, #416]	@ (80183a4 <_dtoa_r+0x614>)
 8018204:	f001 000f 	and.w	r0, r1, #15
 8018208:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801820c:	ed92 7b00 	vldr	d7, [r2]
 8018210:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018214:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018218:	4863      	ldr	r0, [pc, #396]	@ (80183a8 <_dtoa_r+0x618>)
 801821a:	1109      	asrs	r1, r1, #4
 801821c:	2400      	movs	r4, #0
 801821e:	2202      	movs	r2, #2
 8018220:	b929      	cbnz	r1, 801822e <_dtoa_r+0x49e>
 8018222:	2c00      	cmp	r4, #0
 8018224:	f43f af49 	beq.w	80180ba <_dtoa_r+0x32a>
 8018228:	ed8d 7b02 	vstr	d7, [sp, #8]
 801822c:	e745      	b.n	80180ba <_dtoa_r+0x32a>
 801822e:	07ce      	lsls	r6, r1, #31
 8018230:	d505      	bpl.n	801823e <_dtoa_r+0x4ae>
 8018232:	ed90 6b00 	vldr	d6, [r0]
 8018236:	3201      	adds	r2, #1
 8018238:	2401      	movs	r4, #1
 801823a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801823e:	1049      	asrs	r1, r1, #1
 8018240:	3008      	adds	r0, #8
 8018242:	e7ed      	b.n	8018220 <_dtoa_r+0x490>
 8018244:	2202      	movs	r2, #2
 8018246:	e738      	b.n	80180ba <_dtoa_r+0x32a>
 8018248:	f8cd 8010 	str.w	r8, [sp, #16]
 801824c:	4654      	mov	r4, sl
 801824e:	e754      	b.n	80180fa <_dtoa_r+0x36a>
 8018250:	4a54      	ldr	r2, [pc, #336]	@ (80183a4 <_dtoa_r+0x614>)
 8018252:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8018256:	ed12 4b02 	vldr	d4, [r2, #-8]
 801825a:	9a08      	ldr	r2, [sp, #32]
 801825c:	ec41 0b17 	vmov	d7, r0, r1
 8018260:	443c      	add	r4, r7
 8018262:	b34a      	cbz	r2, 80182b8 <_dtoa_r+0x528>
 8018264:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8018268:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801826c:	463e      	mov	r6, r7
 801826e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018272:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018276:	ee35 7b47 	vsub.f64	d7, d5, d7
 801827a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801827e:	ee14 2a90 	vmov	r2, s9
 8018282:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018286:	3230      	adds	r2, #48	@ 0x30
 8018288:	ee36 6b45 	vsub.f64	d6, d6, d5
 801828c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018294:	f806 2b01 	strb.w	r2, [r6], #1
 8018298:	d438      	bmi.n	801830c <_dtoa_r+0x57c>
 801829a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801829e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80182a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182a6:	d462      	bmi.n	801836e <_dtoa_r+0x5de>
 80182a8:	42a6      	cmp	r6, r4
 80182aa:	f43f af4d 	beq.w	8018148 <_dtoa_r+0x3b8>
 80182ae:	ee27 7b03 	vmul.f64	d7, d7, d3
 80182b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80182b6:	e7e0      	b.n	801827a <_dtoa_r+0x4ea>
 80182b8:	4621      	mov	r1, r4
 80182ba:	463e      	mov	r6, r7
 80182bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80182c0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80182c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80182c8:	ee14 2a90 	vmov	r2, s9
 80182cc:	3230      	adds	r2, #48	@ 0x30
 80182ce:	f806 2b01 	strb.w	r2, [r6], #1
 80182d2:	42a6      	cmp	r6, r4
 80182d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80182d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80182dc:	d119      	bne.n	8018312 <_dtoa_r+0x582>
 80182de:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80182e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80182e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80182ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182ee:	dc3e      	bgt.n	801836e <_dtoa_r+0x5de>
 80182f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80182f4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80182f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182fc:	f57f af24 	bpl.w	8018148 <_dtoa_r+0x3b8>
 8018300:	460e      	mov	r6, r1
 8018302:	3901      	subs	r1, #1
 8018304:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018308:	2b30      	cmp	r3, #48	@ 0x30
 801830a:	d0f9      	beq.n	8018300 <_dtoa_r+0x570>
 801830c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018310:	e758      	b.n	80181c4 <_dtoa_r+0x434>
 8018312:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018316:	e7d5      	b.n	80182c4 <_dtoa_r+0x534>
 8018318:	d10b      	bne.n	8018332 <_dtoa_r+0x5a2>
 801831a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801831e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018322:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018326:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801832a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801832e:	f2c0 8161 	blt.w	80185f4 <_dtoa_r+0x864>
 8018332:	2400      	movs	r4, #0
 8018334:	4625      	mov	r5, r4
 8018336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018338:	43db      	mvns	r3, r3
 801833a:	9304      	str	r3, [sp, #16]
 801833c:	463e      	mov	r6, r7
 801833e:	f04f 0800 	mov.w	r8, #0
 8018342:	4621      	mov	r1, r4
 8018344:	4648      	mov	r0, r9
 8018346:	f000 fbb9 	bl	8018abc <_Bfree>
 801834a:	2d00      	cmp	r5, #0
 801834c:	d0de      	beq.n	801830c <_dtoa_r+0x57c>
 801834e:	f1b8 0f00 	cmp.w	r8, #0
 8018352:	d005      	beq.n	8018360 <_dtoa_r+0x5d0>
 8018354:	45a8      	cmp	r8, r5
 8018356:	d003      	beq.n	8018360 <_dtoa_r+0x5d0>
 8018358:	4641      	mov	r1, r8
 801835a:	4648      	mov	r0, r9
 801835c:	f000 fbae 	bl	8018abc <_Bfree>
 8018360:	4629      	mov	r1, r5
 8018362:	4648      	mov	r0, r9
 8018364:	f000 fbaa 	bl	8018abc <_Bfree>
 8018368:	e7d0      	b.n	801830c <_dtoa_r+0x57c>
 801836a:	f8cd 8010 	str.w	r8, [sp, #16]
 801836e:	4633      	mov	r3, r6
 8018370:	461e      	mov	r6, r3
 8018372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018376:	2a39      	cmp	r2, #57	@ 0x39
 8018378:	d106      	bne.n	8018388 <_dtoa_r+0x5f8>
 801837a:	429f      	cmp	r7, r3
 801837c:	d1f8      	bne.n	8018370 <_dtoa_r+0x5e0>
 801837e:	9a04      	ldr	r2, [sp, #16]
 8018380:	3201      	adds	r2, #1
 8018382:	9204      	str	r2, [sp, #16]
 8018384:	2230      	movs	r2, #48	@ 0x30
 8018386:	703a      	strb	r2, [r7, #0]
 8018388:	781a      	ldrb	r2, [r3, #0]
 801838a:	3201      	adds	r2, #1
 801838c:	701a      	strb	r2, [r3, #0]
 801838e:	e7bd      	b.n	801830c <_dtoa_r+0x57c>
 8018390:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018394:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801839c:	f47f aeef 	bne.w	801817e <_dtoa_r+0x3ee>
 80183a0:	e710      	b.n	80181c4 <_dtoa_r+0x434>
 80183a2:	bf00      	nop
 80183a4:	0801b460 	.word	0x0801b460
 80183a8:	0801b438 	.word	0x0801b438
 80183ac:	9908      	ldr	r1, [sp, #32]
 80183ae:	2900      	cmp	r1, #0
 80183b0:	f000 80e3 	beq.w	801857a <_dtoa_r+0x7ea>
 80183b4:	9907      	ldr	r1, [sp, #28]
 80183b6:	2901      	cmp	r1, #1
 80183b8:	f300 80c8 	bgt.w	801854c <_dtoa_r+0x7bc>
 80183bc:	2d00      	cmp	r5, #0
 80183be:	f000 80c1 	beq.w	8018544 <_dtoa_r+0x7b4>
 80183c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80183c6:	9e05      	ldr	r6, [sp, #20]
 80183c8:	461c      	mov	r4, r3
 80183ca:	9304      	str	r3, [sp, #16]
 80183cc:	9b05      	ldr	r3, [sp, #20]
 80183ce:	4413      	add	r3, r2
 80183d0:	9305      	str	r3, [sp, #20]
 80183d2:	9b06      	ldr	r3, [sp, #24]
 80183d4:	2101      	movs	r1, #1
 80183d6:	4413      	add	r3, r2
 80183d8:	4648      	mov	r0, r9
 80183da:	9306      	str	r3, [sp, #24]
 80183dc:	f000 fc6c 	bl	8018cb8 <__i2b>
 80183e0:	9b04      	ldr	r3, [sp, #16]
 80183e2:	4605      	mov	r5, r0
 80183e4:	b166      	cbz	r6, 8018400 <_dtoa_r+0x670>
 80183e6:	9a06      	ldr	r2, [sp, #24]
 80183e8:	2a00      	cmp	r2, #0
 80183ea:	dd09      	ble.n	8018400 <_dtoa_r+0x670>
 80183ec:	42b2      	cmp	r2, r6
 80183ee:	9905      	ldr	r1, [sp, #20]
 80183f0:	bfa8      	it	ge
 80183f2:	4632      	movge	r2, r6
 80183f4:	1a89      	subs	r1, r1, r2
 80183f6:	9105      	str	r1, [sp, #20]
 80183f8:	9906      	ldr	r1, [sp, #24]
 80183fa:	1ab6      	subs	r6, r6, r2
 80183fc:	1a8a      	subs	r2, r1, r2
 80183fe:	9206      	str	r2, [sp, #24]
 8018400:	b1fb      	cbz	r3, 8018442 <_dtoa_r+0x6b2>
 8018402:	9a08      	ldr	r2, [sp, #32]
 8018404:	2a00      	cmp	r2, #0
 8018406:	f000 80bc 	beq.w	8018582 <_dtoa_r+0x7f2>
 801840a:	b19c      	cbz	r4, 8018434 <_dtoa_r+0x6a4>
 801840c:	4629      	mov	r1, r5
 801840e:	4622      	mov	r2, r4
 8018410:	4648      	mov	r0, r9
 8018412:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018414:	f000 fd10 	bl	8018e38 <__pow5mult>
 8018418:	9a01      	ldr	r2, [sp, #4]
 801841a:	4601      	mov	r1, r0
 801841c:	4605      	mov	r5, r0
 801841e:	4648      	mov	r0, r9
 8018420:	f000 fc60 	bl	8018ce4 <__multiply>
 8018424:	9901      	ldr	r1, [sp, #4]
 8018426:	9004      	str	r0, [sp, #16]
 8018428:	4648      	mov	r0, r9
 801842a:	f000 fb47 	bl	8018abc <_Bfree>
 801842e:	9a04      	ldr	r2, [sp, #16]
 8018430:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018432:	9201      	str	r2, [sp, #4]
 8018434:	1b1a      	subs	r2, r3, r4
 8018436:	d004      	beq.n	8018442 <_dtoa_r+0x6b2>
 8018438:	9901      	ldr	r1, [sp, #4]
 801843a:	4648      	mov	r0, r9
 801843c:	f000 fcfc 	bl	8018e38 <__pow5mult>
 8018440:	9001      	str	r0, [sp, #4]
 8018442:	2101      	movs	r1, #1
 8018444:	4648      	mov	r0, r9
 8018446:	f000 fc37 	bl	8018cb8 <__i2b>
 801844a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801844c:	4604      	mov	r4, r0
 801844e:	2b00      	cmp	r3, #0
 8018450:	f000 81d0 	beq.w	80187f4 <_dtoa_r+0xa64>
 8018454:	461a      	mov	r2, r3
 8018456:	4601      	mov	r1, r0
 8018458:	4648      	mov	r0, r9
 801845a:	f000 fced 	bl	8018e38 <__pow5mult>
 801845e:	9b07      	ldr	r3, [sp, #28]
 8018460:	2b01      	cmp	r3, #1
 8018462:	4604      	mov	r4, r0
 8018464:	f300 8095 	bgt.w	8018592 <_dtoa_r+0x802>
 8018468:	9b02      	ldr	r3, [sp, #8]
 801846a:	2b00      	cmp	r3, #0
 801846c:	f040 808b 	bne.w	8018586 <_dtoa_r+0x7f6>
 8018470:	9b03      	ldr	r3, [sp, #12]
 8018472:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8018476:	2a00      	cmp	r2, #0
 8018478:	f040 8087 	bne.w	801858a <_dtoa_r+0x7fa>
 801847c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018480:	0d12      	lsrs	r2, r2, #20
 8018482:	0512      	lsls	r2, r2, #20
 8018484:	2a00      	cmp	r2, #0
 8018486:	f000 8082 	beq.w	801858e <_dtoa_r+0x7fe>
 801848a:	9b05      	ldr	r3, [sp, #20]
 801848c:	3301      	adds	r3, #1
 801848e:	9305      	str	r3, [sp, #20]
 8018490:	9b06      	ldr	r3, [sp, #24]
 8018492:	3301      	adds	r3, #1
 8018494:	9306      	str	r3, [sp, #24]
 8018496:	2301      	movs	r3, #1
 8018498:	930b      	str	r3, [sp, #44]	@ 0x2c
 801849a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801849c:	2b00      	cmp	r3, #0
 801849e:	f000 81af 	beq.w	8018800 <_dtoa_r+0xa70>
 80184a2:	6922      	ldr	r2, [r4, #16]
 80184a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80184a8:	6910      	ldr	r0, [r2, #16]
 80184aa:	f000 fbb9 	bl	8018c20 <__hi0bits>
 80184ae:	f1c0 0020 	rsb	r0, r0, #32
 80184b2:	9b06      	ldr	r3, [sp, #24]
 80184b4:	4418      	add	r0, r3
 80184b6:	f010 001f 	ands.w	r0, r0, #31
 80184ba:	d076      	beq.n	80185aa <_dtoa_r+0x81a>
 80184bc:	f1c0 0220 	rsb	r2, r0, #32
 80184c0:	2a04      	cmp	r2, #4
 80184c2:	dd69      	ble.n	8018598 <_dtoa_r+0x808>
 80184c4:	9b05      	ldr	r3, [sp, #20]
 80184c6:	f1c0 001c 	rsb	r0, r0, #28
 80184ca:	4403      	add	r3, r0
 80184cc:	9305      	str	r3, [sp, #20]
 80184ce:	9b06      	ldr	r3, [sp, #24]
 80184d0:	4406      	add	r6, r0
 80184d2:	4403      	add	r3, r0
 80184d4:	9306      	str	r3, [sp, #24]
 80184d6:	9b05      	ldr	r3, [sp, #20]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	dd05      	ble.n	80184e8 <_dtoa_r+0x758>
 80184dc:	9901      	ldr	r1, [sp, #4]
 80184de:	461a      	mov	r2, r3
 80184e0:	4648      	mov	r0, r9
 80184e2:	f000 fd03 	bl	8018eec <__lshift>
 80184e6:	9001      	str	r0, [sp, #4]
 80184e8:	9b06      	ldr	r3, [sp, #24]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	dd05      	ble.n	80184fa <_dtoa_r+0x76a>
 80184ee:	4621      	mov	r1, r4
 80184f0:	461a      	mov	r2, r3
 80184f2:	4648      	mov	r0, r9
 80184f4:	f000 fcfa 	bl	8018eec <__lshift>
 80184f8:	4604      	mov	r4, r0
 80184fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d056      	beq.n	80185ae <_dtoa_r+0x81e>
 8018500:	9801      	ldr	r0, [sp, #4]
 8018502:	4621      	mov	r1, r4
 8018504:	f000 fd5e 	bl	8018fc4 <__mcmp>
 8018508:	2800      	cmp	r0, #0
 801850a:	da50      	bge.n	80185ae <_dtoa_r+0x81e>
 801850c:	f108 33ff 	add.w	r3, r8, #4294967295
 8018510:	9304      	str	r3, [sp, #16]
 8018512:	9901      	ldr	r1, [sp, #4]
 8018514:	2300      	movs	r3, #0
 8018516:	220a      	movs	r2, #10
 8018518:	4648      	mov	r0, r9
 801851a:	f000 faf1 	bl	8018b00 <__multadd>
 801851e:	9b08      	ldr	r3, [sp, #32]
 8018520:	9001      	str	r0, [sp, #4]
 8018522:	2b00      	cmp	r3, #0
 8018524:	f000 816e 	beq.w	8018804 <_dtoa_r+0xa74>
 8018528:	4629      	mov	r1, r5
 801852a:	2300      	movs	r3, #0
 801852c:	220a      	movs	r2, #10
 801852e:	4648      	mov	r0, r9
 8018530:	f000 fae6 	bl	8018b00 <__multadd>
 8018534:	f1bb 0f00 	cmp.w	fp, #0
 8018538:	4605      	mov	r5, r0
 801853a:	dc64      	bgt.n	8018606 <_dtoa_r+0x876>
 801853c:	9b07      	ldr	r3, [sp, #28]
 801853e:	2b02      	cmp	r3, #2
 8018540:	dc3e      	bgt.n	80185c0 <_dtoa_r+0x830>
 8018542:	e060      	b.n	8018606 <_dtoa_r+0x876>
 8018544:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018546:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801854a:	e73c      	b.n	80183c6 <_dtoa_r+0x636>
 801854c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8018550:	42a3      	cmp	r3, r4
 8018552:	bfbf      	itttt	lt
 8018554:	1ae2      	sublt	r2, r4, r3
 8018556:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8018558:	189b      	addlt	r3, r3, r2
 801855a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801855c:	bfae      	itee	ge
 801855e:	1b1c      	subge	r4, r3, r4
 8018560:	4623      	movlt	r3, r4
 8018562:	2400      	movlt	r4, #0
 8018564:	f1ba 0f00 	cmp.w	sl, #0
 8018568:	bfb5      	itete	lt
 801856a:	9a05      	ldrlt	r2, [sp, #20]
 801856c:	9e05      	ldrge	r6, [sp, #20]
 801856e:	eba2 060a 	sublt.w	r6, r2, sl
 8018572:	4652      	movge	r2, sl
 8018574:	bfb8      	it	lt
 8018576:	2200      	movlt	r2, #0
 8018578:	e727      	b.n	80183ca <_dtoa_r+0x63a>
 801857a:	9e05      	ldr	r6, [sp, #20]
 801857c:	9d08      	ldr	r5, [sp, #32]
 801857e:	461c      	mov	r4, r3
 8018580:	e730      	b.n	80183e4 <_dtoa_r+0x654>
 8018582:	461a      	mov	r2, r3
 8018584:	e758      	b.n	8018438 <_dtoa_r+0x6a8>
 8018586:	2300      	movs	r3, #0
 8018588:	e786      	b.n	8018498 <_dtoa_r+0x708>
 801858a:	9b02      	ldr	r3, [sp, #8]
 801858c:	e784      	b.n	8018498 <_dtoa_r+0x708>
 801858e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018590:	e783      	b.n	801849a <_dtoa_r+0x70a>
 8018592:	2300      	movs	r3, #0
 8018594:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018596:	e784      	b.n	80184a2 <_dtoa_r+0x712>
 8018598:	d09d      	beq.n	80184d6 <_dtoa_r+0x746>
 801859a:	9b05      	ldr	r3, [sp, #20]
 801859c:	321c      	adds	r2, #28
 801859e:	4413      	add	r3, r2
 80185a0:	9305      	str	r3, [sp, #20]
 80185a2:	9b06      	ldr	r3, [sp, #24]
 80185a4:	4416      	add	r6, r2
 80185a6:	4413      	add	r3, r2
 80185a8:	e794      	b.n	80184d4 <_dtoa_r+0x744>
 80185aa:	4602      	mov	r2, r0
 80185ac:	e7f5      	b.n	801859a <_dtoa_r+0x80a>
 80185ae:	f1ba 0f00 	cmp.w	sl, #0
 80185b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80185b6:	46d3      	mov	fp, sl
 80185b8:	dc21      	bgt.n	80185fe <_dtoa_r+0x86e>
 80185ba:	9b07      	ldr	r3, [sp, #28]
 80185bc:	2b02      	cmp	r3, #2
 80185be:	dd1e      	ble.n	80185fe <_dtoa_r+0x86e>
 80185c0:	f1bb 0f00 	cmp.w	fp, #0
 80185c4:	f47f aeb7 	bne.w	8018336 <_dtoa_r+0x5a6>
 80185c8:	4621      	mov	r1, r4
 80185ca:	465b      	mov	r3, fp
 80185cc:	2205      	movs	r2, #5
 80185ce:	4648      	mov	r0, r9
 80185d0:	f000 fa96 	bl	8018b00 <__multadd>
 80185d4:	4601      	mov	r1, r0
 80185d6:	4604      	mov	r4, r0
 80185d8:	9801      	ldr	r0, [sp, #4]
 80185da:	f000 fcf3 	bl	8018fc4 <__mcmp>
 80185de:	2800      	cmp	r0, #0
 80185e0:	f77f aea9 	ble.w	8018336 <_dtoa_r+0x5a6>
 80185e4:	463e      	mov	r6, r7
 80185e6:	2331      	movs	r3, #49	@ 0x31
 80185e8:	f806 3b01 	strb.w	r3, [r6], #1
 80185ec:	9b04      	ldr	r3, [sp, #16]
 80185ee:	3301      	adds	r3, #1
 80185f0:	9304      	str	r3, [sp, #16]
 80185f2:	e6a4      	b.n	801833e <_dtoa_r+0x5ae>
 80185f4:	f8cd 8010 	str.w	r8, [sp, #16]
 80185f8:	4654      	mov	r4, sl
 80185fa:	4625      	mov	r5, r4
 80185fc:	e7f2      	b.n	80185e4 <_dtoa_r+0x854>
 80185fe:	9b08      	ldr	r3, [sp, #32]
 8018600:	2b00      	cmp	r3, #0
 8018602:	f000 8103 	beq.w	801880c <_dtoa_r+0xa7c>
 8018606:	2e00      	cmp	r6, #0
 8018608:	dd05      	ble.n	8018616 <_dtoa_r+0x886>
 801860a:	4629      	mov	r1, r5
 801860c:	4632      	mov	r2, r6
 801860e:	4648      	mov	r0, r9
 8018610:	f000 fc6c 	bl	8018eec <__lshift>
 8018614:	4605      	mov	r5, r0
 8018616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018618:	2b00      	cmp	r3, #0
 801861a:	d058      	beq.n	80186ce <_dtoa_r+0x93e>
 801861c:	6869      	ldr	r1, [r5, #4]
 801861e:	4648      	mov	r0, r9
 8018620:	f000 fa0c 	bl	8018a3c <_Balloc>
 8018624:	4606      	mov	r6, r0
 8018626:	b928      	cbnz	r0, 8018634 <_dtoa_r+0x8a4>
 8018628:	4b82      	ldr	r3, [pc, #520]	@ (8018834 <_dtoa_r+0xaa4>)
 801862a:	4602      	mov	r2, r0
 801862c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8018630:	f7ff bbc7 	b.w	8017dc2 <_dtoa_r+0x32>
 8018634:	692a      	ldr	r2, [r5, #16]
 8018636:	3202      	adds	r2, #2
 8018638:	0092      	lsls	r2, r2, #2
 801863a:	f105 010c 	add.w	r1, r5, #12
 801863e:	300c      	adds	r0, #12
 8018640:	f7ff fb07 	bl	8017c52 <memcpy>
 8018644:	2201      	movs	r2, #1
 8018646:	4631      	mov	r1, r6
 8018648:	4648      	mov	r0, r9
 801864a:	f000 fc4f 	bl	8018eec <__lshift>
 801864e:	1c7b      	adds	r3, r7, #1
 8018650:	9305      	str	r3, [sp, #20]
 8018652:	eb07 030b 	add.w	r3, r7, fp
 8018656:	9309      	str	r3, [sp, #36]	@ 0x24
 8018658:	9b02      	ldr	r3, [sp, #8]
 801865a:	f003 0301 	and.w	r3, r3, #1
 801865e:	46a8      	mov	r8, r5
 8018660:	9308      	str	r3, [sp, #32]
 8018662:	4605      	mov	r5, r0
 8018664:	9b05      	ldr	r3, [sp, #20]
 8018666:	9801      	ldr	r0, [sp, #4]
 8018668:	4621      	mov	r1, r4
 801866a:	f103 3bff 	add.w	fp, r3, #4294967295
 801866e:	f7ff fb05 	bl	8017c7c <quorem>
 8018672:	4641      	mov	r1, r8
 8018674:	9002      	str	r0, [sp, #8]
 8018676:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801867a:	9801      	ldr	r0, [sp, #4]
 801867c:	f000 fca2 	bl	8018fc4 <__mcmp>
 8018680:	462a      	mov	r2, r5
 8018682:	9006      	str	r0, [sp, #24]
 8018684:	4621      	mov	r1, r4
 8018686:	4648      	mov	r0, r9
 8018688:	f000 fcb8 	bl	8018ffc <__mdiff>
 801868c:	68c2      	ldr	r2, [r0, #12]
 801868e:	4606      	mov	r6, r0
 8018690:	b9fa      	cbnz	r2, 80186d2 <_dtoa_r+0x942>
 8018692:	4601      	mov	r1, r0
 8018694:	9801      	ldr	r0, [sp, #4]
 8018696:	f000 fc95 	bl	8018fc4 <__mcmp>
 801869a:	4602      	mov	r2, r0
 801869c:	4631      	mov	r1, r6
 801869e:	4648      	mov	r0, r9
 80186a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80186a2:	f000 fa0b 	bl	8018abc <_Bfree>
 80186a6:	9b07      	ldr	r3, [sp, #28]
 80186a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80186aa:	9e05      	ldr	r6, [sp, #20]
 80186ac:	ea43 0102 	orr.w	r1, r3, r2
 80186b0:	9b08      	ldr	r3, [sp, #32]
 80186b2:	4319      	orrs	r1, r3
 80186b4:	d10f      	bne.n	80186d6 <_dtoa_r+0x946>
 80186b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80186ba:	d028      	beq.n	801870e <_dtoa_r+0x97e>
 80186bc:	9b06      	ldr	r3, [sp, #24]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	dd02      	ble.n	80186c8 <_dtoa_r+0x938>
 80186c2:	9b02      	ldr	r3, [sp, #8]
 80186c4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80186c8:	f88b a000 	strb.w	sl, [fp]
 80186cc:	e639      	b.n	8018342 <_dtoa_r+0x5b2>
 80186ce:	4628      	mov	r0, r5
 80186d0:	e7bd      	b.n	801864e <_dtoa_r+0x8be>
 80186d2:	2201      	movs	r2, #1
 80186d4:	e7e2      	b.n	801869c <_dtoa_r+0x90c>
 80186d6:	9b06      	ldr	r3, [sp, #24]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	db04      	blt.n	80186e6 <_dtoa_r+0x956>
 80186dc:	9907      	ldr	r1, [sp, #28]
 80186de:	430b      	orrs	r3, r1
 80186e0:	9908      	ldr	r1, [sp, #32]
 80186e2:	430b      	orrs	r3, r1
 80186e4:	d120      	bne.n	8018728 <_dtoa_r+0x998>
 80186e6:	2a00      	cmp	r2, #0
 80186e8:	ddee      	ble.n	80186c8 <_dtoa_r+0x938>
 80186ea:	9901      	ldr	r1, [sp, #4]
 80186ec:	2201      	movs	r2, #1
 80186ee:	4648      	mov	r0, r9
 80186f0:	f000 fbfc 	bl	8018eec <__lshift>
 80186f4:	4621      	mov	r1, r4
 80186f6:	9001      	str	r0, [sp, #4]
 80186f8:	f000 fc64 	bl	8018fc4 <__mcmp>
 80186fc:	2800      	cmp	r0, #0
 80186fe:	dc03      	bgt.n	8018708 <_dtoa_r+0x978>
 8018700:	d1e2      	bne.n	80186c8 <_dtoa_r+0x938>
 8018702:	f01a 0f01 	tst.w	sl, #1
 8018706:	d0df      	beq.n	80186c8 <_dtoa_r+0x938>
 8018708:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801870c:	d1d9      	bne.n	80186c2 <_dtoa_r+0x932>
 801870e:	2339      	movs	r3, #57	@ 0x39
 8018710:	f88b 3000 	strb.w	r3, [fp]
 8018714:	4633      	mov	r3, r6
 8018716:	461e      	mov	r6, r3
 8018718:	3b01      	subs	r3, #1
 801871a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801871e:	2a39      	cmp	r2, #57	@ 0x39
 8018720:	d053      	beq.n	80187ca <_dtoa_r+0xa3a>
 8018722:	3201      	adds	r2, #1
 8018724:	701a      	strb	r2, [r3, #0]
 8018726:	e60c      	b.n	8018342 <_dtoa_r+0x5b2>
 8018728:	2a00      	cmp	r2, #0
 801872a:	dd07      	ble.n	801873c <_dtoa_r+0x9ac>
 801872c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8018730:	d0ed      	beq.n	801870e <_dtoa_r+0x97e>
 8018732:	f10a 0301 	add.w	r3, sl, #1
 8018736:	f88b 3000 	strb.w	r3, [fp]
 801873a:	e602      	b.n	8018342 <_dtoa_r+0x5b2>
 801873c:	9b05      	ldr	r3, [sp, #20]
 801873e:	9a05      	ldr	r2, [sp, #20]
 8018740:	f803 ac01 	strb.w	sl, [r3, #-1]
 8018744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018746:	4293      	cmp	r3, r2
 8018748:	d029      	beq.n	801879e <_dtoa_r+0xa0e>
 801874a:	9901      	ldr	r1, [sp, #4]
 801874c:	2300      	movs	r3, #0
 801874e:	220a      	movs	r2, #10
 8018750:	4648      	mov	r0, r9
 8018752:	f000 f9d5 	bl	8018b00 <__multadd>
 8018756:	45a8      	cmp	r8, r5
 8018758:	9001      	str	r0, [sp, #4]
 801875a:	f04f 0300 	mov.w	r3, #0
 801875e:	f04f 020a 	mov.w	r2, #10
 8018762:	4641      	mov	r1, r8
 8018764:	4648      	mov	r0, r9
 8018766:	d107      	bne.n	8018778 <_dtoa_r+0x9e8>
 8018768:	f000 f9ca 	bl	8018b00 <__multadd>
 801876c:	4680      	mov	r8, r0
 801876e:	4605      	mov	r5, r0
 8018770:	9b05      	ldr	r3, [sp, #20]
 8018772:	3301      	adds	r3, #1
 8018774:	9305      	str	r3, [sp, #20]
 8018776:	e775      	b.n	8018664 <_dtoa_r+0x8d4>
 8018778:	f000 f9c2 	bl	8018b00 <__multadd>
 801877c:	4629      	mov	r1, r5
 801877e:	4680      	mov	r8, r0
 8018780:	2300      	movs	r3, #0
 8018782:	220a      	movs	r2, #10
 8018784:	4648      	mov	r0, r9
 8018786:	f000 f9bb 	bl	8018b00 <__multadd>
 801878a:	4605      	mov	r5, r0
 801878c:	e7f0      	b.n	8018770 <_dtoa_r+0x9e0>
 801878e:	f1bb 0f00 	cmp.w	fp, #0
 8018792:	bfcc      	ite	gt
 8018794:	465e      	movgt	r6, fp
 8018796:	2601      	movle	r6, #1
 8018798:	443e      	add	r6, r7
 801879a:	f04f 0800 	mov.w	r8, #0
 801879e:	9901      	ldr	r1, [sp, #4]
 80187a0:	2201      	movs	r2, #1
 80187a2:	4648      	mov	r0, r9
 80187a4:	f000 fba2 	bl	8018eec <__lshift>
 80187a8:	4621      	mov	r1, r4
 80187aa:	9001      	str	r0, [sp, #4]
 80187ac:	f000 fc0a 	bl	8018fc4 <__mcmp>
 80187b0:	2800      	cmp	r0, #0
 80187b2:	dcaf      	bgt.n	8018714 <_dtoa_r+0x984>
 80187b4:	d102      	bne.n	80187bc <_dtoa_r+0xa2c>
 80187b6:	f01a 0f01 	tst.w	sl, #1
 80187ba:	d1ab      	bne.n	8018714 <_dtoa_r+0x984>
 80187bc:	4633      	mov	r3, r6
 80187be:	461e      	mov	r6, r3
 80187c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80187c4:	2a30      	cmp	r2, #48	@ 0x30
 80187c6:	d0fa      	beq.n	80187be <_dtoa_r+0xa2e>
 80187c8:	e5bb      	b.n	8018342 <_dtoa_r+0x5b2>
 80187ca:	429f      	cmp	r7, r3
 80187cc:	d1a3      	bne.n	8018716 <_dtoa_r+0x986>
 80187ce:	9b04      	ldr	r3, [sp, #16]
 80187d0:	3301      	adds	r3, #1
 80187d2:	9304      	str	r3, [sp, #16]
 80187d4:	2331      	movs	r3, #49	@ 0x31
 80187d6:	703b      	strb	r3, [r7, #0]
 80187d8:	e5b3      	b.n	8018342 <_dtoa_r+0x5b2>
 80187da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80187dc:	4f16      	ldr	r7, [pc, #88]	@ (8018838 <_dtoa_r+0xaa8>)
 80187de:	b11b      	cbz	r3, 80187e8 <_dtoa_r+0xa58>
 80187e0:	f107 0308 	add.w	r3, r7, #8
 80187e4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80187e6:	6013      	str	r3, [r2, #0]
 80187e8:	4638      	mov	r0, r7
 80187ea:	b011      	add	sp, #68	@ 0x44
 80187ec:	ecbd 8b02 	vpop	{d8}
 80187f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187f4:	9b07      	ldr	r3, [sp, #28]
 80187f6:	2b01      	cmp	r3, #1
 80187f8:	f77f ae36 	ble.w	8018468 <_dtoa_r+0x6d8>
 80187fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80187fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018800:	2001      	movs	r0, #1
 8018802:	e656      	b.n	80184b2 <_dtoa_r+0x722>
 8018804:	f1bb 0f00 	cmp.w	fp, #0
 8018808:	f77f aed7 	ble.w	80185ba <_dtoa_r+0x82a>
 801880c:	463e      	mov	r6, r7
 801880e:	9801      	ldr	r0, [sp, #4]
 8018810:	4621      	mov	r1, r4
 8018812:	f7ff fa33 	bl	8017c7c <quorem>
 8018816:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801881a:	f806 ab01 	strb.w	sl, [r6], #1
 801881e:	1bf2      	subs	r2, r6, r7
 8018820:	4593      	cmp	fp, r2
 8018822:	ddb4      	ble.n	801878e <_dtoa_r+0x9fe>
 8018824:	9901      	ldr	r1, [sp, #4]
 8018826:	2300      	movs	r3, #0
 8018828:	220a      	movs	r2, #10
 801882a:	4648      	mov	r0, r9
 801882c:	f000 f968 	bl	8018b00 <__multadd>
 8018830:	9001      	str	r0, [sp, #4]
 8018832:	e7ec      	b.n	801880e <_dtoa_r+0xa7e>
 8018834:	0801b3bd 	.word	0x0801b3bd
 8018838:	0801b341 	.word	0x0801b341

0801883c <_free_r>:
 801883c:	b538      	push	{r3, r4, r5, lr}
 801883e:	4605      	mov	r5, r0
 8018840:	2900      	cmp	r1, #0
 8018842:	d041      	beq.n	80188c8 <_free_r+0x8c>
 8018844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018848:	1f0c      	subs	r4, r1, #4
 801884a:	2b00      	cmp	r3, #0
 801884c:	bfb8      	it	lt
 801884e:	18e4      	addlt	r4, r4, r3
 8018850:	f000 f8e8 	bl	8018a24 <__malloc_lock>
 8018854:	4a1d      	ldr	r2, [pc, #116]	@ (80188cc <_free_r+0x90>)
 8018856:	6813      	ldr	r3, [r2, #0]
 8018858:	b933      	cbnz	r3, 8018868 <_free_r+0x2c>
 801885a:	6063      	str	r3, [r4, #4]
 801885c:	6014      	str	r4, [r2, #0]
 801885e:	4628      	mov	r0, r5
 8018860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018864:	f000 b8e4 	b.w	8018a30 <__malloc_unlock>
 8018868:	42a3      	cmp	r3, r4
 801886a:	d908      	bls.n	801887e <_free_r+0x42>
 801886c:	6820      	ldr	r0, [r4, #0]
 801886e:	1821      	adds	r1, r4, r0
 8018870:	428b      	cmp	r3, r1
 8018872:	bf01      	itttt	eq
 8018874:	6819      	ldreq	r1, [r3, #0]
 8018876:	685b      	ldreq	r3, [r3, #4]
 8018878:	1809      	addeq	r1, r1, r0
 801887a:	6021      	streq	r1, [r4, #0]
 801887c:	e7ed      	b.n	801885a <_free_r+0x1e>
 801887e:	461a      	mov	r2, r3
 8018880:	685b      	ldr	r3, [r3, #4]
 8018882:	b10b      	cbz	r3, 8018888 <_free_r+0x4c>
 8018884:	42a3      	cmp	r3, r4
 8018886:	d9fa      	bls.n	801887e <_free_r+0x42>
 8018888:	6811      	ldr	r1, [r2, #0]
 801888a:	1850      	adds	r0, r2, r1
 801888c:	42a0      	cmp	r0, r4
 801888e:	d10b      	bne.n	80188a8 <_free_r+0x6c>
 8018890:	6820      	ldr	r0, [r4, #0]
 8018892:	4401      	add	r1, r0
 8018894:	1850      	adds	r0, r2, r1
 8018896:	4283      	cmp	r3, r0
 8018898:	6011      	str	r1, [r2, #0]
 801889a:	d1e0      	bne.n	801885e <_free_r+0x22>
 801889c:	6818      	ldr	r0, [r3, #0]
 801889e:	685b      	ldr	r3, [r3, #4]
 80188a0:	6053      	str	r3, [r2, #4]
 80188a2:	4408      	add	r0, r1
 80188a4:	6010      	str	r0, [r2, #0]
 80188a6:	e7da      	b.n	801885e <_free_r+0x22>
 80188a8:	d902      	bls.n	80188b0 <_free_r+0x74>
 80188aa:	230c      	movs	r3, #12
 80188ac:	602b      	str	r3, [r5, #0]
 80188ae:	e7d6      	b.n	801885e <_free_r+0x22>
 80188b0:	6820      	ldr	r0, [r4, #0]
 80188b2:	1821      	adds	r1, r4, r0
 80188b4:	428b      	cmp	r3, r1
 80188b6:	bf04      	itt	eq
 80188b8:	6819      	ldreq	r1, [r3, #0]
 80188ba:	685b      	ldreq	r3, [r3, #4]
 80188bc:	6063      	str	r3, [r4, #4]
 80188be:	bf04      	itt	eq
 80188c0:	1809      	addeq	r1, r1, r0
 80188c2:	6021      	streq	r1, [r4, #0]
 80188c4:	6054      	str	r4, [r2, #4]
 80188c6:	e7ca      	b.n	801885e <_free_r+0x22>
 80188c8:	bd38      	pop	{r3, r4, r5, pc}
 80188ca:	bf00      	nop
 80188cc:	240011a4 	.word	0x240011a4

080188d0 <malloc>:
 80188d0:	4b02      	ldr	r3, [pc, #8]	@ (80188dc <malloc+0xc>)
 80188d2:	4601      	mov	r1, r0
 80188d4:	6818      	ldr	r0, [r3, #0]
 80188d6:	f000 b825 	b.w	8018924 <_malloc_r>
 80188da:	bf00      	nop
 80188dc:	24000198 	.word	0x24000198

080188e0 <sbrk_aligned>:
 80188e0:	b570      	push	{r4, r5, r6, lr}
 80188e2:	4e0f      	ldr	r6, [pc, #60]	@ (8018920 <sbrk_aligned+0x40>)
 80188e4:	460c      	mov	r4, r1
 80188e6:	6831      	ldr	r1, [r6, #0]
 80188e8:	4605      	mov	r5, r0
 80188ea:	b911      	cbnz	r1, 80188f2 <sbrk_aligned+0x12>
 80188ec:	f001 ff7e 	bl	801a7ec <_sbrk_r>
 80188f0:	6030      	str	r0, [r6, #0]
 80188f2:	4621      	mov	r1, r4
 80188f4:	4628      	mov	r0, r5
 80188f6:	f001 ff79 	bl	801a7ec <_sbrk_r>
 80188fa:	1c43      	adds	r3, r0, #1
 80188fc:	d103      	bne.n	8018906 <sbrk_aligned+0x26>
 80188fe:	f04f 34ff 	mov.w	r4, #4294967295
 8018902:	4620      	mov	r0, r4
 8018904:	bd70      	pop	{r4, r5, r6, pc}
 8018906:	1cc4      	adds	r4, r0, #3
 8018908:	f024 0403 	bic.w	r4, r4, #3
 801890c:	42a0      	cmp	r0, r4
 801890e:	d0f8      	beq.n	8018902 <sbrk_aligned+0x22>
 8018910:	1a21      	subs	r1, r4, r0
 8018912:	4628      	mov	r0, r5
 8018914:	f001 ff6a 	bl	801a7ec <_sbrk_r>
 8018918:	3001      	adds	r0, #1
 801891a:	d1f2      	bne.n	8018902 <sbrk_aligned+0x22>
 801891c:	e7ef      	b.n	80188fe <sbrk_aligned+0x1e>
 801891e:	bf00      	nop
 8018920:	240011a0 	.word	0x240011a0

08018924 <_malloc_r>:
 8018924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018928:	1ccd      	adds	r5, r1, #3
 801892a:	f025 0503 	bic.w	r5, r5, #3
 801892e:	3508      	adds	r5, #8
 8018930:	2d0c      	cmp	r5, #12
 8018932:	bf38      	it	cc
 8018934:	250c      	movcc	r5, #12
 8018936:	2d00      	cmp	r5, #0
 8018938:	4606      	mov	r6, r0
 801893a:	db01      	blt.n	8018940 <_malloc_r+0x1c>
 801893c:	42a9      	cmp	r1, r5
 801893e:	d904      	bls.n	801894a <_malloc_r+0x26>
 8018940:	230c      	movs	r3, #12
 8018942:	6033      	str	r3, [r6, #0]
 8018944:	2000      	movs	r0, #0
 8018946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801894a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018a20 <_malloc_r+0xfc>
 801894e:	f000 f869 	bl	8018a24 <__malloc_lock>
 8018952:	f8d8 3000 	ldr.w	r3, [r8]
 8018956:	461c      	mov	r4, r3
 8018958:	bb44      	cbnz	r4, 80189ac <_malloc_r+0x88>
 801895a:	4629      	mov	r1, r5
 801895c:	4630      	mov	r0, r6
 801895e:	f7ff ffbf 	bl	80188e0 <sbrk_aligned>
 8018962:	1c43      	adds	r3, r0, #1
 8018964:	4604      	mov	r4, r0
 8018966:	d158      	bne.n	8018a1a <_malloc_r+0xf6>
 8018968:	f8d8 4000 	ldr.w	r4, [r8]
 801896c:	4627      	mov	r7, r4
 801896e:	2f00      	cmp	r7, #0
 8018970:	d143      	bne.n	80189fa <_malloc_r+0xd6>
 8018972:	2c00      	cmp	r4, #0
 8018974:	d04b      	beq.n	8018a0e <_malloc_r+0xea>
 8018976:	6823      	ldr	r3, [r4, #0]
 8018978:	4639      	mov	r1, r7
 801897a:	4630      	mov	r0, r6
 801897c:	eb04 0903 	add.w	r9, r4, r3
 8018980:	f001 ff34 	bl	801a7ec <_sbrk_r>
 8018984:	4581      	cmp	r9, r0
 8018986:	d142      	bne.n	8018a0e <_malloc_r+0xea>
 8018988:	6821      	ldr	r1, [r4, #0]
 801898a:	1a6d      	subs	r5, r5, r1
 801898c:	4629      	mov	r1, r5
 801898e:	4630      	mov	r0, r6
 8018990:	f7ff ffa6 	bl	80188e0 <sbrk_aligned>
 8018994:	3001      	adds	r0, #1
 8018996:	d03a      	beq.n	8018a0e <_malloc_r+0xea>
 8018998:	6823      	ldr	r3, [r4, #0]
 801899a:	442b      	add	r3, r5
 801899c:	6023      	str	r3, [r4, #0]
 801899e:	f8d8 3000 	ldr.w	r3, [r8]
 80189a2:	685a      	ldr	r2, [r3, #4]
 80189a4:	bb62      	cbnz	r2, 8018a00 <_malloc_r+0xdc>
 80189a6:	f8c8 7000 	str.w	r7, [r8]
 80189aa:	e00f      	b.n	80189cc <_malloc_r+0xa8>
 80189ac:	6822      	ldr	r2, [r4, #0]
 80189ae:	1b52      	subs	r2, r2, r5
 80189b0:	d420      	bmi.n	80189f4 <_malloc_r+0xd0>
 80189b2:	2a0b      	cmp	r2, #11
 80189b4:	d917      	bls.n	80189e6 <_malloc_r+0xc2>
 80189b6:	1961      	adds	r1, r4, r5
 80189b8:	42a3      	cmp	r3, r4
 80189ba:	6025      	str	r5, [r4, #0]
 80189bc:	bf18      	it	ne
 80189be:	6059      	strne	r1, [r3, #4]
 80189c0:	6863      	ldr	r3, [r4, #4]
 80189c2:	bf08      	it	eq
 80189c4:	f8c8 1000 	streq.w	r1, [r8]
 80189c8:	5162      	str	r2, [r4, r5]
 80189ca:	604b      	str	r3, [r1, #4]
 80189cc:	4630      	mov	r0, r6
 80189ce:	f000 f82f 	bl	8018a30 <__malloc_unlock>
 80189d2:	f104 000b 	add.w	r0, r4, #11
 80189d6:	1d23      	adds	r3, r4, #4
 80189d8:	f020 0007 	bic.w	r0, r0, #7
 80189dc:	1ac2      	subs	r2, r0, r3
 80189de:	bf1c      	itt	ne
 80189e0:	1a1b      	subne	r3, r3, r0
 80189e2:	50a3      	strne	r3, [r4, r2]
 80189e4:	e7af      	b.n	8018946 <_malloc_r+0x22>
 80189e6:	6862      	ldr	r2, [r4, #4]
 80189e8:	42a3      	cmp	r3, r4
 80189ea:	bf0c      	ite	eq
 80189ec:	f8c8 2000 	streq.w	r2, [r8]
 80189f0:	605a      	strne	r2, [r3, #4]
 80189f2:	e7eb      	b.n	80189cc <_malloc_r+0xa8>
 80189f4:	4623      	mov	r3, r4
 80189f6:	6864      	ldr	r4, [r4, #4]
 80189f8:	e7ae      	b.n	8018958 <_malloc_r+0x34>
 80189fa:	463c      	mov	r4, r7
 80189fc:	687f      	ldr	r7, [r7, #4]
 80189fe:	e7b6      	b.n	801896e <_malloc_r+0x4a>
 8018a00:	461a      	mov	r2, r3
 8018a02:	685b      	ldr	r3, [r3, #4]
 8018a04:	42a3      	cmp	r3, r4
 8018a06:	d1fb      	bne.n	8018a00 <_malloc_r+0xdc>
 8018a08:	2300      	movs	r3, #0
 8018a0a:	6053      	str	r3, [r2, #4]
 8018a0c:	e7de      	b.n	80189cc <_malloc_r+0xa8>
 8018a0e:	230c      	movs	r3, #12
 8018a10:	6033      	str	r3, [r6, #0]
 8018a12:	4630      	mov	r0, r6
 8018a14:	f000 f80c 	bl	8018a30 <__malloc_unlock>
 8018a18:	e794      	b.n	8018944 <_malloc_r+0x20>
 8018a1a:	6005      	str	r5, [r0, #0]
 8018a1c:	e7d6      	b.n	80189cc <_malloc_r+0xa8>
 8018a1e:	bf00      	nop
 8018a20:	240011a4 	.word	0x240011a4

08018a24 <__malloc_lock>:
 8018a24:	4801      	ldr	r0, [pc, #4]	@ (8018a2c <__malloc_lock+0x8>)
 8018a26:	f7ff b912 	b.w	8017c4e <__retarget_lock_acquire_recursive>
 8018a2a:	bf00      	nop
 8018a2c:	2400119c 	.word	0x2400119c

08018a30 <__malloc_unlock>:
 8018a30:	4801      	ldr	r0, [pc, #4]	@ (8018a38 <__malloc_unlock+0x8>)
 8018a32:	f7ff b90d 	b.w	8017c50 <__retarget_lock_release_recursive>
 8018a36:	bf00      	nop
 8018a38:	2400119c 	.word	0x2400119c

08018a3c <_Balloc>:
 8018a3c:	b570      	push	{r4, r5, r6, lr}
 8018a3e:	69c6      	ldr	r6, [r0, #28]
 8018a40:	4604      	mov	r4, r0
 8018a42:	460d      	mov	r5, r1
 8018a44:	b976      	cbnz	r6, 8018a64 <_Balloc+0x28>
 8018a46:	2010      	movs	r0, #16
 8018a48:	f7ff ff42 	bl	80188d0 <malloc>
 8018a4c:	4602      	mov	r2, r0
 8018a4e:	61e0      	str	r0, [r4, #28]
 8018a50:	b920      	cbnz	r0, 8018a5c <_Balloc+0x20>
 8018a52:	4b18      	ldr	r3, [pc, #96]	@ (8018ab4 <_Balloc+0x78>)
 8018a54:	4818      	ldr	r0, [pc, #96]	@ (8018ab8 <_Balloc+0x7c>)
 8018a56:	216b      	movs	r1, #107	@ 0x6b
 8018a58:	f001 fee2 	bl	801a820 <__assert_func>
 8018a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018a60:	6006      	str	r6, [r0, #0]
 8018a62:	60c6      	str	r6, [r0, #12]
 8018a64:	69e6      	ldr	r6, [r4, #28]
 8018a66:	68f3      	ldr	r3, [r6, #12]
 8018a68:	b183      	cbz	r3, 8018a8c <_Balloc+0x50>
 8018a6a:	69e3      	ldr	r3, [r4, #28]
 8018a6c:	68db      	ldr	r3, [r3, #12]
 8018a6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018a72:	b9b8      	cbnz	r0, 8018aa4 <_Balloc+0x68>
 8018a74:	2101      	movs	r1, #1
 8018a76:	fa01 f605 	lsl.w	r6, r1, r5
 8018a7a:	1d72      	adds	r2, r6, #5
 8018a7c:	0092      	lsls	r2, r2, #2
 8018a7e:	4620      	mov	r0, r4
 8018a80:	f001 feec 	bl	801a85c <_calloc_r>
 8018a84:	b160      	cbz	r0, 8018aa0 <_Balloc+0x64>
 8018a86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018a8a:	e00e      	b.n	8018aaa <_Balloc+0x6e>
 8018a8c:	2221      	movs	r2, #33	@ 0x21
 8018a8e:	2104      	movs	r1, #4
 8018a90:	4620      	mov	r0, r4
 8018a92:	f001 fee3 	bl	801a85c <_calloc_r>
 8018a96:	69e3      	ldr	r3, [r4, #28]
 8018a98:	60f0      	str	r0, [r6, #12]
 8018a9a:	68db      	ldr	r3, [r3, #12]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d1e4      	bne.n	8018a6a <_Balloc+0x2e>
 8018aa0:	2000      	movs	r0, #0
 8018aa2:	bd70      	pop	{r4, r5, r6, pc}
 8018aa4:	6802      	ldr	r2, [r0, #0]
 8018aa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018aaa:	2300      	movs	r3, #0
 8018aac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ab0:	e7f7      	b.n	8018aa2 <_Balloc+0x66>
 8018ab2:	bf00      	nop
 8018ab4:	0801b34e 	.word	0x0801b34e
 8018ab8:	0801b3ce 	.word	0x0801b3ce

08018abc <_Bfree>:
 8018abc:	b570      	push	{r4, r5, r6, lr}
 8018abe:	69c6      	ldr	r6, [r0, #28]
 8018ac0:	4605      	mov	r5, r0
 8018ac2:	460c      	mov	r4, r1
 8018ac4:	b976      	cbnz	r6, 8018ae4 <_Bfree+0x28>
 8018ac6:	2010      	movs	r0, #16
 8018ac8:	f7ff ff02 	bl	80188d0 <malloc>
 8018acc:	4602      	mov	r2, r0
 8018ace:	61e8      	str	r0, [r5, #28]
 8018ad0:	b920      	cbnz	r0, 8018adc <_Bfree+0x20>
 8018ad2:	4b09      	ldr	r3, [pc, #36]	@ (8018af8 <_Bfree+0x3c>)
 8018ad4:	4809      	ldr	r0, [pc, #36]	@ (8018afc <_Bfree+0x40>)
 8018ad6:	218f      	movs	r1, #143	@ 0x8f
 8018ad8:	f001 fea2 	bl	801a820 <__assert_func>
 8018adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ae0:	6006      	str	r6, [r0, #0]
 8018ae2:	60c6      	str	r6, [r0, #12]
 8018ae4:	b13c      	cbz	r4, 8018af6 <_Bfree+0x3a>
 8018ae6:	69eb      	ldr	r3, [r5, #28]
 8018ae8:	6862      	ldr	r2, [r4, #4]
 8018aea:	68db      	ldr	r3, [r3, #12]
 8018aec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018af0:	6021      	str	r1, [r4, #0]
 8018af2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018af6:	bd70      	pop	{r4, r5, r6, pc}
 8018af8:	0801b34e 	.word	0x0801b34e
 8018afc:	0801b3ce 	.word	0x0801b3ce

08018b00 <__multadd>:
 8018b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b04:	690d      	ldr	r5, [r1, #16]
 8018b06:	4607      	mov	r7, r0
 8018b08:	460c      	mov	r4, r1
 8018b0a:	461e      	mov	r6, r3
 8018b0c:	f101 0c14 	add.w	ip, r1, #20
 8018b10:	2000      	movs	r0, #0
 8018b12:	f8dc 3000 	ldr.w	r3, [ip]
 8018b16:	b299      	uxth	r1, r3
 8018b18:	fb02 6101 	mla	r1, r2, r1, r6
 8018b1c:	0c1e      	lsrs	r6, r3, #16
 8018b1e:	0c0b      	lsrs	r3, r1, #16
 8018b20:	fb02 3306 	mla	r3, r2, r6, r3
 8018b24:	b289      	uxth	r1, r1
 8018b26:	3001      	adds	r0, #1
 8018b28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018b2c:	4285      	cmp	r5, r0
 8018b2e:	f84c 1b04 	str.w	r1, [ip], #4
 8018b32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018b36:	dcec      	bgt.n	8018b12 <__multadd+0x12>
 8018b38:	b30e      	cbz	r6, 8018b7e <__multadd+0x7e>
 8018b3a:	68a3      	ldr	r3, [r4, #8]
 8018b3c:	42ab      	cmp	r3, r5
 8018b3e:	dc19      	bgt.n	8018b74 <__multadd+0x74>
 8018b40:	6861      	ldr	r1, [r4, #4]
 8018b42:	4638      	mov	r0, r7
 8018b44:	3101      	adds	r1, #1
 8018b46:	f7ff ff79 	bl	8018a3c <_Balloc>
 8018b4a:	4680      	mov	r8, r0
 8018b4c:	b928      	cbnz	r0, 8018b5a <__multadd+0x5a>
 8018b4e:	4602      	mov	r2, r0
 8018b50:	4b0c      	ldr	r3, [pc, #48]	@ (8018b84 <__multadd+0x84>)
 8018b52:	480d      	ldr	r0, [pc, #52]	@ (8018b88 <__multadd+0x88>)
 8018b54:	21ba      	movs	r1, #186	@ 0xba
 8018b56:	f001 fe63 	bl	801a820 <__assert_func>
 8018b5a:	6922      	ldr	r2, [r4, #16]
 8018b5c:	3202      	adds	r2, #2
 8018b5e:	f104 010c 	add.w	r1, r4, #12
 8018b62:	0092      	lsls	r2, r2, #2
 8018b64:	300c      	adds	r0, #12
 8018b66:	f7ff f874 	bl	8017c52 <memcpy>
 8018b6a:	4621      	mov	r1, r4
 8018b6c:	4638      	mov	r0, r7
 8018b6e:	f7ff ffa5 	bl	8018abc <_Bfree>
 8018b72:	4644      	mov	r4, r8
 8018b74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018b78:	3501      	adds	r5, #1
 8018b7a:	615e      	str	r6, [r3, #20]
 8018b7c:	6125      	str	r5, [r4, #16]
 8018b7e:	4620      	mov	r0, r4
 8018b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b84:	0801b3bd 	.word	0x0801b3bd
 8018b88:	0801b3ce 	.word	0x0801b3ce

08018b8c <__s2b>:
 8018b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b90:	460c      	mov	r4, r1
 8018b92:	4615      	mov	r5, r2
 8018b94:	461f      	mov	r7, r3
 8018b96:	2209      	movs	r2, #9
 8018b98:	3308      	adds	r3, #8
 8018b9a:	4606      	mov	r6, r0
 8018b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018ba0:	2100      	movs	r1, #0
 8018ba2:	2201      	movs	r2, #1
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	db09      	blt.n	8018bbc <__s2b+0x30>
 8018ba8:	4630      	mov	r0, r6
 8018baa:	f7ff ff47 	bl	8018a3c <_Balloc>
 8018bae:	b940      	cbnz	r0, 8018bc2 <__s2b+0x36>
 8018bb0:	4602      	mov	r2, r0
 8018bb2:	4b19      	ldr	r3, [pc, #100]	@ (8018c18 <__s2b+0x8c>)
 8018bb4:	4819      	ldr	r0, [pc, #100]	@ (8018c1c <__s2b+0x90>)
 8018bb6:	21d3      	movs	r1, #211	@ 0xd3
 8018bb8:	f001 fe32 	bl	801a820 <__assert_func>
 8018bbc:	0052      	lsls	r2, r2, #1
 8018bbe:	3101      	adds	r1, #1
 8018bc0:	e7f0      	b.n	8018ba4 <__s2b+0x18>
 8018bc2:	9b08      	ldr	r3, [sp, #32]
 8018bc4:	6143      	str	r3, [r0, #20]
 8018bc6:	2d09      	cmp	r5, #9
 8018bc8:	f04f 0301 	mov.w	r3, #1
 8018bcc:	6103      	str	r3, [r0, #16]
 8018bce:	dd16      	ble.n	8018bfe <__s2b+0x72>
 8018bd0:	f104 0909 	add.w	r9, r4, #9
 8018bd4:	46c8      	mov	r8, r9
 8018bd6:	442c      	add	r4, r5
 8018bd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018bdc:	4601      	mov	r1, r0
 8018bde:	3b30      	subs	r3, #48	@ 0x30
 8018be0:	220a      	movs	r2, #10
 8018be2:	4630      	mov	r0, r6
 8018be4:	f7ff ff8c 	bl	8018b00 <__multadd>
 8018be8:	45a0      	cmp	r8, r4
 8018bea:	d1f5      	bne.n	8018bd8 <__s2b+0x4c>
 8018bec:	f1a5 0408 	sub.w	r4, r5, #8
 8018bf0:	444c      	add	r4, r9
 8018bf2:	1b2d      	subs	r5, r5, r4
 8018bf4:	1963      	adds	r3, r4, r5
 8018bf6:	42bb      	cmp	r3, r7
 8018bf8:	db04      	blt.n	8018c04 <__s2b+0x78>
 8018bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bfe:	340a      	adds	r4, #10
 8018c00:	2509      	movs	r5, #9
 8018c02:	e7f6      	b.n	8018bf2 <__s2b+0x66>
 8018c04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018c08:	4601      	mov	r1, r0
 8018c0a:	3b30      	subs	r3, #48	@ 0x30
 8018c0c:	220a      	movs	r2, #10
 8018c0e:	4630      	mov	r0, r6
 8018c10:	f7ff ff76 	bl	8018b00 <__multadd>
 8018c14:	e7ee      	b.n	8018bf4 <__s2b+0x68>
 8018c16:	bf00      	nop
 8018c18:	0801b3bd 	.word	0x0801b3bd
 8018c1c:	0801b3ce 	.word	0x0801b3ce

08018c20 <__hi0bits>:
 8018c20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018c24:	4603      	mov	r3, r0
 8018c26:	bf36      	itet	cc
 8018c28:	0403      	lslcc	r3, r0, #16
 8018c2a:	2000      	movcs	r0, #0
 8018c2c:	2010      	movcc	r0, #16
 8018c2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018c32:	bf3c      	itt	cc
 8018c34:	021b      	lslcc	r3, r3, #8
 8018c36:	3008      	addcc	r0, #8
 8018c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018c3c:	bf3c      	itt	cc
 8018c3e:	011b      	lslcc	r3, r3, #4
 8018c40:	3004      	addcc	r0, #4
 8018c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018c46:	bf3c      	itt	cc
 8018c48:	009b      	lslcc	r3, r3, #2
 8018c4a:	3002      	addcc	r0, #2
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	db05      	blt.n	8018c5c <__hi0bits+0x3c>
 8018c50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018c54:	f100 0001 	add.w	r0, r0, #1
 8018c58:	bf08      	it	eq
 8018c5a:	2020      	moveq	r0, #32
 8018c5c:	4770      	bx	lr

08018c5e <__lo0bits>:
 8018c5e:	6803      	ldr	r3, [r0, #0]
 8018c60:	4602      	mov	r2, r0
 8018c62:	f013 0007 	ands.w	r0, r3, #7
 8018c66:	d00b      	beq.n	8018c80 <__lo0bits+0x22>
 8018c68:	07d9      	lsls	r1, r3, #31
 8018c6a:	d421      	bmi.n	8018cb0 <__lo0bits+0x52>
 8018c6c:	0798      	lsls	r0, r3, #30
 8018c6e:	bf49      	itett	mi
 8018c70:	085b      	lsrmi	r3, r3, #1
 8018c72:	089b      	lsrpl	r3, r3, #2
 8018c74:	2001      	movmi	r0, #1
 8018c76:	6013      	strmi	r3, [r2, #0]
 8018c78:	bf5c      	itt	pl
 8018c7a:	6013      	strpl	r3, [r2, #0]
 8018c7c:	2002      	movpl	r0, #2
 8018c7e:	4770      	bx	lr
 8018c80:	b299      	uxth	r1, r3
 8018c82:	b909      	cbnz	r1, 8018c88 <__lo0bits+0x2a>
 8018c84:	0c1b      	lsrs	r3, r3, #16
 8018c86:	2010      	movs	r0, #16
 8018c88:	b2d9      	uxtb	r1, r3
 8018c8a:	b909      	cbnz	r1, 8018c90 <__lo0bits+0x32>
 8018c8c:	3008      	adds	r0, #8
 8018c8e:	0a1b      	lsrs	r3, r3, #8
 8018c90:	0719      	lsls	r1, r3, #28
 8018c92:	bf04      	itt	eq
 8018c94:	091b      	lsreq	r3, r3, #4
 8018c96:	3004      	addeq	r0, #4
 8018c98:	0799      	lsls	r1, r3, #30
 8018c9a:	bf04      	itt	eq
 8018c9c:	089b      	lsreq	r3, r3, #2
 8018c9e:	3002      	addeq	r0, #2
 8018ca0:	07d9      	lsls	r1, r3, #31
 8018ca2:	d403      	bmi.n	8018cac <__lo0bits+0x4e>
 8018ca4:	085b      	lsrs	r3, r3, #1
 8018ca6:	f100 0001 	add.w	r0, r0, #1
 8018caa:	d003      	beq.n	8018cb4 <__lo0bits+0x56>
 8018cac:	6013      	str	r3, [r2, #0]
 8018cae:	4770      	bx	lr
 8018cb0:	2000      	movs	r0, #0
 8018cb2:	4770      	bx	lr
 8018cb4:	2020      	movs	r0, #32
 8018cb6:	4770      	bx	lr

08018cb8 <__i2b>:
 8018cb8:	b510      	push	{r4, lr}
 8018cba:	460c      	mov	r4, r1
 8018cbc:	2101      	movs	r1, #1
 8018cbe:	f7ff febd 	bl	8018a3c <_Balloc>
 8018cc2:	4602      	mov	r2, r0
 8018cc4:	b928      	cbnz	r0, 8018cd2 <__i2b+0x1a>
 8018cc6:	4b05      	ldr	r3, [pc, #20]	@ (8018cdc <__i2b+0x24>)
 8018cc8:	4805      	ldr	r0, [pc, #20]	@ (8018ce0 <__i2b+0x28>)
 8018cca:	f240 1145 	movw	r1, #325	@ 0x145
 8018cce:	f001 fda7 	bl	801a820 <__assert_func>
 8018cd2:	2301      	movs	r3, #1
 8018cd4:	6144      	str	r4, [r0, #20]
 8018cd6:	6103      	str	r3, [r0, #16]
 8018cd8:	bd10      	pop	{r4, pc}
 8018cda:	bf00      	nop
 8018cdc:	0801b3bd 	.word	0x0801b3bd
 8018ce0:	0801b3ce 	.word	0x0801b3ce

08018ce4 <__multiply>:
 8018ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ce8:	4614      	mov	r4, r2
 8018cea:	690a      	ldr	r2, [r1, #16]
 8018cec:	6923      	ldr	r3, [r4, #16]
 8018cee:	429a      	cmp	r2, r3
 8018cf0:	bfa8      	it	ge
 8018cf2:	4623      	movge	r3, r4
 8018cf4:	460f      	mov	r7, r1
 8018cf6:	bfa4      	itt	ge
 8018cf8:	460c      	movge	r4, r1
 8018cfa:	461f      	movge	r7, r3
 8018cfc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018d00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018d04:	68a3      	ldr	r3, [r4, #8]
 8018d06:	6861      	ldr	r1, [r4, #4]
 8018d08:	eb0a 0609 	add.w	r6, sl, r9
 8018d0c:	42b3      	cmp	r3, r6
 8018d0e:	b085      	sub	sp, #20
 8018d10:	bfb8      	it	lt
 8018d12:	3101      	addlt	r1, #1
 8018d14:	f7ff fe92 	bl	8018a3c <_Balloc>
 8018d18:	b930      	cbnz	r0, 8018d28 <__multiply+0x44>
 8018d1a:	4602      	mov	r2, r0
 8018d1c:	4b44      	ldr	r3, [pc, #272]	@ (8018e30 <__multiply+0x14c>)
 8018d1e:	4845      	ldr	r0, [pc, #276]	@ (8018e34 <__multiply+0x150>)
 8018d20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018d24:	f001 fd7c 	bl	801a820 <__assert_func>
 8018d28:	f100 0514 	add.w	r5, r0, #20
 8018d2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018d30:	462b      	mov	r3, r5
 8018d32:	2200      	movs	r2, #0
 8018d34:	4543      	cmp	r3, r8
 8018d36:	d321      	bcc.n	8018d7c <__multiply+0x98>
 8018d38:	f107 0114 	add.w	r1, r7, #20
 8018d3c:	f104 0214 	add.w	r2, r4, #20
 8018d40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018d44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018d48:	9302      	str	r3, [sp, #8]
 8018d4a:	1b13      	subs	r3, r2, r4
 8018d4c:	3b15      	subs	r3, #21
 8018d4e:	f023 0303 	bic.w	r3, r3, #3
 8018d52:	3304      	adds	r3, #4
 8018d54:	f104 0715 	add.w	r7, r4, #21
 8018d58:	42ba      	cmp	r2, r7
 8018d5a:	bf38      	it	cc
 8018d5c:	2304      	movcc	r3, #4
 8018d5e:	9301      	str	r3, [sp, #4]
 8018d60:	9b02      	ldr	r3, [sp, #8]
 8018d62:	9103      	str	r1, [sp, #12]
 8018d64:	428b      	cmp	r3, r1
 8018d66:	d80c      	bhi.n	8018d82 <__multiply+0x9e>
 8018d68:	2e00      	cmp	r6, #0
 8018d6a:	dd03      	ble.n	8018d74 <__multiply+0x90>
 8018d6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d05b      	beq.n	8018e2c <__multiply+0x148>
 8018d74:	6106      	str	r6, [r0, #16]
 8018d76:	b005      	add	sp, #20
 8018d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d7c:	f843 2b04 	str.w	r2, [r3], #4
 8018d80:	e7d8      	b.n	8018d34 <__multiply+0x50>
 8018d82:	f8b1 a000 	ldrh.w	sl, [r1]
 8018d86:	f1ba 0f00 	cmp.w	sl, #0
 8018d8a:	d024      	beq.n	8018dd6 <__multiply+0xf2>
 8018d8c:	f104 0e14 	add.w	lr, r4, #20
 8018d90:	46a9      	mov	r9, r5
 8018d92:	f04f 0c00 	mov.w	ip, #0
 8018d96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018d9a:	f8d9 3000 	ldr.w	r3, [r9]
 8018d9e:	fa1f fb87 	uxth.w	fp, r7
 8018da2:	b29b      	uxth	r3, r3
 8018da4:	fb0a 330b 	mla	r3, sl, fp, r3
 8018da8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018dac:	f8d9 7000 	ldr.w	r7, [r9]
 8018db0:	4463      	add	r3, ip
 8018db2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018db6:	fb0a c70b 	mla	r7, sl, fp, ip
 8018dba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018dbe:	b29b      	uxth	r3, r3
 8018dc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018dc4:	4572      	cmp	r2, lr
 8018dc6:	f849 3b04 	str.w	r3, [r9], #4
 8018dca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018dce:	d8e2      	bhi.n	8018d96 <__multiply+0xb2>
 8018dd0:	9b01      	ldr	r3, [sp, #4]
 8018dd2:	f845 c003 	str.w	ip, [r5, r3]
 8018dd6:	9b03      	ldr	r3, [sp, #12]
 8018dd8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018ddc:	3104      	adds	r1, #4
 8018dde:	f1b9 0f00 	cmp.w	r9, #0
 8018de2:	d021      	beq.n	8018e28 <__multiply+0x144>
 8018de4:	682b      	ldr	r3, [r5, #0]
 8018de6:	f104 0c14 	add.w	ip, r4, #20
 8018dea:	46ae      	mov	lr, r5
 8018dec:	f04f 0a00 	mov.w	sl, #0
 8018df0:	f8bc b000 	ldrh.w	fp, [ip]
 8018df4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018df8:	fb09 770b 	mla	r7, r9, fp, r7
 8018dfc:	4457      	add	r7, sl
 8018dfe:	b29b      	uxth	r3, r3
 8018e00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018e04:	f84e 3b04 	str.w	r3, [lr], #4
 8018e08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018e0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018e10:	f8be 3000 	ldrh.w	r3, [lr]
 8018e14:	fb09 330a 	mla	r3, r9, sl, r3
 8018e18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018e1c:	4562      	cmp	r2, ip
 8018e1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018e22:	d8e5      	bhi.n	8018df0 <__multiply+0x10c>
 8018e24:	9f01      	ldr	r7, [sp, #4]
 8018e26:	51eb      	str	r3, [r5, r7]
 8018e28:	3504      	adds	r5, #4
 8018e2a:	e799      	b.n	8018d60 <__multiply+0x7c>
 8018e2c:	3e01      	subs	r6, #1
 8018e2e:	e79b      	b.n	8018d68 <__multiply+0x84>
 8018e30:	0801b3bd 	.word	0x0801b3bd
 8018e34:	0801b3ce 	.word	0x0801b3ce

08018e38 <__pow5mult>:
 8018e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e3c:	4615      	mov	r5, r2
 8018e3e:	f012 0203 	ands.w	r2, r2, #3
 8018e42:	4607      	mov	r7, r0
 8018e44:	460e      	mov	r6, r1
 8018e46:	d007      	beq.n	8018e58 <__pow5mult+0x20>
 8018e48:	4c25      	ldr	r4, [pc, #148]	@ (8018ee0 <__pow5mult+0xa8>)
 8018e4a:	3a01      	subs	r2, #1
 8018e4c:	2300      	movs	r3, #0
 8018e4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018e52:	f7ff fe55 	bl	8018b00 <__multadd>
 8018e56:	4606      	mov	r6, r0
 8018e58:	10ad      	asrs	r5, r5, #2
 8018e5a:	d03d      	beq.n	8018ed8 <__pow5mult+0xa0>
 8018e5c:	69fc      	ldr	r4, [r7, #28]
 8018e5e:	b97c      	cbnz	r4, 8018e80 <__pow5mult+0x48>
 8018e60:	2010      	movs	r0, #16
 8018e62:	f7ff fd35 	bl	80188d0 <malloc>
 8018e66:	4602      	mov	r2, r0
 8018e68:	61f8      	str	r0, [r7, #28]
 8018e6a:	b928      	cbnz	r0, 8018e78 <__pow5mult+0x40>
 8018e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8018ee4 <__pow5mult+0xac>)
 8018e6e:	481e      	ldr	r0, [pc, #120]	@ (8018ee8 <__pow5mult+0xb0>)
 8018e70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018e74:	f001 fcd4 	bl	801a820 <__assert_func>
 8018e78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018e7c:	6004      	str	r4, [r0, #0]
 8018e7e:	60c4      	str	r4, [r0, #12]
 8018e80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018e84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018e88:	b94c      	cbnz	r4, 8018e9e <__pow5mult+0x66>
 8018e8a:	f240 2171 	movw	r1, #625	@ 0x271
 8018e8e:	4638      	mov	r0, r7
 8018e90:	f7ff ff12 	bl	8018cb8 <__i2b>
 8018e94:	2300      	movs	r3, #0
 8018e96:	f8c8 0008 	str.w	r0, [r8, #8]
 8018e9a:	4604      	mov	r4, r0
 8018e9c:	6003      	str	r3, [r0, #0]
 8018e9e:	f04f 0900 	mov.w	r9, #0
 8018ea2:	07eb      	lsls	r3, r5, #31
 8018ea4:	d50a      	bpl.n	8018ebc <__pow5mult+0x84>
 8018ea6:	4631      	mov	r1, r6
 8018ea8:	4622      	mov	r2, r4
 8018eaa:	4638      	mov	r0, r7
 8018eac:	f7ff ff1a 	bl	8018ce4 <__multiply>
 8018eb0:	4631      	mov	r1, r6
 8018eb2:	4680      	mov	r8, r0
 8018eb4:	4638      	mov	r0, r7
 8018eb6:	f7ff fe01 	bl	8018abc <_Bfree>
 8018eba:	4646      	mov	r6, r8
 8018ebc:	106d      	asrs	r5, r5, #1
 8018ebe:	d00b      	beq.n	8018ed8 <__pow5mult+0xa0>
 8018ec0:	6820      	ldr	r0, [r4, #0]
 8018ec2:	b938      	cbnz	r0, 8018ed4 <__pow5mult+0x9c>
 8018ec4:	4622      	mov	r2, r4
 8018ec6:	4621      	mov	r1, r4
 8018ec8:	4638      	mov	r0, r7
 8018eca:	f7ff ff0b 	bl	8018ce4 <__multiply>
 8018ece:	6020      	str	r0, [r4, #0]
 8018ed0:	f8c0 9000 	str.w	r9, [r0]
 8018ed4:	4604      	mov	r4, r0
 8018ed6:	e7e4      	b.n	8018ea2 <__pow5mult+0x6a>
 8018ed8:	4630      	mov	r0, r6
 8018eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ede:	bf00      	nop
 8018ee0:	0801b428 	.word	0x0801b428
 8018ee4:	0801b34e 	.word	0x0801b34e
 8018ee8:	0801b3ce 	.word	0x0801b3ce

08018eec <__lshift>:
 8018eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ef0:	460c      	mov	r4, r1
 8018ef2:	6849      	ldr	r1, [r1, #4]
 8018ef4:	6923      	ldr	r3, [r4, #16]
 8018ef6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018efa:	68a3      	ldr	r3, [r4, #8]
 8018efc:	4607      	mov	r7, r0
 8018efe:	4691      	mov	r9, r2
 8018f00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018f04:	f108 0601 	add.w	r6, r8, #1
 8018f08:	42b3      	cmp	r3, r6
 8018f0a:	db0b      	blt.n	8018f24 <__lshift+0x38>
 8018f0c:	4638      	mov	r0, r7
 8018f0e:	f7ff fd95 	bl	8018a3c <_Balloc>
 8018f12:	4605      	mov	r5, r0
 8018f14:	b948      	cbnz	r0, 8018f2a <__lshift+0x3e>
 8018f16:	4602      	mov	r2, r0
 8018f18:	4b28      	ldr	r3, [pc, #160]	@ (8018fbc <__lshift+0xd0>)
 8018f1a:	4829      	ldr	r0, [pc, #164]	@ (8018fc0 <__lshift+0xd4>)
 8018f1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018f20:	f001 fc7e 	bl	801a820 <__assert_func>
 8018f24:	3101      	adds	r1, #1
 8018f26:	005b      	lsls	r3, r3, #1
 8018f28:	e7ee      	b.n	8018f08 <__lshift+0x1c>
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	f100 0114 	add.w	r1, r0, #20
 8018f30:	f100 0210 	add.w	r2, r0, #16
 8018f34:	4618      	mov	r0, r3
 8018f36:	4553      	cmp	r3, sl
 8018f38:	db33      	blt.n	8018fa2 <__lshift+0xb6>
 8018f3a:	6920      	ldr	r0, [r4, #16]
 8018f3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018f40:	f104 0314 	add.w	r3, r4, #20
 8018f44:	f019 091f 	ands.w	r9, r9, #31
 8018f48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018f4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018f50:	d02b      	beq.n	8018faa <__lshift+0xbe>
 8018f52:	f1c9 0e20 	rsb	lr, r9, #32
 8018f56:	468a      	mov	sl, r1
 8018f58:	2200      	movs	r2, #0
 8018f5a:	6818      	ldr	r0, [r3, #0]
 8018f5c:	fa00 f009 	lsl.w	r0, r0, r9
 8018f60:	4310      	orrs	r0, r2
 8018f62:	f84a 0b04 	str.w	r0, [sl], #4
 8018f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f6a:	459c      	cmp	ip, r3
 8018f6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8018f70:	d8f3      	bhi.n	8018f5a <__lshift+0x6e>
 8018f72:	ebac 0304 	sub.w	r3, ip, r4
 8018f76:	3b15      	subs	r3, #21
 8018f78:	f023 0303 	bic.w	r3, r3, #3
 8018f7c:	3304      	adds	r3, #4
 8018f7e:	f104 0015 	add.w	r0, r4, #21
 8018f82:	4584      	cmp	ip, r0
 8018f84:	bf38      	it	cc
 8018f86:	2304      	movcc	r3, #4
 8018f88:	50ca      	str	r2, [r1, r3]
 8018f8a:	b10a      	cbz	r2, 8018f90 <__lshift+0xa4>
 8018f8c:	f108 0602 	add.w	r6, r8, #2
 8018f90:	3e01      	subs	r6, #1
 8018f92:	4638      	mov	r0, r7
 8018f94:	612e      	str	r6, [r5, #16]
 8018f96:	4621      	mov	r1, r4
 8018f98:	f7ff fd90 	bl	8018abc <_Bfree>
 8018f9c:	4628      	mov	r0, r5
 8018f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8018fa6:	3301      	adds	r3, #1
 8018fa8:	e7c5      	b.n	8018f36 <__lshift+0x4a>
 8018faa:	3904      	subs	r1, #4
 8018fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8018fb4:	459c      	cmp	ip, r3
 8018fb6:	d8f9      	bhi.n	8018fac <__lshift+0xc0>
 8018fb8:	e7ea      	b.n	8018f90 <__lshift+0xa4>
 8018fba:	bf00      	nop
 8018fbc:	0801b3bd 	.word	0x0801b3bd
 8018fc0:	0801b3ce 	.word	0x0801b3ce

08018fc4 <__mcmp>:
 8018fc4:	690a      	ldr	r2, [r1, #16]
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	6900      	ldr	r0, [r0, #16]
 8018fca:	1a80      	subs	r0, r0, r2
 8018fcc:	b530      	push	{r4, r5, lr}
 8018fce:	d10e      	bne.n	8018fee <__mcmp+0x2a>
 8018fd0:	3314      	adds	r3, #20
 8018fd2:	3114      	adds	r1, #20
 8018fd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018fd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018fdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018fe0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018fe4:	4295      	cmp	r5, r2
 8018fe6:	d003      	beq.n	8018ff0 <__mcmp+0x2c>
 8018fe8:	d205      	bcs.n	8018ff6 <__mcmp+0x32>
 8018fea:	f04f 30ff 	mov.w	r0, #4294967295
 8018fee:	bd30      	pop	{r4, r5, pc}
 8018ff0:	42a3      	cmp	r3, r4
 8018ff2:	d3f3      	bcc.n	8018fdc <__mcmp+0x18>
 8018ff4:	e7fb      	b.n	8018fee <__mcmp+0x2a>
 8018ff6:	2001      	movs	r0, #1
 8018ff8:	e7f9      	b.n	8018fee <__mcmp+0x2a>
	...

08018ffc <__mdiff>:
 8018ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019000:	4689      	mov	r9, r1
 8019002:	4606      	mov	r6, r0
 8019004:	4611      	mov	r1, r2
 8019006:	4648      	mov	r0, r9
 8019008:	4614      	mov	r4, r2
 801900a:	f7ff ffdb 	bl	8018fc4 <__mcmp>
 801900e:	1e05      	subs	r5, r0, #0
 8019010:	d112      	bne.n	8019038 <__mdiff+0x3c>
 8019012:	4629      	mov	r1, r5
 8019014:	4630      	mov	r0, r6
 8019016:	f7ff fd11 	bl	8018a3c <_Balloc>
 801901a:	4602      	mov	r2, r0
 801901c:	b928      	cbnz	r0, 801902a <__mdiff+0x2e>
 801901e:	4b3f      	ldr	r3, [pc, #252]	@ (801911c <__mdiff+0x120>)
 8019020:	f240 2137 	movw	r1, #567	@ 0x237
 8019024:	483e      	ldr	r0, [pc, #248]	@ (8019120 <__mdiff+0x124>)
 8019026:	f001 fbfb 	bl	801a820 <__assert_func>
 801902a:	2301      	movs	r3, #1
 801902c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019030:	4610      	mov	r0, r2
 8019032:	b003      	add	sp, #12
 8019034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019038:	bfbc      	itt	lt
 801903a:	464b      	movlt	r3, r9
 801903c:	46a1      	movlt	r9, r4
 801903e:	4630      	mov	r0, r6
 8019040:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019044:	bfba      	itte	lt
 8019046:	461c      	movlt	r4, r3
 8019048:	2501      	movlt	r5, #1
 801904a:	2500      	movge	r5, #0
 801904c:	f7ff fcf6 	bl	8018a3c <_Balloc>
 8019050:	4602      	mov	r2, r0
 8019052:	b918      	cbnz	r0, 801905c <__mdiff+0x60>
 8019054:	4b31      	ldr	r3, [pc, #196]	@ (801911c <__mdiff+0x120>)
 8019056:	f240 2145 	movw	r1, #581	@ 0x245
 801905a:	e7e3      	b.n	8019024 <__mdiff+0x28>
 801905c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8019060:	6926      	ldr	r6, [r4, #16]
 8019062:	60c5      	str	r5, [r0, #12]
 8019064:	f109 0310 	add.w	r3, r9, #16
 8019068:	f109 0514 	add.w	r5, r9, #20
 801906c:	f104 0e14 	add.w	lr, r4, #20
 8019070:	f100 0b14 	add.w	fp, r0, #20
 8019074:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019078:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801907c:	9301      	str	r3, [sp, #4]
 801907e:	46d9      	mov	r9, fp
 8019080:	f04f 0c00 	mov.w	ip, #0
 8019084:	9b01      	ldr	r3, [sp, #4]
 8019086:	f85e 0b04 	ldr.w	r0, [lr], #4
 801908a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801908e:	9301      	str	r3, [sp, #4]
 8019090:	fa1f f38a 	uxth.w	r3, sl
 8019094:	4619      	mov	r1, r3
 8019096:	b283      	uxth	r3, r0
 8019098:	1acb      	subs	r3, r1, r3
 801909a:	0c00      	lsrs	r0, r0, #16
 801909c:	4463      	add	r3, ip
 801909e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80190a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80190a6:	b29b      	uxth	r3, r3
 80190a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80190ac:	4576      	cmp	r6, lr
 80190ae:	f849 3b04 	str.w	r3, [r9], #4
 80190b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80190b6:	d8e5      	bhi.n	8019084 <__mdiff+0x88>
 80190b8:	1b33      	subs	r3, r6, r4
 80190ba:	3b15      	subs	r3, #21
 80190bc:	f023 0303 	bic.w	r3, r3, #3
 80190c0:	3415      	adds	r4, #21
 80190c2:	3304      	adds	r3, #4
 80190c4:	42a6      	cmp	r6, r4
 80190c6:	bf38      	it	cc
 80190c8:	2304      	movcc	r3, #4
 80190ca:	441d      	add	r5, r3
 80190cc:	445b      	add	r3, fp
 80190ce:	461e      	mov	r6, r3
 80190d0:	462c      	mov	r4, r5
 80190d2:	4544      	cmp	r4, r8
 80190d4:	d30e      	bcc.n	80190f4 <__mdiff+0xf8>
 80190d6:	f108 0103 	add.w	r1, r8, #3
 80190da:	1b49      	subs	r1, r1, r5
 80190dc:	f021 0103 	bic.w	r1, r1, #3
 80190e0:	3d03      	subs	r5, #3
 80190e2:	45a8      	cmp	r8, r5
 80190e4:	bf38      	it	cc
 80190e6:	2100      	movcc	r1, #0
 80190e8:	440b      	add	r3, r1
 80190ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80190ee:	b191      	cbz	r1, 8019116 <__mdiff+0x11a>
 80190f0:	6117      	str	r7, [r2, #16]
 80190f2:	e79d      	b.n	8019030 <__mdiff+0x34>
 80190f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80190f8:	46e6      	mov	lr, ip
 80190fa:	0c08      	lsrs	r0, r1, #16
 80190fc:	fa1c fc81 	uxtah	ip, ip, r1
 8019100:	4471      	add	r1, lr
 8019102:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8019106:	b289      	uxth	r1, r1
 8019108:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801910c:	f846 1b04 	str.w	r1, [r6], #4
 8019110:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019114:	e7dd      	b.n	80190d2 <__mdiff+0xd6>
 8019116:	3f01      	subs	r7, #1
 8019118:	e7e7      	b.n	80190ea <__mdiff+0xee>
 801911a:	bf00      	nop
 801911c:	0801b3bd 	.word	0x0801b3bd
 8019120:	0801b3ce 	.word	0x0801b3ce

08019124 <__ulp>:
 8019124:	b082      	sub	sp, #8
 8019126:	ed8d 0b00 	vstr	d0, [sp]
 801912a:	9a01      	ldr	r2, [sp, #4]
 801912c:	4b0f      	ldr	r3, [pc, #60]	@ (801916c <__ulp+0x48>)
 801912e:	4013      	ands	r3, r2
 8019130:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8019134:	2b00      	cmp	r3, #0
 8019136:	dc08      	bgt.n	801914a <__ulp+0x26>
 8019138:	425b      	negs	r3, r3
 801913a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801913e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019142:	da04      	bge.n	801914e <__ulp+0x2a>
 8019144:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8019148:	4113      	asrs	r3, r2
 801914a:	2200      	movs	r2, #0
 801914c:	e008      	b.n	8019160 <__ulp+0x3c>
 801914e:	f1a2 0314 	sub.w	r3, r2, #20
 8019152:	2b1e      	cmp	r3, #30
 8019154:	bfda      	itte	le
 8019156:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801915a:	40da      	lsrle	r2, r3
 801915c:	2201      	movgt	r2, #1
 801915e:	2300      	movs	r3, #0
 8019160:	4619      	mov	r1, r3
 8019162:	4610      	mov	r0, r2
 8019164:	ec41 0b10 	vmov	d0, r0, r1
 8019168:	b002      	add	sp, #8
 801916a:	4770      	bx	lr
 801916c:	7ff00000 	.word	0x7ff00000

08019170 <__b2d>:
 8019170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019174:	6906      	ldr	r6, [r0, #16]
 8019176:	f100 0814 	add.w	r8, r0, #20
 801917a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801917e:	1f37      	subs	r7, r6, #4
 8019180:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019184:	4610      	mov	r0, r2
 8019186:	f7ff fd4b 	bl	8018c20 <__hi0bits>
 801918a:	f1c0 0320 	rsb	r3, r0, #32
 801918e:	280a      	cmp	r0, #10
 8019190:	600b      	str	r3, [r1, #0]
 8019192:	491b      	ldr	r1, [pc, #108]	@ (8019200 <__b2d+0x90>)
 8019194:	dc15      	bgt.n	80191c2 <__b2d+0x52>
 8019196:	f1c0 0c0b 	rsb	ip, r0, #11
 801919a:	fa22 f30c 	lsr.w	r3, r2, ip
 801919e:	45b8      	cmp	r8, r7
 80191a0:	ea43 0501 	orr.w	r5, r3, r1
 80191a4:	bf34      	ite	cc
 80191a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80191aa:	2300      	movcs	r3, #0
 80191ac:	3015      	adds	r0, #21
 80191ae:	fa02 f000 	lsl.w	r0, r2, r0
 80191b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80191b6:	4303      	orrs	r3, r0
 80191b8:	461c      	mov	r4, r3
 80191ba:	ec45 4b10 	vmov	d0, r4, r5
 80191be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191c2:	45b8      	cmp	r8, r7
 80191c4:	bf3a      	itte	cc
 80191c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80191ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80191ce:	2300      	movcs	r3, #0
 80191d0:	380b      	subs	r0, #11
 80191d2:	d012      	beq.n	80191fa <__b2d+0x8a>
 80191d4:	f1c0 0120 	rsb	r1, r0, #32
 80191d8:	fa23 f401 	lsr.w	r4, r3, r1
 80191dc:	4082      	lsls	r2, r0
 80191de:	4322      	orrs	r2, r4
 80191e0:	4547      	cmp	r7, r8
 80191e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80191e6:	bf8c      	ite	hi
 80191e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80191ec:	2200      	movls	r2, #0
 80191ee:	4083      	lsls	r3, r0
 80191f0:	40ca      	lsrs	r2, r1
 80191f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80191f6:	4313      	orrs	r3, r2
 80191f8:	e7de      	b.n	80191b8 <__b2d+0x48>
 80191fa:	ea42 0501 	orr.w	r5, r2, r1
 80191fe:	e7db      	b.n	80191b8 <__b2d+0x48>
 8019200:	3ff00000 	.word	0x3ff00000

08019204 <__d2b>:
 8019204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019208:	460f      	mov	r7, r1
 801920a:	2101      	movs	r1, #1
 801920c:	ec59 8b10 	vmov	r8, r9, d0
 8019210:	4616      	mov	r6, r2
 8019212:	f7ff fc13 	bl	8018a3c <_Balloc>
 8019216:	4604      	mov	r4, r0
 8019218:	b930      	cbnz	r0, 8019228 <__d2b+0x24>
 801921a:	4602      	mov	r2, r0
 801921c:	4b23      	ldr	r3, [pc, #140]	@ (80192ac <__d2b+0xa8>)
 801921e:	4824      	ldr	r0, [pc, #144]	@ (80192b0 <__d2b+0xac>)
 8019220:	f240 310f 	movw	r1, #783	@ 0x30f
 8019224:	f001 fafc 	bl	801a820 <__assert_func>
 8019228:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801922c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019230:	b10d      	cbz	r5, 8019236 <__d2b+0x32>
 8019232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019236:	9301      	str	r3, [sp, #4]
 8019238:	f1b8 0300 	subs.w	r3, r8, #0
 801923c:	d023      	beq.n	8019286 <__d2b+0x82>
 801923e:	4668      	mov	r0, sp
 8019240:	9300      	str	r3, [sp, #0]
 8019242:	f7ff fd0c 	bl	8018c5e <__lo0bits>
 8019246:	e9dd 1200 	ldrd	r1, r2, [sp]
 801924a:	b1d0      	cbz	r0, 8019282 <__d2b+0x7e>
 801924c:	f1c0 0320 	rsb	r3, r0, #32
 8019250:	fa02 f303 	lsl.w	r3, r2, r3
 8019254:	430b      	orrs	r3, r1
 8019256:	40c2      	lsrs	r2, r0
 8019258:	6163      	str	r3, [r4, #20]
 801925a:	9201      	str	r2, [sp, #4]
 801925c:	9b01      	ldr	r3, [sp, #4]
 801925e:	61a3      	str	r3, [r4, #24]
 8019260:	2b00      	cmp	r3, #0
 8019262:	bf0c      	ite	eq
 8019264:	2201      	moveq	r2, #1
 8019266:	2202      	movne	r2, #2
 8019268:	6122      	str	r2, [r4, #16]
 801926a:	b1a5      	cbz	r5, 8019296 <__d2b+0x92>
 801926c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019270:	4405      	add	r5, r0
 8019272:	603d      	str	r5, [r7, #0]
 8019274:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019278:	6030      	str	r0, [r6, #0]
 801927a:	4620      	mov	r0, r4
 801927c:	b003      	add	sp, #12
 801927e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019282:	6161      	str	r1, [r4, #20]
 8019284:	e7ea      	b.n	801925c <__d2b+0x58>
 8019286:	a801      	add	r0, sp, #4
 8019288:	f7ff fce9 	bl	8018c5e <__lo0bits>
 801928c:	9b01      	ldr	r3, [sp, #4]
 801928e:	6163      	str	r3, [r4, #20]
 8019290:	3020      	adds	r0, #32
 8019292:	2201      	movs	r2, #1
 8019294:	e7e8      	b.n	8019268 <__d2b+0x64>
 8019296:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801929a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801929e:	6038      	str	r0, [r7, #0]
 80192a0:	6918      	ldr	r0, [r3, #16]
 80192a2:	f7ff fcbd 	bl	8018c20 <__hi0bits>
 80192a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80192aa:	e7e5      	b.n	8019278 <__d2b+0x74>
 80192ac:	0801b3bd 	.word	0x0801b3bd
 80192b0:	0801b3ce 	.word	0x0801b3ce

080192b4 <__ratio>:
 80192b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b8:	4688      	mov	r8, r1
 80192ba:	4669      	mov	r1, sp
 80192bc:	4681      	mov	r9, r0
 80192be:	f7ff ff57 	bl	8019170 <__b2d>
 80192c2:	a901      	add	r1, sp, #4
 80192c4:	4640      	mov	r0, r8
 80192c6:	ec55 4b10 	vmov	r4, r5, d0
 80192ca:	f7ff ff51 	bl	8019170 <__b2d>
 80192ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80192d2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80192d6:	1ad2      	subs	r2, r2, r3
 80192d8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80192dc:	1a5b      	subs	r3, r3, r1
 80192de:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80192e2:	ec57 6b10 	vmov	r6, r7, d0
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	bfd6      	itet	le
 80192ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80192ee:	462a      	movgt	r2, r5
 80192f0:	463a      	movle	r2, r7
 80192f2:	46ab      	mov	fp, r5
 80192f4:	46a2      	mov	sl, r4
 80192f6:	bfce      	itee	gt
 80192f8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80192fc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019300:	ee00 3a90 	vmovle	s1, r3
 8019304:	ec4b ab17 	vmov	d7, sl, fp
 8019308:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801930c:	b003      	add	sp, #12
 801930e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019312 <__copybits>:
 8019312:	3901      	subs	r1, #1
 8019314:	b570      	push	{r4, r5, r6, lr}
 8019316:	1149      	asrs	r1, r1, #5
 8019318:	6914      	ldr	r4, [r2, #16]
 801931a:	3101      	adds	r1, #1
 801931c:	f102 0314 	add.w	r3, r2, #20
 8019320:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019324:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019328:	1f05      	subs	r5, r0, #4
 801932a:	42a3      	cmp	r3, r4
 801932c:	d30c      	bcc.n	8019348 <__copybits+0x36>
 801932e:	1aa3      	subs	r3, r4, r2
 8019330:	3b11      	subs	r3, #17
 8019332:	f023 0303 	bic.w	r3, r3, #3
 8019336:	3211      	adds	r2, #17
 8019338:	42a2      	cmp	r2, r4
 801933a:	bf88      	it	hi
 801933c:	2300      	movhi	r3, #0
 801933e:	4418      	add	r0, r3
 8019340:	2300      	movs	r3, #0
 8019342:	4288      	cmp	r0, r1
 8019344:	d305      	bcc.n	8019352 <__copybits+0x40>
 8019346:	bd70      	pop	{r4, r5, r6, pc}
 8019348:	f853 6b04 	ldr.w	r6, [r3], #4
 801934c:	f845 6f04 	str.w	r6, [r5, #4]!
 8019350:	e7eb      	b.n	801932a <__copybits+0x18>
 8019352:	f840 3b04 	str.w	r3, [r0], #4
 8019356:	e7f4      	b.n	8019342 <__copybits+0x30>

08019358 <__any_on>:
 8019358:	f100 0214 	add.w	r2, r0, #20
 801935c:	6900      	ldr	r0, [r0, #16]
 801935e:	114b      	asrs	r3, r1, #5
 8019360:	4298      	cmp	r0, r3
 8019362:	b510      	push	{r4, lr}
 8019364:	db11      	blt.n	801938a <__any_on+0x32>
 8019366:	dd0a      	ble.n	801937e <__any_on+0x26>
 8019368:	f011 011f 	ands.w	r1, r1, #31
 801936c:	d007      	beq.n	801937e <__any_on+0x26>
 801936e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019372:	fa24 f001 	lsr.w	r0, r4, r1
 8019376:	fa00 f101 	lsl.w	r1, r0, r1
 801937a:	428c      	cmp	r4, r1
 801937c:	d10b      	bne.n	8019396 <__any_on+0x3e>
 801937e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019382:	4293      	cmp	r3, r2
 8019384:	d803      	bhi.n	801938e <__any_on+0x36>
 8019386:	2000      	movs	r0, #0
 8019388:	bd10      	pop	{r4, pc}
 801938a:	4603      	mov	r3, r0
 801938c:	e7f7      	b.n	801937e <__any_on+0x26>
 801938e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019392:	2900      	cmp	r1, #0
 8019394:	d0f5      	beq.n	8019382 <__any_on+0x2a>
 8019396:	2001      	movs	r0, #1
 8019398:	e7f6      	b.n	8019388 <__any_on+0x30>

0801939a <sulp>:
 801939a:	b570      	push	{r4, r5, r6, lr}
 801939c:	4604      	mov	r4, r0
 801939e:	460d      	mov	r5, r1
 80193a0:	4616      	mov	r6, r2
 80193a2:	ec45 4b10 	vmov	d0, r4, r5
 80193a6:	f7ff febd 	bl	8019124 <__ulp>
 80193aa:	b17e      	cbz	r6, 80193cc <sulp+0x32>
 80193ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80193b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	dd09      	ble.n	80193cc <sulp+0x32>
 80193b8:	051b      	lsls	r3, r3, #20
 80193ba:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80193be:	2000      	movs	r0, #0
 80193c0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80193c4:	ec41 0b17 	vmov	d7, r0, r1
 80193c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80193cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080193d0 <_strtod_l>:
 80193d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193d4:	ed2d 8b0a 	vpush	{d8-d12}
 80193d8:	b097      	sub	sp, #92	@ 0x5c
 80193da:	4688      	mov	r8, r1
 80193dc:	920e      	str	r2, [sp, #56]	@ 0x38
 80193de:	2200      	movs	r2, #0
 80193e0:	9212      	str	r2, [sp, #72]	@ 0x48
 80193e2:	9005      	str	r0, [sp, #20]
 80193e4:	f04f 0a00 	mov.w	sl, #0
 80193e8:	f04f 0b00 	mov.w	fp, #0
 80193ec:	460a      	mov	r2, r1
 80193ee:	9211      	str	r2, [sp, #68]	@ 0x44
 80193f0:	7811      	ldrb	r1, [r2, #0]
 80193f2:	292b      	cmp	r1, #43	@ 0x2b
 80193f4:	d04c      	beq.n	8019490 <_strtod_l+0xc0>
 80193f6:	d839      	bhi.n	801946c <_strtod_l+0x9c>
 80193f8:	290d      	cmp	r1, #13
 80193fa:	d833      	bhi.n	8019464 <_strtod_l+0x94>
 80193fc:	2908      	cmp	r1, #8
 80193fe:	d833      	bhi.n	8019468 <_strtod_l+0x98>
 8019400:	2900      	cmp	r1, #0
 8019402:	d03c      	beq.n	801947e <_strtod_l+0xae>
 8019404:	2200      	movs	r2, #0
 8019406:	9208      	str	r2, [sp, #32]
 8019408:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801940a:	782a      	ldrb	r2, [r5, #0]
 801940c:	2a30      	cmp	r2, #48	@ 0x30
 801940e:	f040 80b5 	bne.w	801957c <_strtod_l+0x1ac>
 8019412:	786a      	ldrb	r2, [r5, #1]
 8019414:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019418:	2a58      	cmp	r2, #88	@ 0x58
 801941a:	d170      	bne.n	80194fe <_strtod_l+0x12e>
 801941c:	9302      	str	r3, [sp, #8]
 801941e:	9b08      	ldr	r3, [sp, #32]
 8019420:	9301      	str	r3, [sp, #4]
 8019422:	ab12      	add	r3, sp, #72	@ 0x48
 8019424:	9300      	str	r3, [sp, #0]
 8019426:	4a8b      	ldr	r2, [pc, #556]	@ (8019654 <_strtod_l+0x284>)
 8019428:	9805      	ldr	r0, [sp, #20]
 801942a:	ab13      	add	r3, sp, #76	@ 0x4c
 801942c:	a911      	add	r1, sp, #68	@ 0x44
 801942e:	f001 fa91 	bl	801a954 <__gethex>
 8019432:	f010 060f 	ands.w	r6, r0, #15
 8019436:	4604      	mov	r4, r0
 8019438:	d005      	beq.n	8019446 <_strtod_l+0x76>
 801943a:	2e06      	cmp	r6, #6
 801943c:	d12a      	bne.n	8019494 <_strtod_l+0xc4>
 801943e:	3501      	adds	r5, #1
 8019440:	2300      	movs	r3, #0
 8019442:	9511      	str	r5, [sp, #68]	@ 0x44
 8019444:	9308      	str	r3, [sp, #32]
 8019446:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019448:	2b00      	cmp	r3, #0
 801944a:	f040 852f 	bne.w	8019eac <_strtod_l+0xadc>
 801944e:	9b08      	ldr	r3, [sp, #32]
 8019450:	ec4b ab10 	vmov	d0, sl, fp
 8019454:	b1cb      	cbz	r3, 801948a <_strtod_l+0xba>
 8019456:	eeb1 0b40 	vneg.f64	d0, d0
 801945a:	b017      	add	sp, #92	@ 0x5c
 801945c:	ecbd 8b0a 	vpop	{d8-d12}
 8019460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019464:	2920      	cmp	r1, #32
 8019466:	d1cd      	bne.n	8019404 <_strtod_l+0x34>
 8019468:	3201      	adds	r2, #1
 801946a:	e7c0      	b.n	80193ee <_strtod_l+0x1e>
 801946c:	292d      	cmp	r1, #45	@ 0x2d
 801946e:	d1c9      	bne.n	8019404 <_strtod_l+0x34>
 8019470:	2101      	movs	r1, #1
 8019472:	9108      	str	r1, [sp, #32]
 8019474:	1c51      	adds	r1, r2, #1
 8019476:	9111      	str	r1, [sp, #68]	@ 0x44
 8019478:	7852      	ldrb	r2, [r2, #1]
 801947a:	2a00      	cmp	r2, #0
 801947c:	d1c4      	bne.n	8019408 <_strtod_l+0x38>
 801947e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019480:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8019484:	2b00      	cmp	r3, #0
 8019486:	f040 850f 	bne.w	8019ea8 <_strtod_l+0xad8>
 801948a:	ec4b ab10 	vmov	d0, sl, fp
 801948e:	e7e4      	b.n	801945a <_strtod_l+0x8a>
 8019490:	2100      	movs	r1, #0
 8019492:	e7ee      	b.n	8019472 <_strtod_l+0xa2>
 8019494:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019496:	b13a      	cbz	r2, 80194a8 <_strtod_l+0xd8>
 8019498:	2135      	movs	r1, #53	@ 0x35
 801949a:	a814      	add	r0, sp, #80	@ 0x50
 801949c:	f7ff ff39 	bl	8019312 <__copybits>
 80194a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80194a2:	9805      	ldr	r0, [sp, #20]
 80194a4:	f7ff fb0a 	bl	8018abc <_Bfree>
 80194a8:	1e73      	subs	r3, r6, #1
 80194aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80194ac:	2b04      	cmp	r3, #4
 80194ae:	d806      	bhi.n	80194be <_strtod_l+0xee>
 80194b0:	e8df f003 	tbb	[pc, r3]
 80194b4:	201d0314 	.word	0x201d0314
 80194b8:	14          	.byte	0x14
 80194b9:	00          	.byte	0x00
 80194ba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80194be:	05e3      	lsls	r3, r4, #23
 80194c0:	bf48      	it	mi
 80194c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80194c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80194ca:	0d1b      	lsrs	r3, r3, #20
 80194cc:	051b      	lsls	r3, r3, #20
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d1b9      	bne.n	8019446 <_strtod_l+0x76>
 80194d2:	f7fe fb91 	bl	8017bf8 <__errno>
 80194d6:	2322      	movs	r3, #34	@ 0x22
 80194d8:	6003      	str	r3, [r0, #0]
 80194da:	e7b4      	b.n	8019446 <_strtod_l+0x76>
 80194dc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80194e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80194e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80194e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80194ec:	e7e7      	b.n	80194be <_strtod_l+0xee>
 80194ee:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801965c <_strtod_l+0x28c>
 80194f2:	e7e4      	b.n	80194be <_strtod_l+0xee>
 80194f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80194f8:	f04f 3aff 	mov.w	sl, #4294967295
 80194fc:	e7df      	b.n	80194be <_strtod_l+0xee>
 80194fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019500:	1c5a      	adds	r2, r3, #1
 8019502:	9211      	str	r2, [sp, #68]	@ 0x44
 8019504:	785b      	ldrb	r3, [r3, #1]
 8019506:	2b30      	cmp	r3, #48	@ 0x30
 8019508:	d0f9      	beq.n	80194fe <_strtod_l+0x12e>
 801950a:	2b00      	cmp	r3, #0
 801950c:	d09b      	beq.n	8019446 <_strtod_l+0x76>
 801950e:	2301      	movs	r3, #1
 8019510:	2600      	movs	r6, #0
 8019512:	9307      	str	r3, [sp, #28]
 8019514:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019516:	930a      	str	r3, [sp, #40]	@ 0x28
 8019518:	46b1      	mov	r9, r6
 801951a:	4635      	mov	r5, r6
 801951c:	220a      	movs	r2, #10
 801951e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8019520:	7804      	ldrb	r4, [r0, #0]
 8019522:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8019526:	b2d9      	uxtb	r1, r3
 8019528:	2909      	cmp	r1, #9
 801952a:	d929      	bls.n	8019580 <_strtod_l+0x1b0>
 801952c:	494a      	ldr	r1, [pc, #296]	@ (8019658 <_strtod_l+0x288>)
 801952e:	2201      	movs	r2, #1
 8019530:	f001 f928 	bl	801a784 <strncmp>
 8019534:	b378      	cbz	r0, 8019596 <_strtod_l+0x1c6>
 8019536:	2000      	movs	r0, #0
 8019538:	4622      	mov	r2, r4
 801953a:	462b      	mov	r3, r5
 801953c:	4607      	mov	r7, r0
 801953e:	9006      	str	r0, [sp, #24]
 8019540:	2a65      	cmp	r2, #101	@ 0x65
 8019542:	d001      	beq.n	8019548 <_strtod_l+0x178>
 8019544:	2a45      	cmp	r2, #69	@ 0x45
 8019546:	d117      	bne.n	8019578 <_strtod_l+0x1a8>
 8019548:	b91b      	cbnz	r3, 8019552 <_strtod_l+0x182>
 801954a:	9b07      	ldr	r3, [sp, #28]
 801954c:	4303      	orrs	r3, r0
 801954e:	d096      	beq.n	801947e <_strtod_l+0xae>
 8019550:	2300      	movs	r3, #0
 8019552:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8019556:	f108 0201 	add.w	r2, r8, #1
 801955a:	9211      	str	r2, [sp, #68]	@ 0x44
 801955c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019560:	2a2b      	cmp	r2, #43	@ 0x2b
 8019562:	d06b      	beq.n	801963c <_strtod_l+0x26c>
 8019564:	2a2d      	cmp	r2, #45	@ 0x2d
 8019566:	d071      	beq.n	801964c <_strtod_l+0x27c>
 8019568:	f04f 0e00 	mov.w	lr, #0
 801956c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8019570:	2c09      	cmp	r4, #9
 8019572:	d979      	bls.n	8019668 <_strtod_l+0x298>
 8019574:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8019578:	2400      	movs	r4, #0
 801957a:	e094      	b.n	80196a6 <_strtod_l+0x2d6>
 801957c:	2300      	movs	r3, #0
 801957e:	e7c7      	b.n	8019510 <_strtod_l+0x140>
 8019580:	2d08      	cmp	r5, #8
 8019582:	f100 0001 	add.w	r0, r0, #1
 8019586:	bfd4      	ite	le
 8019588:	fb02 3909 	mlale	r9, r2, r9, r3
 801958c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8019590:	3501      	adds	r5, #1
 8019592:	9011      	str	r0, [sp, #68]	@ 0x44
 8019594:	e7c3      	b.n	801951e <_strtod_l+0x14e>
 8019596:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019598:	1c5a      	adds	r2, r3, #1
 801959a:	9211      	str	r2, [sp, #68]	@ 0x44
 801959c:	785a      	ldrb	r2, [r3, #1]
 801959e:	b375      	cbz	r5, 80195fe <_strtod_l+0x22e>
 80195a0:	4607      	mov	r7, r0
 80195a2:	462b      	mov	r3, r5
 80195a4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80195a8:	2909      	cmp	r1, #9
 80195aa:	d913      	bls.n	80195d4 <_strtod_l+0x204>
 80195ac:	2101      	movs	r1, #1
 80195ae:	9106      	str	r1, [sp, #24]
 80195b0:	e7c6      	b.n	8019540 <_strtod_l+0x170>
 80195b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80195b4:	1c5a      	adds	r2, r3, #1
 80195b6:	9211      	str	r2, [sp, #68]	@ 0x44
 80195b8:	785a      	ldrb	r2, [r3, #1]
 80195ba:	3001      	adds	r0, #1
 80195bc:	2a30      	cmp	r2, #48	@ 0x30
 80195be:	d0f8      	beq.n	80195b2 <_strtod_l+0x1e2>
 80195c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80195c4:	2b08      	cmp	r3, #8
 80195c6:	f200 8476 	bhi.w	8019eb6 <_strtod_l+0xae6>
 80195ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80195cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80195ce:	4607      	mov	r7, r0
 80195d0:	2000      	movs	r0, #0
 80195d2:	4603      	mov	r3, r0
 80195d4:	3a30      	subs	r2, #48	@ 0x30
 80195d6:	f100 0101 	add.w	r1, r0, #1
 80195da:	d023      	beq.n	8019624 <_strtod_l+0x254>
 80195dc:	440f      	add	r7, r1
 80195de:	eb00 0c03 	add.w	ip, r0, r3
 80195e2:	4619      	mov	r1, r3
 80195e4:	240a      	movs	r4, #10
 80195e6:	4561      	cmp	r1, ip
 80195e8:	d10b      	bne.n	8019602 <_strtod_l+0x232>
 80195ea:	1c5c      	adds	r4, r3, #1
 80195ec:	4403      	add	r3, r0
 80195ee:	2b08      	cmp	r3, #8
 80195f0:	4404      	add	r4, r0
 80195f2:	dc11      	bgt.n	8019618 <_strtod_l+0x248>
 80195f4:	230a      	movs	r3, #10
 80195f6:	fb03 2909 	mla	r9, r3, r9, r2
 80195fa:	2100      	movs	r1, #0
 80195fc:	e013      	b.n	8019626 <_strtod_l+0x256>
 80195fe:	4628      	mov	r0, r5
 8019600:	e7dc      	b.n	80195bc <_strtod_l+0x1ec>
 8019602:	2908      	cmp	r1, #8
 8019604:	f101 0101 	add.w	r1, r1, #1
 8019608:	dc02      	bgt.n	8019610 <_strtod_l+0x240>
 801960a:	fb04 f909 	mul.w	r9, r4, r9
 801960e:	e7ea      	b.n	80195e6 <_strtod_l+0x216>
 8019610:	2910      	cmp	r1, #16
 8019612:	bfd8      	it	le
 8019614:	4366      	mulle	r6, r4
 8019616:	e7e6      	b.n	80195e6 <_strtod_l+0x216>
 8019618:	2b0f      	cmp	r3, #15
 801961a:	dcee      	bgt.n	80195fa <_strtod_l+0x22a>
 801961c:	230a      	movs	r3, #10
 801961e:	fb03 2606 	mla	r6, r3, r6, r2
 8019622:	e7ea      	b.n	80195fa <_strtod_l+0x22a>
 8019624:	461c      	mov	r4, r3
 8019626:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019628:	1c5a      	adds	r2, r3, #1
 801962a:	9211      	str	r2, [sp, #68]	@ 0x44
 801962c:	785a      	ldrb	r2, [r3, #1]
 801962e:	4608      	mov	r0, r1
 8019630:	4623      	mov	r3, r4
 8019632:	e7b7      	b.n	80195a4 <_strtod_l+0x1d4>
 8019634:	2301      	movs	r3, #1
 8019636:	2700      	movs	r7, #0
 8019638:	9306      	str	r3, [sp, #24]
 801963a:	e786      	b.n	801954a <_strtod_l+0x17a>
 801963c:	f04f 0e00 	mov.w	lr, #0
 8019640:	f108 0202 	add.w	r2, r8, #2
 8019644:	9211      	str	r2, [sp, #68]	@ 0x44
 8019646:	f898 2002 	ldrb.w	r2, [r8, #2]
 801964a:	e78f      	b.n	801956c <_strtod_l+0x19c>
 801964c:	f04f 0e01 	mov.w	lr, #1
 8019650:	e7f6      	b.n	8019640 <_strtod_l+0x270>
 8019652:	bf00      	nop
 8019654:	0801b540 	.word	0x0801b540
 8019658:	0801b528 	.word	0x0801b528
 801965c:	7ff00000 	.word	0x7ff00000
 8019660:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019662:	1c54      	adds	r4, r2, #1
 8019664:	9411      	str	r4, [sp, #68]	@ 0x44
 8019666:	7852      	ldrb	r2, [r2, #1]
 8019668:	2a30      	cmp	r2, #48	@ 0x30
 801966a:	d0f9      	beq.n	8019660 <_strtod_l+0x290>
 801966c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8019670:	2c08      	cmp	r4, #8
 8019672:	d881      	bhi.n	8019578 <_strtod_l+0x1a8>
 8019674:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8019678:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801967a:	9209      	str	r2, [sp, #36]	@ 0x24
 801967c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801967e:	1c51      	adds	r1, r2, #1
 8019680:	9111      	str	r1, [sp, #68]	@ 0x44
 8019682:	7852      	ldrb	r2, [r2, #1]
 8019684:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8019688:	2c09      	cmp	r4, #9
 801968a:	d938      	bls.n	80196fe <_strtod_l+0x32e>
 801968c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801968e:	1b0c      	subs	r4, r1, r4
 8019690:	2c08      	cmp	r4, #8
 8019692:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8019696:	dc02      	bgt.n	801969e <_strtod_l+0x2ce>
 8019698:	4564      	cmp	r4, ip
 801969a:	bfa8      	it	ge
 801969c:	4664      	movge	r4, ip
 801969e:	f1be 0f00 	cmp.w	lr, #0
 80196a2:	d000      	beq.n	80196a6 <_strtod_l+0x2d6>
 80196a4:	4264      	negs	r4, r4
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d14e      	bne.n	8019748 <_strtod_l+0x378>
 80196aa:	9b07      	ldr	r3, [sp, #28]
 80196ac:	4318      	orrs	r0, r3
 80196ae:	f47f aeca 	bne.w	8019446 <_strtod_l+0x76>
 80196b2:	9b06      	ldr	r3, [sp, #24]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	f47f aee2 	bne.w	801947e <_strtod_l+0xae>
 80196ba:	2a69      	cmp	r2, #105	@ 0x69
 80196bc:	d027      	beq.n	801970e <_strtod_l+0x33e>
 80196be:	dc24      	bgt.n	801970a <_strtod_l+0x33a>
 80196c0:	2a49      	cmp	r2, #73	@ 0x49
 80196c2:	d024      	beq.n	801970e <_strtod_l+0x33e>
 80196c4:	2a4e      	cmp	r2, #78	@ 0x4e
 80196c6:	f47f aeda 	bne.w	801947e <_strtod_l+0xae>
 80196ca:	4997      	ldr	r1, [pc, #604]	@ (8019928 <_strtod_l+0x558>)
 80196cc:	a811      	add	r0, sp, #68	@ 0x44
 80196ce:	f001 fb63 	bl	801ad98 <__match>
 80196d2:	2800      	cmp	r0, #0
 80196d4:	f43f aed3 	beq.w	801947e <_strtod_l+0xae>
 80196d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80196da:	781b      	ldrb	r3, [r3, #0]
 80196dc:	2b28      	cmp	r3, #40	@ 0x28
 80196de:	d12d      	bne.n	801973c <_strtod_l+0x36c>
 80196e0:	4992      	ldr	r1, [pc, #584]	@ (801992c <_strtod_l+0x55c>)
 80196e2:	aa14      	add	r2, sp, #80	@ 0x50
 80196e4:	a811      	add	r0, sp, #68	@ 0x44
 80196e6:	f001 fb6b 	bl	801adc0 <__hexnan>
 80196ea:	2805      	cmp	r0, #5
 80196ec:	d126      	bne.n	801973c <_strtod_l+0x36c>
 80196ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80196f0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80196f4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80196f8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80196fc:	e6a3      	b.n	8019446 <_strtod_l+0x76>
 80196fe:	240a      	movs	r4, #10
 8019700:	fb04 2c0c 	mla	ip, r4, ip, r2
 8019704:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8019708:	e7b8      	b.n	801967c <_strtod_l+0x2ac>
 801970a:	2a6e      	cmp	r2, #110	@ 0x6e
 801970c:	e7db      	b.n	80196c6 <_strtod_l+0x2f6>
 801970e:	4988      	ldr	r1, [pc, #544]	@ (8019930 <_strtod_l+0x560>)
 8019710:	a811      	add	r0, sp, #68	@ 0x44
 8019712:	f001 fb41 	bl	801ad98 <__match>
 8019716:	2800      	cmp	r0, #0
 8019718:	f43f aeb1 	beq.w	801947e <_strtod_l+0xae>
 801971c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801971e:	4985      	ldr	r1, [pc, #532]	@ (8019934 <_strtod_l+0x564>)
 8019720:	3b01      	subs	r3, #1
 8019722:	a811      	add	r0, sp, #68	@ 0x44
 8019724:	9311      	str	r3, [sp, #68]	@ 0x44
 8019726:	f001 fb37 	bl	801ad98 <__match>
 801972a:	b910      	cbnz	r0, 8019732 <_strtod_l+0x362>
 801972c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801972e:	3301      	adds	r3, #1
 8019730:	9311      	str	r3, [sp, #68]	@ 0x44
 8019732:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8019948 <_strtod_l+0x578>
 8019736:	f04f 0a00 	mov.w	sl, #0
 801973a:	e684      	b.n	8019446 <_strtod_l+0x76>
 801973c:	487e      	ldr	r0, [pc, #504]	@ (8019938 <_strtod_l+0x568>)
 801973e:	f001 f867 	bl	801a810 <nan>
 8019742:	ec5b ab10 	vmov	sl, fp, d0
 8019746:	e67e      	b.n	8019446 <_strtod_l+0x76>
 8019748:	ee07 9a90 	vmov	s15, r9
 801974c:	1be2      	subs	r2, r4, r7
 801974e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019752:	2d00      	cmp	r5, #0
 8019754:	bf08      	it	eq
 8019756:	461d      	moveq	r5, r3
 8019758:	2b10      	cmp	r3, #16
 801975a:	9209      	str	r2, [sp, #36]	@ 0x24
 801975c:	461a      	mov	r2, r3
 801975e:	bfa8      	it	ge
 8019760:	2210      	movge	r2, #16
 8019762:	2b09      	cmp	r3, #9
 8019764:	ec5b ab17 	vmov	sl, fp, d7
 8019768:	dc15      	bgt.n	8019796 <_strtod_l+0x3c6>
 801976a:	1be1      	subs	r1, r4, r7
 801976c:	2900      	cmp	r1, #0
 801976e:	f43f ae6a 	beq.w	8019446 <_strtod_l+0x76>
 8019772:	eba4 0107 	sub.w	r1, r4, r7
 8019776:	dd72      	ble.n	801985e <_strtod_l+0x48e>
 8019778:	2916      	cmp	r1, #22
 801977a:	dc59      	bgt.n	8019830 <_strtod_l+0x460>
 801977c:	4b6f      	ldr	r3, [pc, #444]	@ (801993c <_strtod_l+0x56c>)
 801977e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019784:	ed93 7b00 	vldr	d7, [r3]
 8019788:	ec4b ab16 	vmov	d6, sl, fp
 801978c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019790:	ec5b ab17 	vmov	sl, fp, d7
 8019794:	e657      	b.n	8019446 <_strtod_l+0x76>
 8019796:	4969      	ldr	r1, [pc, #420]	@ (801993c <_strtod_l+0x56c>)
 8019798:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801979c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80197a0:	ee06 6a90 	vmov	s13, r6
 80197a4:	2b0f      	cmp	r3, #15
 80197a6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80197aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80197ae:	ec5b ab16 	vmov	sl, fp, d6
 80197b2:	ddda      	ble.n	801976a <_strtod_l+0x39a>
 80197b4:	1a9a      	subs	r2, r3, r2
 80197b6:	1be1      	subs	r1, r4, r7
 80197b8:	440a      	add	r2, r1
 80197ba:	2a00      	cmp	r2, #0
 80197bc:	f340 8094 	ble.w	80198e8 <_strtod_l+0x518>
 80197c0:	f012 000f 	ands.w	r0, r2, #15
 80197c4:	d00a      	beq.n	80197dc <_strtod_l+0x40c>
 80197c6:	495d      	ldr	r1, [pc, #372]	@ (801993c <_strtod_l+0x56c>)
 80197c8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80197cc:	ed91 7b00 	vldr	d7, [r1]
 80197d0:	ec4b ab16 	vmov	d6, sl, fp
 80197d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80197d8:	ec5b ab17 	vmov	sl, fp, d7
 80197dc:	f032 020f 	bics.w	r2, r2, #15
 80197e0:	d073      	beq.n	80198ca <_strtod_l+0x4fa>
 80197e2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80197e6:	dd47      	ble.n	8019878 <_strtod_l+0x4a8>
 80197e8:	2400      	movs	r4, #0
 80197ea:	4625      	mov	r5, r4
 80197ec:	9407      	str	r4, [sp, #28]
 80197ee:	4626      	mov	r6, r4
 80197f0:	9a05      	ldr	r2, [sp, #20]
 80197f2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8019948 <_strtod_l+0x578>
 80197f6:	2322      	movs	r3, #34	@ 0x22
 80197f8:	6013      	str	r3, [r2, #0]
 80197fa:	f04f 0a00 	mov.w	sl, #0
 80197fe:	9b07      	ldr	r3, [sp, #28]
 8019800:	2b00      	cmp	r3, #0
 8019802:	f43f ae20 	beq.w	8019446 <_strtod_l+0x76>
 8019806:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019808:	9805      	ldr	r0, [sp, #20]
 801980a:	f7ff f957 	bl	8018abc <_Bfree>
 801980e:	9805      	ldr	r0, [sp, #20]
 8019810:	4631      	mov	r1, r6
 8019812:	f7ff f953 	bl	8018abc <_Bfree>
 8019816:	9805      	ldr	r0, [sp, #20]
 8019818:	4629      	mov	r1, r5
 801981a:	f7ff f94f 	bl	8018abc <_Bfree>
 801981e:	9907      	ldr	r1, [sp, #28]
 8019820:	9805      	ldr	r0, [sp, #20]
 8019822:	f7ff f94b 	bl	8018abc <_Bfree>
 8019826:	9805      	ldr	r0, [sp, #20]
 8019828:	4621      	mov	r1, r4
 801982a:	f7ff f947 	bl	8018abc <_Bfree>
 801982e:	e60a      	b.n	8019446 <_strtod_l+0x76>
 8019830:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8019834:	1be0      	subs	r0, r4, r7
 8019836:	4281      	cmp	r1, r0
 8019838:	dbbc      	blt.n	80197b4 <_strtod_l+0x3e4>
 801983a:	4a40      	ldr	r2, [pc, #256]	@ (801993c <_strtod_l+0x56c>)
 801983c:	f1c3 030f 	rsb	r3, r3, #15
 8019840:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8019844:	ed91 7b00 	vldr	d7, [r1]
 8019848:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801984a:	ec4b ab16 	vmov	d6, sl, fp
 801984e:	1acb      	subs	r3, r1, r3
 8019850:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019854:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019858:	ed92 6b00 	vldr	d6, [r2]
 801985c:	e796      	b.n	801978c <_strtod_l+0x3bc>
 801985e:	3116      	adds	r1, #22
 8019860:	dba8      	blt.n	80197b4 <_strtod_l+0x3e4>
 8019862:	4b36      	ldr	r3, [pc, #216]	@ (801993c <_strtod_l+0x56c>)
 8019864:	1b3c      	subs	r4, r7, r4
 8019866:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801986a:	ed94 7b00 	vldr	d7, [r4]
 801986e:	ec4b ab16 	vmov	d6, sl, fp
 8019872:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019876:	e78b      	b.n	8019790 <_strtod_l+0x3c0>
 8019878:	2000      	movs	r0, #0
 801987a:	ec4b ab17 	vmov	d7, sl, fp
 801987e:	4e30      	ldr	r6, [pc, #192]	@ (8019940 <_strtod_l+0x570>)
 8019880:	1112      	asrs	r2, r2, #4
 8019882:	4601      	mov	r1, r0
 8019884:	2a01      	cmp	r2, #1
 8019886:	dc23      	bgt.n	80198d0 <_strtod_l+0x500>
 8019888:	b108      	cbz	r0, 801988e <_strtod_l+0x4be>
 801988a:	ec5b ab17 	vmov	sl, fp, d7
 801988e:	4a2c      	ldr	r2, [pc, #176]	@ (8019940 <_strtod_l+0x570>)
 8019890:	482c      	ldr	r0, [pc, #176]	@ (8019944 <_strtod_l+0x574>)
 8019892:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019896:	ed92 7b00 	vldr	d7, [r2]
 801989a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801989e:	ec4b ab16 	vmov	d6, sl, fp
 80198a2:	4a29      	ldr	r2, [pc, #164]	@ (8019948 <_strtod_l+0x578>)
 80198a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80198a8:	ee17 1a90 	vmov	r1, s15
 80198ac:	400a      	ands	r2, r1
 80198ae:	4282      	cmp	r2, r0
 80198b0:	ec5b ab17 	vmov	sl, fp, d7
 80198b4:	d898      	bhi.n	80197e8 <_strtod_l+0x418>
 80198b6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80198ba:	4282      	cmp	r2, r0
 80198bc:	bf86      	itte	hi
 80198be:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801994c <_strtod_l+0x57c>
 80198c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80198c6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80198ca:	2200      	movs	r2, #0
 80198cc:	9206      	str	r2, [sp, #24]
 80198ce:	e076      	b.n	80199be <_strtod_l+0x5ee>
 80198d0:	f012 0f01 	tst.w	r2, #1
 80198d4:	d004      	beq.n	80198e0 <_strtod_l+0x510>
 80198d6:	ed96 6b00 	vldr	d6, [r6]
 80198da:	2001      	movs	r0, #1
 80198dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80198e0:	3101      	adds	r1, #1
 80198e2:	1052      	asrs	r2, r2, #1
 80198e4:	3608      	adds	r6, #8
 80198e6:	e7cd      	b.n	8019884 <_strtod_l+0x4b4>
 80198e8:	d0ef      	beq.n	80198ca <_strtod_l+0x4fa>
 80198ea:	4252      	negs	r2, r2
 80198ec:	f012 000f 	ands.w	r0, r2, #15
 80198f0:	d00a      	beq.n	8019908 <_strtod_l+0x538>
 80198f2:	4912      	ldr	r1, [pc, #72]	@ (801993c <_strtod_l+0x56c>)
 80198f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80198f8:	ed91 7b00 	vldr	d7, [r1]
 80198fc:	ec4b ab16 	vmov	d6, sl, fp
 8019900:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019904:	ec5b ab17 	vmov	sl, fp, d7
 8019908:	1112      	asrs	r2, r2, #4
 801990a:	d0de      	beq.n	80198ca <_strtod_l+0x4fa>
 801990c:	2a1f      	cmp	r2, #31
 801990e:	dd1f      	ble.n	8019950 <_strtod_l+0x580>
 8019910:	2400      	movs	r4, #0
 8019912:	4625      	mov	r5, r4
 8019914:	9407      	str	r4, [sp, #28]
 8019916:	4626      	mov	r6, r4
 8019918:	9a05      	ldr	r2, [sp, #20]
 801991a:	2322      	movs	r3, #34	@ 0x22
 801991c:	f04f 0a00 	mov.w	sl, #0
 8019920:	f04f 0b00 	mov.w	fp, #0
 8019924:	6013      	str	r3, [r2, #0]
 8019926:	e76a      	b.n	80197fe <_strtod_l+0x42e>
 8019928:	0801b315 	.word	0x0801b315
 801992c:	0801b52c 	.word	0x0801b52c
 8019930:	0801b30d 	.word	0x0801b30d
 8019934:	0801b344 	.word	0x0801b344
 8019938:	0801b6d5 	.word	0x0801b6d5
 801993c:	0801b460 	.word	0x0801b460
 8019940:	0801b438 	.word	0x0801b438
 8019944:	7ca00000 	.word	0x7ca00000
 8019948:	7ff00000 	.word	0x7ff00000
 801994c:	7fefffff 	.word	0x7fefffff
 8019950:	f012 0110 	ands.w	r1, r2, #16
 8019954:	bf18      	it	ne
 8019956:	216a      	movne	r1, #106	@ 0x6a
 8019958:	9106      	str	r1, [sp, #24]
 801995a:	ec4b ab17 	vmov	d7, sl, fp
 801995e:	49b0      	ldr	r1, [pc, #704]	@ (8019c20 <_strtod_l+0x850>)
 8019960:	2000      	movs	r0, #0
 8019962:	07d6      	lsls	r6, r2, #31
 8019964:	d504      	bpl.n	8019970 <_strtod_l+0x5a0>
 8019966:	ed91 6b00 	vldr	d6, [r1]
 801996a:	2001      	movs	r0, #1
 801996c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019970:	1052      	asrs	r2, r2, #1
 8019972:	f101 0108 	add.w	r1, r1, #8
 8019976:	d1f4      	bne.n	8019962 <_strtod_l+0x592>
 8019978:	b108      	cbz	r0, 801997e <_strtod_l+0x5ae>
 801997a:	ec5b ab17 	vmov	sl, fp, d7
 801997e:	9a06      	ldr	r2, [sp, #24]
 8019980:	b1b2      	cbz	r2, 80199b0 <_strtod_l+0x5e0>
 8019982:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8019986:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801998a:	2a00      	cmp	r2, #0
 801998c:	4658      	mov	r0, fp
 801998e:	dd0f      	ble.n	80199b0 <_strtod_l+0x5e0>
 8019990:	2a1f      	cmp	r2, #31
 8019992:	dd55      	ble.n	8019a40 <_strtod_l+0x670>
 8019994:	2a34      	cmp	r2, #52	@ 0x34
 8019996:	bfde      	ittt	le
 8019998:	f04f 32ff 	movle.w	r2, #4294967295
 801999c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80199a0:	408a      	lslle	r2, r1
 80199a2:	f04f 0a00 	mov.w	sl, #0
 80199a6:	bfcc      	ite	gt
 80199a8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80199ac:	ea02 0b00 	andle.w	fp, r2, r0
 80199b0:	ec4b ab17 	vmov	d7, sl, fp
 80199b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80199b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199bc:	d0a8      	beq.n	8019910 <_strtod_l+0x540>
 80199be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80199c0:	9805      	ldr	r0, [sp, #20]
 80199c2:	f8cd 9000 	str.w	r9, [sp]
 80199c6:	462a      	mov	r2, r5
 80199c8:	f7ff f8e0 	bl	8018b8c <__s2b>
 80199cc:	9007      	str	r0, [sp, #28]
 80199ce:	2800      	cmp	r0, #0
 80199d0:	f43f af0a 	beq.w	80197e8 <_strtod_l+0x418>
 80199d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199d6:	1b3f      	subs	r7, r7, r4
 80199d8:	2b00      	cmp	r3, #0
 80199da:	bfb4      	ite	lt
 80199dc:	463b      	movlt	r3, r7
 80199de:	2300      	movge	r3, #0
 80199e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80199e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199e4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8019c10 <_strtod_l+0x840>
 80199e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80199ec:	2400      	movs	r4, #0
 80199ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80199f0:	4625      	mov	r5, r4
 80199f2:	9b07      	ldr	r3, [sp, #28]
 80199f4:	9805      	ldr	r0, [sp, #20]
 80199f6:	6859      	ldr	r1, [r3, #4]
 80199f8:	f7ff f820 	bl	8018a3c <_Balloc>
 80199fc:	4606      	mov	r6, r0
 80199fe:	2800      	cmp	r0, #0
 8019a00:	f43f aef6 	beq.w	80197f0 <_strtod_l+0x420>
 8019a04:	9b07      	ldr	r3, [sp, #28]
 8019a06:	691a      	ldr	r2, [r3, #16]
 8019a08:	ec4b ab19 	vmov	d9, sl, fp
 8019a0c:	3202      	adds	r2, #2
 8019a0e:	f103 010c 	add.w	r1, r3, #12
 8019a12:	0092      	lsls	r2, r2, #2
 8019a14:	300c      	adds	r0, #12
 8019a16:	f7fe f91c 	bl	8017c52 <memcpy>
 8019a1a:	eeb0 0b49 	vmov.f64	d0, d9
 8019a1e:	9805      	ldr	r0, [sp, #20]
 8019a20:	aa14      	add	r2, sp, #80	@ 0x50
 8019a22:	a913      	add	r1, sp, #76	@ 0x4c
 8019a24:	f7ff fbee 	bl	8019204 <__d2b>
 8019a28:	9012      	str	r0, [sp, #72]	@ 0x48
 8019a2a:	2800      	cmp	r0, #0
 8019a2c:	f43f aee0 	beq.w	80197f0 <_strtod_l+0x420>
 8019a30:	9805      	ldr	r0, [sp, #20]
 8019a32:	2101      	movs	r1, #1
 8019a34:	f7ff f940 	bl	8018cb8 <__i2b>
 8019a38:	4605      	mov	r5, r0
 8019a3a:	b940      	cbnz	r0, 8019a4e <_strtod_l+0x67e>
 8019a3c:	2500      	movs	r5, #0
 8019a3e:	e6d7      	b.n	80197f0 <_strtod_l+0x420>
 8019a40:	f04f 31ff 	mov.w	r1, #4294967295
 8019a44:	fa01 f202 	lsl.w	r2, r1, r2
 8019a48:	ea02 0a0a 	and.w	sl, r2, sl
 8019a4c:	e7b0      	b.n	80199b0 <_strtod_l+0x5e0>
 8019a4e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8019a50:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019a52:	2f00      	cmp	r7, #0
 8019a54:	bfab      	itete	ge
 8019a56:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8019a58:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8019a5a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8019a5e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8019a62:	bfac      	ite	ge
 8019a64:	eb07 0903 	addge.w	r9, r7, r3
 8019a68:	eba3 0807 	sublt.w	r8, r3, r7
 8019a6c:	9b06      	ldr	r3, [sp, #24]
 8019a6e:	1aff      	subs	r7, r7, r3
 8019a70:	4417      	add	r7, r2
 8019a72:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8019a76:	4a6b      	ldr	r2, [pc, #428]	@ (8019c24 <_strtod_l+0x854>)
 8019a78:	3f01      	subs	r7, #1
 8019a7a:	4297      	cmp	r7, r2
 8019a7c:	da51      	bge.n	8019b22 <_strtod_l+0x752>
 8019a7e:	1bd1      	subs	r1, r2, r7
 8019a80:	291f      	cmp	r1, #31
 8019a82:	eba3 0301 	sub.w	r3, r3, r1
 8019a86:	f04f 0201 	mov.w	r2, #1
 8019a8a:	dc3e      	bgt.n	8019b0a <_strtod_l+0x73a>
 8019a8c:	408a      	lsls	r2, r1
 8019a8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8019a90:	2200      	movs	r2, #0
 8019a92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019a94:	eb09 0703 	add.w	r7, r9, r3
 8019a98:	4498      	add	r8, r3
 8019a9a:	9b06      	ldr	r3, [sp, #24]
 8019a9c:	45b9      	cmp	r9, r7
 8019a9e:	4498      	add	r8, r3
 8019aa0:	464b      	mov	r3, r9
 8019aa2:	bfa8      	it	ge
 8019aa4:	463b      	movge	r3, r7
 8019aa6:	4543      	cmp	r3, r8
 8019aa8:	bfa8      	it	ge
 8019aaa:	4643      	movge	r3, r8
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	bfc2      	ittt	gt
 8019ab0:	1aff      	subgt	r7, r7, r3
 8019ab2:	eba8 0803 	subgt.w	r8, r8, r3
 8019ab6:	eba9 0903 	subgt.w	r9, r9, r3
 8019aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	dd16      	ble.n	8019aee <_strtod_l+0x71e>
 8019ac0:	4629      	mov	r1, r5
 8019ac2:	9805      	ldr	r0, [sp, #20]
 8019ac4:	461a      	mov	r2, r3
 8019ac6:	f7ff f9b7 	bl	8018e38 <__pow5mult>
 8019aca:	4605      	mov	r5, r0
 8019acc:	2800      	cmp	r0, #0
 8019ace:	d0b5      	beq.n	8019a3c <_strtod_l+0x66c>
 8019ad0:	4601      	mov	r1, r0
 8019ad2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019ad4:	9805      	ldr	r0, [sp, #20]
 8019ad6:	f7ff f905 	bl	8018ce4 <__multiply>
 8019ada:	900f      	str	r0, [sp, #60]	@ 0x3c
 8019adc:	2800      	cmp	r0, #0
 8019ade:	f43f ae87 	beq.w	80197f0 <_strtod_l+0x420>
 8019ae2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019ae4:	9805      	ldr	r0, [sp, #20]
 8019ae6:	f7fe ffe9 	bl	8018abc <_Bfree>
 8019aea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019aec:	9312      	str	r3, [sp, #72]	@ 0x48
 8019aee:	2f00      	cmp	r7, #0
 8019af0:	dc1b      	bgt.n	8019b2a <_strtod_l+0x75a>
 8019af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	dd21      	ble.n	8019b3c <_strtod_l+0x76c>
 8019af8:	4631      	mov	r1, r6
 8019afa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019afc:	9805      	ldr	r0, [sp, #20]
 8019afe:	f7ff f99b 	bl	8018e38 <__pow5mult>
 8019b02:	4606      	mov	r6, r0
 8019b04:	b9d0      	cbnz	r0, 8019b3c <_strtod_l+0x76c>
 8019b06:	2600      	movs	r6, #0
 8019b08:	e672      	b.n	80197f0 <_strtod_l+0x420>
 8019b0a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8019b0e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8019b12:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8019b16:	37e2      	adds	r7, #226	@ 0xe2
 8019b18:	fa02 f107 	lsl.w	r1, r2, r7
 8019b1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019b1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8019b20:	e7b8      	b.n	8019a94 <_strtod_l+0x6c4>
 8019b22:	2200      	movs	r2, #0
 8019b24:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019b26:	2201      	movs	r2, #1
 8019b28:	e7f9      	b.n	8019b1e <_strtod_l+0x74e>
 8019b2a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019b2c:	9805      	ldr	r0, [sp, #20]
 8019b2e:	463a      	mov	r2, r7
 8019b30:	f7ff f9dc 	bl	8018eec <__lshift>
 8019b34:	9012      	str	r0, [sp, #72]	@ 0x48
 8019b36:	2800      	cmp	r0, #0
 8019b38:	d1db      	bne.n	8019af2 <_strtod_l+0x722>
 8019b3a:	e659      	b.n	80197f0 <_strtod_l+0x420>
 8019b3c:	f1b8 0f00 	cmp.w	r8, #0
 8019b40:	dd07      	ble.n	8019b52 <_strtod_l+0x782>
 8019b42:	4631      	mov	r1, r6
 8019b44:	9805      	ldr	r0, [sp, #20]
 8019b46:	4642      	mov	r2, r8
 8019b48:	f7ff f9d0 	bl	8018eec <__lshift>
 8019b4c:	4606      	mov	r6, r0
 8019b4e:	2800      	cmp	r0, #0
 8019b50:	d0d9      	beq.n	8019b06 <_strtod_l+0x736>
 8019b52:	f1b9 0f00 	cmp.w	r9, #0
 8019b56:	dd08      	ble.n	8019b6a <_strtod_l+0x79a>
 8019b58:	4629      	mov	r1, r5
 8019b5a:	9805      	ldr	r0, [sp, #20]
 8019b5c:	464a      	mov	r2, r9
 8019b5e:	f7ff f9c5 	bl	8018eec <__lshift>
 8019b62:	4605      	mov	r5, r0
 8019b64:	2800      	cmp	r0, #0
 8019b66:	f43f ae43 	beq.w	80197f0 <_strtod_l+0x420>
 8019b6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019b6c:	9805      	ldr	r0, [sp, #20]
 8019b6e:	4632      	mov	r2, r6
 8019b70:	f7ff fa44 	bl	8018ffc <__mdiff>
 8019b74:	4604      	mov	r4, r0
 8019b76:	2800      	cmp	r0, #0
 8019b78:	f43f ae3a 	beq.w	80197f0 <_strtod_l+0x420>
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019b82:	60c3      	str	r3, [r0, #12]
 8019b84:	4629      	mov	r1, r5
 8019b86:	f7ff fa1d 	bl	8018fc4 <__mcmp>
 8019b8a:	2800      	cmp	r0, #0
 8019b8c:	da4e      	bge.n	8019c2c <_strtod_l+0x85c>
 8019b8e:	ea58 080a 	orrs.w	r8, r8, sl
 8019b92:	d174      	bne.n	8019c7e <_strtod_l+0x8ae>
 8019b94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d170      	bne.n	8019c7e <_strtod_l+0x8ae>
 8019b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019ba0:	0d1b      	lsrs	r3, r3, #20
 8019ba2:	051b      	lsls	r3, r3, #20
 8019ba4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019ba8:	d969      	bls.n	8019c7e <_strtod_l+0x8ae>
 8019baa:	6963      	ldr	r3, [r4, #20]
 8019bac:	b913      	cbnz	r3, 8019bb4 <_strtod_l+0x7e4>
 8019bae:	6923      	ldr	r3, [r4, #16]
 8019bb0:	2b01      	cmp	r3, #1
 8019bb2:	dd64      	ble.n	8019c7e <_strtod_l+0x8ae>
 8019bb4:	4621      	mov	r1, r4
 8019bb6:	2201      	movs	r2, #1
 8019bb8:	9805      	ldr	r0, [sp, #20]
 8019bba:	f7ff f997 	bl	8018eec <__lshift>
 8019bbe:	4629      	mov	r1, r5
 8019bc0:	4604      	mov	r4, r0
 8019bc2:	f7ff f9ff 	bl	8018fc4 <__mcmp>
 8019bc6:	2800      	cmp	r0, #0
 8019bc8:	dd59      	ble.n	8019c7e <_strtod_l+0x8ae>
 8019bca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019bce:	9a06      	ldr	r2, [sp, #24]
 8019bd0:	0d1b      	lsrs	r3, r3, #20
 8019bd2:	051b      	lsls	r3, r3, #20
 8019bd4:	2a00      	cmp	r2, #0
 8019bd6:	d070      	beq.n	8019cba <_strtod_l+0x8ea>
 8019bd8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019bdc:	d86d      	bhi.n	8019cba <_strtod_l+0x8ea>
 8019bde:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8019be2:	f67f ae99 	bls.w	8019918 <_strtod_l+0x548>
 8019be6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8019c18 <_strtod_l+0x848>
 8019bea:	ec4b ab16 	vmov	d6, sl, fp
 8019bee:	4b0e      	ldr	r3, [pc, #56]	@ (8019c28 <_strtod_l+0x858>)
 8019bf0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019bf4:	ee17 2a90 	vmov	r2, s15
 8019bf8:	4013      	ands	r3, r2
 8019bfa:	ec5b ab17 	vmov	sl, fp, d7
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	f47f ae01 	bne.w	8019806 <_strtod_l+0x436>
 8019c04:	9a05      	ldr	r2, [sp, #20]
 8019c06:	2322      	movs	r3, #34	@ 0x22
 8019c08:	6013      	str	r3, [r2, #0]
 8019c0a:	e5fc      	b.n	8019806 <_strtod_l+0x436>
 8019c0c:	f3af 8000 	nop.w
 8019c10:	ffc00000 	.word	0xffc00000
 8019c14:	41dfffff 	.word	0x41dfffff
 8019c18:	00000000 	.word	0x00000000
 8019c1c:	39500000 	.word	0x39500000
 8019c20:	0801b558 	.word	0x0801b558
 8019c24:	fffffc02 	.word	0xfffffc02
 8019c28:	7ff00000 	.word	0x7ff00000
 8019c2c:	46d9      	mov	r9, fp
 8019c2e:	d15d      	bne.n	8019cec <_strtod_l+0x91c>
 8019c30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019c34:	f1b8 0f00 	cmp.w	r8, #0
 8019c38:	d02a      	beq.n	8019c90 <_strtod_l+0x8c0>
 8019c3a:	4aab      	ldr	r2, [pc, #684]	@ (8019ee8 <_strtod_l+0xb18>)
 8019c3c:	4293      	cmp	r3, r2
 8019c3e:	d12a      	bne.n	8019c96 <_strtod_l+0x8c6>
 8019c40:	9b06      	ldr	r3, [sp, #24]
 8019c42:	4652      	mov	r2, sl
 8019c44:	b1fb      	cbz	r3, 8019c86 <_strtod_l+0x8b6>
 8019c46:	4ba9      	ldr	r3, [pc, #676]	@ (8019eec <_strtod_l+0xb1c>)
 8019c48:	ea0b 0303 	and.w	r3, fp, r3
 8019c4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019c50:	f04f 31ff 	mov.w	r1, #4294967295
 8019c54:	d81a      	bhi.n	8019c8c <_strtod_l+0x8bc>
 8019c56:	0d1b      	lsrs	r3, r3, #20
 8019c58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8019c60:	429a      	cmp	r2, r3
 8019c62:	d118      	bne.n	8019c96 <_strtod_l+0x8c6>
 8019c64:	4ba2      	ldr	r3, [pc, #648]	@ (8019ef0 <_strtod_l+0xb20>)
 8019c66:	4599      	cmp	r9, r3
 8019c68:	d102      	bne.n	8019c70 <_strtod_l+0x8a0>
 8019c6a:	3201      	adds	r2, #1
 8019c6c:	f43f adc0 	beq.w	80197f0 <_strtod_l+0x420>
 8019c70:	4b9e      	ldr	r3, [pc, #632]	@ (8019eec <_strtod_l+0xb1c>)
 8019c72:	ea09 0303 	and.w	r3, r9, r3
 8019c76:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8019c7a:	f04f 0a00 	mov.w	sl, #0
 8019c7e:	9b06      	ldr	r3, [sp, #24]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d1b0      	bne.n	8019be6 <_strtod_l+0x816>
 8019c84:	e5bf      	b.n	8019806 <_strtod_l+0x436>
 8019c86:	f04f 33ff 	mov.w	r3, #4294967295
 8019c8a:	e7e9      	b.n	8019c60 <_strtod_l+0x890>
 8019c8c:	460b      	mov	r3, r1
 8019c8e:	e7e7      	b.n	8019c60 <_strtod_l+0x890>
 8019c90:	ea53 030a 	orrs.w	r3, r3, sl
 8019c94:	d099      	beq.n	8019bca <_strtod_l+0x7fa>
 8019c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019c98:	b1c3      	cbz	r3, 8019ccc <_strtod_l+0x8fc>
 8019c9a:	ea13 0f09 	tst.w	r3, r9
 8019c9e:	d0ee      	beq.n	8019c7e <_strtod_l+0x8ae>
 8019ca0:	9a06      	ldr	r2, [sp, #24]
 8019ca2:	4650      	mov	r0, sl
 8019ca4:	4659      	mov	r1, fp
 8019ca6:	f1b8 0f00 	cmp.w	r8, #0
 8019caa:	d013      	beq.n	8019cd4 <_strtod_l+0x904>
 8019cac:	f7ff fb75 	bl	801939a <sulp>
 8019cb0:	ee39 7b00 	vadd.f64	d7, d9, d0
 8019cb4:	ec5b ab17 	vmov	sl, fp, d7
 8019cb8:	e7e1      	b.n	8019c7e <_strtod_l+0x8ae>
 8019cba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019cbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019cc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019cc6:	f04f 3aff 	mov.w	sl, #4294967295
 8019cca:	e7d8      	b.n	8019c7e <_strtod_l+0x8ae>
 8019ccc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019cce:	ea13 0f0a 	tst.w	r3, sl
 8019cd2:	e7e4      	b.n	8019c9e <_strtod_l+0x8ce>
 8019cd4:	f7ff fb61 	bl	801939a <sulp>
 8019cd8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8019cdc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8019ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ce4:	ec5b ab10 	vmov	sl, fp, d0
 8019ce8:	d1c9      	bne.n	8019c7e <_strtod_l+0x8ae>
 8019cea:	e615      	b.n	8019918 <_strtod_l+0x548>
 8019cec:	4629      	mov	r1, r5
 8019cee:	4620      	mov	r0, r4
 8019cf0:	f7ff fae0 	bl	80192b4 <__ratio>
 8019cf4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8019cf8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d00:	d85d      	bhi.n	8019dbe <_strtod_l+0x9ee>
 8019d02:	f1b8 0f00 	cmp.w	r8, #0
 8019d06:	d164      	bne.n	8019dd2 <_strtod_l+0xa02>
 8019d08:	f1ba 0f00 	cmp.w	sl, #0
 8019d0c:	d14b      	bne.n	8019da6 <_strtod_l+0x9d6>
 8019d0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019d12:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d160      	bne.n	8019ddc <_strtod_l+0xa0c>
 8019d1a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8019d1e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8019d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d26:	d401      	bmi.n	8019d2c <_strtod_l+0x95c>
 8019d28:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019d2c:	eeb1 ab48 	vneg.f64	d10, d8
 8019d30:	486e      	ldr	r0, [pc, #440]	@ (8019eec <_strtod_l+0xb1c>)
 8019d32:	4970      	ldr	r1, [pc, #448]	@ (8019ef4 <_strtod_l+0xb24>)
 8019d34:	ea09 0700 	and.w	r7, r9, r0
 8019d38:	428f      	cmp	r7, r1
 8019d3a:	ec53 2b1a 	vmov	r2, r3, d10
 8019d3e:	d17d      	bne.n	8019e3c <_strtod_l+0xa6c>
 8019d40:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8019d44:	ec4b ab1c 	vmov	d12, sl, fp
 8019d48:	eeb0 0b4c 	vmov.f64	d0, d12
 8019d4c:	f7ff f9ea 	bl	8019124 <__ulp>
 8019d50:	4866      	ldr	r0, [pc, #408]	@ (8019eec <_strtod_l+0xb1c>)
 8019d52:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8019d56:	ee1c 3a90 	vmov	r3, s25
 8019d5a:	4a67      	ldr	r2, [pc, #412]	@ (8019ef8 <_strtod_l+0xb28>)
 8019d5c:	ea03 0100 	and.w	r1, r3, r0
 8019d60:	4291      	cmp	r1, r2
 8019d62:	ec5b ab1c 	vmov	sl, fp, d12
 8019d66:	d93c      	bls.n	8019de2 <_strtod_l+0xa12>
 8019d68:	ee19 2a90 	vmov	r2, s19
 8019d6c:	4b60      	ldr	r3, [pc, #384]	@ (8019ef0 <_strtod_l+0xb20>)
 8019d6e:	429a      	cmp	r2, r3
 8019d70:	d104      	bne.n	8019d7c <_strtod_l+0x9ac>
 8019d72:	ee19 3a10 	vmov	r3, s18
 8019d76:	3301      	adds	r3, #1
 8019d78:	f43f ad3a 	beq.w	80197f0 <_strtod_l+0x420>
 8019d7c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8019ef0 <_strtod_l+0xb20>
 8019d80:	f04f 3aff 	mov.w	sl, #4294967295
 8019d84:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019d86:	9805      	ldr	r0, [sp, #20]
 8019d88:	f7fe fe98 	bl	8018abc <_Bfree>
 8019d8c:	9805      	ldr	r0, [sp, #20]
 8019d8e:	4631      	mov	r1, r6
 8019d90:	f7fe fe94 	bl	8018abc <_Bfree>
 8019d94:	9805      	ldr	r0, [sp, #20]
 8019d96:	4629      	mov	r1, r5
 8019d98:	f7fe fe90 	bl	8018abc <_Bfree>
 8019d9c:	9805      	ldr	r0, [sp, #20]
 8019d9e:	4621      	mov	r1, r4
 8019da0:	f7fe fe8c 	bl	8018abc <_Bfree>
 8019da4:	e625      	b.n	80199f2 <_strtod_l+0x622>
 8019da6:	f1ba 0f01 	cmp.w	sl, #1
 8019daa:	d103      	bne.n	8019db4 <_strtod_l+0x9e4>
 8019dac:	f1bb 0f00 	cmp.w	fp, #0
 8019db0:	f43f adb2 	beq.w	8019918 <_strtod_l+0x548>
 8019db4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019db8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8019dbc:	e7b8      	b.n	8019d30 <_strtod_l+0x960>
 8019dbe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8019dc2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019dc6:	f1b8 0f00 	cmp.w	r8, #0
 8019dca:	d0af      	beq.n	8019d2c <_strtod_l+0x95c>
 8019dcc:	eeb0 ab48 	vmov.f64	d10, d8
 8019dd0:	e7ae      	b.n	8019d30 <_strtod_l+0x960>
 8019dd2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8019dd6:	eeb0 8b4a 	vmov.f64	d8, d10
 8019dda:	e7a9      	b.n	8019d30 <_strtod_l+0x960>
 8019ddc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019de0:	e7a6      	b.n	8019d30 <_strtod_l+0x960>
 8019de2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8019de6:	9b06      	ldr	r3, [sp, #24]
 8019de8:	46d9      	mov	r9, fp
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d1ca      	bne.n	8019d84 <_strtod_l+0x9b4>
 8019dee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019df2:	0d1b      	lsrs	r3, r3, #20
 8019df4:	051b      	lsls	r3, r3, #20
 8019df6:	429f      	cmp	r7, r3
 8019df8:	d1c4      	bne.n	8019d84 <_strtod_l+0x9b4>
 8019dfa:	ec51 0b18 	vmov	r0, r1, d8
 8019dfe:	f7e6 fcb3 	bl	8000768 <__aeabi_d2lz>
 8019e02:	f7e6 fc6b 	bl	80006dc <__aeabi_l2d>
 8019e06:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8019e0a:	ec41 0b17 	vmov	d7, r0, r1
 8019e0e:	ea49 090a 	orr.w	r9, r9, sl
 8019e12:	ea59 0908 	orrs.w	r9, r9, r8
 8019e16:	ee38 8b47 	vsub.f64	d8, d8, d7
 8019e1a:	d03c      	beq.n	8019e96 <_strtod_l+0xac6>
 8019e1c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8019ed0 <_strtod_l+0xb00>
 8019e20:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e28:	f53f aced 	bmi.w	8019806 <_strtod_l+0x436>
 8019e2c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019ed8 <_strtod_l+0xb08>
 8019e30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e38:	dda4      	ble.n	8019d84 <_strtod_l+0x9b4>
 8019e3a:	e4e4      	b.n	8019806 <_strtod_l+0x436>
 8019e3c:	9906      	ldr	r1, [sp, #24]
 8019e3e:	b1e1      	cbz	r1, 8019e7a <_strtod_l+0xaaa>
 8019e40:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8019e44:	d819      	bhi.n	8019e7a <_strtod_l+0xaaa>
 8019e46:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8019e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e4e:	d811      	bhi.n	8019e74 <_strtod_l+0xaa4>
 8019e50:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8019e54:	ee18 3a10 	vmov	r3, s16
 8019e58:	2b01      	cmp	r3, #1
 8019e5a:	bf38      	it	cc
 8019e5c:	2301      	movcc	r3, #1
 8019e5e:	ee08 3a10 	vmov	s16, r3
 8019e62:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8019e66:	f1b8 0f00 	cmp.w	r8, #0
 8019e6a:	d111      	bne.n	8019e90 <_strtod_l+0xac0>
 8019e6c:	eeb1 7b48 	vneg.f64	d7, d8
 8019e70:	ec53 2b17 	vmov	r2, r3, d7
 8019e74:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8019e78:	1bcb      	subs	r3, r1, r7
 8019e7a:	eeb0 0b49 	vmov.f64	d0, d9
 8019e7e:	ec43 2b1a 	vmov	d10, r2, r3
 8019e82:	f7ff f94f 	bl	8019124 <__ulp>
 8019e86:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8019e8a:	ec5b ab19 	vmov	sl, fp, d9
 8019e8e:	e7aa      	b.n	8019de6 <_strtod_l+0xa16>
 8019e90:	eeb0 7b48 	vmov.f64	d7, d8
 8019e94:	e7ec      	b.n	8019e70 <_strtod_l+0xaa0>
 8019e96:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8019ee0 <_strtod_l+0xb10>
 8019e9a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ea2:	f57f af6f 	bpl.w	8019d84 <_strtod_l+0x9b4>
 8019ea6:	e4ae      	b.n	8019806 <_strtod_l+0x436>
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	9308      	str	r3, [sp, #32]
 8019eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019eae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019eb0:	6013      	str	r3, [r2, #0]
 8019eb2:	f7ff bacc 	b.w	801944e <_strtod_l+0x7e>
 8019eb6:	2a65      	cmp	r2, #101	@ 0x65
 8019eb8:	f43f abbc 	beq.w	8019634 <_strtod_l+0x264>
 8019ebc:	2a45      	cmp	r2, #69	@ 0x45
 8019ebe:	f43f abb9 	beq.w	8019634 <_strtod_l+0x264>
 8019ec2:	2301      	movs	r3, #1
 8019ec4:	9306      	str	r3, [sp, #24]
 8019ec6:	f7ff bbf0 	b.w	80196aa <_strtod_l+0x2da>
 8019eca:	bf00      	nop
 8019ecc:	f3af 8000 	nop.w
 8019ed0:	94a03595 	.word	0x94a03595
 8019ed4:	3fdfffff 	.word	0x3fdfffff
 8019ed8:	35afe535 	.word	0x35afe535
 8019edc:	3fe00000 	.word	0x3fe00000
 8019ee0:	94a03595 	.word	0x94a03595
 8019ee4:	3fcfffff 	.word	0x3fcfffff
 8019ee8:	000fffff 	.word	0x000fffff
 8019eec:	7ff00000 	.word	0x7ff00000
 8019ef0:	7fefffff 	.word	0x7fefffff
 8019ef4:	7fe00000 	.word	0x7fe00000
 8019ef8:	7c9fffff 	.word	0x7c9fffff

08019efc <_strtod_r>:
 8019efc:	4b01      	ldr	r3, [pc, #4]	@ (8019f04 <_strtod_r+0x8>)
 8019efe:	f7ff ba67 	b.w	80193d0 <_strtod_l>
 8019f02:	bf00      	nop
 8019f04:	240001e8 	.word	0x240001e8

08019f08 <_strtol_l.constprop.0>:
 8019f08:	2b24      	cmp	r3, #36	@ 0x24
 8019f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f0e:	4686      	mov	lr, r0
 8019f10:	4690      	mov	r8, r2
 8019f12:	d801      	bhi.n	8019f18 <_strtol_l.constprop.0+0x10>
 8019f14:	2b01      	cmp	r3, #1
 8019f16:	d106      	bne.n	8019f26 <_strtol_l.constprop.0+0x1e>
 8019f18:	f7fd fe6e 	bl	8017bf8 <__errno>
 8019f1c:	2316      	movs	r3, #22
 8019f1e:	6003      	str	r3, [r0, #0]
 8019f20:	2000      	movs	r0, #0
 8019f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f26:	4834      	ldr	r0, [pc, #208]	@ (8019ff8 <_strtol_l.constprop.0+0xf0>)
 8019f28:	460d      	mov	r5, r1
 8019f2a:	462a      	mov	r2, r5
 8019f2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f30:	5d06      	ldrb	r6, [r0, r4]
 8019f32:	f016 0608 	ands.w	r6, r6, #8
 8019f36:	d1f8      	bne.n	8019f2a <_strtol_l.constprop.0+0x22>
 8019f38:	2c2d      	cmp	r4, #45	@ 0x2d
 8019f3a:	d12d      	bne.n	8019f98 <_strtol_l.constprop.0+0x90>
 8019f3c:	782c      	ldrb	r4, [r5, #0]
 8019f3e:	2601      	movs	r6, #1
 8019f40:	1c95      	adds	r5, r2, #2
 8019f42:	f033 0210 	bics.w	r2, r3, #16
 8019f46:	d109      	bne.n	8019f5c <_strtol_l.constprop.0+0x54>
 8019f48:	2c30      	cmp	r4, #48	@ 0x30
 8019f4a:	d12a      	bne.n	8019fa2 <_strtol_l.constprop.0+0x9a>
 8019f4c:	782a      	ldrb	r2, [r5, #0]
 8019f4e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019f52:	2a58      	cmp	r2, #88	@ 0x58
 8019f54:	d125      	bne.n	8019fa2 <_strtol_l.constprop.0+0x9a>
 8019f56:	786c      	ldrb	r4, [r5, #1]
 8019f58:	2310      	movs	r3, #16
 8019f5a:	3502      	adds	r5, #2
 8019f5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019f60:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019f64:	2200      	movs	r2, #0
 8019f66:	fbbc f9f3 	udiv	r9, ip, r3
 8019f6a:	4610      	mov	r0, r2
 8019f6c:	fb03 ca19 	mls	sl, r3, r9, ip
 8019f70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019f74:	2f09      	cmp	r7, #9
 8019f76:	d81b      	bhi.n	8019fb0 <_strtol_l.constprop.0+0xa8>
 8019f78:	463c      	mov	r4, r7
 8019f7a:	42a3      	cmp	r3, r4
 8019f7c:	dd27      	ble.n	8019fce <_strtol_l.constprop.0+0xc6>
 8019f7e:	1c57      	adds	r7, r2, #1
 8019f80:	d007      	beq.n	8019f92 <_strtol_l.constprop.0+0x8a>
 8019f82:	4581      	cmp	r9, r0
 8019f84:	d320      	bcc.n	8019fc8 <_strtol_l.constprop.0+0xc0>
 8019f86:	d101      	bne.n	8019f8c <_strtol_l.constprop.0+0x84>
 8019f88:	45a2      	cmp	sl, r4
 8019f8a:	db1d      	blt.n	8019fc8 <_strtol_l.constprop.0+0xc0>
 8019f8c:	fb00 4003 	mla	r0, r0, r3, r4
 8019f90:	2201      	movs	r2, #1
 8019f92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f96:	e7eb      	b.n	8019f70 <_strtol_l.constprop.0+0x68>
 8019f98:	2c2b      	cmp	r4, #43	@ 0x2b
 8019f9a:	bf04      	itt	eq
 8019f9c:	782c      	ldrbeq	r4, [r5, #0]
 8019f9e:	1c95      	addeq	r5, r2, #2
 8019fa0:	e7cf      	b.n	8019f42 <_strtol_l.constprop.0+0x3a>
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d1da      	bne.n	8019f5c <_strtol_l.constprop.0+0x54>
 8019fa6:	2c30      	cmp	r4, #48	@ 0x30
 8019fa8:	bf0c      	ite	eq
 8019faa:	2308      	moveq	r3, #8
 8019fac:	230a      	movne	r3, #10
 8019fae:	e7d5      	b.n	8019f5c <_strtol_l.constprop.0+0x54>
 8019fb0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019fb4:	2f19      	cmp	r7, #25
 8019fb6:	d801      	bhi.n	8019fbc <_strtol_l.constprop.0+0xb4>
 8019fb8:	3c37      	subs	r4, #55	@ 0x37
 8019fba:	e7de      	b.n	8019f7a <_strtol_l.constprop.0+0x72>
 8019fbc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019fc0:	2f19      	cmp	r7, #25
 8019fc2:	d804      	bhi.n	8019fce <_strtol_l.constprop.0+0xc6>
 8019fc4:	3c57      	subs	r4, #87	@ 0x57
 8019fc6:	e7d8      	b.n	8019f7a <_strtol_l.constprop.0+0x72>
 8019fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8019fcc:	e7e1      	b.n	8019f92 <_strtol_l.constprop.0+0x8a>
 8019fce:	1c53      	adds	r3, r2, #1
 8019fd0:	d108      	bne.n	8019fe4 <_strtol_l.constprop.0+0xdc>
 8019fd2:	2322      	movs	r3, #34	@ 0x22
 8019fd4:	f8ce 3000 	str.w	r3, [lr]
 8019fd8:	4660      	mov	r0, ip
 8019fda:	f1b8 0f00 	cmp.w	r8, #0
 8019fde:	d0a0      	beq.n	8019f22 <_strtol_l.constprop.0+0x1a>
 8019fe0:	1e69      	subs	r1, r5, #1
 8019fe2:	e006      	b.n	8019ff2 <_strtol_l.constprop.0+0xea>
 8019fe4:	b106      	cbz	r6, 8019fe8 <_strtol_l.constprop.0+0xe0>
 8019fe6:	4240      	negs	r0, r0
 8019fe8:	f1b8 0f00 	cmp.w	r8, #0
 8019fec:	d099      	beq.n	8019f22 <_strtol_l.constprop.0+0x1a>
 8019fee:	2a00      	cmp	r2, #0
 8019ff0:	d1f6      	bne.n	8019fe0 <_strtol_l.constprop.0+0xd8>
 8019ff2:	f8c8 1000 	str.w	r1, [r8]
 8019ff6:	e794      	b.n	8019f22 <_strtol_l.constprop.0+0x1a>
 8019ff8:	0801b581 	.word	0x0801b581

08019ffc <_strtol_r>:
 8019ffc:	f7ff bf84 	b.w	8019f08 <_strtol_l.constprop.0>

0801a000 <__ssputs_r>:
 801a000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a004:	688e      	ldr	r6, [r1, #8]
 801a006:	461f      	mov	r7, r3
 801a008:	42be      	cmp	r6, r7
 801a00a:	680b      	ldr	r3, [r1, #0]
 801a00c:	4682      	mov	sl, r0
 801a00e:	460c      	mov	r4, r1
 801a010:	4690      	mov	r8, r2
 801a012:	d82d      	bhi.n	801a070 <__ssputs_r+0x70>
 801a014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a018:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a01c:	d026      	beq.n	801a06c <__ssputs_r+0x6c>
 801a01e:	6965      	ldr	r5, [r4, #20]
 801a020:	6909      	ldr	r1, [r1, #16]
 801a022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a026:	eba3 0901 	sub.w	r9, r3, r1
 801a02a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a02e:	1c7b      	adds	r3, r7, #1
 801a030:	444b      	add	r3, r9
 801a032:	106d      	asrs	r5, r5, #1
 801a034:	429d      	cmp	r5, r3
 801a036:	bf38      	it	cc
 801a038:	461d      	movcc	r5, r3
 801a03a:	0553      	lsls	r3, r2, #21
 801a03c:	d527      	bpl.n	801a08e <__ssputs_r+0x8e>
 801a03e:	4629      	mov	r1, r5
 801a040:	f7fe fc70 	bl	8018924 <_malloc_r>
 801a044:	4606      	mov	r6, r0
 801a046:	b360      	cbz	r0, 801a0a2 <__ssputs_r+0xa2>
 801a048:	6921      	ldr	r1, [r4, #16]
 801a04a:	464a      	mov	r2, r9
 801a04c:	f7fd fe01 	bl	8017c52 <memcpy>
 801a050:	89a3      	ldrh	r3, [r4, #12]
 801a052:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a05a:	81a3      	strh	r3, [r4, #12]
 801a05c:	6126      	str	r6, [r4, #16]
 801a05e:	6165      	str	r5, [r4, #20]
 801a060:	444e      	add	r6, r9
 801a062:	eba5 0509 	sub.w	r5, r5, r9
 801a066:	6026      	str	r6, [r4, #0]
 801a068:	60a5      	str	r5, [r4, #8]
 801a06a:	463e      	mov	r6, r7
 801a06c:	42be      	cmp	r6, r7
 801a06e:	d900      	bls.n	801a072 <__ssputs_r+0x72>
 801a070:	463e      	mov	r6, r7
 801a072:	6820      	ldr	r0, [r4, #0]
 801a074:	4632      	mov	r2, r6
 801a076:	4641      	mov	r1, r8
 801a078:	f000 fb6a 	bl	801a750 <memmove>
 801a07c:	68a3      	ldr	r3, [r4, #8]
 801a07e:	1b9b      	subs	r3, r3, r6
 801a080:	60a3      	str	r3, [r4, #8]
 801a082:	6823      	ldr	r3, [r4, #0]
 801a084:	4433      	add	r3, r6
 801a086:	6023      	str	r3, [r4, #0]
 801a088:	2000      	movs	r0, #0
 801a08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a08e:	462a      	mov	r2, r5
 801a090:	f000 ff43 	bl	801af1a <_realloc_r>
 801a094:	4606      	mov	r6, r0
 801a096:	2800      	cmp	r0, #0
 801a098:	d1e0      	bne.n	801a05c <__ssputs_r+0x5c>
 801a09a:	6921      	ldr	r1, [r4, #16]
 801a09c:	4650      	mov	r0, sl
 801a09e:	f7fe fbcd 	bl	801883c <_free_r>
 801a0a2:	230c      	movs	r3, #12
 801a0a4:	f8ca 3000 	str.w	r3, [sl]
 801a0a8:	89a3      	ldrh	r3, [r4, #12]
 801a0aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a0ae:	81a3      	strh	r3, [r4, #12]
 801a0b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a0b4:	e7e9      	b.n	801a08a <__ssputs_r+0x8a>
	...

0801a0b8 <_svfiprintf_r>:
 801a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0bc:	4698      	mov	r8, r3
 801a0be:	898b      	ldrh	r3, [r1, #12]
 801a0c0:	061b      	lsls	r3, r3, #24
 801a0c2:	b09d      	sub	sp, #116	@ 0x74
 801a0c4:	4607      	mov	r7, r0
 801a0c6:	460d      	mov	r5, r1
 801a0c8:	4614      	mov	r4, r2
 801a0ca:	d510      	bpl.n	801a0ee <_svfiprintf_r+0x36>
 801a0cc:	690b      	ldr	r3, [r1, #16]
 801a0ce:	b973      	cbnz	r3, 801a0ee <_svfiprintf_r+0x36>
 801a0d0:	2140      	movs	r1, #64	@ 0x40
 801a0d2:	f7fe fc27 	bl	8018924 <_malloc_r>
 801a0d6:	6028      	str	r0, [r5, #0]
 801a0d8:	6128      	str	r0, [r5, #16]
 801a0da:	b930      	cbnz	r0, 801a0ea <_svfiprintf_r+0x32>
 801a0dc:	230c      	movs	r3, #12
 801a0de:	603b      	str	r3, [r7, #0]
 801a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 801a0e4:	b01d      	add	sp, #116	@ 0x74
 801a0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0ea:	2340      	movs	r3, #64	@ 0x40
 801a0ec:	616b      	str	r3, [r5, #20]
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801a0f2:	2320      	movs	r3, #32
 801a0f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a0f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0fc:	2330      	movs	r3, #48	@ 0x30
 801a0fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a29c <_svfiprintf_r+0x1e4>
 801a102:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a106:	f04f 0901 	mov.w	r9, #1
 801a10a:	4623      	mov	r3, r4
 801a10c:	469a      	mov	sl, r3
 801a10e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a112:	b10a      	cbz	r2, 801a118 <_svfiprintf_r+0x60>
 801a114:	2a25      	cmp	r2, #37	@ 0x25
 801a116:	d1f9      	bne.n	801a10c <_svfiprintf_r+0x54>
 801a118:	ebba 0b04 	subs.w	fp, sl, r4
 801a11c:	d00b      	beq.n	801a136 <_svfiprintf_r+0x7e>
 801a11e:	465b      	mov	r3, fp
 801a120:	4622      	mov	r2, r4
 801a122:	4629      	mov	r1, r5
 801a124:	4638      	mov	r0, r7
 801a126:	f7ff ff6b 	bl	801a000 <__ssputs_r>
 801a12a:	3001      	adds	r0, #1
 801a12c:	f000 80a7 	beq.w	801a27e <_svfiprintf_r+0x1c6>
 801a130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a132:	445a      	add	r2, fp
 801a134:	9209      	str	r2, [sp, #36]	@ 0x24
 801a136:	f89a 3000 	ldrb.w	r3, [sl]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	f000 809f 	beq.w	801a27e <_svfiprintf_r+0x1c6>
 801a140:	2300      	movs	r3, #0
 801a142:	f04f 32ff 	mov.w	r2, #4294967295
 801a146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a14a:	f10a 0a01 	add.w	sl, sl, #1
 801a14e:	9304      	str	r3, [sp, #16]
 801a150:	9307      	str	r3, [sp, #28]
 801a152:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a156:	931a      	str	r3, [sp, #104]	@ 0x68
 801a158:	4654      	mov	r4, sl
 801a15a:	2205      	movs	r2, #5
 801a15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a160:	484e      	ldr	r0, [pc, #312]	@ (801a29c <_svfiprintf_r+0x1e4>)
 801a162:	f7e6 f8d5 	bl	8000310 <memchr>
 801a166:	9a04      	ldr	r2, [sp, #16]
 801a168:	b9d8      	cbnz	r0, 801a1a2 <_svfiprintf_r+0xea>
 801a16a:	06d0      	lsls	r0, r2, #27
 801a16c:	bf44      	itt	mi
 801a16e:	2320      	movmi	r3, #32
 801a170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a174:	0711      	lsls	r1, r2, #28
 801a176:	bf44      	itt	mi
 801a178:	232b      	movmi	r3, #43	@ 0x2b
 801a17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a17e:	f89a 3000 	ldrb.w	r3, [sl]
 801a182:	2b2a      	cmp	r3, #42	@ 0x2a
 801a184:	d015      	beq.n	801a1b2 <_svfiprintf_r+0xfa>
 801a186:	9a07      	ldr	r2, [sp, #28]
 801a188:	4654      	mov	r4, sl
 801a18a:	2000      	movs	r0, #0
 801a18c:	f04f 0c0a 	mov.w	ip, #10
 801a190:	4621      	mov	r1, r4
 801a192:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a196:	3b30      	subs	r3, #48	@ 0x30
 801a198:	2b09      	cmp	r3, #9
 801a19a:	d94b      	bls.n	801a234 <_svfiprintf_r+0x17c>
 801a19c:	b1b0      	cbz	r0, 801a1cc <_svfiprintf_r+0x114>
 801a19e:	9207      	str	r2, [sp, #28]
 801a1a0:	e014      	b.n	801a1cc <_svfiprintf_r+0x114>
 801a1a2:	eba0 0308 	sub.w	r3, r0, r8
 801a1a6:	fa09 f303 	lsl.w	r3, r9, r3
 801a1aa:	4313      	orrs	r3, r2
 801a1ac:	9304      	str	r3, [sp, #16]
 801a1ae:	46a2      	mov	sl, r4
 801a1b0:	e7d2      	b.n	801a158 <_svfiprintf_r+0xa0>
 801a1b2:	9b03      	ldr	r3, [sp, #12]
 801a1b4:	1d19      	adds	r1, r3, #4
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	9103      	str	r1, [sp, #12]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	bfbb      	ittet	lt
 801a1be:	425b      	neglt	r3, r3
 801a1c0:	f042 0202 	orrlt.w	r2, r2, #2
 801a1c4:	9307      	strge	r3, [sp, #28]
 801a1c6:	9307      	strlt	r3, [sp, #28]
 801a1c8:	bfb8      	it	lt
 801a1ca:	9204      	strlt	r2, [sp, #16]
 801a1cc:	7823      	ldrb	r3, [r4, #0]
 801a1ce:	2b2e      	cmp	r3, #46	@ 0x2e
 801a1d0:	d10a      	bne.n	801a1e8 <_svfiprintf_r+0x130>
 801a1d2:	7863      	ldrb	r3, [r4, #1]
 801a1d4:	2b2a      	cmp	r3, #42	@ 0x2a
 801a1d6:	d132      	bne.n	801a23e <_svfiprintf_r+0x186>
 801a1d8:	9b03      	ldr	r3, [sp, #12]
 801a1da:	1d1a      	adds	r2, r3, #4
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	9203      	str	r2, [sp, #12]
 801a1e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a1e4:	3402      	adds	r4, #2
 801a1e6:	9305      	str	r3, [sp, #20]
 801a1e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a2ac <_svfiprintf_r+0x1f4>
 801a1ec:	7821      	ldrb	r1, [r4, #0]
 801a1ee:	2203      	movs	r2, #3
 801a1f0:	4650      	mov	r0, sl
 801a1f2:	f7e6 f88d 	bl	8000310 <memchr>
 801a1f6:	b138      	cbz	r0, 801a208 <_svfiprintf_r+0x150>
 801a1f8:	9b04      	ldr	r3, [sp, #16]
 801a1fa:	eba0 000a 	sub.w	r0, r0, sl
 801a1fe:	2240      	movs	r2, #64	@ 0x40
 801a200:	4082      	lsls	r2, r0
 801a202:	4313      	orrs	r3, r2
 801a204:	3401      	adds	r4, #1
 801a206:	9304      	str	r3, [sp, #16]
 801a208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a20c:	4824      	ldr	r0, [pc, #144]	@ (801a2a0 <_svfiprintf_r+0x1e8>)
 801a20e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a212:	2206      	movs	r2, #6
 801a214:	f7e6 f87c 	bl	8000310 <memchr>
 801a218:	2800      	cmp	r0, #0
 801a21a:	d036      	beq.n	801a28a <_svfiprintf_r+0x1d2>
 801a21c:	4b21      	ldr	r3, [pc, #132]	@ (801a2a4 <_svfiprintf_r+0x1ec>)
 801a21e:	bb1b      	cbnz	r3, 801a268 <_svfiprintf_r+0x1b0>
 801a220:	9b03      	ldr	r3, [sp, #12]
 801a222:	3307      	adds	r3, #7
 801a224:	f023 0307 	bic.w	r3, r3, #7
 801a228:	3308      	adds	r3, #8
 801a22a:	9303      	str	r3, [sp, #12]
 801a22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a22e:	4433      	add	r3, r6
 801a230:	9309      	str	r3, [sp, #36]	@ 0x24
 801a232:	e76a      	b.n	801a10a <_svfiprintf_r+0x52>
 801a234:	fb0c 3202 	mla	r2, ip, r2, r3
 801a238:	460c      	mov	r4, r1
 801a23a:	2001      	movs	r0, #1
 801a23c:	e7a8      	b.n	801a190 <_svfiprintf_r+0xd8>
 801a23e:	2300      	movs	r3, #0
 801a240:	3401      	adds	r4, #1
 801a242:	9305      	str	r3, [sp, #20]
 801a244:	4619      	mov	r1, r3
 801a246:	f04f 0c0a 	mov.w	ip, #10
 801a24a:	4620      	mov	r0, r4
 801a24c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a250:	3a30      	subs	r2, #48	@ 0x30
 801a252:	2a09      	cmp	r2, #9
 801a254:	d903      	bls.n	801a25e <_svfiprintf_r+0x1a6>
 801a256:	2b00      	cmp	r3, #0
 801a258:	d0c6      	beq.n	801a1e8 <_svfiprintf_r+0x130>
 801a25a:	9105      	str	r1, [sp, #20]
 801a25c:	e7c4      	b.n	801a1e8 <_svfiprintf_r+0x130>
 801a25e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a262:	4604      	mov	r4, r0
 801a264:	2301      	movs	r3, #1
 801a266:	e7f0      	b.n	801a24a <_svfiprintf_r+0x192>
 801a268:	ab03      	add	r3, sp, #12
 801a26a:	9300      	str	r3, [sp, #0]
 801a26c:	462a      	mov	r2, r5
 801a26e:	4b0e      	ldr	r3, [pc, #56]	@ (801a2a8 <_svfiprintf_r+0x1f0>)
 801a270:	a904      	add	r1, sp, #16
 801a272:	4638      	mov	r0, r7
 801a274:	f7fc fc90 	bl	8016b98 <_printf_float>
 801a278:	1c42      	adds	r2, r0, #1
 801a27a:	4606      	mov	r6, r0
 801a27c:	d1d6      	bne.n	801a22c <_svfiprintf_r+0x174>
 801a27e:	89ab      	ldrh	r3, [r5, #12]
 801a280:	065b      	lsls	r3, r3, #25
 801a282:	f53f af2d 	bmi.w	801a0e0 <_svfiprintf_r+0x28>
 801a286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a288:	e72c      	b.n	801a0e4 <_svfiprintf_r+0x2c>
 801a28a:	ab03      	add	r3, sp, #12
 801a28c:	9300      	str	r3, [sp, #0]
 801a28e:	462a      	mov	r2, r5
 801a290:	4b05      	ldr	r3, [pc, #20]	@ (801a2a8 <_svfiprintf_r+0x1f0>)
 801a292:	a904      	add	r1, sp, #16
 801a294:	4638      	mov	r0, r7
 801a296:	f7fc ff07 	bl	80170a8 <_printf_i>
 801a29a:	e7ed      	b.n	801a278 <_svfiprintf_r+0x1c0>
 801a29c:	0801b681 	.word	0x0801b681
 801a2a0:	0801b68b 	.word	0x0801b68b
 801a2a4:	08016b99 	.word	0x08016b99
 801a2a8:	0801a001 	.word	0x0801a001
 801a2ac:	0801b687 	.word	0x0801b687

0801a2b0 <__sfputc_r>:
 801a2b0:	6893      	ldr	r3, [r2, #8]
 801a2b2:	3b01      	subs	r3, #1
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	b410      	push	{r4}
 801a2b8:	6093      	str	r3, [r2, #8]
 801a2ba:	da08      	bge.n	801a2ce <__sfputc_r+0x1e>
 801a2bc:	6994      	ldr	r4, [r2, #24]
 801a2be:	42a3      	cmp	r3, r4
 801a2c0:	db01      	blt.n	801a2c6 <__sfputc_r+0x16>
 801a2c2:	290a      	cmp	r1, #10
 801a2c4:	d103      	bne.n	801a2ce <__sfputc_r+0x1e>
 801a2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2ca:	f7fd bbae 	b.w	8017a2a <__swbuf_r>
 801a2ce:	6813      	ldr	r3, [r2, #0]
 801a2d0:	1c58      	adds	r0, r3, #1
 801a2d2:	6010      	str	r0, [r2, #0]
 801a2d4:	7019      	strb	r1, [r3, #0]
 801a2d6:	4608      	mov	r0, r1
 801a2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2dc:	4770      	bx	lr

0801a2de <__sfputs_r>:
 801a2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2e0:	4606      	mov	r6, r0
 801a2e2:	460f      	mov	r7, r1
 801a2e4:	4614      	mov	r4, r2
 801a2e6:	18d5      	adds	r5, r2, r3
 801a2e8:	42ac      	cmp	r4, r5
 801a2ea:	d101      	bne.n	801a2f0 <__sfputs_r+0x12>
 801a2ec:	2000      	movs	r0, #0
 801a2ee:	e007      	b.n	801a300 <__sfputs_r+0x22>
 801a2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2f4:	463a      	mov	r2, r7
 801a2f6:	4630      	mov	r0, r6
 801a2f8:	f7ff ffda 	bl	801a2b0 <__sfputc_r>
 801a2fc:	1c43      	adds	r3, r0, #1
 801a2fe:	d1f3      	bne.n	801a2e8 <__sfputs_r+0xa>
 801a300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a304 <_vfiprintf_r>:
 801a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a308:	460d      	mov	r5, r1
 801a30a:	b09d      	sub	sp, #116	@ 0x74
 801a30c:	4614      	mov	r4, r2
 801a30e:	4698      	mov	r8, r3
 801a310:	4606      	mov	r6, r0
 801a312:	b118      	cbz	r0, 801a31c <_vfiprintf_r+0x18>
 801a314:	6a03      	ldr	r3, [r0, #32]
 801a316:	b90b      	cbnz	r3, 801a31c <_vfiprintf_r+0x18>
 801a318:	f7fd fa7e 	bl	8017818 <__sinit>
 801a31c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a31e:	07d9      	lsls	r1, r3, #31
 801a320:	d405      	bmi.n	801a32e <_vfiprintf_r+0x2a>
 801a322:	89ab      	ldrh	r3, [r5, #12]
 801a324:	059a      	lsls	r2, r3, #22
 801a326:	d402      	bmi.n	801a32e <_vfiprintf_r+0x2a>
 801a328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a32a:	f7fd fc90 	bl	8017c4e <__retarget_lock_acquire_recursive>
 801a32e:	89ab      	ldrh	r3, [r5, #12]
 801a330:	071b      	lsls	r3, r3, #28
 801a332:	d501      	bpl.n	801a338 <_vfiprintf_r+0x34>
 801a334:	692b      	ldr	r3, [r5, #16]
 801a336:	b99b      	cbnz	r3, 801a360 <_vfiprintf_r+0x5c>
 801a338:	4629      	mov	r1, r5
 801a33a:	4630      	mov	r0, r6
 801a33c:	f7fd fbb4 	bl	8017aa8 <__swsetup_r>
 801a340:	b170      	cbz	r0, 801a360 <_vfiprintf_r+0x5c>
 801a342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a344:	07dc      	lsls	r4, r3, #31
 801a346:	d504      	bpl.n	801a352 <_vfiprintf_r+0x4e>
 801a348:	f04f 30ff 	mov.w	r0, #4294967295
 801a34c:	b01d      	add	sp, #116	@ 0x74
 801a34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a352:	89ab      	ldrh	r3, [r5, #12]
 801a354:	0598      	lsls	r0, r3, #22
 801a356:	d4f7      	bmi.n	801a348 <_vfiprintf_r+0x44>
 801a358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a35a:	f7fd fc79 	bl	8017c50 <__retarget_lock_release_recursive>
 801a35e:	e7f3      	b.n	801a348 <_vfiprintf_r+0x44>
 801a360:	2300      	movs	r3, #0
 801a362:	9309      	str	r3, [sp, #36]	@ 0x24
 801a364:	2320      	movs	r3, #32
 801a366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a36a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a36e:	2330      	movs	r3, #48	@ 0x30
 801a370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a520 <_vfiprintf_r+0x21c>
 801a374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a378:	f04f 0901 	mov.w	r9, #1
 801a37c:	4623      	mov	r3, r4
 801a37e:	469a      	mov	sl, r3
 801a380:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a384:	b10a      	cbz	r2, 801a38a <_vfiprintf_r+0x86>
 801a386:	2a25      	cmp	r2, #37	@ 0x25
 801a388:	d1f9      	bne.n	801a37e <_vfiprintf_r+0x7a>
 801a38a:	ebba 0b04 	subs.w	fp, sl, r4
 801a38e:	d00b      	beq.n	801a3a8 <_vfiprintf_r+0xa4>
 801a390:	465b      	mov	r3, fp
 801a392:	4622      	mov	r2, r4
 801a394:	4629      	mov	r1, r5
 801a396:	4630      	mov	r0, r6
 801a398:	f7ff ffa1 	bl	801a2de <__sfputs_r>
 801a39c:	3001      	adds	r0, #1
 801a39e:	f000 80a7 	beq.w	801a4f0 <_vfiprintf_r+0x1ec>
 801a3a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a3a4:	445a      	add	r2, fp
 801a3a6:	9209      	str	r2, [sp, #36]	@ 0x24
 801a3a8:	f89a 3000 	ldrb.w	r3, [sl]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	f000 809f 	beq.w	801a4f0 <_vfiprintf_r+0x1ec>
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	f04f 32ff 	mov.w	r2, #4294967295
 801a3b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a3bc:	f10a 0a01 	add.w	sl, sl, #1
 801a3c0:	9304      	str	r3, [sp, #16]
 801a3c2:	9307      	str	r3, [sp, #28]
 801a3c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a3c8:	931a      	str	r3, [sp, #104]	@ 0x68
 801a3ca:	4654      	mov	r4, sl
 801a3cc:	2205      	movs	r2, #5
 801a3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3d2:	4853      	ldr	r0, [pc, #332]	@ (801a520 <_vfiprintf_r+0x21c>)
 801a3d4:	f7e5 ff9c 	bl	8000310 <memchr>
 801a3d8:	9a04      	ldr	r2, [sp, #16]
 801a3da:	b9d8      	cbnz	r0, 801a414 <_vfiprintf_r+0x110>
 801a3dc:	06d1      	lsls	r1, r2, #27
 801a3de:	bf44      	itt	mi
 801a3e0:	2320      	movmi	r3, #32
 801a3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a3e6:	0713      	lsls	r3, r2, #28
 801a3e8:	bf44      	itt	mi
 801a3ea:	232b      	movmi	r3, #43	@ 0x2b
 801a3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a3f0:	f89a 3000 	ldrb.w	r3, [sl]
 801a3f4:	2b2a      	cmp	r3, #42	@ 0x2a
 801a3f6:	d015      	beq.n	801a424 <_vfiprintf_r+0x120>
 801a3f8:	9a07      	ldr	r2, [sp, #28]
 801a3fa:	4654      	mov	r4, sl
 801a3fc:	2000      	movs	r0, #0
 801a3fe:	f04f 0c0a 	mov.w	ip, #10
 801a402:	4621      	mov	r1, r4
 801a404:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a408:	3b30      	subs	r3, #48	@ 0x30
 801a40a:	2b09      	cmp	r3, #9
 801a40c:	d94b      	bls.n	801a4a6 <_vfiprintf_r+0x1a2>
 801a40e:	b1b0      	cbz	r0, 801a43e <_vfiprintf_r+0x13a>
 801a410:	9207      	str	r2, [sp, #28]
 801a412:	e014      	b.n	801a43e <_vfiprintf_r+0x13a>
 801a414:	eba0 0308 	sub.w	r3, r0, r8
 801a418:	fa09 f303 	lsl.w	r3, r9, r3
 801a41c:	4313      	orrs	r3, r2
 801a41e:	9304      	str	r3, [sp, #16]
 801a420:	46a2      	mov	sl, r4
 801a422:	e7d2      	b.n	801a3ca <_vfiprintf_r+0xc6>
 801a424:	9b03      	ldr	r3, [sp, #12]
 801a426:	1d19      	adds	r1, r3, #4
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	9103      	str	r1, [sp, #12]
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	bfbb      	ittet	lt
 801a430:	425b      	neglt	r3, r3
 801a432:	f042 0202 	orrlt.w	r2, r2, #2
 801a436:	9307      	strge	r3, [sp, #28]
 801a438:	9307      	strlt	r3, [sp, #28]
 801a43a:	bfb8      	it	lt
 801a43c:	9204      	strlt	r2, [sp, #16]
 801a43e:	7823      	ldrb	r3, [r4, #0]
 801a440:	2b2e      	cmp	r3, #46	@ 0x2e
 801a442:	d10a      	bne.n	801a45a <_vfiprintf_r+0x156>
 801a444:	7863      	ldrb	r3, [r4, #1]
 801a446:	2b2a      	cmp	r3, #42	@ 0x2a
 801a448:	d132      	bne.n	801a4b0 <_vfiprintf_r+0x1ac>
 801a44a:	9b03      	ldr	r3, [sp, #12]
 801a44c:	1d1a      	adds	r2, r3, #4
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	9203      	str	r2, [sp, #12]
 801a452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a456:	3402      	adds	r4, #2
 801a458:	9305      	str	r3, [sp, #20]
 801a45a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a530 <_vfiprintf_r+0x22c>
 801a45e:	7821      	ldrb	r1, [r4, #0]
 801a460:	2203      	movs	r2, #3
 801a462:	4650      	mov	r0, sl
 801a464:	f7e5 ff54 	bl	8000310 <memchr>
 801a468:	b138      	cbz	r0, 801a47a <_vfiprintf_r+0x176>
 801a46a:	9b04      	ldr	r3, [sp, #16]
 801a46c:	eba0 000a 	sub.w	r0, r0, sl
 801a470:	2240      	movs	r2, #64	@ 0x40
 801a472:	4082      	lsls	r2, r0
 801a474:	4313      	orrs	r3, r2
 801a476:	3401      	adds	r4, #1
 801a478:	9304      	str	r3, [sp, #16]
 801a47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a47e:	4829      	ldr	r0, [pc, #164]	@ (801a524 <_vfiprintf_r+0x220>)
 801a480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a484:	2206      	movs	r2, #6
 801a486:	f7e5 ff43 	bl	8000310 <memchr>
 801a48a:	2800      	cmp	r0, #0
 801a48c:	d03f      	beq.n	801a50e <_vfiprintf_r+0x20a>
 801a48e:	4b26      	ldr	r3, [pc, #152]	@ (801a528 <_vfiprintf_r+0x224>)
 801a490:	bb1b      	cbnz	r3, 801a4da <_vfiprintf_r+0x1d6>
 801a492:	9b03      	ldr	r3, [sp, #12]
 801a494:	3307      	adds	r3, #7
 801a496:	f023 0307 	bic.w	r3, r3, #7
 801a49a:	3308      	adds	r3, #8
 801a49c:	9303      	str	r3, [sp, #12]
 801a49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a4a0:	443b      	add	r3, r7
 801a4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801a4a4:	e76a      	b.n	801a37c <_vfiprintf_r+0x78>
 801a4a6:	fb0c 3202 	mla	r2, ip, r2, r3
 801a4aa:	460c      	mov	r4, r1
 801a4ac:	2001      	movs	r0, #1
 801a4ae:	e7a8      	b.n	801a402 <_vfiprintf_r+0xfe>
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	3401      	adds	r4, #1
 801a4b4:	9305      	str	r3, [sp, #20]
 801a4b6:	4619      	mov	r1, r3
 801a4b8:	f04f 0c0a 	mov.w	ip, #10
 801a4bc:	4620      	mov	r0, r4
 801a4be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4c2:	3a30      	subs	r2, #48	@ 0x30
 801a4c4:	2a09      	cmp	r2, #9
 801a4c6:	d903      	bls.n	801a4d0 <_vfiprintf_r+0x1cc>
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d0c6      	beq.n	801a45a <_vfiprintf_r+0x156>
 801a4cc:	9105      	str	r1, [sp, #20]
 801a4ce:	e7c4      	b.n	801a45a <_vfiprintf_r+0x156>
 801a4d0:	fb0c 2101 	mla	r1, ip, r1, r2
 801a4d4:	4604      	mov	r4, r0
 801a4d6:	2301      	movs	r3, #1
 801a4d8:	e7f0      	b.n	801a4bc <_vfiprintf_r+0x1b8>
 801a4da:	ab03      	add	r3, sp, #12
 801a4dc:	9300      	str	r3, [sp, #0]
 801a4de:	462a      	mov	r2, r5
 801a4e0:	4b12      	ldr	r3, [pc, #72]	@ (801a52c <_vfiprintf_r+0x228>)
 801a4e2:	a904      	add	r1, sp, #16
 801a4e4:	4630      	mov	r0, r6
 801a4e6:	f7fc fb57 	bl	8016b98 <_printf_float>
 801a4ea:	4607      	mov	r7, r0
 801a4ec:	1c78      	adds	r0, r7, #1
 801a4ee:	d1d6      	bne.n	801a49e <_vfiprintf_r+0x19a>
 801a4f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a4f2:	07d9      	lsls	r1, r3, #31
 801a4f4:	d405      	bmi.n	801a502 <_vfiprintf_r+0x1fe>
 801a4f6:	89ab      	ldrh	r3, [r5, #12]
 801a4f8:	059a      	lsls	r2, r3, #22
 801a4fa:	d402      	bmi.n	801a502 <_vfiprintf_r+0x1fe>
 801a4fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a4fe:	f7fd fba7 	bl	8017c50 <__retarget_lock_release_recursive>
 801a502:	89ab      	ldrh	r3, [r5, #12]
 801a504:	065b      	lsls	r3, r3, #25
 801a506:	f53f af1f 	bmi.w	801a348 <_vfiprintf_r+0x44>
 801a50a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a50c:	e71e      	b.n	801a34c <_vfiprintf_r+0x48>
 801a50e:	ab03      	add	r3, sp, #12
 801a510:	9300      	str	r3, [sp, #0]
 801a512:	462a      	mov	r2, r5
 801a514:	4b05      	ldr	r3, [pc, #20]	@ (801a52c <_vfiprintf_r+0x228>)
 801a516:	a904      	add	r1, sp, #16
 801a518:	4630      	mov	r0, r6
 801a51a:	f7fc fdc5 	bl	80170a8 <_printf_i>
 801a51e:	e7e4      	b.n	801a4ea <_vfiprintf_r+0x1e6>
 801a520:	0801b681 	.word	0x0801b681
 801a524:	0801b68b 	.word	0x0801b68b
 801a528:	08016b99 	.word	0x08016b99
 801a52c:	0801a2df 	.word	0x0801a2df
 801a530:	0801b687 	.word	0x0801b687

0801a534 <__sflush_r>:
 801a534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a53c:	0716      	lsls	r6, r2, #28
 801a53e:	4605      	mov	r5, r0
 801a540:	460c      	mov	r4, r1
 801a542:	d454      	bmi.n	801a5ee <__sflush_r+0xba>
 801a544:	684b      	ldr	r3, [r1, #4]
 801a546:	2b00      	cmp	r3, #0
 801a548:	dc02      	bgt.n	801a550 <__sflush_r+0x1c>
 801a54a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	dd48      	ble.n	801a5e2 <__sflush_r+0xae>
 801a550:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a552:	2e00      	cmp	r6, #0
 801a554:	d045      	beq.n	801a5e2 <__sflush_r+0xae>
 801a556:	2300      	movs	r3, #0
 801a558:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a55c:	682f      	ldr	r7, [r5, #0]
 801a55e:	6a21      	ldr	r1, [r4, #32]
 801a560:	602b      	str	r3, [r5, #0]
 801a562:	d030      	beq.n	801a5c6 <__sflush_r+0x92>
 801a564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a566:	89a3      	ldrh	r3, [r4, #12]
 801a568:	0759      	lsls	r1, r3, #29
 801a56a:	d505      	bpl.n	801a578 <__sflush_r+0x44>
 801a56c:	6863      	ldr	r3, [r4, #4]
 801a56e:	1ad2      	subs	r2, r2, r3
 801a570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a572:	b10b      	cbz	r3, 801a578 <__sflush_r+0x44>
 801a574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a576:	1ad2      	subs	r2, r2, r3
 801a578:	2300      	movs	r3, #0
 801a57a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a57c:	6a21      	ldr	r1, [r4, #32]
 801a57e:	4628      	mov	r0, r5
 801a580:	47b0      	blx	r6
 801a582:	1c43      	adds	r3, r0, #1
 801a584:	89a3      	ldrh	r3, [r4, #12]
 801a586:	d106      	bne.n	801a596 <__sflush_r+0x62>
 801a588:	6829      	ldr	r1, [r5, #0]
 801a58a:	291d      	cmp	r1, #29
 801a58c:	d82b      	bhi.n	801a5e6 <__sflush_r+0xb2>
 801a58e:	4a2a      	ldr	r2, [pc, #168]	@ (801a638 <__sflush_r+0x104>)
 801a590:	410a      	asrs	r2, r1
 801a592:	07d6      	lsls	r6, r2, #31
 801a594:	d427      	bmi.n	801a5e6 <__sflush_r+0xb2>
 801a596:	2200      	movs	r2, #0
 801a598:	6062      	str	r2, [r4, #4]
 801a59a:	04d9      	lsls	r1, r3, #19
 801a59c:	6922      	ldr	r2, [r4, #16]
 801a59e:	6022      	str	r2, [r4, #0]
 801a5a0:	d504      	bpl.n	801a5ac <__sflush_r+0x78>
 801a5a2:	1c42      	adds	r2, r0, #1
 801a5a4:	d101      	bne.n	801a5aa <__sflush_r+0x76>
 801a5a6:	682b      	ldr	r3, [r5, #0]
 801a5a8:	b903      	cbnz	r3, 801a5ac <__sflush_r+0x78>
 801a5aa:	6560      	str	r0, [r4, #84]	@ 0x54
 801a5ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a5ae:	602f      	str	r7, [r5, #0]
 801a5b0:	b1b9      	cbz	r1, 801a5e2 <__sflush_r+0xae>
 801a5b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a5b6:	4299      	cmp	r1, r3
 801a5b8:	d002      	beq.n	801a5c0 <__sflush_r+0x8c>
 801a5ba:	4628      	mov	r0, r5
 801a5bc:	f7fe f93e 	bl	801883c <_free_r>
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	6363      	str	r3, [r4, #52]	@ 0x34
 801a5c4:	e00d      	b.n	801a5e2 <__sflush_r+0xae>
 801a5c6:	2301      	movs	r3, #1
 801a5c8:	4628      	mov	r0, r5
 801a5ca:	47b0      	blx	r6
 801a5cc:	4602      	mov	r2, r0
 801a5ce:	1c50      	adds	r0, r2, #1
 801a5d0:	d1c9      	bne.n	801a566 <__sflush_r+0x32>
 801a5d2:	682b      	ldr	r3, [r5, #0]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d0c6      	beq.n	801a566 <__sflush_r+0x32>
 801a5d8:	2b1d      	cmp	r3, #29
 801a5da:	d001      	beq.n	801a5e0 <__sflush_r+0xac>
 801a5dc:	2b16      	cmp	r3, #22
 801a5de:	d11e      	bne.n	801a61e <__sflush_r+0xea>
 801a5e0:	602f      	str	r7, [r5, #0]
 801a5e2:	2000      	movs	r0, #0
 801a5e4:	e022      	b.n	801a62c <__sflush_r+0xf8>
 801a5e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a5ea:	b21b      	sxth	r3, r3
 801a5ec:	e01b      	b.n	801a626 <__sflush_r+0xf2>
 801a5ee:	690f      	ldr	r7, [r1, #16]
 801a5f0:	2f00      	cmp	r7, #0
 801a5f2:	d0f6      	beq.n	801a5e2 <__sflush_r+0xae>
 801a5f4:	0793      	lsls	r3, r2, #30
 801a5f6:	680e      	ldr	r6, [r1, #0]
 801a5f8:	bf08      	it	eq
 801a5fa:	694b      	ldreq	r3, [r1, #20]
 801a5fc:	600f      	str	r7, [r1, #0]
 801a5fe:	bf18      	it	ne
 801a600:	2300      	movne	r3, #0
 801a602:	eba6 0807 	sub.w	r8, r6, r7
 801a606:	608b      	str	r3, [r1, #8]
 801a608:	f1b8 0f00 	cmp.w	r8, #0
 801a60c:	dde9      	ble.n	801a5e2 <__sflush_r+0xae>
 801a60e:	6a21      	ldr	r1, [r4, #32]
 801a610:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a612:	4643      	mov	r3, r8
 801a614:	463a      	mov	r2, r7
 801a616:	4628      	mov	r0, r5
 801a618:	47b0      	blx	r6
 801a61a:	2800      	cmp	r0, #0
 801a61c:	dc08      	bgt.n	801a630 <__sflush_r+0xfc>
 801a61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a626:	81a3      	strh	r3, [r4, #12]
 801a628:	f04f 30ff 	mov.w	r0, #4294967295
 801a62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a630:	4407      	add	r7, r0
 801a632:	eba8 0800 	sub.w	r8, r8, r0
 801a636:	e7e7      	b.n	801a608 <__sflush_r+0xd4>
 801a638:	dfbffffe 	.word	0xdfbffffe

0801a63c <_fflush_r>:
 801a63c:	b538      	push	{r3, r4, r5, lr}
 801a63e:	690b      	ldr	r3, [r1, #16]
 801a640:	4605      	mov	r5, r0
 801a642:	460c      	mov	r4, r1
 801a644:	b913      	cbnz	r3, 801a64c <_fflush_r+0x10>
 801a646:	2500      	movs	r5, #0
 801a648:	4628      	mov	r0, r5
 801a64a:	bd38      	pop	{r3, r4, r5, pc}
 801a64c:	b118      	cbz	r0, 801a656 <_fflush_r+0x1a>
 801a64e:	6a03      	ldr	r3, [r0, #32]
 801a650:	b90b      	cbnz	r3, 801a656 <_fflush_r+0x1a>
 801a652:	f7fd f8e1 	bl	8017818 <__sinit>
 801a656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d0f3      	beq.n	801a646 <_fflush_r+0xa>
 801a65e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a660:	07d0      	lsls	r0, r2, #31
 801a662:	d404      	bmi.n	801a66e <_fflush_r+0x32>
 801a664:	0599      	lsls	r1, r3, #22
 801a666:	d402      	bmi.n	801a66e <_fflush_r+0x32>
 801a668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a66a:	f7fd faf0 	bl	8017c4e <__retarget_lock_acquire_recursive>
 801a66e:	4628      	mov	r0, r5
 801a670:	4621      	mov	r1, r4
 801a672:	f7ff ff5f 	bl	801a534 <__sflush_r>
 801a676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a678:	07da      	lsls	r2, r3, #31
 801a67a:	4605      	mov	r5, r0
 801a67c:	d4e4      	bmi.n	801a648 <_fflush_r+0xc>
 801a67e:	89a3      	ldrh	r3, [r4, #12]
 801a680:	059b      	lsls	r3, r3, #22
 801a682:	d4e1      	bmi.n	801a648 <_fflush_r+0xc>
 801a684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a686:	f7fd fae3 	bl	8017c50 <__retarget_lock_release_recursive>
 801a68a:	e7dd      	b.n	801a648 <_fflush_r+0xc>

0801a68c <__swhatbuf_r>:
 801a68c:	b570      	push	{r4, r5, r6, lr}
 801a68e:	460c      	mov	r4, r1
 801a690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a694:	2900      	cmp	r1, #0
 801a696:	b096      	sub	sp, #88	@ 0x58
 801a698:	4615      	mov	r5, r2
 801a69a:	461e      	mov	r6, r3
 801a69c:	da0d      	bge.n	801a6ba <__swhatbuf_r+0x2e>
 801a69e:	89a3      	ldrh	r3, [r4, #12]
 801a6a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a6a4:	f04f 0100 	mov.w	r1, #0
 801a6a8:	bf14      	ite	ne
 801a6aa:	2340      	movne	r3, #64	@ 0x40
 801a6ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a6b0:	2000      	movs	r0, #0
 801a6b2:	6031      	str	r1, [r6, #0]
 801a6b4:	602b      	str	r3, [r5, #0]
 801a6b6:	b016      	add	sp, #88	@ 0x58
 801a6b8:	bd70      	pop	{r4, r5, r6, pc}
 801a6ba:	466a      	mov	r2, sp
 801a6bc:	f000 f874 	bl	801a7a8 <_fstat_r>
 801a6c0:	2800      	cmp	r0, #0
 801a6c2:	dbec      	blt.n	801a69e <__swhatbuf_r+0x12>
 801a6c4:	9901      	ldr	r1, [sp, #4]
 801a6c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a6ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a6ce:	4259      	negs	r1, r3
 801a6d0:	4159      	adcs	r1, r3
 801a6d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a6d6:	e7eb      	b.n	801a6b0 <__swhatbuf_r+0x24>

0801a6d8 <__smakebuf_r>:
 801a6d8:	898b      	ldrh	r3, [r1, #12]
 801a6da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a6dc:	079d      	lsls	r5, r3, #30
 801a6de:	4606      	mov	r6, r0
 801a6e0:	460c      	mov	r4, r1
 801a6e2:	d507      	bpl.n	801a6f4 <__smakebuf_r+0x1c>
 801a6e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a6e8:	6023      	str	r3, [r4, #0]
 801a6ea:	6123      	str	r3, [r4, #16]
 801a6ec:	2301      	movs	r3, #1
 801a6ee:	6163      	str	r3, [r4, #20]
 801a6f0:	b003      	add	sp, #12
 801a6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6f4:	ab01      	add	r3, sp, #4
 801a6f6:	466a      	mov	r2, sp
 801a6f8:	f7ff ffc8 	bl	801a68c <__swhatbuf_r>
 801a6fc:	9f00      	ldr	r7, [sp, #0]
 801a6fe:	4605      	mov	r5, r0
 801a700:	4639      	mov	r1, r7
 801a702:	4630      	mov	r0, r6
 801a704:	f7fe f90e 	bl	8018924 <_malloc_r>
 801a708:	b948      	cbnz	r0, 801a71e <__smakebuf_r+0x46>
 801a70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a70e:	059a      	lsls	r2, r3, #22
 801a710:	d4ee      	bmi.n	801a6f0 <__smakebuf_r+0x18>
 801a712:	f023 0303 	bic.w	r3, r3, #3
 801a716:	f043 0302 	orr.w	r3, r3, #2
 801a71a:	81a3      	strh	r3, [r4, #12]
 801a71c:	e7e2      	b.n	801a6e4 <__smakebuf_r+0xc>
 801a71e:	89a3      	ldrh	r3, [r4, #12]
 801a720:	6020      	str	r0, [r4, #0]
 801a722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a726:	81a3      	strh	r3, [r4, #12]
 801a728:	9b01      	ldr	r3, [sp, #4]
 801a72a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a72e:	b15b      	cbz	r3, 801a748 <__smakebuf_r+0x70>
 801a730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a734:	4630      	mov	r0, r6
 801a736:	f000 f849 	bl	801a7cc <_isatty_r>
 801a73a:	b128      	cbz	r0, 801a748 <__smakebuf_r+0x70>
 801a73c:	89a3      	ldrh	r3, [r4, #12]
 801a73e:	f023 0303 	bic.w	r3, r3, #3
 801a742:	f043 0301 	orr.w	r3, r3, #1
 801a746:	81a3      	strh	r3, [r4, #12]
 801a748:	89a3      	ldrh	r3, [r4, #12]
 801a74a:	431d      	orrs	r5, r3
 801a74c:	81a5      	strh	r5, [r4, #12]
 801a74e:	e7cf      	b.n	801a6f0 <__smakebuf_r+0x18>

0801a750 <memmove>:
 801a750:	4288      	cmp	r0, r1
 801a752:	b510      	push	{r4, lr}
 801a754:	eb01 0402 	add.w	r4, r1, r2
 801a758:	d902      	bls.n	801a760 <memmove+0x10>
 801a75a:	4284      	cmp	r4, r0
 801a75c:	4623      	mov	r3, r4
 801a75e:	d807      	bhi.n	801a770 <memmove+0x20>
 801a760:	1e43      	subs	r3, r0, #1
 801a762:	42a1      	cmp	r1, r4
 801a764:	d008      	beq.n	801a778 <memmove+0x28>
 801a766:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a76a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a76e:	e7f8      	b.n	801a762 <memmove+0x12>
 801a770:	4402      	add	r2, r0
 801a772:	4601      	mov	r1, r0
 801a774:	428a      	cmp	r2, r1
 801a776:	d100      	bne.n	801a77a <memmove+0x2a>
 801a778:	bd10      	pop	{r4, pc}
 801a77a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a77e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a782:	e7f7      	b.n	801a774 <memmove+0x24>

0801a784 <strncmp>:
 801a784:	b510      	push	{r4, lr}
 801a786:	b16a      	cbz	r2, 801a7a4 <strncmp+0x20>
 801a788:	3901      	subs	r1, #1
 801a78a:	1884      	adds	r4, r0, r2
 801a78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a790:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a794:	429a      	cmp	r2, r3
 801a796:	d103      	bne.n	801a7a0 <strncmp+0x1c>
 801a798:	42a0      	cmp	r0, r4
 801a79a:	d001      	beq.n	801a7a0 <strncmp+0x1c>
 801a79c:	2a00      	cmp	r2, #0
 801a79e:	d1f5      	bne.n	801a78c <strncmp+0x8>
 801a7a0:	1ad0      	subs	r0, r2, r3
 801a7a2:	bd10      	pop	{r4, pc}
 801a7a4:	4610      	mov	r0, r2
 801a7a6:	e7fc      	b.n	801a7a2 <strncmp+0x1e>

0801a7a8 <_fstat_r>:
 801a7a8:	b538      	push	{r3, r4, r5, lr}
 801a7aa:	4d07      	ldr	r5, [pc, #28]	@ (801a7c8 <_fstat_r+0x20>)
 801a7ac:	2300      	movs	r3, #0
 801a7ae:	4604      	mov	r4, r0
 801a7b0:	4608      	mov	r0, r1
 801a7b2:	4611      	mov	r1, r2
 801a7b4:	602b      	str	r3, [r5, #0]
 801a7b6:	f7ec faeb 	bl	8006d90 <_fstat>
 801a7ba:	1c43      	adds	r3, r0, #1
 801a7bc:	d102      	bne.n	801a7c4 <_fstat_r+0x1c>
 801a7be:	682b      	ldr	r3, [r5, #0]
 801a7c0:	b103      	cbz	r3, 801a7c4 <_fstat_r+0x1c>
 801a7c2:	6023      	str	r3, [r4, #0]
 801a7c4:	bd38      	pop	{r3, r4, r5, pc}
 801a7c6:	bf00      	nop
 801a7c8:	24001198 	.word	0x24001198

0801a7cc <_isatty_r>:
 801a7cc:	b538      	push	{r3, r4, r5, lr}
 801a7ce:	4d06      	ldr	r5, [pc, #24]	@ (801a7e8 <_isatty_r+0x1c>)
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	4608      	mov	r0, r1
 801a7d6:	602b      	str	r3, [r5, #0]
 801a7d8:	f7ec faea 	bl	8006db0 <_isatty>
 801a7dc:	1c43      	adds	r3, r0, #1
 801a7de:	d102      	bne.n	801a7e6 <_isatty_r+0x1a>
 801a7e0:	682b      	ldr	r3, [r5, #0]
 801a7e2:	b103      	cbz	r3, 801a7e6 <_isatty_r+0x1a>
 801a7e4:	6023      	str	r3, [r4, #0]
 801a7e6:	bd38      	pop	{r3, r4, r5, pc}
 801a7e8:	24001198 	.word	0x24001198

0801a7ec <_sbrk_r>:
 801a7ec:	b538      	push	{r3, r4, r5, lr}
 801a7ee:	4d06      	ldr	r5, [pc, #24]	@ (801a808 <_sbrk_r+0x1c>)
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	4604      	mov	r4, r0
 801a7f4:	4608      	mov	r0, r1
 801a7f6:	602b      	str	r3, [r5, #0]
 801a7f8:	f7ec faf2 	bl	8006de0 <_sbrk>
 801a7fc:	1c43      	adds	r3, r0, #1
 801a7fe:	d102      	bne.n	801a806 <_sbrk_r+0x1a>
 801a800:	682b      	ldr	r3, [r5, #0]
 801a802:	b103      	cbz	r3, 801a806 <_sbrk_r+0x1a>
 801a804:	6023      	str	r3, [r4, #0]
 801a806:	bd38      	pop	{r3, r4, r5, pc}
 801a808:	24001198 	.word	0x24001198
 801a80c:	00000000 	.word	0x00000000

0801a810 <nan>:
 801a810:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a818 <nan+0x8>
 801a814:	4770      	bx	lr
 801a816:	bf00      	nop
 801a818:	00000000 	.word	0x00000000
 801a81c:	7ff80000 	.word	0x7ff80000

0801a820 <__assert_func>:
 801a820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a822:	4614      	mov	r4, r2
 801a824:	461a      	mov	r2, r3
 801a826:	4b09      	ldr	r3, [pc, #36]	@ (801a84c <__assert_func+0x2c>)
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	4605      	mov	r5, r0
 801a82c:	68d8      	ldr	r0, [r3, #12]
 801a82e:	b954      	cbnz	r4, 801a846 <__assert_func+0x26>
 801a830:	4b07      	ldr	r3, [pc, #28]	@ (801a850 <__assert_func+0x30>)
 801a832:	461c      	mov	r4, r3
 801a834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a838:	9100      	str	r1, [sp, #0]
 801a83a:	462b      	mov	r3, r5
 801a83c:	4905      	ldr	r1, [pc, #20]	@ (801a854 <__assert_func+0x34>)
 801a83e:	f000 fba7 	bl	801af90 <fiprintf>
 801a842:	f000 fbb7 	bl	801afb4 <abort>
 801a846:	4b04      	ldr	r3, [pc, #16]	@ (801a858 <__assert_func+0x38>)
 801a848:	e7f4      	b.n	801a834 <__assert_func+0x14>
 801a84a:	bf00      	nop
 801a84c:	24000198 	.word	0x24000198
 801a850:	0801b6d5 	.word	0x0801b6d5
 801a854:	0801b6a7 	.word	0x0801b6a7
 801a858:	0801b69a 	.word	0x0801b69a

0801a85c <_calloc_r>:
 801a85c:	b570      	push	{r4, r5, r6, lr}
 801a85e:	fba1 5402 	umull	r5, r4, r1, r2
 801a862:	b93c      	cbnz	r4, 801a874 <_calloc_r+0x18>
 801a864:	4629      	mov	r1, r5
 801a866:	f7fe f85d 	bl	8018924 <_malloc_r>
 801a86a:	4606      	mov	r6, r0
 801a86c:	b928      	cbnz	r0, 801a87a <_calloc_r+0x1e>
 801a86e:	2600      	movs	r6, #0
 801a870:	4630      	mov	r0, r6
 801a872:	bd70      	pop	{r4, r5, r6, pc}
 801a874:	220c      	movs	r2, #12
 801a876:	6002      	str	r2, [r0, #0]
 801a878:	e7f9      	b.n	801a86e <_calloc_r+0x12>
 801a87a:	462a      	mov	r2, r5
 801a87c:	4621      	mov	r1, r4
 801a87e:	f7fd f969 	bl	8017b54 <memset>
 801a882:	e7f5      	b.n	801a870 <_calloc_r+0x14>

0801a884 <rshift>:
 801a884:	6903      	ldr	r3, [r0, #16]
 801a886:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a88a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a88e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a892:	f100 0414 	add.w	r4, r0, #20
 801a896:	dd45      	ble.n	801a924 <rshift+0xa0>
 801a898:	f011 011f 	ands.w	r1, r1, #31
 801a89c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a8a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a8a4:	d10c      	bne.n	801a8c0 <rshift+0x3c>
 801a8a6:	f100 0710 	add.w	r7, r0, #16
 801a8aa:	4629      	mov	r1, r5
 801a8ac:	42b1      	cmp	r1, r6
 801a8ae:	d334      	bcc.n	801a91a <rshift+0x96>
 801a8b0:	1a9b      	subs	r3, r3, r2
 801a8b2:	009b      	lsls	r3, r3, #2
 801a8b4:	1eea      	subs	r2, r5, #3
 801a8b6:	4296      	cmp	r6, r2
 801a8b8:	bf38      	it	cc
 801a8ba:	2300      	movcc	r3, #0
 801a8bc:	4423      	add	r3, r4
 801a8be:	e015      	b.n	801a8ec <rshift+0x68>
 801a8c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a8c4:	f1c1 0820 	rsb	r8, r1, #32
 801a8c8:	40cf      	lsrs	r7, r1
 801a8ca:	f105 0e04 	add.w	lr, r5, #4
 801a8ce:	46a1      	mov	r9, r4
 801a8d0:	4576      	cmp	r6, lr
 801a8d2:	46f4      	mov	ip, lr
 801a8d4:	d815      	bhi.n	801a902 <rshift+0x7e>
 801a8d6:	1a9a      	subs	r2, r3, r2
 801a8d8:	0092      	lsls	r2, r2, #2
 801a8da:	3a04      	subs	r2, #4
 801a8dc:	3501      	adds	r5, #1
 801a8de:	42ae      	cmp	r6, r5
 801a8e0:	bf38      	it	cc
 801a8e2:	2200      	movcc	r2, #0
 801a8e4:	18a3      	adds	r3, r4, r2
 801a8e6:	50a7      	str	r7, [r4, r2]
 801a8e8:	b107      	cbz	r7, 801a8ec <rshift+0x68>
 801a8ea:	3304      	adds	r3, #4
 801a8ec:	1b1a      	subs	r2, r3, r4
 801a8ee:	42a3      	cmp	r3, r4
 801a8f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a8f4:	bf08      	it	eq
 801a8f6:	2300      	moveq	r3, #0
 801a8f8:	6102      	str	r2, [r0, #16]
 801a8fa:	bf08      	it	eq
 801a8fc:	6143      	streq	r3, [r0, #20]
 801a8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a902:	f8dc c000 	ldr.w	ip, [ip]
 801a906:	fa0c fc08 	lsl.w	ip, ip, r8
 801a90a:	ea4c 0707 	orr.w	r7, ip, r7
 801a90e:	f849 7b04 	str.w	r7, [r9], #4
 801a912:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a916:	40cf      	lsrs	r7, r1
 801a918:	e7da      	b.n	801a8d0 <rshift+0x4c>
 801a91a:	f851 cb04 	ldr.w	ip, [r1], #4
 801a91e:	f847 cf04 	str.w	ip, [r7, #4]!
 801a922:	e7c3      	b.n	801a8ac <rshift+0x28>
 801a924:	4623      	mov	r3, r4
 801a926:	e7e1      	b.n	801a8ec <rshift+0x68>

0801a928 <__hexdig_fun>:
 801a928:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801a92c:	2b09      	cmp	r3, #9
 801a92e:	d802      	bhi.n	801a936 <__hexdig_fun+0xe>
 801a930:	3820      	subs	r0, #32
 801a932:	b2c0      	uxtb	r0, r0
 801a934:	4770      	bx	lr
 801a936:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801a93a:	2b05      	cmp	r3, #5
 801a93c:	d801      	bhi.n	801a942 <__hexdig_fun+0x1a>
 801a93e:	3847      	subs	r0, #71	@ 0x47
 801a940:	e7f7      	b.n	801a932 <__hexdig_fun+0xa>
 801a942:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801a946:	2b05      	cmp	r3, #5
 801a948:	d801      	bhi.n	801a94e <__hexdig_fun+0x26>
 801a94a:	3827      	subs	r0, #39	@ 0x27
 801a94c:	e7f1      	b.n	801a932 <__hexdig_fun+0xa>
 801a94e:	2000      	movs	r0, #0
 801a950:	4770      	bx	lr
	...

0801a954 <__gethex>:
 801a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a958:	b085      	sub	sp, #20
 801a95a:	468a      	mov	sl, r1
 801a95c:	9302      	str	r3, [sp, #8]
 801a95e:	680b      	ldr	r3, [r1, #0]
 801a960:	9001      	str	r0, [sp, #4]
 801a962:	4690      	mov	r8, r2
 801a964:	1c9c      	adds	r4, r3, #2
 801a966:	46a1      	mov	r9, r4
 801a968:	f814 0b01 	ldrb.w	r0, [r4], #1
 801a96c:	2830      	cmp	r0, #48	@ 0x30
 801a96e:	d0fa      	beq.n	801a966 <__gethex+0x12>
 801a970:	eba9 0303 	sub.w	r3, r9, r3
 801a974:	f1a3 0b02 	sub.w	fp, r3, #2
 801a978:	f7ff ffd6 	bl	801a928 <__hexdig_fun>
 801a97c:	4605      	mov	r5, r0
 801a97e:	2800      	cmp	r0, #0
 801a980:	d168      	bne.n	801aa54 <__gethex+0x100>
 801a982:	49a0      	ldr	r1, [pc, #640]	@ (801ac04 <__gethex+0x2b0>)
 801a984:	2201      	movs	r2, #1
 801a986:	4648      	mov	r0, r9
 801a988:	f7ff fefc 	bl	801a784 <strncmp>
 801a98c:	4607      	mov	r7, r0
 801a98e:	2800      	cmp	r0, #0
 801a990:	d167      	bne.n	801aa62 <__gethex+0x10e>
 801a992:	f899 0001 	ldrb.w	r0, [r9, #1]
 801a996:	4626      	mov	r6, r4
 801a998:	f7ff ffc6 	bl	801a928 <__hexdig_fun>
 801a99c:	2800      	cmp	r0, #0
 801a99e:	d062      	beq.n	801aa66 <__gethex+0x112>
 801a9a0:	4623      	mov	r3, r4
 801a9a2:	7818      	ldrb	r0, [r3, #0]
 801a9a4:	2830      	cmp	r0, #48	@ 0x30
 801a9a6:	4699      	mov	r9, r3
 801a9a8:	f103 0301 	add.w	r3, r3, #1
 801a9ac:	d0f9      	beq.n	801a9a2 <__gethex+0x4e>
 801a9ae:	f7ff ffbb 	bl	801a928 <__hexdig_fun>
 801a9b2:	fab0 f580 	clz	r5, r0
 801a9b6:	096d      	lsrs	r5, r5, #5
 801a9b8:	f04f 0b01 	mov.w	fp, #1
 801a9bc:	464a      	mov	r2, r9
 801a9be:	4616      	mov	r6, r2
 801a9c0:	3201      	adds	r2, #1
 801a9c2:	7830      	ldrb	r0, [r6, #0]
 801a9c4:	f7ff ffb0 	bl	801a928 <__hexdig_fun>
 801a9c8:	2800      	cmp	r0, #0
 801a9ca:	d1f8      	bne.n	801a9be <__gethex+0x6a>
 801a9cc:	498d      	ldr	r1, [pc, #564]	@ (801ac04 <__gethex+0x2b0>)
 801a9ce:	2201      	movs	r2, #1
 801a9d0:	4630      	mov	r0, r6
 801a9d2:	f7ff fed7 	bl	801a784 <strncmp>
 801a9d6:	2800      	cmp	r0, #0
 801a9d8:	d13f      	bne.n	801aa5a <__gethex+0x106>
 801a9da:	b944      	cbnz	r4, 801a9ee <__gethex+0x9a>
 801a9dc:	1c74      	adds	r4, r6, #1
 801a9de:	4622      	mov	r2, r4
 801a9e0:	4616      	mov	r6, r2
 801a9e2:	3201      	adds	r2, #1
 801a9e4:	7830      	ldrb	r0, [r6, #0]
 801a9e6:	f7ff ff9f 	bl	801a928 <__hexdig_fun>
 801a9ea:	2800      	cmp	r0, #0
 801a9ec:	d1f8      	bne.n	801a9e0 <__gethex+0x8c>
 801a9ee:	1ba4      	subs	r4, r4, r6
 801a9f0:	00a7      	lsls	r7, r4, #2
 801a9f2:	7833      	ldrb	r3, [r6, #0]
 801a9f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801a9f8:	2b50      	cmp	r3, #80	@ 0x50
 801a9fa:	d13e      	bne.n	801aa7a <__gethex+0x126>
 801a9fc:	7873      	ldrb	r3, [r6, #1]
 801a9fe:	2b2b      	cmp	r3, #43	@ 0x2b
 801aa00:	d033      	beq.n	801aa6a <__gethex+0x116>
 801aa02:	2b2d      	cmp	r3, #45	@ 0x2d
 801aa04:	d034      	beq.n	801aa70 <__gethex+0x11c>
 801aa06:	1c71      	adds	r1, r6, #1
 801aa08:	2400      	movs	r4, #0
 801aa0a:	7808      	ldrb	r0, [r1, #0]
 801aa0c:	f7ff ff8c 	bl	801a928 <__hexdig_fun>
 801aa10:	1e43      	subs	r3, r0, #1
 801aa12:	b2db      	uxtb	r3, r3
 801aa14:	2b18      	cmp	r3, #24
 801aa16:	d830      	bhi.n	801aa7a <__gethex+0x126>
 801aa18:	f1a0 0210 	sub.w	r2, r0, #16
 801aa1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801aa20:	f7ff ff82 	bl	801a928 <__hexdig_fun>
 801aa24:	f100 3cff 	add.w	ip, r0, #4294967295
 801aa28:	fa5f fc8c 	uxtb.w	ip, ip
 801aa2c:	f1bc 0f18 	cmp.w	ip, #24
 801aa30:	f04f 030a 	mov.w	r3, #10
 801aa34:	d91e      	bls.n	801aa74 <__gethex+0x120>
 801aa36:	b104      	cbz	r4, 801aa3a <__gethex+0xe6>
 801aa38:	4252      	negs	r2, r2
 801aa3a:	4417      	add	r7, r2
 801aa3c:	f8ca 1000 	str.w	r1, [sl]
 801aa40:	b1ed      	cbz	r5, 801aa7e <__gethex+0x12a>
 801aa42:	f1bb 0f00 	cmp.w	fp, #0
 801aa46:	bf0c      	ite	eq
 801aa48:	2506      	moveq	r5, #6
 801aa4a:	2500      	movne	r5, #0
 801aa4c:	4628      	mov	r0, r5
 801aa4e:	b005      	add	sp, #20
 801aa50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa54:	2500      	movs	r5, #0
 801aa56:	462c      	mov	r4, r5
 801aa58:	e7b0      	b.n	801a9bc <__gethex+0x68>
 801aa5a:	2c00      	cmp	r4, #0
 801aa5c:	d1c7      	bne.n	801a9ee <__gethex+0x9a>
 801aa5e:	4627      	mov	r7, r4
 801aa60:	e7c7      	b.n	801a9f2 <__gethex+0x9e>
 801aa62:	464e      	mov	r6, r9
 801aa64:	462f      	mov	r7, r5
 801aa66:	2501      	movs	r5, #1
 801aa68:	e7c3      	b.n	801a9f2 <__gethex+0x9e>
 801aa6a:	2400      	movs	r4, #0
 801aa6c:	1cb1      	adds	r1, r6, #2
 801aa6e:	e7cc      	b.n	801aa0a <__gethex+0xb6>
 801aa70:	2401      	movs	r4, #1
 801aa72:	e7fb      	b.n	801aa6c <__gethex+0x118>
 801aa74:	fb03 0002 	mla	r0, r3, r2, r0
 801aa78:	e7ce      	b.n	801aa18 <__gethex+0xc4>
 801aa7a:	4631      	mov	r1, r6
 801aa7c:	e7de      	b.n	801aa3c <__gethex+0xe8>
 801aa7e:	eba6 0309 	sub.w	r3, r6, r9
 801aa82:	3b01      	subs	r3, #1
 801aa84:	4629      	mov	r1, r5
 801aa86:	2b07      	cmp	r3, #7
 801aa88:	dc0a      	bgt.n	801aaa0 <__gethex+0x14c>
 801aa8a:	9801      	ldr	r0, [sp, #4]
 801aa8c:	f7fd ffd6 	bl	8018a3c <_Balloc>
 801aa90:	4604      	mov	r4, r0
 801aa92:	b940      	cbnz	r0, 801aaa6 <__gethex+0x152>
 801aa94:	4b5c      	ldr	r3, [pc, #368]	@ (801ac08 <__gethex+0x2b4>)
 801aa96:	4602      	mov	r2, r0
 801aa98:	21e4      	movs	r1, #228	@ 0xe4
 801aa9a:	485c      	ldr	r0, [pc, #368]	@ (801ac0c <__gethex+0x2b8>)
 801aa9c:	f7ff fec0 	bl	801a820 <__assert_func>
 801aaa0:	3101      	adds	r1, #1
 801aaa2:	105b      	asrs	r3, r3, #1
 801aaa4:	e7ef      	b.n	801aa86 <__gethex+0x132>
 801aaa6:	f100 0a14 	add.w	sl, r0, #20
 801aaaa:	2300      	movs	r3, #0
 801aaac:	4655      	mov	r5, sl
 801aaae:	469b      	mov	fp, r3
 801aab0:	45b1      	cmp	r9, r6
 801aab2:	d337      	bcc.n	801ab24 <__gethex+0x1d0>
 801aab4:	f845 bb04 	str.w	fp, [r5], #4
 801aab8:	eba5 050a 	sub.w	r5, r5, sl
 801aabc:	10ad      	asrs	r5, r5, #2
 801aabe:	6125      	str	r5, [r4, #16]
 801aac0:	4658      	mov	r0, fp
 801aac2:	f7fe f8ad 	bl	8018c20 <__hi0bits>
 801aac6:	016d      	lsls	r5, r5, #5
 801aac8:	f8d8 6000 	ldr.w	r6, [r8]
 801aacc:	1a2d      	subs	r5, r5, r0
 801aace:	42b5      	cmp	r5, r6
 801aad0:	dd54      	ble.n	801ab7c <__gethex+0x228>
 801aad2:	1bad      	subs	r5, r5, r6
 801aad4:	4629      	mov	r1, r5
 801aad6:	4620      	mov	r0, r4
 801aad8:	f7fe fc3e 	bl	8019358 <__any_on>
 801aadc:	4681      	mov	r9, r0
 801aade:	b178      	cbz	r0, 801ab00 <__gethex+0x1ac>
 801aae0:	1e6b      	subs	r3, r5, #1
 801aae2:	1159      	asrs	r1, r3, #5
 801aae4:	f003 021f 	and.w	r2, r3, #31
 801aae8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801aaec:	f04f 0901 	mov.w	r9, #1
 801aaf0:	fa09 f202 	lsl.w	r2, r9, r2
 801aaf4:	420a      	tst	r2, r1
 801aaf6:	d003      	beq.n	801ab00 <__gethex+0x1ac>
 801aaf8:	454b      	cmp	r3, r9
 801aafa:	dc36      	bgt.n	801ab6a <__gethex+0x216>
 801aafc:	f04f 0902 	mov.w	r9, #2
 801ab00:	4629      	mov	r1, r5
 801ab02:	4620      	mov	r0, r4
 801ab04:	f7ff febe 	bl	801a884 <rshift>
 801ab08:	442f      	add	r7, r5
 801ab0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ab0e:	42bb      	cmp	r3, r7
 801ab10:	da42      	bge.n	801ab98 <__gethex+0x244>
 801ab12:	9801      	ldr	r0, [sp, #4]
 801ab14:	4621      	mov	r1, r4
 801ab16:	f7fd ffd1 	bl	8018abc <_Bfree>
 801ab1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ab1c:	2300      	movs	r3, #0
 801ab1e:	6013      	str	r3, [r2, #0]
 801ab20:	25a3      	movs	r5, #163	@ 0xa3
 801ab22:	e793      	b.n	801aa4c <__gethex+0xf8>
 801ab24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801ab28:	2a2e      	cmp	r2, #46	@ 0x2e
 801ab2a:	d012      	beq.n	801ab52 <__gethex+0x1fe>
 801ab2c:	2b20      	cmp	r3, #32
 801ab2e:	d104      	bne.n	801ab3a <__gethex+0x1e6>
 801ab30:	f845 bb04 	str.w	fp, [r5], #4
 801ab34:	f04f 0b00 	mov.w	fp, #0
 801ab38:	465b      	mov	r3, fp
 801ab3a:	7830      	ldrb	r0, [r6, #0]
 801ab3c:	9303      	str	r3, [sp, #12]
 801ab3e:	f7ff fef3 	bl	801a928 <__hexdig_fun>
 801ab42:	9b03      	ldr	r3, [sp, #12]
 801ab44:	f000 000f 	and.w	r0, r0, #15
 801ab48:	4098      	lsls	r0, r3
 801ab4a:	ea4b 0b00 	orr.w	fp, fp, r0
 801ab4e:	3304      	adds	r3, #4
 801ab50:	e7ae      	b.n	801aab0 <__gethex+0x15c>
 801ab52:	45b1      	cmp	r9, r6
 801ab54:	d8ea      	bhi.n	801ab2c <__gethex+0x1d8>
 801ab56:	492b      	ldr	r1, [pc, #172]	@ (801ac04 <__gethex+0x2b0>)
 801ab58:	9303      	str	r3, [sp, #12]
 801ab5a:	2201      	movs	r2, #1
 801ab5c:	4630      	mov	r0, r6
 801ab5e:	f7ff fe11 	bl	801a784 <strncmp>
 801ab62:	9b03      	ldr	r3, [sp, #12]
 801ab64:	2800      	cmp	r0, #0
 801ab66:	d1e1      	bne.n	801ab2c <__gethex+0x1d8>
 801ab68:	e7a2      	b.n	801aab0 <__gethex+0x15c>
 801ab6a:	1ea9      	subs	r1, r5, #2
 801ab6c:	4620      	mov	r0, r4
 801ab6e:	f7fe fbf3 	bl	8019358 <__any_on>
 801ab72:	2800      	cmp	r0, #0
 801ab74:	d0c2      	beq.n	801aafc <__gethex+0x1a8>
 801ab76:	f04f 0903 	mov.w	r9, #3
 801ab7a:	e7c1      	b.n	801ab00 <__gethex+0x1ac>
 801ab7c:	da09      	bge.n	801ab92 <__gethex+0x23e>
 801ab7e:	1b75      	subs	r5, r6, r5
 801ab80:	4621      	mov	r1, r4
 801ab82:	9801      	ldr	r0, [sp, #4]
 801ab84:	462a      	mov	r2, r5
 801ab86:	f7fe f9b1 	bl	8018eec <__lshift>
 801ab8a:	1b7f      	subs	r7, r7, r5
 801ab8c:	4604      	mov	r4, r0
 801ab8e:	f100 0a14 	add.w	sl, r0, #20
 801ab92:	f04f 0900 	mov.w	r9, #0
 801ab96:	e7b8      	b.n	801ab0a <__gethex+0x1b6>
 801ab98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ab9c:	42bd      	cmp	r5, r7
 801ab9e:	dd6f      	ble.n	801ac80 <__gethex+0x32c>
 801aba0:	1bed      	subs	r5, r5, r7
 801aba2:	42ae      	cmp	r6, r5
 801aba4:	dc34      	bgt.n	801ac10 <__gethex+0x2bc>
 801aba6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801abaa:	2b02      	cmp	r3, #2
 801abac:	d022      	beq.n	801abf4 <__gethex+0x2a0>
 801abae:	2b03      	cmp	r3, #3
 801abb0:	d024      	beq.n	801abfc <__gethex+0x2a8>
 801abb2:	2b01      	cmp	r3, #1
 801abb4:	d115      	bne.n	801abe2 <__gethex+0x28e>
 801abb6:	42ae      	cmp	r6, r5
 801abb8:	d113      	bne.n	801abe2 <__gethex+0x28e>
 801abba:	2e01      	cmp	r6, #1
 801abbc:	d10b      	bne.n	801abd6 <__gethex+0x282>
 801abbe:	9a02      	ldr	r2, [sp, #8]
 801abc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801abc4:	6013      	str	r3, [r2, #0]
 801abc6:	2301      	movs	r3, #1
 801abc8:	6123      	str	r3, [r4, #16]
 801abca:	f8ca 3000 	str.w	r3, [sl]
 801abce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801abd0:	2562      	movs	r5, #98	@ 0x62
 801abd2:	601c      	str	r4, [r3, #0]
 801abd4:	e73a      	b.n	801aa4c <__gethex+0xf8>
 801abd6:	1e71      	subs	r1, r6, #1
 801abd8:	4620      	mov	r0, r4
 801abda:	f7fe fbbd 	bl	8019358 <__any_on>
 801abde:	2800      	cmp	r0, #0
 801abe0:	d1ed      	bne.n	801abbe <__gethex+0x26a>
 801abe2:	9801      	ldr	r0, [sp, #4]
 801abe4:	4621      	mov	r1, r4
 801abe6:	f7fd ff69 	bl	8018abc <_Bfree>
 801abea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801abec:	2300      	movs	r3, #0
 801abee:	6013      	str	r3, [r2, #0]
 801abf0:	2550      	movs	r5, #80	@ 0x50
 801abf2:	e72b      	b.n	801aa4c <__gethex+0xf8>
 801abf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d1f3      	bne.n	801abe2 <__gethex+0x28e>
 801abfa:	e7e0      	b.n	801abbe <__gethex+0x26a>
 801abfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d1dd      	bne.n	801abbe <__gethex+0x26a>
 801ac02:	e7ee      	b.n	801abe2 <__gethex+0x28e>
 801ac04:	0801b528 	.word	0x0801b528
 801ac08:	0801b3bd 	.word	0x0801b3bd
 801ac0c:	0801b6d6 	.word	0x0801b6d6
 801ac10:	1e6f      	subs	r7, r5, #1
 801ac12:	f1b9 0f00 	cmp.w	r9, #0
 801ac16:	d130      	bne.n	801ac7a <__gethex+0x326>
 801ac18:	b127      	cbz	r7, 801ac24 <__gethex+0x2d0>
 801ac1a:	4639      	mov	r1, r7
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	f7fe fb9b 	bl	8019358 <__any_on>
 801ac22:	4681      	mov	r9, r0
 801ac24:	117a      	asrs	r2, r7, #5
 801ac26:	2301      	movs	r3, #1
 801ac28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ac2c:	f007 071f 	and.w	r7, r7, #31
 801ac30:	40bb      	lsls	r3, r7
 801ac32:	4213      	tst	r3, r2
 801ac34:	4629      	mov	r1, r5
 801ac36:	4620      	mov	r0, r4
 801ac38:	bf18      	it	ne
 801ac3a:	f049 0902 	orrne.w	r9, r9, #2
 801ac3e:	f7ff fe21 	bl	801a884 <rshift>
 801ac42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801ac46:	1b76      	subs	r6, r6, r5
 801ac48:	2502      	movs	r5, #2
 801ac4a:	f1b9 0f00 	cmp.w	r9, #0
 801ac4e:	d047      	beq.n	801ace0 <__gethex+0x38c>
 801ac50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ac54:	2b02      	cmp	r3, #2
 801ac56:	d015      	beq.n	801ac84 <__gethex+0x330>
 801ac58:	2b03      	cmp	r3, #3
 801ac5a:	d017      	beq.n	801ac8c <__gethex+0x338>
 801ac5c:	2b01      	cmp	r3, #1
 801ac5e:	d109      	bne.n	801ac74 <__gethex+0x320>
 801ac60:	f019 0f02 	tst.w	r9, #2
 801ac64:	d006      	beq.n	801ac74 <__gethex+0x320>
 801ac66:	f8da 3000 	ldr.w	r3, [sl]
 801ac6a:	ea49 0903 	orr.w	r9, r9, r3
 801ac6e:	f019 0f01 	tst.w	r9, #1
 801ac72:	d10e      	bne.n	801ac92 <__gethex+0x33e>
 801ac74:	f045 0510 	orr.w	r5, r5, #16
 801ac78:	e032      	b.n	801ace0 <__gethex+0x38c>
 801ac7a:	f04f 0901 	mov.w	r9, #1
 801ac7e:	e7d1      	b.n	801ac24 <__gethex+0x2d0>
 801ac80:	2501      	movs	r5, #1
 801ac82:	e7e2      	b.n	801ac4a <__gethex+0x2f6>
 801ac84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac86:	f1c3 0301 	rsb	r3, r3, #1
 801ac8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ac8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d0f0      	beq.n	801ac74 <__gethex+0x320>
 801ac92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ac96:	f104 0314 	add.w	r3, r4, #20
 801ac9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ac9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801aca2:	f04f 0c00 	mov.w	ip, #0
 801aca6:	4618      	mov	r0, r3
 801aca8:	f853 2b04 	ldr.w	r2, [r3], #4
 801acac:	f1b2 3fff 	cmp.w	r2, #4294967295
 801acb0:	d01b      	beq.n	801acea <__gethex+0x396>
 801acb2:	3201      	adds	r2, #1
 801acb4:	6002      	str	r2, [r0, #0]
 801acb6:	2d02      	cmp	r5, #2
 801acb8:	f104 0314 	add.w	r3, r4, #20
 801acbc:	d13c      	bne.n	801ad38 <__gethex+0x3e4>
 801acbe:	f8d8 2000 	ldr.w	r2, [r8]
 801acc2:	3a01      	subs	r2, #1
 801acc4:	42b2      	cmp	r2, r6
 801acc6:	d109      	bne.n	801acdc <__gethex+0x388>
 801acc8:	1171      	asrs	r1, r6, #5
 801acca:	2201      	movs	r2, #1
 801accc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801acd0:	f006 061f 	and.w	r6, r6, #31
 801acd4:	fa02 f606 	lsl.w	r6, r2, r6
 801acd8:	421e      	tst	r6, r3
 801acda:	d13a      	bne.n	801ad52 <__gethex+0x3fe>
 801acdc:	f045 0520 	orr.w	r5, r5, #32
 801ace0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ace2:	601c      	str	r4, [r3, #0]
 801ace4:	9b02      	ldr	r3, [sp, #8]
 801ace6:	601f      	str	r7, [r3, #0]
 801ace8:	e6b0      	b.n	801aa4c <__gethex+0xf8>
 801acea:	4299      	cmp	r1, r3
 801acec:	f843 cc04 	str.w	ip, [r3, #-4]
 801acf0:	d8d9      	bhi.n	801aca6 <__gethex+0x352>
 801acf2:	68a3      	ldr	r3, [r4, #8]
 801acf4:	459b      	cmp	fp, r3
 801acf6:	db17      	blt.n	801ad28 <__gethex+0x3d4>
 801acf8:	6861      	ldr	r1, [r4, #4]
 801acfa:	9801      	ldr	r0, [sp, #4]
 801acfc:	3101      	adds	r1, #1
 801acfe:	f7fd fe9d 	bl	8018a3c <_Balloc>
 801ad02:	4681      	mov	r9, r0
 801ad04:	b918      	cbnz	r0, 801ad0e <__gethex+0x3ba>
 801ad06:	4b1a      	ldr	r3, [pc, #104]	@ (801ad70 <__gethex+0x41c>)
 801ad08:	4602      	mov	r2, r0
 801ad0a:	2184      	movs	r1, #132	@ 0x84
 801ad0c:	e6c5      	b.n	801aa9a <__gethex+0x146>
 801ad0e:	6922      	ldr	r2, [r4, #16]
 801ad10:	3202      	adds	r2, #2
 801ad12:	f104 010c 	add.w	r1, r4, #12
 801ad16:	0092      	lsls	r2, r2, #2
 801ad18:	300c      	adds	r0, #12
 801ad1a:	f7fc ff9a 	bl	8017c52 <memcpy>
 801ad1e:	4621      	mov	r1, r4
 801ad20:	9801      	ldr	r0, [sp, #4]
 801ad22:	f7fd fecb 	bl	8018abc <_Bfree>
 801ad26:	464c      	mov	r4, r9
 801ad28:	6923      	ldr	r3, [r4, #16]
 801ad2a:	1c5a      	adds	r2, r3, #1
 801ad2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ad30:	6122      	str	r2, [r4, #16]
 801ad32:	2201      	movs	r2, #1
 801ad34:	615a      	str	r2, [r3, #20]
 801ad36:	e7be      	b.n	801acb6 <__gethex+0x362>
 801ad38:	6922      	ldr	r2, [r4, #16]
 801ad3a:	455a      	cmp	r2, fp
 801ad3c:	dd0b      	ble.n	801ad56 <__gethex+0x402>
 801ad3e:	2101      	movs	r1, #1
 801ad40:	4620      	mov	r0, r4
 801ad42:	f7ff fd9f 	bl	801a884 <rshift>
 801ad46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ad4a:	3701      	adds	r7, #1
 801ad4c:	42bb      	cmp	r3, r7
 801ad4e:	f6ff aee0 	blt.w	801ab12 <__gethex+0x1be>
 801ad52:	2501      	movs	r5, #1
 801ad54:	e7c2      	b.n	801acdc <__gethex+0x388>
 801ad56:	f016 061f 	ands.w	r6, r6, #31
 801ad5a:	d0fa      	beq.n	801ad52 <__gethex+0x3fe>
 801ad5c:	4453      	add	r3, sl
 801ad5e:	f1c6 0620 	rsb	r6, r6, #32
 801ad62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ad66:	f7fd ff5b 	bl	8018c20 <__hi0bits>
 801ad6a:	42b0      	cmp	r0, r6
 801ad6c:	dbe7      	blt.n	801ad3e <__gethex+0x3ea>
 801ad6e:	e7f0      	b.n	801ad52 <__gethex+0x3fe>
 801ad70:	0801b3bd 	.word	0x0801b3bd

0801ad74 <L_shift>:
 801ad74:	f1c2 0208 	rsb	r2, r2, #8
 801ad78:	0092      	lsls	r2, r2, #2
 801ad7a:	b570      	push	{r4, r5, r6, lr}
 801ad7c:	f1c2 0620 	rsb	r6, r2, #32
 801ad80:	6843      	ldr	r3, [r0, #4]
 801ad82:	6804      	ldr	r4, [r0, #0]
 801ad84:	fa03 f506 	lsl.w	r5, r3, r6
 801ad88:	432c      	orrs	r4, r5
 801ad8a:	40d3      	lsrs	r3, r2
 801ad8c:	6004      	str	r4, [r0, #0]
 801ad8e:	f840 3f04 	str.w	r3, [r0, #4]!
 801ad92:	4288      	cmp	r0, r1
 801ad94:	d3f4      	bcc.n	801ad80 <L_shift+0xc>
 801ad96:	bd70      	pop	{r4, r5, r6, pc}

0801ad98 <__match>:
 801ad98:	b530      	push	{r4, r5, lr}
 801ad9a:	6803      	ldr	r3, [r0, #0]
 801ad9c:	3301      	adds	r3, #1
 801ad9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ada2:	b914      	cbnz	r4, 801adaa <__match+0x12>
 801ada4:	6003      	str	r3, [r0, #0]
 801ada6:	2001      	movs	r0, #1
 801ada8:	bd30      	pop	{r4, r5, pc}
 801adaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801adae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801adb2:	2d19      	cmp	r5, #25
 801adb4:	bf98      	it	ls
 801adb6:	3220      	addls	r2, #32
 801adb8:	42a2      	cmp	r2, r4
 801adba:	d0f0      	beq.n	801ad9e <__match+0x6>
 801adbc:	2000      	movs	r0, #0
 801adbe:	e7f3      	b.n	801ada8 <__match+0x10>

0801adc0 <__hexnan>:
 801adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adc4:	680b      	ldr	r3, [r1, #0]
 801adc6:	6801      	ldr	r1, [r0, #0]
 801adc8:	115e      	asrs	r6, r3, #5
 801adca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801adce:	f013 031f 	ands.w	r3, r3, #31
 801add2:	b087      	sub	sp, #28
 801add4:	bf18      	it	ne
 801add6:	3604      	addne	r6, #4
 801add8:	2500      	movs	r5, #0
 801adda:	1f37      	subs	r7, r6, #4
 801addc:	4682      	mov	sl, r0
 801adde:	4690      	mov	r8, r2
 801ade0:	9301      	str	r3, [sp, #4]
 801ade2:	f846 5c04 	str.w	r5, [r6, #-4]
 801ade6:	46b9      	mov	r9, r7
 801ade8:	463c      	mov	r4, r7
 801adea:	9502      	str	r5, [sp, #8]
 801adec:	46ab      	mov	fp, r5
 801adee:	784a      	ldrb	r2, [r1, #1]
 801adf0:	1c4b      	adds	r3, r1, #1
 801adf2:	9303      	str	r3, [sp, #12]
 801adf4:	b342      	cbz	r2, 801ae48 <__hexnan+0x88>
 801adf6:	4610      	mov	r0, r2
 801adf8:	9105      	str	r1, [sp, #20]
 801adfa:	9204      	str	r2, [sp, #16]
 801adfc:	f7ff fd94 	bl	801a928 <__hexdig_fun>
 801ae00:	2800      	cmp	r0, #0
 801ae02:	d151      	bne.n	801aea8 <__hexnan+0xe8>
 801ae04:	9a04      	ldr	r2, [sp, #16]
 801ae06:	9905      	ldr	r1, [sp, #20]
 801ae08:	2a20      	cmp	r2, #32
 801ae0a:	d818      	bhi.n	801ae3e <__hexnan+0x7e>
 801ae0c:	9b02      	ldr	r3, [sp, #8]
 801ae0e:	459b      	cmp	fp, r3
 801ae10:	dd13      	ble.n	801ae3a <__hexnan+0x7a>
 801ae12:	454c      	cmp	r4, r9
 801ae14:	d206      	bcs.n	801ae24 <__hexnan+0x64>
 801ae16:	2d07      	cmp	r5, #7
 801ae18:	dc04      	bgt.n	801ae24 <__hexnan+0x64>
 801ae1a:	462a      	mov	r2, r5
 801ae1c:	4649      	mov	r1, r9
 801ae1e:	4620      	mov	r0, r4
 801ae20:	f7ff ffa8 	bl	801ad74 <L_shift>
 801ae24:	4544      	cmp	r4, r8
 801ae26:	d952      	bls.n	801aece <__hexnan+0x10e>
 801ae28:	2300      	movs	r3, #0
 801ae2a:	f1a4 0904 	sub.w	r9, r4, #4
 801ae2e:	f844 3c04 	str.w	r3, [r4, #-4]
 801ae32:	f8cd b008 	str.w	fp, [sp, #8]
 801ae36:	464c      	mov	r4, r9
 801ae38:	461d      	mov	r5, r3
 801ae3a:	9903      	ldr	r1, [sp, #12]
 801ae3c:	e7d7      	b.n	801adee <__hexnan+0x2e>
 801ae3e:	2a29      	cmp	r2, #41	@ 0x29
 801ae40:	d157      	bne.n	801aef2 <__hexnan+0x132>
 801ae42:	3102      	adds	r1, #2
 801ae44:	f8ca 1000 	str.w	r1, [sl]
 801ae48:	f1bb 0f00 	cmp.w	fp, #0
 801ae4c:	d051      	beq.n	801aef2 <__hexnan+0x132>
 801ae4e:	454c      	cmp	r4, r9
 801ae50:	d206      	bcs.n	801ae60 <__hexnan+0xa0>
 801ae52:	2d07      	cmp	r5, #7
 801ae54:	dc04      	bgt.n	801ae60 <__hexnan+0xa0>
 801ae56:	462a      	mov	r2, r5
 801ae58:	4649      	mov	r1, r9
 801ae5a:	4620      	mov	r0, r4
 801ae5c:	f7ff ff8a 	bl	801ad74 <L_shift>
 801ae60:	4544      	cmp	r4, r8
 801ae62:	d936      	bls.n	801aed2 <__hexnan+0x112>
 801ae64:	f1a8 0204 	sub.w	r2, r8, #4
 801ae68:	4623      	mov	r3, r4
 801ae6a:	f853 1b04 	ldr.w	r1, [r3], #4
 801ae6e:	f842 1f04 	str.w	r1, [r2, #4]!
 801ae72:	429f      	cmp	r7, r3
 801ae74:	d2f9      	bcs.n	801ae6a <__hexnan+0xaa>
 801ae76:	1b3b      	subs	r3, r7, r4
 801ae78:	f023 0303 	bic.w	r3, r3, #3
 801ae7c:	3304      	adds	r3, #4
 801ae7e:	3401      	adds	r4, #1
 801ae80:	3e03      	subs	r6, #3
 801ae82:	42b4      	cmp	r4, r6
 801ae84:	bf88      	it	hi
 801ae86:	2304      	movhi	r3, #4
 801ae88:	4443      	add	r3, r8
 801ae8a:	2200      	movs	r2, #0
 801ae8c:	f843 2b04 	str.w	r2, [r3], #4
 801ae90:	429f      	cmp	r7, r3
 801ae92:	d2fb      	bcs.n	801ae8c <__hexnan+0xcc>
 801ae94:	683b      	ldr	r3, [r7, #0]
 801ae96:	b91b      	cbnz	r3, 801aea0 <__hexnan+0xe0>
 801ae98:	4547      	cmp	r7, r8
 801ae9a:	d128      	bne.n	801aeee <__hexnan+0x12e>
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	603b      	str	r3, [r7, #0]
 801aea0:	2005      	movs	r0, #5
 801aea2:	b007      	add	sp, #28
 801aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aea8:	3501      	adds	r5, #1
 801aeaa:	2d08      	cmp	r5, #8
 801aeac:	f10b 0b01 	add.w	fp, fp, #1
 801aeb0:	dd06      	ble.n	801aec0 <__hexnan+0x100>
 801aeb2:	4544      	cmp	r4, r8
 801aeb4:	d9c1      	bls.n	801ae3a <__hexnan+0x7a>
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	f844 3c04 	str.w	r3, [r4, #-4]
 801aebc:	2501      	movs	r5, #1
 801aebe:	3c04      	subs	r4, #4
 801aec0:	6822      	ldr	r2, [r4, #0]
 801aec2:	f000 000f 	and.w	r0, r0, #15
 801aec6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801aeca:	6020      	str	r0, [r4, #0]
 801aecc:	e7b5      	b.n	801ae3a <__hexnan+0x7a>
 801aece:	2508      	movs	r5, #8
 801aed0:	e7b3      	b.n	801ae3a <__hexnan+0x7a>
 801aed2:	9b01      	ldr	r3, [sp, #4]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d0dd      	beq.n	801ae94 <__hexnan+0xd4>
 801aed8:	f1c3 0320 	rsb	r3, r3, #32
 801aedc:	f04f 32ff 	mov.w	r2, #4294967295
 801aee0:	40da      	lsrs	r2, r3
 801aee2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801aee6:	4013      	ands	r3, r2
 801aee8:	f846 3c04 	str.w	r3, [r6, #-4]
 801aeec:	e7d2      	b.n	801ae94 <__hexnan+0xd4>
 801aeee:	3f04      	subs	r7, #4
 801aef0:	e7d0      	b.n	801ae94 <__hexnan+0xd4>
 801aef2:	2004      	movs	r0, #4
 801aef4:	e7d5      	b.n	801aea2 <__hexnan+0xe2>

0801aef6 <__ascii_mbtowc>:
 801aef6:	b082      	sub	sp, #8
 801aef8:	b901      	cbnz	r1, 801aefc <__ascii_mbtowc+0x6>
 801aefa:	a901      	add	r1, sp, #4
 801aefc:	b142      	cbz	r2, 801af10 <__ascii_mbtowc+0x1a>
 801aefe:	b14b      	cbz	r3, 801af14 <__ascii_mbtowc+0x1e>
 801af00:	7813      	ldrb	r3, [r2, #0]
 801af02:	600b      	str	r3, [r1, #0]
 801af04:	7812      	ldrb	r2, [r2, #0]
 801af06:	1e10      	subs	r0, r2, #0
 801af08:	bf18      	it	ne
 801af0a:	2001      	movne	r0, #1
 801af0c:	b002      	add	sp, #8
 801af0e:	4770      	bx	lr
 801af10:	4610      	mov	r0, r2
 801af12:	e7fb      	b.n	801af0c <__ascii_mbtowc+0x16>
 801af14:	f06f 0001 	mvn.w	r0, #1
 801af18:	e7f8      	b.n	801af0c <__ascii_mbtowc+0x16>

0801af1a <_realloc_r>:
 801af1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af1e:	4680      	mov	r8, r0
 801af20:	4615      	mov	r5, r2
 801af22:	460c      	mov	r4, r1
 801af24:	b921      	cbnz	r1, 801af30 <_realloc_r+0x16>
 801af26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af2a:	4611      	mov	r1, r2
 801af2c:	f7fd bcfa 	b.w	8018924 <_malloc_r>
 801af30:	b92a      	cbnz	r2, 801af3e <_realloc_r+0x24>
 801af32:	f7fd fc83 	bl	801883c <_free_r>
 801af36:	2400      	movs	r4, #0
 801af38:	4620      	mov	r0, r4
 801af3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af3e:	f000 f840 	bl	801afc2 <_malloc_usable_size_r>
 801af42:	4285      	cmp	r5, r0
 801af44:	4606      	mov	r6, r0
 801af46:	d802      	bhi.n	801af4e <_realloc_r+0x34>
 801af48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801af4c:	d8f4      	bhi.n	801af38 <_realloc_r+0x1e>
 801af4e:	4629      	mov	r1, r5
 801af50:	4640      	mov	r0, r8
 801af52:	f7fd fce7 	bl	8018924 <_malloc_r>
 801af56:	4607      	mov	r7, r0
 801af58:	2800      	cmp	r0, #0
 801af5a:	d0ec      	beq.n	801af36 <_realloc_r+0x1c>
 801af5c:	42b5      	cmp	r5, r6
 801af5e:	462a      	mov	r2, r5
 801af60:	4621      	mov	r1, r4
 801af62:	bf28      	it	cs
 801af64:	4632      	movcs	r2, r6
 801af66:	f7fc fe74 	bl	8017c52 <memcpy>
 801af6a:	4621      	mov	r1, r4
 801af6c:	4640      	mov	r0, r8
 801af6e:	f7fd fc65 	bl	801883c <_free_r>
 801af72:	463c      	mov	r4, r7
 801af74:	e7e0      	b.n	801af38 <_realloc_r+0x1e>

0801af76 <__ascii_wctomb>:
 801af76:	4603      	mov	r3, r0
 801af78:	4608      	mov	r0, r1
 801af7a:	b141      	cbz	r1, 801af8e <__ascii_wctomb+0x18>
 801af7c:	2aff      	cmp	r2, #255	@ 0xff
 801af7e:	d904      	bls.n	801af8a <__ascii_wctomb+0x14>
 801af80:	228a      	movs	r2, #138	@ 0x8a
 801af82:	601a      	str	r2, [r3, #0]
 801af84:	f04f 30ff 	mov.w	r0, #4294967295
 801af88:	4770      	bx	lr
 801af8a:	700a      	strb	r2, [r1, #0]
 801af8c:	2001      	movs	r0, #1
 801af8e:	4770      	bx	lr

0801af90 <fiprintf>:
 801af90:	b40e      	push	{r1, r2, r3}
 801af92:	b503      	push	{r0, r1, lr}
 801af94:	4601      	mov	r1, r0
 801af96:	ab03      	add	r3, sp, #12
 801af98:	4805      	ldr	r0, [pc, #20]	@ (801afb0 <fiprintf+0x20>)
 801af9a:	f853 2b04 	ldr.w	r2, [r3], #4
 801af9e:	6800      	ldr	r0, [r0, #0]
 801afa0:	9301      	str	r3, [sp, #4]
 801afa2:	f7ff f9af 	bl	801a304 <_vfiprintf_r>
 801afa6:	b002      	add	sp, #8
 801afa8:	f85d eb04 	ldr.w	lr, [sp], #4
 801afac:	b003      	add	sp, #12
 801afae:	4770      	bx	lr
 801afb0:	24000198 	.word	0x24000198

0801afb4 <abort>:
 801afb4:	b508      	push	{r3, lr}
 801afb6:	2006      	movs	r0, #6
 801afb8:	f000 f834 	bl	801b024 <raise>
 801afbc:	2001      	movs	r0, #1
 801afbe:	f7eb feb3 	bl	8006d28 <_exit>

0801afc2 <_malloc_usable_size_r>:
 801afc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801afc6:	1f18      	subs	r0, r3, #4
 801afc8:	2b00      	cmp	r3, #0
 801afca:	bfbc      	itt	lt
 801afcc:	580b      	ldrlt	r3, [r1, r0]
 801afce:	18c0      	addlt	r0, r0, r3
 801afd0:	4770      	bx	lr

0801afd2 <_raise_r>:
 801afd2:	291f      	cmp	r1, #31
 801afd4:	b538      	push	{r3, r4, r5, lr}
 801afd6:	4605      	mov	r5, r0
 801afd8:	460c      	mov	r4, r1
 801afda:	d904      	bls.n	801afe6 <_raise_r+0x14>
 801afdc:	2316      	movs	r3, #22
 801afde:	6003      	str	r3, [r0, #0]
 801afe0:	f04f 30ff 	mov.w	r0, #4294967295
 801afe4:	bd38      	pop	{r3, r4, r5, pc}
 801afe6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801afe8:	b112      	cbz	r2, 801aff0 <_raise_r+0x1e>
 801afea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801afee:	b94b      	cbnz	r3, 801b004 <_raise_r+0x32>
 801aff0:	4628      	mov	r0, r5
 801aff2:	f000 f831 	bl	801b058 <_getpid_r>
 801aff6:	4622      	mov	r2, r4
 801aff8:	4601      	mov	r1, r0
 801affa:	4628      	mov	r0, r5
 801affc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b000:	f000 b818 	b.w	801b034 <_kill_r>
 801b004:	2b01      	cmp	r3, #1
 801b006:	d00a      	beq.n	801b01e <_raise_r+0x4c>
 801b008:	1c59      	adds	r1, r3, #1
 801b00a:	d103      	bne.n	801b014 <_raise_r+0x42>
 801b00c:	2316      	movs	r3, #22
 801b00e:	6003      	str	r3, [r0, #0]
 801b010:	2001      	movs	r0, #1
 801b012:	e7e7      	b.n	801afe4 <_raise_r+0x12>
 801b014:	2100      	movs	r1, #0
 801b016:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b01a:	4620      	mov	r0, r4
 801b01c:	4798      	blx	r3
 801b01e:	2000      	movs	r0, #0
 801b020:	e7e0      	b.n	801afe4 <_raise_r+0x12>
	...

0801b024 <raise>:
 801b024:	4b02      	ldr	r3, [pc, #8]	@ (801b030 <raise+0xc>)
 801b026:	4601      	mov	r1, r0
 801b028:	6818      	ldr	r0, [r3, #0]
 801b02a:	f7ff bfd2 	b.w	801afd2 <_raise_r>
 801b02e:	bf00      	nop
 801b030:	24000198 	.word	0x24000198

0801b034 <_kill_r>:
 801b034:	b538      	push	{r3, r4, r5, lr}
 801b036:	4d07      	ldr	r5, [pc, #28]	@ (801b054 <_kill_r+0x20>)
 801b038:	2300      	movs	r3, #0
 801b03a:	4604      	mov	r4, r0
 801b03c:	4608      	mov	r0, r1
 801b03e:	4611      	mov	r1, r2
 801b040:	602b      	str	r3, [r5, #0]
 801b042:	f7eb fe61 	bl	8006d08 <_kill>
 801b046:	1c43      	adds	r3, r0, #1
 801b048:	d102      	bne.n	801b050 <_kill_r+0x1c>
 801b04a:	682b      	ldr	r3, [r5, #0]
 801b04c:	b103      	cbz	r3, 801b050 <_kill_r+0x1c>
 801b04e:	6023      	str	r3, [r4, #0]
 801b050:	bd38      	pop	{r3, r4, r5, pc}
 801b052:	bf00      	nop
 801b054:	24001198 	.word	0x24001198

0801b058 <_getpid_r>:
 801b058:	f7eb be4e 	b.w	8006cf8 <_getpid>

0801b05c <_init>:
 801b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b05e:	bf00      	nop
 801b060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b062:	bc08      	pop	{r3}
 801b064:	469e      	mov	lr, r3
 801b066:	4770      	bx	lr

0801b068 <_fini>:
 801b068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b06a:	bf00      	nop
 801b06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b06e:	bc08      	pop	{r3}
 801b070:	469e      	mov	lr, r3
 801b072:	4770      	bx	lr
