
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd2c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08010000  08010000  00011000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010618  08010618  00011618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010620  08010620  00011620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010624  08010624  00011624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  08010628  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000059c  240001e0  08010808  000121e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400077c  08010808  0001277c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d303  00000000  00000000  0001220e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003cd0  00000000  00000000  0002f511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001748  00000000  00000000  000331e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000011ef  00000000  00000000  00034930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000065c6  00000000  00000000  00035b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022845  00000000  00000000  0003c0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165eb3  00000000  00000000  0005e92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c47dd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000754c  00000000  00000000  001c4820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001cbd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ffe4 	.word	0x0800ffe4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	0800ffe4 	.word	0x0800ffe4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  enableCSB();
 8000a9c:	f000 f8c4 	bl	8000c28 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MS5607_Init+0x60>)
 8000aa2:	221e      	movs	r2, #30
 8000aa4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4913      	ldr	r1, [pc, #76]	@ (8000af8 <MS5607_Init+0x60>)
 8000aac:	4813      	ldr	r0, [pc, #76]	@ (8000afc <MS5607_Init+0x64>)
 8000aae:	f007 f8c5 	bl	8007c3c <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000ab2:	bf00      	nop
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MS5607_Init+0x64>)
 8000ab6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d0f9      	beq.n	8000ab4 <MS5607_Init+0x1c>
  HAL_Delay(3);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f001 fbd1 	bl	8002268 <HAL_Delay>
  disableCSB();
 8000ac6:	f000 f8bb 	bl	8000c40 <disableCSB>

  MS5607PromRead(&promData);
 8000aca:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MS5607_Init+0x68>)
 8000acc:	f000 f81e 	bl	8000b0c <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MS5607_Init+0x68>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <MS5607_Init+0x48>
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MS5607_Init+0x68>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	2bff      	cmp	r3, #255	@ 0xff
 8000ade:	d104      	bne.n	8000aea <MS5607_Init+0x52>
	 printf("MS5607 Init fail!");
 8000ae0:	4808      	ldr	r0, [pc, #32]	@ (8000b04 <MS5607_Init+0x6c>)
 8000ae2:	f00b fe93 	bl	800c80c <iprintf>
    return MS5607_STATE_FAILED;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e003      	b.n	8000af2 <MS5607_Init+0x5a>
  } else {
	  printf("MS5607 Init success!");
 8000aea:	4807      	ldr	r0, [pc, #28]	@ (8000b08 <MS5607_Init+0x70>)
 8000aec:	f00b fe8e 	bl	800c80c <iprintf>
    return MS5607_STATE_READY;
 8000af0:	2300      	movs	r3, #0
  }
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	240001fc 	.word	0x240001fc
 8000afc:	24000498 	.word	0x24000498
 8000b00:	24000200 	.word	0x24000200
 8000b04:	08010000 	.word	0x08010000
 8000b08:	08010014 	.word	0x08010014

08000b0c <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint8_t address;
  uint16_t *structPointer;
  HAL_StatusTypeDef tx_status, rx_status;

  /* As the PROM is made of 8 16-bit addresses I used a pointer for accessing the data structure */
  structPointer = (uint16_t *) prom;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 8000b18:	2300      	movs	r3, #0
 8000b1a:	75fb      	strb	r3, [r7, #23]
 8000b1c:	e054      	b.n	8000bc8 <MS5607PromRead+0xbc>
    SPITransmitData = PROM_READ(address);
 8000b1e:	7dfb      	ldrb	r3, [r7, #23]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b38      	ldr	r3, [pc, #224]	@ (8000c10 <MS5607PromRead+0x104>)
 8000b2e:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8000b30:	f000 f87a 	bl	8000c28 <enableCSB>

    // Check SPI state before transmitting
    if (hspi4.State != HAL_SPI_STATE_READY) {
 8000b34:	4b37      	ldr	r3, [pc, #220]	@ (8000c14 <MS5607PromRead+0x108>)
 8000b36:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d002      	beq.n	8000b46 <MS5607PromRead+0x3a>
      printf("SPI not ready for transmission\n");
 8000b40:	4835      	ldr	r0, [pc, #212]	@ (8000c18 <MS5607PromRead+0x10c>)
 8000b42:	f00b fecb 	bl	800c8dc <puts>
    }

    tx_status = HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 1000);
 8000b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4930      	ldr	r1, [pc, #192]	@ (8000c10 <MS5607PromRead+0x104>)
 8000b4e:	4831      	ldr	r0, [pc, #196]	@ (8000c14 <MS5607PromRead+0x108>)
 8000b50:	f007 f874 	bl	8007c3c <HAL_SPI_Transmit>
 8000b54:	4603      	mov	r3, r0
 8000b56:	72bb      	strb	r3, [r7, #10]
    if (tx_status != HAL_OK) {
 8000b58:	7abb      	ldrb	r3, [r7, #10]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d004      	beq.n	8000b68 <MS5607PromRead+0x5c>
      printf("SPI Transmit Error: %d\n", tx_status);
 8000b5e:	7abb      	ldrb	r3, [r7, #10]
 8000b60:	4619      	mov	r1, r3
 8000b62:	482e      	ldr	r0, [pc, #184]	@ (8000c1c <MS5607PromRead+0x110>)
 8000b64:	f00b fe52 	bl	800c80c <iprintf>
    }

    // Wait for transmission complete
    while (hspi4.State == HAL_SPI_STATE_BUSY);
 8000b68:	bf00      	nop
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c14 <MS5607PromRead+0x108>)
 8000b6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d0f9      	beq.n	8000b6a <MS5607PromRead+0x5e>

    // Check SPI state before receiving
    if (hspi4.State != HAL_SPI_STATE_READY) {
 8000b76:	4b27      	ldr	r3, [pc, #156]	@ (8000c14 <MS5607PromRead+0x108>)
 8000b78:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d002      	beq.n	8000b88 <MS5607PromRead+0x7c>
      printf("SPI not ready for reception\n");
 8000b82:	4827      	ldr	r0, [pc, #156]	@ (8000c20 <MS5607PromRead+0x114>)
 8000b84:	f00b feaa 	bl	800c8dc <puts>
    }

    /* Receive two bytes at once and store them directly in the structure */
    rx_status = HAL_SPI_Receive(&hspi4, (uint8_t *)structPointer, 2, 1000); // Changed 4 to 2 for receiving 2 bytes
 8000b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	6939      	ldr	r1, [r7, #16]
 8000b90:	4820      	ldr	r0, [pc, #128]	@ (8000c14 <MS5607PromRead+0x108>)
 8000b92:	f007 fa41 	bl	8008018 <HAL_SPI_Receive>
 8000b96:	4603      	mov	r3, r0
 8000b98:	727b      	strb	r3, [r7, #9]
    if (rx_status != HAL_OK) {
 8000b9a:	7a7b      	ldrb	r3, [r7, #9]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d004      	beq.n	8000baa <MS5607PromRead+0x9e>
      printf("SPI Receive Error: %d\n", rx_status);
 8000ba0:	7a7b      	ldrb	r3, [r7, #9]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481f      	ldr	r0, [pc, #124]	@ (8000c24 <MS5607PromRead+0x118>)
 8000ba6:	f00b fe31 	bl	800c80c <iprintf>
    }

    // Wait for reception complete
    while (hspi4.State == HAL_SPI_STATE_BUSY);
 8000baa:	bf00      	nop
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <MS5607PromRead+0x108>)
 8000bae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d0f9      	beq.n	8000bac <MS5607PromRead+0xa0>

    disableCSB();
 8000bb8:	f000 f842 	bl	8000c40 <disableCSB>
    structPointer++;
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	75fb      	strb	r3, [r7, #23]
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	2b07      	cmp	r3, #7
 8000bcc:	d9a7      	bls.n	8000b1e <MS5607PromRead+0x12>
  }

  /* Byte swap on 16-bit integers */
  structPointer = (uint16_t *) prom;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	75fb      	strb	r3, [r7, #23]
 8000bd6:	e012      	b.n	8000bfe <MS5607PromRead+0xf2>
    uint8_t *toSwap = (uint8_t *) structPointer;
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	785a      	ldrb	r2, [r3, #1]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3301      	adds	r3, #1
 8000bee:	7afa      	ldrb	r2, [r7, #11]
 8000bf0:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	75fb      	strb	r3, [r7, #23]
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	2b07      	cmp	r3, #7
 8000c02:	d9e9      	bls.n	8000bd8 <MS5607PromRead+0xcc>
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	240001fc 	.word	0x240001fc
 8000c14:	24000498 	.word	0x24000498
 8000c18:	0801002c 	.word	0x0801002c
 8000c1c:	0801004c 	.word	0x0801004c
 8000c20:	08010064 	.word	0x08010064
 8000c24:	08010080 	.word	0x08010080

08000c28 <enableCSB>:
int32_t MS5607GetPressurePa(void){
  return readings.pressure;
}

/* Sets the CS pin */
void enableCSB(void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2110      	movs	r1, #16
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <enableCSB+0x14>)
 8000c32:	f001 fe59 	bl	80028e8 <HAL_GPIO_WritePin>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	58021000 	.word	0x58021000

08000c40 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2110      	movs	r1, #16
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <disableCSB+0x14>)
 8000c4a:	f001 fe4d 	bl	80028e8 <HAL_GPIO_WritePin>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	58021000 	.word	0x58021000

08000c58 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c64:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d013      	beq.n	8000c98 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c70:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c74:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c78:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00b      	beq.n	8000c98 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c80:	e000      	b.n	8000c84 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c82:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c84:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d0f9      	beq.n	8000c82 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c8e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c98:	687b      	ldr	r3, [r7, #4]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
	int i=0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e009      	b.n	8000cd0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ffc7 	bl	8000c58 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf1      	blt.n	8000cbc <_write+0x16>
	}
	return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ce6:	f000 fc2b 	bl	8001540 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cea:	f001 fa2b 	bl	8002144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cee:	f000 f81b 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf2:	f000 fb13 	bl	800131c <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000cf6:	f000 f945 	bl	8000f84 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8000cfa:	f000 f883 	bl	8000e04 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000cfe:	f000 f8c1 	bl	8000e84 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000d02:	f000 f8ff 	bl	8000f04 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000d06:	f000 f95b 	bl	8000fc0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d0a:	f000 f9af 	bl	800106c <MX_SPI2_Init>
  MX_UART8_Init();
 8000d0e:	f000 fa59 	bl	80011c4 <MX_UART8_Init>
  MX_USART1_Init();
 8000d12:	f000 faa5 	bl	8001260 <MX_USART1_Init>
  MX_SPI4_Init();
 8000d16:	f000 f9ff 	bl	8001118 <MX_SPI4_Init>
  MX_FATFS_Init();
 8000d1a:	f00a fc79 	bl	800b610 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
  SensorManager_Init();
 8000d1e:	f001 f993 	bl	8002048 <SensorManager_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d22:	bf00      	nop
 8000d24:	e7fd      	b.n	8000d22 <main+0x40>
	...

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09c      	sub	sp, #112	@ 0x70
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d32:	224c      	movs	r2, #76	@ 0x4c
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f00b fed0 	bl	800cadc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2220      	movs	r2, #32
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00b feca 	bl	800cadc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f001 ff1b 	bl	8002b84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <SystemClock_Config+0xd8>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a2a      	ldr	r2, [pc, #168]	@ (8000e00 <SystemClock_Config+0xd8>)
 8000d58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d5c:	6193      	str	r3, [r2, #24]
 8000d5e:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <SystemClock_Config+0xd8>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d6a:	bf00      	nop
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <SystemClock_Config+0xd8>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d78:	d1f8      	bne.n	8000d6c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000d90:	231f      	movs	r3, #31
 8000d92:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000da0:	230c      	movs	r3, #12
 8000da2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000da8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 ff20 	bl	8002bf8 <HAL_RCC_OscConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dbe:	f000 fbeb 	bl	8001598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc2:	233f      	movs	r3, #63	@ 0x3f
 8000dc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dd2:	2340      	movs	r3, #64	@ 0x40
 8000dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dd6:	2340      	movs	r3, #64	@ 0x40
 8000dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dde:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000de0:	2340      	movs	r3, #64	@ 0x40
 8000de2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2103      	movs	r1, #3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fadf 	bl	80033ac <HAL_RCC_ClockConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000df4:	f000 fbd0 	bl	8001598 <Error_Handler>
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3770      	adds	r7, #112	@ 0x70
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	58024800 	.word	0x58024800

08000e04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e7c <MX_I2C1_Init+0x78>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e10:	4a1b      	ldr	r2, [pc, #108]	@ (8000e80 <MX_I2C1_Init+0x7c>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e3e:	480e      	ldr	r0, [pc, #56]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e40:	f001 fd6c 	bl	800291c <HAL_I2C_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e4a:	f000 fba5 	bl	8001598 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e52:	f001 fdff 	bl	8002a54 <HAL_I2CEx_ConfigAnalogFilter>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e5c:	f000 fb9c 	bl	8001598 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e64:	f001 fe41 	bl	8002aea <HAL_I2CEx_ConfigDigitalFilter>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e6e:	f000 fb93 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	24000210 	.word	0x24000210
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	20a0a3f6 	.word	0x20a0a3f6

08000e84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <MX_I2C2_Init+0x78>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000e90:	4a1b      	ldr	r2, [pc, #108]	@ (8000f00 <MX_I2C2_Init+0x7c>)
 8000e92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ebe:	480e      	ldr	r0, [pc, #56]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000ec0:	f001 fd2c 	bl	800291c <HAL_I2C_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eca:	f000 fb65 	bl	8001598 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4809      	ldr	r0, [pc, #36]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000ed2:	f001 fdbf 	bl	8002a54 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000edc:	f000 fb5c 	bl	8001598 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_I2C2_Init+0x74>)
 8000ee4:	f001 fe01 	bl	8002aea <HAL_I2CEx_ConfigDigitalFilter>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000eee:	f000 fb53 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	24000264 	.word	0x24000264
 8000efc:	40005800 	.word	0x40005800
 8000f00:	20a0a3f6 	.word	0x20a0a3f6

08000f04 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f7c <MX_I2C4_Init+0x78>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f10:	4a1b      	ldr	r2, [pc, #108]	@ (8000f80 <MX_I2C4_Init+0x7c>)
 8000f12:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f26:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f32:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f3e:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f40:	f001 fcec 	bl	800291c <HAL_I2C_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f4a:	f000 fb25 	bl	8001598 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000f4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f52:	4809      	ldr	r0, [pc, #36]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f54:	f001 fd7e 	bl	8002a54 <HAL_I2CEx_ConfigAnalogFilter>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8000f5e:	f000 fb1b 	bl	8001598 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4804      	ldr	r0, [pc, #16]	@ (8000f78 <MX_I2C4_Init+0x74>)
 8000f66:	f001 fdc0 	bl	8002aea <HAL_I2CEx_ConfigDigitalFilter>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000f70:	f000 fb12 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	240002b8 	.word	0x240002b8
 8000f7c:	58001c00 	.word	0x58001c00
 8000f80:	60405858 	.word	0x60405858

08000f84 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <MX_SDMMC1_SD_Init+0x34>)
 8000f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000fbc <MX_SDMMC1_SD_Init+0x38>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <MX_SDMMC1_SD_Init+0x34>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <MX_SDMMC1_SD_Init+0x34>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <MX_SDMMC1_SD_Init+0x34>)
 8000f9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fa0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <MX_SDMMC1_SD_Init+0x34>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <MX_SDMMC1_SD_Init+0x34>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	2400030c 	.word	0x2400030c
 8000fbc:	52007000 	.word	0x52007000

08000fc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8000fc6:	4a28      	ldr	r2, [pc, #160]	@ (8001068 <MX_SPI1_Init+0xa8>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fca:	4b26      	ldr	r3, [pc, #152]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8000fcc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd8:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8000fda:	2207      	movs	r2, #7
 8000fdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fde:	4b21      	ldr	r3, [pc, #132]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8000fec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ff0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800100a:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <MX_SPI1_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8001012:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001016:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <MX_SPI1_Init+0xa4>)
 800101a:	2200      	movs	r2, #0
 800101c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8001020:	2200      	movs	r2, #0
 8001022:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8001026:	2200      	movs	r2, #0
 8001028:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_SPI1_Init+0xa4>)
 800102c:	2200      	movs	r2, #0
 800102e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8001032:	2200      	movs	r2, #0
 8001034:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8001038:	2200      	movs	r2, #0
 800103a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_SPI1_Init+0xa4>)
 800103e:	2200      	movs	r2, #0
 8001040:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8001044:	2200      	movs	r2, #0
 8001046:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_SPI1_Init+0xa4>)
 800104a:	2200      	movs	r2, #0
 800104c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_SPI1_Init+0xa4>)
 8001050:	f006 fcd0 	bl	80079f4 <HAL_SPI_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800105a:	f000 fa9d 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	24000388 	.word	0x24000388
 8001068:	40013000 	.word	0x40013000

0800106c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001070:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <MX_SPI2_Init+0xa4>)
 8001072:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <MX_SPI2_Init+0xa8>)
 8001074:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001076:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <MX_SPI2_Init+0xa4>)
 8001078:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800107c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800107e:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <MX_SPI2_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001084:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <MX_SPI2_Init+0xa4>)
 8001086:	2207      	movs	r2, #7
 8001088:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <MX_SPI2_Init+0xa4>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001090:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <MX_SPI2_Init+0xa4>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <MX_SPI2_Init+0xa4>)
 8001098:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800109c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010bc:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_SPI2_Init+0xa4>)
 80010fc:	f006 fc7a 	bl	80079f4 <HAL_SPI_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001106:	f000 fa47 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	24000410 	.word	0x24000410
 8001114:	40003800 	.word	0x40003800

08001118 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800111c:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <MX_SPI4_Init+0xa4>)
 800111e:	4a28      	ldr	r2, [pc, #160]	@ (80011c0 <MX_SPI4_Init+0xa8>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001124:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001128:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b24      	ldr	r3, [pc, #144]	@ (80011bc <MX_SPI4_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001132:	2207      	movs	r2, #7
 8001134:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001136:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113c:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <MX_SPI4_Init+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001142:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001144:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001148:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800114a:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <MX_SPI4_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001156:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115c:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <MX_SPI4_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001162:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_SPI4_Init+0xa4>)
 800116a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800116e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001172:	2200      	movs	r2, #0
 8001174:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001178:	2200      	movs	r2, #0
 800117a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_SPI4_Init+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001184:	2200      	movs	r2, #0
 8001186:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <MX_SPI4_Init+0xa4>)
 800118a:	2200      	movs	r2, #0
 800118c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001190:	2200      	movs	r2, #0
 8001192:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_SPI4_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <MX_SPI4_Init+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_SPI4_Init+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_SPI4_Init+0xa4>)
 80011a8:	f006 fc24 	bl	80079f4 <HAL_SPI_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80011b2:	f000 f9f1 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	24000498 	.word	0x24000498
 80011c0:	40013400 	.word	0x40013400

080011c4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80011c8:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <MX_UART8_Init+0x94>)
 80011ca:	4a24      	ldr	r2, [pc, #144]	@ (800125c <MX_UART8_Init+0x98>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80011ce:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <MX_UART8_Init+0x94>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <MX_UART8_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <MX_UART8_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <MX_UART8_Init+0x94>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <MX_UART8_Init+0x94>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <MX_UART8_Init+0x94>)
 80011f0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80011f4:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <MX_UART8_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <MX_UART8_Init+0x94>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <MX_UART8_Init+0x94>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <MX_UART8_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800120e:	4812      	ldr	r0, [pc, #72]	@ (8001258 <MX_UART8_Init+0x94>)
 8001210:	f007 fa5d 	bl	80086ce <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 800121a:	f000 f9bd 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800121e:	2100      	movs	r1, #0
 8001220:	480d      	ldr	r0, [pc, #52]	@ (8001258 <MX_UART8_Init+0x94>)
 8001222:	f008 fb6a 	bl	80098fa <HAL_UARTEx_SetTxFifoThreshold>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 800122c:	f000 f9b4 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	4809      	ldr	r0, [pc, #36]	@ (8001258 <MX_UART8_Init+0x94>)
 8001234:	f008 fb9f 	bl	8009976 <HAL_UARTEx_SetRxFifoThreshold>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 800123e:	f000 f9ab 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <MX_UART8_Init+0x94>)
 8001244:	f008 fb20 	bl	8009888 <HAL_UARTEx_DisableFifoMode>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 800124e:	f000 f9a3 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	24000520 	.word	0x24000520
 800125c:	40007c00 	.word	0x40007c00

08001260 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001264:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <MX_USART1_Init+0xb4>)
 8001266:	4a2c      	ldr	r2, [pc, #176]	@ (8001318 <MX_USART1_Init+0xb8>)
 8001268:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <MX_USART1_Init+0xb4>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001272:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <MX_USART1_Init+0xb4>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001278:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <MX_USART1_Init+0xb4>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800127e:	4b25      	ldr	r3, [pc, #148]	@ (8001314 <MX_USART1_Init+0xb4>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001284:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <MX_USART1_Init+0xb4>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800128a:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <MX_USART1_Init+0xb4>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001290:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <MX_USART1_Init+0xb4>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001296:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <MX_USART1_Init+0xb4>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 800129c:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <MX_USART1_Init+0xb4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <MX_USART1_Init+0xb4>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80012a8:	481a      	ldr	r0, [pc, #104]	@ (8001314 <MX_USART1_Init+0xb4>)
 80012aa:	f008 fbf1 	bl	8009a90 <HAL_USART_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80012b4:	f000 f970 	bl	8001598 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	4816      	ldr	r0, [pc, #88]	@ (8001314 <MX_USART1_Init+0xb4>)
 80012bc:	f009 fb18 	bl	800a8f0 <HAL_USARTEx_SetTxFifoThreshold>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 80012c6:	f000 f967 	bl	8001598 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4811      	ldr	r0, [pc, #68]	@ (8001314 <MX_USART1_Init+0xb4>)
 80012ce:	f009 fb4d 	bl	800a96c <HAL_USARTEx_SetRxFifoThreshold>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 80012d8:	f000 f95e 	bl	8001598 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 80012dc:	2100      	movs	r1, #0
 80012de:	480d      	ldr	r0, [pc, #52]	@ (8001314 <MX_USART1_Init+0xb4>)
 80012e0:	f009 fa90 	bl	800a804 <HAL_USARTEx_ConfigNSS>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 80012ea:	f000 f955 	bl	8001598 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 80012ee:	4809      	ldr	r0, [pc, #36]	@ (8001314 <MX_USART1_Init+0xb4>)
 80012f0:	f009 fac5 	bl	800a87e <HAL_USARTEx_DisableFifoMode>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 80012fa:	f000 f94d 	bl	8001598 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_USART1_Init+0xb4>)
 8001300:	f009 fa2b 	bl	800a75a <HAL_USARTEx_EnableSlaveMode>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART1_Init+0xae>
  {
    Error_Handler();
 800130a:	f000 f945 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	240005b4 	.word	0x240005b4
 8001318:	40011000 	.word	0x40011000

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	@ 0x30
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	4b7d      	ldr	r3, [pc, #500]	@ (8001528 <MX_GPIO_Init+0x20c>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4a7b      	ldr	r2, [pc, #492]	@ (8001528 <MX_GPIO_Init+0x20c>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4b79      	ldr	r3, [pc, #484]	@ (8001528 <MX_GPIO_Init+0x20c>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001350:	4b75      	ldr	r3, [pc, #468]	@ (8001528 <MX_GPIO_Init+0x20c>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	4a74      	ldr	r2, [pc, #464]	@ (8001528 <MX_GPIO_Init+0x20c>)
 8001358:	f043 0310 	orr.w	r3, r3, #16
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001360:	4b71      	ldr	r3, [pc, #452]	@ (8001528 <MX_GPIO_Init+0x20c>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b6e      	ldr	r3, [pc, #440]	@ (8001528 <MX_GPIO_Init+0x20c>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001374:	4a6c      	ldr	r2, [pc, #432]	@ (8001528 <MX_GPIO_Init+0x20c>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137e:	4b6a      	ldr	r3, [pc, #424]	@ (8001528 <MX_GPIO_Init+0x20c>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b66      	ldr	r3, [pc, #408]	@ (8001528 <MX_GPIO_Init+0x20c>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001392:	4a65      	ldr	r2, [pc, #404]	@ (8001528 <MX_GPIO_Init+0x20c>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139c:	4b62      	ldr	r3, [pc, #392]	@ (8001528 <MX_GPIO_Init+0x20c>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001528 <MX_GPIO_Init+0x20c>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001528 <MX_GPIO_Init+0x20c>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001528 <MX_GPIO_Init+0x20c>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c8:	4b57      	ldr	r3, [pc, #348]	@ (8001528 <MX_GPIO_Init+0x20c>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	4a56      	ldr	r2, [pc, #344]	@ (8001528 <MX_GPIO_Init+0x20c>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d8:	4b53      	ldr	r3, [pc, #332]	@ (8001528 <MX_GPIO_Init+0x20c>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2110      	movs	r1, #16
 80013ea:	4850      	ldr	r0, [pc, #320]	@ (800152c <MX_GPIO_Init+0x210>)
 80013ec:	f001 fa7c 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2110      	movs	r1, #16
 80013f4:	484e      	ldr	r0, [pc, #312]	@ (8001530 <MX_GPIO_Init+0x214>)
 80013f6:	f001 fa77 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001400:	484c      	ldr	r0, [pc, #304]	@ (8001534 <MX_GPIO_Init+0x218>)
 8001402:	f001 fa71 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001406:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4847      	ldr	r0, [pc, #284]	@ (8001538 <MX_GPIO_Init+0x21c>)
 800141c:	f001 f8a4 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001420:	2310      	movs	r3, #16
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001424:	2311      	movs	r3, #17
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	483d      	ldr	r0, [pc, #244]	@ (800152c <MX_GPIO_Init+0x210>)
 8001438:	f001 f896 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800143c:	2302      	movs	r3, #2
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001440:	2303      	movs	r3, #3
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	483b      	ldr	r0, [pc, #236]	@ (800153c <MX_GPIO_Init+0x220>)
 8001450:	f001 f88a 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001454:	2308      	movs	r3, #8
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001458:	2303      	movs	r3, #3
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4834      	ldr	r0, [pc, #208]	@ (8001538 <MX_GPIO_Init+0x21c>)
 8001468:	f001 f87e 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 800146c:	2310      	movs	r3, #16
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	482b      	ldr	r0, [pc, #172]	@ (8001530 <MX_GPIO_Init+0x214>)
 8001484:	f001 f870 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001488:	2304      	movs	r3, #4
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148c:	2303      	movs	r3, #3
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4826      	ldr	r0, [pc, #152]	@ (8001534 <MX_GPIO_Init+0x218>)
 800149c:	f001 f864 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 80014a0:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	481d      	ldr	r0, [pc, #116]	@ (800152c <MX_GPIO_Init+0x210>)
 80014b6:	f001 f857 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 80014ba:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80014be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4619      	mov	r1, r3
 80014d2:	4818      	ldr	r0, [pc, #96]	@ (8001534 <MX_GPIO_Init+0x218>)
 80014d4:	f001 f848 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	480f      	ldr	r0, [pc, #60]	@ (800152c <MX_GPIO_Init+0x210>)
 80014ee:	f001 f83b 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f2:	2308      	movs	r3, #8
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	480a      	ldr	r0, [pc, #40]	@ (8001530 <MX_GPIO_Init+0x214>)
 8001506:	f001 f82f 	bl	8002568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001510:	4808      	ldr	r0, [pc, #32]	@ (8001534 <MX_GPIO_Init+0x218>)
 8001512:	f001 f9e9 	bl	80028e8 <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2110      	movs	r1, #16
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_GPIO_Init+0x214>)
 800151c:	f001 f9e4 	bl	80028e8 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	@ 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	58024400 	.word	0x58024400
 800152c:	58021000 	.word	0x58021000
 8001530:	58020000 	.word	0x58020000
 8001534:	58020400 	.word	0x58020400
 8001538:	58020800 	.word	0x58020800
 800153c:	58020c00 	.word	0x58020c00

08001540 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001552:	f000 ff91 	bl	8002478 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001556:	2301      	movs	r3, #1
 8001558:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800155a:	2300      	movs	r3, #0
 800155c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001562:	231f      	movs	r3, #31
 8001564:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001566:	2387      	movs	r3, #135	@ 0x87
 8001568:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800156a:	2300      	movs	r3, #0
 800156c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800156e:	2300      	movs	r3, #0
 8001570:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001572:	2301      	movs	r3, #1
 8001574:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001576:	2301      	movs	r3, #1
 8001578:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001582:	463b      	mov	r3, r7
 8001584:	4618      	mov	r0, r3
 8001586:	f000 ffaf 	bl	80024e8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800158a:	2004      	movs	r0, #4
 800158c:	f000 ff8c 	bl	80024a8 <HAL_MPU_Enable>

}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <Error_Handler+0x8>

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_MspInit+0x30>)
 80015ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015b0:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <HAL_MspInit+0x30>)
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_MspInit+0x30>)
 80015bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	58024400 	.word	0x58024400

080015d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0bc      	sub	sp, #240	@ 0xf0
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	22b8      	movs	r2, #184	@ 0xb8
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f00b fa6f 	bl	800cadc <memset>
  if(hi2c->Instance==I2C1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a74      	ldr	r2, [pc, #464]	@ (80017d4 <HAL_I2C_MspInit+0x1fc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d147      	bne.n	8001698 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001608:	f04f 0208 	mov.w	r2, #8
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161a:	f107 0320 	add.w	r3, r7, #32
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fa50 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800162a:	f7ff ffb5 	bl	8001598 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b6a      	ldr	r3, [pc, #424]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001634:	4a68      	ldr	r2, [pc, #416]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800163e:	4b66      	ldr	r3, [pc, #408]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800164c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001650:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001654:	2312      	movs	r3, #18
 8001656:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001666:	2304      	movs	r3, #4
 8001668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001670:	4619      	mov	r1, r3
 8001672:	485a      	ldr	r0, [pc, #360]	@ (80017dc <HAL_I2C_MspInit+0x204>)
 8001674:	f000 ff78 	bl	8002568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001678:	4b57      	ldr	r3, [pc, #348]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 800167a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800167e:	4a56      	ldr	r2, [pc, #344]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001684:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001688:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 800168a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800168e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001696:	e098      	b.n	80017ca <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a50      	ldr	r2, [pc, #320]	@ (80017e0 <HAL_I2C_MspInit+0x208>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d147      	bne.n	8001732 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016a2:	f04f 0208 	mov.w	r2, #8
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fa03 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80016c4:	f7ff ff68 	bl	8001598 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	4b43      	ldr	r3, [pc, #268]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	4a42      	ldr	r2, [pc, #264]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d8:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ee:	2312      	movs	r3, #18
 80016f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001700:	2304      	movs	r3, #4
 8001702:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800170a:	4619      	mov	r1, r3
 800170c:	4833      	ldr	r0, [pc, #204]	@ (80017dc <HAL_I2C_MspInit+0x204>)
 800170e:	f000 ff2b 	bl	8002568 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001712:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 8001714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001718:	4a2f      	ldr	r2, [pc, #188]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 800171a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800171e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001722:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 8001724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
}
 8001730:	e04b      	b.n	80017ca <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a2b      	ldr	r2, [pc, #172]	@ (80017e4 <HAL_I2C_MspInit+0x20c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d146      	bne.n	80017ca <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800173c:	f04f 0210 	mov.w	r2, #16
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	4618      	mov	r0, r3
 8001754:	f002 f9b6 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 800175e:	f7ff ff1b 	bl	8001598 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001762:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001768:	4a1b      	ldr	r2, [pc, #108]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 800176a:	f043 0308 	orr.w	r3, r3, #8
 800176e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 8001774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001780:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001784:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001788:	2312      	movs	r3, #18
 800178a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800179a:	2304      	movs	r3, #4
 800179c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017a4:	4619      	mov	r1, r3
 80017a6:	4810      	ldr	r0, [pc, #64]	@ (80017e8 <HAL_I2C_MspInit+0x210>)
 80017a8:	f000 fede 	bl	8002568 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80017ac:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 80017ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017b2:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_I2C_MspInit+0x200>)
 80017be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
}
 80017ca:	bf00      	nop
 80017cc:	37f0      	adds	r7, #240	@ 0xf0
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40005400 	.word	0x40005400
 80017d8:	58024400 	.word	0x58024400
 80017dc:	58020400 	.word	0x58020400
 80017e0:	40005800 	.word	0x40005800
 80017e4:	58001c00 	.word	0x58001c00
 80017e8:	58020c00 	.word	0x58020c00

080017ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0ba      	sub	sp, #232	@ 0xe8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	22b8      	movs	r2, #184	@ 0xb8
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f00b f965 	bl	800cadc <memset>
  if(hsd->Instance==SDMMC1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a38      	ldr	r2, [pc, #224]	@ (80018f8 <HAL_SD_MspInit+0x10c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d169      	bne.n	80018f0 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800181c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001828:	2300      	movs	r3, #0
 800182a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182c:	f107 0318 	add.w	r3, r7, #24
 8001830:	4618      	mov	r0, r3
 8001832:	f002 f947 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800183c:	f7ff feac 	bl	8001598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001840:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <HAL_SD_MspInit+0x110>)
 8001842:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001846:	4a2d      	ldr	r2, [pc, #180]	@ (80018fc <HAL_SD_MspInit+0x110>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800184c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001850:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <HAL_SD_MspInit+0x110>)
 8001852:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800185e:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <HAL_SD_MspInit+0x110>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001864:	4a25      	ldr	r2, [pc, #148]	@ (80018fc <HAL_SD_MspInit+0x110>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800186e:	4b23      	ldr	r3, [pc, #140]	@ (80018fc <HAL_SD_MspInit+0x110>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187c:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <HAL_SD_MspInit+0x110>)
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001882:	4a1e      	ldr	r2, [pc, #120]	@ (80018fc <HAL_SD_MspInit+0x110>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188c:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <HAL_SD_MspInit+0x110>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800189a:	2304      	movs	r3, #4
 800189c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018b2:	230c      	movs	r3, #12
 80018b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018bc:	4619      	mov	r1, r3
 80018be:	4810      	ldr	r0, [pc, #64]	@ (8001900 <HAL_SD_MspInit+0x114>)
 80018c0:	f000 fe52 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 80018c4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80018c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018de:	230c      	movs	r3, #12
 80018e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4806      	ldr	r0, [pc, #24]	@ (8001904 <HAL_SD_MspInit+0x118>)
 80018ec:	f000 fe3c 	bl	8002568 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80018f0:	bf00      	nop
 80018f2:	37e8      	adds	r7, #232	@ 0xe8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	52007000 	.word	0x52007000
 80018fc:	58024400 	.word	0x58024400
 8001900:	58020c00 	.word	0x58020c00
 8001904:	58020800 	.word	0x58020800

08001908 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0be      	sub	sp, #248	@ 0xf8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001920:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001924:	22b8      	movs	r2, #184	@ 0xb8
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f00b f8d7 	bl	800cadc <memset>
  if(hspi->Instance==SPI1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a97      	ldr	r2, [pc, #604]	@ (8001b90 <HAL_SPI_MspInit+0x288>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d16a      	bne.n	8001a0e <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001938:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800194e:	4618      	mov	r0, r3
 8001950:	f002 f8b8 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800195a:	f7ff fe1d 	bl	8001598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800195e:	4b8d      	ldr	r3, [pc, #564]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001964:	4a8b      	ldr	r2, [pc, #556]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001966:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800196a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800196e:	4b89      	ldr	r3, [pc, #548]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	4b85      	ldr	r3, [pc, #532]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001982:	4a84      	ldr	r2, [pc, #528]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198c:	4b81      	ldr	r3, [pc, #516]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a0:	4a7c      	ldr	r2, [pc, #496]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019b8:	2310      	movs	r3, #16
 80019ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d0:	2305      	movs	r3, #5
 80019d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019da:	4619      	mov	r1, r3
 80019dc:	486e      	ldr	r0, [pc, #440]	@ (8001b98 <HAL_SPI_MspInit+0x290>)
 80019de:	f000 fdc3 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019e2:	23a0      	movs	r3, #160	@ 0xa0
 80019e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fa:	2305      	movs	r3, #5
 80019fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4865      	ldr	r0, [pc, #404]	@ (8001b9c <HAL_SPI_MspInit+0x294>)
 8001a08:	f000 fdae 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001a0c:	e0bb      	b.n	8001b86 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a63      	ldr	r2, [pc, #396]	@ (8001ba0 <HAL_SPI_MspInit+0x298>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d16b      	bne.n	8001af0 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 f848 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8001a3a:	f7ff fdad 	bl	8001598 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a3e:	4b55      	ldr	r3, [pc, #340]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a44:	4a53      	ldr	r2, [pc, #332]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a4e:	4b51      	ldr	r3, [pc, #324]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a62:	4a4c      	ldr	r2, [pc, #304]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a6c:	4b49      	ldr	r3, [pc, #292]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	4b46      	ldr	r3, [pc, #280]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a80:	4a44      	ldr	r2, [pc, #272]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a8a:	4b42      	ldr	r3, [pc, #264]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ab2:	2305      	movs	r3, #5
 8001ab4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4837      	ldr	r0, [pc, #220]	@ (8001b9c <HAL_SPI_MspInit+0x294>)
 8001ac0:	f000 fd52 	bl	8002568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8001ac4:	2306      	movs	r3, #6
 8001ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001adc:	2305      	movs	r3, #5
 8001ade:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	482e      	ldr	r0, [pc, #184]	@ (8001ba4 <HAL_SPI_MspInit+0x29c>)
 8001aea:	f000 fd3d 	bl	8002568 <HAL_GPIO_Init>
}
 8001aee:	e04a      	b.n	8001b86 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2c      	ldr	r2, [pc, #176]	@ (8001ba8 <HAL_SPI_MspInit+0x2a0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d145      	bne.n	8001b86 <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001afa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 ffd7 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 8001b1c:	f7ff fd3c 	bl	8001598 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001b20:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b26:	4a1b      	ldr	r2, [pc, #108]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001b28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b30:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b44:	4a13      	ldr	r2, [pc, #76]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001b46:	f043 0310 	orr.w	r3, r3, #16
 8001b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_SPI_MspInit+0x28c>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001b5c:	2364      	movs	r3, #100	@ 0x64
 8001b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b74:	2305      	movs	r3, #5
 8001b76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480a      	ldr	r0, [pc, #40]	@ (8001bac <HAL_SPI_MspInit+0x2a4>)
 8001b82:	f000 fcf1 	bl	8002568 <HAL_GPIO_Init>
}
 8001b86:	bf00      	nop
 8001b88:	37f8      	adds	r7, #248	@ 0xf8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40013000 	.word	0x40013000
 8001b94:	58024400 	.word	0x58024400
 8001b98:	58020400 	.word	0x58020400
 8001b9c:	58020000 	.word	0x58020000
 8001ba0:	40003800 	.word	0x40003800
 8001ba4:	58020800 	.word	0x58020800
 8001ba8:	40013400 	.word	0x40013400
 8001bac:	58021000 	.word	0x58021000

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b0ba      	sub	sp, #232	@ 0xe8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	22b8      	movs	r2, #184	@ 0xb8
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f00a ff83 	bl	800cadc <memset>
  if(huart->Instance==UART8)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a39      	ldr	r2, [pc, #228]	@ (8001cc0 <HAL_UART_MspInit+0x110>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d16a      	bne.n	8001cb6 <HAL_UART_MspInit+0x106>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001be0:	f04f 0202 	mov.w	r2, #2
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf2:	f107 0318 	add.w	r3, r7, #24
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 ff64 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c02:	f7ff fcc9 	bl	8001598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001c06:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <HAL_UART_MspInit+0x114>)
 8001c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc4 <HAL_UART_MspInit+0x114>)
 8001c0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c16:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <HAL_UART_MspInit+0x114>)
 8001c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c24:	4b27      	ldr	r3, [pc, #156]	@ (8001cc4 <HAL_UART_MspInit+0x114>)
 8001c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c2a:	4a26      	ldr	r2, [pc, #152]	@ (8001cc4 <HAL_UART_MspInit+0x114>)
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c34:	4b23      	ldr	r3, [pc, #140]	@ (8001cc4 <HAL_UART_MspInit+0x114>)
 8001c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c42:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <HAL_UART_MspInit+0x114>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c48:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc4 <HAL_UART_MspInit+0x114>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c52:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <HAL_UART_MspInit+0x114>)
 8001c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    PD15     ------> UART8_RTS
    PD14     ------> UART8_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001c60:	2303      	movs	r3, #3
 8001c62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4810      	ldr	r0, [pc, #64]	@ (8001cc8 <HAL_UART_MspInit+0x118>)
 8001c86:	f000 fc6f 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8001c8a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001caa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4806      	ldr	r0, [pc, #24]	@ (8001ccc <HAL_UART_MspInit+0x11c>)
 8001cb2:	f000 fc59 	bl	8002568 <HAL_GPIO_Init>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 8001cb6:	bf00      	nop
 8001cb8:	37e8      	adds	r7, #232	@ 0xe8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40007c00 	.word	0x40007c00
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	58021000 	.word	0x58021000
 8001ccc:	58020c00 	.word	0x58020c00

08001cd0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0b8      	sub	sp, #224	@ 0xe0
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	22b8      	movs	r2, #184	@ 0xb8
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00a fef3 	bl	800cadc <memset>
  if(husart->Instance==USART1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a27      	ldr	r2, [pc, #156]	@ (8001d98 <HAL_USART_MspInit+0xc8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d146      	bne.n	8001d8e <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d00:	f04f 0201 	mov.w	r2, #1
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fed4 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8001d22:	f7ff fc39 	bl	8001598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d26:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <HAL_USART_MspInit+0xcc>)
 8001d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <HAL_USART_MspInit+0xcc>)
 8001d2e:	f043 0310 	orr.w	r3, r3, #16
 8001d32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <HAL_USART_MspInit+0xcc>)
 8001d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_USART_MspInit+0xcc>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4a:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <HAL_USART_MspInit+0xcc>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <HAL_USART_MspInit+0xcc>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 8001d62:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <HAL_USART_MspInit+0xd0>)
 8001d8a:	f000 fbed 	bl	8002568 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d8e:	bf00      	nop
 8001d90:	37e0      	adds	r7, #224	@ 0xe0
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40011000 	.word	0x40011000
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	58020000 	.word	0x58020000

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <NMI_Handler+0x4>

08001dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <MemManage_Handler+0x4>

08001dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfa:	f000 fa15 	bl	8002228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  return 1;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_kill>:

int _kill(int pid, int sig)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e1c:	f00a feb0 	bl	800cb80 <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2216      	movs	r2, #22
 8001e24:	601a      	str	r2, [r3, #0]
  return -1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_exit>:

void _exit (int status)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ffe7 	bl	8001e12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <_exit+0x12>

08001e48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e00a      	b.n	8001e70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e5a:	f3af 8000 	nop.w
 8001e5e:	4601      	mov	r1, r0
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	60ba      	str	r2, [r7, #8]
 8001e66:	b2ca      	uxtb	r2, r1
 8001e68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbf0      	blt.n	8001e5a <_read+0x12>
  }

  return len;
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eaa:	605a      	str	r2, [r3, #4]
  return 0;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_isatty>:

int _isatty(int file)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef4:	4a14      	ldr	r2, [pc, #80]	@ (8001f48 <_sbrk+0x5c>)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <_sbrk+0x60>)
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f00:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <_sbrk+0x64>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <_sbrk+0x68>)
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d207      	bcs.n	8001f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f1c:	f00a fe30 	bl	800cb80 <__errno>
 8001f20:	4603      	mov	r3, r0
 8001f22:	220c      	movs	r2, #12
 8001f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	e009      	b.n	8001f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f2c:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f32:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <_sbrk+0x64>)
 8001f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	24050000 	.word	0x24050000
 8001f4c:	00000400 	.word	0x00000400
 8001f50:	24000614 	.word	0x24000614
 8001f54:	24000780 	.word	0x24000780

08001f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f5c:	4b32      	ldr	r3, [pc, #200]	@ (8002028 <SystemInit+0xd0>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f62:	4a31      	ldr	r2, [pc, #196]	@ (8002028 <SystemInit+0xd0>)
 8001f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800202c <SystemInit+0xd4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d807      	bhi.n	8001f88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f78:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <SystemInit+0xd4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 030f 	bic.w	r3, r3, #15
 8001f80:	4a2a      	ldr	r2, [pc, #168]	@ (800202c <SystemInit+0xd4>)
 8001f82:	f043 0307 	orr.w	r3, r3, #7
 8001f86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f88:	4b29      	ldr	r3, [pc, #164]	@ (8002030 <SystemInit+0xd8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a28      	ldr	r2, [pc, #160]	@ (8002030 <SystemInit+0xd8>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f94:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <SystemInit+0xd8>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f9a:	4b25      	ldr	r3, [pc, #148]	@ (8002030 <SystemInit+0xd8>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4924      	ldr	r1, [pc, #144]	@ (8002030 <SystemInit+0xd8>)
 8001fa0:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <SystemInit+0xdc>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fa6:	4b21      	ldr	r3, [pc, #132]	@ (800202c <SystemInit+0xd4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <SystemInit+0xd4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 030f 	bic.w	r3, r3, #15
 8001fba:	4a1c      	ldr	r2, [pc, #112]	@ (800202c <SystemInit+0xd4>)
 8001fbc:	f043 0307 	orr.w	r3, r3, #7
 8001fc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <SystemInit+0xd8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <SystemInit+0xd8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001fce:	4b18      	ldr	r3, [pc, #96]	@ (8002030 <SystemInit+0xd8>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001fd4:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <SystemInit+0xd8>)
 8001fd6:	4a18      	ldr	r2, [pc, #96]	@ (8002038 <SystemInit+0xe0>)
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <SystemInit+0xd8>)
 8001fdc:	4a17      	ldr	r2, [pc, #92]	@ (800203c <SystemInit+0xe4>)
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <SystemInit+0xd8>)
 8001fe2:	4a17      	ldr	r2, [pc, #92]	@ (8002040 <SystemInit+0xe8>)
 8001fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <SystemInit+0xd8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001fec:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <SystemInit+0xd8>)
 8001fee:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <SystemInit+0xe8>)
 8001ff0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <SystemInit+0xd8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <SystemInit+0xd8>)
 8001ffa:	4a11      	ldr	r2, [pc, #68]	@ (8002040 <SystemInit+0xe8>)
 8001ffc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <SystemInit+0xd8>)
 8002000:	2200      	movs	r2, #0
 8002002:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002004:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <SystemInit+0xd8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a09      	ldr	r2, [pc, #36]	@ (8002030 <SystemInit+0xd8>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800200e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <SystemInit+0xd8>)
 8002012:	2200      	movs	r2, #0
 8002014:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002016:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <SystemInit+0xec>)
 8002018:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800201c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00
 800202c:	52002000 	.word	0x52002000
 8002030:	58024400 	.word	0x58024400
 8002034:	eaf6ed7f 	.word	0xeaf6ed7f
 8002038:	02020200 	.word	0x02020200
 800203c:	01ff0000 	.word	0x01ff0000
 8002040:	01010280 	.word	0x01010280
 8002044:	52004000 	.word	0x52004000

08002048 <SensorManager_Init>:
	//"BNO055",
	//"BME680",
	"MS5607",
};

telemetry_init_status SensorManager_Init(void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
	printf("Sensors Initialization routine started. \n");
 800204e:	4821      	ldr	r0, [pc, #132]	@ (80020d4 <SensorManager_Init+0x8c>)
 8002050:	f00a fc44 	bl	800c8dc <puts>

    size_t num_sensors = sizeof(init_functions) / sizeof(init_functions[0]);
 8002054:	2301      	movs	r3, #1
 8002056:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 800205c:	2300      	movs	r3, #0
 800205e:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	e01a      	b.n	800209c <SensorManager_Init+0x54>
        int8_t status = init_functions[i]();
 8002066:	4a1c      	ldr	r2, [pc, #112]	@ (80020d8 <SensorManager_Init+0x90>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	4798      	blx	r3
 8002070:	4603      	mov	r3, r0
 8002072:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 8002074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <SensorManager_Init+0x4a>
            printf("%s initialization failed.\n", sensor_names[i]);
 800207c:	4a17      	ldr	r2, [pc, #92]	@ (80020dc <SensorManager_Init+0x94>)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002084:	4619      	mov	r1, r3
 8002086:	4816      	ldr	r0, [pc, #88]	@ (80020e0 <SensorManager_Init+0x98>)
 8002088:	f00a fbc0 	bl	800c80c <iprintf>
            all_success = false;
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	e001      	b.n	8002096 <SensorManager_Init+0x4e>
        } else {
            any_success = true;
 8002092:	2301      	movs	r3, #1
 8002094:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3301      	adds	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d3e0      	bcc.n	8002066 <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <SensorManager_Init+0x6c>
        printf("All sensors initialized successfully.\n");
 80020aa:	480e      	ldr	r0, [pc, #56]	@ (80020e4 <SensorManager_Init+0x9c>)
 80020ac:	f00a fc16 	bl	800c8dc <puts>
        return TELEMETRY_INIT_SUCCESS;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e00b      	b.n	80020cc <SensorManager_Init+0x84>
    } else if (any_success) {
 80020b4:	7bbb      	ldrb	r3, [r7, #14]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <SensorManager_Init+0x7c>
        printf("Partial initialization success.\n");
 80020ba:	480b      	ldr	r0, [pc, #44]	@ (80020e8 <SensorManager_Init+0xa0>)
 80020bc:	f00a fc0e 	bl	800c8dc <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e003      	b.n	80020cc <SensorManager_Init+0x84>
    } else {
        printf("All sensors initialization failed.\n");
 80020c4:	4809      	ldr	r0, [pc, #36]	@ (80020ec <SensorManager_Init+0xa4>)
 80020c6:	f00a fc09 	bl	800c8dc <puts>
        return TELEMETRY_INIT_FAILURE;
 80020ca:	2302      	movs	r3, #2
    }
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	080100a0 	.word	0x080100a0
 80020d8:	24000008 	.word	0x24000008
 80020dc:	2400000c 	.word	0x2400000c
 80020e0:	080100cc 	.word	0x080100cc
 80020e4:	080100e8 	.word	0x080100e8
 80020e8:	08010110 	.word	0x08010110
 80020ec:	08010130 	.word	0x08010130

080020f0 <Reset_Handler>:
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002128 <LoopFillZerobss+0xe>
 80020f4:	f7ff ff30 	bl	8001f58 <SystemInit>
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <LoopFillZerobss+0x12>)
 80020fa:	490d      	ldr	r1, [pc, #52]	@ (8002130 <LoopFillZerobss+0x16>)
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <LoopFillZerobss+0x1a>)
 80020fe:	2300      	movs	r3, #0
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:
 8002102:	58d4      	ldr	r4, [r2, r3]
 8002104:	50c4      	str	r4, [r0, r3]
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:
 8002108:	18c4      	adds	r4, r0, r3
 800210a:	428c      	cmp	r4, r1
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <LoopFillZerobss+0x1e>)
 8002110:	4c0a      	ldr	r4, [pc, #40]	@ (800213c <LoopFillZerobss+0x22>)
 8002112:	2300      	movs	r3, #0
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:
 800211a:	42a2      	cmp	r2, r4
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>
 800211e:	f00a fd35 	bl	800cb8c <__libc_init_array>
 8002122:	f7fe fdde 	bl	8000ce2 <main>
 8002126:	4770      	bx	lr
 8002128:	24050000 	.word	0x24050000
 800212c:	24000000 	.word	0x24000000
 8002130:	240001e0 	.word	0x240001e0
 8002134:	08010628 	.word	0x08010628
 8002138:	240001e0 	.word	0x240001e0
 800213c:	2400077c 	.word	0x2400077c

08002140 <ADC3_IRQHandler>:
 8002140:	e7fe      	b.n	8002140 <ADC3_IRQHandler>
	...

08002144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214a:	2003      	movs	r0, #3
 800214c:	f000 f962 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002150:	f001 fae2 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_Init+0x68>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	4913      	ldr	r1, [pc, #76]	@ (80021b0 <HAL_Init+0x6c>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
 800216c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800216e:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <HAL_Init+0x68>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	4a0e      	ldr	r2, [pc, #56]	@ (80021b0 <HAL_Init+0x6c>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	4a0b      	ldr	r2, [pc, #44]	@ (80021b4 <HAL_Init+0x70>)
 8002186:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002188:	4a0b      	ldr	r2, [pc, #44]	@ (80021b8 <HAL_Init+0x74>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800218e:	2000      	movs	r0, #0
 8002190:	f000 f814 	bl	80021bc <HAL_InitTick>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e002      	b.n	80021a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800219e:	f7ff fa01 	bl	80015a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	58024400 	.word	0x58024400
 80021b0:	0801018c 	.word	0x0801018c
 80021b4:	24000004 	.word	0x24000004
 80021b8:	24000000 	.word	0x24000000

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021c4:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_InitTick+0x60>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e021      	b.n	8002214 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_InitTick+0x64>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_InitTick+0x60>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021de:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f939 	bl	800245e <HAL_SYSTICK_Config>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00e      	b.n	8002214 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b0f      	cmp	r3, #15
 80021fa:	d80a      	bhi.n	8002212 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021fc:	2200      	movs	r2, #0
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	f000 f911 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002208:	4a06      	ldr	r2, [pc, #24]	@ (8002224 <HAL_InitTick+0x68>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	e000      	b.n	8002214 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	24000014 	.word	0x24000014
 8002220:	24000000 	.word	0x24000000
 8002224:	24000010 	.word	0x24000010

08002228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	@ (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	24000014 	.word	0x24000014
 800224c:	24000618 	.word	0x24000618

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	24000618 	.word	0x24000618

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	24000014 	.word	0x24000014

080022b0 <__NVIC_SetPriorityGrouping>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <__NVIC_SetPriorityGrouping+0x40>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022de:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <__NVIC_SetPriorityGrouping+0x40>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	60d3      	str	r3, [r2, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00
 80022f4:	05fa0000 	.word	0x05fa0000

080022f8 <__NVIC_GetPriorityGrouping>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_SetPriority>:
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	@ (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	@ (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	@ 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	@ 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff47 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002438:	f7ff ff5e 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 800243c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7ff ff90 	bl	8002368 <NVIC_EncodePriority>
 8002448:	4602      	mov	r2, r0
 800244a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff5f 	bl	8002314 <__NVIC_SetPriority>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffb2 	bl	80023d0 <SysTick_Config>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800247c:	f3bf 8f5f 	dmb	sy
}
 8002480:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002482:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <HAL_MPU_Disable+0x28>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	4a06      	ldr	r2, [pc, #24]	@ (80024a0 <HAL_MPU_Disable+0x28>)
 8002488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_MPU_Disable+0x2c>)
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00
 80024a4:	e000ed90 	.word	0xe000ed90

080024a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80024b0:	4a0b      	ldr	r2, [pc, #44]	@ (80024e0 <HAL_MPU_Enable+0x38>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <HAL_MPU_Enable+0x3c>)
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <HAL_MPU_Enable+0x3c>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80024c6:	f3bf 8f4f 	dsb	sy
}
 80024ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024cc:	f3bf 8f6f 	isb	sy
}
 80024d0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed90 	.word	0xe000ed90
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	785a      	ldrb	r2, [r3, #1]
 80024f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_MPU_ConfigRegion+0x7c>)
 80024f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80024f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <HAL_MPU_ConfigRegion+0x7c>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4a19      	ldr	r2, [pc, #100]	@ (8002564 <HAL_MPU_ConfigRegion+0x7c>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002504:	4a17      	ldr	r2, [pc, #92]	@ (8002564 <HAL_MPU_ConfigRegion+0x7c>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7b1b      	ldrb	r3, [r3, #12]
 8002510:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7adb      	ldrb	r3, [r3, #11]
 8002516:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002518:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7a9b      	ldrb	r3, [r3, #10]
 800251e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002520:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7b5b      	ldrb	r3, [r3, #13]
 8002526:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002528:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7b9b      	ldrb	r3, [r3, #14]
 800252e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002530:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	7bdb      	ldrb	r3, [r3, #15]
 8002536:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002538:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7a5b      	ldrb	r3, [r3, #9]
 800253e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002540:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7a1b      	ldrb	r3, [r3, #8]
 8002546:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002548:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002550:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002552:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002554:	6113      	str	r3, [r2, #16]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed90 	.word	0xe000ed90

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	@ 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002576:	4b86      	ldr	r3, [pc, #536]	@ (8002790 <HAL_GPIO_Init+0x228>)
 8002578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800257a:	e18c      	b.n	8002896 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 817e 	beq.w	8002890 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d005      	beq.n	80025ac <HAL_GPIO_Init+0x44>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d130      	bne.n	800260e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025e2:	2201      	movs	r2, #1
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 0201 	and.w	r2, r3, #1
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b03      	cmp	r3, #3
 8002618:	d017      	beq.n	800264a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d123      	bne.n	800269e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	08da      	lsrs	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3208      	adds	r2, #8
 8002698:	69b9      	ldr	r1, [r7, #24]
 800269a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0203 	and.w	r2, r3, #3
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80d8 	beq.w	8002890 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002794 <HAL_GPIO_Init+0x22c>)
 80026e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002794 <HAL_GPIO_Init+0x22c>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026f0:	4b28      	ldr	r3, [pc, #160]	@ (8002794 <HAL_GPIO_Init+0x22c>)
 80026f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fe:	4a26      	ldr	r2, [pc, #152]	@ (8002798 <HAL_GPIO_Init+0x230>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	220f      	movs	r2, #15
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1d      	ldr	r2, [pc, #116]	@ (800279c <HAL_GPIO_Init+0x234>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d04a      	beq.n	80027c0 <HAL_GPIO_Init+0x258>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1c      	ldr	r2, [pc, #112]	@ (80027a0 <HAL_GPIO_Init+0x238>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02b      	beq.n	800278a <HAL_GPIO_Init+0x222>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1b      	ldr	r2, [pc, #108]	@ (80027a4 <HAL_GPIO_Init+0x23c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d025      	beq.n	8002786 <HAL_GPIO_Init+0x21e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1a      	ldr	r2, [pc, #104]	@ (80027a8 <HAL_GPIO_Init+0x240>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01f      	beq.n	8002782 <HAL_GPIO_Init+0x21a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a19      	ldr	r2, [pc, #100]	@ (80027ac <HAL_GPIO_Init+0x244>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d019      	beq.n	800277e <HAL_GPIO_Init+0x216>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a18      	ldr	r2, [pc, #96]	@ (80027b0 <HAL_GPIO_Init+0x248>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x212>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <HAL_GPIO_Init+0x24c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00d      	beq.n	8002776 <HAL_GPIO_Init+0x20e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a16      	ldr	r2, [pc, #88]	@ (80027b8 <HAL_GPIO_Init+0x250>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <HAL_GPIO_Init+0x20a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a15      	ldr	r2, [pc, #84]	@ (80027bc <HAL_GPIO_Init+0x254>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_GPIO_Init+0x206>
 800276a:	2309      	movs	r3, #9
 800276c:	e029      	b.n	80027c2 <HAL_GPIO_Init+0x25a>
 800276e:	230a      	movs	r3, #10
 8002770:	e027      	b.n	80027c2 <HAL_GPIO_Init+0x25a>
 8002772:	2307      	movs	r3, #7
 8002774:	e025      	b.n	80027c2 <HAL_GPIO_Init+0x25a>
 8002776:	2306      	movs	r3, #6
 8002778:	e023      	b.n	80027c2 <HAL_GPIO_Init+0x25a>
 800277a:	2305      	movs	r3, #5
 800277c:	e021      	b.n	80027c2 <HAL_GPIO_Init+0x25a>
 800277e:	2304      	movs	r3, #4
 8002780:	e01f      	b.n	80027c2 <HAL_GPIO_Init+0x25a>
 8002782:	2303      	movs	r3, #3
 8002784:	e01d      	b.n	80027c2 <HAL_GPIO_Init+0x25a>
 8002786:	2302      	movs	r3, #2
 8002788:	e01b      	b.n	80027c2 <HAL_GPIO_Init+0x25a>
 800278a:	2301      	movs	r3, #1
 800278c:	e019      	b.n	80027c2 <HAL_GPIO_Init+0x25a>
 800278e:	bf00      	nop
 8002790:	58000080 	.word	0x58000080
 8002794:	58024400 	.word	0x58024400
 8002798:	58000400 	.word	0x58000400
 800279c:	58020000 	.word	0x58020000
 80027a0:	58020400 	.word	0x58020400
 80027a4:	58020800 	.word	0x58020800
 80027a8:	58020c00 	.word	0x58020c00
 80027ac:	58021000 	.word	0x58021000
 80027b0:	58021400 	.word	0x58021400
 80027b4:	58021800 	.word	0x58021800
 80027b8:	58021c00 	.word	0x58021c00
 80027bc:	58022400 	.word	0x58022400
 80027c0:	2300      	movs	r3, #0
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	f002 0203 	and.w	r2, r2, #3
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	4093      	lsls	r3, r2
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d2:	4938      	ldr	r1, [pc, #224]	@ (80028b4 <HAL_GPIO_Init+0x34c>)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002806:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002834:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3301      	adds	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f47f ae6b 	bne.w	800257c <HAL_GPIO_Init+0x14>
  }
}
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	3724      	adds	r7, #36	@ 0x24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	58000400 	.word	0x58000400

080028b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	887b      	ldrh	r3, [r7, #2]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	e001      	b.n	80028da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002904:	e003      	b.n	800290e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e08b      	b.n	8002a46 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe fe48 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	@ 0x24
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800296c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800297c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	e006      	b.n	80029a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d108      	bne.n	80029be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	e007      	b.n	80029ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_I2C_Init+0x134>)
 80029da:	430b      	orrs	r3, r1
 80029dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69d9      	ldr	r1, [r3, #28]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	02008000 	.word	0x02008000

08002a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d138      	bne.n	8002adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e032      	b.n	8002ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	@ 0x24
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6819      	ldr	r1, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d139      	bne.n	8002b74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e033      	b.n	8002b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2224      	movs	r2, #36	@ 0x24
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d00a      	beq.n	8002bae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b98:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e01f      	b.n	8002bea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e01d      	b.n	8002bea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002bae:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 0207 	bic.w	r2, r3, #7
 8002bb6:	490f      	ldr	r1, [pc, #60]	@ (8002bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002bbe:	f7ff fb47 	bl	8002250 <HAL_GetTick>
 8002bc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bc4:	e009      	b.n	8002bda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bc6:	f7ff fb43 	bl	8002250 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bd4:	d901      	bls.n	8002bda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e007      	b.n	8002bea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be6:	d1ee      	bne.n	8002bc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	58024800 	.word	0x58024800

08002bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	@ 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e3c8      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8087 	beq.w	8002d26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c18:	4b88      	ldr	r3, [pc, #544]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c22:	4b86      	ldr	r3, [pc, #536]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d007      	beq.n	8002c3e <HAL_RCC_OscConfig+0x46>
 8002c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c30:	2b18      	cmp	r3, #24
 8002c32:	d110      	bne.n	8002c56 <HAL_RCC_OscConfig+0x5e>
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d10b      	bne.n	8002c56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d06c      	beq.n	8002d24 <HAL_RCC_OscConfig+0x12c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d168      	bne.n	8002d24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e3a2      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x76>
 8002c60:	4b76      	ldr	r3, [pc, #472]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a75      	ldr	r2, [pc, #468]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	e02e      	b.n	8002ccc <HAL_RCC_OscConfig+0xd4>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x98>
 8002c76:	4b71      	ldr	r3, [pc, #452]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a70      	ldr	r2, [pc, #448]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b6e      	ldr	r3, [pc, #440]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a6d      	ldr	r2, [pc, #436]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002c88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e01d      	b.n	8002ccc <HAL_RCC_OscConfig+0xd4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xbc>
 8002c9a:	4b68      	ldr	r3, [pc, #416]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a67      	ldr	r2, [pc, #412]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b65      	ldr	r3, [pc, #404]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a64      	ldr	r2, [pc, #400]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0xd4>
 8002cb4:	4b61      	ldr	r3, [pc, #388]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a60      	ldr	r2, [pc, #384]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a5d      	ldr	r2, [pc, #372]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7ff fabc 	bl	8002250 <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7ff fab8 	bl	8002250 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	@ 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e356      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cee:	4b53      	ldr	r3, [pc, #332]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0xe4>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7ff faa8 	bl	8002250 <HAL_GetTick>
 8002d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7ff faa4 	bl	8002250 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e342      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d16:	4b49      	ldr	r3, [pc, #292]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x10c>
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 808c 	beq.w	8002e4c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d34:	4b41      	ldr	r3, [pc, #260]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_RCC_OscConfig+0x162>
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	2b18      	cmp	r3, #24
 8002d4e:	d137      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1c8>
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d132      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d5a:	4b38      	ldr	r3, [pc, #224]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_RCC_OscConfig+0x17a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e314      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d72:	4b32      	ldr	r3, [pc, #200]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 0219 	bic.w	r2, r3, #25
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	492f      	ldr	r1, [pc, #188]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7ff fa64 	bl	8002250 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7ff fa60 	bl	8002250 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e2fe      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d9e:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	4920      	ldr	r1, [pc, #128]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dbe:	e045      	b.n	8002e4c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d026      	beq.n	8002e16 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 0219 	bic.w	r2, r3, #25
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4919      	ldr	r1, [pc, #100]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7ff fa39 	bl	8002250 <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de2:	f7ff fa35 	bl	8002250 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e2d3      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002df4:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	490b      	ldr	r1, [pc, #44]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
 8002e14:	e01a      	b.n	8002e4c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a08      	ldr	r2, [pc, #32]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7ff fa15 	bl	8002250 <HAL_GetTick>
 8002e26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7ff fa11 	bl	8002250 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d903      	bls.n	8002e40 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e2af      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
 8002e3c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e40:	4b96      	ldr	r3, [pc, #600]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1ee      	bne.n	8002e2a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d06a      	beq.n	8002f2e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e58:	4b90      	ldr	r3, [pc, #576]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e62:	4b8e      	ldr	r3, [pc, #568]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d007      	beq.n	8002e7e <HAL_RCC_OscConfig+0x286>
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b18      	cmp	r3, #24
 8002e72:	d11b      	bne.n	8002eac <HAL_RCC_OscConfig+0x2b4>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d116      	bne.n	8002eac <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e7e:	4b87      	ldr	r3, [pc, #540]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x29e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b80      	cmp	r3, #128	@ 0x80
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e282      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e96:	4b81      	ldr	r3, [pc, #516]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	061b      	lsls	r3, r3, #24
 8002ea4:	497d      	ldr	r1, [pc, #500]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eaa:	e040      	b.n	8002f2e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d023      	beq.n	8002efc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002eb4:	4b79      	ldr	r3, [pc, #484]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a78      	ldr	r2, [pc, #480]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7ff f9c6 	bl	8002250 <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ec8:	f7ff f9c2 	bl	8002250 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e260      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eda:	4b70      	ldr	r3, [pc, #448]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	061b      	lsls	r3, r3, #24
 8002ef4:	4969      	ldr	r1, [pc, #420]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60cb      	str	r3, [r1, #12]
 8002efa:	e018      	b.n	8002f2e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002efc:	4b67      	ldr	r3, [pc, #412]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a66      	ldr	r2, [pc, #408]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7ff f9a2 	bl	8002250 <HAL_GetTick>
 8002f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f10:	f7ff f99e 	bl	8002250 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e23c      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f22:	4b5e      	ldr	r3, [pc, #376]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d036      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d019      	beq.n	8002f76 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f42:	4b56      	ldr	r3, [pc, #344]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f46:	4a55      	ldr	r2, [pc, #340]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7ff f97f 	bl	8002250 <HAL_GetTick>
 8002f52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f56:	f7ff f97b 	bl	8002250 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e219      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f68:	4b4c      	ldr	r3, [pc, #304]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x35e>
 8002f74:	e018      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f76:	4b49      	ldr	r3, [pc, #292]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7a:	4a48      	ldr	r2, [pc, #288]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7ff f965 	bl	8002250 <HAL_GetTick>
 8002f86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7ff f961 	bl	8002250 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1ff      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d036      	beq.n	8003022 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d019      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fbc:	4b37      	ldr	r3, [pc, #220]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a36      	ldr	r2, [pc, #216]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002fc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fc8:	f7ff f942 	bl	8002250 <HAL_GetTick>
 8002fcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fd0:	f7ff f93e 	bl	8002250 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e1dc      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x3d8>
 8002fee:	e018      	b.n	8003022 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a29      	ldr	r2, [pc, #164]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8002ff6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ffa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ffc:	f7ff f928 	bl	8002250 <HAL_GetTick>
 8003000:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003004:	f7ff f924 	bl	8002250 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e1c2      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003016:	4b21      	ldr	r3, [pc, #132]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8086 	beq.w	800313c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003030:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <HAL_RCC_OscConfig+0x4a8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1a      	ldr	r2, [pc, #104]	@ (80030a0 <HAL_RCC_OscConfig+0x4a8>)
 8003036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800303c:	f7ff f908 	bl	8002250 <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003044:	f7ff f904 	bl	8002250 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	@ 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e1a2      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <HAL_RCC_OscConfig+0x4a8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d106      	bne.n	8003078 <HAL_RCC_OscConfig+0x480>
 800306a:	4b0c      	ldr	r3, [pc, #48]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306e:	4a0b      	ldr	r2, [pc, #44]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6713      	str	r3, [r2, #112]	@ 0x70
 8003076:	e032      	b.n	80030de <HAL_RCC_OscConfig+0x4e6>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d111      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4ac>
 8003080:	4b06      	ldr	r3, [pc, #24]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	4a05      	ldr	r2, [pc, #20]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	@ 0x70
 800308c:	4b03      	ldr	r3, [pc, #12]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003090:	4a02      	ldr	r2, [pc, #8]	@ (800309c <HAL_RCC_OscConfig+0x4a4>)
 8003092:	f023 0304 	bic.w	r3, r3, #4
 8003096:	6713      	str	r3, [r2, #112]	@ 0x70
 8003098:	e021      	b.n	80030de <HAL_RCC_OscConfig+0x4e6>
 800309a:	bf00      	nop
 800309c:	58024400 	.word	0x58024400
 80030a0:	58024800 	.word	0x58024800
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d10c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x4ce>
 80030ac:	4b83      	ldr	r3, [pc, #524]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	4a82      	ldr	r2, [pc, #520]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b8:	4b80      	ldr	r3, [pc, #512]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030bc:	4a7f      	ldr	r2, [pc, #508]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c4:	e00b      	b.n	80030de <HAL_RCC_OscConfig+0x4e6>
 80030c6:	4b7d      	ldr	r3, [pc, #500]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	4a7c      	ldr	r2, [pc, #496]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d2:	4b7a      	ldr	r3, [pc, #488]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d6:	4a79      	ldr	r2, [pc, #484]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d015      	beq.n	8003112 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7ff f8b3 	bl	8002250 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7ff f8af 	bl	8002250 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e14b      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003104:	4b6d      	ldr	r3, [pc, #436]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ee      	beq.n	80030ee <HAL_RCC_OscConfig+0x4f6>
 8003110:	e014      	b.n	800313c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7ff f89d 	bl	8002250 <HAL_GetTick>
 8003116:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7ff f899 	bl	8002250 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e135      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003130:	4b62      	ldr	r3, [pc, #392]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ee      	bne.n	800311a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 812a 	beq.w	800339a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003146:	4b5d      	ldr	r3, [pc, #372]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800314e:	2b18      	cmp	r3, #24
 8003150:	f000 80ba 	beq.w	80032c8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	2b02      	cmp	r3, #2
 800315a:	f040 8095 	bne.w	8003288 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b57      	ldr	r3, [pc, #348]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a56      	ldr	r2, [pc, #344]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003164:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7ff f871 	bl	8002250 <HAL_GetTick>
 800316e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003172:	f7ff f86d 	bl	8002250 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e10b      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003184:	4b4d      	ldr	r3, [pc, #308]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003190:	4b4a      	ldr	r3, [pc, #296]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003194:	4b4a      	ldr	r3, [pc, #296]	@ (80032c0 <HAL_RCC_OscConfig+0x6c8>)
 8003196:	4013      	ands	r3, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031a0:	0112      	lsls	r2, r2, #4
 80031a2:	430a      	orrs	r2, r1
 80031a4:	4945      	ldr	r1, [pc, #276]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	628b      	str	r3, [r1, #40]	@ 0x28
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	3b01      	subs	r3, #1
 80031b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031b8:	3b01      	subs	r3, #1
 80031ba:	025b      	lsls	r3, r3, #9
 80031bc:	b29b      	uxth	r3, r3
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	3b01      	subs	r3, #1
 80031c6:	041b      	lsls	r3, r3, #16
 80031c8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d2:	3b01      	subs	r3, #1
 80031d4:	061b      	lsls	r3, r3, #24
 80031d6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80031da:	4938      	ldr	r1, [pc, #224]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80031e0:	4b36      	ldr	r3, [pc, #216]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	4a35      	ldr	r2, [pc, #212]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031ec:	4b33      	ldr	r3, [pc, #204]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80031ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f0:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <HAL_RCC_OscConfig+0x6cc>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031f8:	00d2      	lsls	r2, r2, #3
 80031fa:	4930      	ldr	r1, [pc, #192]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003200:	4b2e      	ldr	r3, [pc, #184]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	f023 020c 	bic.w	r2, r3, #12
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	492b      	ldr	r1, [pc, #172]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003212:	4b2a      	ldr	r3, [pc, #168]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	f023 0202 	bic.w	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	4927      	ldr	r1, [pc, #156]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003224:	4b25      	ldr	r3, [pc, #148]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	4a24      	ldr	r2, [pc, #144]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003230:	4b22      	ldr	r3, [pc, #136]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	4a21      	ldr	r2, [pc, #132]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800323a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800323c:	4b1f      	ldr	r3, [pc, #124]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	4a1e      	ldr	r2, [pc, #120]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003242:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003248:	4b1c      	ldr	r3, [pc, #112]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	4a1b      	ldr	r2, [pc, #108]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 800325a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fff6 	bl	8002250 <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fff2 	bl	8002250 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e090      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800327a:	4b10      	ldr	r3, [pc, #64]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x670>
 8003286:	e088      	b.n	800339a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003288:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0b      	ldr	r2, [pc, #44]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 800328e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe ffdc 	bl	8002250 <HAL_GetTick>
 8003298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe ffd8 	bl	8002250 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e076      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ae:	4b03      	ldr	r3, [pc, #12]	@ (80032bc <HAL_RCC_OscConfig+0x6c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x6a4>
 80032ba:	e06e      	b.n	800339a <HAL_RCC_OscConfig+0x7a2>
 80032bc:	58024400 	.word	0x58024400
 80032c0:	fffffc0c 	.word	0xfffffc0c
 80032c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032c8:	4b36      	ldr	r3, [pc, #216]	@ (80033a4 <HAL_RCC_OscConfig+0x7ac>)
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032ce:	4b35      	ldr	r3, [pc, #212]	@ (80033a4 <HAL_RCC_OscConfig+0x7ac>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d031      	beq.n	8003340 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f003 0203 	and.w	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d12a      	bne.n	8003340 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d122      	bne.n	8003340 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d11a      	bne.n	8003340 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	0a5b      	lsrs	r3, r3, #9
 800330e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003316:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d111      	bne.n	8003340 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	0c1b      	lsrs	r3, r3, #16
 8003320:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d108      	bne.n	8003340 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0e1b      	lsrs	r3, r3, #24
 8003332:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e02b      	b.n	800339c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003344:	4b17      	ldr	r3, [pc, #92]	@ (80033a4 <HAL_RCC_OscConfig+0x7ac>)
 8003346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003348:	08db      	lsrs	r3, r3, #3
 800334a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800334e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	429a      	cmp	r2, r3
 8003358:	d01f      	beq.n	800339a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800335a:	4b12      	ldr	r3, [pc, #72]	@ (80033a4 <HAL_RCC_OscConfig+0x7ac>)
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	4a11      	ldr	r2, [pc, #68]	@ (80033a4 <HAL_RCC_OscConfig+0x7ac>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003366:	f7fe ff73 	bl	8002250 <HAL_GetTick>
 800336a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800336c:	bf00      	nop
 800336e:	f7fe ff6f 	bl	8002250 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	4293      	cmp	r3, r2
 8003378:	d0f9      	beq.n	800336e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800337a:	4b0a      	ldr	r3, [pc, #40]	@ (80033a4 <HAL_RCC_OscConfig+0x7ac>)
 800337c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800337e:	4b0a      	ldr	r3, [pc, #40]	@ (80033a8 <HAL_RCC_OscConfig+0x7b0>)
 8003380:	4013      	ands	r3, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003386:	00d2      	lsls	r2, r2, #3
 8003388:	4906      	ldr	r1, [pc, #24]	@ (80033a4 <HAL_RCC_OscConfig+0x7ac>)
 800338a:	4313      	orrs	r3, r2
 800338c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800338e:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <HAL_RCC_OscConfig+0x7ac>)
 8003390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003392:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <HAL_RCC_OscConfig+0x7ac>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3730      	adds	r7, #48	@ 0x30
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	58024400 	.word	0x58024400
 80033a8:	ffff0007 	.word	0xffff0007

080033ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e19c      	b.n	80036fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b8a      	ldr	r3, [pc, #552]	@ (80035ec <HAL_RCC_ClockConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d910      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b87      	ldr	r3, [pc, #540]	@ (80035ec <HAL_RCC_ClockConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 020f 	bic.w	r2, r3, #15
 80033d6:	4985      	ldr	r1, [pc, #532]	@ (80035ec <HAL_RCC_ClockConfig+0x240>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b83      	ldr	r3, [pc, #524]	@ (80035ec <HAL_RCC_ClockConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e184      	b.n	80036fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d010      	beq.n	800341e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	4b7b      	ldr	r3, [pc, #492]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003408:	429a      	cmp	r2, r3
 800340a:	d908      	bls.n	800341e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800340c:	4b78      	ldr	r3, [pc, #480]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	4975      	ldr	r1, [pc, #468]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800341a:	4313      	orrs	r3, r2
 800341c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d010      	beq.n	800344c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	4b70      	ldr	r3, [pc, #448]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003436:	429a      	cmp	r2, r3
 8003438:	d908      	bls.n	800344c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800343a:	4b6d      	ldr	r3, [pc, #436]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	496a      	ldr	r1, [pc, #424]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 8003448:	4313      	orrs	r3, r2
 800344a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	d010      	beq.n	800347a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	4b64      	ldr	r3, [pc, #400]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003464:	429a      	cmp	r2, r3
 8003466:	d908      	bls.n	800347a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003468:	4b61      	ldr	r3, [pc, #388]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	495e      	ldr	r1, [pc, #376]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 8003476:	4313      	orrs	r3, r2
 8003478:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	4b59      	ldr	r3, [pc, #356]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003492:	429a      	cmp	r2, r3
 8003494:	d908      	bls.n	80034a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003496:	4b56      	ldr	r3, [pc, #344]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	4953      	ldr	r1, [pc, #332]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d010      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	4b4d      	ldr	r3, [pc, #308]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d908      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c4:	4b4a      	ldr	r3, [pc, #296]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f023 020f 	bic.w	r2, r3, #15
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4947      	ldr	r1, [pc, #284]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d055      	beq.n	800358e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034e2:	4b43      	ldr	r3, [pc, #268]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4940      	ldr	r1, [pc, #256]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d107      	bne.n	800350c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034fc:	4b3c      	ldr	r3, [pc, #240]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d121      	bne.n	800354c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0f6      	b.n	80036fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d107      	bne.n	8003524 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003514:	4b36      	ldr	r3, [pc, #216]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d115      	bne.n	800354c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0ea      	b.n	80036fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d107      	bne.n	800353c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800352c:	4b30      	ldr	r3, [pc, #192]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0de      	b.n	80036fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800353c:	4b2c      	ldr	r3, [pc, #176]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0d6      	b.n	80036fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800354c:	4b28      	ldr	r3, [pc, #160]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f023 0207 	bic.w	r2, r3, #7
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4925      	ldr	r1, [pc, #148]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800355a:	4313      	orrs	r3, r2
 800355c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355e:	f7fe fe77 	bl	8002250 <HAL_GetTick>
 8003562:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003564:	e00a      	b.n	800357c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003566:	f7fe fe73 	bl	8002250 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0be      	b.n	80036fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357c:	4b1c      	ldr	r3, [pc, #112]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	429a      	cmp	r2, r3
 800358c:	d1eb      	bne.n	8003566 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d010      	beq.n	80035bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d208      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035aa:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f023 020f 	bic.w	r2, r3, #15
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	490e      	ldr	r1, [pc, #56]	@ (80035f0 <HAL_RCC_ClockConfig+0x244>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <HAL_RCC_ClockConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d214      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <HAL_RCC_ClockConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 020f 	bic.w	r2, r3, #15
 80035d2:	4906      	ldr	r1, [pc, #24]	@ (80035ec <HAL_RCC_ClockConfig+0x240>)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b04      	ldr	r3, [pc, #16]	@ (80035ec <HAL_RCC_ClockConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e086      	b.n	80036fa <HAL_RCC_ClockConfig+0x34e>
 80035ec:	52002000 	.word	0x52002000
 80035f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d010      	beq.n	8003622 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	4b3f      	ldr	r3, [pc, #252]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800360c:	429a      	cmp	r2, r3
 800360e:	d208      	bcs.n	8003622 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003610:	4b3c      	ldr	r3, [pc, #240]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	4939      	ldr	r1, [pc, #228]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 800361e:	4313      	orrs	r3, r2
 8003620:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d010      	beq.n	8003650 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	4b34      	ldr	r3, [pc, #208]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800363a:	429a      	cmp	r2, r3
 800363c:	d208      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800363e:	4b31      	ldr	r3, [pc, #196]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	492e      	ldr	r1, [pc, #184]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 800364c:	4313      	orrs	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d010      	beq.n	800367e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	4b28      	ldr	r3, [pc, #160]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003668:	429a      	cmp	r2, r3
 800366a:	d208      	bcs.n	800367e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800366c:	4b25      	ldr	r3, [pc, #148]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	4922      	ldr	r1, [pc, #136]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 800367a:	4313      	orrs	r3, r2
 800367c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d010      	beq.n	80036ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	4b1d      	ldr	r3, [pc, #116]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003696:	429a      	cmp	r2, r3
 8003698:	d208      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800369a:	4b1a      	ldr	r3, [pc, #104]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4917      	ldr	r1, [pc, #92]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036ac:	f000 f834 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b14      	ldr	r3, [pc, #80]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	4912      	ldr	r1, [pc, #72]	@ (8003708 <HAL_RCC_ClockConfig+0x35c>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003704 <HAL_RCC_ClockConfig+0x358>)
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003708 <HAL_RCC_ClockConfig+0x35c>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	4a0a      	ldr	r2, [pc, #40]	@ (800370c <HAL_RCC_ClockConfig+0x360>)
 80036e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003710 <HAL_RCC_ClockConfig+0x364>)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80036ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003714 <HAL_RCC_ClockConfig+0x368>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe fd64 	bl	80021bc <HAL_InitTick>
 80036f4:	4603      	mov	r3, r0
 80036f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	58024400 	.word	0x58024400
 8003708:	0801018c 	.word	0x0801018c
 800370c:	24000004 	.word	0x24000004
 8003710:	24000000 	.word	0x24000000
 8003714:	24000010 	.word	0x24000010

08003718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b089      	sub	sp, #36	@ 0x24
 800371c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800371e:	4bb3      	ldr	r3, [pc, #716]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003726:	2b18      	cmp	r3, #24
 8003728:	f200 8155 	bhi.w	80039d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <HAL_RCC_GetSysClockFreq+0x1c>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003799 	.word	0x08003799
 8003738:	080039d7 	.word	0x080039d7
 800373c:	080039d7 	.word	0x080039d7
 8003740:	080039d7 	.word	0x080039d7
 8003744:	080039d7 	.word	0x080039d7
 8003748:	080039d7 	.word	0x080039d7
 800374c:	080039d7 	.word	0x080039d7
 8003750:	080039d7 	.word	0x080039d7
 8003754:	080037bf 	.word	0x080037bf
 8003758:	080039d7 	.word	0x080039d7
 800375c:	080039d7 	.word	0x080039d7
 8003760:	080039d7 	.word	0x080039d7
 8003764:	080039d7 	.word	0x080039d7
 8003768:	080039d7 	.word	0x080039d7
 800376c:	080039d7 	.word	0x080039d7
 8003770:	080039d7 	.word	0x080039d7
 8003774:	080037c5 	.word	0x080037c5
 8003778:	080039d7 	.word	0x080039d7
 800377c:	080039d7 	.word	0x080039d7
 8003780:	080039d7 	.word	0x080039d7
 8003784:	080039d7 	.word	0x080039d7
 8003788:	080039d7 	.word	0x080039d7
 800378c:	080039d7 	.word	0x080039d7
 8003790:	080039d7 	.word	0x080039d7
 8003794:	080037cb 	.word	0x080037cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003798:	4b94      	ldr	r3, [pc, #592]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037a4:	4b91      	ldr	r3, [pc, #580]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	08db      	lsrs	r3, r3, #3
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	4a90      	ldr	r2, [pc, #576]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80037b6:	e111      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80037b8:	4b8d      	ldr	r3, [pc, #564]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037ba:	61bb      	str	r3, [r7, #24]
      break;
 80037bc:	e10e      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80037be:	4b8d      	ldr	r3, [pc, #564]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037c0:	61bb      	str	r3, [r7, #24]
      break;
 80037c2:	e10b      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80037c4:	4b8c      	ldr	r3, [pc, #560]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80037c6:	61bb      	str	r3, [r7, #24]
      break;
 80037c8:	e108      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037ca:	4b88      	ldr	r3, [pc, #544]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80037d4:	4b85      	ldr	r3, [pc, #532]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037e0:	4b82      	ldr	r3, [pc, #520]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80037ea:	4b80      	ldr	r3, [pc, #512]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ee:	08db      	lsrs	r3, r3, #3
 80037f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003802:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80e1 	beq.w	80039d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b02      	cmp	r3, #2
 8003812:	f000 8083 	beq.w	800391c <HAL_RCC_GetSysClockFreq+0x204>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b02      	cmp	r3, #2
 800381a:	f200 80a1 	bhi.w	8003960 <HAL_RCC_GetSysClockFreq+0x248>
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x114>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d056      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800382a:	e099      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800382c:	4b6f      	ldr	r3, [pc, #444]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d02d      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003838:	4b6c      	ldr	r3, [pc, #432]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	08db      	lsrs	r3, r3, #3
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	4a6b      	ldr	r2, [pc, #428]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
 8003848:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003862:	4b62      	ldr	r3, [pc, #392]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003872:	ed97 6a02 	vldr	s12, [r7, #8]
 8003876:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80039fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800387a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800387e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800388a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003892:	e087      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003a00 <HAL_RCC_GetSysClockFreq+0x2e8>
 80038a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a6:	4b51      	ldr	r3, [pc, #324]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80039fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80038be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038d6:	e065      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003a04 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ea:	4b40      	ldr	r3, [pc, #256]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80038fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80039fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800390e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003916:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800391a:	e043      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003a08 <HAL_RCC_GetSysClockFreq+0x2f0>
 800392a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392e:	4b2f      	ldr	r3, [pc, #188]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003942:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80039fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800395e:	e021      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003a04 <HAL_RCC_GetSysClockFreq+0x2ec>
 800396e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003972:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003982:	ed97 6a02 	vldr	s12, [r7, #8]
 8003986:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80039fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800398a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80039a4:	4b11      	ldr	r3, [pc, #68]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	0a5b      	lsrs	r3, r3, #9
 80039aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ae:	3301      	adds	r3, #1
 80039b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80039c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c8:	ee17 3a90 	vmov	r3, s15
 80039cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80039ce:	e005      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
      break;
 80039d4:	e002      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80039d6:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039d8:	61bb      	str	r3, [r7, #24]
      break;
 80039da:	bf00      	nop
  }

  return sysclockfreq;
 80039dc:	69bb      	ldr	r3, [r7, #24]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3724      	adds	r7, #36	@ 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	58024400 	.word	0x58024400
 80039f0:	03d09000 	.word	0x03d09000
 80039f4:	003d0900 	.word	0x003d0900
 80039f8:	02dc6c00 	.word	0x02dc6c00
 80039fc:	46000000 	.word	0x46000000
 8003a00:	4c742400 	.word	0x4c742400
 8003a04:	4a742400 	.word	0x4a742400
 8003a08:	4c371b00 	.word	0x4c371b00

08003a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a12:	f7ff fe81 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 8003a16:	4602      	mov	r2, r0
 8003a18:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <HAL_RCC_GetHCLKFreq+0x50>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	490f      	ldr	r1, [pc, #60]	@ (8003a60 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a24:	5ccb      	ldrb	r3, [r1, r3]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a30:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <HAL_RCC_GetHCLKFreq+0x50>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	4a09      	ldr	r2, [pc, #36]	@ (8003a60 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	4a07      	ldr	r2, [pc, #28]	@ (8003a64 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a4a:	4a07      	ldr	r2, [pc, #28]	@ (8003a68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a50:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	58024400 	.word	0x58024400
 8003a60:	0801018c 	.word	0x0801018c
 8003a64:	24000004 	.word	0x24000004
 8003a68:	24000000 	.word	0x24000000

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a70:	f7ff ffcc 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4904      	ldr	r1, [pc, #16]	@ (8003a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	58024400 	.word	0x58024400
 8003a94:	0801018c 	.word	0x0801018c

08003a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a9c:	f7ff ffb6 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4904      	ldr	r1, [pc, #16]	@ (8003ac0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	58024400 	.word	0x58024400
 8003ac0:	0801018c 	.word	0x0801018c

08003ac4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac8:	b0c6      	sub	sp, #280	@ 0x118
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003ae8:	2500      	movs	r5, #0
 8003aea:	ea54 0305 	orrs.w	r3, r4, r5
 8003aee:	d049      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003af6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003afa:	d02f      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003afc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b00:	d828      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b06:	d01a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b0c:	d822      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b16:	d007      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b18:	e01c      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1a:	4bab      	ldr	r3, [pc, #684]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	4aaa      	ldr	r2, [pc, #680]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b26:	e01a      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	2102      	movs	r1, #2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f002 fa49 	bl	8005fc8 <RCCEx_PLL2_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b3c:	e00f      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b42:	3328      	adds	r3, #40	@ 0x28
 8003b44:	2102      	movs	r1, #2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 faf0 	bl	800612c <RCCEx_PLL3_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b52:	e004      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b5a:	e000      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b66:	4b98      	ldr	r3, [pc, #608]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b74:	4a94      	ldr	r2, [pc, #592]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b76:	430b      	orrs	r3, r1
 8003b78:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b7a:	e003      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003b90:	f04f 0900 	mov.w	r9, #0
 8003b94:	ea58 0309 	orrs.w	r3, r8, r9
 8003b98:	d047      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d82a      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003bc1 	.word	0x08003bc1
 8003bb0:	08003bcf 	.word	0x08003bcf
 8003bb4:	08003be5 	.word	0x08003be5
 8003bb8:	08003c03 	.word	0x08003c03
 8003bbc:	08003c03 	.word	0x08003c03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc0:	4b81      	ldr	r3, [pc, #516]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	4a80      	ldr	r2, [pc, #512]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bcc:	e01a      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f002 f9f6 	bl	8005fc8 <RCCEx_PLL2_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003be2:	e00f      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be8:	3328      	adds	r3, #40	@ 0x28
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f002 fa9d 	bl	800612c <RCCEx_PLL3_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bf8:	e004      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c00:	e000      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c0c:	4b6e      	ldr	r3, [pc, #440]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c10:	f023 0107 	bic.w	r1, r3, #7
 8003c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1a:	4a6b      	ldr	r2, [pc, #428]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c20:	e003      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c32:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003c36:	f04f 0b00 	mov.w	fp, #0
 8003c3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c3e:	d05b      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c48:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003c4c:	d03b      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003c4e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003c52:	d834      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c58:	d037      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003c5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c5e:	d82e      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c60:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c64:	d033      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003c66:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c6a:	d828      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c70:	d01a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003c72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c76:	d822      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003c7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c80:	d007      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003c82:	e01c      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c84:	4b50      	ldr	r3, [pc, #320]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	4a4f      	ldr	r2, [pc, #316]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c90:	e01e      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c96:	3308      	adds	r3, #8
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f002 f994 	bl	8005fc8 <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ca6:	e013      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cac:	3328      	adds	r3, #40	@ 0x28
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f002 fa3b 	bl	800612c <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cc4:	e004      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003cc6:	bf00      	nop
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cdc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ce8:	4a37      	ldr	r2, [pc, #220]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cea:	430b      	orrs	r3, r1
 8003cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cee:	e003      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d12:	460b      	mov	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	d05d      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d20:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003d24:	d03b      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003d26:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003d2a:	d834      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d30:	d037      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003d32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d36:	d82e      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d3c:	d033      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003d3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d42:	d828      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d48:	d01a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003d4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d4e:	d822      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d58:	d007      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003d5a:	e01c      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	4a19      	ldr	r2, [pc, #100]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d68:	e01e      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6e:	3308      	adds	r3, #8
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f002 f928 	bl	8005fc8 <RCCEx_PLL2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d7e:	e013      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d84:	3328      	adds	r3, #40	@ 0x28
 8003d86:	2100      	movs	r1, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f002 f9cf 	bl	800612c <RCCEx_PLL3_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d94:	e008      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d9c:	e004      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003d9e:	bf00      	nop
 8003da0:	e002      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003da2:	bf00      	nop
 8003da4:	e000      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003dc0:	4a01      	ldr	r2, [pc, #4]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc6:	e005      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003dc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003de0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003dea:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	d03a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfa:	2b30      	cmp	r3, #48	@ 0x30
 8003dfc:	d01f      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003dfe:	2b30      	cmp	r3, #48	@ 0x30
 8003e00:	d819      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d00c      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d815      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d019      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d111      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e12:	4baa      	ldr	r3, [pc, #680]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	4aa9      	ldr	r2, [pc, #676]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003e1e:	e011      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e24:	3308      	adds	r3, #8
 8003e26:	2102      	movs	r1, #2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f002 f8cd 	bl	8005fc8 <RCCEx_PLL2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e3c:	e002      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e4c:	4b9b      	ldr	r3, [pc, #620]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e50:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5a:	4a98      	ldr	r2, [pc, #608]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e60:	e003      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d051      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e94:	d035      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003e96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e9a:	d82e      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003e9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ea0:	d031      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003ea2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ea6:	d828      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eac:	d01a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eb2:	d822      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebc:	d007      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003ebe:	e01c      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	4a7d      	ldr	r2, [pc, #500]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ecc:	e01c      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f002 f876 	bl	8005fc8 <RCCEx_PLL2_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ee2:	e011      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee8:	3328      	adds	r3, #40	@ 0x28
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f002 f91d 	bl	800612c <RCCEx_PLL3_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ef8:	e006      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f10:	4b6a      	ldr	r3, [pc, #424]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f14:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1e:	4a67      	ldr	r2, [pc, #412]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f24:	e003      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003f3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f44:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	d053      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f58:	d033      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003f5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f5e:	d82c      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003f60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f64:	d02f      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003f66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f6a:	d826      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003f6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f70:	d02b      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003f72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f76:	d820      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f7c:	d012      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f82:	d81a      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d022      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8c:	d115      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f92:	3308      	adds	r3, #8
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f002 f816 	bl	8005fc8 <RCCEx_PLL2_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fa2:	e015      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa8:	3328      	adds	r3, #40	@ 0x28
 8003faa:	2101      	movs	r1, #1
 8003fac:	4618      	mov	r0, r3
 8003fae:	f002 f8bd 	bl	800612c <RCCEx_PLL3_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fc0:	e006      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003fc2:	bf00      	nop
 8003fc4:	e004      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003fc6:	bf00      	nop
 8003fc8:	e002      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003fca:	bf00      	nop
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003fd8:	4b38      	ldr	r3, [pc, #224]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fdc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe6:	4a35      	ldr	r2, [pc, #212]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fec:	e003      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ff2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004002:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004006:	2300      	movs	r3, #0
 8004008:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800400c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004010:	460b      	mov	r3, r1
 8004012:	4313      	orrs	r3, r2
 8004014:	d058      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800401e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004022:	d033      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004028:	d82c      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800402a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402e:	d02f      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004034:	d826      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004036:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800403a:	d02b      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800403c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004040:	d820      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004046:	d012      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800404c:	d81a      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d022      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004056:	d115      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405c:	3308      	adds	r3, #8
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f001 ffb1 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800406c:	e015      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800406e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004072:	3328      	adds	r3, #40	@ 0x28
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f002 f858 	bl	800612c <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004082:	e00a      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800408a:	e006      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800408c:	bf00      	nop
 800408e:	e004      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10e      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040a2:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040b2:	4a02      	ldr	r2, [pc, #8]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b8:	e006      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80040ba:	bf00      	nop
 80040bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80040d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80040de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	d037      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80040e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f2:	d00e      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80040f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f8:	d816      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d018      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80040fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004102:	d111      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004104:	4bc4      	ldr	r3, [pc, #784]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	4ac3      	ldr	r2, [pc, #780]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800410e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004110:	e00f      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004116:	3308      	adds	r3, #8
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f001 ff54 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004126:	e004      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800413a:	4bb7      	ldr	r3, [pc, #732]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800413c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004148:	4ab3      	ldr	r2, [pc, #716]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800414a:	430b      	orrs	r3, r1
 800414c:	6513      	str	r3, [r2, #80]	@ 0x50
 800414e:	e003      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004164:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004168:	2300      	movs	r3, #0
 800416a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800416e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004172:	460b      	mov	r3, r1
 8004174:	4313      	orrs	r3, r2
 8004176:	d039      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417e:	2b03      	cmp	r3, #3
 8004180:	d81c      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004182:	a201      	add	r2, pc, #4	@ (adr r2, 8004188 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004188:	080041c5 	.word	0x080041c5
 800418c:	08004199 	.word	0x08004199
 8004190:	080041a7 	.word	0x080041a7
 8004194:	080041c5 	.word	0x080041c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004198:	4b9f      	ldr	r3, [pc, #636]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	4a9e      	ldr	r2, [pc, #632]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800419e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041a4:	e00f      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041aa:	3308      	adds	r3, #8
 80041ac:	2102      	movs	r1, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 ff0a 	bl	8005fc8 <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041ba:	e004      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041c2:	e000      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80041c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041ce:	4b92      	ldr	r3, [pc, #584]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d2:	f023 0103 	bic.w	r1, r3, #3
 80041d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041dc:	4a8e      	ldr	r2, [pc, #568]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041de:	430b      	orrs	r3, r1
 80041e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041e2:	e003      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80041f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041fc:	2300      	movs	r3, #0
 80041fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004202:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	f000 8099 	beq.w	8004340 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800420e:	4b83      	ldr	r3, [pc, #524]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a82      	ldr	r2, [pc, #520]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004218:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800421a:	f7fe f819 	bl	8002250 <HAL_GetTick>
 800421e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004222:	e00b      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004224:	f7fe f814 	bl	8002250 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b64      	cmp	r3, #100	@ 0x64
 8004232:	d903      	bls.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800423a:	e005      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800423c:	4b77      	ldr	r3, [pc, #476]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ed      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800424c:	2b00      	cmp	r3, #0
 800424e:	d173      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004250:	4b71      	ldr	r3, [pc, #452]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004252:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800425c:	4053      	eors	r3, r2
 800425e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004262:	2b00      	cmp	r3, #0
 8004264:	d015      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004266:	4b6c      	ldr	r3, [pc, #432]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800426e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004272:	4b69      	ldr	r3, [pc, #420]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004276:	4a68      	ldr	r2, [pc, #416]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800427c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800427e:	4b66      	ldr	r3, [pc, #408]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004282:	4a65      	ldr	r2, [pc, #404]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004288:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800428a:	4a63      	ldr	r2, [pc, #396]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004290:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800429a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800429e:	d118      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd ffd6 	bl	8002250 <HAL_GetTick>
 80042a4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a8:	e00d      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fd ffd1 	bl	8002250 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042b4:	1ad2      	subs	r2, r2, r3
 80042b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d903      	bls.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c6:	4b54      	ldr	r3, [pc, #336]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0eb      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80042d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d129      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ea:	d10e      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80042ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80042f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042fc:	091a      	lsrs	r2, r3, #4
 80042fe:	4b48      	ldr	r3, [pc, #288]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004300:	4013      	ands	r3, r2
 8004302:	4a45      	ldr	r2, [pc, #276]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004304:	430b      	orrs	r3, r1
 8004306:	6113      	str	r3, [r2, #16]
 8004308:	e005      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800430a:	4b43      	ldr	r3, [pc, #268]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	4a42      	ldr	r2, [pc, #264]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004310:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004314:	6113      	str	r3, [r2, #16]
 8004316:	4b40      	ldr	r3, [pc, #256]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004318:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800431a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004326:	4a3c      	ldr	r2, [pc, #240]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004328:	430b      	orrs	r3, r1
 800432a:	6713      	str	r3, [r2, #112]	@ 0x70
 800432c:	e008      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800432e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004332:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004336:	e003      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800433c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f002 0301 	and.w	r3, r2, #1
 800434c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004356:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	f000 808f 	beq.w	8004480 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004366:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004368:	2b28      	cmp	r3, #40	@ 0x28
 800436a:	d871      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800436c:	a201      	add	r2, pc, #4	@ (adr r2, 8004374 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004459 	.word	0x08004459
 8004378:	08004451 	.word	0x08004451
 800437c:	08004451 	.word	0x08004451
 8004380:	08004451 	.word	0x08004451
 8004384:	08004451 	.word	0x08004451
 8004388:	08004451 	.word	0x08004451
 800438c:	08004451 	.word	0x08004451
 8004390:	08004451 	.word	0x08004451
 8004394:	08004425 	.word	0x08004425
 8004398:	08004451 	.word	0x08004451
 800439c:	08004451 	.word	0x08004451
 80043a0:	08004451 	.word	0x08004451
 80043a4:	08004451 	.word	0x08004451
 80043a8:	08004451 	.word	0x08004451
 80043ac:	08004451 	.word	0x08004451
 80043b0:	08004451 	.word	0x08004451
 80043b4:	0800443b 	.word	0x0800443b
 80043b8:	08004451 	.word	0x08004451
 80043bc:	08004451 	.word	0x08004451
 80043c0:	08004451 	.word	0x08004451
 80043c4:	08004451 	.word	0x08004451
 80043c8:	08004451 	.word	0x08004451
 80043cc:	08004451 	.word	0x08004451
 80043d0:	08004451 	.word	0x08004451
 80043d4:	08004459 	.word	0x08004459
 80043d8:	08004451 	.word	0x08004451
 80043dc:	08004451 	.word	0x08004451
 80043e0:	08004451 	.word	0x08004451
 80043e4:	08004451 	.word	0x08004451
 80043e8:	08004451 	.word	0x08004451
 80043ec:	08004451 	.word	0x08004451
 80043f0:	08004451 	.word	0x08004451
 80043f4:	08004459 	.word	0x08004459
 80043f8:	08004451 	.word	0x08004451
 80043fc:	08004451 	.word	0x08004451
 8004400:	08004451 	.word	0x08004451
 8004404:	08004451 	.word	0x08004451
 8004408:	08004451 	.word	0x08004451
 800440c:	08004451 	.word	0x08004451
 8004410:	08004451 	.word	0x08004451
 8004414:	08004459 	.word	0x08004459
 8004418:	58024400 	.word	0x58024400
 800441c:	58024800 	.word	0x58024800
 8004420:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004428:	3308      	adds	r3, #8
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f001 fdcb 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800443a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443e:	3328      	adds	r3, #40	@ 0x28
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f001 fe72 	bl	800612c <RCCEx_PLL3_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800444e:	e004      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004462:	4bbf      	ldr	r3, [pc, #764]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004466:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800446a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004470:	4abb      	ldr	r2, [pc, #748]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6553      	str	r3, [r2, #84]	@ 0x54
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800447c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f002 0302 	and.w	r3, r2, #2
 800448c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004496:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d041      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d824      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80044aa:	a201      	add	r2, pc, #4	@ (adr r2, 80044b0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044fd 	.word	0x080044fd
 80044b4:	080044c9 	.word	0x080044c9
 80044b8:	080044df 	.word	0x080044df
 80044bc:	080044fd 	.word	0x080044fd
 80044c0:	080044fd 	.word	0x080044fd
 80044c4:	080044fd 	.word	0x080044fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044cc:	3308      	adds	r3, #8
 80044ce:	2101      	movs	r1, #1
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 fd79 	bl	8005fc8 <RCCEx_PLL2_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044dc:	e00f      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e2:	3328      	adds	r3, #40	@ 0x28
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 fe20 	bl	800612c <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044f2:	e004      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80044fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004506:	4b96      	ldr	r3, [pc, #600]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450a:	f023 0107 	bic.w	r1, r3, #7
 800450e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004514:	4a92      	ldr	r2, [pc, #584]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004516:	430b      	orrs	r3, r1
 8004518:	6553      	str	r3, [r2, #84]	@ 0x54
 800451a:	e003      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004520:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f002 0304 	and.w	r3, r2, #4
 8004530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800453a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800453e:	460b      	mov	r3, r1
 8004540:	4313      	orrs	r3, r2
 8004542:	d044      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454c:	2b05      	cmp	r3, #5
 800454e:	d825      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004550:	a201      	add	r2, pc, #4	@ (adr r2, 8004558 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	080045a5 	.word	0x080045a5
 800455c:	08004571 	.word	0x08004571
 8004560:	08004587 	.word	0x08004587
 8004564:	080045a5 	.word	0x080045a5
 8004568:	080045a5 	.word	0x080045a5
 800456c:	080045a5 	.word	0x080045a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004574:	3308      	adds	r3, #8
 8004576:	2101      	movs	r1, #1
 8004578:	4618      	mov	r0, r3
 800457a:	f001 fd25 	bl	8005fc8 <RCCEx_PLL2_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004584:	e00f      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800458a:	3328      	adds	r3, #40	@ 0x28
 800458c:	2101      	movs	r1, #1
 800458e:	4618      	mov	r0, r3
 8004590:	f001 fdcc 	bl	800612c <RCCEx_PLL3_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800459a:	e004      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80045a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b2:	f023 0107 	bic.w	r1, r3, #7
 80045b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045be:	4a68      	ldr	r2, [pc, #416]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f002 0320 	and.w	r3, r2, #32
 80045da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80045e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d055      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80045ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045fa:	d033      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80045fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004600:	d82c      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004606:	d02f      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800460c:	d826      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800460e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004612:	d02b      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004614:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004618:	d820      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800461a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800461e:	d012      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004624:	d81a      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d022      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800462a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800462e:	d115      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004634:	3308      	adds	r3, #8
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f001 fcc5 	bl	8005fc8 <RCCEx_PLL2_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004644:	e015      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464a:	3328      	adds	r3, #40	@ 0x28
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f001 fd6c 	bl	800612c <RCCEx_PLL3_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800465a:	e00a      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004662:	e006      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004664:	bf00      	nop
 8004666:	e004      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004668:	bf00      	nop
 800466a:	e002      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800466c:	bf00      	nop
 800466e:	e000      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004672:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800467a:	4b39      	ldr	r3, [pc, #228]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800467c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800468a:	4a35      	ldr	r2, [pc, #212]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800468c:	430b      	orrs	r3, r1
 800468e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004690:	e003      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004696:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800469a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80046a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046b0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d058      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046c6:	d033      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80046c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046cc:	d82c      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80046ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d2:	d02f      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80046d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d8:	d826      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80046da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046de:	d02b      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80046e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046e4:	d820      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80046e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046ea:	d012      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f0:	d81a      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d022      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d115      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004700:	3308      	adds	r3, #8
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f001 fc5f 	bl	8005fc8 <RCCEx_PLL2_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004710:	e015      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004716:	3328      	adds	r3, #40	@ 0x28
 8004718:	2102      	movs	r1, #2
 800471a:	4618      	mov	r0, r3
 800471c:	f001 fd06 	bl	800612c <RCCEx_PLL3_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004726:	e00a      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800472e:	e006      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004730:	bf00      	nop
 8004732:	e004      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004734:	bf00      	nop
 8004736:	e002      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800473c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10e      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004746:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800474e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004752:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004756:	4a02      	ldr	r2, [pc, #8]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004758:	430b      	orrs	r3, r1
 800475a:	6593      	str	r3, [r2, #88]	@ 0x58
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004768:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004778:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004782:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d055      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800478c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004790:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004794:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004798:	d033      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800479a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800479e:	d82c      	bhi.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047a4:	d02f      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80047a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047aa:	d826      	bhi.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80047ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047b0:	d02b      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80047b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047b6:	d820      	bhi.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80047b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047bc:	d012      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80047be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047c2:	d81a      	bhi.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d022      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80047c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047cc:	d115      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d2:	3308      	adds	r3, #8
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 fbf6 	bl	8005fc8 <RCCEx_PLL2_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047e2:	e015      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e8:	3328      	adds	r3, #40	@ 0x28
 80047ea:	2102      	movs	r1, #2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 fc9d 	bl	800612c <RCCEx_PLL3_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047f8:	e00a      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004800:	e006      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004802:	bf00      	nop
 8004804:	e004      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004806:	bf00      	nop
 8004808:	e002      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800480a:	bf00      	nop
 800480c:	e000      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800480e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10b      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004818:	4ba0      	ldr	r3, [pc, #640]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004824:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004828:	4a9c      	ldr	r2, [pc, #624]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800482a:	430b      	orrs	r3, r1
 800482c:	6593      	str	r3, [r2, #88]	@ 0x58
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f002 0308 	and.w	r3, r2, #8
 8004844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004848:	2300      	movs	r3, #0
 800484a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800484e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d01e      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800485c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004864:	d10c      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486a:	3328      	adds	r3, #40	@ 0x28
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f001 fc5c 	bl	800612c <RCCEx_PLL3_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004880:	4b86      	ldr	r3, [pc, #536]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004884:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800488c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004890:	4a82      	ldr	r2, [pc, #520]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004892:	430b      	orrs	r3, r1
 8004894:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f002 0310 	and.w	r3, r2, #16
 80048a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048ac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80048b0:	460b      	mov	r3, r1
 80048b2:	4313      	orrs	r3, r2
 80048b4:	d01e      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80048b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c2:	d10c      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c8:	3328      	adds	r3, #40	@ 0x28
 80048ca:	2102      	movs	r1, #2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 fc2d 	bl	800612c <RCCEx_PLL3_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048de:	4b6f      	ldr	r3, [pc, #444]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ee:	4a6b      	ldr	r2, [pc, #428]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004900:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004902:	2300      	movs	r3, #0
 8004904:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004906:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800490a:	460b      	mov	r3, r1
 800490c:	4313      	orrs	r3, r2
 800490e:	d03e      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004914:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800491c:	d022      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800491e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004922:	d81b      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492c:	d00b      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800492e:	e015      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004934:	3308      	adds	r3, #8
 8004936:	2100      	movs	r1, #0
 8004938:	4618      	mov	r0, r3
 800493a:	f001 fb45 	bl	8005fc8 <RCCEx_PLL2_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004944:	e00f      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800494a:	3328      	adds	r3, #40	@ 0x28
 800494c:	2102      	movs	r1, #2
 800494e:	4618      	mov	r0, r3
 8004950:	f001 fbec 	bl	800612c <RCCEx_PLL3_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800495a:	e004      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004962:	e000      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004966:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800496e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004972:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800497a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800497e:	4a47      	ldr	r2, [pc, #284]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004980:	430b      	orrs	r3, r1
 8004982:	6593      	str	r3, [r2, #88]	@ 0x58
 8004984:	e003      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004986:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800498a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800498e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800499a:	673b      	str	r3, [r7, #112]	@ 0x70
 800499c:	2300      	movs	r3, #0
 800499e:	677b      	str	r3, [r7, #116]	@ 0x74
 80049a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80049a4:	460b      	mov	r3, r1
 80049a6:	4313      	orrs	r3, r2
 80049a8:	d03b      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049b6:	d01f      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80049b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049bc:	d818      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80049be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049c2:	d003      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80049c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049c8:	d007      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80049ca:	e011      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049cc:	4b33      	ldr	r3, [pc, #204]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	4a32      	ldr	r2, [pc, #200]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80049d8:	e00f      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049de:	3328      	adds	r3, #40	@ 0x28
 80049e0:	2101      	movs	r1, #1
 80049e2:	4618      	mov	r0, r3
 80049e4:	f001 fba2 	bl	800612c <RCCEx_PLL3_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80049ee:	e004      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049f6:	e000      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80049f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a02:	4b26      	ldr	r3, [pc, #152]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a12:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a18:	e003      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a30:	2300      	movs	r3, #0
 8004a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a34:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	d034      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a4c:	d007      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004a4e:	e011      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a50:	4b12      	ldr	r3, [pc, #72]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a54:	4a11      	ldr	r2, [pc, #68]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a5c:	e00e      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a62:	3308      	adds	r3, #8
 8004a64:	2102      	movs	r1, #2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 faae 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a72:	e003      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a84:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a92:	4a02      	ldr	r2, [pc, #8]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a94:	430b      	orrs	r3, r1
 8004a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a98:	e006      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004a9a:	bf00      	nop
 8004a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004ab4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004aba:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	d00c      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac8:	3328      	adds	r3, #40	@ 0x28
 8004aca:	2102      	movs	r1, #2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 fb2d 	bl	800612c <RCCEx_PLL3_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004aea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aec:	2300      	movs	r3, #0
 8004aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004af0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004af4:	460b      	mov	r3, r1
 8004af6:	4313      	orrs	r3, r2
 8004af8:	d036      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b04:	d018      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b0a:	d811      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b10:	d014      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b16:	d80b      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d011      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b20:	d106      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b22:	4bb7      	ldr	r3, [pc, #732]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	4ab6      	ldr	r2, [pc, #728]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b2e:	e008      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b36:	e004      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004b38:	bf00      	nop
 8004b3a:	e002      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004b3c:	bf00      	nop
 8004b3e:	e000      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b4a:	4bad      	ldr	r3, [pc, #692]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b58:	4aa9      	ldr	r2, [pc, #676]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b5e:	e003      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004b74:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b76:	2300      	movs	r3, #0
 8004b78:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b84:	4b9e      	ldr	r3, [pc, #632]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	4a9b      	ldr	r2, [pc, #620]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004baa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bb4:	4b92      	ldr	r3, [pc, #584]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bc2:	4a8f      	ldr	r2, [pc, #572]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004bd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bda:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004bde:	460b      	mov	r3, r1
 8004be0:	4313      	orrs	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004be4:	4b86      	ldr	r3, [pc, #536]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	4a85      	ldr	r2, [pc, #532]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bee:	6113      	str	r3, [r2, #16]
 8004bf0:	4b83      	ldr	r3, [pc, #524]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bf2:	6919      	ldr	r1, [r3, #16]
 8004bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004bfc:	4a80      	ldr	r2, [pc, #512]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c10:	2300      	movs	r3, #0
 8004c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c14:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c1e:	4b78      	ldr	r3, [pc, #480]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2c:	4a74      	ldr	r2, [pc, #464]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004c3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c40:	2300      	movs	r3, #0
 8004c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c44:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	d00a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c4e:	4b6c      	ldr	r3, [pc, #432]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c52:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5e:	4a68      	ldr	r2, [pc, #416]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c76:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	d011      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c84:	3308      	adds	r3, #8
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 f99d 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004c94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	2100      	movs	r1, #0
 8004cae:	6239      	str	r1, [r7, #32]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	d011      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f97d 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ce0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	2100      	movs	r1, #0
 8004cee:	61b9      	str	r1, [r7, #24]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	d011      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d04:	3308      	adds	r3, #8
 8004d06:	2102      	movs	r1, #2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f001 f95d 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	6139      	str	r1, [r7, #16]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	d011      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d44:	3328      	adds	r3, #40	@ 0x28
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 f9ef 	bl	800612c <RCCEx_PLL3_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	d011      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d84:	3328      	adds	r3, #40	@ 0x28
 8004d86:	2101      	movs	r1, #1
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 f9cf 	bl	800612c <RCCEx_PLL3_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004da0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	2100      	movs	r1, #0
 8004dae:	6039      	str	r1, [r7, #0]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	d011      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc4:	3328      	adds	r3, #40	@ 0x28
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f001 f9af 	bl	800612c <RCCEx_PLL3_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004de0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004de4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e000      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400

08004e04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b090      	sub	sp, #64	@ 0x40
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e12:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004e16:	430b      	orrs	r3, r1
 8004e18:	f040 8094 	bne.w	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004e1c:	4b9b      	ldr	r3, [pc, #620]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	f200 8087 	bhi.w	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e49 	.word	0x08004e49
 8004e38:	08004e71 	.word	0x08004e71
 8004e3c:	08004e99 	.word	0x08004e99
 8004e40:	08004f35 	.word	0x08004f35
 8004e44:	08004ec1 	.word	0x08004ec1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e48:	4b90      	ldr	r3, [pc, #576]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e54:	d108      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 ff62 	bl	8005d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e64:	f000 bc93 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e6c:	f000 bc8f 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e70:	4b86      	ldr	r3, [pc, #536]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e7c:	d108      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e7e:	f107 0318 	add.w	r3, r7, #24
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fca6 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e8c:	f000 bc7f 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e94:	f000 bc7b 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e98:	4b7c      	ldr	r3, [pc, #496]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ea4:	d108      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ea6:	f107 030c 	add.w	r3, r7, #12
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fde6 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eb4:	f000 bc6b 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ebc:	f000 bc67 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ec0:	4b72      	ldr	r3, [pc, #456]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ec4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ec8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004eca:	4b70      	ldr	r3, [pc, #448]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004edc:	4b6b      	ldr	r3, [pc, #428]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	4a6a      	ldr	r2, [pc, #424]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eee:	e01f      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ef0:	4b66      	ldr	r3, [pc, #408]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004efc:	d106      	bne.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f04:	d102      	bne.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004f06:	4b63      	ldr	r3, [pc, #396]	@ (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f0a:	e011      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f0c:	4b5f      	ldr	r3, [pc, #380]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f18:	d106      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f20:	d102      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004f22:	4b5d      	ldr	r3, [pc, #372]	@ (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f26:	e003      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004f2c:	f000 bc2f 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004f30:	f000 bc2d 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f34:	4b59      	ldr	r3, [pc, #356]	@ (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f38:	f000 bc29 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f40:	f000 bc25 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f48:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	f040 80a7 	bne.w	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004f52:	4b4e      	ldr	r3, [pc, #312]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f56:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8004f5a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f62:	d054      	beq.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f6a:	f200 808b 	bhi.w	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f74:	f000 8083 	beq.w	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f7e:	f200 8081 	bhi.w	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f88:	d02f      	beq.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f90:	d878      	bhi.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8004f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f9e:	d012      	beq.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8004fa0:	e070      	b.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004faa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 feb5 	bl	8005d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fbe:	e3e6      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fc4:	e3e3      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fc6:	4b31      	ldr	r3, [pc, #196]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fd4:	f107 0318 	add.w	r3, r7, #24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fbfb 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fe2:	e3d4      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fe8:	e3d1      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fea:	4b28      	ldr	r3, [pc, #160]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff6:	d107      	bne.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ff8:	f107 030c 	add.w	r3, r7, #12
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fd3d 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005006:	e3c2      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800500c:	e3bf      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800500e:	4b1f      	ldr	r3, [pc, #124]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005012:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005016:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005018:	4b1c      	ldr	r3, [pc, #112]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b04      	cmp	r3, #4
 8005022:	d10c      	bne.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800502a:	4b18      	ldr	r3, [pc, #96]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	08db      	lsrs	r3, r3, #3
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	4a16      	ldr	r2, [pc, #88]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005036:	fa22 f303 	lsr.w	r3, r2, r3
 800503a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800503c:	e01e      	b.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800503e:	4b13      	ldr	r3, [pc, #76]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800504a:	d106      	bne.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800504c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005052:	d102      	bne.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005054:	4b0f      	ldr	r3, [pc, #60]	@ (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005058:	e010      	b.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800505a:	4b0c      	ldr	r3, [pc, #48]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005066:	d106      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800506e:	d102      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005070:	4b09      	ldr	r3, [pc, #36]	@ (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005074:	e002      	b.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800507a:	e388      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800507c:	e387      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800507e:	4b07      	ldr	r3, [pc, #28]	@ (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005082:	e384      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005088:	e381      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800508a:	bf00      	nop
 800508c:	58024400 	.word	0x58024400
 8005090:	03d09000 	.word	0x03d09000
 8005094:	003d0900 	.word	0x003d0900
 8005098:	02dc6c00 	.word	0x02dc6c00
 800509c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80050a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80050a8:	430b      	orrs	r3, r1
 80050aa:	f040 809c 	bne.w	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80050ae:	4b9e      	ldr	r3, [pc, #632]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80050b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050be:	d054      	beq.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80050c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050c6:	f200 808b 	bhi.w	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050d0:	f000 8083 	beq.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050da:	f200 8081 	bhi.w	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050e4:	d02f      	beq.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050ec:	d878      	bhi.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050fa:	d012      	beq.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80050fc:	e070      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050fe:	4b8a      	ldr	r3, [pc, #552]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800510a:	d107      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800510c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fe07 	bl	8005d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800511a:	e338      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005120:	e335      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005122:	4b81      	ldr	r3, [pc, #516]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800512a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800512e:	d107      	bne.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005130:	f107 0318 	add.w	r3, r7, #24
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fb4d 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800513e:	e326      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005144:	e323      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005146:	4b78      	ldr	r3, [pc, #480]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800514e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005152:	d107      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005154:	f107 030c 	add.w	r3, r7, #12
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fc8f 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005162:	e314      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005168:	e311      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800516a:	4b6f      	ldr	r3, [pc, #444]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800516c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800516e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005174:	4b6c      	ldr	r3, [pc, #432]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d10c      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005186:	4b68      	ldr	r3, [pc, #416]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	4a66      	ldr	r2, [pc, #408]	@ (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005198:	e01e      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800519a:	4b63      	ldr	r3, [pc, #396]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a6:	d106      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80051a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ae:	d102      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051b0:	4b5f      	ldr	r3, [pc, #380]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80051b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051b4:	e010      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051b6:	4b5c      	ldr	r3, [pc, #368]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051c2:	d106      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80051c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ca:	d102      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051cc:	4b59      	ldr	r3, [pc, #356]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051d0:	e002      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80051d6:	e2da      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80051d8:	e2d9      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80051da:	4b57      	ldr	r3, [pc, #348]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80051dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051de:	e2d6      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051e4:	e2d3      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80051e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ea:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80051ee:	430b      	orrs	r3, r1
 80051f0:	f040 80a7 	bne.w	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80051f4:	4b4c      	ldr	r3, [pc, #304]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80051f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80051fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80051fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005200:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005204:	d055      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800520c:	f200 8096 	bhi.w	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005212:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005216:	f000 8084 	beq.w	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005220:	f200 808c 	bhi.w	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800522a:	d030      	beq.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800522c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005232:	f200 8083 	bhi.w	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800523c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005242:	d012      	beq.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005244:	e07a      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005246:	4b38      	ldr	r3, [pc, #224]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005252:	d107      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fd63 	bl	8005d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005262:	e294      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005268:	e291      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800526a:	4b2f      	ldr	r3, [pc, #188]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005276:	d107      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005278:	f107 0318 	add.w	r3, r7, #24
 800527c:	4618      	mov	r0, r3
 800527e:	f000 faa9 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005286:	e282      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800528c:	e27f      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800528e:	4b26      	ldr	r3, [pc, #152]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800529a:	d107      	bne.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800529c:	f107 030c 	add.w	r3, r7, #12
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fbeb 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052aa:	e270      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052b0:	e26d      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80052b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d10c      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80052c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052ce:	4b16      	ldr	r3, [pc, #88]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	08db      	lsrs	r3, r3, #3
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	4a14      	ldr	r2, [pc, #80]	@ (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80052da:	fa22 f303 	lsr.w	r3, r2, r3
 80052de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052e0:	e01e      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052e2:	4b11      	ldr	r3, [pc, #68]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ee:	d106      	bne.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80052f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052f6:	d102      	bne.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80052f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052fc:	e010      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800530a:	d106      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800530c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005312:	d102      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005314:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005318:	e002      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800531e:	e236      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005320:	e235      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005322:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005326:	e232      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005328:	58024400 	.word	0x58024400
 800532c:	03d09000 	.word	0x03d09000
 8005330:	003d0900 	.word	0x003d0900
 8005334:	02dc6c00 	.word	0x02dc6c00
 8005338:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005340:	e225      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005346:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800534a:	430b      	orrs	r3, r1
 800534c:	f040 8085 	bne.w	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005350:	4b9c      	ldr	r3, [pc, #624]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005354:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005358:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005360:	d06b      	beq.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005368:	d874      	bhi.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005370:	d056      	beq.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005378:	d86c      	bhi.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800537a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005380:	d03b      	beq.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005384:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005388:	d864      	bhi.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005390:	d021      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8005392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005398:	d85c      	bhi.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80053a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a6:	d004      	beq.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80053a8:	e054      	b.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80053aa:	f7fe fb5f 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 80053ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053b0:	e1ed      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053b2:	4b84      	ldr	r3, [pc, #528]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053be:	d107      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c0:	f107 0318 	add.w	r3, r7, #24
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fa05 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053ce:	e1de      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053d4:	e1db      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053d6:	4b7b      	ldr	r3, [pc, #492]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053e2:	d107      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e4:	f107 030c 	add.w	r3, r7, #12
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fb47 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053f2:	e1cc      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053f8:	e1c9      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053fa:	4b72      	ldr	r3, [pc, #456]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b04      	cmp	r3, #4
 8005404:	d109      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005406:	4b6f      	ldr	r3, [pc, #444]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	08db      	lsrs	r3, r3, #3
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	4a6d      	ldr	r2, [pc, #436]	@ (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005418:	e1b9      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800541e:	e1b6      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005420:	4b68      	ldr	r3, [pc, #416]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800542c:	d102      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800542e:	4b67      	ldr	r3, [pc, #412]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005432:	e1ac      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005438:	e1a9      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800543a:	4b62      	ldr	r3, [pc, #392]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005446:	d102      	bne.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8005448:	4b61      	ldr	r3, [pc, #388]	@ (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800544a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800544c:	e19f      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005452:	e19c      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005458:	e199      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800545a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800545e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005462:	430b      	orrs	r3, r1
 8005464:	d173      	bne.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005466:	4b57      	ldr	r3, [pc, #348]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800546e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005476:	d02f      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8005478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800547e:	d863      	bhi.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8005480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800548c:	d012      	beq.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800548e:	e05b      	b.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005490:	4b4c      	ldr	r3, [pc, #304]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800549c:	d107      	bne.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800549e:	f107 0318 	add.w	r3, r7, #24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f996 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054ac:	e16f      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054b2:	e16c      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054b4:	4b43      	ldr	r3, [pc, #268]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054c0:	d107      	bne.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fad8 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054d0:	e15d      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054d6:	e15a      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054d8:	4b3a      	ldr	r3, [pc, #232]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80054da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054e2:	4b38      	ldr	r3, [pc, #224]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d10c      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80054ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054f4:	4b33      	ldr	r3, [pc, #204]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	08db      	lsrs	r3, r3, #3
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	4a32      	ldr	r2, [pc, #200]	@ (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
 8005504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005506:	e01e      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005508:	4b2e      	ldr	r3, [pc, #184]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005514:	d106      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005518:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800551c:	d102      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800551e:	4b2b      	ldr	r3, [pc, #172]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005522:	e010      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005524:	4b27      	ldr	r3, [pc, #156]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005530:	d106      	bne.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005538:	d102      	bne.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800553a:	4b25      	ldr	r3, [pc, #148]	@ (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800553c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800553e:	e002      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005544:	e123      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005546:	e122      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800554c:	e11f      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800554e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005552:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005556:	430b      	orrs	r3, r1
 8005558:	d13c      	bne.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800555a:	4b1a      	ldr	r3, [pc, #104]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800555c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800555e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005562:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005566:	2b00      	cmp	r3, #0
 8005568:	d004      	beq.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005570:	d012      	beq.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005572:	e023      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005574:	4b13      	ldr	r3, [pc, #76]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005580:	d107      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fbcc 	bl	8005d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005590:	e0fd      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005596:	e0fa      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005598:	4b0a      	ldr	r3, [pc, #40]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055a4:	d107      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055a6:	f107 0318 	add.w	r3, r7, #24
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f912 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055b4:	e0eb      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055ba:	e0e8      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055c0:	e0e5      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80055c2:	bf00      	nop
 80055c4:	58024400 	.word	0x58024400
 80055c8:	03d09000 	.word	0x03d09000
 80055cc:	003d0900 	.word	0x003d0900
 80055d0:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80055d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80055dc:	430b      	orrs	r3, r1
 80055de:	f040 8085 	bne.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80055e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80055e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80055ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80055ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055f2:	d06b      	beq.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80055f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055fa:	d874      	bhi.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80055fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005602:	d056      	beq.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560a:	d86c      	bhi.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005612:	d03b      	beq.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8005614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005616:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800561a:	d864      	bhi.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800561c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005622:	d021      	beq.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800562a:	d85c      	bhi.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800562c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8005632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005638:	d004      	beq.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800563a:	e054      	b.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800563c:	f000 f8b4 	bl	80057a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005640:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005642:	e0a4      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005644:	4b54      	ldr	r3, [pc, #336]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800564c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005650:	d107      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005652:	f107 0318 	add.w	r3, r7, #24
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f8bc 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005660:	e095      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005666:	e092      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005668:	4b4b      	ldr	r3, [pc, #300]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005674:	d107      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005676:	f107 030c 	add.w	r3, r7, #12
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f9fe 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005684:	e083      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800568a:	e080      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800568c:	4b42      	ldr	r3, [pc, #264]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b04      	cmp	r3, #4
 8005696:	d109      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005698:	4b3f      	ldr	r3, [pc, #252]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	08db      	lsrs	r3, r3, #3
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	4a3e      	ldr	r2, [pc, #248]	@ (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
 80056a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056aa:	e070      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056b0:	e06d      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80056b2:	4b39      	ldr	r3, [pc, #228]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056be:	d102      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80056c0:	4b37      	ldr	r3, [pc, #220]	@ (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056c4:	e063      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ca:	e060      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056cc:	4b32      	ldr	r3, [pc, #200]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056d8:	d102      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80056da:	4b32      	ldr	r3, [pc, #200]	@ (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80056dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056de:	e056      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056e4:	e053      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ea:	e050      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80056ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80056f4:	430b      	orrs	r3, r1
 80056f6:	d148      	bne.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80056f8:	4b27      	ldr	r3, [pc, #156]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80056fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005700:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005708:	d02a      	beq.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005710:	d838      	bhi.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800571e:	d00d      	beq.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005720:	e030      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005722:	4b1d      	ldr	r3, [pc, #116]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800572e:	d102      	bne.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8005730:	4b1c      	ldr	r3, [pc, #112]	@ (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005734:	e02b      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800573a:	e028      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800573c:	4b16      	ldr	r3, [pc, #88]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005744:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005748:	d107      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800574a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fae8 	bl	8005d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005758:	e019      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800575e:	e016      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005760:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800576c:	d107      	bne.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800576e:	f107 0318 	add.w	r3, r7, #24
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f82e 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800577c:	e007      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005782:	e004      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005788:	e001      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800578e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005790:	4618      	mov	r0, r3
 8005792:	3740      	adds	r7, #64	@ 0x40
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	58024400 	.word	0x58024400
 800579c:	03d09000 	.word	0x03d09000
 80057a0:	003d0900 	.word	0x003d0900
 80057a4:	02dc6c00 	.word	0x02dc6c00

080057a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80057ac:	f7fe f92e 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	091b      	lsrs	r3, r3, #4
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	4904      	ldr	r1, [pc, #16]	@ (80057d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80057be:	5ccb      	ldrb	r3, [r1, r3]
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	58024400 	.word	0x58024400
 80057d0:	0801018c 	.word	0x0801018c

080057d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	@ 0x24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057dc:	4ba1      	ldr	r3, [pc, #644]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80057e6:	4b9f      	ldr	r3, [pc, #636]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	0b1b      	lsrs	r3, r3, #12
 80057ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80057f2:	4b9c      	ldr	r3, [pc, #624]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	091b      	lsrs	r3, r3, #4
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80057fe:	4b99      	ldr	r3, [pc, #612]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005802:	08db      	lsrs	r3, r3, #3
 8005804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8111 	beq.w	8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b02      	cmp	r3, #2
 8005826:	f000 8083 	beq.w	8005930 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b02      	cmp	r3, #2
 800582e:	f200 80a1 	bhi.w	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d056      	beq.n	80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800583e:	e099      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005840:	4b88      	ldr	r3, [pc, #544]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d02d      	beq.n	80058a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800584c:	4b85      	ldr	r3, [pc, #532]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	08db      	lsrs	r3, r3, #3
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	4a84      	ldr	r2, [pc, #528]	@ (8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b7b      	ldr	r3, [pc, #492]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a03 	vldr	s12, [r7, #12]
 800588a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80058a6:	e087      	b.n	80059b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ea:	e065      	b.n	80059b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b59      	ldr	r3, [pc, #356]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005912:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800592e:	e043      	b.n	80059b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005942:	4b48      	ldr	r3, [pc, #288]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a03 	vldr	s12, [r7, #12]
 8005956:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005972:	e021      	b.n	80059b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005986:	4b37      	ldr	r3, [pc, #220]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005996:	ed97 6a03 	vldr	s12, [r7, #12]
 800599a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800599e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80059b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	0a5b      	lsrs	r3, r3, #9
 80059be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059de:	ee17 2a90 	vmov	r2, s15
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80059e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	0c1b      	lsrs	r3, r3, #16
 80059ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0c:	ee17 2a90 	vmov	r2, s15
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005a14:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a18:	0e1b      	lsrs	r3, r3, #24
 8005a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3a:	ee17 2a90 	vmov	r2, s15
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a42:	e008      	b.n	8005a56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	609a      	str	r2, [r3, #8]
}
 8005a56:	bf00      	nop
 8005a58:	3724      	adds	r7, #36	@ 0x24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	58024400 	.word	0x58024400
 8005a68:	03d09000 	.word	0x03d09000
 8005a6c:	46000000 	.word	0x46000000
 8005a70:	4c742400 	.word	0x4c742400
 8005a74:	4a742400 	.word	0x4a742400
 8005a78:	4c371b00 	.word	0x4c371b00

08005a7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b089      	sub	sp, #36	@ 0x24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a84:	4ba1      	ldr	r3, [pc, #644]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005a8e:	4b9f      	ldr	r3, [pc, #636]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	0d1b      	lsrs	r3, r3, #20
 8005a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005a9a:	4b9c      	ldr	r3, [pc, #624]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	0a1b      	lsrs	r3, r3, #8
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005aa6:	4b99      	ldr	r3, [pc, #612]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aaa:	08db      	lsrs	r3, r3, #3
 8005aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8111 	beq.w	8005cec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	f000 8083 	beq.w	8005bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	f200 80a1 	bhi.w	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d056      	beq.n	8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005ae6:	e099      	b.n	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae8:	4b88      	ldr	r3, [pc, #544]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d02d      	beq.n	8005b50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005af4:	4b85      	ldr	r3, [pc, #532]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	08db      	lsrs	r3, r3, #3
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	4a84      	ldr	r2, [pc, #528]	@ (8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
 8005b04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	ee07 3a90 	vmov	s15, r3
 8005b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1e:	4b7b      	ldr	r3, [pc, #492]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b4e:	e087      	b.n	8005c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b6a      	ldr	r3, [pc, #424]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b92:	e065      	b.n	8005c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba6:	4b59      	ldr	r3, [pc, #356]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bd6:	e043      	b.n	8005c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bea:	4b48      	ldr	r3, [pc, #288]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c1a:	e021      	b.n	8005c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2e:	4b37      	ldr	r3, [pc, #220]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c60:	4b2a      	ldr	r3, [pc, #168]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c64:	0a5b      	lsrs	r3, r3, #9
 8005c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c86:	ee17 2a90 	vmov	r2, s15
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	0c1b      	lsrs	r3, r3, #16
 8005c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c98:	ee07 3a90 	vmov	s15, r3
 8005c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb4:	ee17 2a90 	vmov	r2, s15
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005cbc:	4b13      	ldr	r3, [pc, #76]	@ (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc0:	0e1b      	lsrs	r3, r3, #24
 8005cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce2:	ee17 2a90 	vmov	r2, s15
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005cea:	e008      	b.n	8005cfe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	609a      	str	r2, [r3, #8]
}
 8005cfe:	bf00      	nop
 8005d00:	3724      	adds	r7, #36	@ 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	58024400 	.word	0x58024400
 8005d10:	03d09000 	.word	0x03d09000
 8005d14:	46000000 	.word	0x46000000
 8005d18:	4c742400 	.word	0x4c742400
 8005d1c:	4a742400 	.word	0x4a742400
 8005d20:	4c371b00 	.word	0x4c371b00

08005d24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b089      	sub	sp, #36	@ 0x24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d2c:	4ba0      	ldr	r3, [pc, #640]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005d36:	4b9e      	ldr	r3, [pc, #632]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005d42:	4b9b      	ldr	r3, [pc, #620]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d4c:	4b98      	ldr	r3, [pc, #608]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d50:	08db      	lsrs	r3, r3, #3
 8005d52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	fb02 f303 	mul.w	r3, r2, r3
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8111 	beq.w	8005f92 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	f000 8083 	beq.w	8005e7e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	f200 80a1 	bhi.w	8005ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d056      	beq.n	8005e3a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005d8c:	e099      	b.n	8005ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d8e:	4b88      	ldr	r3, [pc, #544]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d02d      	beq.n	8005df6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d9a:	4b85      	ldr	r3, [pc, #532]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	08db      	lsrs	r3, r3, #3
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	4a83      	ldr	r2, [pc, #524]	@ (8005fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	ee07 3a90 	vmov	s15, r3
 8005dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc4:	4b7a      	ldr	r3, [pc, #488]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8005fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005df4:	e087      	b.n	8005f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e00:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8005fbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005e04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e08:	4b69      	ldr	r3, [pc, #420]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e10:	ee07 3a90 	vmov	s15, r3
 8005e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e18:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8005fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e38:	e065      	b.n	8005f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e44:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4c:	4b58      	ldr	r3, [pc, #352]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e54:	ee07 3a90 	vmov	s15, r3
 8005e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e60:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8005fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e7c:	e043      	b.n	8005f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	ee07 3a90 	vmov	s15, r3
 8005e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e88:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e90:	4b47      	ldr	r3, [pc, #284]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ea4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8005fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ec0:	e021      	b.n	8005f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ecc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005fbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed4:	4b36      	ldr	r3, [pc, #216]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8005fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f04:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005f06:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0a:	0a5b      	lsrs	r3, r3, #9
 8005f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f2c:	ee17 2a90 	vmov	r2, s15
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005f34:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f38:	0c1b      	lsrs	r3, r3, #16
 8005f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5a:	ee17 2a90 	vmov	r2, s15
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005f62:	4b13      	ldr	r3, [pc, #76]	@ (8005fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f66:	0e1b      	lsrs	r3, r3, #24
 8005f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f88:	ee17 2a90 	vmov	r2, s15
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005f90:	e008      	b.n	8005fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	609a      	str	r2, [r3, #8]
}
 8005fa4:	bf00      	nop
 8005fa6:	3724      	adds	r7, #36	@ 0x24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	03d09000 	.word	0x03d09000
 8005fb8:	46000000 	.word	0x46000000
 8005fbc:	4c742400 	.word	0x4c742400
 8005fc0:	4a742400 	.word	0x4a742400
 8005fc4:	4c371b00 	.word	0x4c371b00

08005fc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fd6:	4b53      	ldr	r3, [pc, #332]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d101      	bne.n	8005fe6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e099      	b.n	800611a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a4e      	ldr	r2, [pc, #312]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 8005fec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff2:	f7fc f92d 	bl	8002250 <HAL_GetTick>
 8005ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ff8:	e008      	b.n	800600c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ffa:	f7fc f929 	bl	8002250 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e086      	b.n	800611a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800600c:	4b45      	ldr	r3, [pc, #276]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1f0      	bne.n	8005ffa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006018:	4b42      	ldr	r3, [pc, #264]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 800601a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	031b      	lsls	r3, r3, #12
 8006026:	493f      	ldr	r1, [pc, #252]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006028:	4313      	orrs	r3, r2
 800602a:	628b      	str	r3, [r1, #40]	@ 0x28
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	3b01      	subs	r3, #1
 8006032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	3b01      	subs	r3, #1
 800603c:	025b      	lsls	r3, r3, #9
 800603e:	b29b      	uxth	r3, r3
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	3b01      	subs	r3, #1
 8006048:	041b      	lsls	r3, r3, #16
 800604a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	3b01      	subs	r3, #1
 8006056:	061b      	lsls	r3, r3, #24
 8006058:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800605c:	4931      	ldr	r1, [pc, #196]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 800605e:	4313      	orrs	r3, r2
 8006060:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006062:	4b30      	ldr	r3, [pc, #192]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	492d      	ldr	r1, [pc, #180]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006070:	4313      	orrs	r3, r2
 8006072:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006074:	4b2b      	ldr	r3, [pc, #172]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	f023 0220 	bic.w	r2, r3, #32
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	4928      	ldr	r1, [pc, #160]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006082:	4313      	orrs	r3, r2
 8006084:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006086:	4b27      	ldr	r3, [pc, #156]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608a:	4a26      	ldr	r2, [pc, #152]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 800608c:	f023 0310 	bic.w	r3, r3, #16
 8006090:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006092:	4b24      	ldr	r3, [pc, #144]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006096:	4b24      	ldr	r3, [pc, #144]	@ (8006128 <RCCEx_PLL2_Config+0x160>)
 8006098:	4013      	ands	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	69d2      	ldr	r2, [r2, #28]
 800609e:	00d2      	lsls	r2, r2, #3
 80060a0:	4920      	ldr	r1, [pc, #128]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060ac:	f043 0310 	orr.w	r3, r3, #16
 80060b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d106      	bne.n	80060c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	4a19      	ldr	r2, [pc, #100]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060c4:	e00f      	b.n	80060e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d106      	bne.n	80060da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060cc:	4b15      	ldr	r3, [pc, #84]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	4a14      	ldr	r2, [pc, #80]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060d8:	e005      	b.n	80060e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060da:	4b12      	ldr	r3, [pc, #72]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060de:	4a11      	ldr	r2, [pc, #68]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80060e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f2:	f7fc f8ad 	bl	8002250 <HAL_GetTick>
 80060f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060f8:	e008      	b.n	800610c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060fa:	f7fc f8a9 	bl	8002250 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e006      	b.n	800611a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800610c:	4b05      	ldr	r3, [pc, #20]	@ (8006124 <RCCEx_PLL2_Config+0x15c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006118:	7bfb      	ldrb	r3, [r7, #15]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
 8006128:	ffff0007 	.word	0xffff0007

0800612c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800613a:	4b53      	ldr	r3, [pc, #332]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 800613c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b03      	cmp	r3, #3
 8006144:	d101      	bne.n	800614a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e099      	b.n	800627e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800614a:	4b4f      	ldr	r3, [pc, #316]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a4e      	ldr	r2, [pc, #312]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006156:	f7fc f87b 	bl	8002250 <HAL_GetTick>
 800615a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800615c:	e008      	b.n	8006170 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800615e:	f7fc f877 	bl	8002250 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e086      	b.n	800627e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006170:	4b45      	ldr	r3, [pc, #276]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f0      	bne.n	800615e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800617c:	4b42      	ldr	r3, [pc, #264]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 800617e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006180:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	051b      	lsls	r3, r3, #20
 800618a:	493f      	ldr	r1, [pc, #252]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 800618c:	4313      	orrs	r3, r2
 800618e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	3b01      	subs	r3, #1
 8006196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	3b01      	subs	r3, #1
 80061a0:	025b      	lsls	r3, r3, #9
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	041b      	lsls	r3, r3, #16
 80061ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	061b      	lsls	r3, r3, #24
 80061bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061c0:	4931      	ldr	r1, [pc, #196]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061c6:	4b30      	ldr	r3, [pc, #192]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	492d      	ldr	r1, [pc, #180]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	4928      	ldr	r1, [pc, #160]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80061ea:	4b27      	ldr	r3, [pc, #156]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ee:	4a26      	ldr	r2, [pc, #152]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061f6:	4b24      	ldr	r3, [pc, #144]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061fa:	4b24      	ldr	r3, [pc, #144]	@ (800628c <RCCEx_PLL3_Config+0x160>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	69d2      	ldr	r2, [r2, #28]
 8006202:	00d2      	lsls	r2, r2, #3
 8006204:	4920      	ldr	r1, [pc, #128]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006206:	4313      	orrs	r3, r2
 8006208:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800620a:	4b1f      	ldr	r3, [pc, #124]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 800620c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620e:	4a1e      	ldr	r2, [pc, #120]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006214:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800621c:	4b1a      	ldr	r3, [pc, #104]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 800621e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006220:	4a19      	ldr	r2, [pc, #100]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006222:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006226:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006228:	e00f      	b.n	800624a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d106      	bne.n	800623e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006230:	4b15      	ldr	r3, [pc, #84]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006234:	4a14      	ldr	r2, [pc, #80]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006236:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800623a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800623c:	e005      	b.n	800624a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800623e:	4b12      	ldr	r3, [pc, #72]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006242:	4a11      	ldr	r2, [pc, #68]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006244:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006248:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800624a:	4b0f      	ldr	r3, [pc, #60]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a0e      	ldr	r2, [pc, #56]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006256:	f7fb fffb 	bl	8002250 <HAL_GetTick>
 800625a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800625c:	e008      	b.n	8006270 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800625e:	f7fb fff7 	bl	8002250 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d901      	bls.n	8006270 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e006      	b.n	800627e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f0      	beq.n	800625e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	58024400 	.word	0x58024400
 800628c:	ffff0007 	.word	0xffff0007

08006290 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	@ 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e075      	b.n	800638e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d105      	bne.n	80062ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7fb fa99 	bl	80017ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2204      	movs	r2, #4
 80062be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f868 	bl	8006398 <HAL_SD_InitCard>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e05d      	b.n	800638e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fdb5 	bl	8006e48 <HAL_SD_GetCardStatus>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e052      	b.n	800638e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80062e8:	7e3b      	ldrb	r3, [r7, #24]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80062ee:	7e7b      	ldrb	r3, [r7, #25]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d10a      	bne.n	8006312 <HAL_SD_Init+0x82>
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_SD_Init+0x78>
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800630e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006310:	e00b      	b.n	800632a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	2b01      	cmp	r3, #1
 8006318:	d104      	bne.n	8006324 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006320:	659a      	str	r2, [r3, #88]	@ 0x58
 8006322:	e002      	b.n	800632a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	4619      	mov	r1, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fe73 	bl	800701c <HAL_SD_ConfigWideBusOperation>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e026      	b.n	800638e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006340:	f7fb ff86 	bl	8002250 <HAL_GetTick>
 8006344:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006346:	e011      	b.n	800636c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006348:	f7fb ff82 	bl	8002250 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d109      	bne.n	800636c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800635e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e010      	b.n	800638e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 ff67 	bl	8007240 <HAL_SD_GetCardState>
 8006372:	4603      	mov	r3, r0
 8006374:	2b04      	cmp	r3, #4
 8006376:	d1e7      	bne.n	8006348 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3728      	adds	r7, #40	@ 0x28
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006398:	b590      	push	{r4, r7, lr}
 800639a:	b08d      	sub	sp, #52	@ 0x34
 800639c:	af02      	add	r7, sp, #8
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80063b0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80063b4:	f04f 0100 	mov.w	r1, #0
 80063b8:	f7fe fd24 	bl	8004e04 <HAL_RCCEx_GetPeriphCLKFreq>
 80063bc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80063d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e070      	b.n	80064ba <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	0a1b      	lsrs	r3, r3, #8
 80063dc:	4a39      	ldr	r2, [pc, #228]	@ (80064c4 <HAL_SD_InitCard+0x12c>)
 80063de:	fba2 2303 	umull	r2, r3, r2, r3
 80063e2:	091b      	lsrs	r3, r3, #4
 80063e4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681c      	ldr	r4, [r3, #0]
 80063ea:	466a      	mov	r2, sp
 80063ec:	f107 0318 	add.w	r3, r7, #24
 80063f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80063f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80063f8:	f107 030c 	add.w	r3, r7, #12
 80063fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063fe:	4620      	mov	r0, r4
 8006400:	f004 fb3c 	bl	800aa7c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f004 fb7f 	bl	800ab0c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d005      	beq.n	8006420 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006426:	4a28      	ldr	r2, [pc, #160]	@ (80064c8 <HAL_SD_InitCard+0x130>)
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	fbb2 f3f3 	udiv	r3, r2, r3
 800642e:	3301      	adds	r3, #1
 8006430:	4618      	mov	r0, r3
 8006432:	f7fb ff19 	bl	8002268 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fff0 	bl	800741c <SD_PowerON>
 800643c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e02e      	b.n	80064ba <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 ff0f 	bl	8007280 <SD_InitCard>
 8006462:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e01b      	b.n	80064ba <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800648a:	4618      	mov	r0, r3
 800648c:	f004 fbd4 	bl	800ac38 <SDMMC_CmdBlockLength>
 8006490:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00f      	beq.n	80064b8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a0b      	ldr	r2, [pc, #44]	@ (80064cc <HAL_SD_InitCard+0x134>)
 800649e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	372c      	adds	r7, #44	@ 0x2c
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd90      	pop	{r4, r7, pc}
 80064c2:	bf00      	nop
 80064c4:	014f8b59 	.word	0x014f8b59
 80064c8:	00012110 	.word	0x00012110
 80064cc:	1fe00fff 	.word	0x1fe00fff

080064d0 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b092      	sub	sp, #72	@ 0x48
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80064de:	f7fb feb7 	bl	8002250 <HAL_GetTick>
 80064e2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d107      	bne.n	8006502 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e167      	b.n	80067d2 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b01      	cmp	r3, #1
 800650c:	f040 815a 	bne.w	80067c4 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006516:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	441a      	add	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006520:	429a      	cmp	r2, r3
 8006522:	d907      	bls.n	8006534 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006528:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e14e      	b.n	80067d2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2203      	movs	r2, #3
 8006538:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2200      	movs	r2, #0
 8006542:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006548:	2b01      	cmp	r3, #1
 800654a:	d002      	beq.n	8006552 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800654c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654e:	025b      	lsls	r3, r3, #9
 8006550:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006552:	f04f 33ff 	mov.w	r3, #4294967295
 8006556:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	025b      	lsls	r3, r3, #9
 800655c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800655e:	2390      	movs	r3, #144	@ 0x90
 8006560:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006562:	2302      	movs	r3, #2
 8006564:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800656a:	2300      	movs	r3, #0
 800656c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f107 0214 	add.w	r2, r7, #20
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f004 fb31 	bl	800abe0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800658c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d90a      	bls.n	80065aa <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2202      	movs	r2, #2
 8006598:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80065a0:	4618      	mov	r0, r3
 80065a2:	f004 fb8f 	bl	800acc4 <SDMMC_CmdReadMultiBlock>
 80065a6:	6478      	str	r0, [r7, #68]	@ 0x44
 80065a8:	e009      	b.n	80065be <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80065b6:	4618      	mov	r0, r3
 80065b8:	f004 fb61 	bl	800ac7e <SDMMC_CmdReadSingleBlock>
 80065bc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80065be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d012      	beq.n	80065ea <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a84      	ldr	r2, [pc, #528]	@ (80067dc <HAL_SD_ReadBlocks+0x30c>)
 80065ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d2:	431a      	orrs	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e0f3      	b.n	80067d2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80065ee:	e058      	b.n	80066a2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d033      	beq.n	8006666 <HAL_SD_ReadBlocks+0x196>
 80065fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006600:	2b1f      	cmp	r3, #31
 8006602:	d930      	bls.n	8006666 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006604:	2300      	movs	r3, #0
 8006606:	643b      	str	r3, [r7, #64]	@ 0x40
 8006608:	e027      	b.n	800665a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f004 fa5e 	bl	800aad0 <SDMMC_ReadFIFO>
 8006614:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006618:	b2da      	uxtb	r2, r3
 800661a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800661e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006620:	3301      	adds	r3, #1
 8006622:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006626:	0a1b      	lsrs	r3, r3, #8
 8006628:	b2da      	uxtb	r2, r3
 800662a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800662e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006630:	3301      	adds	r3, #1
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	b2da      	uxtb	r2, r3
 800663a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800663e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006640:	3301      	adds	r3, #1
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006646:	0e1b      	lsrs	r3, r3, #24
 8006648:	b2da      	uxtb	r2, r3
 800664a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800664e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006650:	3301      	adds	r3, #1
 8006652:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8006654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006656:	3301      	adds	r3, #1
 8006658:	643b      	str	r3, [r7, #64]	@ 0x40
 800665a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800665c:	2b07      	cmp	r3, #7
 800665e:	d9d4      	bls.n	800660a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006662:	3b20      	subs	r3, #32
 8006664:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006666:	f7fb fdf3 	bl	8002250 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006672:	429a      	cmp	r2, r3
 8006674:	d902      	bls.n	800667c <HAL_SD_ReadBlocks+0x1ac>
 8006676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006678:	2b00      	cmp	r3, #0
 800667a:	d112      	bne.n	80066a2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a56      	ldr	r2, [pc, #344]	@ (80067dc <HAL_SD_ReadBlocks+0x30c>)
 8006682:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006688:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e097      	b.n	80067d2 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a8:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d09f      	beq.n	80065f0 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066be:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d022      	beq.n	8006714 <HAL_SD_ReadBlocks+0x244>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d91f      	bls.n	8006714 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d01b      	beq.n	8006714 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f004 fb59 	bl	800ad98 <SDMMC_CmdStopTransfer>
 80066e6:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80066e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d012      	beq.n	8006714 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a3a      	ldr	r2, [pc, #232]	@ (80067dc <HAL_SD_ReadBlocks+0x30c>)
 80066f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e05e      	b.n	80067d2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d012      	beq.n	8006748 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2d      	ldr	r2, [pc, #180]	@ (80067dc <HAL_SD_ReadBlocks+0x30c>)
 8006728:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800672e:	f043 0208 	orr.w	r2, r3, #8
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e044      	b.n	80067d2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d012      	beq.n	800677c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a20      	ldr	r2, [pc, #128]	@ (80067dc <HAL_SD_ReadBlocks+0x30c>)
 800675c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006762:	f043 0202 	orr.w	r2, r3, #2
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e02a      	b.n	80067d2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d012      	beq.n	80067b0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a13      	ldr	r2, [pc, #76]	@ (80067dc <HAL_SD_ReadBlocks+0x30c>)
 8006790:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006796:	f043 0220 	orr.w	r2, r3, #32
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e010      	b.n	80067d2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a0a      	ldr	r2, [pc, #40]	@ (80067e0 <HAL_SD_ReadBlocks+0x310>)
 80067b6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e006      	b.n	80067d2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
  }
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3748      	adds	r7, #72	@ 0x48
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	1fe00fff 	.word	0x1fe00fff
 80067e0:	18000f3a 	.word	0x18000f3a

080067e4 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b092      	sub	sp, #72	@ 0x48
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80067f2:	f7fb fd2d 	bl	8002250 <HAL_GetTick>
 80067f6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d107      	bne.n	8006816 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e16b      	b.n	8006aee <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b01      	cmp	r3, #1
 8006820:	f040 815e 	bne.w	8006ae0 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800682a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	441a      	add	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006834:	429a      	cmp	r2, r3
 8006836:	d907      	bls.n	8006848 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e152      	b.n	8006aee <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2203      	movs	r2, #3
 800684c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2200      	movs	r2, #0
 8006856:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685c:	2b01      	cmp	r3, #1
 800685e:	d002      	beq.n	8006866 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	025b      	lsls	r3, r3, #9
 8006864:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006866:	f04f 33ff 	mov.w	r3, #4294967295
 800686a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	025b      	lsls	r3, r3, #9
 8006870:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006872:	2390      	movs	r3, #144	@ 0x90
 8006874:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006876:	2300      	movs	r3, #0
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800687a:	2300      	movs	r3, #0
 800687c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800687e:	2300      	movs	r3, #0
 8006880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f107 0218 	add.w	r2, r7, #24
 800688a:	4611      	mov	r1, r2
 800688c:	4618      	mov	r0, r3
 800688e:	f004 f9a7 	bl	800abe0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068a0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d90a      	bls.n	80068be <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068b4:	4618      	mov	r0, r3
 80068b6:	f004 fa4b 	bl	800ad50 <SDMMC_CmdWriteMultiBlock>
 80068ba:	6478      	str	r0, [r7, #68]	@ 0x44
 80068bc:	e009      	b.n	80068d2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2210      	movs	r2, #16
 80068c2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068ca:	4618      	mov	r0, r3
 80068cc:	f004 fa1d 	bl	800ad0a <SDMMC_CmdWriteSingleBlock>
 80068d0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80068d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d012      	beq.n	80068fe <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a86      	ldr	r2, [pc, #536]	@ (8006af8 <HAL_SD_WriteBlocks+0x314>)
 80068de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e6:	431a      	orrs	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e0f7      	b.n	8006aee <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006902:	e05c      	b.n	80069be <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d037      	beq.n	8006982 <HAL_SD_WriteBlocks+0x19e>
 8006912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006914:	2b1f      	cmp	r3, #31
 8006916:	d934      	bls.n	8006982 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006918:	2300      	movs	r3, #0
 800691a:	643b      	str	r3, [r7, #64]	@ 0x40
 800691c:	e02b      	b.n	8006976 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800691e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006926:	3301      	adds	r3, #1
 8006928:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800692a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	021a      	lsls	r2, r3, #8
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006938:	3301      	adds	r3, #1
 800693a:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800693c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	041a      	lsls	r2, r3, #16
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694a:	3301      	adds	r3, #1
 800694c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800694e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	061a      	lsls	r2, r3, #24
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800695a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695c:	3301      	adds	r3, #1
 800695e:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f107 0214 	add.w	r2, r7, #20
 8006968:	4611      	mov	r1, r2
 800696a:	4618      	mov	r0, r3
 800696c:	f004 f8bd 	bl	800aaea <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8006970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006972:	3301      	adds	r3, #1
 8006974:	643b      	str	r3, [r7, #64]	@ 0x40
 8006976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006978:	2b07      	cmp	r3, #7
 800697a:	d9d0      	bls.n	800691e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800697c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697e:	3b20      	subs	r3, #32
 8006980:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006982:	f7fb fc65 	bl	8002250 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800698e:	429a      	cmp	r2, r3
 8006990:	d902      	bls.n	8006998 <HAL_SD_WriteBlocks+0x1b4>
 8006992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006994:	2b00      	cmp	r3, #0
 8006996:	d112      	bne.n	80069be <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a56      	ldr	r2, [pc, #344]	@ (8006af8 <HAL_SD_WriteBlocks+0x314>)
 800699e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069a6:	431a      	orrs	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e097      	b.n	8006aee <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c4:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d09b      	beq.n	8006904 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069da:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d022      	beq.n	8006a30 <HAL_SD_WriteBlocks+0x24c>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d91f      	bls.n	8006a30 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d01b      	beq.n	8006a30 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f004 f9cb 	bl	800ad98 <SDMMC_CmdStopTransfer>
 8006a02:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d012      	beq.n	8006a30 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a3a      	ldr	r2, [pc, #232]	@ (8006af8 <HAL_SD_WriteBlocks+0x314>)
 8006a10:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e05e      	b.n	8006aee <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d012      	beq.n	8006a64 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a2d      	ldr	r2, [pc, #180]	@ (8006af8 <HAL_SD_WriteBlocks+0x314>)
 8006a44:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4a:	f043 0208 	orr.w	r2, r3, #8
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e044      	b.n	8006aee <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d012      	beq.n	8006a98 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a20      	ldr	r2, [pc, #128]	@ (8006af8 <HAL_SD_WriteBlocks+0x314>)
 8006a78:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7e:	f043 0202 	orr.w	r2, r3, #2
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e02a      	b.n	8006aee <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a9e:	f003 0310 	and.w	r3, r3, #16
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d012      	beq.n	8006acc <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a13      	ldr	r2, [pc, #76]	@ (8006af8 <HAL_SD_WriteBlocks+0x314>)
 8006aac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab2:	f043 0210 	orr.w	r2, r3, #16
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e010      	b.n	8006aee <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8006afc <HAL_SD_WriteBlocks+0x318>)
 8006ad2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e006      	b.n	8006aee <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
  }
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3748      	adds	r7, #72	@ 0x48
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	1fe00fff 	.word	0x1fe00fff
 8006afc:	18000f3a 	.word	0x18000f3a

08006b00 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0e:	0f9b      	lsrs	r3, r3, #30
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1a:	0e9b      	lsrs	r3, r3, #26
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b2c:	0e1b      	lsrs	r3, r3, #24
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b3e:	0c1b      	lsrs	r3, r3, #16
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b4a:	0a1b      	lsrs	r3, r3, #8
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b60:	0d1b      	lsrs	r3, r3, #20
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b7e:	0bdb      	lsrs	r3, r3, #15
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b90:	0b9b      	lsrs	r3, r3, #14
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ba2:	0b5b      	lsrs	r3, r3, #13
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bb4:	0b1b      	lsrs	r3, r3, #12
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d163      	bne.n	8006c98 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bd4:	009a      	lsls	r2, r3, #2
 8006bd6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006bda:	4013      	ands	r3, r2
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8006be0:	0f92      	lsrs	r2, r2, #30
 8006be2:	431a      	orrs	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bec:	0edb      	lsrs	r3, r3, #27
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bfe:	0e1b      	lsrs	r3, r3, #24
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c10:	0d5b      	lsrs	r3, r3, #21
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c22:	0c9b      	lsrs	r3, r3, #18
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c34:	0bdb      	lsrs	r3, r3, #15
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	7e1b      	ldrb	r3, [r3, #24]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	3302      	adds	r3, #2
 8006c58:	2201      	movs	r2, #1
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c62:	fb03 f202 	mul.w	r2, r3, r2
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	7a1b      	ldrb	r3, [r3, #8]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	2201      	movs	r2, #1
 8006c76:	409a      	lsls	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006c84:	0a52      	lsrs	r2, r2, #9
 8006c86:	fb03 f202 	mul.w	r2, r3, r2
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c94:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c96:	e031      	b.n	8006cfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d11d      	bne.n	8006cdc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ca4:	041b      	lsls	r3, r3, #16
 8006ca6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cae:	0c1b      	lsrs	r3, r3, #16
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	029a      	lsls	r2, r3, #10
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	655a      	str	r2, [r3, #84]	@ 0x54
 8006cda:	e00f      	b.n	8006cfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a58      	ldr	r2, [pc, #352]	@ (8006e44 <HAL_SD_GetCardCSD+0x344>)
 8006ce2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e09d      	b.n	8006e38 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d00:	0b9b      	lsrs	r3, r3, #14
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d12:	09db      	lsrs	r3, r3, #7
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d34:	0fdb      	lsrs	r3, r3, #31
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d40:	0f5b      	lsrs	r3, r3, #29
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f003 0303 	and.w	r3, r3, #3
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d52:	0e9b      	lsrs	r3, r3, #26
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d64:	0d9b      	lsrs	r3, r3, #22
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d76:	0d5b      	lsrs	r3, r3, #21
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d92:	0c1b      	lsrs	r3, r3, #16
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006da6:	0bdb      	lsrs	r3, r3, #15
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dba:	0b9b      	lsrs	r3, r3, #14
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dce:	0b5b      	lsrs	r3, r3, #13
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006de2:	0b1b      	lsrs	r3, r3, #12
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006df6:	0a9b      	lsrs	r3, r3, #10
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e1e:	085b      	lsrs	r3, r3, #1
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	1fe00fff 	.word	0x1fe00fff

08006e48 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b094      	sub	sp, #80	@ 0x50
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d101      	bne.n	8006e68 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e0a7      	b.n	8006fb8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006e68:	f107 0308 	add.w	r3, r7, #8
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fb62 	bl	8007538 <SD_SendSDStatus>
 8006e74:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d011      	beq.n	8006ea0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a4f      	ldr	r2, [pc, #316]	@ (8006fc0 <HAL_SD_GetCardStatus+0x178>)
 8006e82:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006e9e:	e070      	b.n	8006f82 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	099b      	lsrs	r3, r3, #6
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	0a1b      	lsrs	r3, r3, #8
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	0e1b      	lsrs	r3, r3, #24
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	061a      	lsls	r2, r3, #24
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ee6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	0a1b      	lsrs	r3, r3, #8
 8006eec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ef0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	0e1b      	lsrs	r3, r3, #24
 8006ef6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	0d1b      	lsrs	r3, r3, #20
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	0c1b      	lsrs	r3, r3, #16
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	4313      	orrs	r3, r2
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	0a9b      	lsrs	r3, r3, #10
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f003 0303 	and.w	r3, r3, #3
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	0e1b      	lsrs	r3, r3, #24
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f003 fe54 	bl	800ac38 <SDMMC_CmdBlockLength>
 8006f90:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00d      	beq.n	8006fb4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a08      	ldr	r2, [pc, #32]	@ (8006fc0 <HAL_SD_GetCardStatus+0x178>)
 8006f9e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8006fb4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3750      	adds	r7, #80	@ 0x50
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	1fe00fff 	.word	0x1fe00fff

08006fc4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800701c:	b590      	push	{r4, r7, lr}
 800701e:	b08d      	sub	sp, #52	@ 0x34
 8007020:	af02      	add	r7, sp, #8
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2203      	movs	r2, #3
 8007030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007038:	2b03      	cmp	r3, #3
 800703a:	d02e      	beq.n	800709a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007042:	d106      	bne.n	8007052 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007048:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007050:	e029      	b.n	80070a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007058:	d10a      	bne.n	8007070 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fb64 	bl	8007728 <SD_WideBus_Enable>
 8007060:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	635a      	str	r2, [r3, #52]	@ 0x34
 800706e:	e01a      	b.n	80070a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fba1 	bl	80077be <SD_WideBus_Disable>
 800707c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	635a      	str	r2, [r3, #52]	@ 0x34
 800708a:	e00c      	b.n	80070a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007090:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	635a      	str	r2, [r3, #52]	@ 0x34
 8007098:	e005      	b.n	80070a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800709e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a5f      	ldr	r2, [pc, #380]	@ (8007230 <HAL_SD_ConfigWideBusOperation+0x214>)
 80070b4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80070bc:	e096      	b.n	80071ec <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80070be:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80070c2:	f04f 0100 	mov.w	r1, #0
 80070c6:	f7fd fe9d 	bl	8004e04 <HAL_RCCEx_GetPeriphCLKFreq>
 80070ca:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 8083 	beq.w	80071da <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	4950      	ldr	r1, [pc, #320]	@ (8007234 <HAL_SD_ConfigWideBusOperation+0x218>)
 80070f2:	fba1 1303 	umull	r1, r3, r1, r3
 80070f6:	0e1b      	lsrs	r3, r3, #24
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d303      	bcc.n	8007104 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	e05a      	b.n	80071ba <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800710c:	d103      	bne.n	8007116 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	e051      	b.n	80071ba <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800711a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800711e:	d126      	bne.n	800716e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10e      	bne.n	8007146 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4a43      	ldr	r2, [pc, #268]	@ (8007238 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d906      	bls.n	800713e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4a40      	ldr	r2, [pc, #256]	@ (8007234 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007134:	fba2 2303 	umull	r2, r3, r2, r3
 8007138:	0e5b      	lsrs	r3, r3, #25
 800713a:	61bb      	str	r3, [r7, #24]
 800713c:	e03d      	b.n	80071ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	e039      	b.n	80071ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007152:	4a39      	ldr	r2, [pc, #228]	@ (8007238 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d906      	bls.n	8007166 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	4a36      	ldr	r2, [pc, #216]	@ (8007234 <HAL_SD_ConfigWideBusOperation+0x218>)
 800715c:	fba2 2303 	umull	r2, r3, r2, r3
 8007160:	0e5b      	lsrs	r3, r3, #25
 8007162:	61bb      	str	r3, [r7, #24]
 8007164:	e029      	b.n	80071ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	e025      	b.n	80071ba <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10e      	bne.n	8007194 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4a30      	ldr	r2, [pc, #192]	@ (800723c <HAL_SD_ConfigWideBusOperation+0x220>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d906      	bls.n	800718c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	4a2c      	ldr	r2, [pc, #176]	@ (8007234 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007182:	fba2 2303 	umull	r2, r3, r2, r3
 8007186:	0e1b      	lsrs	r3, r3, #24
 8007188:	61bb      	str	r3, [r7, #24]
 800718a:	e016      	b.n	80071ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	61bb      	str	r3, [r7, #24]
 8007192:	e012      	b.n	80071ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	4a26      	ldr	r2, [pc, #152]	@ (800723c <HAL_SD_ConfigWideBusOperation+0x220>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d906      	bls.n	80071b4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	4a22      	ldr	r2, [pc, #136]	@ (8007234 <HAL_SD_ConfigWideBusOperation+0x218>)
 80071aa:	fba2 2303 	umull	r2, r3, r2, r3
 80071ae:	0e1b      	lsrs	r3, r3, #24
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	e002      	b.n	80071ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681c      	ldr	r4, [r3, #0]
 80071be:	466a      	mov	r2, sp
 80071c0:	f107 0314 	add.w	r3, r7, #20
 80071c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80071c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80071cc:	f107 0308 	add.w	r3, r7, #8
 80071d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071d2:	4620      	mov	r0, r4
 80071d4:	f003 fc52 	bl	800aa7c <SDMMC_Init>
 80071d8:	e008      	b.n	80071ec <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80071f4:	4618      	mov	r0, r3
 80071f6:	f003 fd1f 	bl	800ac38 <SDMMC_CmdBlockLength>
 80071fa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a0a      	ldr	r2, [pc, #40]	@ (8007230 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007208:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007228:	4618      	mov	r0, r3
 800722a:	372c      	adds	r7, #44	@ 0x2c
 800722c:	46bd      	mov	sp, r7
 800722e:	bd90      	pop	{r4, r7, pc}
 8007230:	1fe00fff 	.word	0x1fe00fff
 8007234:	55e63b89 	.word	0x55e63b89
 8007238:	02faf080 	.word	0x02faf080
 800723c:	017d7840 	.word	0x017d7840

08007240 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800724c:	f107 030c 	add.w	r3, r7, #12
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa40 	bl	80076d8 <SD_SendStatus>
 8007258:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	0a5b      	lsrs	r3, r3, #9
 8007270:	f003 030f 	and.w	r3, r3, #15
 8007274:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007276:	693b      	ldr	r3, [r7, #16]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b090      	sub	sp, #64	@ 0x40
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800728c:	f7fa ffe0 	bl	8002250 <HAL_GetTick>
 8007290:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f003 fc49 	bl	800ab2e <SDMMC_GetPowerState>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d102      	bne.n	80072a8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80072a6:	e0b5      	b.n	8007414 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d02e      	beq.n	800730e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f003 fe94 	bl	800afe2 <SDMMC_CmdSendCID>
 80072ba:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80072bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <SD_InitCard+0x46>
    {
      return errorstate;
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	e0a6      	b.n	8007414 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f003 fc74 	bl	800abba <SDMMC_GetResponse>
 80072d2:	4602      	mov	r2, r0
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2104      	movs	r1, #4
 80072de:	4618      	mov	r0, r3
 80072e0:	f003 fc6b 	bl	800abba <SDMMC_GetResponse>
 80072e4:	4602      	mov	r2, r0
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2108      	movs	r1, #8
 80072f0:	4618      	mov	r0, r3
 80072f2:	f003 fc62 	bl	800abba <SDMMC_GetResponse>
 80072f6:	4602      	mov	r2, r0
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	210c      	movs	r1, #12
 8007302:	4618      	mov	r0, r3
 8007304:	f003 fc59 	bl	800abba <SDMMC_GetResponse>
 8007308:	4602      	mov	r2, r0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007312:	2b03      	cmp	r3, #3
 8007314:	d01d      	beq.n	8007352 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007316:	e019      	b.n	800734c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f107 020a 	add.w	r2, r7, #10
 8007320:	4611      	mov	r1, r2
 8007322:	4618      	mov	r0, r3
 8007324:	f003 fe9c 	bl	800b060 <SDMMC_CmdSetRelAdd>
 8007328:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800732a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007332:	e06f      	b.n	8007414 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007334:	f7fa ff8c 	bl	8002250 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007342:	4293      	cmp	r3, r2
 8007344:	d902      	bls.n	800734c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007346:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800734a:	e063      	b.n	8007414 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800734c:	897b      	ldrh	r3, [r7, #10]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0e2      	beq.n	8007318 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007356:	2b03      	cmp	r3, #3
 8007358:	d036      	beq.n	80073c8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800735a:	897b      	ldrh	r3, [r7, #10]
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736a:	041b      	lsls	r3, r3, #16
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f003 fe56 	bl	800b020 <SDMMC_CmdSendCSD>
 8007374:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <SD_InitCard+0x100>
    {
      return errorstate;
 800737c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737e:	e049      	b.n	8007414 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2100      	movs	r1, #0
 8007386:	4618      	mov	r0, r3
 8007388:	f003 fc17 	bl	800abba <SDMMC_GetResponse>
 800738c:	4602      	mov	r2, r0
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2104      	movs	r1, #4
 8007398:	4618      	mov	r0, r3
 800739a:	f003 fc0e 	bl	800abba <SDMMC_GetResponse>
 800739e:	4602      	mov	r2, r0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2108      	movs	r1, #8
 80073aa:	4618      	mov	r0, r3
 80073ac:	f003 fc05 	bl	800abba <SDMMC_GetResponse>
 80073b0:	4602      	mov	r2, r0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	210c      	movs	r1, #12
 80073bc:	4618      	mov	r0, r3
 80073be:	f003 fbfc 	bl	800abba <SDMMC_GetResponse>
 80073c2:	4602      	mov	r2, r0
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2104      	movs	r1, #4
 80073ce:	4618      	mov	r0, r3
 80073d0:	f003 fbf3 	bl	800abba <SDMMC_GetResponse>
 80073d4:	4603      	mov	r3, r0
 80073d6:	0d1a      	lsrs	r2, r3, #20
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80073dc:	f107 030c 	add.w	r3, r7, #12
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff fb8c 	bl	8006b00 <HAL_SD_GetCardCSD>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80073f2:	e00f      	b.n	8007414 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fc:	041b      	lsls	r3, r3, #16
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f003 fd05 	bl	800ae10 <SDMMC_CmdSelDesel>
 8007406:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <SD_InitCard+0x192>
  {
    return errorstate;
 800740e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007410:	e000      	b.n	8007414 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3740      	adds	r7, #64	@ 0x40
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f003 fd0e 	bl	800ae56 <SDMMC_CmdGoIdleState>
 800743a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	e072      	b.n	800752c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f003 fd21 	bl	800ae92 <SDMMC_CmdOperCond>
 8007450:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007458:	d10d      	bne.n	8007476 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f003 fcf6 	bl	800ae56 <SDMMC_CmdGoIdleState>
 800746a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d004      	beq.n	800747c <SD_PowerON+0x60>
    {
      return errorstate;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	e05a      	b.n	800752c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d137      	bne.n	80074f4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2100      	movs	r1, #0
 800748a:	4618      	mov	r0, r3
 800748c:	f003 fd21 	bl	800aed2 <SDMMC_CmdAppCommand>
 8007490:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d02d      	beq.n	80074f4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007498:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800749c:	e046      	b.n	800752c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2100      	movs	r1, #0
 80074a4:	4618      	mov	r0, r3
 80074a6:	f003 fd14 	bl	800aed2 <SDMMC_CmdAppCommand>
 80074aa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <SD_PowerON+0x9a>
    {
      return errorstate;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	e03a      	b.n	800752c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	491e      	ldr	r1, [pc, #120]	@ (8007534 <SD_PowerON+0x118>)
 80074bc:	4618      	mov	r0, r3
 80074be:	f003 fd2b 	bl	800af18 <SDMMC_CmdAppOperCommand>
 80074c2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80074ce:	e02d      	b.n	800752c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f003 fb6f 	bl	800abba <SDMMC_GetResponse>
 80074dc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	0fdb      	lsrs	r3, r3, #31
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d101      	bne.n	80074ea <SD_PowerON+0xce>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e000      	b.n	80074ec <SD_PowerON+0xd0>
 80074ea:	2300      	movs	r3, #0
 80074ec:	613b      	str	r3, [r7, #16]

    count++;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	3301      	adds	r3, #1
 80074f2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d802      	bhi.n	8007504 <SD_PowerON+0xe8>
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0cc      	beq.n	800749e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800750a:	4293      	cmp	r3, r2
 800750c:	d902      	bls.n	8007514 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800750e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007512:	e00b      	b.n	800752c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3718      	adds	r7, #24
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	c1100000 	.word	0xc1100000

08007538 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08c      	sub	sp, #48	@ 0x30
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007542:	f7fa fe85 	bl	8002250 <HAL_GetTick>
 8007546:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2100      	movs	r1, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f003 fb31 	bl	800abba <SDMMC_GetResponse>
 8007558:	4603      	mov	r3, r0
 800755a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800755e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007562:	d102      	bne.n	800756a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007564:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007568:	e0b0      	b.n	80076cc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2140      	movs	r1, #64	@ 0x40
 8007570:	4618      	mov	r0, r3
 8007572:	f003 fb61 	bl	800ac38 <SDMMC_CmdBlockLength>
 8007576:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	e0a0      	b.n	80076cc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	4619      	mov	r1, r3
 8007596:	4610      	mov	r0, r2
 8007598:	f003 fc9b 	bl	800aed2 <SDMMC_CmdAppCommand>
 800759c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d005      	beq.n	80075b0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	e08d      	b.n	80076cc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80075b0:	f04f 33ff 	mov.w	r3, #4294967295
 80075b4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80075b6:	2340      	movs	r3, #64	@ 0x40
 80075b8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80075ba:	2360      	movs	r3, #96	@ 0x60
 80075bc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80075be:	2302      	movs	r3, #2
 80075c0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80075c6:	2301      	movs	r3, #1
 80075c8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f107 0208 	add.w	r2, r7, #8
 80075d2:	4611      	mov	r1, r2
 80075d4:	4618      	mov	r0, r3
 80075d6:	f003 fb03 	bl	800abe0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f003 fd83 	bl	800b0ea <SDMMC_CmdStatusRegister>
 80075e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d02b      	beq.n	8007644 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	e069      	b.n	80076cc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d013      	beq.n	800762e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007606:	2300      	movs	r3, #0
 8007608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800760a:	e00d      	b.n	8007628 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f003 fa5d 	bl	800aad0 <SDMMC_ReadFIFO>
 8007616:	4602      	mov	r2, r0
 8007618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761a:	601a      	str	r2, [r3, #0]
        pData++;
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	3304      	adds	r3, #4
 8007620:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8007622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007624:	3301      	adds	r3, #1
 8007626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762a:	2b07      	cmp	r3, #7
 800762c:	d9ee      	bls.n	800760c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800762e:	f7fa fe0f 	bl	8002250 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d102      	bne.n	8007644 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800763e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007642:	e043      	b.n	80076cc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800764a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0d2      	beq.n	80075f8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007660:	2308      	movs	r3, #8
 8007662:	e033      	b.n	80076cc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007672:	2302      	movs	r3, #2
 8007674:	e02a      	b.n	80076cc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d017      	beq.n	80076b4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007684:	2320      	movs	r3, #32
 8007686:	e021      	b.n	80076cc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4618      	mov	r0, r3
 800768e:	f003 fa1f 	bl	800aad0 <SDMMC_ReadFIFO>
 8007692:	4602      	mov	r2, r0
 8007694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007696:	601a      	str	r2, [r3, #0]
    pData++;
 8007698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769a:	3304      	adds	r3, #4
 800769c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800769e:	f7fa fdd7 	bl	8002250 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ac:	d102      	bne.n	80076b4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80076ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80076b2:	e00b      	b.n	80076cc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e2      	bne.n	8007688 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a03      	ldr	r2, [pc, #12]	@ (80076d4 <SD_SendSDStatus+0x19c>)
 80076c8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3730      	adds	r7, #48	@ 0x30
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	18000f3a 	.word	0x18000f3a

080076d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80076e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076ec:	e018      	b.n	8007720 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f6:	041b      	lsls	r3, r3, #16
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f003 fcd2 	bl	800b0a4 <SDMMC_CmdSendStatus>
 8007700:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	e009      	b.n	8007720 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2100      	movs	r1, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f003 fa51 	bl	800abba <SDMMC_GetResponse>
 8007718:	4602      	mov	r2, r0
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	2300      	movs	r3, #0
 8007736:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2100      	movs	r1, #0
 800773e:	4618      	mov	r0, r3
 8007740:	f003 fa3b 	bl	800abba <SDMMC_GetResponse>
 8007744:	4603      	mov	r3, r0
 8007746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800774a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800774e:	d102      	bne.n	8007756 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007750:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007754:	e02f      	b.n	80077b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007756:	f107 030c 	add.w	r3, r7, #12
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f879 	bl	8007854 <SD_FindSCR>
 8007762:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	e023      	b.n	80077b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01c      	beq.n	80077b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	4619      	mov	r1, r3
 8007784:	4610      	mov	r0, r2
 8007786:	f003 fba4 	bl	800aed2 <SDMMC_CmdAppCommand>
 800778a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	e00f      	b.n	80077b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2102      	movs	r1, #2
 800779c:	4618      	mov	r0, r3
 800779e:	f003 fbdb 	bl	800af58 <SDMMC_CmdBusWidth>
 80077a2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	e003      	b.n	80077b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	e001      	b.n	80077b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b086      	sub	sp, #24
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2100      	movs	r1, #0
 80077d4:	4618      	mov	r0, r3
 80077d6:	f003 f9f0 	bl	800abba <SDMMC_GetResponse>
 80077da:	4603      	mov	r3, r0
 80077dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077e4:	d102      	bne.n	80077ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80077ea:	e02f      	b.n	800784c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80077ec:	f107 030c 	add.w	r3, r7, #12
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f82e 	bl	8007854 <SD_FindSCR>
 80077f8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	e023      	b.n	800784c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d01c      	beq.n	8007848 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007816:	041b      	lsls	r3, r3, #16
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f003 fb59 	bl	800aed2 <SDMMC_CmdAppCommand>
 8007820:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	e00f      	b.n	800784c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f003 fb90 	bl	800af58 <SDMMC_CmdBusWidth>
 8007838:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	e003      	b.n	800784c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007844:	2300      	movs	r3, #0
 8007846:	e001      	b.n	800784c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007848:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800784c:	4618      	mov	r0, r3
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08e      	sub	sp, #56	@ 0x38
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800785e:	f7fa fcf7 	bl	8002250 <HAL_GetTick>
 8007862:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007868:	2300      	movs	r3, #0
 800786a:	60bb      	str	r3, [r7, #8]
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2108      	movs	r1, #8
 800787a:	4618      	mov	r0, r3
 800787c:	f003 f9dc 	bl	800ac38 <SDMMC_CmdBlockLength>
 8007880:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788a:	e0ad      	b.n	80079e8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007894:	041b      	lsls	r3, r3, #16
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f003 fb1a 	bl	800aed2 <SDMMC_CmdAppCommand>
 800789e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80078a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <SD_FindSCR+0x56>
  {
    return errorstate;
 80078a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a8:	e09e      	b.n	80079e8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078aa:	f04f 33ff 	mov.w	r3, #4294967295
 80078ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80078b0:	2308      	movs	r3, #8
 80078b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80078b4:	2330      	movs	r3, #48	@ 0x30
 80078b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078b8:	2302      	movs	r3, #2
 80078ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078bc:	2300      	movs	r3, #0
 80078be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80078c0:	2301      	movs	r3, #1
 80078c2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f107 0210 	add.w	r2, r7, #16
 80078cc:	4611      	mov	r1, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f003 f986 	bl	800abe0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4618      	mov	r0, r3
 80078da:	f003 fb60 	bl	800af9e <SDMMC_CmdSendSCR>
 80078de:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80078e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d027      	beq.n	8007936 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80078e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e8:	e07e      	b.n	80079e8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d113      	bne.n	8007920 <SD_FindSCR+0xcc>
 80078f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d110      	bne.n	8007920 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f003 f8e4 	bl	800aad0 <SDMMC_ReadFIFO>
 8007908:	4603      	mov	r3, r0
 800790a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4618      	mov	r0, r3
 8007912:	f003 f8dd 	bl	800aad0 <SDMMC_ReadFIFO>
 8007916:	4603      	mov	r3, r0
 8007918:	60fb      	str	r3, [r7, #12]
      index++;
 800791a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800791c:	3301      	adds	r3, #1
 800791e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007920:	f7fa fc96 	bl	8002250 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792e:	d102      	bne.n	8007936 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007930:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007934:	e058      	b.n	80079e8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800793c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8007940:	4013      	ands	r3, r2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0d1      	beq.n	80078ea <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2208      	movs	r2, #8
 800795a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800795c:	2308      	movs	r3, #8
 800795e:	e043      	b.n	80079e8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2202      	movs	r2, #2
 8007974:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007976:	2302      	movs	r3, #2
 8007978:	e036      	b.n	80079e8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b00      	cmp	r3, #0
 8007986:	d005      	beq.n	8007994 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2220      	movs	r2, #32
 800798e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007990:	2320      	movs	r3, #32
 8007992:	e029      	b.n	80079e8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a15      	ldr	r2, [pc, #84]	@ (80079f0 <SD_FindSCR+0x19c>)
 800799a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	061a      	lsls	r2, r3, #24
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	0a1b      	lsrs	r3, r3, #8
 80079ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80079b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	0e1b      	lsrs	r3, r3, #24
 80079b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80079ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079bc:	601a      	str	r2, [r3, #0]
    scr++;
 80079be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c0:	3304      	adds	r3, #4
 80079c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	061a      	lsls	r2, r3, #24
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	0a1b      	lsrs	r3, r3, #8
 80079d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80079da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	0e1b      	lsrs	r3, r3, #24
 80079e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80079e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3738      	adds	r7, #56	@ 0x38
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	18000f3a 	.word	0x18000f3a

080079f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e10f      	b.n	8007c26 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a87      	ldr	r2, [pc, #540]	@ (8007c30 <HAL_SPI_Init+0x23c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00f      	beq.n	8007a36 <HAL_SPI_Init+0x42>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a86      	ldr	r2, [pc, #536]	@ (8007c34 <HAL_SPI_Init+0x240>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00a      	beq.n	8007a36 <HAL_SPI_Init+0x42>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a84      	ldr	r2, [pc, #528]	@ (8007c38 <HAL_SPI_Init+0x244>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d005      	beq.n	8007a36 <HAL_SPI_Init+0x42>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	2b0f      	cmp	r3, #15
 8007a30:	d901      	bls.n	8007a36 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e0f7      	b.n	8007c26 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fe2e 	bl	8008698 <SPI_GetPacketSize>
 8007a3c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a7b      	ldr	r2, [pc, #492]	@ (8007c30 <HAL_SPI_Init+0x23c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d00c      	beq.n	8007a62 <HAL_SPI_Init+0x6e>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a79      	ldr	r2, [pc, #484]	@ (8007c34 <HAL_SPI_Init+0x240>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d007      	beq.n	8007a62 <HAL_SPI_Init+0x6e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a78      	ldr	r2, [pc, #480]	@ (8007c38 <HAL_SPI_Init+0x244>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d002      	beq.n	8007a62 <HAL_SPI_Init+0x6e>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b08      	cmp	r3, #8
 8007a60:	d811      	bhi.n	8007a86 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a66:	4a72      	ldr	r2, [pc, #456]	@ (8007c30 <HAL_SPI_Init+0x23c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d009      	beq.n	8007a80 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a70      	ldr	r2, [pc, #448]	@ (8007c34 <HAL_SPI_Init+0x240>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d004      	beq.n	8007a80 <HAL_SPI_Init+0x8c>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a6f      	ldr	r2, [pc, #444]	@ (8007c38 <HAL_SPI_Init+0x244>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d104      	bne.n	8007a8a <HAL_SPI_Init+0x96>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b10      	cmp	r3, #16
 8007a84:	d901      	bls.n	8007a8a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e0cd      	b.n	8007c26 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7f9 ff32 	bl	8001908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0201 	bic.w	r2, r2, #1
 8007aba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007ac6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ad0:	d119      	bne.n	8007b06 <HAL_SPI_Init+0x112>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ada:	d103      	bne.n	8007ae4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10c      	bne.n	8007b06 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007af0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007af4:	d107      	bne.n	8007b06 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00f      	beq.n	8007b32 <HAL_SPI_Init+0x13e>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2b06      	cmp	r3, #6
 8007b18:	d90b      	bls.n	8007b32 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	e007      	b.n	8007b42 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69da      	ldr	r2, [r3, #28]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b54:	ea42 0103 	orr.w	r1, r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	431a      	orrs	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ba2:	ea42 0103 	orr.w	r1, r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d113      	bne.n	8007be2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bcc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007be0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0201 	bic.w	r2, r2, #1
 8007bf0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40013000 	.word	0x40013000
 8007c34:	40003800 	.word	0x40003800
 8007c38:	40003c00 	.word	0x40003c00

08007c3c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3320      	adds	r3, #32
 8007c52:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c54:	f7fa fafc 	bl	8002250 <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d001      	beq.n	8007c6a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007c66:	2302      	movs	r3, #2
 8007c68:	e1d1      	b.n	800800e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <HAL_SPI_Transmit+0x3a>
 8007c70:	88fb      	ldrh	r3, [r7, #6]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e1c9      	b.n	800800e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <HAL_SPI_Transmit+0x4c>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e1c2      	b.n	800800e <HAL_SPI_Transmit+0x3d2>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2203      	movs	r2, #3
 8007c94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	88fa      	ldrh	r2, [r7, #6]
 8007cb2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007ce0:	d108      	bne.n	8007cf4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	e009      	b.n	8007d08 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007d06:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	4b96      	ldr	r3, [pc, #600]	@ (8007f68 <HAL_SPI_Transmit+0x32c>)
 8007d10:	4013      	ands	r3, r2
 8007d12:	88f9      	ldrh	r1, [r7, #6]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	6812      	ldr	r2, [r2, #0]
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d34:	d107      	bne.n	8007d46 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	2b0f      	cmp	r3, #15
 8007d4c:	d947      	bls.n	8007dde <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007d4e:	e03f      	b.n	8007dd0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d114      	bne.n	8007d88 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6812      	ldr	r2, [r2, #0]
 8007d68:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d6e:	1d1a      	adds	r2, r3, #4
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007d86:	e023      	b.n	8007dd0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d88:	f7fa fa62 	bl	8002250 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d803      	bhi.n	8007da0 <HAL_SPI_Transmit+0x164>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d102      	bne.n	8007da6 <HAL_SPI_Transmit+0x16a>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d114      	bne.n	8007dd0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fba8 	bl	80084fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007db2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e11e      	b.n	800800e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1b9      	bne.n	8007d50 <HAL_SPI_Transmit+0x114>
 8007ddc:	e0f1      	b.n	8007fc2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	2b07      	cmp	r3, #7
 8007de4:	f240 80e6 	bls.w	8007fb4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007de8:	e05d      	b.n	8007ea6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d132      	bne.n	8007e5e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d918      	bls.n	8007e36 <HAL_SPI_Transmit+0x1fa>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d014      	beq.n	8007e36 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6812      	ldr	r2, [r2, #0]
 8007e16:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e1c:	1d1a      	adds	r2, r3, #4
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b02      	subs	r3, #2
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007e34:	e037      	b.n	8007ea6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e3a:	881a      	ldrh	r2, [r3, #0]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e44:	1c9a      	adds	r2, r3, #2
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007e5c:	e023      	b.n	8007ea6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e5e:	f7fa f9f7 	bl	8002250 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d803      	bhi.n	8007e76 <HAL_SPI_Transmit+0x23a>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e74:	d102      	bne.n	8007e7c <HAL_SPI_Transmit+0x240>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d114      	bne.n	8007ea6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fb3d 	bl	80084fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e0b3      	b.n	800800e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d19b      	bne.n	8007dea <HAL_SPI_Transmit+0x1ae>
 8007eb2:	e086      	b.n	8007fc2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d154      	bne.n	8007f6c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d918      	bls.n	8007f00 <HAL_SPI_Transmit+0x2c4>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed2:	2b40      	cmp	r3, #64	@ 0x40
 8007ed4:	d914      	bls.n	8007f00 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6812      	ldr	r2, [r2, #0]
 8007ee0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ee6:	1d1a      	adds	r2, r3, #4
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	3b04      	subs	r3, #4
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007efe:	e059      	b.n	8007fb4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d917      	bls.n	8007f3c <HAL_SPI_Transmit+0x300>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d013      	beq.n	8007f3c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f18:	881a      	ldrh	r2, [r3, #0]
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f22:	1c9a      	adds	r2, r3, #2
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b02      	subs	r3, #2
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007f3a:	e03b      	b.n	8007fb4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3320      	adds	r3, #32
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007f66:	e025      	b.n	8007fb4 <HAL_SPI_Transmit+0x378>
 8007f68:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f6c:	f7fa f970 	bl	8002250 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d803      	bhi.n	8007f84 <HAL_SPI_Transmit+0x348>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f82:	d102      	bne.n	8007f8a <HAL_SPI_Transmit+0x34e>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d114      	bne.n	8007fb4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fab6 	bl	80084fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e02c      	b.n	800800e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f47f af79 	bne.w	8007eb4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2108      	movs	r1, #8
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fb35 	bl	800863c <SPI_WaitOnFlagUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fde:	f043 0220 	orr.w	r2, r3, #32
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fa87 	bl	80084fc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e000      	b.n	800800e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800800c:	2300      	movs	r3, #0
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop

08008018 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b088      	sub	sp, #32
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	4613      	mov	r3, r2
 8008026:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	b29b      	uxth	r3, r3
 8008030:	3301      	adds	r3, #1
 8008032:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3330      	adds	r3, #48	@ 0x30
 800803a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800803c:	f7fa f908 	bl	8002250 <HAL_GetTick>
 8008040:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b01      	cmp	r3, #1
 800804c:	d001      	beq.n	8008052 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800804e:	2302      	movs	r3, #2
 8008050:	e250      	b.n	80084f4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <HAL_SPI_Receive+0x46>
 8008058:	88fb      	ldrh	r3, [r7, #6]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e248      	b.n	80084f4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_SPI_Receive+0x58>
 800806c:	2302      	movs	r3, #2
 800806e:	e241      	b.n	80084f4 <HAL_SPI_Receive+0x4dc>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2204      	movs	r2, #4
 800807c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	88fa      	ldrh	r2, [r7, #6]
 8008092:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	88fa      	ldrh	r2, [r7, #6]
 800809a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80080c8:	d108      	bne.n	80080dc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	e009      	b.n	80080f0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80080ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	4b95      	ldr	r3, [pc, #596]	@ (800834c <HAL_SPI_Receive+0x334>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	88f9      	ldrh	r1, [r7, #6]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	430b      	orrs	r3, r1
 8008102:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800811c:	d107      	bne.n	800812e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800812c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	2b0f      	cmp	r3, #15
 8008134:	d96c      	bls.n	8008210 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008136:	e064      	b.n	8008202 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b01      	cmp	r3, #1
 800814c:	d114      	bne.n	8008178 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008156:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008158:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800815e:	1d1a      	adds	r2, r3, #4
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008176:	e044      	b.n	8008202 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800817e:	b29b      	uxth	r3, r3
 8008180:	8bfa      	ldrh	r2, [r7, #30]
 8008182:	429a      	cmp	r2, r3
 8008184:	d919      	bls.n	80081ba <HAL_SPI_Receive+0x1a2>
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d014      	beq.n	80081ba <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008198:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800819a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081a0:	1d1a      	adds	r2, r3, #4
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80081b8:	e023      	b.n	8008202 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ba:	f7fa f849 	bl	8002250 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d803      	bhi.n	80081d2 <HAL_SPI_Receive+0x1ba>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d0:	d102      	bne.n	80081d8 <HAL_SPI_Receive+0x1c0>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d114      	bne.n	8008202 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f98f 	bl	80084fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e178      	b.n	80084f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008208:	b29b      	uxth	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d194      	bne.n	8008138 <HAL_SPI_Receive+0x120>
 800820e:	e15e      	b.n	80084ce <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	2b07      	cmp	r3, #7
 8008216:	f240 8153 	bls.w	80084c0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800821a:	e08f      	b.n	800833c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b01      	cmp	r3, #1
 8008230:	d114      	bne.n	800825c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	8812      	ldrh	r2, [r2, #0]
 800823a:	b292      	uxth	r2, r2
 800823c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008242:	1c9a      	adds	r2, r3, #2
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800824e:	b29b      	uxth	r3, r3
 8008250:	3b01      	subs	r3, #1
 8008252:	b29a      	uxth	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800825a:	e06f      	b.n	800833c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008262:	b29b      	uxth	r3, r3
 8008264:	8bfa      	ldrh	r2, [r7, #30]
 8008266:	429a      	cmp	r2, r3
 8008268:	d924      	bls.n	80082b4 <HAL_SPI_Receive+0x29c>
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01f      	beq.n	80082b4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	8812      	ldrh	r2, [r2, #0]
 800827c:	b292      	uxth	r2, r2
 800827e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008284:	1c9a      	adds	r2, r3, #2
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	8812      	ldrh	r2, [r2, #0]
 8008292:	b292      	uxth	r2, r2
 8008294:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800829a:	1c9a      	adds	r2, r3, #2
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	3b02      	subs	r3, #2
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082b2:	e043      	b.n	800833c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d119      	bne.n	80082f4 <HAL_SPI_Receive+0x2dc>
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d014      	beq.n	80082f4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	8812      	ldrh	r2, [r2, #0]
 80082d2:	b292      	uxth	r2, r2
 80082d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082da:	1c9a      	adds	r2, r3, #2
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082f2:	e023      	b.n	800833c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082f4:	f7f9 ffac 	bl	8002250 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d803      	bhi.n	800830c <HAL_SPI_Receive+0x2f4>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d102      	bne.n	8008312 <HAL_SPI_Receive+0x2fa>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d114      	bne.n	800833c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f8f2 	bl	80084fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800831e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e0db      	b.n	80084f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	f47f af69 	bne.w	800821c <HAL_SPI_Receive+0x204>
 800834a:	e0c0      	b.n	80084ce <HAL_SPI_Receive+0x4b6>
 800834c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b01      	cmp	r3, #1
 8008364:	d117      	bne.n	8008396 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008372:	7812      	ldrb	r2, [r2, #0]
 8008374:	b2d2      	uxtb	r2, r2
 8008376:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008388:	b29b      	uxth	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008394:	e094      	b.n	80084c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800839c:	b29b      	uxth	r3, r3
 800839e:	8bfa      	ldrh	r2, [r7, #30]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d946      	bls.n	8008432 <HAL_SPI_Receive+0x41a>
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d041      	beq.n	8008432 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083ba:	7812      	ldrb	r2, [r2, #0]
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083d6:	7812      	ldrb	r2, [r2, #0]
 80083d8:	b2d2      	uxtb	r2, r2
 80083da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083f2:	7812      	ldrb	r2, [r2, #0]
 80083f4:	b2d2      	uxtb	r2, r2
 80083f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800840e:	7812      	ldrb	r2, [r2, #0]
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008424:	b29b      	uxth	r3, r3
 8008426:	3b04      	subs	r3, #4
 8008428:	b29a      	uxth	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008430:	e046      	b.n	80084c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008438:	b29b      	uxth	r3, r3
 800843a:	2b03      	cmp	r3, #3
 800843c:	d81c      	bhi.n	8008478 <HAL_SPI_Receive+0x460>
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d017      	beq.n	8008478 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008454:	7812      	ldrb	r2, [r2, #0]
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800846a:	b29b      	uxth	r3, r3
 800846c:	3b01      	subs	r3, #1
 800846e:	b29a      	uxth	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008476:	e023      	b.n	80084c0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008478:	f7f9 feea 	bl	8002250 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d803      	bhi.n	8008490 <HAL_SPI_Receive+0x478>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848e:	d102      	bne.n	8008496 <HAL_SPI_Receive+0x47e>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d114      	bne.n	80084c0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f830 	bl	80084fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e019      	b.n	80084f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f47f af41 	bne.w	8008350 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 f814 	bl	80084fc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e000      	b.n	80084f4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80084f2:	2300      	movs	r3, #0
  }
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3720      	adds	r7, #32
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0208 	orr.w	r2, r2, #8
 800851a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	699a      	ldr	r2, [r3, #24]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0210 	orr.w	r2, r2, #16
 800852a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0201 	bic.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6919      	ldr	r1, [r3, #16]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	4b3c      	ldr	r3, [pc, #240]	@ (8008638 <SPI_CloseTransfer+0x13c>)
 8008548:	400b      	ands	r3, r1
 800854a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800855a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b04      	cmp	r3, #4
 8008566:	d014      	beq.n	8008592 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00f      	beq.n	8008592 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008578:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	699a      	ldr	r2, [r3, #24]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f042 0220 	orr.w	r2, r2, #32
 8008590:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b03      	cmp	r3, #3
 800859c:	d014      	beq.n	80085c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00f      	beq.n	80085c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ae:	f043 0204 	orr.w	r2, r3, #4
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699a      	ldr	r2, [r3, #24]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00f      	beq.n	80085f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085d8:	f043 0201 	orr.w	r2, r3, #1
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00f      	beq.n	800861c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008602:	f043 0208 	orr.w	r2, r3, #8
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800861a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800862c:	bf00      	nop
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	fffffc90 	.word	0xfffffc90

0800863c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	4613      	mov	r3, r2
 800864a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800864c:	e010      	b.n	8008670 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800864e:	f7f9 fdff 	bl	8002250 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d803      	bhi.n	8008666 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008664:	d102      	bne.n	800866c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e00f      	b.n	8008690 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	695a      	ldr	r2, [r3, #20]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	4013      	ands	r3, r2
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	429a      	cmp	r2, r3
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	461a      	mov	r2, r3
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	429a      	cmp	r2, r3
 800868c:	d0df      	beq.n	800864e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a4:	095b      	lsrs	r3, r3, #5
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	3301      	adds	r3, #1
 80086b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	3307      	adds	r3, #7
 80086b6:	08db      	lsrs	r3, r3, #3
 80086b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	fb02 f303 	mul.w	r3, r2, r3
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e042      	b.n	8008766 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d106      	bne.n	80086f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7f9 fa5c 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2224      	movs	r2, #36	@ 0x24
 80086fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f022 0201 	bic.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fe95 	bl	8009448 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f826 	bl	8008770 <UART_SetConfig>
 8008724:	4603      	mov	r3, r0
 8008726:	2b01      	cmp	r3, #1
 8008728:	d101      	bne.n	800872e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e01b      	b.n	8008766 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800873c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800874c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0201 	orr.w	r2, r2, #1
 800875c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 ff14 	bl	800958c <UART_CheckIdleState>
 8008764:	4603      	mov	r3, r0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008774:	b092      	sub	sp, #72	@ 0x48
 8008776:	af00      	add	r7, sp, #0
 8008778:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	431a      	orrs	r2, r3
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	431a      	orrs	r2, r3
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	4313      	orrs	r3, r2
 8008796:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	4bbe      	ldr	r3, [pc, #760]	@ (8008a98 <UART_SetConfig+0x328>)
 80087a0:	4013      	ands	r3, r2
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	6812      	ldr	r2, [r2, #0]
 80087a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4ab3      	ldr	r2, [pc, #716]	@ (8008a9c <UART_SetConfig+0x32c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087d8:	4313      	orrs	r3, r2
 80087da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689a      	ldr	r2, [r3, #8]
 80087e2:	4baf      	ldr	r3, [pc, #700]	@ (8008aa0 <UART_SetConfig+0x330>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087ec:	430b      	orrs	r3, r1
 80087ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f6:	f023 010f 	bic.w	r1, r3, #15
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4aa6      	ldr	r2, [pc, #664]	@ (8008aa4 <UART_SetConfig+0x334>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d177      	bne.n	8008900 <UART_SetConfig+0x190>
 8008810:	4ba5      	ldr	r3, [pc, #660]	@ (8008aa8 <UART_SetConfig+0x338>)
 8008812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008814:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008818:	2b28      	cmp	r3, #40	@ 0x28
 800881a:	d86d      	bhi.n	80088f8 <UART_SetConfig+0x188>
 800881c:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <UART_SetConfig+0xb4>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	080088c9 	.word	0x080088c9
 8008828:	080088f9 	.word	0x080088f9
 800882c:	080088f9 	.word	0x080088f9
 8008830:	080088f9 	.word	0x080088f9
 8008834:	080088f9 	.word	0x080088f9
 8008838:	080088f9 	.word	0x080088f9
 800883c:	080088f9 	.word	0x080088f9
 8008840:	080088f9 	.word	0x080088f9
 8008844:	080088d1 	.word	0x080088d1
 8008848:	080088f9 	.word	0x080088f9
 800884c:	080088f9 	.word	0x080088f9
 8008850:	080088f9 	.word	0x080088f9
 8008854:	080088f9 	.word	0x080088f9
 8008858:	080088f9 	.word	0x080088f9
 800885c:	080088f9 	.word	0x080088f9
 8008860:	080088f9 	.word	0x080088f9
 8008864:	080088d9 	.word	0x080088d9
 8008868:	080088f9 	.word	0x080088f9
 800886c:	080088f9 	.word	0x080088f9
 8008870:	080088f9 	.word	0x080088f9
 8008874:	080088f9 	.word	0x080088f9
 8008878:	080088f9 	.word	0x080088f9
 800887c:	080088f9 	.word	0x080088f9
 8008880:	080088f9 	.word	0x080088f9
 8008884:	080088e1 	.word	0x080088e1
 8008888:	080088f9 	.word	0x080088f9
 800888c:	080088f9 	.word	0x080088f9
 8008890:	080088f9 	.word	0x080088f9
 8008894:	080088f9 	.word	0x080088f9
 8008898:	080088f9 	.word	0x080088f9
 800889c:	080088f9 	.word	0x080088f9
 80088a0:	080088f9 	.word	0x080088f9
 80088a4:	080088e9 	.word	0x080088e9
 80088a8:	080088f9 	.word	0x080088f9
 80088ac:	080088f9 	.word	0x080088f9
 80088b0:	080088f9 	.word	0x080088f9
 80088b4:	080088f9 	.word	0x080088f9
 80088b8:	080088f9 	.word	0x080088f9
 80088bc:	080088f9 	.word	0x080088f9
 80088c0:	080088f9 	.word	0x080088f9
 80088c4:	080088f1 	.word	0x080088f1
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e326      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80088d0:	2304      	movs	r3, #4
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e322      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80088d8:	2308      	movs	r3, #8
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e31e      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80088e0:	2310      	movs	r3, #16
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e31a      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80088e8:	2320      	movs	r3, #32
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e316      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80088f0:	2340      	movs	r3, #64	@ 0x40
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e312      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80088f8:	2380      	movs	r3, #128	@ 0x80
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fe:	e30e      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a69      	ldr	r2, [pc, #420]	@ (8008aac <UART_SetConfig+0x33c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d130      	bne.n	800896c <UART_SetConfig+0x1fc>
 800890a:	4b67      	ldr	r3, [pc, #412]	@ (8008aa8 <UART_SetConfig+0x338>)
 800890c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	2b05      	cmp	r3, #5
 8008914:	d826      	bhi.n	8008964 <UART_SetConfig+0x1f4>
 8008916:	a201      	add	r2, pc, #4	@ (adr r2, 800891c <UART_SetConfig+0x1ac>)
 8008918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891c:	08008935 	.word	0x08008935
 8008920:	0800893d 	.word	0x0800893d
 8008924:	08008945 	.word	0x08008945
 8008928:	0800894d 	.word	0x0800894d
 800892c:	08008955 	.word	0x08008955
 8008930:	0800895d 	.word	0x0800895d
 8008934:	2300      	movs	r3, #0
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e2f0      	b.n	8008f1e <UART_SetConfig+0x7ae>
 800893c:	2304      	movs	r3, #4
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008942:	e2ec      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008944:	2308      	movs	r3, #8
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894a:	e2e8      	b.n	8008f1e <UART_SetConfig+0x7ae>
 800894c:	2310      	movs	r3, #16
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008952:	e2e4      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008954:	2320      	movs	r3, #32
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e2e0      	b.n	8008f1e <UART_SetConfig+0x7ae>
 800895c:	2340      	movs	r3, #64	@ 0x40
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008962:	e2dc      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008964:	2380      	movs	r3, #128	@ 0x80
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896a:	e2d8      	b.n	8008f1e <UART_SetConfig+0x7ae>
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a4f      	ldr	r2, [pc, #316]	@ (8008ab0 <UART_SetConfig+0x340>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d130      	bne.n	80089d8 <UART_SetConfig+0x268>
 8008976:	4b4c      	ldr	r3, [pc, #304]	@ (8008aa8 <UART_SetConfig+0x338>)
 8008978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897a:	f003 0307 	and.w	r3, r3, #7
 800897e:	2b05      	cmp	r3, #5
 8008980:	d826      	bhi.n	80089d0 <UART_SetConfig+0x260>
 8008982:	a201      	add	r2, pc, #4	@ (adr r2, 8008988 <UART_SetConfig+0x218>)
 8008984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008988:	080089a1 	.word	0x080089a1
 800898c:	080089a9 	.word	0x080089a9
 8008990:	080089b1 	.word	0x080089b1
 8008994:	080089b9 	.word	0x080089b9
 8008998:	080089c1 	.word	0x080089c1
 800899c:	080089c9 	.word	0x080089c9
 80089a0:	2300      	movs	r3, #0
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e2ba      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80089a8:	2304      	movs	r3, #4
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ae:	e2b6      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80089b0:	2308      	movs	r3, #8
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b6:	e2b2      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80089b8:	2310      	movs	r3, #16
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089be:	e2ae      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80089c0:	2320      	movs	r3, #32
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c6:	e2aa      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80089c8:	2340      	movs	r3, #64	@ 0x40
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ce:	e2a6      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80089d0:	2380      	movs	r3, #128	@ 0x80
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d6:	e2a2      	b.n	8008f1e <UART_SetConfig+0x7ae>
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a35      	ldr	r2, [pc, #212]	@ (8008ab4 <UART_SetConfig+0x344>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d130      	bne.n	8008a44 <UART_SetConfig+0x2d4>
 80089e2:	4b31      	ldr	r3, [pc, #196]	@ (8008aa8 <UART_SetConfig+0x338>)
 80089e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	2b05      	cmp	r3, #5
 80089ec:	d826      	bhi.n	8008a3c <UART_SetConfig+0x2cc>
 80089ee:	a201      	add	r2, pc, #4	@ (adr r2, 80089f4 <UART_SetConfig+0x284>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008a0d 	.word	0x08008a0d
 80089f8:	08008a15 	.word	0x08008a15
 80089fc:	08008a1d 	.word	0x08008a1d
 8008a00:	08008a25 	.word	0x08008a25
 8008a04:	08008a2d 	.word	0x08008a2d
 8008a08:	08008a35 	.word	0x08008a35
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e284      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a14:	2304      	movs	r3, #4
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1a:	e280      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a1c:	2308      	movs	r3, #8
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a22:	e27c      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a24:	2310      	movs	r3, #16
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2a:	e278      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a2c:	2320      	movs	r3, #32
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a32:	e274      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a34:	2340      	movs	r3, #64	@ 0x40
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3a:	e270      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a3c:	2380      	movs	r3, #128	@ 0x80
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a42:	e26c      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a1b      	ldr	r2, [pc, #108]	@ (8008ab8 <UART_SetConfig+0x348>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d142      	bne.n	8008ad4 <UART_SetConfig+0x364>
 8008a4e:	4b16      	ldr	r3, [pc, #88]	@ (8008aa8 <UART_SetConfig+0x338>)
 8008a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	2b05      	cmp	r3, #5
 8008a58:	d838      	bhi.n	8008acc <UART_SetConfig+0x35c>
 8008a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <UART_SetConfig+0x2f0>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008a79 	.word	0x08008a79
 8008a64:	08008a81 	.word	0x08008a81
 8008a68:	08008a89 	.word	0x08008a89
 8008a6c:	08008a91 	.word	0x08008a91
 8008a70:	08008abd 	.word	0x08008abd
 8008a74:	08008ac5 	.word	0x08008ac5
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e24e      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a80:	2304      	movs	r3, #4
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a86:	e24a      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a88:	2308      	movs	r3, #8
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8e:	e246      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a90:	2310      	movs	r3, #16
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a96:	e242      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008a98:	cfff69f3 	.word	0xcfff69f3
 8008a9c:	58000c00 	.word	0x58000c00
 8008aa0:	11fff4ff 	.word	0x11fff4ff
 8008aa4:	40011000 	.word	0x40011000
 8008aa8:	58024400 	.word	0x58024400
 8008aac:	40004400 	.word	0x40004400
 8008ab0:	40004800 	.word	0x40004800
 8008ab4:	40004c00 	.word	0x40004c00
 8008ab8:	40005000 	.word	0x40005000
 8008abc:	2320      	movs	r3, #32
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e22c      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008ac4:	2340      	movs	r3, #64	@ 0x40
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e228      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008acc:	2380      	movs	r3, #128	@ 0x80
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e224      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4ab1      	ldr	r2, [pc, #708]	@ (8008da0 <UART_SetConfig+0x630>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d176      	bne.n	8008bcc <UART_SetConfig+0x45c>
 8008ade:	4bb1      	ldr	r3, [pc, #708]	@ (8008da4 <UART_SetConfig+0x634>)
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ae6:	2b28      	cmp	r3, #40	@ 0x28
 8008ae8:	d86c      	bhi.n	8008bc4 <UART_SetConfig+0x454>
 8008aea:	a201      	add	r2, pc, #4	@ (adr r2, 8008af0 <UART_SetConfig+0x380>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b95 	.word	0x08008b95
 8008af4:	08008bc5 	.word	0x08008bc5
 8008af8:	08008bc5 	.word	0x08008bc5
 8008afc:	08008bc5 	.word	0x08008bc5
 8008b00:	08008bc5 	.word	0x08008bc5
 8008b04:	08008bc5 	.word	0x08008bc5
 8008b08:	08008bc5 	.word	0x08008bc5
 8008b0c:	08008bc5 	.word	0x08008bc5
 8008b10:	08008b9d 	.word	0x08008b9d
 8008b14:	08008bc5 	.word	0x08008bc5
 8008b18:	08008bc5 	.word	0x08008bc5
 8008b1c:	08008bc5 	.word	0x08008bc5
 8008b20:	08008bc5 	.word	0x08008bc5
 8008b24:	08008bc5 	.word	0x08008bc5
 8008b28:	08008bc5 	.word	0x08008bc5
 8008b2c:	08008bc5 	.word	0x08008bc5
 8008b30:	08008ba5 	.word	0x08008ba5
 8008b34:	08008bc5 	.word	0x08008bc5
 8008b38:	08008bc5 	.word	0x08008bc5
 8008b3c:	08008bc5 	.word	0x08008bc5
 8008b40:	08008bc5 	.word	0x08008bc5
 8008b44:	08008bc5 	.word	0x08008bc5
 8008b48:	08008bc5 	.word	0x08008bc5
 8008b4c:	08008bc5 	.word	0x08008bc5
 8008b50:	08008bad 	.word	0x08008bad
 8008b54:	08008bc5 	.word	0x08008bc5
 8008b58:	08008bc5 	.word	0x08008bc5
 8008b5c:	08008bc5 	.word	0x08008bc5
 8008b60:	08008bc5 	.word	0x08008bc5
 8008b64:	08008bc5 	.word	0x08008bc5
 8008b68:	08008bc5 	.word	0x08008bc5
 8008b6c:	08008bc5 	.word	0x08008bc5
 8008b70:	08008bb5 	.word	0x08008bb5
 8008b74:	08008bc5 	.word	0x08008bc5
 8008b78:	08008bc5 	.word	0x08008bc5
 8008b7c:	08008bc5 	.word	0x08008bc5
 8008b80:	08008bc5 	.word	0x08008bc5
 8008b84:	08008bc5 	.word	0x08008bc5
 8008b88:	08008bc5 	.word	0x08008bc5
 8008b8c:	08008bc5 	.word	0x08008bc5
 8008b90:	08008bbd 	.word	0x08008bbd
 8008b94:	2301      	movs	r3, #1
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9a:	e1c0      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba2:	e1bc      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008ba4:	2308      	movs	r3, #8
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008baa:	e1b8      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008bac:	2310      	movs	r3, #16
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e1b4      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008bb4:	2320      	movs	r3, #32
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bba:	e1b0      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008bbc:	2340      	movs	r3, #64	@ 0x40
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc2:	e1ac      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008bc4:	2380      	movs	r3, #128	@ 0x80
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bca:	e1a8      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a75      	ldr	r2, [pc, #468]	@ (8008da8 <UART_SetConfig+0x638>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d130      	bne.n	8008c38 <UART_SetConfig+0x4c8>
 8008bd6:	4b73      	ldr	r3, [pc, #460]	@ (8008da4 <UART_SetConfig+0x634>)
 8008bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d826      	bhi.n	8008c30 <UART_SetConfig+0x4c0>
 8008be2:	a201      	add	r2, pc, #4	@ (adr r2, 8008be8 <UART_SetConfig+0x478>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c01 	.word	0x08008c01
 8008bec:	08008c09 	.word	0x08008c09
 8008bf0:	08008c11 	.word	0x08008c11
 8008bf4:	08008c19 	.word	0x08008c19
 8008bf8:	08008c21 	.word	0x08008c21
 8008bfc:	08008c29 	.word	0x08008c29
 8008c00:	2300      	movs	r3, #0
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c06:	e18a      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c08:	2304      	movs	r3, #4
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0e:	e186      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c10:	2308      	movs	r3, #8
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c16:	e182      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c18:	2310      	movs	r3, #16
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e17e      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c20:	2320      	movs	r3, #32
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c26:	e17a      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c28:	2340      	movs	r3, #64	@ 0x40
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2e:	e176      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c30:	2380      	movs	r3, #128	@ 0x80
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c36:	e172      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a5b      	ldr	r2, [pc, #364]	@ (8008dac <UART_SetConfig+0x63c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d130      	bne.n	8008ca4 <UART_SetConfig+0x534>
 8008c42:	4b58      	ldr	r3, [pc, #352]	@ (8008da4 <UART_SetConfig+0x634>)
 8008c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	d826      	bhi.n	8008c9c <UART_SetConfig+0x52c>
 8008c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c54 <UART_SetConfig+0x4e4>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008c6d 	.word	0x08008c6d
 8008c58:	08008c75 	.word	0x08008c75
 8008c5c:	08008c7d 	.word	0x08008c7d
 8008c60:	08008c85 	.word	0x08008c85
 8008c64:	08008c8d 	.word	0x08008c8d
 8008c68:	08008c95 	.word	0x08008c95
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c72:	e154      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c74:	2304      	movs	r3, #4
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7a:	e150      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c7c:	2308      	movs	r3, #8
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c82:	e14c      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c84:	2310      	movs	r3, #16
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8a:	e148      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c8c:	2320      	movs	r3, #32
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c92:	e144      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c94:	2340      	movs	r3, #64	@ 0x40
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9a:	e140      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008c9c:	2380      	movs	r3, #128	@ 0x80
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca2:	e13c      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a41      	ldr	r2, [pc, #260]	@ (8008db0 <UART_SetConfig+0x640>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	f040 8082 	bne.w	8008db4 <UART_SetConfig+0x644>
 8008cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8008da4 <UART_SetConfig+0x634>)
 8008cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cb8:	2b28      	cmp	r3, #40	@ 0x28
 8008cba:	d86d      	bhi.n	8008d98 <UART_SetConfig+0x628>
 8008cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc4 <UART_SetConfig+0x554>)
 8008cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc2:	bf00      	nop
 8008cc4:	08008d69 	.word	0x08008d69
 8008cc8:	08008d99 	.word	0x08008d99
 8008ccc:	08008d99 	.word	0x08008d99
 8008cd0:	08008d99 	.word	0x08008d99
 8008cd4:	08008d99 	.word	0x08008d99
 8008cd8:	08008d99 	.word	0x08008d99
 8008cdc:	08008d99 	.word	0x08008d99
 8008ce0:	08008d99 	.word	0x08008d99
 8008ce4:	08008d71 	.word	0x08008d71
 8008ce8:	08008d99 	.word	0x08008d99
 8008cec:	08008d99 	.word	0x08008d99
 8008cf0:	08008d99 	.word	0x08008d99
 8008cf4:	08008d99 	.word	0x08008d99
 8008cf8:	08008d99 	.word	0x08008d99
 8008cfc:	08008d99 	.word	0x08008d99
 8008d00:	08008d99 	.word	0x08008d99
 8008d04:	08008d79 	.word	0x08008d79
 8008d08:	08008d99 	.word	0x08008d99
 8008d0c:	08008d99 	.word	0x08008d99
 8008d10:	08008d99 	.word	0x08008d99
 8008d14:	08008d99 	.word	0x08008d99
 8008d18:	08008d99 	.word	0x08008d99
 8008d1c:	08008d99 	.word	0x08008d99
 8008d20:	08008d99 	.word	0x08008d99
 8008d24:	08008d81 	.word	0x08008d81
 8008d28:	08008d99 	.word	0x08008d99
 8008d2c:	08008d99 	.word	0x08008d99
 8008d30:	08008d99 	.word	0x08008d99
 8008d34:	08008d99 	.word	0x08008d99
 8008d38:	08008d99 	.word	0x08008d99
 8008d3c:	08008d99 	.word	0x08008d99
 8008d40:	08008d99 	.word	0x08008d99
 8008d44:	08008d89 	.word	0x08008d89
 8008d48:	08008d99 	.word	0x08008d99
 8008d4c:	08008d99 	.word	0x08008d99
 8008d50:	08008d99 	.word	0x08008d99
 8008d54:	08008d99 	.word	0x08008d99
 8008d58:	08008d99 	.word	0x08008d99
 8008d5c:	08008d99 	.word	0x08008d99
 8008d60:	08008d99 	.word	0x08008d99
 8008d64:	08008d91 	.word	0x08008d91
 8008d68:	2301      	movs	r3, #1
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6e:	e0d6      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008d70:	2304      	movs	r3, #4
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d76:	e0d2      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008d78:	2308      	movs	r3, #8
 8008d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7e:	e0ce      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008d80:	2310      	movs	r3, #16
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d86:	e0ca      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008d88:	2320      	movs	r3, #32
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e0c6      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008d90:	2340      	movs	r3, #64	@ 0x40
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e0c2      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008d98:	2380      	movs	r3, #128	@ 0x80
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e0be      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008da0:	40011400 	.word	0x40011400
 8008da4:	58024400 	.word	0x58024400
 8008da8:	40007800 	.word	0x40007800
 8008dac:	40007c00 	.word	0x40007c00
 8008db0:	40011800 	.word	0x40011800
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4aad      	ldr	r2, [pc, #692]	@ (8009070 <UART_SetConfig+0x900>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d176      	bne.n	8008eac <UART_SetConfig+0x73c>
 8008dbe:	4bad      	ldr	r3, [pc, #692]	@ (8009074 <UART_SetConfig+0x904>)
 8008dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dc6:	2b28      	cmp	r3, #40	@ 0x28
 8008dc8:	d86c      	bhi.n	8008ea4 <UART_SetConfig+0x734>
 8008dca:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <UART_SetConfig+0x660>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008e75 	.word	0x08008e75
 8008dd4:	08008ea5 	.word	0x08008ea5
 8008dd8:	08008ea5 	.word	0x08008ea5
 8008ddc:	08008ea5 	.word	0x08008ea5
 8008de0:	08008ea5 	.word	0x08008ea5
 8008de4:	08008ea5 	.word	0x08008ea5
 8008de8:	08008ea5 	.word	0x08008ea5
 8008dec:	08008ea5 	.word	0x08008ea5
 8008df0:	08008e7d 	.word	0x08008e7d
 8008df4:	08008ea5 	.word	0x08008ea5
 8008df8:	08008ea5 	.word	0x08008ea5
 8008dfc:	08008ea5 	.word	0x08008ea5
 8008e00:	08008ea5 	.word	0x08008ea5
 8008e04:	08008ea5 	.word	0x08008ea5
 8008e08:	08008ea5 	.word	0x08008ea5
 8008e0c:	08008ea5 	.word	0x08008ea5
 8008e10:	08008e85 	.word	0x08008e85
 8008e14:	08008ea5 	.word	0x08008ea5
 8008e18:	08008ea5 	.word	0x08008ea5
 8008e1c:	08008ea5 	.word	0x08008ea5
 8008e20:	08008ea5 	.word	0x08008ea5
 8008e24:	08008ea5 	.word	0x08008ea5
 8008e28:	08008ea5 	.word	0x08008ea5
 8008e2c:	08008ea5 	.word	0x08008ea5
 8008e30:	08008e8d 	.word	0x08008e8d
 8008e34:	08008ea5 	.word	0x08008ea5
 8008e38:	08008ea5 	.word	0x08008ea5
 8008e3c:	08008ea5 	.word	0x08008ea5
 8008e40:	08008ea5 	.word	0x08008ea5
 8008e44:	08008ea5 	.word	0x08008ea5
 8008e48:	08008ea5 	.word	0x08008ea5
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008e95 	.word	0x08008e95
 8008e54:	08008ea5 	.word	0x08008ea5
 8008e58:	08008ea5 	.word	0x08008ea5
 8008e5c:	08008ea5 	.word	0x08008ea5
 8008e60:	08008ea5 	.word	0x08008ea5
 8008e64:	08008ea5 	.word	0x08008ea5
 8008e68:	08008ea5 	.word	0x08008ea5
 8008e6c:	08008ea5 	.word	0x08008ea5
 8008e70:	08008e9d 	.word	0x08008e9d
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e050      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e82:	e04c      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8a:	e048      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e92:	e044      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008e94:	2320      	movs	r3, #32
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9a:	e040      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008e9c:	2340      	movs	r3, #64	@ 0x40
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea2:	e03c      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008ea4:	2380      	movs	r3, #128	@ 0x80
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eaa:	e038      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a71      	ldr	r2, [pc, #452]	@ (8009078 <UART_SetConfig+0x908>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d130      	bne.n	8008f18 <UART_SetConfig+0x7a8>
 8008eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8009074 <UART_SetConfig+0x904>)
 8008eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	d826      	bhi.n	8008f10 <UART_SetConfig+0x7a0>
 8008ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec8 <UART_SetConfig+0x758>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ee1 	.word	0x08008ee1
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	08008ef1 	.word	0x08008ef1
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008f01 	.word	0x08008f01
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	e01a      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e016      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e012      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e00e      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008f00:	2320      	movs	r3, #32
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e00a      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008f08:	2340      	movs	r3, #64	@ 0x40
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e006      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008f10:	2380      	movs	r3, #128	@ 0x80
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f16:	e002      	b.n	8008f1e <UART_SetConfig+0x7ae>
 8008f18:	2380      	movs	r3, #128	@ 0x80
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a55      	ldr	r2, [pc, #340]	@ (8009078 <UART_SetConfig+0x908>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	f040 80f8 	bne.w	800911a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	dc46      	bgt.n	8008fc0 <UART_SetConfig+0x850>
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	db75      	blt.n	8009022 <UART_SetConfig+0x8b2>
 8008f36:	3b02      	subs	r3, #2
 8008f38:	2b1e      	cmp	r3, #30
 8008f3a:	d872      	bhi.n	8009022 <UART_SetConfig+0x8b2>
 8008f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f44 <UART_SetConfig+0x7d4>)
 8008f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f42:	bf00      	nop
 8008f44:	08008fc7 	.word	0x08008fc7
 8008f48:	08009023 	.word	0x08009023
 8008f4c:	08008fcf 	.word	0x08008fcf
 8008f50:	08009023 	.word	0x08009023
 8008f54:	08009023 	.word	0x08009023
 8008f58:	08009023 	.word	0x08009023
 8008f5c:	08008fdf 	.word	0x08008fdf
 8008f60:	08009023 	.word	0x08009023
 8008f64:	08009023 	.word	0x08009023
 8008f68:	08009023 	.word	0x08009023
 8008f6c:	08009023 	.word	0x08009023
 8008f70:	08009023 	.word	0x08009023
 8008f74:	08009023 	.word	0x08009023
 8008f78:	08009023 	.word	0x08009023
 8008f7c:	08008fef 	.word	0x08008fef
 8008f80:	08009023 	.word	0x08009023
 8008f84:	08009023 	.word	0x08009023
 8008f88:	08009023 	.word	0x08009023
 8008f8c:	08009023 	.word	0x08009023
 8008f90:	08009023 	.word	0x08009023
 8008f94:	08009023 	.word	0x08009023
 8008f98:	08009023 	.word	0x08009023
 8008f9c:	08009023 	.word	0x08009023
 8008fa0:	08009023 	.word	0x08009023
 8008fa4:	08009023 	.word	0x08009023
 8008fa8:	08009023 	.word	0x08009023
 8008fac:	08009023 	.word	0x08009023
 8008fb0:	08009023 	.word	0x08009023
 8008fb4:	08009023 	.word	0x08009023
 8008fb8:	08009023 	.word	0x08009023
 8008fbc:	08009015 	.word	0x08009015
 8008fc0:	2b40      	cmp	r3, #64	@ 0x40
 8008fc2:	d02a      	beq.n	800901a <UART_SetConfig+0x8aa>
 8008fc4:	e02d      	b.n	8009022 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008fc6:	f7fc fbef 	bl	80057a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008fca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fcc:	e02f      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fc fbfe 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fdc:	e027      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fde:	f107 0318 	add.w	r3, r7, #24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fc fd4a 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fec:	e01f      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fee:	4b21      	ldr	r3, [pc, #132]	@ (8009074 <UART_SetConfig+0x904>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d009      	beq.n	800900e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8009074 <UART_SetConfig+0x904>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	08db      	lsrs	r3, r3, #3
 8009000:	f003 0303 	and.w	r3, r3, #3
 8009004:	4a1d      	ldr	r2, [pc, #116]	@ (800907c <UART_SetConfig+0x90c>)
 8009006:	fa22 f303 	lsr.w	r3, r2, r3
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800900c:	e00f      	b.n	800902e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800900e:	4b1b      	ldr	r3, [pc, #108]	@ (800907c <UART_SetConfig+0x90c>)
 8009010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009012:	e00c      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009014:	4b1a      	ldr	r3, [pc, #104]	@ (8009080 <UART_SetConfig+0x910>)
 8009016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009018:	e009      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800901a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009020:	e005      	b.n	800902e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800902c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800902e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 81ee 	beq.w	8009412 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903a:	4a12      	ldr	r2, [pc, #72]	@ (8009084 <UART_SetConfig+0x914>)
 800903c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009040:	461a      	mov	r2, r3
 8009042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009044:	fbb3 f3f2 	udiv	r3, r3, r2
 8009048:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	4613      	mov	r3, r2
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	4413      	add	r3, r2
 8009054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009056:	429a      	cmp	r2, r3
 8009058:	d305      	bcc.n	8009066 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009062:	429a      	cmp	r2, r3
 8009064:	d910      	bls.n	8009088 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800906c:	e1d1      	b.n	8009412 <UART_SetConfig+0xca2>
 800906e:	bf00      	nop
 8009070:	40011c00 	.word	0x40011c00
 8009074:	58024400 	.word	0x58024400
 8009078:	58000c00 	.word	0x58000c00
 800907c:	03d09000 	.word	0x03d09000
 8009080:	003d0900 	.word	0x003d0900
 8009084:	0801019c 	.word	0x0801019c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908a:	2200      	movs	r2, #0
 800908c:	60bb      	str	r3, [r7, #8]
 800908e:	60fa      	str	r2, [r7, #12]
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009094:	4ac0      	ldr	r2, [pc, #768]	@ (8009398 <UART_SetConfig+0xc28>)
 8009096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800909a:	b29b      	uxth	r3, r3
 800909c:	2200      	movs	r2, #0
 800909e:	603b      	str	r3, [r7, #0]
 80090a0:	607a      	str	r2, [r7, #4]
 80090a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090aa:	f7f7 fb45 	bl	8000738 <__aeabi_uldivmod>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4610      	mov	r0, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	f04f 0200 	mov.w	r2, #0
 80090ba:	f04f 0300 	mov.w	r3, #0
 80090be:	020b      	lsls	r3, r1, #8
 80090c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090c4:	0202      	lsls	r2, r0, #8
 80090c6:	6979      	ldr	r1, [r7, #20]
 80090c8:	6849      	ldr	r1, [r1, #4]
 80090ca:	0849      	lsrs	r1, r1, #1
 80090cc:	2000      	movs	r0, #0
 80090ce:	460c      	mov	r4, r1
 80090d0:	4605      	mov	r5, r0
 80090d2:	eb12 0804 	adds.w	r8, r2, r4
 80090d6:	eb43 0905 	adc.w	r9, r3, r5
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	469a      	mov	sl, r3
 80090e2:	4693      	mov	fp, r2
 80090e4:	4652      	mov	r2, sl
 80090e6:	465b      	mov	r3, fp
 80090e8:	4640      	mov	r0, r8
 80090ea:	4649      	mov	r1, r9
 80090ec:	f7f7 fb24 	bl	8000738 <__aeabi_uldivmod>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4613      	mov	r3, r2
 80090f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090fe:	d308      	bcc.n	8009112 <UART_SetConfig+0x9a2>
 8009100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009106:	d204      	bcs.n	8009112 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800910e:	60da      	str	r2, [r3, #12]
 8009110:	e17f      	b.n	8009412 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009118:	e17b      	b.n	8009412 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009122:	f040 80bd 	bne.w	80092a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009126:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800912a:	2b20      	cmp	r3, #32
 800912c:	dc48      	bgt.n	80091c0 <UART_SetConfig+0xa50>
 800912e:	2b00      	cmp	r3, #0
 8009130:	db7b      	blt.n	800922a <UART_SetConfig+0xaba>
 8009132:	2b20      	cmp	r3, #32
 8009134:	d879      	bhi.n	800922a <UART_SetConfig+0xaba>
 8009136:	a201      	add	r2, pc, #4	@ (adr r2, 800913c <UART_SetConfig+0x9cc>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	080091c7 	.word	0x080091c7
 8009140:	080091cf 	.word	0x080091cf
 8009144:	0800922b 	.word	0x0800922b
 8009148:	0800922b 	.word	0x0800922b
 800914c:	080091d7 	.word	0x080091d7
 8009150:	0800922b 	.word	0x0800922b
 8009154:	0800922b 	.word	0x0800922b
 8009158:	0800922b 	.word	0x0800922b
 800915c:	080091e7 	.word	0x080091e7
 8009160:	0800922b 	.word	0x0800922b
 8009164:	0800922b 	.word	0x0800922b
 8009168:	0800922b 	.word	0x0800922b
 800916c:	0800922b 	.word	0x0800922b
 8009170:	0800922b 	.word	0x0800922b
 8009174:	0800922b 	.word	0x0800922b
 8009178:	0800922b 	.word	0x0800922b
 800917c:	080091f7 	.word	0x080091f7
 8009180:	0800922b 	.word	0x0800922b
 8009184:	0800922b 	.word	0x0800922b
 8009188:	0800922b 	.word	0x0800922b
 800918c:	0800922b 	.word	0x0800922b
 8009190:	0800922b 	.word	0x0800922b
 8009194:	0800922b 	.word	0x0800922b
 8009198:	0800922b 	.word	0x0800922b
 800919c:	0800922b 	.word	0x0800922b
 80091a0:	0800922b 	.word	0x0800922b
 80091a4:	0800922b 	.word	0x0800922b
 80091a8:	0800922b 	.word	0x0800922b
 80091ac:	0800922b 	.word	0x0800922b
 80091b0:	0800922b 	.word	0x0800922b
 80091b4:	0800922b 	.word	0x0800922b
 80091b8:	0800922b 	.word	0x0800922b
 80091bc:	0800921d 	.word	0x0800921d
 80091c0:	2b40      	cmp	r3, #64	@ 0x40
 80091c2:	d02e      	beq.n	8009222 <UART_SetConfig+0xab2>
 80091c4:	e031      	b.n	800922a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091c6:	f7fa fc51 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 80091ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091cc:	e033      	b.n	8009236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091ce:	f7fa fc63 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 80091d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091d4:	e02f      	b.n	8009236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fc fafa 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e4:	e027      	b.n	8009236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e6:	f107 0318 	add.w	r3, r7, #24
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fc fc46 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f4:	e01f      	b.n	8009236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091f6:	4b69      	ldr	r3, [pc, #420]	@ (800939c <UART_SetConfig+0xc2c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d009      	beq.n	8009216 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009202:	4b66      	ldr	r3, [pc, #408]	@ (800939c <UART_SetConfig+0xc2c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	08db      	lsrs	r3, r3, #3
 8009208:	f003 0303 	and.w	r3, r3, #3
 800920c:	4a64      	ldr	r2, [pc, #400]	@ (80093a0 <UART_SetConfig+0xc30>)
 800920e:	fa22 f303 	lsr.w	r3, r2, r3
 8009212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009214:	e00f      	b.n	8009236 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009216:	4b62      	ldr	r3, [pc, #392]	@ (80093a0 <UART_SetConfig+0xc30>)
 8009218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800921a:	e00c      	b.n	8009236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800921c:	4b61      	ldr	r3, [pc, #388]	@ (80093a4 <UART_SetConfig+0xc34>)
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009220:	e009      	b.n	8009236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009228:	e005      	b.n	8009236 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 80ea 	beq.w	8009412 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009242:	4a55      	ldr	r2, [pc, #340]	@ (8009398 <UART_SetConfig+0xc28>)
 8009244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009248:	461a      	mov	r2, r3
 800924a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009250:	005a      	lsls	r2, r3, #1
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	441a      	add	r2, r3
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009262:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009266:	2b0f      	cmp	r3, #15
 8009268:	d916      	bls.n	8009298 <UART_SetConfig+0xb28>
 800926a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009270:	d212      	bcs.n	8009298 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009274:	b29b      	uxth	r3, r3
 8009276:	f023 030f 	bic.w	r3, r3, #15
 800927a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800927c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927e:	085b      	lsrs	r3, r3, #1
 8009280:	b29b      	uxth	r3, r3
 8009282:	f003 0307 	and.w	r3, r3, #7
 8009286:	b29a      	uxth	r2, r3
 8009288:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800928a:	4313      	orrs	r3, r2
 800928c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009294:	60da      	str	r2, [r3, #12]
 8009296:	e0bc      	b.n	8009412 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800929e:	e0b8      	b.n	8009412 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	dc4b      	bgt.n	8009340 <UART_SetConfig+0xbd0>
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f2c0 8087 	blt.w	80093bc <UART_SetConfig+0xc4c>
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	f200 8084 	bhi.w	80093bc <UART_SetConfig+0xc4c>
 80092b4:	a201      	add	r2, pc, #4	@ (adr r2, 80092bc <UART_SetConfig+0xb4c>)
 80092b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ba:	bf00      	nop
 80092bc:	08009347 	.word	0x08009347
 80092c0:	0800934f 	.word	0x0800934f
 80092c4:	080093bd 	.word	0x080093bd
 80092c8:	080093bd 	.word	0x080093bd
 80092cc:	08009357 	.word	0x08009357
 80092d0:	080093bd 	.word	0x080093bd
 80092d4:	080093bd 	.word	0x080093bd
 80092d8:	080093bd 	.word	0x080093bd
 80092dc:	08009367 	.word	0x08009367
 80092e0:	080093bd 	.word	0x080093bd
 80092e4:	080093bd 	.word	0x080093bd
 80092e8:	080093bd 	.word	0x080093bd
 80092ec:	080093bd 	.word	0x080093bd
 80092f0:	080093bd 	.word	0x080093bd
 80092f4:	080093bd 	.word	0x080093bd
 80092f8:	080093bd 	.word	0x080093bd
 80092fc:	08009377 	.word	0x08009377
 8009300:	080093bd 	.word	0x080093bd
 8009304:	080093bd 	.word	0x080093bd
 8009308:	080093bd 	.word	0x080093bd
 800930c:	080093bd 	.word	0x080093bd
 8009310:	080093bd 	.word	0x080093bd
 8009314:	080093bd 	.word	0x080093bd
 8009318:	080093bd 	.word	0x080093bd
 800931c:	080093bd 	.word	0x080093bd
 8009320:	080093bd 	.word	0x080093bd
 8009324:	080093bd 	.word	0x080093bd
 8009328:	080093bd 	.word	0x080093bd
 800932c:	080093bd 	.word	0x080093bd
 8009330:	080093bd 	.word	0x080093bd
 8009334:	080093bd 	.word	0x080093bd
 8009338:	080093bd 	.word	0x080093bd
 800933c:	080093af 	.word	0x080093af
 8009340:	2b40      	cmp	r3, #64	@ 0x40
 8009342:	d037      	beq.n	80093b4 <UART_SetConfig+0xc44>
 8009344:	e03a      	b.n	80093bc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009346:	f7fa fb91 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 800934a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800934c:	e03c      	b.n	80093c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800934e:	f7fa fba3 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8009352:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009354:	e038      	b.n	80093c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800935a:	4618      	mov	r0, r3
 800935c:	f7fc fa3a 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009364:	e030      	b.n	80093c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009366:	f107 0318 	add.w	r3, r7, #24
 800936a:	4618      	mov	r0, r3
 800936c:	f7fc fb86 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009374:	e028      	b.n	80093c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009376:	4b09      	ldr	r3, [pc, #36]	@ (800939c <UART_SetConfig+0xc2c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b00      	cmp	r3, #0
 8009380:	d012      	beq.n	80093a8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009382:	4b06      	ldr	r3, [pc, #24]	@ (800939c <UART_SetConfig+0xc2c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	08db      	lsrs	r3, r3, #3
 8009388:	f003 0303 	and.w	r3, r3, #3
 800938c:	4a04      	ldr	r2, [pc, #16]	@ (80093a0 <UART_SetConfig+0xc30>)
 800938e:	fa22 f303 	lsr.w	r3, r2, r3
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009394:	e018      	b.n	80093c8 <UART_SetConfig+0xc58>
 8009396:	bf00      	nop
 8009398:	0801019c 	.word	0x0801019c
 800939c:	58024400 	.word	0x58024400
 80093a0:	03d09000 	.word	0x03d09000
 80093a4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80093a8:	4b24      	ldr	r3, [pc, #144]	@ (800943c <UART_SetConfig+0xccc>)
 80093aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ac:	e00c      	b.n	80093c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093ae:	4b24      	ldr	r3, [pc, #144]	@ (8009440 <UART_SetConfig+0xcd0>)
 80093b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093b2:	e009      	b.n	80093c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ba:	e005      	b.n	80093c8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093c6:	bf00      	nop
    }

    if (pclk != 0U)
 80093c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d021      	beq.n	8009412 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009444 <UART_SetConfig+0xcd4>)
 80093d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093d8:	461a      	mov	r2, r3
 80093da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	085b      	lsrs	r3, r3, #1
 80093e6:	441a      	add	r2, r3
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f4:	2b0f      	cmp	r3, #15
 80093f6:	d909      	bls.n	800940c <UART_SetConfig+0xc9c>
 80093f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093fe:	d205      	bcs.n	800940c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	b29a      	uxth	r2, r3
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	60da      	str	r2, [r3, #12]
 800940a:	e002      	b.n	8009412 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2201      	movs	r2, #1
 8009416:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2201      	movs	r2, #1
 800941e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2200      	movs	r2, #0
 8009426:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	2200      	movs	r2, #0
 800942c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800942e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009432:	4618      	mov	r0, r3
 8009434:	3748      	adds	r7, #72	@ 0x48
 8009436:	46bd      	mov	sp, r7
 8009438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800943c:	03d09000 	.word	0x03d09000
 8009440:	003d0900 	.word	0x003d0900
 8009444:	0801019c 	.word	0x0801019c

08009448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009454:	f003 0308 	and.w	r3, r3, #8
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00a      	beq.n	8009472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00a      	beq.n	8009494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	430a      	orrs	r2, r1
 8009492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00a      	beq.n	80094b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ba:	f003 0304 	and.w	r3, r3, #4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00a      	beq.n	80094d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	430a      	orrs	r2, r1
 80094d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094dc:	f003 0310 	and.w	r3, r3, #16
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00a      	beq.n	80094fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00a      	beq.n	800951c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009524:	2b00      	cmp	r3, #0
 8009526:	d01a      	beq.n	800955e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	430a      	orrs	r2, r1
 800953c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009546:	d10a      	bne.n	800955e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	605a      	str	r2, [r3, #4]
  }
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b098      	sub	sp, #96	@ 0x60
 8009590:	af02      	add	r7, sp, #8
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800959c:	f7f8 fe58 	bl	8002250 <HAL_GetTick>
 80095a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0308 	and.w	r3, r3, #8
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	d12f      	bne.n	8009610 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095b8:	2200      	movs	r2, #0
 80095ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f88e 	bl	80096e0 <UART_WaitOnFlagUntilTimeout>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d022      	beq.n	8009610 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d2:	e853 3f00 	ldrex	r3, [r3]
 80095d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095de:	653b      	str	r3, [r7, #80]	@ 0x50
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e6      	bne.n	80095ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2220      	movs	r2, #32
 8009600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e063      	b.n	80096d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0304 	and.w	r3, r3, #4
 800961a:	2b04      	cmp	r3, #4
 800961c:	d149      	bne.n	80096b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800961e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009626:	2200      	movs	r2, #0
 8009628:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f857 	bl	80096e0 <UART_WaitOnFlagUntilTimeout>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d03c      	beq.n	80096b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	623b      	str	r3, [r7, #32]
   return(result);
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800964c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009656:	633b      	str	r3, [r7, #48]	@ 0x30
 8009658:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800965c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e6      	bne.n	8009638 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	60fb      	str	r3, [r7, #12]
   return(result);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f023 0301 	bic.w	r3, r3, #1
 8009680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800968a:	61fa      	str	r2, [r7, #28]
 800968c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	69b9      	ldr	r1, [r7, #24]
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	617b      	str	r3, [r7, #20]
   return(result);
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e5      	bne.n	800966a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e012      	b.n	80096d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2220      	movs	r2, #32
 80096be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3758      	adds	r7, #88	@ 0x58
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	603b      	str	r3, [r7, #0]
 80096ec:	4613      	mov	r3, r2
 80096ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f0:	e04f      	b.n	8009792 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f8:	d04b      	beq.n	8009792 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096fa:	f7f8 fda9 	bl	8002250 <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	429a      	cmp	r2, r3
 8009708:	d302      	bcc.n	8009710 <UART_WaitOnFlagUntilTimeout+0x30>
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	e04e      	b.n	80097b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0304 	and.w	r3, r3, #4
 800971e:	2b00      	cmp	r3, #0
 8009720:	d037      	beq.n	8009792 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2b80      	cmp	r3, #128	@ 0x80
 8009726:	d034      	beq.n	8009792 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b40      	cmp	r3, #64	@ 0x40
 800972c:	d031      	beq.n	8009792 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	69db      	ldr	r3, [r3, #28]
 8009734:	f003 0308 	and.w	r3, r3, #8
 8009738:	2b08      	cmp	r3, #8
 800973a:	d110      	bne.n	800975e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2208      	movs	r2, #8
 8009742:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 f839 	bl	80097bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2208      	movs	r2, #8
 800974e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e029      	b.n	80097b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800976c:	d111      	bne.n	8009792 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009776:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f000 f81f 	bl	80097bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2220      	movs	r2, #32
 8009782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e00f      	b.n	80097b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	69da      	ldr	r2, [r3, #28]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4013      	ands	r3, r2
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	429a      	cmp	r2, r3
 80097a0:	bf0c      	ite	eq
 80097a2:	2301      	moveq	r3, #1
 80097a4:	2300      	movne	r3, #0
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	461a      	mov	r2, r3
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d0a0      	beq.n	80096f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b095      	sub	sp, #84	@ 0x54
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80097e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e6      	bne.n	80097c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3308      	adds	r3, #8
 80097fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	e853 3f00 	ldrex	r3, [r3]
 8009804:	61fb      	str	r3, [r7, #28]
   return(result);
 8009806:	69fa      	ldr	r2, [r7, #28]
 8009808:	4b1e      	ldr	r3, [pc, #120]	@ (8009884 <UART_EndRxTransfer+0xc8>)
 800980a:	4013      	ands	r3, r2
 800980c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3308      	adds	r3, #8
 8009814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009818:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800981c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e5      	bne.n	80097f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800982e:	2b01      	cmp	r3, #1
 8009830:	d118      	bne.n	8009864 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f023 0310 	bic.w	r3, r3, #16
 8009846:	647b      	str	r3, [r7, #68]	@ 0x44
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	461a      	mov	r2, r3
 800984e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009850:	61bb      	str	r3, [r7, #24]
 8009852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009854:	6979      	ldr	r1, [r7, #20]
 8009856:	69ba      	ldr	r2, [r7, #24]
 8009858:	e841 2300 	strex	r3, r2, [r1]
 800985c:	613b      	str	r3, [r7, #16]
   return(result);
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e6      	bne.n	8009832 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2220      	movs	r2, #32
 8009868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009878:	bf00      	nop
 800987a:	3754      	adds	r7, #84	@ 0x54
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	effffffe 	.word	0xeffffffe

08009888 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009896:	2b01      	cmp	r3, #1
 8009898:	d101      	bne.n	800989e <HAL_UARTEx_DisableFifoMode+0x16>
 800989a:	2302      	movs	r3, #2
 800989c:	e027      	b.n	80098ee <HAL_UARTEx_DisableFifoMode+0x66>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2224      	movs	r2, #36	@ 0x24
 80098aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0201 	bic.w	r2, r2, #1
 80098c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800990a:	2b01      	cmp	r3, #1
 800990c:	d101      	bne.n	8009912 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800990e:	2302      	movs	r3, #2
 8009910:	e02d      	b.n	800996e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2224      	movs	r2, #36	@ 0x24
 800991e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f022 0201 	bic.w	r2, r2, #1
 8009938:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f850 	bl	80099f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2220      	movs	r2, #32
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009986:	2b01      	cmp	r3, #1
 8009988:	d101      	bne.n	800998e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800998a:	2302      	movs	r3, #2
 800998c:	e02d      	b.n	80099ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2224      	movs	r2, #36	@ 0x24
 800999a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 0201 	bic.w	r2, r2, #1
 80099b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f812 	bl	80099f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d108      	bne.n	8009a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a14:	e031      	b.n	8009a7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a16:	2310      	movs	r3, #16
 8009a18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a1a:	2310      	movs	r3, #16
 8009a1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	0e5b      	lsrs	r3, r3, #25
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	0f5b      	lsrs	r3, r3, #29
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	7b3a      	ldrb	r2, [r7, #12]
 8009a42:	4911      	ldr	r1, [pc, #68]	@ (8009a88 <UARTEx_SetNbDataToProcess+0x94>)
 8009a44:	5c8a      	ldrb	r2, [r1, r2]
 8009a46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a4a:	7b3a      	ldrb	r2, [r7, #12]
 8009a4c:	490f      	ldr	r1, [pc, #60]	@ (8009a8c <UARTEx_SetNbDataToProcess+0x98>)
 8009a4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	7b7a      	ldrb	r2, [r7, #13]
 8009a60:	4909      	ldr	r1, [pc, #36]	@ (8009a88 <UARTEx_SetNbDataToProcess+0x94>)
 8009a62:	5c8a      	ldrb	r2, [r1, r2]
 8009a64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a68:	7b7a      	ldrb	r2, [r7, #13]
 8009a6a:	4908      	ldr	r1, [pc, #32]	@ (8009a8c <UARTEx_SetNbDataToProcess+0x98>)
 8009a6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	080101b4 	.word	0x080101b4
 8009a8c:	080101bc 	.word	0x080101bc

08009a90 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e03c      	b.n	8009b1c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7f8 f90a 	bl	8001cd0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 0201 	bic.w	r2, r2, #1
 8009ad2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f85b 	bl	8009b90 <USART_SetConfig>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d101      	bne.n	8009ae4 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e01b      	b.n	8009b1c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009af2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689a      	ldr	r2, [r3, #8]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b02:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f042 0201 	orr.w	r2, r2, #1
 8009b12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fddd 	bl	800a6d4 <USART_CheckIdleState>
 8009b1a:	4603      	mov	r3, r0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	4613      	mov	r3, r2
 8009b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009b34:	e018      	b.n	8009b68 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3c:	d014      	beq.n	8009b68 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b3e:	f7f8 fb87 	bl	8002250 <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d302      	bcc.n	8009b54 <USART_WaitOnFlagUntilTimeout+0x30>
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d109      	bne.n	8009b68 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e00f      	b.n	8009b88 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	69da      	ldr	r2, [r3, #28]
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	4013      	ands	r3, r2
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	bf0c      	ite	eq
 8009b78:	2301      	moveq	r3, #1
 8009b7a:	2300      	movne	r3, #0
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	461a      	mov	r2, r3
 8009b80:	79fb      	ldrb	r3, [r7, #7]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d0d7      	beq.n	8009b36 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08e      	sub	sp, #56	@ 0x38
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	4bc9      	ldr	r3, [pc, #804]	@ (8009ee4 <USART_SetConfig+0x354>)
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6812      	ldr	r2, [r2, #0]
 8009bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc8:	430b      	orrs	r3, r1
 8009bca:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8009bcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	699a      	ldr	r2, [r3, #24]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	69db      	ldr	r3, [r3, #28]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009be8:	4313      	orrs	r3, r2
 8009bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	4bba      	ldr	r3, [pc, #744]	@ (8009ee8 <USART_SetConfig+0x358>)
 8009bfe:	4013      	ands	r3, r2
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	6812      	ldr	r2, [r2, #0]
 8009c04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c06:	430b      	orrs	r3, r1
 8009c08:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c10:	f023 010f 	bic.w	r1, r3, #15
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4ab1      	ldr	r2, [pc, #708]	@ (8009eec <USART_SetConfig+0x35c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d176      	bne.n	8009d18 <USART_SetConfig+0x188>
 8009c2a:	4bb1      	ldr	r3, [pc, #708]	@ (8009ef0 <USART_SetConfig+0x360>)
 8009c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c32:	2b28      	cmp	r3, #40	@ 0x28
 8009c34:	d86c      	bhi.n	8009d10 <USART_SetConfig+0x180>
 8009c36:	a201      	add	r2, pc, #4	@ (adr r2, 8009c3c <USART_SetConfig+0xac>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009ce1 	.word	0x08009ce1
 8009c40:	08009d11 	.word	0x08009d11
 8009c44:	08009d11 	.word	0x08009d11
 8009c48:	08009d11 	.word	0x08009d11
 8009c4c:	08009d11 	.word	0x08009d11
 8009c50:	08009d11 	.word	0x08009d11
 8009c54:	08009d11 	.word	0x08009d11
 8009c58:	08009d11 	.word	0x08009d11
 8009c5c:	08009ce9 	.word	0x08009ce9
 8009c60:	08009d11 	.word	0x08009d11
 8009c64:	08009d11 	.word	0x08009d11
 8009c68:	08009d11 	.word	0x08009d11
 8009c6c:	08009d11 	.word	0x08009d11
 8009c70:	08009d11 	.word	0x08009d11
 8009c74:	08009d11 	.word	0x08009d11
 8009c78:	08009d11 	.word	0x08009d11
 8009c7c:	08009cf1 	.word	0x08009cf1
 8009c80:	08009d11 	.word	0x08009d11
 8009c84:	08009d11 	.word	0x08009d11
 8009c88:	08009d11 	.word	0x08009d11
 8009c8c:	08009d11 	.word	0x08009d11
 8009c90:	08009d11 	.word	0x08009d11
 8009c94:	08009d11 	.word	0x08009d11
 8009c98:	08009d11 	.word	0x08009d11
 8009c9c:	08009cf9 	.word	0x08009cf9
 8009ca0:	08009d11 	.word	0x08009d11
 8009ca4:	08009d11 	.word	0x08009d11
 8009ca8:	08009d11 	.word	0x08009d11
 8009cac:	08009d11 	.word	0x08009d11
 8009cb0:	08009d11 	.word	0x08009d11
 8009cb4:	08009d11 	.word	0x08009d11
 8009cb8:	08009d11 	.word	0x08009d11
 8009cbc:	08009d01 	.word	0x08009d01
 8009cc0:	08009d11 	.word	0x08009d11
 8009cc4:	08009d11 	.word	0x08009d11
 8009cc8:	08009d11 	.word	0x08009d11
 8009ccc:	08009d11 	.word	0x08009d11
 8009cd0:	08009d11 	.word	0x08009d11
 8009cd4:	08009d11 	.word	0x08009d11
 8009cd8:	08009d11 	.word	0x08009d11
 8009cdc:	08009d09 	.word	0x08009d09
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009ce6:	e18e      	b.n	800a006 <USART_SetConfig+0x476>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009cee:	e18a      	b.n	800a006 <USART_SetConfig+0x476>
 8009cf0:	2304      	movs	r3, #4
 8009cf2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009cf6:	e186      	b.n	800a006 <USART_SetConfig+0x476>
 8009cf8:	2308      	movs	r3, #8
 8009cfa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009cfe:	e182      	b.n	800a006 <USART_SetConfig+0x476>
 8009d00:	2310      	movs	r3, #16
 8009d02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d06:	e17e      	b.n	800a006 <USART_SetConfig+0x476>
 8009d08:	2320      	movs	r3, #32
 8009d0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d0e:	e17a      	b.n	800a006 <USART_SetConfig+0x476>
 8009d10:	2340      	movs	r3, #64	@ 0x40
 8009d12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d16:	e176      	b.n	800a006 <USART_SetConfig+0x476>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a75      	ldr	r2, [pc, #468]	@ (8009ef4 <USART_SetConfig+0x364>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d130      	bne.n	8009d84 <USART_SetConfig+0x1f4>
 8009d22:	4b73      	ldr	r3, [pc, #460]	@ (8009ef0 <USART_SetConfig+0x360>)
 8009d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	2b05      	cmp	r3, #5
 8009d2c:	d826      	bhi.n	8009d7c <USART_SetConfig+0x1ec>
 8009d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d34 <USART_SetConfig+0x1a4>)
 8009d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d34:	08009d4d 	.word	0x08009d4d
 8009d38:	08009d55 	.word	0x08009d55
 8009d3c:	08009d5d 	.word	0x08009d5d
 8009d40:	08009d65 	.word	0x08009d65
 8009d44:	08009d6d 	.word	0x08009d6d
 8009d48:	08009d75 	.word	0x08009d75
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d52:	e158      	b.n	800a006 <USART_SetConfig+0x476>
 8009d54:	2302      	movs	r3, #2
 8009d56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d5a:	e154      	b.n	800a006 <USART_SetConfig+0x476>
 8009d5c:	2304      	movs	r3, #4
 8009d5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d62:	e150      	b.n	800a006 <USART_SetConfig+0x476>
 8009d64:	2308      	movs	r3, #8
 8009d66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d6a:	e14c      	b.n	800a006 <USART_SetConfig+0x476>
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d72:	e148      	b.n	800a006 <USART_SetConfig+0x476>
 8009d74:	2320      	movs	r3, #32
 8009d76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d7a:	e144      	b.n	800a006 <USART_SetConfig+0x476>
 8009d7c:	2340      	movs	r3, #64	@ 0x40
 8009d7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d82:	e140      	b.n	800a006 <USART_SetConfig+0x476>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a5b      	ldr	r2, [pc, #364]	@ (8009ef8 <USART_SetConfig+0x368>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d130      	bne.n	8009df0 <USART_SetConfig+0x260>
 8009d8e:	4b58      	ldr	r3, [pc, #352]	@ (8009ef0 <USART_SetConfig+0x360>)
 8009d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d92:	f003 0307 	and.w	r3, r3, #7
 8009d96:	2b05      	cmp	r3, #5
 8009d98:	d826      	bhi.n	8009de8 <USART_SetConfig+0x258>
 8009d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009da0 <USART_SetConfig+0x210>)
 8009d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da0:	08009db9 	.word	0x08009db9
 8009da4:	08009dc1 	.word	0x08009dc1
 8009da8:	08009dc9 	.word	0x08009dc9
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009dd9 	.word	0x08009dd9
 8009db4:	08009de1 	.word	0x08009de1
 8009db8:	2300      	movs	r3, #0
 8009dba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009dbe:	e122      	b.n	800a006 <USART_SetConfig+0x476>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009dc6:	e11e      	b.n	800a006 <USART_SetConfig+0x476>
 8009dc8:	2304      	movs	r3, #4
 8009dca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009dce:	e11a      	b.n	800a006 <USART_SetConfig+0x476>
 8009dd0:	2308      	movs	r3, #8
 8009dd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009dd6:	e116      	b.n	800a006 <USART_SetConfig+0x476>
 8009dd8:	2310      	movs	r3, #16
 8009dda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009dde:	e112      	b.n	800a006 <USART_SetConfig+0x476>
 8009de0:	2320      	movs	r3, #32
 8009de2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009de6:	e10e      	b.n	800a006 <USART_SetConfig+0x476>
 8009de8:	2340      	movs	r3, #64	@ 0x40
 8009dea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009dee:	e10a      	b.n	800a006 <USART_SetConfig+0x476>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a41      	ldr	r2, [pc, #260]	@ (8009efc <USART_SetConfig+0x36c>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	f040 8086 	bne.w	8009f08 <USART_SetConfig+0x378>
 8009dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8009ef0 <USART_SetConfig+0x360>)
 8009dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e04:	2b28      	cmp	r3, #40	@ 0x28
 8009e06:	d87b      	bhi.n	8009f00 <USART_SetConfig+0x370>
 8009e08:	a201      	add	r2, pc, #4	@ (adr r2, 8009e10 <USART_SetConfig+0x280>)
 8009e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	08009eb5 	.word	0x08009eb5
 8009e14:	08009f01 	.word	0x08009f01
 8009e18:	08009f01 	.word	0x08009f01
 8009e1c:	08009f01 	.word	0x08009f01
 8009e20:	08009f01 	.word	0x08009f01
 8009e24:	08009f01 	.word	0x08009f01
 8009e28:	08009f01 	.word	0x08009f01
 8009e2c:	08009f01 	.word	0x08009f01
 8009e30:	08009ebd 	.word	0x08009ebd
 8009e34:	08009f01 	.word	0x08009f01
 8009e38:	08009f01 	.word	0x08009f01
 8009e3c:	08009f01 	.word	0x08009f01
 8009e40:	08009f01 	.word	0x08009f01
 8009e44:	08009f01 	.word	0x08009f01
 8009e48:	08009f01 	.word	0x08009f01
 8009e4c:	08009f01 	.word	0x08009f01
 8009e50:	08009ec5 	.word	0x08009ec5
 8009e54:	08009f01 	.word	0x08009f01
 8009e58:	08009f01 	.word	0x08009f01
 8009e5c:	08009f01 	.word	0x08009f01
 8009e60:	08009f01 	.word	0x08009f01
 8009e64:	08009f01 	.word	0x08009f01
 8009e68:	08009f01 	.word	0x08009f01
 8009e6c:	08009f01 	.word	0x08009f01
 8009e70:	08009ecd 	.word	0x08009ecd
 8009e74:	08009f01 	.word	0x08009f01
 8009e78:	08009f01 	.word	0x08009f01
 8009e7c:	08009f01 	.word	0x08009f01
 8009e80:	08009f01 	.word	0x08009f01
 8009e84:	08009f01 	.word	0x08009f01
 8009e88:	08009f01 	.word	0x08009f01
 8009e8c:	08009f01 	.word	0x08009f01
 8009e90:	08009ed5 	.word	0x08009ed5
 8009e94:	08009f01 	.word	0x08009f01
 8009e98:	08009f01 	.word	0x08009f01
 8009e9c:	08009f01 	.word	0x08009f01
 8009ea0:	08009f01 	.word	0x08009f01
 8009ea4:	08009f01 	.word	0x08009f01
 8009ea8:	08009f01 	.word	0x08009f01
 8009eac:	08009f01 	.word	0x08009f01
 8009eb0:	08009edd 	.word	0x08009edd
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009eba:	e0a4      	b.n	800a006 <USART_SetConfig+0x476>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009ec2:	e0a0      	b.n	800a006 <USART_SetConfig+0x476>
 8009ec4:	2304      	movs	r3, #4
 8009ec6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009eca:	e09c      	b.n	800a006 <USART_SetConfig+0x476>
 8009ecc:	2308      	movs	r3, #8
 8009ece:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009ed2:	e098      	b.n	800a006 <USART_SetConfig+0x476>
 8009ed4:	2310      	movs	r3, #16
 8009ed6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009eda:	e094      	b.n	800a006 <USART_SetConfig+0x476>
 8009edc:	2320      	movs	r3, #32
 8009ede:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009ee2:	e090      	b.n	800a006 <USART_SetConfig+0x476>
 8009ee4:	cfff69f3 	.word	0xcfff69f3
 8009ee8:	ffffc0f6 	.word	0xffffc0f6
 8009eec:	40011000 	.word	0x40011000
 8009ef0:	58024400 	.word	0x58024400
 8009ef4:	40004400 	.word	0x40004400
 8009ef8:	40004800 	.word	0x40004800
 8009efc:	40011400 	.word	0x40011400
 8009f00:	2340      	movs	r3, #64	@ 0x40
 8009f02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009f06:	e07e      	b.n	800a006 <USART_SetConfig+0x476>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4ab5      	ldr	r2, [pc, #724]	@ (800a1e4 <USART_SetConfig+0x654>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d176      	bne.n	800a000 <USART_SetConfig+0x470>
 8009f12:	4bb5      	ldr	r3, [pc, #724]	@ (800a1e8 <USART_SetConfig+0x658>)
 8009f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f1a:	2b28      	cmp	r3, #40	@ 0x28
 8009f1c:	d86c      	bhi.n	8009ff8 <USART_SetConfig+0x468>
 8009f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f24 <USART_SetConfig+0x394>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009fc9 	.word	0x08009fc9
 8009f28:	08009ff9 	.word	0x08009ff9
 8009f2c:	08009ff9 	.word	0x08009ff9
 8009f30:	08009ff9 	.word	0x08009ff9
 8009f34:	08009ff9 	.word	0x08009ff9
 8009f38:	08009ff9 	.word	0x08009ff9
 8009f3c:	08009ff9 	.word	0x08009ff9
 8009f40:	08009ff9 	.word	0x08009ff9
 8009f44:	08009fd1 	.word	0x08009fd1
 8009f48:	08009ff9 	.word	0x08009ff9
 8009f4c:	08009ff9 	.word	0x08009ff9
 8009f50:	08009ff9 	.word	0x08009ff9
 8009f54:	08009ff9 	.word	0x08009ff9
 8009f58:	08009ff9 	.word	0x08009ff9
 8009f5c:	08009ff9 	.word	0x08009ff9
 8009f60:	08009ff9 	.word	0x08009ff9
 8009f64:	08009fd9 	.word	0x08009fd9
 8009f68:	08009ff9 	.word	0x08009ff9
 8009f6c:	08009ff9 	.word	0x08009ff9
 8009f70:	08009ff9 	.word	0x08009ff9
 8009f74:	08009ff9 	.word	0x08009ff9
 8009f78:	08009ff9 	.word	0x08009ff9
 8009f7c:	08009ff9 	.word	0x08009ff9
 8009f80:	08009ff9 	.word	0x08009ff9
 8009f84:	08009fe1 	.word	0x08009fe1
 8009f88:	08009ff9 	.word	0x08009ff9
 8009f8c:	08009ff9 	.word	0x08009ff9
 8009f90:	08009ff9 	.word	0x08009ff9
 8009f94:	08009ff9 	.word	0x08009ff9
 8009f98:	08009ff9 	.word	0x08009ff9
 8009f9c:	08009ff9 	.word	0x08009ff9
 8009fa0:	08009ff9 	.word	0x08009ff9
 8009fa4:	08009fe9 	.word	0x08009fe9
 8009fa8:	08009ff9 	.word	0x08009ff9
 8009fac:	08009ff9 	.word	0x08009ff9
 8009fb0:	08009ff9 	.word	0x08009ff9
 8009fb4:	08009ff9 	.word	0x08009ff9
 8009fb8:	08009ff9 	.word	0x08009ff9
 8009fbc:	08009ff9 	.word	0x08009ff9
 8009fc0:	08009ff9 	.word	0x08009ff9
 8009fc4:	08009ff1 	.word	0x08009ff1
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009fce:	e01a      	b.n	800a006 <USART_SetConfig+0x476>
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009fd6:	e016      	b.n	800a006 <USART_SetConfig+0x476>
 8009fd8:	2304      	movs	r3, #4
 8009fda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009fde:	e012      	b.n	800a006 <USART_SetConfig+0x476>
 8009fe0:	2308      	movs	r3, #8
 8009fe2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009fe6:	e00e      	b.n	800a006 <USART_SetConfig+0x476>
 8009fe8:	2310      	movs	r3, #16
 8009fea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009fee:	e00a      	b.n	800a006 <USART_SetConfig+0x476>
 8009ff0:	2320      	movs	r3, #32
 8009ff2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009ff6:	e006      	b.n	800a006 <USART_SetConfig+0x476>
 8009ff8:	2340      	movs	r3, #64	@ 0x40
 8009ffa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009ffe:	e002      	b.n	800a006 <USART_SetConfig+0x476>
 800a000:	2340      	movs	r3, #64	@ 0x40
 800a002:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800a006:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	f200 832f 	bhi.w	800a66e <USART_SetConfig+0xade>
 800a010:	a201      	add	r2, pc, #4	@ (adr r2, 800a018 <USART_SetConfig+0x488>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a09d 	.word	0x0800a09d
 800a01c:	0800a153 	.word	0x0800a153
 800a020:	0800a213 	.word	0x0800a213
 800a024:	0800a66f 	.word	0x0800a66f
 800a028:	0800a2cd 	.word	0x0800a2cd
 800a02c:	0800a66f 	.word	0x0800a66f
 800a030:	0800a66f 	.word	0x0800a66f
 800a034:	0800a66f 	.word	0x0800a66f
 800a038:	0800a387 	.word	0x0800a387
 800a03c:	0800a66f 	.word	0x0800a66f
 800a040:	0800a66f 	.word	0x0800a66f
 800a044:	0800a66f 	.word	0x0800a66f
 800a048:	0800a66f 	.word	0x0800a66f
 800a04c:	0800a66f 	.word	0x0800a66f
 800a050:	0800a66f 	.word	0x0800a66f
 800a054:	0800a66f 	.word	0x0800a66f
 800a058:	0800a4ff 	.word	0x0800a4ff
 800a05c:	0800a66f 	.word	0x0800a66f
 800a060:	0800a66f 	.word	0x0800a66f
 800a064:	0800a66f 	.word	0x0800a66f
 800a068:	0800a66f 	.word	0x0800a66f
 800a06c:	0800a66f 	.word	0x0800a66f
 800a070:	0800a66f 	.word	0x0800a66f
 800a074:	0800a66f 	.word	0x0800a66f
 800a078:	0800a66f 	.word	0x0800a66f
 800a07c:	0800a66f 	.word	0x0800a66f
 800a080:	0800a66f 	.word	0x0800a66f
 800a084:	0800a66f 	.word	0x0800a66f
 800a088:	0800a66f 	.word	0x0800a66f
 800a08c:	0800a66f 	.word	0x0800a66f
 800a090:	0800a66f 	.word	0x0800a66f
 800a094:	0800a66f 	.word	0x0800a66f
 800a098:	0800a5bd 	.word	0x0800a5bd
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800a09c:	f7f9 fce6 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 800a0a0:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d044      	beq.n	800a134 <USART_SetConfig+0x5a4>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d03e      	beq.n	800a130 <USART_SetConfig+0x5a0>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d038      	beq.n	800a12c <USART_SetConfig+0x59c>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d032      	beq.n	800a128 <USART_SetConfig+0x598>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	d02c      	beq.n	800a124 <USART_SetConfig+0x594>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ce:	2b05      	cmp	r3, #5
 800a0d0:	d026      	beq.n	800a120 <USART_SetConfig+0x590>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d6:	2b06      	cmp	r3, #6
 800a0d8:	d020      	beq.n	800a11c <USART_SetConfig+0x58c>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0de:	2b07      	cmp	r3, #7
 800a0e0:	d01a      	beq.n	800a118 <USART_SetConfig+0x588>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e6:	2b08      	cmp	r3, #8
 800a0e8:	d014      	beq.n	800a114 <USART_SetConfig+0x584>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ee:	2b09      	cmp	r3, #9
 800a0f0:	d00e      	beq.n	800a110 <USART_SetConfig+0x580>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f6:	2b0a      	cmp	r3, #10
 800a0f8:	d008      	beq.n	800a10c <USART_SetConfig+0x57c>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fe:	2b0b      	cmp	r3, #11
 800a100:	d102      	bne.n	800a108 <USART_SetConfig+0x578>
 800a102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a106:	e016      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a108:	2301      	movs	r3, #1
 800a10a:	e014      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a10c:	2380      	movs	r3, #128	@ 0x80
 800a10e:	e012      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a110:	2340      	movs	r3, #64	@ 0x40
 800a112:	e010      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a114:	2320      	movs	r3, #32
 800a116:	e00e      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a118:	2310      	movs	r3, #16
 800a11a:	e00c      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a11c:	230c      	movs	r3, #12
 800a11e:	e00a      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a120:	230a      	movs	r3, #10
 800a122:	e008      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a124:	2308      	movs	r3, #8
 800a126:	e006      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a128:	2306      	movs	r3, #6
 800a12a:	e004      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a12c:	2304      	movs	r3, #4
 800a12e:	e002      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a130:	2302      	movs	r3, #2
 800a132:	e000      	b.n	800a136 <USART_SetConfig+0x5a6>
 800a134:	2301      	movs	r3, #1
 800a136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a138:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13c:	005a      	lsls	r2, r3, #1
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	085b      	lsrs	r3, r3, #1
 800a144:	441a      	add	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a14e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a150:	e291      	b.n	800a676 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800a152:	f7f9 fca1 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 800a156:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d049      	beq.n	800a1f4 <USART_SetConfig+0x664>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a164:	2b01      	cmp	r3, #1
 800a166:	d043      	beq.n	800a1f0 <USART_SetConfig+0x660>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d03d      	beq.n	800a1ec <USART_SetConfig+0x65c>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a174:	2b03      	cmp	r3, #3
 800a176:	d032      	beq.n	800a1de <USART_SetConfig+0x64e>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	d02c      	beq.n	800a1da <USART_SetConfig+0x64a>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a184:	2b05      	cmp	r3, #5
 800a186:	d026      	beq.n	800a1d6 <USART_SetConfig+0x646>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a18c:	2b06      	cmp	r3, #6
 800a18e:	d020      	beq.n	800a1d2 <USART_SetConfig+0x642>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a194:	2b07      	cmp	r3, #7
 800a196:	d01a      	beq.n	800a1ce <USART_SetConfig+0x63e>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d014      	beq.n	800a1ca <USART_SetConfig+0x63a>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a4:	2b09      	cmp	r3, #9
 800a1a6:	d00e      	beq.n	800a1c6 <USART_SetConfig+0x636>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ac:	2b0a      	cmp	r3, #10
 800a1ae:	d008      	beq.n	800a1c2 <USART_SetConfig+0x632>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b4:	2b0b      	cmp	r3, #11
 800a1b6:	d102      	bne.n	800a1be <USART_SetConfig+0x62e>
 800a1b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1bc:	e01b      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e019      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1c2:	2380      	movs	r3, #128	@ 0x80
 800a1c4:	e017      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1c6:	2340      	movs	r3, #64	@ 0x40
 800a1c8:	e015      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1ca:	2320      	movs	r3, #32
 800a1cc:	e013      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1ce:	2310      	movs	r3, #16
 800a1d0:	e011      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	e00f      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1d6:	230a      	movs	r3, #10
 800a1d8:	e00d      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1da:	2308      	movs	r3, #8
 800a1dc:	e00b      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1de:	2306      	movs	r3, #6
 800a1e0:	e009      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1e2:	bf00      	nop
 800a1e4:	40011c00 	.word	0x40011c00
 800a1e8:	58024400 	.word	0x58024400
 800a1ec:	2304      	movs	r3, #4
 800a1ee:	e002      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	e000      	b.n	800a1f6 <USART_SetConfig+0x666>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1fc:	005a      	lsls	r2, r3, #1
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	085b      	lsrs	r3, r3, #1
 800a204:	441a      	add	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a210:	e231      	b.n	800a676 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a212:	f107 0318 	add.w	r3, r7, #24
 800a216:	4618      	mov	r0, r3
 800a218:	f7fb fadc 	bl	80057d4 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800a21c:	69fa      	ldr	r2, [r7, #28]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a222:	2b00      	cmp	r3, #0
 800a224:	d044      	beq.n	800a2b0 <USART_SetConfig+0x720>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d03e      	beq.n	800a2ac <USART_SetConfig+0x71c>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a232:	2b02      	cmp	r3, #2
 800a234:	d038      	beq.n	800a2a8 <USART_SetConfig+0x718>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d032      	beq.n	800a2a4 <USART_SetConfig+0x714>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a242:	2b04      	cmp	r3, #4
 800a244:	d02c      	beq.n	800a2a0 <USART_SetConfig+0x710>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24a:	2b05      	cmp	r3, #5
 800a24c:	d026      	beq.n	800a29c <USART_SetConfig+0x70c>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a252:	2b06      	cmp	r3, #6
 800a254:	d020      	beq.n	800a298 <USART_SetConfig+0x708>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25a:	2b07      	cmp	r3, #7
 800a25c:	d01a      	beq.n	800a294 <USART_SetConfig+0x704>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a262:	2b08      	cmp	r3, #8
 800a264:	d014      	beq.n	800a290 <USART_SetConfig+0x700>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26a:	2b09      	cmp	r3, #9
 800a26c:	d00e      	beq.n	800a28c <USART_SetConfig+0x6fc>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a272:	2b0a      	cmp	r3, #10
 800a274:	d008      	beq.n	800a288 <USART_SetConfig+0x6f8>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27a:	2b0b      	cmp	r3, #11
 800a27c:	d102      	bne.n	800a284 <USART_SetConfig+0x6f4>
 800a27e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a282:	e016      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a284:	2301      	movs	r3, #1
 800a286:	e014      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a288:	2380      	movs	r3, #128	@ 0x80
 800a28a:	e012      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a28c:	2340      	movs	r3, #64	@ 0x40
 800a28e:	e010      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a290:	2320      	movs	r3, #32
 800a292:	e00e      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a294:	2310      	movs	r3, #16
 800a296:	e00c      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a298:	230c      	movs	r3, #12
 800a29a:	e00a      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a29c:	230a      	movs	r3, #10
 800a29e:	e008      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a2a0:	2308      	movs	r3, #8
 800a2a2:	e006      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a2a4:	2306      	movs	r3, #6
 800a2a6:	e004      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a2a8:	2304      	movs	r3, #4
 800a2aa:	e002      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e000      	b.n	800a2b2 <USART_SetConfig+0x722>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2b6:	005a      	lsls	r2, r3, #1
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	085b      	lsrs	r3, r3, #1
 800a2be:	441a      	add	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c8:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800a2ca:	e1d4      	b.n	800a676 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2cc:	f107 030c 	add.w	r3, r7, #12
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fb fbd3 	bl	8005a7c <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d044      	beq.n	800a36a <USART_SetConfig+0x7da>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d03e      	beq.n	800a366 <USART_SetConfig+0x7d6>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d038      	beq.n	800a362 <USART_SetConfig+0x7d2>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d032      	beq.n	800a35e <USART_SetConfig+0x7ce>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	d02c      	beq.n	800a35a <USART_SetConfig+0x7ca>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a304:	2b05      	cmp	r3, #5
 800a306:	d026      	beq.n	800a356 <USART_SetConfig+0x7c6>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a30c:	2b06      	cmp	r3, #6
 800a30e:	d020      	beq.n	800a352 <USART_SetConfig+0x7c2>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a314:	2b07      	cmp	r3, #7
 800a316:	d01a      	beq.n	800a34e <USART_SetConfig+0x7be>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a31c:	2b08      	cmp	r3, #8
 800a31e:	d014      	beq.n	800a34a <USART_SetConfig+0x7ba>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a324:	2b09      	cmp	r3, #9
 800a326:	d00e      	beq.n	800a346 <USART_SetConfig+0x7b6>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a32c:	2b0a      	cmp	r3, #10
 800a32e:	d008      	beq.n	800a342 <USART_SetConfig+0x7b2>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a334:	2b0b      	cmp	r3, #11
 800a336:	d102      	bne.n	800a33e <USART_SetConfig+0x7ae>
 800a338:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a33c:	e016      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a33e:	2301      	movs	r3, #1
 800a340:	e014      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a342:	2380      	movs	r3, #128	@ 0x80
 800a344:	e012      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a346:	2340      	movs	r3, #64	@ 0x40
 800a348:	e010      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a34a:	2320      	movs	r3, #32
 800a34c:	e00e      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a34e:	2310      	movs	r3, #16
 800a350:	e00c      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a352:	230c      	movs	r3, #12
 800a354:	e00a      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a356:	230a      	movs	r3, #10
 800a358:	e008      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a35a:	2308      	movs	r3, #8
 800a35c:	e006      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a35e:	2306      	movs	r3, #6
 800a360:	e004      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a362:	2304      	movs	r3, #4
 800a364:	e002      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a366:	2302      	movs	r3, #2
 800a368:	e000      	b.n	800a36c <USART_SetConfig+0x7dc>
 800a36a:	2301      	movs	r3, #1
 800a36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a370:	005a      	lsls	r2, r3, #1
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	441a      	add	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a382:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800a384:	e177      	b.n	800a676 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a386:	4b8a      	ldr	r3, [pc, #552]	@ (800a5b0 <USART_SetConfig+0xa20>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 0320 	and.w	r3, r3, #32
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d05d      	beq.n	800a44e <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800a392:	4b87      	ldr	r3, [pc, #540]	@ (800a5b0 <USART_SetConfig+0xa20>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	08db      	lsrs	r3, r3, #3
 800a398:	f003 0303 	and.w	r3, r3, #3
 800a39c:	4a85      	ldr	r2, [pc, #532]	@ (800a5b4 <USART_SetConfig+0xa24>)
 800a39e:	40da      	lsrs	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d044      	beq.n	800a432 <USART_SetConfig+0x8a2>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d03e      	beq.n	800a42e <USART_SetConfig+0x89e>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d038      	beq.n	800a42a <USART_SetConfig+0x89a>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3bc:	2b03      	cmp	r3, #3
 800a3be:	d032      	beq.n	800a426 <USART_SetConfig+0x896>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c4:	2b04      	cmp	r3, #4
 800a3c6:	d02c      	beq.n	800a422 <USART_SetConfig+0x892>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3cc:	2b05      	cmp	r3, #5
 800a3ce:	d026      	beq.n	800a41e <USART_SetConfig+0x88e>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d4:	2b06      	cmp	r3, #6
 800a3d6:	d020      	beq.n	800a41a <USART_SetConfig+0x88a>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3dc:	2b07      	cmp	r3, #7
 800a3de:	d01a      	beq.n	800a416 <USART_SetConfig+0x886>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d014      	beq.n	800a412 <USART_SetConfig+0x882>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ec:	2b09      	cmp	r3, #9
 800a3ee:	d00e      	beq.n	800a40e <USART_SetConfig+0x87e>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f4:	2b0a      	cmp	r3, #10
 800a3f6:	d008      	beq.n	800a40a <USART_SetConfig+0x87a>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fc:	2b0b      	cmp	r3, #11
 800a3fe:	d102      	bne.n	800a406 <USART_SetConfig+0x876>
 800a400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a404:	e016      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a406:	2301      	movs	r3, #1
 800a408:	e014      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a40a:	2380      	movs	r3, #128	@ 0x80
 800a40c:	e012      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a40e:	2340      	movs	r3, #64	@ 0x40
 800a410:	e010      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a412:	2320      	movs	r3, #32
 800a414:	e00e      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a416:	2310      	movs	r3, #16
 800a418:	e00c      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a41a:	230c      	movs	r3, #12
 800a41c:	e00a      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a41e:	230a      	movs	r3, #10
 800a420:	e008      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a422:	2308      	movs	r3, #8
 800a424:	e006      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a426:	2306      	movs	r3, #6
 800a428:	e004      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a42a:	2304      	movs	r3, #4
 800a42c:	e002      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a42e:	2302      	movs	r3, #2
 800a430:	e000      	b.n	800a434 <USART_SetConfig+0x8a4>
 800a432:	2301      	movs	r3, #1
 800a434:	fbb2 f3f3 	udiv	r3, r2, r3
 800a438:	005a      	lsls	r2, r3, #1
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	085b      	lsrs	r3, r3, #1
 800a440:	441a      	add	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	fbb2 f3f3 	udiv	r3, r2, r3
 800a44a:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800a44c:	e113      	b.n	800a676 <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a452:	2b00      	cmp	r3, #0
 800a454:	d044      	beq.n	800a4e0 <USART_SetConfig+0x950>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d03e      	beq.n	800a4dc <USART_SetConfig+0x94c>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a462:	2b02      	cmp	r3, #2
 800a464:	d038      	beq.n	800a4d8 <USART_SetConfig+0x948>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d032      	beq.n	800a4d4 <USART_SetConfig+0x944>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a472:	2b04      	cmp	r3, #4
 800a474:	d02c      	beq.n	800a4d0 <USART_SetConfig+0x940>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	d026      	beq.n	800a4cc <USART_SetConfig+0x93c>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a482:	2b06      	cmp	r3, #6
 800a484:	d020      	beq.n	800a4c8 <USART_SetConfig+0x938>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a48a:	2b07      	cmp	r3, #7
 800a48c:	d01a      	beq.n	800a4c4 <USART_SetConfig+0x934>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a492:	2b08      	cmp	r3, #8
 800a494:	d014      	beq.n	800a4c0 <USART_SetConfig+0x930>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49a:	2b09      	cmp	r3, #9
 800a49c:	d00e      	beq.n	800a4bc <USART_SetConfig+0x92c>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a2:	2b0a      	cmp	r3, #10
 800a4a4:	d008      	beq.n	800a4b8 <USART_SetConfig+0x928>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4aa:	2b0b      	cmp	r3, #11
 800a4ac:	d102      	bne.n	800a4b4 <USART_SetConfig+0x924>
 800a4ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4b2:	e016      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e014      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4b8:	2380      	movs	r3, #128	@ 0x80
 800a4ba:	e012      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4bc:	2340      	movs	r3, #64	@ 0x40
 800a4be:	e010      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4c0:	2320      	movs	r3, #32
 800a4c2:	e00e      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4c4:	2310      	movs	r3, #16
 800a4c6:	e00c      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	e00a      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4cc:	230a      	movs	r3, #10
 800a4ce:	e008      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4d0:	2308      	movs	r3, #8
 800a4d2:	e006      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4d4:	2306      	movs	r3, #6
 800a4d6:	e004      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4d8:	2304      	movs	r3, #4
 800a4da:	e002      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4dc:	2302      	movs	r3, #2
 800a4de:	e000      	b.n	800a4e2 <USART_SetConfig+0x952>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	4a34      	ldr	r2, [pc, #208]	@ (800a5b4 <USART_SetConfig+0xa24>)
 800a4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e8:	005a      	lsls	r2, r3, #1
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	085b      	lsrs	r3, r3, #1
 800a4f0:	441a      	add	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4fa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a4fc:	e0bb      	b.n	800a676 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a502:	2b00      	cmp	r3, #0
 800a504:	d044      	beq.n	800a590 <USART_SetConfig+0xa00>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d03e      	beq.n	800a58c <USART_SetConfig+0x9fc>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a512:	2b02      	cmp	r3, #2
 800a514:	d038      	beq.n	800a588 <USART_SetConfig+0x9f8>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d032      	beq.n	800a584 <USART_SetConfig+0x9f4>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a522:	2b04      	cmp	r3, #4
 800a524:	d02c      	beq.n	800a580 <USART_SetConfig+0x9f0>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	d026      	beq.n	800a57c <USART_SetConfig+0x9ec>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a532:	2b06      	cmp	r3, #6
 800a534:	d020      	beq.n	800a578 <USART_SetConfig+0x9e8>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53a:	2b07      	cmp	r3, #7
 800a53c:	d01a      	beq.n	800a574 <USART_SetConfig+0x9e4>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a542:	2b08      	cmp	r3, #8
 800a544:	d014      	beq.n	800a570 <USART_SetConfig+0x9e0>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54a:	2b09      	cmp	r3, #9
 800a54c:	d00e      	beq.n	800a56c <USART_SetConfig+0x9dc>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a552:	2b0a      	cmp	r3, #10
 800a554:	d008      	beq.n	800a568 <USART_SetConfig+0x9d8>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55a:	2b0b      	cmp	r3, #11
 800a55c:	d102      	bne.n	800a564 <USART_SetConfig+0x9d4>
 800a55e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a562:	e016      	b.n	800a592 <USART_SetConfig+0xa02>
 800a564:	2301      	movs	r3, #1
 800a566:	e014      	b.n	800a592 <USART_SetConfig+0xa02>
 800a568:	2380      	movs	r3, #128	@ 0x80
 800a56a:	e012      	b.n	800a592 <USART_SetConfig+0xa02>
 800a56c:	2340      	movs	r3, #64	@ 0x40
 800a56e:	e010      	b.n	800a592 <USART_SetConfig+0xa02>
 800a570:	2320      	movs	r3, #32
 800a572:	e00e      	b.n	800a592 <USART_SetConfig+0xa02>
 800a574:	2310      	movs	r3, #16
 800a576:	e00c      	b.n	800a592 <USART_SetConfig+0xa02>
 800a578:	230c      	movs	r3, #12
 800a57a:	e00a      	b.n	800a592 <USART_SetConfig+0xa02>
 800a57c:	230a      	movs	r3, #10
 800a57e:	e008      	b.n	800a592 <USART_SetConfig+0xa02>
 800a580:	2308      	movs	r3, #8
 800a582:	e006      	b.n	800a592 <USART_SetConfig+0xa02>
 800a584:	2306      	movs	r3, #6
 800a586:	e004      	b.n	800a592 <USART_SetConfig+0xa02>
 800a588:	2304      	movs	r3, #4
 800a58a:	e002      	b.n	800a592 <USART_SetConfig+0xa02>
 800a58c:	2302      	movs	r3, #2
 800a58e:	e000      	b.n	800a592 <USART_SetConfig+0xa02>
 800a590:	2301      	movs	r3, #1
 800a592:	4a09      	ldr	r2, [pc, #36]	@ (800a5b8 <USART_SetConfig+0xa28>)
 800a594:	fbb2 f3f3 	udiv	r3, r2, r3
 800a598:	005a      	lsls	r2, r3, #1
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	085b      	lsrs	r3, r3, #1
 800a5a0:	441a      	add	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5aa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a5ac:	e063      	b.n	800a676 <USART_SetConfig+0xae6>
 800a5ae:	bf00      	nop
 800a5b0:	58024400 	.word	0x58024400
 800a5b4:	03d09000 	.word	0x03d09000
 800a5b8:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d044      	beq.n	800a64e <USART_SetConfig+0xabe>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d03e      	beq.n	800a64a <USART_SetConfig+0xaba>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d038      	beq.n	800a646 <USART_SetConfig+0xab6>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d032      	beq.n	800a642 <USART_SetConfig+0xab2>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e0:	2b04      	cmp	r3, #4
 800a5e2:	d02c      	beq.n	800a63e <USART_SetConfig+0xaae>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e8:	2b05      	cmp	r3, #5
 800a5ea:	d026      	beq.n	800a63a <USART_SetConfig+0xaaa>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f0:	2b06      	cmp	r3, #6
 800a5f2:	d020      	beq.n	800a636 <USART_SetConfig+0xaa6>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f8:	2b07      	cmp	r3, #7
 800a5fa:	d01a      	beq.n	800a632 <USART_SetConfig+0xaa2>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a600:	2b08      	cmp	r3, #8
 800a602:	d014      	beq.n	800a62e <USART_SetConfig+0xa9e>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a608:	2b09      	cmp	r3, #9
 800a60a:	d00e      	beq.n	800a62a <USART_SetConfig+0xa9a>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a610:	2b0a      	cmp	r3, #10
 800a612:	d008      	beq.n	800a626 <USART_SetConfig+0xa96>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a618:	2b0b      	cmp	r3, #11
 800a61a:	d102      	bne.n	800a622 <USART_SetConfig+0xa92>
 800a61c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a620:	e016      	b.n	800a650 <USART_SetConfig+0xac0>
 800a622:	2301      	movs	r3, #1
 800a624:	e014      	b.n	800a650 <USART_SetConfig+0xac0>
 800a626:	2380      	movs	r3, #128	@ 0x80
 800a628:	e012      	b.n	800a650 <USART_SetConfig+0xac0>
 800a62a:	2340      	movs	r3, #64	@ 0x40
 800a62c:	e010      	b.n	800a650 <USART_SetConfig+0xac0>
 800a62e:	2320      	movs	r3, #32
 800a630:	e00e      	b.n	800a650 <USART_SetConfig+0xac0>
 800a632:	2310      	movs	r3, #16
 800a634:	e00c      	b.n	800a650 <USART_SetConfig+0xac0>
 800a636:	230c      	movs	r3, #12
 800a638:	e00a      	b.n	800a650 <USART_SetConfig+0xac0>
 800a63a:	230a      	movs	r3, #10
 800a63c:	e008      	b.n	800a650 <USART_SetConfig+0xac0>
 800a63e:	2308      	movs	r3, #8
 800a640:	e006      	b.n	800a650 <USART_SetConfig+0xac0>
 800a642:	2306      	movs	r3, #6
 800a644:	e004      	b.n	800a650 <USART_SetConfig+0xac0>
 800a646:	2304      	movs	r3, #4
 800a648:	e002      	b.n	800a650 <USART_SetConfig+0xac0>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e000      	b.n	800a650 <USART_SetConfig+0xac0>
 800a64e:	2301      	movs	r3, #1
 800a650:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a654:	fbb2 f3f3 	udiv	r3, r2, r3
 800a658:	005a      	lsls	r2, r3, #1
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	085b      	lsrs	r3, r3, #1
 800a660:	441a      	add	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	fbb2 f3f3 	udiv	r3, r2, r3
 800a66a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a66c:	e003      	b.n	800a676 <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800a674:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800a676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a678:	2b0f      	cmp	r3, #15
 800a67a:	d916      	bls.n	800a6aa <USART_SetConfig+0xb1a>
 800a67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a682:	d212      	bcs.n	800a6aa <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a686:	b29b      	uxth	r3, r3
 800a688:	f023 030f 	bic.w	r3, r3, #15
 800a68c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	085b      	lsrs	r3, r3, #1
 800a692:	b29b      	uxth	r3, r3
 800a694:	f003 0307 	and.w	r3, r3, #7
 800a698:	b29a      	uxth	r2, r3
 800a69a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a69c:	4313      	orrs	r3, r2
 800a69e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a6a6:	60da      	str	r2, [r3, #12]
 800a6a8:	e002      	b.n	800a6b0 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800a6c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3738      	adds	r7, #56	@ 0x38
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af02      	add	r7, sp, #8
 800a6da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6e2:	f7f7 fdb5 	bl	8002250 <HAL_GetTick>
 800a6e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0308 	and.w	r3, r3, #8
 800a6f2:	2b08      	cmp	r3, #8
 800a6f4:	d10e      	bne.n	800a714 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800a6f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff fa0d 	bl	8009b24 <USART_WaitOnFlagUntilTimeout>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e01e      	b.n	800a752 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0304 	and.w	r3, r3, #4
 800a71e:	2b04      	cmp	r3, #4
 800a720:	d10e      	bne.n	800a740 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800a722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff f9f7 	bl	8009b24 <USART_WaitOnFlagUntilTimeout>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d001      	beq.n	800a740 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a73c:	2303      	movs	r3, #3
 800a73e:	e008      	b.n	800a752 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b085      	sub	sp, #20
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d101      	bne.n	800a770 <HAL_USARTEx_EnableSlaveMode+0x16>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e043      	b.n	800a7f8 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0201 	bic.w	r2, r2, #1
 800a796:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685a      	ldr	r2, [r3, #4]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a7a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689a      	ldr	r2, [r3, #8]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a7b6:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f042 0201 	orr.w	r2, r2, #1
 800a7c6:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f042 0201 	orr.w	r2, r2, #1
 800a7ec:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a814:	2b01      	cmp	r3, #1
 800a816:	d101      	bne.n	800a81c <HAL_USARTEx_ConfigNSS+0x18>
 800a818:	2302      	movs	r3, #2
 800a81a:	e02a      	b.n	800a872 <HAL_USARTEx_ConfigNSS+0x6e>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2202      	movs	r2, #2
 800a828:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f022 0201 	bic.w	r2, r2, #1
 800a842:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f023 0108 	bic.w	r1, r3, #8
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	430a      	orrs	r2, r1
 800a856:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800a87e:	b480      	push	{r7}
 800a880:	b085      	sub	sp, #20
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d101      	bne.n	800a894 <HAL_USARTEx_DisableFifoMode+0x16>
 800a890:	2302      	movs	r3, #2
 800a892:	e027      	b.n	800a8e4 <HAL_USARTEx_DisableFifoMode+0x66>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 0201 	bic.w	r2, r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a8c2:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a900:	2b01      	cmp	r3, #1
 800a902:	d101      	bne.n	800a908 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800a904:	2302      	movs	r3, #2
 800a906:	e02d      	b.n	800a964 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0201 	bic.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f84f 	bl	800a9e8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d101      	bne.n	800a984 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800a980:	2302      	movs	r3, #2
 800a982:	e02d      	b.n	800a9e0 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0201 	bic.w	r2, r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	430a      	orrs	r2, r1
 800a9be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f811 	bl	800a9e8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d106      	bne.n	800aa06 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa04:	e02f      	b.n	800aa66 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa06:	2310      	movs	r3, #16
 800aa08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa0a:	2310      	movs	r3, #16
 800aa0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800aa14:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800aa24:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	f003 0307 	and.w	r3, r3, #7
 800aa2c:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa2e:	7bbb      	ldrb	r3, [r7, #14]
 800aa30:	7b3a      	ldrb	r2, [r7, #12]
 800aa32:	4910      	ldr	r1, [pc, #64]	@ (800aa74 <USARTEx_SetNbDataToProcess+0x8c>)
 800aa34:	5c8a      	ldrb	r2, [r1, r2]
 800aa36:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800aa3a:	7b3a      	ldrb	r2, [r7, #12]
 800aa3c:	490e      	ldr	r1, [pc, #56]	@ (800aa78 <USARTEx_SetNbDataToProcess+0x90>)
 800aa3e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa40:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	7b7a      	ldrb	r2, [r7, #13]
 800aa4e:	4909      	ldr	r1, [pc, #36]	@ (800aa74 <USARTEx_SetNbDataToProcess+0x8c>)
 800aa50:	5c8a      	ldrb	r2, [r1, r2]
 800aa52:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800aa56:	7b7a      	ldrb	r2, [r7, #13]
 800aa58:	4907      	ldr	r1, [pc, #28]	@ (800aa78 <USARTEx_SetNbDataToProcess+0x90>)
 800aa5a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800aa66:	bf00      	nop
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	080101c4 	.word	0x080101c4
 800aa78:	080101cc 	.word	0x080101cc

0800aa7c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	b480      	push	{r7}
 800aa80:	b085      	sub	sp, #20
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	f107 001c 	add.w	r0, r7, #28
 800aa8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800aa92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800aa94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800aa96:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800aa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800aa9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800aa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800aa9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aaa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800aaa2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	4b07      	ldr	r3, [pc, #28]	@ (800aacc <SDMMC_Init+0x50>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	431a      	orrs	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	b004      	add	sp, #16
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	ffc02c00 	.word	0xffc02c00

0800aad0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800aaea:	b480      	push	{r7}
 800aaec:	b083      	sub	sp, #12
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f043 0203 	orr.w	r2, r3, #3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0303 	and.w	r3, r3, #3
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
	...

0800ab4c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ab70:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ab76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	4b06      	ldr	r3, [pc, #24]	@ (800ab9c <SDMMC_SendCommand+0x50>)
 800ab84:	4013      	ands	r3, r2
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	fffee0c0 	.word	0xfffee0c0

0800aba0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	b2db      	uxtb	r3, r3
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800abba:	b480      	push	{r7}
 800abbc:	b085      	sub	sp, #20
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	3314      	adds	r3, #20
 800abc8:	461a      	mov	r2, r3
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	4413      	add	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ac06:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ac0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ac12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	431a      	orrs	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0

}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac46:	2310      	movs	r3, #16
 800ac48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac50:	2300      	movs	r3, #0
 800ac52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac5a:	f107 0308 	add.w	r3, r7, #8
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f7ff ff73 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac6a:	2110      	movs	r1, #16
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fa5f 	bl	800b130 <SDMMC_GetCmdResp1>
 800ac72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac74:	69fb      	ldr	r3, [r7, #28]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3720      	adds	r7, #32
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b088      	sub	sp, #32
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac8c:	2311      	movs	r3, #17
 800ac8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac96:	2300      	movs	r3, #0
 800ac98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aca0:	f107 0308 	add.w	r3, r7, #8
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff ff50 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800acac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acb0:	2111      	movs	r1, #17
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fa3c 	bl	800b130 <SDMMC_GetCmdResp1>
 800acb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acba:	69fb      	ldr	r3, [r7, #28]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3720      	adds	r7, #32
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800acd2:	2312      	movs	r3, #18
 800acd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800acda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acdc:	2300      	movs	r3, #0
 800acde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ace0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ace4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ace6:	f107 0308 	add.w	r3, r7, #8
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff ff2d 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acf6:	2112      	movs	r1, #18
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fa19 	bl	800b130 <SDMMC_GetCmdResp1>
 800acfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad00:	69fb      	ldr	r3, [r7, #28]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3720      	adds	r7, #32
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b088      	sub	sp, #32
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad18:	2318      	movs	r3, #24
 800ad1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad2c:	f107 0308 	add.w	r3, r7, #8
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff ff0a 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad3c:	2118      	movs	r1, #24
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f9f6 	bl	800b130 <SDMMC_GetCmdResp1>
 800ad44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad46:	69fb      	ldr	r3, [r7, #28]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3720      	adds	r7, #32
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad5e:	2319      	movs	r3, #25
 800ad60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad72:	f107 0308 	add.w	r3, r7, #8
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff fee7 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad82:	2119      	movs	r1, #25
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f9d3 	bl	800b130 <SDMMC_GetCmdResp1>
 800ad8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad8c:	69fb      	ldr	r3, [r7, #28]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3720      	adds	r7, #32
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ada4:	230c      	movs	r3, #12
 800ada6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ada8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adae:	2300      	movs	r3, #0
 800adb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800adb6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800add0:	f107 0308 	add.w	r3, r7, #8
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7ff feb8 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800addc:	4a0b      	ldr	r2, [pc, #44]	@ (800ae0c <SDMMC_CmdStopTransfer+0x74>)
 800adde:	210c      	movs	r1, #12
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f9a5 	bl	800b130 <SDMMC_GetCmdResp1>
 800ade6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adfa:	d101      	bne.n	800ae00 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800adfc:	2300      	movs	r3, #0
 800adfe:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ae00:	69fb      	ldr	r3, [r7, #28]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3720      	adds	r7, #32
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	05f5e100 	.word	0x05f5e100

0800ae10 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b088      	sub	sp, #32
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae1e:	2307      	movs	r3, #7
 800ae20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae32:	f107 0308 	add.w	r3, r7, #8
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff fe87 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae42:	2107      	movs	r1, #7
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f973 	bl	800b130 <SDMMC_GetCmdResp1>
 800ae4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae4c:	69fb      	ldr	r3, [r7, #28]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b088      	sub	sp, #32
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae66:	2300      	movs	r3, #0
 800ae68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae74:	f107 0308 	add.w	r3, r7, #8
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fe66 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fb97 	bl	800b5b4 <SDMMC_GetCmdError>
 800ae86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae88:	69fb      	ldr	r3, [r7, #28]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b088      	sub	sp, #32
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae9a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ae9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aea0:	2308      	movs	r3, #8
 800aea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aeb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeb4:	f107 0308 	add.w	r3, r7, #8
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff fe46 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fb29 	bl	800b518 <SDMMC_GetCmdResp7>
 800aec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aec8:	69fb      	ldr	r3, [r7, #28]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3720      	adds	r7, #32
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b088      	sub	sp, #32
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aee0:	2337      	movs	r3, #55	@ 0x37
 800aee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aef2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aef4:	f107 0308 	add.w	r3, r7, #8
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff fe26 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af04:	2137      	movs	r1, #55	@ 0x37
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f912 	bl	800b130 <SDMMC_GetCmdResp1>
 800af0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af0e:	69fb      	ldr	r3, [r7, #28]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3720      	adds	r7, #32
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af26:	2329      	movs	r3, #41	@ 0x29
 800af28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af30:	2300      	movs	r3, #0
 800af32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af3a:	f107 0308 	add.w	r3, r7, #8
 800af3e:	4619      	mov	r1, r3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff fe03 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fa2e 	bl	800b3a8 <SDMMC_GetCmdResp3>
 800af4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af4e:	69fb      	ldr	r3, [r7, #28]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3720      	adds	r7, #32
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af66:	2306      	movs	r3, #6
 800af68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af70:	2300      	movs	r3, #0
 800af72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af7a:	f107 0308 	add.w	r3, r7, #8
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff fde3 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af8a:	2106      	movs	r1, #6
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f8cf 	bl	800b130 <SDMMC_GetCmdResp1>
 800af92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af94:	69fb      	ldr	r3, [r7, #28]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3720      	adds	r7, #32
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b088      	sub	sp, #32
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800afaa:	2333      	movs	r3, #51	@ 0x33
 800afac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afb4:	2300      	movs	r3, #0
 800afb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afbe:	f107 0308 	add.w	r3, r7, #8
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff fdc1 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800afca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afce:	2133      	movs	r1, #51	@ 0x33
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f8ad 	bl	800b130 <SDMMC_GetCmdResp1>
 800afd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afd8:	69fb      	ldr	r3, [r7, #28]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3720      	adds	r7, #32
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b088      	sub	sp, #32
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800afee:	2302      	movs	r3, #2
 800aff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aff2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800aff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aff8:	2300      	movs	r3, #0
 800affa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800affc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b002:	f107 0308 	add.w	r3, r7, #8
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7ff fd9f 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f980 	bl	800b314 <SDMMC_GetCmdResp2>
 800b014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b016:	69fb      	ldr	r3, [r7, #28]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3720      	adds	r7, #32
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b02e:	2309      	movs	r3, #9
 800b030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b032:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b03c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b042:	f107 0308 	add.w	r3, r7, #8
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff fd7f 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f960 	bl	800b314 <SDMMC_GetCmdResp2>
 800b054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b056:	69fb      	ldr	r3, [r7, #28]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3720      	adds	r7, #32
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b088      	sub	sp, #32
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b06e:	2303      	movs	r3, #3
 800b070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b072:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b078:	2300      	movs	r3, #0
 800b07a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b07c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b080:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b082:	f107 0308 	add.w	r3, r7, #8
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff fd5f 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	2103      	movs	r1, #3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f9c8 	bl	800b428 <SDMMC_GetCmdResp6>
 800b098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b09a:	69fb      	ldr	r3, [r7, #28]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3720      	adds	r7, #32
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b088      	sub	sp, #32
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0b2:	230d      	movs	r3, #13
 800b0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0c6:	f107 0308 	add.w	r3, r7, #8
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff fd3d 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0d6:	210d      	movs	r1, #13
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f829 	bl	800b130 <SDMMC_GetCmdResp1>
 800b0de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0e0:	69fb      	ldr	r3, [r7, #28]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3720      	adds	r7, #32
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b088      	sub	sp, #32
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b0f6:	230d      	movs	r3, #13
 800b0f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b100:	2300      	movs	r3, #0
 800b102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b108:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b10a:	f107 0308 	add.w	r3, r7, #8
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7ff fd1b 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b11a:	210d      	movs	r1, #13
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f807 	bl	800b130 <SDMMC_GetCmdResp1>
 800b122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b124:	69fb      	ldr	r3, [r7, #28]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3720      	adds	r7, #32
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b088      	sub	sp, #32
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	460b      	mov	r3, r1
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b13e:	4b70      	ldr	r3, [pc, #448]	@ (800b300 <SDMMC_GetCmdResp1+0x1d0>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a70      	ldr	r2, [pc, #448]	@ (800b304 <SDMMC_GetCmdResp1+0x1d4>)
 800b144:	fba2 2303 	umull	r2, r3, r2, r3
 800b148:	0a5a      	lsrs	r2, r3, #9
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	fb02 f303 	mul.w	r3, r2, r3
 800b150:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	1e5a      	subs	r2, r3, #1
 800b156:	61fa      	str	r2, [r7, #28]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d102      	bne.n	800b162 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b15c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b160:	e0c9      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b166:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	4b67      	ldr	r3, [pc, #412]	@ (800b308 <SDMMC_GetCmdResp1+0x1d8>)
 800b16c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0ef      	beq.n	800b152 <SDMMC_GetCmdResp1+0x22>
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1ea      	bne.n	800b152 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b180:	f003 0304 	and.w	r3, r3, #4
 800b184:	2b00      	cmp	r3, #0
 800b186:	d004      	beq.n	800b192 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2204      	movs	r2, #4
 800b18c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b18e:	2304      	movs	r3, #4
 800b190:	e0b1      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d004      	beq.n	800b1a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e0a6      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4a58      	ldr	r2, [pc, #352]	@ (800b30c <SDMMC_GetCmdResp1+0x1dc>)
 800b1ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f7ff fcf6 	bl	800aba0 <SDMMC_GetCommandResponse>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	7afb      	ldrb	r3, [r7, #11]
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d001      	beq.n	800b1c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e099      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f7ff fcf8 	bl	800abba <SDMMC_GetResponse>
 800b1ca:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	4b50      	ldr	r3, [pc, #320]	@ (800b310 <SDMMC_GetCmdResp1+0x1e0>)
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d101      	bne.n	800b1da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	e08d      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	da02      	bge.n	800b1e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b1e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b1e4:	e087      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b1f0:	2340      	movs	r3, #64	@ 0x40
 800b1f2:	e080      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b1fe:	2380      	movs	r3, #128	@ 0x80
 800b200:	e079      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b20c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b210:	e071      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b21c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b220:	e069      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b22c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b230:	e061      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b23c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b240:	e059      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b24c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b250:	e051      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b25c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b260:	e049      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b26c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b270:	e041      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b27c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b280:	e039      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b28c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b290:	e031      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b29c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b2a0:	e029      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b2ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b2b0:	e021      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b2bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b2c0:	e019      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b2cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b2d0:	e011      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b2dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b2e0:	e009      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f003 0308 	and.w	r3, r3, #8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b2ec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b2f0:	e001      	b.n	800b2f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3720      	adds	r7, #32
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	24000000 	.word	0x24000000
 800b304:	10624dd3 	.word	0x10624dd3
 800b308:	00200045 	.word	0x00200045
 800b30c:	002000c5 	.word	0x002000c5
 800b310:	fdffe008 	.word	0xfdffe008

0800b314 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b31c:	4b1f      	ldr	r3, [pc, #124]	@ (800b39c <SDMMC_GetCmdResp2+0x88>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a1f      	ldr	r2, [pc, #124]	@ (800b3a0 <SDMMC_GetCmdResp2+0x8c>)
 800b322:	fba2 2303 	umull	r2, r3, r2, r3
 800b326:	0a5b      	lsrs	r3, r3, #9
 800b328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b32c:	fb02 f303 	mul.w	r3, r2, r3
 800b330:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	1e5a      	subs	r2, r3, #1
 800b336:	60fa      	str	r2, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b33c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b340:	e026      	b.n	800b390 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b346:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d0ef      	beq.n	800b332 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1ea      	bne.n	800b332 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b360:	f003 0304 	and.w	r3, r3, #4
 800b364:	2b00      	cmp	r3, #0
 800b366:	d004      	beq.n	800b372 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2204      	movs	r2, #4
 800b36c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b36e:	2304      	movs	r3, #4
 800b370:	e00e      	b.n	800b390 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b376:	f003 0301 	and.w	r3, r3, #1
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d004      	beq.n	800b388 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b384:	2301      	movs	r3, #1
 800b386:	e003      	b.n	800b390 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a06      	ldr	r2, [pc, #24]	@ (800b3a4 <SDMMC_GetCmdResp2+0x90>)
 800b38c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	24000000 	.word	0x24000000
 800b3a0:	10624dd3 	.word	0x10624dd3
 800b3a4:	002000c5 	.word	0x002000c5

0800b3a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b3b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b41c <SDMMC_GetCmdResp3+0x74>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a1a      	ldr	r2, [pc, #104]	@ (800b420 <SDMMC_GetCmdResp3+0x78>)
 800b3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ba:	0a5b      	lsrs	r3, r3, #9
 800b3bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3c0:	fb02 f303 	mul.w	r3, r2, r3
 800b3c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	1e5a      	subs	r2, r3, #1
 800b3ca:	60fa      	str	r2, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d102      	bne.n	800b3d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3d4:	e01b      	b.n	800b40e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d0ef      	beq.n	800b3c6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1ea      	bne.n	800b3c6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f4:	f003 0304 	and.w	r3, r3, #4
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d004      	beq.n	800b406 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2204      	movs	r2, #4
 800b400:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b402:	2304      	movs	r3, #4
 800b404:	e003      	b.n	800b40e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a06      	ldr	r2, [pc, #24]	@ (800b424 <SDMMC_GetCmdResp3+0x7c>)
 800b40a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	24000000 	.word	0x24000000
 800b420:	10624dd3 	.word	0x10624dd3
 800b424:	002000c5 	.word	0x002000c5

0800b428 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	460b      	mov	r3, r1
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b436:	4b35      	ldr	r3, [pc, #212]	@ (800b50c <SDMMC_GetCmdResp6+0xe4>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a35      	ldr	r2, [pc, #212]	@ (800b510 <SDMMC_GetCmdResp6+0xe8>)
 800b43c:	fba2 2303 	umull	r2, r3, r2, r3
 800b440:	0a5b      	lsrs	r3, r3, #9
 800b442:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b446:	fb02 f303 	mul.w	r3, r2, r3
 800b44a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	1e5a      	subs	r2, r3, #1
 800b450:	61fa      	str	r2, [r7, #28]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d102      	bne.n	800b45c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b456:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b45a:	e052      	b.n	800b502 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b460:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d0ef      	beq.n	800b44c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1ea      	bne.n	800b44c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b47a:	f003 0304 	and.w	r3, r3, #4
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d004      	beq.n	800b48c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2204      	movs	r2, #4
 800b486:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b488:	2304      	movs	r3, #4
 800b48a:	e03a      	b.n	800b502 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b490:	f003 0301 	and.w	r3, r3, #1
 800b494:	2b00      	cmp	r3, #0
 800b496:	d004      	beq.n	800b4a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2201      	movs	r2, #1
 800b49c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e02f      	b.n	800b502 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f7ff fb7c 	bl	800aba0 <SDMMC_GetCommandResponse>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	7afb      	ldrb	r3, [r7, #11]
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d001      	beq.n	800b4b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e025      	b.n	800b502 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4a16      	ldr	r2, [pc, #88]	@ (800b514 <SDMMC_GetCmdResp6+0xec>)
 800b4ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b4bc:	2100      	movs	r1, #0
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f7ff fb7b 	bl	800abba <SDMMC_GetResponse>
 800b4c4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d106      	bne.n	800b4de <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	0c1b      	lsrs	r3, r3, #16
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	e011      	b.n	800b502 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b4e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b4ec:	e009      	b.n	800b502 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4fc:	e001      	b.n	800b502 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b502:	4618      	mov	r0, r3
 800b504:	3720      	adds	r7, #32
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	24000000 	.word	0x24000000
 800b510:	10624dd3 	.word	0x10624dd3
 800b514:	002000c5 	.word	0x002000c5

0800b518 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b520:	4b22      	ldr	r3, [pc, #136]	@ (800b5ac <SDMMC_GetCmdResp7+0x94>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a22      	ldr	r2, [pc, #136]	@ (800b5b0 <SDMMC_GetCmdResp7+0x98>)
 800b526:	fba2 2303 	umull	r2, r3, r2, r3
 800b52a:	0a5b      	lsrs	r3, r3, #9
 800b52c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b530:	fb02 f303 	mul.w	r3, r2, r3
 800b534:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	1e5a      	subs	r2, r3, #1
 800b53a:	60fa      	str	r2, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d102      	bne.n	800b546 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b540:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b544:	e02c      	b.n	800b5a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b54a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0ef      	beq.n	800b536 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1ea      	bne.n	800b536 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b564:	f003 0304 	and.w	r3, r3, #4
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d004      	beq.n	800b576 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2204      	movs	r2, #4
 800b570:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b572:	2304      	movs	r3, #4
 800b574:	e014      	b.n	800b5a0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d004      	beq.n	800b58c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b588:	2301      	movs	r3, #1
 800b58a:	e009      	b.n	800b5a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2240      	movs	r2, #64	@ 0x40
 800b59c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b59e:	2300      	movs	r3, #0

}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	24000000 	.word	0x24000000
 800b5b0:	10624dd3 	.word	0x10624dd3

0800b5b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b5bc:	4b11      	ldr	r3, [pc, #68]	@ (800b604 <SDMMC_GetCmdError+0x50>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a11      	ldr	r2, [pc, #68]	@ (800b608 <SDMMC_GetCmdError+0x54>)
 800b5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c6:	0a5b      	lsrs	r3, r3, #9
 800b5c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5cc:	fb02 f303 	mul.w	r3, r2, r3
 800b5d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	1e5a      	subs	r2, r3, #1
 800b5d6:	60fa      	str	r2, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d102      	bne.n	800b5e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b5e0:	e009      	b.n	800b5f6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0f1      	beq.n	800b5d2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a06      	ldr	r2, [pc, #24]	@ (800b60c <SDMMC_GetCmdError+0x58>)
 800b5f2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	24000000 	.word	0x24000000
 800b608:	10624dd3 	.word	0x10624dd3
 800b60c:	002000c5 	.word	0x002000c5

0800b610 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b614:	4904      	ldr	r1, [pc, #16]	@ (800b628 <MX_FATFS_Init+0x18>)
 800b616:	4805      	ldr	r0, [pc, #20]	@ (800b62c <MX_FATFS_Init+0x1c>)
 800b618:	f000 f9e4 	bl	800b9e4 <FATFS_LinkDriver>
 800b61c:	4603      	mov	r3, r0
 800b61e:	461a      	mov	r2, r3
 800b620:	4b03      	ldr	r3, [pc, #12]	@ (800b630 <MX_FATFS_Init+0x20>)
 800b622:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b624:	bf00      	nop
 800b626:	bd80      	pop	{r7, pc}
 800b628:	24000620 	.word	0x24000620
 800b62c:	080101d4 	.word	0x080101d4
 800b630:	2400061c 	.word	0x2400061c

0800b634 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b63a:	2300      	movs	r3, #0
 800b63c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b63e:	f000 f879 	bl	800b734 <BSP_SD_IsDetected>
 800b642:	4603      	mov	r3, r0
 800b644:	2b01      	cmp	r3, #1
 800b646:	d001      	beq.n	800b64c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b648:	2302      	movs	r3, #2
 800b64a:	e012      	b.n	800b672 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b64c:	480b      	ldr	r0, [pc, #44]	@ (800b67c <BSP_SD_Init+0x48>)
 800b64e:	f7fa fe1f 	bl	8006290 <HAL_SD_Init>
 800b652:	4603      	mov	r3, r0
 800b654:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b656:	79fb      	ldrb	r3, [r7, #7]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d109      	bne.n	800b670 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b65c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b660:	4806      	ldr	r0, [pc, #24]	@ (800b67c <BSP_SD_Init+0x48>)
 800b662:	f7fb fcdb 	bl	800701c <HAL_SD_ConfigWideBusOperation>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b670:	79fb      	ldrb	r3, [r7, #7]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	2400030c 	.word	0x2400030c

0800b680 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b088      	sub	sp, #32
 800b684:	af02      	add	r7, sp, #8
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
 800b68c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b68e:	2300      	movs	r3, #0
 800b690:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	9300      	str	r3, [sp, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	68ba      	ldr	r2, [r7, #8]
 800b69a:	68f9      	ldr	r1, [r7, #12]
 800b69c:	4806      	ldr	r0, [pc, #24]	@ (800b6b8 <BSP_SD_ReadBlocks+0x38>)
 800b69e:	f7fa ff17 	bl	80064d0 <HAL_SD_ReadBlocks>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	2400030c 	.word	0x2400030c

0800b6bc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af02      	add	r7, sp, #8
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	68f9      	ldr	r1, [r7, #12]
 800b6d8:	4806      	ldr	r0, [pc, #24]	@ (800b6f4 <BSP_SD_WriteBlocks+0x38>)
 800b6da:	f7fb f883 	bl	80067e4 <HAL_SD_WriteBlocks>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d001      	beq.n	800b6e8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3718      	adds	r7, #24
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	2400030c 	.word	0x2400030c

0800b6f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b6fc:	4805      	ldr	r0, [pc, #20]	@ (800b714 <BSP_SD_GetCardState+0x1c>)
 800b6fe:	f7fb fd9f 	bl	8007240 <HAL_SD_GetCardState>
 800b702:	4603      	mov	r3, r0
 800b704:	2b04      	cmp	r3, #4
 800b706:	bf14      	ite	ne
 800b708:	2301      	movne	r3, #1
 800b70a:	2300      	moveq	r3, #0
 800b70c:	b2db      	uxtb	r3, r3
}
 800b70e:	4618      	mov	r0, r3
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	2400030c 	.word	0x2400030c

0800b718 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b720:	6879      	ldr	r1, [r7, #4]
 800b722:	4803      	ldr	r0, [pc, #12]	@ (800b730 <BSP_SD_GetCardInfo+0x18>)
 800b724:	f7fb fc4e 	bl	8006fc4 <HAL_SD_GetCardInfo>
}
 800b728:	bf00      	nop
 800b72a:	3708      	adds	r7, #8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	2400030c 	.word	0x2400030c

0800b734 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b73a:	2301      	movs	r3, #1
 800b73c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b73e:	f000 f80b 	bl	800b758 <BSP_PlatformIsDetected>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d101      	bne.n	800b74c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b748:	2300      	movs	r3, #0
 800b74a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b74c:	79fb      	ldrb	r3, [r7, #7]
 800b74e:	b2db      	uxtb	r3, r3
}
 800b750:	4618      	mov	r0, r3
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b75e:	2301      	movs	r3, #1
 800b760:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b762:	2180      	movs	r1, #128	@ 0x80
 800b764:	4806      	ldr	r0, [pc, #24]	@ (800b780 <BSP_PlatformIsDetected+0x28>)
 800b766:	f7f7 f8a7 	bl	80028b8 <HAL_GPIO_ReadPin>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b770:	2300      	movs	r3, #0
 800b772:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b774:	79fb      	ldrb	r3, [r7, #7]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	58020800 	.word	0x58020800

0800b784 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b78e:	4b0b      	ldr	r3, [pc, #44]	@ (800b7bc <SD_CheckStatus+0x38>)
 800b790:	2201      	movs	r2, #1
 800b792:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b794:	f7ff ffb0 	bl	800b6f8 <BSP_SD_GetCardState>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d107      	bne.n	800b7ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b79e:	4b07      	ldr	r3, [pc, #28]	@ (800b7bc <SD_CheckStatus+0x38>)
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	f023 0301 	bic.w	r3, r3, #1
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	4b04      	ldr	r3, [pc, #16]	@ (800b7bc <SD_CheckStatus+0x38>)
 800b7ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b7ae:	4b03      	ldr	r3, [pc, #12]	@ (800b7bc <SD_CheckStatus+0x38>)
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	b2db      	uxtb	r3, r3
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	24000015 	.word	0x24000015

0800b7c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b7ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f8 <SD_initialize+0x38>)
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b7d0:	f7ff ff30 	bl	800b634 <BSP_SD_Init>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d107      	bne.n	800b7ea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7ff ffd1 	bl	800b784 <SD_CheckStatus>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	4b04      	ldr	r3, [pc, #16]	@ (800b7f8 <SD_initialize+0x38>)
 800b7e8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b7ea:	4b03      	ldr	r3, [pc, #12]	@ (800b7f8 <SD_initialize+0x38>)
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	b2db      	uxtb	r3, r3
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	24000015 	.word	0x24000015

0800b7fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	4603      	mov	r3, r0
 800b804:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b806:	79fb      	ldrb	r3, [r7, #7]
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff ffbb 	bl	800b784 <SD_CheckStatus>
 800b80e:	4603      	mov	r3, r0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60b9      	str	r1, [r7, #8]
 800b820:	607a      	str	r2, [r7, #4]
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	4603      	mov	r3, r0
 800b826:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b82c:	f04f 33ff 	mov.w	r3, #4294967295
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	6879      	ldr	r1, [r7, #4]
 800b834:	68b8      	ldr	r0, [r7, #8]
 800b836:	f7ff ff23 	bl	800b680 <BSP_SD_ReadBlocks>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d107      	bne.n	800b850 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b840:	bf00      	nop
 800b842:	f7ff ff59 	bl	800b6f8 <BSP_SD_GetCardState>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1fa      	bne.n	800b842 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b850:	7dfb      	ldrb	r3, [r7, #23]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b086      	sub	sp, #24
 800b85e:	af00      	add	r7, sp, #0
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
 800b864:	603b      	str	r3, [r7, #0]
 800b866:	4603      	mov	r3, r0
 800b868:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b86e:	f04f 33ff 	mov.w	r3, #4294967295
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	6879      	ldr	r1, [r7, #4]
 800b876:	68b8      	ldr	r0, [r7, #8]
 800b878:	f7ff ff20 	bl	800b6bc <BSP_SD_WriteBlocks>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d107      	bne.n	800b892 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b882:	bf00      	nop
 800b884:	f7ff ff38 	bl	800b6f8 <BSP_SD_GetCardState>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1fa      	bne.n	800b884 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b892:	7dfb      	ldrb	r3, [r7, #23]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b08c      	sub	sp, #48	@ 0x30
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	603a      	str	r2, [r7, #0]
 800b8a6:	71fb      	strb	r3, [r7, #7]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b8b2:	4b25      	ldr	r3, [pc, #148]	@ (800b948 <SD_ioctl+0xac>)
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <SD_ioctl+0x28>
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e03c      	b.n	800b93e <SD_ioctl+0xa2>

  switch (cmd)
 800b8c4:	79bb      	ldrb	r3, [r7, #6]
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d834      	bhi.n	800b934 <SD_ioctl+0x98>
 800b8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d0 <SD_ioctl+0x34>)
 800b8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d0:	0800b8e1 	.word	0x0800b8e1
 800b8d4:	0800b8e9 	.word	0x0800b8e9
 800b8d8:	0800b901 	.word	0x0800b901
 800b8dc:	0800b91b 	.word	0x0800b91b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b8e6:	e028      	b.n	800b93a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b8e8:	f107 0308 	add.w	r3, r7, #8
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7ff ff13 	bl	800b718 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b8f2:	6a3a      	ldr	r2, [r7, #32]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b8fe:	e01c      	b.n	800b93a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b900:	f107 0308 	add.w	r3, r7, #8
 800b904:	4618      	mov	r0, r3
 800b906:	f7ff ff07 	bl	800b718 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b918:	e00f      	b.n	800b93a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff fefa 	bl	800b718 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b926:	0a5a      	lsrs	r2, r3, #9
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b932:	e002      	b.n	800b93a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b934:	2304      	movs	r3, #4
 800b936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b93a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3730      	adds	r7, #48	@ 0x30
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	24000015 	.word	0x24000015

0800b94c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b087      	sub	sp, #28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	4613      	mov	r3, r2
 800b958:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b95a:	2301      	movs	r3, #1
 800b95c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b962:	4b1f      	ldr	r3, [pc, #124]	@ (800b9e0 <FATFS_LinkDriverEx+0x94>)
 800b964:	7a5b      	ldrb	r3, [r3, #9]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d131      	bne.n	800b9d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b96c:	4b1c      	ldr	r3, [pc, #112]	@ (800b9e0 <FATFS_LinkDriverEx+0x94>)
 800b96e:	7a5b      	ldrb	r3, [r3, #9]
 800b970:	b2db      	uxtb	r3, r3
 800b972:	461a      	mov	r2, r3
 800b974:	4b1a      	ldr	r3, [pc, #104]	@ (800b9e0 <FATFS_LinkDriverEx+0x94>)
 800b976:	2100      	movs	r1, #0
 800b978:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b97a:	4b19      	ldr	r3, [pc, #100]	@ (800b9e0 <FATFS_LinkDriverEx+0x94>)
 800b97c:	7a5b      	ldrb	r3, [r3, #9]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	4a17      	ldr	r2, [pc, #92]	@ (800b9e0 <FATFS_LinkDriverEx+0x94>)
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	4413      	add	r3, r2
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b98a:	4b15      	ldr	r3, [pc, #84]	@ (800b9e0 <FATFS_LinkDriverEx+0x94>)
 800b98c:	7a5b      	ldrb	r3, [r3, #9]
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	461a      	mov	r2, r3
 800b992:	4b13      	ldr	r3, [pc, #76]	@ (800b9e0 <FATFS_LinkDriverEx+0x94>)
 800b994:	4413      	add	r3, r2
 800b996:	79fa      	ldrb	r2, [r7, #7]
 800b998:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b99a:	4b11      	ldr	r3, [pc, #68]	@ (800b9e0 <FATFS_LinkDriverEx+0x94>)
 800b99c:	7a5b      	ldrb	r3, [r3, #9]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	b2d1      	uxtb	r1, r2
 800b9a4:	4a0e      	ldr	r2, [pc, #56]	@ (800b9e0 <FATFS_LinkDriverEx+0x94>)
 800b9a6:	7251      	strb	r1, [r2, #9]
 800b9a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9aa:	7dbb      	ldrb	r3, [r7, #22]
 800b9ac:	3330      	adds	r3, #48	@ 0x30
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	223a      	movs	r2, #58	@ 0x3a
 800b9ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	3302      	adds	r3, #2
 800b9c0:	222f      	movs	r2, #47	@ 0x2f
 800b9c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	3303      	adds	r3, #3
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	371c      	adds	r7, #28
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	24000624 	.word	0x24000624

0800b9e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	6839      	ldr	r1, [r7, #0]
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f7ff ffaa 	bl	800b94c <FATFS_LinkDriverEx>
 800b9f8:	4603      	mov	r3, r0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <__cvt>:
 800ba02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba04:	ed2d 8b02 	vpush	{d8}
 800ba08:	eeb0 8b40 	vmov.f64	d8, d0
 800ba0c:	b085      	sub	sp, #20
 800ba0e:	4617      	mov	r7, r2
 800ba10:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ba12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba14:	ee18 2a90 	vmov	r2, s17
 800ba18:	f025 0520 	bic.w	r5, r5, #32
 800ba1c:	2a00      	cmp	r2, #0
 800ba1e:	bfb6      	itet	lt
 800ba20:	222d      	movlt	r2, #45	@ 0x2d
 800ba22:	2200      	movge	r2, #0
 800ba24:	eeb1 8b40 	vneglt.f64	d8, d0
 800ba28:	2d46      	cmp	r5, #70	@ 0x46
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	701a      	strb	r2, [r3, #0]
 800ba2e:	d004      	beq.n	800ba3a <__cvt+0x38>
 800ba30:	2d45      	cmp	r5, #69	@ 0x45
 800ba32:	d100      	bne.n	800ba36 <__cvt+0x34>
 800ba34:	3401      	adds	r4, #1
 800ba36:	2102      	movs	r1, #2
 800ba38:	e000      	b.n	800ba3c <__cvt+0x3a>
 800ba3a:	2103      	movs	r1, #3
 800ba3c:	ab03      	add	r3, sp, #12
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	ab02      	add	r3, sp, #8
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	4622      	mov	r2, r4
 800ba46:	4633      	mov	r3, r6
 800ba48:	eeb0 0b48 	vmov.f64	d0, d8
 800ba4c:	f001 f964 	bl	800cd18 <_dtoa_r>
 800ba50:	2d47      	cmp	r5, #71	@ 0x47
 800ba52:	d114      	bne.n	800ba7e <__cvt+0x7c>
 800ba54:	07fb      	lsls	r3, r7, #31
 800ba56:	d50a      	bpl.n	800ba6e <__cvt+0x6c>
 800ba58:	1902      	adds	r2, r0, r4
 800ba5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ba5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba62:	bf08      	it	eq
 800ba64:	9203      	streq	r2, [sp, #12]
 800ba66:	2130      	movs	r1, #48	@ 0x30
 800ba68:	9b03      	ldr	r3, [sp, #12]
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d319      	bcc.n	800baa2 <__cvt+0xa0>
 800ba6e:	9b03      	ldr	r3, [sp, #12]
 800ba70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba72:	1a1b      	subs	r3, r3, r0
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	b005      	add	sp, #20
 800ba78:	ecbd 8b02 	vpop	{d8}
 800ba7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba7e:	2d46      	cmp	r5, #70	@ 0x46
 800ba80:	eb00 0204 	add.w	r2, r0, r4
 800ba84:	d1e9      	bne.n	800ba5a <__cvt+0x58>
 800ba86:	7803      	ldrb	r3, [r0, #0]
 800ba88:	2b30      	cmp	r3, #48	@ 0x30
 800ba8a:	d107      	bne.n	800ba9c <__cvt+0x9a>
 800ba8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ba90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba94:	bf1c      	itt	ne
 800ba96:	f1c4 0401 	rsbne	r4, r4, #1
 800ba9a:	6034      	strne	r4, [r6, #0]
 800ba9c:	6833      	ldr	r3, [r6, #0]
 800ba9e:	441a      	add	r2, r3
 800baa0:	e7db      	b.n	800ba5a <__cvt+0x58>
 800baa2:	1c5c      	adds	r4, r3, #1
 800baa4:	9403      	str	r4, [sp, #12]
 800baa6:	7019      	strb	r1, [r3, #0]
 800baa8:	e7de      	b.n	800ba68 <__cvt+0x66>

0800baaa <__exponent>:
 800baaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baac:	2900      	cmp	r1, #0
 800baae:	bfba      	itte	lt
 800bab0:	4249      	neglt	r1, r1
 800bab2:	232d      	movlt	r3, #45	@ 0x2d
 800bab4:	232b      	movge	r3, #43	@ 0x2b
 800bab6:	2909      	cmp	r1, #9
 800bab8:	7002      	strb	r2, [r0, #0]
 800baba:	7043      	strb	r3, [r0, #1]
 800babc:	dd29      	ble.n	800bb12 <__exponent+0x68>
 800babe:	f10d 0307 	add.w	r3, sp, #7
 800bac2:	461d      	mov	r5, r3
 800bac4:	270a      	movs	r7, #10
 800bac6:	461a      	mov	r2, r3
 800bac8:	fbb1 f6f7 	udiv	r6, r1, r7
 800bacc:	fb07 1416 	mls	r4, r7, r6, r1
 800bad0:	3430      	adds	r4, #48	@ 0x30
 800bad2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bad6:	460c      	mov	r4, r1
 800bad8:	2c63      	cmp	r4, #99	@ 0x63
 800bada:	f103 33ff 	add.w	r3, r3, #4294967295
 800bade:	4631      	mov	r1, r6
 800bae0:	dcf1      	bgt.n	800bac6 <__exponent+0x1c>
 800bae2:	3130      	adds	r1, #48	@ 0x30
 800bae4:	1e94      	subs	r4, r2, #2
 800bae6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800baea:	1c41      	adds	r1, r0, #1
 800baec:	4623      	mov	r3, r4
 800baee:	42ab      	cmp	r3, r5
 800baf0:	d30a      	bcc.n	800bb08 <__exponent+0x5e>
 800baf2:	f10d 0309 	add.w	r3, sp, #9
 800baf6:	1a9b      	subs	r3, r3, r2
 800baf8:	42ac      	cmp	r4, r5
 800bafa:	bf88      	it	hi
 800bafc:	2300      	movhi	r3, #0
 800bafe:	3302      	adds	r3, #2
 800bb00:	4403      	add	r3, r0
 800bb02:	1a18      	subs	r0, r3, r0
 800bb04:	b003      	add	sp, #12
 800bb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb08:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bb0c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bb10:	e7ed      	b.n	800baee <__exponent+0x44>
 800bb12:	2330      	movs	r3, #48	@ 0x30
 800bb14:	3130      	adds	r1, #48	@ 0x30
 800bb16:	7083      	strb	r3, [r0, #2]
 800bb18:	70c1      	strb	r1, [r0, #3]
 800bb1a:	1d03      	adds	r3, r0, #4
 800bb1c:	e7f1      	b.n	800bb02 <__exponent+0x58>
	...

0800bb20 <_printf_float>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	b08d      	sub	sp, #52	@ 0x34
 800bb26:	460c      	mov	r4, r1
 800bb28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	461f      	mov	r7, r3
 800bb30:	4605      	mov	r5, r0
 800bb32:	f000 ffdb 	bl	800caec <_localeconv_r>
 800bb36:	f8d0 b000 	ldr.w	fp, [r0]
 800bb3a:	4658      	mov	r0, fp
 800bb3c:	f7f4 fc38 	bl	80003b0 <strlen>
 800bb40:	2300      	movs	r3, #0
 800bb42:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb44:	f8d8 3000 	ldr.w	r3, [r8]
 800bb48:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bb4c:	6822      	ldr	r2, [r4, #0]
 800bb4e:	9005      	str	r0, [sp, #20]
 800bb50:	3307      	adds	r3, #7
 800bb52:	f023 0307 	bic.w	r3, r3, #7
 800bb56:	f103 0108 	add.w	r1, r3, #8
 800bb5a:	f8c8 1000 	str.w	r1, [r8]
 800bb5e:	ed93 0b00 	vldr	d0, [r3]
 800bb62:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800bdc0 <_printf_float+0x2a0>
 800bb66:	eeb0 7bc0 	vabs.f64	d7, d0
 800bb6a:	eeb4 7b46 	vcmp.f64	d7, d6
 800bb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb72:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800bb76:	dd24      	ble.n	800bbc2 <_printf_float+0xa2>
 800bb78:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb80:	d502      	bpl.n	800bb88 <_printf_float+0x68>
 800bb82:	232d      	movs	r3, #45	@ 0x2d
 800bb84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb88:	498f      	ldr	r1, [pc, #572]	@ (800bdc8 <_printf_float+0x2a8>)
 800bb8a:	4b90      	ldr	r3, [pc, #576]	@ (800bdcc <_printf_float+0x2ac>)
 800bb8c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bb90:	bf94      	ite	ls
 800bb92:	4688      	movls	r8, r1
 800bb94:	4698      	movhi	r8, r3
 800bb96:	f022 0204 	bic.w	r2, r2, #4
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	6123      	str	r3, [r4, #16]
 800bb9e:	6022      	str	r2, [r4, #0]
 800bba0:	f04f 0a00 	mov.w	sl, #0
 800bba4:	9700      	str	r7, [sp, #0]
 800bba6:	4633      	mov	r3, r6
 800bba8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 f9d1 	bl	800bf54 <_printf_common>
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	f040 8089 	bne.w	800bcca <_printf_float+0x1aa>
 800bbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbc:	b00d      	add	sp, #52	@ 0x34
 800bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc2:	eeb4 0b40 	vcmp.f64	d0, d0
 800bbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbca:	d709      	bvc.n	800bbe0 <_printf_float+0xc0>
 800bbcc:	ee10 3a90 	vmov	r3, s1
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	bfbc      	itt	lt
 800bbd4:	232d      	movlt	r3, #45	@ 0x2d
 800bbd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bbda:	497d      	ldr	r1, [pc, #500]	@ (800bdd0 <_printf_float+0x2b0>)
 800bbdc:	4b7d      	ldr	r3, [pc, #500]	@ (800bdd4 <_printf_float+0x2b4>)
 800bbde:	e7d5      	b.n	800bb8c <_printf_float+0x6c>
 800bbe0:	6863      	ldr	r3, [r4, #4]
 800bbe2:	1c59      	adds	r1, r3, #1
 800bbe4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bbe8:	d139      	bne.n	800bc5e <_printf_float+0x13e>
 800bbea:	2306      	movs	r3, #6
 800bbec:	6063      	str	r3, [r4, #4]
 800bbee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	6022      	str	r2, [r4, #0]
 800bbf6:	9303      	str	r3, [sp, #12]
 800bbf8:	ab0a      	add	r3, sp, #40	@ 0x28
 800bbfa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bbfe:	ab09      	add	r3, sp, #36	@ 0x24
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	6861      	ldr	r1, [r4, #4]
 800bc04:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bc08:	4628      	mov	r0, r5
 800bc0a:	f7ff fefa 	bl	800ba02 <__cvt>
 800bc0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc14:	4680      	mov	r8, r0
 800bc16:	d129      	bne.n	800bc6c <_printf_float+0x14c>
 800bc18:	1cc8      	adds	r0, r1, #3
 800bc1a:	db02      	blt.n	800bc22 <_printf_float+0x102>
 800bc1c:	6863      	ldr	r3, [r4, #4]
 800bc1e:	4299      	cmp	r1, r3
 800bc20:	dd41      	ble.n	800bca6 <_printf_float+0x186>
 800bc22:	f1a9 0902 	sub.w	r9, r9, #2
 800bc26:	fa5f f989 	uxtb.w	r9, r9
 800bc2a:	3901      	subs	r1, #1
 800bc2c:	464a      	mov	r2, r9
 800bc2e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bc32:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc34:	f7ff ff39 	bl	800baaa <__exponent>
 800bc38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc3a:	1813      	adds	r3, r2, r0
 800bc3c:	2a01      	cmp	r2, #1
 800bc3e:	4682      	mov	sl, r0
 800bc40:	6123      	str	r3, [r4, #16]
 800bc42:	dc02      	bgt.n	800bc4a <_printf_float+0x12a>
 800bc44:	6822      	ldr	r2, [r4, #0]
 800bc46:	07d2      	lsls	r2, r2, #31
 800bc48:	d501      	bpl.n	800bc4e <_printf_float+0x12e>
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	6123      	str	r3, [r4, #16]
 800bc4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0a6      	beq.n	800bba4 <_printf_float+0x84>
 800bc56:	232d      	movs	r3, #45	@ 0x2d
 800bc58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc5c:	e7a2      	b.n	800bba4 <_printf_float+0x84>
 800bc5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc62:	d1c4      	bne.n	800bbee <_printf_float+0xce>
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1c2      	bne.n	800bbee <_printf_float+0xce>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e7bf      	b.n	800bbec <_printf_float+0xcc>
 800bc6c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bc70:	d9db      	bls.n	800bc2a <_printf_float+0x10a>
 800bc72:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bc76:	d118      	bne.n	800bcaa <_printf_float+0x18a>
 800bc78:	2900      	cmp	r1, #0
 800bc7a:	6863      	ldr	r3, [r4, #4]
 800bc7c:	dd0b      	ble.n	800bc96 <_printf_float+0x176>
 800bc7e:	6121      	str	r1, [r4, #16]
 800bc80:	b913      	cbnz	r3, 800bc88 <_printf_float+0x168>
 800bc82:	6822      	ldr	r2, [r4, #0]
 800bc84:	07d0      	lsls	r0, r2, #31
 800bc86:	d502      	bpl.n	800bc8e <_printf_float+0x16e>
 800bc88:	3301      	adds	r3, #1
 800bc8a:	440b      	add	r3, r1
 800bc8c:	6123      	str	r3, [r4, #16]
 800bc8e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bc90:	f04f 0a00 	mov.w	sl, #0
 800bc94:	e7db      	b.n	800bc4e <_printf_float+0x12e>
 800bc96:	b913      	cbnz	r3, 800bc9e <_printf_float+0x17e>
 800bc98:	6822      	ldr	r2, [r4, #0]
 800bc9a:	07d2      	lsls	r2, r2, #31
 800bc9c:	d501      	bpl.n	800bca2 <_printf_float+0x182>
 800bc9e:	3302      	adds	r3, #2
 800bca0:	e7f4      	b.n	800bc8c <_printf_float+0x16c>
 800bca2:	2301      	movs	r3, #1
 800bca4:	e7f2      	b.n	800bc8c <_printf_float+0x16c>
 800bca6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800bcaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcac:	4299      	cmp	r1, r3
 800bcae:	db05      	blt.n	800bcbc <_printf_float+0x19c>
 800bcb0:	6823      	ldr	r3, [r4, #0]
 800bcb2:	6121      	str	r1, [r4, #16]
 800bcb4:	07d8      	lsls	r0, r3, #31
 800bcb6:	d5ea      	bpl.n	800bc8e <_printf_float+0x16e>
 800bcb8:	1c4b      	adds	r3, r1, #1
 800bcba:	e7e7      	b.n	800bc8c <_printf_float+0x16c>
 800bcbc:	2900      	cmp	r1, #0
 800bcbe:	bfd4      	ite	le
 800bcc0:	f1c1 0202 	rsble	r2, r1, #2
 800bcc4:	2201      	movgt	r2, #1
 800bcc6:	4413      	add	r3, r2
 800bcc8:	e7e0      	b.n	800bc8c <_printf_float+0x16c>
 800bcca:	6823      	ldr	r3, [r4, #0]
 800bccc:	055a      	lsls	r2, r3, #21
 800bcce:	d407      	bmi.n	800bce0 <_printf_float+0x1c0>
 800bcd0:	6923      	ldr	r3, [r4, #16]
 800bcd2:	4642      	mov	r2, r8
 800bcd4:	4631      	mov	r1, r6
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	47b8      	blx	r7
 800bcda:	3001      	adds	r0, #1
 800bcdc:	d12a      	bne.n	800bd34 <_printf_float+0x214>
 800bcde:	e76b      	b.n	800bbb8 <_printf_float+0x98>
 800bce0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bce4:	f240 80e0 	bls.w	800bea8 <_printf_float+0x388>
 800bce8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800bcec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf4:	d133      	bne.n	800bd5e <_printf_float+0x23e>
 800bcf6:	4a38      	ldr	r2, [pc, #224]	@ (800bdd8 <_printf_float+0x2b8>)
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	4631      	mov	r1, r6
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	47b8      	blx	r7
 800bd00:	3001      	adds	r0, #1
 800bd02:	f43f af59 	beq.w	800bbb8 <_printf_float+0x98>
 800bd06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bd0a:	4543      	cmp	r3, r8
 800bd0c:	db02      	blt.n	800bd14 <_printf_float+0x1f4>
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	07d8      	lsls	r0, r3, #31
 800bd12:	d50f      	bpl.n	800bd34 <_printf_float+0x214>
 800bd14:	9b05      	ldr	r3, [sp, #20]
 800bd16:	465a      	mov	r2, fp
 800bd18:	4631      	mov	r1, r6
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	47b8      	blx	r7
 800bd1e:	3001      	adds	r0, #1
 800bd20:	f43f af4a 	beq.w	800bbb8 <_printf_float+0x98>
 800bd24:	f04f 0900 	mov.w	r9, #0
 800bd28:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd2c:	f104 0a1a 	add.w	sl, r4, #26
 800bd30:	45c8      	cmp	r8, r9
 800bd32:	dc09      	bgt.n	800bd48 <_printf_float+0x228>
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	079b      	lsls	r3, r3, #30
 800bd38:	f100 8107 	bmi.w	800bf4a <_printf_float+0x42a>
 800bd3c:	68e0      	ldr	r0, [r4, #12]
 800bd3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd40:	4298      	cmp	r0, r3
 800bd42:	bfb8      	it	lt
 800bd44:	4618      	movlt	r0, r3
 800bd46:	e739      	b.n	800bbbc <_printf_float+0x9c>
 800bd48:	2301      	movs	r3, #1
 800bd4a:	4652      	mov	r2, sl
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	4628      	mov	r0, r5
 800bd50:	47b8      	blx	r7
 800bd52:	3001      	adds	r0, #1
 800bd54:	f43f af30 	beq.w	800bbb8 <_printf_float+0x98>
 800bd58:	f109 0901 	add.w	r9, r9, #1
 800bd5c:	e7e8      	b.n	800bd30 <_printf_float+0x210>
 800bd5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	dc3b      	bgt.n	800bddc <_printf_float+0x2bc>
 800bd64:	4a1c      	ldr	r2, [pc, #112]	@ (800bdd8 <_printf_float+0x2b8>)
 800bd66:	2301      	movs	r3, #1
 800bd68:	4631      	mov	r1, r6
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	47b8      	blx	r7
 800bd6e:	3001      	adds	r0, #1
 800bd70:	f43f af22 	beq.w	800bbb8 <_printf_float+0x98>
 800bd74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd78:	ea59 0303 	orrs.w	r3, r9, r3
 800bd7c:	d102      	bne.n	800bd84 <_printf_float+0x264>
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	07d9      	lsls	r1, r3, #31
 800bd82:	d5d7      	bpl.n	800bd34 <_printf_float+0x214>
 800bd84:	9b05      	ldr	r3, [sp, #20]
 800bd86:	465a      	mov	r2, fp
 800bd88:	4631      	mov	r1, r6
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	47b8      	blx	r7
 800bd8e:	3001      	adds	r0, #1
 800bd90:	f43f af12 	beq.w	800bbb8 <_printf_float+0x98>
 800bd94:	f04f 0a00 	mov.w	sl, #0
 800bd98:	f104 0b1a 	add.w	fp, r4, #26
 800bd9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd9e:	425b      	negs	r3, r3
 800bda0:	4553      	cmp	r3, sl
 800bda2:	dc01      	bgt.n	800bda8 <_printf_float+0x288>
 800bda4:	464b      	mov	r3, r9
 800bda6:	e794      	b.n	800bcd2 <_printf_float+0x1b2>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	465a      	mov	r2, fp
 800bdac:	4631      	mov	r1, r6
 800bdae:	4628      	mov	r0, r5
 800bdb0:	47b8      	blx	r7
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	f43f af00 	beq.w	800bbb8 <_printf_float+0x98>
 800bdb8:	f10a 0a01 	add.w	sl, sl, #1
 800bdbc:	e7ee      	b.n	800bd9c <_printf_float+0x27c>
 800bdbe:	bf00      	nop
 800bdc0:	ffffffff 	.word	0xffffffff
 800bdc4:	7fefffff 	.word	0x7fefffff
 800bdc8:	080101e8 	.word	0x080101e8
 800bdcc:	080101ec 	.word	0x080101ec
 800bdd0:	080101f0 	.word	0x080101f0
 800bdd4:	080101f4 	.word	0x080101f4
 800bdd8:	080101f8 	.word	0x080101f8
 800bddc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bdde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bde2:	4553      	cmp	r3, sl
 800bde4:	bfa8      	it	ge
 800bde6:	4653      	movge	r3, sl
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	4699      	mov	r9, r3
 800bdec:	dc37      	bgt.n	800be5e <_printf_float+0x33e>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	9307      	str	r3, [sp, #28]
 800bdf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdf6:	f104 021a 	add.w	r2, r4, #26
 800bdfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bdfc:	9907      	ldr	r1, [sp, #28]
 800bdfe:	9306      	str	r3, [sp, #24]
 800be00:	eba3 0309 	sub.w	r3, r3, r9
 800be04:	428b      	cmp	r3, r1
 800be06:	dc31      	bgt.n	800be6c <_printf_float+0x34c>
 800be08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be0a:	459a      	cmp	sl, r3
 800be0c:	dc3b      	bgt.n	800be86 <_printf_float+0x366>
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	07da      	lsls	r2, r3, #31
 800be12:	d438      	bmi.n	800be86 <_printf_float+0x366>
 800be14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be16:	ebaa 0903 	sub.w	r9, sl, r3
 800be1a:	9b06      	ldr	r3, [sp, #24]
 800be1c:	ebaa 0303 	sub.w	r3, sl, r3
 800be20:	4599      	cmp	r9, r3
 800be22:	bfa8      	it	ge
 800be24:	4699      	movge	r9, r3
 800be26:	f1b9 0f00 	cmp.w	r9, #0
 800be2a:	dc34      	bgt.n	800be96 <_printf_float+0x376>
 800be2c:	f04f 0800 	mov.w	r8, #0
 800be30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be34:	f104 0b1a 	add.w	fp, r4, #26
 800be38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be3a:	ebaa 0303 	sub.w	r3, sl, r3
 800be3e:	eba3 0309 	sub.w	r3, r3, r9
 800be42:	4543      	cmp	r3, r8
 800be44:	f77f af76 	ble.w	800bd34 <_printf_float+0x214>
 800be48:	2301      	movs	r3, #1
 800be4a:	465a      	mov	r2, fp
 800be4c:	4631      	mov	r1, r6
 800be4e:	4628      	mov	r0, r5
 800be50:	47b8      	blx	r7
 800be52:	3001      	adds	r0, #1
 800be54:	f43f aeb0 	beq.w	800bbb8 <_printf_float+0x98>
 800be58:	f108 0801 	add.w	r8, r8, #1
 800be5c:	e7ec      	b.n	800be38 <_printf_float+0x318>
 800be5e:	4642      	mov	r2, r8
 800be60:	4631      	mov	r1, r6
 800be62:	4628      	mov	r0, r5
 800be64:	47b8      	blx	r7
 800be66:	3001      	adds	r0, #1
 800be68:	d1c1      	bne.n	800bdee <_printf_float+0x2ce>
 800be6a:	e6a5      	b.n	800bbb8 <_printf_float+0x98>
 800be6c:	2301      	movs	r3, #1
 800be6e:	4631      	mov	r1, r6
 800be70:	4628      	mov	r0, r5
 800be72:	9206      	str	r2, [sp, #24]
 800be74:	47b8      	blx	r7
 800be76:	3001      	adds	r0, #1
 800be78:	f43f ae9e 	beq.w	800bbb8 <_printf_float+0x98>
 800be7c:	9b07      	ldr	r3, [sp, #28]
 800be7e:	9a06      	ldr	r2, [sp, #24]
 800be80:	3301      	adds	r3, #1
 800be82:	9307      	str	r3, [sp, #28]
 800be84:	e7b9      	b.n	800bdfa <_printf_float+0x2da>
 800be86:	9b05      	ldr	r3, [sp, #20]
 800be88:	465a      	mov	r2, fp
 800be8a:	4631      	mov	r1, r6
 800be8c:	4628      	mov	r0, r5
 800be8e:	47b8      	blx	r7
 800be90:	3001      	adds	r0, #1
 800be92:	d1bf      	bne.n	800be14 <_printf_float+0x2f4>
 800be94:	e690      	b.n	800bbb8 <_printf_float+0x98>
 800be96:	9a06      	ldr	r2, [sp, #24]
 800be98:	464b      	mov	r3, r9
 800be9a:	4442      	add	r2, r8
 800be9c:	4631      	mov	r1, r6
 800be9e:	4628      	mov	r0, r5
 800bea0:	47b8      	blx	r7
 800bea2:	3001      	adds	r0, #1
 800bea4:	d1c2      	bne.n	800be2c <_printf_float+0x30c>
 800bea6:	e687      	b.n	800bbb8 <_printf_float+0x98>
 800bea8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800beac:	f1b9 0f01 	cmp.w	r9, #1
 800beb0:	dc01      	bgt.n	800beb6 <_printf_float+0x396>
 800beb2:	07db      	lsls	r3, r3, #31
 800beb4:	d536      	bpl.n	800bf24 <_printf_float+0x404>
 800beb6:	2301      	movs	r3, #1
 800beb8:	4642      	mov	r2, r8
 800beba:	4631      	mov	r1, r6
 800bebc:	4628      	mov	r0, r5
 800bebe:	47b8      	blx	r7
 800bec0:	3001      	adds	r0, #1
 800bec2:	f43f ae79 	beq.w	800bbb8 <_printf_float+0x98>
 800bec6:	9b05      	ldr	r3, [sp, #20]
 800bec8:	465a      	mov	r2, fp
 800beca:	4631      	mov	r1, r6
 800becc:	4628      	mov	r0, r5
 800bece:	47b8      	blx	r7
 800bed0:	3001      	adds	r0, #1
 800bed2:	f43f ae71 	beq.w	800bbb8 <_printf_float+0x98>
 800bed6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800beda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee2:	f109 39ff 	add.w	r9, r9, #4294967295
 800bee6:	d018      	beq.n	800bf1a <_printf_float+0x3fa>
 800bee8:	464b      	mov	r3, r9
 800beea:	f108 0201 	add.w	r2, r8, #1
 800beee:	4631      	mov	r1, r6
 800bef0:	4628      	mov	r0, r5
 800bef2:	47b8      	blx	r7
 800bef4:	3001      	adds	r0, #1
 800bef6:	d10c      	bne.n	800bf12 <_printf_float+0x3f2>
 800bef8:	e65e      	b.n	800bbb8 <_printf_float+0x98>
 800befa:	2301      	movs	r3, #1
 800befc:	465a      	mov	r2, fp
 800befe:	4631      	mov	r1, r6
 800bf00:	4628      	mov	r0, r5
 800bf02:	47b8      	blx	r7
 800bf04:	3001      	adds	r0, #1
 800bf06:	f43f ae57 	beq.w	800bbb8 <_printf_float+0x98>
 800bf0a:	f108 0801 	add.w	r8, r8, #1
 800bf0e:	45c8      	cmp	r8, r9
 800bf10:	dbf3      	blt.n	800befa <_printf_float+0x3da>
 800bf12:	4653      	mov	r3, sl
 800bf14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bf18:	e6dc      	b.n	800bcd4 <_printf_float+0x1b4>
 800bf1a:	f04f 0800 	mov.w	r8, #0
 800bf1e:	f104 0b1a 	add.w	fp, r4, #26
 800bf22:	e7f4      	b.n	800bf0e <_printf_float+0x3ee>
 800bf24:	2301      	movs	r3, #1
 800bf26:	4642      	mov	r2, r8
 800bf28:	e7e1      	b.n	800beee <_printf_float+0x3ce>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	464a      	mov	r2, r9
 800bf2e:	4631      	mov	r1, r6
 800bf30:	4628      	mov	r0, r5
 800bf32:	47b8      	blx	r7
 800bf34:	3001      	adds	r0, #1
 800bf36:	f43f ae3f 	beq.w	800bbb8 <_printf_float+0x98>
 800bf3a:	f108 0801 	add.w	r8, r8, #1
 800bf3e:	68e3      	ldr	r3, [r4, #12]
 800bf40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf42:	1a5b      	subs	r3, r3, r1
 800bf44:	4543      	cmp	r3, r8
 800bf46:	dcf0      	bgt.n	800bf2a <_printf_float+0x40a>
 800bf48:	e6f8      	b.n	800bd3c <_printf_float+0x21c>
 800bf4a:	f04f 0800 	mov.w	r8, #0
 800bf4e:	f104 0919 	add.w	r9, r4, #25
 800bf52:	e7f4      	b.n	800bf3e <_printf_float+0x41e>

0800bf54 <_printf_common>:
 800bf54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf58:	4616      	mov	r6, r2
 800bf5a:	4698      	mov	r8, r3
 800bf5c:	688a      	ldr	r2, [r1, #8]
 800bf5e:	690b      	ldr	r3, [r1, #16]
 800bf60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf64:	4293      	cmp	r3, r2
 800bf66:	bfb8      	it	lt
 800bf68:	4613      	movlt	r3, r2
 800bf6a:	6033      	str	r3, [r6, #0]
 800bf6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf70:	4607      	mov	r7, r0
 800bf72:	460c      	mov	r4, r1
 800bf74:	b10a      	cbz	r2, 800bf7a <_printf_common+0x26>
 800bf76:	3301      	adds	r3, #1
 800bf78:	6033      	str	r3, [r6, #0]
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	0699      	lsls	r1, r3, #26
 800bf7e:	bf42      	ittt	mi
 800bf80:	6833      	ldrmi	r3, [r6, #0]
 800bf82:	3302      	addmi	r3, #2
 800bf84:	6033      	strmi	r3, [r6, #0]
 800bf86:	6825      	ldr	r5, [r4, #0]
 800bf88:	f015 0506 	ands.w	r5, r5, #6
 800bf8c:	d106      	bne.n	800bf9c <_printf_common+0x48>
 800bf8e:	f104 0a19 	add.w	sl, r4, #25
 800bf92:	68e3      	ldr	r3, [r4, #12]
 800bf94:	6832      	ldr	r2, [r6, #0]
 800bf96:	1a9b      	subs	r3, r3, r2
 800bf98:	42ab      	cmp	r3, r5
 800bf9a:	dc26      	bgt.n	800bfea <_printf_common+0x96>
 800bf9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bfa0:	6822      	ldr	r2, [r4, #0]
 800bfa2:	3b00      	subs	r3, #0
 800bfa4:	bf18      	it	ne
 800bfa6:	2301      	movne	r3, #1
 800bfa8:	0692      	lsls	r2, r2, #26
 800bfaa:	d42b      	bmi.n	800c004 <_printf_common+0xb0>
 800bfac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bfb0:	4641      	mov	r1, r8
 800bfb2:	4638      	mov	r0, r7
 800bfb4:	47c8      	blx	r9
 800bfb6:	3001      	adds	r0, #1
 800bfb8:	d01e      	beq.n	800bff8 <_printf_common+0xa4>
 800bfba:	6823      	ldr	r3, [r4, #0]
 800bfbc:	6922      	ldr	r2, [r4, #16]
 800bfbe:	f003 0306 	and.w	r3, r3, #6
 800bfc2:	2b04      	cmp	r3, #4
 800bfc4:	bf02      	ittt	eq
 800bfc6:	68e5      	ldreq	r5, [r4, #12]
 800bfc8:	6833      	ldreq	r3, [r6, #0]
 800bfca:	1aed      	subeq	r5, r5, r3
 800bfcc:	68a3      	ldr	r3, [r4, #8]
 800bfce:	bf0c      	ite	eq
 800bfd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfd4:	2500      	movne	r5, #0
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	bfc4      	itt	gt
 800bfda:	1a9b      	subgt	r3, r3, r2
 800bfdc:	18ed      	addgt	r5, r5, r3
 800bfde:	2600      	movs	r6, #0
 800bfe0:	341a      	adds	r4, #26
 800bfe2:	42b5      	cmp	r5, r6
 800bfe4:	d11a      	bne.n	800c01c <_printf_common+0xc8>
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	e008      	b.n	800bffc <_printf_common+0xa8>
 800bfea:	2301      	movs	r3, #1
 800bfec:	4652      	mov	r2, sl
 800bfee:	4641      	mov	r1, r8
 800bff0:	4638      	mov	r0, r7
 800bff2:	47c8      	blx	r9
 800bff4:	3001      	adds	r0, #1
 800bff6:	d103      	bne.n	800c000 <_printf_common+0xac>
 800bff8:	f04f 30ff 	mov.w	r0, #4294967295
 800bffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c000:	3501      	adds	r5, #1
 800c002:	e7c6      	b.n	800bf92 <_printf_common+0x3e>
 800c004:	18e1      	adds	r1, r4, r3
 800c006:	1c5a      	adds	r2, r3, #1
 800c008:	2030      	movs	r0, #48	@ 0x30
 800c00a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c00e:	4422      	add	r2, r4
 800c010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c018:	3302      	adds	r3, #2
 800c01a:	e7c7      	b.n	800bfac <_printf_common+0x58>
 800c01c:	2301      	movs	r3, #1
 800c01e:	4622      	mov	r2, r4
 800c020:	4641      	mov	r1, r8
 800c022:	4638      	mov	r0, r7
 800c024:	47c8      	blx	r9
 800c026:	3001      	adds	r0, #1
 800c028:	d0e6      	beq.n	800bff8 <_printf_common+0xa4>
 800c02a:	3601      	adds	r6, #1
 800c02c:	e7d9      	b.n	800bfe2 <_printf_common+0x8e>
	...

0800c030 <_printf_i>:
 800c030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c034:	7e0f      	ldrb	r7, [r1, #24]
 800c036:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c038:	2f78      	cmp	r7, #120	@ 0x78
 800c03a:	4691      	mov	r9, r2
 800c03c:	4680      	mov	r8, r0
 800c03e:	460c      	mov	r4, r1
 800c040:	469a      	mov	sl, r3
 800c042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c046:	d807      	bhi.n	800c058 <_printf_i+0x28>
 800c048:	2f62      	cmp	r7, #98	@ 0x62
 800c04a:	d80a      	bhi.n	800c062 <_printf_i+0x32>
 800c04c:	2f00      	cmp	r7, #0
 800c04e:	f000 80d2 	beq.w	800c1f6 <_printf_i+0x1c6>
 800c052:	2f58      	cmp	r7, #88	@ 0x58
 800c054:	f000 80b9 	beq.w	800c1ca <_printf_i+0x19a>
 800c058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c05c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c060:	e03a      	b.n	800c0d8 <_printf_i+0xa8>
 800c062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c066:	2b15      	cmp	r3, #21
 800c068:	d8f6      	bhi.n	800c058 <_printf_i+0x28>
 800c06a:	a101      	add	r1, pc, #4	@ (adr r1, 800c070 <_printf_i+0x40>)
 800c06c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c070:	0800c0c9 	.word	0x0800c0c9
 800c074:	0800c0dd 	.word	0x0800c0dd
 800c078:	0800c059 	.word	0x0800c059
 800c07c:	0800c059 	.word	0x0800c059
 800c080:	0800c059 	.word	0x0800c059
 800c084:	0800c059 	.word	0x0800c059
 800c088:	0800c0dd 	.word	0x0800c0dd
 800c08c:	0800c059 	.word	0x0800c059
 800c090:	0800c059 	.word	0x0800c059
 800c094:	0800c059 	.word	0x0800c059
 800c098:	0800c059 	.word	0x0800c059
 800c09c:	0800c1dd 	.word	0x0800c1dd
 800c0a0:	0800c107 	.word	0x0800c107
 800c0a4:	0800c197 	.word	0x0800c197
 800c0a8:	0800c059 	.word	0x0800c059
 800c0ac:	0800c059 	.word	0x0800c059
 800c0b0:	0800c1ff 	.word	0x0800c1ff
 800c0b4:	0800c059 	.word	0x0800c059
 800c0b8:	0800c107 	.word	0x0800c107
 800c0bc:	0800c059 	.word	0x0800c059
 800c0c0:	0800c059 	.word	0x0800c059
 800c0c4:	0800c19f 	.word	0x0800c19f
 800c0c8:	6833      	ldr	r3, [r6, #0]
 800c0ca:	1d1a      	adds	r2, r3, #4
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	6032      	str	r2, [r6, #0]
 800c0d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e09d      	b.n	800c218 <_printf_i+0x1e8>
 800c0dc:	6833      	ldr	r3, [r6, #0]
 800c0de:	6820      	ldr	r0, [r4, #0]
 800c0e0:	1d19      	adds	r1, r3, #4
 800c0e2:	6031      	str	r1, [r6, #0]
 800c0e4:	0606      	lsls	r6, r0, #24
 800c0e6:	d501      	bpl.n	800c0ec <_printf_i+0xbc>
 800c0e8:	681d      	ldr	r5, [r3, #0]
 800c0ea:	e003      	b.n	800c0f4 <_printf_i+0xc4>
 800c0ec:	0645      	lsls	r5, r0, #25
 800c0ee:	d5fb      	bpl.n	800c0e8 <_printf_i+0xb8>
 800c0f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0f4:	2d00      	cmp	r5, #0
 800c0f6:	da03      	bge.n	800c100 <_printf_i+0xd0>
 800c0f8:	232d      	movs	r3, #45	@ 0x2d
 800c0fa:	426d      	negs	r5, r5
 800c0fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c100:	4859      	ldr	r0, [pc, #356]	@ (800c268 <_printf_i+0x238>)
 800c102:	230a      	movs	r3, #10
 800c104:	e011      	b.n	800c12a <_printf_i+0xfa>
 800c106:	6821      	ldr	r1, [r4, #0]
 800c108:	6833      	ldr	r3, [r6, #0]
 800c10a:	0608      	lsls	r0, r1, #24
 800c10c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c110:	d402      	bmi.n	800c118 <_printf_i+0xe8>
 800c112:	0649      	lsls	r1, r1, #25
 800c114:	bf48      	it	mi
 800c116:	b2ad      	uxthmi	r5, r5
 800c118:	2f6f      	cmp	r7, #111	@ 0x6f
 800c11a:	4853      	ldr	r0, [pc, #332]	@ (800c268 <_printf_i+0x238>)
 800c11c:	6033      	str	r3, [r6, #0]
 800c11e:	bf14      	ite	ne
 800c120:	230a      	movne	r3, #10
 800c122:	2308      	moveq	r3, #8
 800c124:	2100      	movs	r1, #0
 800c126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c12a:	6866      	ldr	r6, [r4, #4]
 800c12c:	60a6      	str	r6, [r4, #8]
 800c12e:	2e00      	cmp	r6, #0
 800c130:	bfa2      	ittt	ge
 800c132:	6821      	ldrge	r1, [r4, #0]
 800c134:	f021 0104 	bicge.w	r1, r1, #4
 800c138:	6021      	strge	r1, [r4, #0]
 800c13a:	b90d      	cbnz	r5, 800c140 <_printf_i+0x110>
 800c13c:	2e00      	cmp	r6, #0
 800c13e:	d04b      	beq.n	800c1d8 <_printf_i+0x1a8>
 800c140:	4616      	mov	r6, r2
 800c142:	fbb5 f1f3 	udiv	r1, r5, r3
 800c146:	fb03 5711 	mls	r7, r3, r1, r5
 800c14a:	5dc7      	ldrb	r7, [r0, r7]
 800c14c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c150:	462f      	mov	r7, r5
 800c152:	42bb      	cmp	r3, r7
 800c154:	460d      	mov	r5, r1
 800c156:	d9f4      	bls.n	800c142 <_printf_i+0x112>
 800c158:	2b08      	cmp	r3, #8
 800c15a:	d10b      	bne.n	800c174 <_printf_i+0x144>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	07df      	lsls	r7, r3, #31
 800c160:	d508      	bpl.n	800c174 <_printf_i+0x144>
 800c162:	6923      	ldr	r3, [r4, #16]
 800c164:	6861      	ldr	r1, [r4, #4]
 800c166:	4299      	cmp	r1, r3
 800c168:	bfde      	ittt	le
 800c16a:	2330      	movle	r3, #48	@ 0x30
 800c16c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c170:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c174:	1b92      	subs	r2, r2, r6
 800c176:	6122      	str	r2, [r4, #16]
 800c178:	f8cd a000 	str.w	sl, [sp]
 800c17c:	464b      	mov	r3, r9
 800c17e:	aa03      	add	r2, sp, #12
 800c180:	4621      	mov	r1, r4
 800c182:	4640      	mov	r0, r8
 800c184:	f7ff fee6 	bl	800bf54 <_printf_common>
 800c188:	3001      	adds	r0, #1
 800c18a:	d14a      	bne.n	800c222 <_printf_i+0x1f2>
 800c18c:	f04f 30ff 	mov.w	r0, #4294967295
 800c190:	b004      	add	sp, #16
 800c192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	f043 0320 	orr.w	r3, r3, #32
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	4833      	ldr	r0, [pc, #204]	@ (800c26c <_printf_i+0x23c>)
 800c1a0:	2778      	movs	r7, #120	@ 0x78
 800c1a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	6831      	ldr	r1, [r6, #0]
 800c1aa:	061f      	lsls	r7, r3, #24
 800c1ac:	f851 5b04 	ldr.w	r5, [r1], #4
 800c1b0:	d402      	bmi.n	800c1b8 <_printf_i+0x188>
 800c1b2:	065f      	lsls	r7, r3, #25
 800c1b4:	bf48      	it	mi
 800c1b6:	b2ad      	uxthmi	r5, r5
 800c1b8:	6031      	str	r1, [r6, #0]
 800c1ba:	07d9      	lsls	r1, r3, #31
 800c1bc:	bf44      	itt	mi
 800c1be:	f043 0320 	orrmi.w	r3, r3, #32
 800c1c2:	6023      	strmi	r3, [r4, #0]
 800c1c4:	b11d      	cbz	r5, 800c1ce <_printf_i+0x19e>
 800c1c6:	2310      	movs	r3, #16
 800c1c8:	e7ac      	b.n	800c124 <_printf_i+0xf4>
 800c1ca:	4827      	ldr	r0, [pc, #156]	@ (800c268 <_printf_i+0x238>)
 800c1cc:	e7e9      	b.n	800c1a2 <_printf_i+0x172>
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	f023 0320 	bic.w	r3, r3, #32
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	e7f6      	b.n	800c1c6 <_printf_i+0x196>
 800c1d8:	4616      	mov	r6, r2
 800c1da:	e7bd      	b.n	800c158 <_printf_i+0x128>
 800c1dc:	6833      	ldr	r3, [r6, #0]
 800c1de:	6825      	ldr	r5, [r4, #0]
 800c1e0:	6961      	ldr	r1, [r4, #20]
 800c1e2:	1d18      	adds	r0, r3, #4
 800c1e4:	6030      	str	r0, [r6, #0]
 800c1e6:	062e      	lsls	r6, r5, #24
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	d501      	bpl.n	800c1f0 <_printf_i+0x1c0>
 800c1ec:	6019      	str	r1, [r3, #0]
 800c1ee:	e002      	b.n	800c1f6 <_printf_i+0x1c6>
 800c1f0:	0668      	lsls	r0, r5, #25
 800c1f2:	d5fb      	bpl.n	800c1ec <_printf_i+0x1bc>
 800c1f4:	8019      	strh	r1, [r3, #0]
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	6123      	str	r3, [r4, #16]
 800c1fa:	4616      	mov	r6, r2
 800c1fc:	e7bc      	b.n	800c178 <_printf_i+0x148>
 800c1fe:	6833      	ldr	r3, [r6, #0]
 800c200:	1d1a      	adds	r2, r3, #4
 800c202:	6032      	str	r2, [r6, #0]
 800c204:	681e      	ldr	r6, [r3, #0]
 800c206:	6862      	ldr	r2, [r4, #4]
 800c208:	2100      	movs	r1, #0
 800c20a:	4630      	mov	r0, r6
 800c20c:	f7f4 f880 	bl	8000310 <memchr>
 800c210:	b108      	cbz	r0, 800c216 <_printf_i+0x1e6>
 800c212:	1b80      	subs	r0, r0, r6
 800c214:	6060      	str	r0, [r4, #4]
 800c216:	6863      	ldr	r3, [r4, #4]
 800c218:	6123      	str	r3, [r4, #16]
 800c21a:	2300      	movs	r3, #0
 800c21c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c220:	e7aa      	b.n	800c178 <_printf_i+0x148>
 800c222:	6923      	ldr	r3, [r4, #16]
 800c224:	4632      	mov	r2, r6
 800c226:	4649      	mov	r1, r9
 800c228:	4640      	mov	r0, r8
 800c22a:	47d0      	blx	sl
 800c22c:	3001      	adds	r0, #1
 800c22e:	d0ad      	beq.n	800c18c <_printf_i+0x15c>
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	079b      	lsls	r3, r3, #30
 800c234:	d413      	bmi.n	800c25e <_printf_i+0x22e>
 800c236:	68e0      	ldr	r0, [r4, #12]
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	4298      	cmp	r0, r3
 800c23c:	bfb8      	it	lt
 800c23e:	4618      	movlt	r0, r3
 800c240:	e7a6      	b.n	800c190 <_printf_i+0x160>
 800c242:	2301      	movs	r3, #1
 800c244:	4632      	mov	r2, r6
 800c246:	4649      	mov	r1, r9
 800c248:	4640      	mov	r0, r8
 800c24a:	47d0      	blx	sl
 800c24c:	3001      	adds	r0, #1
 800c24e:	d09d      	beq.n	800c18c <_printf_i+0x15c>
 800c250:	3501      	adds	r5, #1
 800c252:	68e3      	ldr	r3, [r4, #12]
 800c254:	9903      	ldr	r1, [sp, #12]
 800c256:	1a5b      	subs	r3, r3, r1
 800c258:	42ab      	cmp	r3, r5
 800c25a:	dcf2      	bgt.n	800c242 <_printf_i+0x212>
 800c25c:	e7eb      	b.n	800c236 <_printf_i+0x206>
 800c25e:	2500      	movs	r5, #0
 800c260:	f104 0619 	add.w	r6, r4, #25
 800c264:	e7f5      	b.n	800c252 <_printf_i+0x222>
 800c266:	bf00      	nop
 800c268:	080101fa 	.word	0x080101fa
 800c26c:	0801020b 	.word	0x0801020b

0800c270 <_scanf_float>:
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	b087      	sub	sp, #28
 800c276:	4617      	mov	r7, r2
 800c278:	9303      	str	r3, [sp, #12]
 800c27a:	688b      	ldr	r3, [r1, #8]
 800c27c:	1e5a      	subs	r2, r3, #1
 800c27e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c282:	bf81      	itttt	hi
 800c284:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c288:	eb03 0b05 	addhi.w	fp, r3, r5
 800c28c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c290:	608b      	strhi	r3, [r1, #8]
 800c292:	680b      	ldr	r3, [r1, #0]
 800c294:	460a      	mov	r2, r1
 800c296:	f04f 0500 	mov.w	r5, #0
 800c29a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c29e:	f842 3b1c 	str.w	r3, [r2], #28
 800c2a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c2a6:	4680      	mov	r8, r0
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	bf98      	it	ls
 800c2ac:	f04f 0b00 	movls.w	fp, #0
 800c2b0:	9201      	str	r2, [sp, #4]
 800c2b2:	4616      	mov	r6, r2
 800c2b4:	46aa      	mov	sl, r5
 800c2b6:	46a9      	mov	r9, r5
 800c2b8:	9502      	str	r5, [sp, #8]
 800c2ba:	68a2      	ldr	r2, [r4, #8]
 800c2bc:	b152      	cbz	r2, 800c2d4 <_scanf_float+0x64>
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	2b4e      	cmp	r3, #78	@ 0x4e
 800c2c4:	d864      	bhi.n	800c390 <_scanf_float+0x120>
 800c2c6:	2b40      	cmp	r3, #64	@ 0x40
 800c2c8:	d83c      	bhi.n	800c344 <_scanf_float+0xd4>
 800c2ca:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c2ce:	b2c8      	uxtb	r0, r1
 800c2d0:	280e      	cmp	r0, #14
 800c2d2:	d93a      	bls.n	800c34a <_scanf_float+0xda>
 800c2d4:	f1b9 0f00 	cmp.w	r9, #0
 800c2d8:	d003      	beq.n	800c2e2 <_scanf_float+0x72>
 800c2da:	6823      	ldr	r3, [r4, #0]
 800c2dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2e0:	6023      	str	r3, [r4, #0]
 800c2e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2e6:	f1ba 0f01 	cmp.w	sl, #1
 800c2ea:	f200 8117 	bhi.w	800c51c <_scanf_float+0x2ac>
 800c2ee:	9b01      	ldr	r3, [sp, #4]
 800c2f0:	429e      	cmp	r6, r3
 800c2f2:	f200 8108 	bhi.w	800c506 <_scanf_float+0x296>
 800c2f6:	2001      	movs	r0, #1
 800c2f8:	b007      	add	sp, #28
 800c2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c302:	2a0d      	cmp	r2, #13
 800c304:	d8e6      	bhi.n	800c2d4 <_scanf_float+0x64>
 800c306:	a101      	add	r1, pc, #4	@ (adr r1, 800c30c <_scanf_float+0x9c>)
 800c308:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c30c:	0800c453 	.word	0x0800c453
 800c310:	0800c2d5 	.word	0x0800c2d5
 800c314:	0800c2d5 	.word	0x0800c2d5
 800c318:	0800c2d5 	.word	0x0800c2d5
 800c31c:	0800c4b3 	.word	0x0800c4b3
 800c320:	0800c48b 	.word	0x0800c48b
 800c324:	0800c2d5 	.word	0x0800c2d5
 800c328:	0800c2d5 	.word	0x0800c2d5
 800c32c:	0800c461 	.word	0x0800c461
 800c330:	0800c2d5 	.word	0x0800c2d5
 800c334:	0800c2d5 	.word	0x0800c2d5
 800c338:	0800c2d5 	.word	0x0800c2d5
 800c33c:	0800c2d5 	.word	0x0800c2d5
 800c340:	0800c419 	.word	0x0800c419
 800c344:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c348:	e7db      	b.n	800c302 <_scanf_float+0x92>
 800c34a:	290e      	cmp	r1, #14
 800c34c:	d8c2      	bhi.n	800c2d4 <_scanf_float+0x64>
 800c34e:	a001      	add	r0, pc, #4	@ (adr r0, 800c354 <_scanf_float+0xe4>)
 800c350:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c354:	0800c409 	.word	0x0800c409
 800c358:	0800c2d5 	.word	0x0800c2d5
 800c35c:	0800c409 	.word	0x0800c409
 800c360:	0800c49f 	.word	0x0800c49f
 800c364:	0800c2d5 	.word	0x0800c2d5
 800c368:	0800c3b1 	.word	0x0800c3b1
 800c36c:	0800c3ef 	.word	0x0800c3ef
 800c370:	0800c3ef 	.word	0x0800c3ef
 800c374:	0800c3ef 	.word	0x0800c3ef
 800c378:	0800c3ef 	.word	0x0800c3ef
 800c37c:	0800c3ef 	.word	0x0800c3ef
 800c380:	0800c3ef 	.word	0x0800c3ef
 800c384:	0800c3ef 	.word	0x0800c3ef
 800c388:	0800c3ef 	.word	0x0800c3ef
 800c38c:	0800c3ef 	.word	0x0800c3ef
 800c390:	2b6e      	cmp	r3, #110	@ 0x6e
 800c392:	d809      	bhi.n	800c3a8 <_scanf_float+0x138>
 800c394:	2b60      	cmp	r3, #96	@ 0x60
 800c396:	d8b2      	bhi.n	800c2fe <_scanf_float+0x8e>
 800c398:	2b54      	cmp	r3, #84	@ 0x54
 800c39a:	d07b      	beq.n	800c494 <_scanf_float+0x224>
 800c39c:	2b59      	cmp	r3, #89	@ 0x59
 800c39e:	d199      	bne.n	800c2d4 <_scanf_float+0x64>
 800c3a0:	2d07      	cmp	r5, #7
 800c3a2:	d197      	bne.n	800c2d4 <_scanf_float+0x64>
 800c3a4:	2508      	movs	r5, #8
 800c3a6:	e02c      	b.n	800c402 <_scanf_float+0x192>
 800c3a8:	2b74      	cmp	r3, #116	@ 0x74
 800c3aa:	d073      	beq.n	800c494 <_scanf_float+0x224>
 800c3ac:	2b79      	cmp	r3, #121	@ 0x79
 800c3ae:	e7f6      	b.n	800c39e <_scanf_float+0x12e>
 800c3b0:	6821      	ldr	r1, [r4, #0]
 800c3b2:	05c8      	lsls	r0, r1, #23
 800c3b4:	d51b      	bpl.n	800c3ee <_scanf_float+0x17e>
 800c3b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c3ba:	6021      	str	r1, [r4, #0]
 800c3bc:	f109 0901 	add.w	r9, r9, #1
 800c3c0:	f1bb 0f00 	cmp.w	fp, #0
 800c3c4:	d003      	beq.n	800c3ce <_scanf_float+0x15e>
 800c3c6:	3201      	adds	r2, #1
 800c3c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3cc:	60a2      	str	r2, [r4, #8]
 800c3ce:	68a3      	ldr	r3, [r4, #8]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	60a3      	str	r3, [r4, #8]
 800c3d4:	6923      	ldr	r3, [r4, #16]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	6123      	str	r3, [r4, #16]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	607b      	str	r3, [r7, #4]
 800c3e2:	f340 8087 	ble.w	800c4f4 <_scanf_float+0x284>
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	603b      	str	r3, [r7, #0]
 800c3ec:	e765      	b.n	800c2ba <_scanf_float+0x4a>
 800c3ee:	eb1a 0105 	adds.w	r1, sl, r5
 800c3f2:	f47f af6f 	bne.w	800c2d4 <_scanf_float+0x64>
 800c3f6:	6822      	ldr	r2, [r4, #0]
 800c3f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c3fc:	6022      	str	r2, [r4, #0]
 800c3fe:	460d      	mov	r5, r1
 800c400:	468a      	mov	sl, r1
 800c402:	f806 3b01 	strb.w	r3, [r6], #1
 800c406:	e7e2      	b.n	800c3ce <_scanf_float+0x15e>
 800c408:	6822      	ldr	r2, [r4, #0]
 800c40a:	0610      	lsls	r0, r2, #24
 800c40c:	f57f af62 	bpl.w	800c2d4 <_scanf_float+0x64>
 800c410:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c414:	6022      	str	r2, [r4, #0]
 800c416:	e7f4      	b.n	800c402 <_scanf_float+0x192>
 800c418:	f1ba 0f00 	cmp.w	sl, #0
 800c41c:	d10e      	bne.n	800c43c <_scanf_float+0x1cc>
 800c41e:	f1b9 0f00 	cmp.w	r9, #0
 800c422:	d10e      	bne.n	800c442 <_scanf_float+0x1d2>
 800c424:	6822      	ldr	r2, [r4, #0]
 800c426:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c42a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c42e:	d108      	bne.n	800c442 <_scanf_float+0x1d2>
 800c430:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c434:	6022      	str	r2, [r4, #0]
 800c436:	f04f 0a01 	mov.w	sl, #1
 800c43a:	e7e2      	b.n	800c402 <_scanf_float+0x192>
 800c43c:	f1ba 0f02 	cmp.w	sl, #2
 800c440:	d055      	beq.n	800c4ee <_scanf_float+0x27e>
 800c442:	2d01      	cmp	r5, #1
 800c444:	d002      	beq.n	800c44c <_scanf_float+0x1dc>
 800c446:	2d04      	cmp	r5, #4
 800c448:	f47f af44 	bne.w	800c2d4 <_scanf_float+0x64>
 800c44c:	3501      	adds	r5, #1
 800c44e:	b2ed      	uxtb	r5, r5
 800c450:	e7d7      	b.n	800c402 <_scanf_float+0x192>
 800c452:	f1ba 0f01 	cmp.w	sl, #1
 800c456:	f47f af3d 	bne.w	800c2d4 <_scanf_float+0x64>
 800c45a:	f04f 0a02 	mov.w	sl, #2
 800c45e:	e7d0      	b.n	800c402 <_scanf_float+0x192>
 800c460:	b97d      	cbnz	r5, 800c482 <_scanf_float+0x212>
 800c462:	f1b9 0f00 	cmp.w	r9, #0
 800c466:	f47f af38 	bne.w	800c2da <_scanf_float+0x6a>
 800c46a:	6822      	ldr	r2, [r4, #0]
 800c46c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c470:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c474:	f040 8101 	bne.w	800c67a <_scanf_float+0x40a>
 800c478:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c47c:	6022      	str	r2, [r4, #0]
 800c47e:	2501      	movs	r5, #1
 800c480:	e7bf      	b.n	800c402 <_scanf_float+0x192>
 800c482:	2d03      	cmp	r5, #3
 800c484:	d0e2      	beq.n	800c44c <_scanf_float+0x1dc>
 800c486:	2d05      	cmp	r5, #5
 800c488:	e7de      	b.n	800c448 <_scanf_float+0x1d8>
 800c48a:	2d02      	cmp	r5, #2
 800c48c:	f47f af22 	bne.w	800c2d4 <_scanf_float+0x64>
 800c490:	2503      	movs	r5, #3
 800c492:	e7b6      	b.n	800c402 <_scanf_float+0x192>
 800c494:	2d06      	cmp	r5, #6
 800c496:	f47f af1d 	bne.w	800c2d4 <_scanf_float+0x64>
 800c49a:	2507      	movs	r5, #7
 800c49c:	e7b1      	b.n	800c402 <_scanf_float+0x192>
 800c49e:	6822      	ldr	r2, [r4, #0]
 800c4a0:	0591      	lsls	r1, r2, #22
 800c4a2:	f57f af17 	bpl.w	800c2d4 <_scanf_float+0x64>
 800c4a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c4aa:	6022      	str	r2, [r4, #0]
 800c4ac:	f8cd 9008 	str.w	r9, [sp, #8]
 800c4b0:	e7a7      	b.n	800c402 <_scanf_float+0x192>
 800c4b2:	6822      	ldr	r2, [r4, #0]
 800c4b4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c4b8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c4bc:	d006      	beq.n	800c4cc <_scanf_float+0x25c>
 800c4be:	0550      	lsls	r0, r2, #21
 800c4c0:	f57f af08 	bpl.w	800c2d4 <_scanf_float+0x64>
 800c4c4:	f1b9 0f00 	cmp.w	r9, #0
 800c4c8:	f000 80d7 	beq.w	800c67a <_scanf_float+0x40a>
 800c4cc:	0591      	lsls	r1, r2, #22
 800c4ce:	bf58      	it	pl
 800c4d0:	9902      	ldrpl	r1, [sp, #8]
 800c4d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c4d6:	bf58      	it	pl
 800c4d8:	eba9 0101 	subpl.w	r1, r9, r1
 800c4dc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c4e0:	bf58      	it	pl
 800c4e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c4e6:	6022      	str	r2, [r4, #0]
 800c4e8:	f04f 0900 	mov.w	r9, #0
 800c4ec:	e789      	b.n	800c402 <_scanf_float+0x192>
 800c4ee:	f04f 0a03 	mov.w	sl, #3
 800c4f2:	e786      	b.n	800c402 <_scanf_float+0x192>
 800c4f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	4640      	mov	r0, r8
 800c4fc:	4798      	blx	r3
 800c4fe:	2800      	cmp	r0, #0
 800c500:	f43f aedb 	beq.w	800c2ba <_scanf_float+0x4a>
 800c504:	e6e6      	b.n	800c2d4 <_scanf_float+0x64>
 800c506:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c50a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c50e:	463a      	mov	r2, r7
 800c510:	4640      	mov	r0, r8
 800c512:	4798      	blx	r3
 800c514:	6923      	ldr	r3, [r4, #16]
 800c516:	3b01      	subs	r3, #1
 800c518:	6123      	str	r3, [r4, #16]
 800c51a:	e6e8      	b.n	800c2ee <_scanf_float+0x7e>
 800c51c:	1e6b      	subs	r3, r5, #1
 800c51e:	2b06      	cmp	r3, #6
 800c520:	d824      	bhi.n	800c56c <_scanf_float+0x2fc>
 800c522:	2d02      	cmp	r5, #2
 800c524:	d836      	bhi.n	800c594 <_scanf_float+0x324>
 800c526:	9b01      	ldr	r3, [sp, #4]
 800c528:	429e      	cmp	r6, r3
 800c52a:	f67f aee4 	bls.w	800c2f6 <_scanf_float+0x86>
 800c52e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c532:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c536:	463a      	mov	r2, r7
 800c538:	4640      	mov	r0, r8
 800c53a:	4798      	blx	r3
 800c53c:	6923      	ldr	r3, [r4, #16]
 800c53e:	3b01      	subs	r3, #1
 800c540:	6123      	str	r3, [r4, #16]
 800c542:	e7f0      	b.n	800c526 <_scanf_float+0x2b6>
 800c544:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c548:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c54c:	463a      	mov	r2, r7
 800c54e:	4640      	mov	r0, r8
 800c550:	4798      	blx	r3
 800c552:	6923      	ldr	r3, [r4, #16]
 800c554:	3b01      	subs	r3, #1
 800c556:	6123      	str	r3, [r4, #16]
 800c558:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c55c:	fa5f fa8a 	uxtb.w	sl, sl
 800c560:	f1ba 0f02 	cmp.w	sl, #2
 800c564:	d1ee      	bne.n	800c544 <_scanf_float+0x2d4>
 800c566:	3d03      	subs	r5, #3
 800c568:	b2ed      	uxtb	r5, r5
 800c56a:	1b76      	subs	r6, r6, r5
 800c56c:	6823      	ldr	r3, [r4, #0]
 800c56e:	05da      	lsls	r2, r3, #23
 800c570:	d530      	bpl.n	800c5d4 <_scanf_float+0x364>
 800c572:	055b      	lsls	r3, r3, #21
 800c574:	d511      	bpl.n	800c59a <_scanf_float+0x32a>
 800c576:	9b01      	ldr	r3, [sp, #4]
 800c578:	429e      	cmp	r6, r3
 800c57a:	f67f aebc 	bls.w	800c2f6 <_scanf_float+0x86>
 800c57e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c582:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c586:	463a      	mov	r2, r7
 800c588:	4640      	mov	r0, r8
 800c58a:	4798      	blx	r3
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	3b01      	subs	r3, #1
 800c590:	6123      	str	r3, [r4, #16]
 800c592:	e7f0      	b.n	800c576 <_scanf_float+0x306>
 800c594:	46aa      	mov	sl, r5
 800c596:	46b3      	mov	fp, r6
 800c598:	e7de      	b.n	800c558 <_scanf_float+0x2e8>
 800c59a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c59e:	6923      	ldr	r3, [r4, #16]
 800c5a0:	2965      	cmp	r1, #101	@ 0x65
 800c5a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c5a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c5aa:	6123      	str	r3, [r4, #16]
 800c5ac:	d00c      	beq.n	800c5c8 <_scanf_float+0x358>
 800c5ae:	2945      	cmp	r1, #69	@ 0x45
 800c5b0:	d00a      	beq.n	800c5c8 <_scanf_float+0x358>
 800c5b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5b6:	463a      	mov	r2, r7
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	4798      	blx	r3
 800c5bc:	6923      	ldr	r3, [r4, #16]
 800c5be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	1eb5      	subs	r5, r6, #2
 800c5c6:	6123      	str	r3, [r4, #16]
 800c5c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5cc:	463a      	mov	r2, r7
 800c5ce:	4640      	mov	r0, r8
 800c5d0:	4798      	blx	r3
 800c5d2:	462e      	mov	r6, r5
 800c5d4:	6822      	ldr	r2, [r4, #0]
 800c5d6:	f012 0210 	ands.w	r2, r2, #16
 800c5da:	d001      	beq.n	800c5e0 <_scanf_float+0x370>
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e68b      	b.n	800c2f8 <_scanf_float+0x88>
 800c5e0:	7032      	strb	r2, [r6, #0]
 800c5e2:	6823      	ldr	r3, [r4, #0]
 800c5e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c5e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5ec:	d11a      	bne.n	800c624 <_scanf_float+0x3b4>
 800c5ee:	9b02      	ldr	r3, [sp, #8]
 800c5f0:	454b      	cmp	r3, r9
 800c5f2:	eba3 0209 	sub.w	r2, r3, r9
 800c5f6:	d121      	bne.n	800c63c <_scanf_float+0x3cc>
 800c5f8:	9901      	ldr	r1, [sp, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	4640      	mov	r0, r8
 800c5fe:	f002 fc41 	bl	800ee84 <_strtod_r>
 800c602:	9b03      	ldr	r3, [sp, #12]
 800c604:	6821      	ldr	r1, [r4, #0]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f011 0f02 	tst.w	r1, #2
 800c60c:	f103 0204 	add.w	r2, r3, #4
 800c610:	d01f      	beq.n	800c652 <_scanf_float+0x3e2>
 800c612:	9903      	ldr	r1, [sp, #12]
 800c614:	600a      	str	r2, [r1, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	ed83 0b00 	vstr	d0, [r3]
 800c61c:	68e3      	ldr	r3, [r4, #12]
 800c61e:	3301      	adds	r3, #1
 800c620:	60e3      	str	r3, [r4, #12]
 800c622:	e7db      	b.n	800c5dc <_scanf_float+0x36c>
 800c624:	9b04      	ldr	r3, [sp, #16]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d0e6      	beq.n	800c5f8 <_scanf_float+0x388>
 800c62a:	9905      	ldr	r1, [sp, #20]
 800c62c:	230a      	movs	r3, #10
 800c62e:	3101      	adds	r1, #1
 800c630:	4640      	mov	r0, r8
 800c632:	f002 fca7 	bl	800ef84 <_strtol_r>
 800c636:	9b04      	ldr	r3, [sp, #16]
 800c638:	9e05      	ldr	r6, [sp, #20]
 800c63a:	1ac2      	subs	r2, r0, r3
 800c63c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c640:	429e      	cmp	r6, r3
 800c642:	bf28      	it	cs
 800c644:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c648:	490d      	ldr	r1, [pc, #52]	@ (800c680 <_scanf_float+0x410>)
 800c64a:	4630      	mov	r0, r6
 800c64c:	f000 f94e 	bl	800c8ec <siprintf>
 800c650:	e7d2      	b.n	800c5f8 <_scanf_float+0x388>
 800c652:	f011 0f04 	tst.w	r1, #4
 800c656:	9903      	ldr	r1, [sp, #12]
 800c658:	600a      	str	r2, [r1, #0]
 800c65a:	d1dc      	bne.n	800c616 <_scanf_float+0x3a6>
 800c65c:	eeb4 0b40 	vcmp.f64	d0, d0
 800c660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c664:	681d      	ldr	r5, [r3, #0]
 800c666:	d705      	bvc.n	800c674 <_scanf_float+0x404>
 800c668:	4806      	ldr	r0, [pc, #24]	@ (800c684 <_scanf_float+0x414>)
 800c66a:	f000 fac5 	bl	800cbf8 <nanf>
 800c66e:	ed85 0a00 	vstr	s0, [r5]
 800c672:	e7d3      	b.n	800c61c <_scanf_float+0x3ac>
 800c674:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c678:	e7f9      	b.n	800c66e <_scanf_float+0x3fe>
 800c67a:	f04f 0900 	mov.w	r9, #0
 800c67e:	e630      	b.n	800c2e2 <_scanf_float+0x72>
 800c680:	0801021c 	.word	0x0801021c
 800c684:	080105b5 	.word	0x080105b5

0800c688 <std>:
 800c688:	2300      	movs	r3, #0
 800c68a:	b510      	push	{r4, lr}
 800c68c:	4604      	mov	r4, r0
 800c68e:	e9c0 3300 	strd	r3, r3, [r0]
 800c692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c696:	6083      	str	r3, [r0, #8]
 800c698:	8181      	strh	r1, [r0, #12]
 800c69a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c69c:	81c2      	strh	r2, [r0, #14]
 800c69e:	6183      	str	r3, [r0, #24]
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	2208      	movs	r2, #8
 800c6a4:	305c      	adds	r0, #92	@ 0x5c
 800c6a6:	f000 fa19 	bl	800cadc <memset>
 800c6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e0 <std+0x58>)
 800c6ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800c6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e4 <std+0x5c>)
 800c6b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e8 <std+0x60>)
 800c6b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c6ec <std+0x64>)
 800c6b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c6f0 <std+0x68>)
 800c6bc:	6224      	str	r4, [r4, #32]
 800c6be:	429c      	cmp	r4, r3
 800c6c0:	d006      	beq.n	800c6d0 <std+0x48>
 800c6c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c6c6:	4294      	cmp	r4, r2
 800c6c8:	d002      	beq.n	800c6d0 <std+0x48>
 800c6ca:	33d0      	adds	r3, #208	@ 0xd0
 800c6cc:	429c      	cmp	r4, r3
 800c6ce:	d105      	bne.n	800c6dc <std+0x54>
 800c6d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d8:	f000 ba7c 	b.w	800cbd4 <__retarget_lock_init_recursive>
 800c6dc:	bd10      	pop	{r4, pc}
 800c6de:	bf00      	nop
 800c6e0:	0800c92d 	.word	0x0800c92d
 800c6e4:	0800c94f 	.word	0x0800c94f
 800c6e8:	0800c987 	.word	0x0800c987
 800c6ec:	0800c9ab 	.word	0x0800c9ab
 800c6f0:	24000630 	.word	0x24000630

0800c6f4 <stdio_exit_handler>:
 800c6f4:	4a02      	ldr	r2, [pc, #8]	@ (800c700 <stdio_exit_handler+0xc>)
 800c6f6:	4903      	ldr	r1, [pc, #12]	@ (800c704 <stdio_exit_handler+0x10>)
 800c6f8:	4803      	ldr	r0, [pc, #12]	@ (800c708 <stdio_exit_handler+0x14>)
 800c6fa:	f000 b869 	b.w	800c7d0 <_fwalk_sglue>
 800c6fe:	bf00      	nop
 800c700:	24000018 	.word	0x24000018
 800c704:	0800f5c5 	.word	0x0800f5c5
 800c708:	24000028 	.word	0x24000028

0800c70c <cleanup_stdio>:
 800c70c:	6841      	ldr	r1, [r0, #4]
 800c70e:	4b0c      	ldr	r3, [pc, #48]	@ (800c740 <cleanup_stdio+0x34>)
 800c710:	4299      	cmp	r1, r3
 800c712:	b510      	push	{r4, lr}
 800c714:	4604      	mov	r4, r0
 800c716:	d001      	beq.n	800c71c <cleanup_stdio+0x10>
 800c718:	f002 ff54 	bl	800f5c4 <_fflush_r>
 800c71c:	68a1      	ldr	r1, [r4, #8]
 800c71e:	4b09      	ldr	r3, [pc, #36]	@ (800c744 <cleanup_stdio+0x38>)
 800c720:	4299      	cmp	r1, r3
 800c722:	d002      	beq.n	800c72a <cleanup_stdio+0x1e>
 800c724:	4620      	mov	r0, r4
 800c726:	f002 ff4d 	bl	800f5c4 <_fflush_r>
 800c72a:	68e1      	ldr	r1, [r4, #12]
 800c72c:	4b06      	ldr	r3, [pc, #24]	@ (800c748 <cleanup_stdio+0x3c>)
 800c72e:	4299      	cmp	r1, r3
 800c730:	d004      	beq.n	800c73c <cleanup_stdio+0x30>
 800c732:	4620      	mov	r0, r4
 800c734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c738:	f002 bf44 	b.w	800f5c4 <_fflush_r>
 800c73c:	bd10      	pop	{r4, pc}
 800c73e:	bf00      	nop
 800c740:	24000630 	.word	0x24000630
 800c744:	24000698 	.word	0x24000698
 800c748:	24000700 	.word	0x24000700

0800c74c <global_stdio_init.part.0>:
 800c74c:	b510      	push	{r4, lr}
 800c74e:	4b0b      	ldr	r3, [pc, #44]	@ (800c77c <global_stdio_init.part.0+0x30>)
 800c750:	4c0b      	ldr	r4, [pc, #44]	@ (800c780 <global_stdio_init.part.0+0x34>)
 800c752:	4a0c      	ldr	r2, [pc, #48]	@ (800c784 <global_stdio_init.part.0+0x38>)
 800c754:	601a      	str	r2, [r3, #0]
 800c756:	4620      	mov	r0, r4
 800c758:	2200      	movs	r2, #0
 800c75a:	2104      	movs	r1, #4
 800c75c:	f7ff ff94 	bl	800c688 <std>
 800c760:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c764:	2201      	movs	r2, #1
 800c766:	2109      	movs	r1, #9
 800c768:	f7ff ff8e 	bl	800c688 <std>
 800c76c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c770:	2202      	movs	r2, #2
 800c772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c776:	2112      	movs	r1, #18
 800c778:	f7ff bf86 	b.w	800c688 <std>
 800c77c:	24000768 	.word	0x24000768
 800c780:	24000630 	.word	0x24000630
 800c784:	0800c6f5 	.word	0x0800c6f5

0800c788 <__sfp_lock_acquire>:
 800c788:	4801      	ldr	r0, [pc, #4]	@ (800c790 <__sfp_lock_acquire+0x8>)
 800c78a:	f000 ba24 	b.w	800cbd6 <__retarget_lock_acquire_recursive>
 800c78e:	bf00      	nop
 800c790:	24000771 	.word	0x24000771

0800c794 <__sfp_lock_release>:
 800c794:	4801      	ldr	r0, [pc, #4]	@ (800c79c <__sfp_lock_release+0x8>)
 800c796:	f000 ba1f 	b.w	800cbd8 <__retarget_lock_release_recursive>
 800c79a:	bf00      	nop
 800c79c:	24000771 	.word	0x24000771

0800c7a0 <__sinit>:
 800c7a0:	b510      	push	{r4, lr}
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	f7ff fff0 	bl	800c788 <__sfp_lock_acquire>
 800c7a8:	6a23      	ldr	r3, [r4, #32]
 800c7aa:	b11b      	cbz	r3, 800c7b4 <__sinit+0x14>
 800c7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7b0:	f7ff bff0 	b.w	800c794 <__sfp_lock_release>
 800c7b4:	4b04      	ldr	r3, [pc, #16]	@ (800c7c8 <__sinit+0x28>)
 800c7b6:	6223      	str	r3, [r4, #32]
 800c7b8:	4b04      	ldr	r3, [pc, #16]	@ (800c7cc <__sinit+0x2c>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1f5      	bne.n	800c7ac <__sinit+0xc>
 800c7c0:	f7ff ffc4 	bl	800c74c <global_stdio_init.part.0>
 800c7c4:	e7f2      	b.n	800c7ac <__sinit+0xc>
 800c7c6:	bf00      	nop
 800c7c8:	0800c70d 	.word	0x0800c70d
 800c7cc:	24000768 	.word	0x24000768

0800c7d0 <_fwalk_sglue>:
 800c7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	4688      	mov	r8, r1
 800c7d8:	4614      	mov	r4, r2
 800c7da:	2600      	movs	r6, #0
 800c7dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7e0:	f1b9 0901 	subs.w	r9, r9, #1
 800c7e4:	d505      	bpl.n	800c7f2 <_fwalk_sglue+0x22>
 800c7e6:	6824      	ldr	r4, [r4, #0]
 800c7e8:	2c00      	cmp	r4, #0
 800c7ea:	d1f7      	bne.n	800c7dc <_fwalk_sglue+0xc>
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7f2:	89ab      	ldrh	r3, [r5, #12]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d907      	bls.n	800c808 <_fwalk_sglue+0x38>
 800c7f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	d003      	beq.n	800c808 <_fwalk_sglue+0x38>
 800c800:	4629      	mov	r1, r5
 800c802:	4638      	mov	r0, r7
 800c804:	47c0      	blx	r8
 800c806:	4306      	orrs	r6, r0
 800c808:	3568      	adds	r5, #104	@ 0x68
 800c80a:	e7e9      	b.n	800c7e0 <_fwalk_sglue+0x10>

0800c80c <iprintf>:
 800c80c:	b40f      	push	{r0, r1, r2, r3}
 800c80e:	b507      	push	{r0, r1, r2, lr}
 800c810:	4906      	ldr	r1, [pc, #24]	@ (800c82c <iprintf+0x20>)
 800c812:	ab04      	add	r3, sp, #16
 800c814:	6808      	ldr	r0, [r1, #0]
 800c816:	f853 2b04 	ldr.w	r2, [r3], #4
 800c81a:	6881      	ldr	r1, [r0, #8]
 800c81c:	9301      	str	r3, [sp, #4]
 800c81e:	f002 fd35 	bl	800f28c <_vfiprintf_r>
 800c822:	b003      	add	sp, #12
 800c824:	f85d eb04 	ldr.w	lr, [sp], #4
 800c828:	b004      	add	sp, #16
 800c82a:	4770      	bx	lr
 800c82c:	24000024 	.word	0x24000024

0800c830 <_puts_r>:
 800c830:	6a03      	ldr	r3, [r0, #32]
 800c832:	b570      	push	{r4, r5, r6, lr}
 800c834:	6884      	ldr	r4, [r0, #8]
 800c836:	4605      	mov	r5, r0
 800c838:	460e      	mov	r6, r1
 800c83a:	b90b      	cbnz	r3, 800c840 <_puts_r+0x10>
 800c83c:	f7ff ffb0 	bl	800c7a0 <__sinit>
 800c840:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c842:	07db      	lsls	r3, r3, #31
 800c844:	d405      	bmi.n	800c852 <_puts_r+0x22>
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	0598      	lsls	r0, r3, #22
 800c84a:	d402      	bmi.n	800c852 <_puts_r+0x22>
 800c84c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c84e:	f000 f9c2 	bl	800cbd6 <__retarget_lock_acquire_recursive>
 800c852:	89a3      	ldrh	r3, [r4, #12]
 800c854:	0719      	lsls	r1, r3, #28
 800c856:	d502      	bpl.n	800c85e <_puts_r+0x2e>
 800c858:	6923      	ldr	r3, [r4, #16]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d135      	bne.n	800c8ca <_puts_r+0x9a>
 800c85e:	4621      	mov	r1, r4
 800c860:	4628      	mov	r0, r5
 800c862:	f000 f8e5 	bl	800ca30 <__swsetup_r>
 800c866:	b380      	cbz	r0, 800c8ca <_puts_r+0x9a>
 800c868:	f04f 35ff 	mov.w	r5, #4294967295
 800c86c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c86e:	07da      	lsls	r2, r3, #31
 800c870:	d405      	bmi.n	800c87e <_puts_r+0x4e>
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	059b      	lsls	r3, r3, #22
 800c876:	d402      	bmi.n	800c87e <_puts_r+0x4e>
 800c878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c87a:	f000 f9ad 	bl	800cbd8 <__retarget_lock_release_recursive>
 800c87e:	4628      	mov	r0, r5
 800c880:	bd70      	pop	{r4, r5, r6, pc}
 800c882:	2b00      	cmp	r3, #0
 800c884:	da04      	bge.n	800c890 <_puts_r+0x60>
 800c886:	69a2      	ldr	r2, [r4, #24]
 800c888:	429a      	cmp	r2, r3
 800c88a:	dc17      	bgt.n	800c8bc <_puts_r+0x8c>
 800c88c:	290a      	cmp	r1, #10
 800c88e:	d015      	beq.n	800c8bc <_puts_r+0x8c>
 800c890:	6823      	ldr	r3, [r4, #0]
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	6022      	str	r2, [r4, #0]
 800c896:	7019      	strb	r1, [r3, #0]
 800c898:	68a3      	ldr	r3, [r4, #8]
 800c89a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	60a3      	str	r3, [r4, #8]
 800c8a2:	2900      	cmp	r1, #0
 800c8a4:	d1ed      	bne.n	800c882 <_puts_r+0x52>
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	da11      	bge.n	800c8ce <_puts_r+0x9e>
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	210a      	movs	r1, #10
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	f000 f87f 	bl	800c9b2 <__swbuf_r>
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d0d7      	beq.n	800c868 <_puts_r+0x38>
 800c8b8:	250a      	movs	r5, #10
 800c8ba:	e7d7      	b.n	800c86c <_puts_r+0x3c>
 800c8bc:	4622      	mov	r2, r4
 800c8be:	4628      	mov	r0, r5
 800c8c0:	f000 f877 	bl	800c9b2 <__swbuf_r>
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	d1e7      	bne.n	800c898 <_puts_r+0x68>
 800c8c8:	e7ce      	b.n	800c868 <_puts_r+0x38>
 800c8ca:	3e01      	subs	r6, #1
 800c8cc:	e7e4      	b.n	800c898 <_puts_r+0x68>
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	1c5a      	adds	r2, r3, #1
 800c8d2:	6022      	str	r2, [r4, #0]
 800c8d4:	220a      	movs	r2, #10
 800c8d6:	701a      	strb	r2, [r3, #0]
 800c8d8:	e7ee      	b.n	800c8b8 <_puts_r+0x88>
	...

0800c8dc <puts>:
 800c8dc:	4b02      	ldr	r3, [pc, #8]	@ (800c8e8 <puts+0xc>)
 800c8de:	4601      	mov	r1, r0
 800c8e0:	6818      	ldr	r0, [r3, #0]
 800c8e2:	f7ff bfa5 	b.w	800c830 <_puts_r>
 800c8e6:	bf00      	nop
 800c8e8:	24000024 	.word	0x24000024

0800c8ec <siprintf>:
 800c8ec:	b40e      	push	{r1, r2, r3}
 800c8ee:	b500      	push	{lr}
 800c8f0:	b09c      	sub	sp, #112	@ 0x70
 800c8f2:	ab1d      	add	r3, sp, #116	@ 0x74
 800c8f4:	9002      	str	r0, [sp, #8]
 800c8f6:	9006      	str	r0, [sp, #24]
 800c8f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c8fc:	4809      	ldr	r0, [pc, #36]	@ (800c924 <siprintf+0x38>)
 800c8fe:	9107      	str	r1, [sp, #28]
 800c900:	9104      	str	r1, [sp, #16]
 800c902:	4909      	ldr	r1, [pc, #36]	@ (800c928 <siprintf+0x3c>)
 800c904:	f853 2b04 	ldr.w	r2, [r3], #4
 800c908:	9105      	str	r1, [sp, #20]
 800c90a:	6800      	ldr	r0, [r0, #0]
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	a902      	add	r1, sp, #8
 800c910:	f002 fb96 	bl	800f040 <_svfiprintf_r>
 800c914:	9b02      	ldr	r3, [sp, #8]
 800c916:	2200      	movs	r2, #0
 800c918:	701a      	strb	r2, [r3, #0]
 800c91a:	b01c      	add	sp, #112	@ 0x70
 800c91c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c920:	b003      	add	sp, #12
 800c922:	4770      	bx	lr
 800c924:	24000024 	.word	0x24000024
 800c928:	ffff0208 	.word	0xffff0208

0800c92c <__sread>:
 800c92c:	b510      	push	{r4, lr}
 800c92e:	460c      	mov	r4, r1
 800c930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c934:	f000 f900 	bl	800cb38 <_read_r>
 800c938:	2800      	cmp	r0, #0
 800c93a:	bfab      	itete	ge
 800c93c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c93e:	89a3      	ldrhlt	r3, [r4, #12]
 800c940:	181b      	addge	r3, r3, r0
 800c942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c946:	bfac      	ite	ge
 800c948:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c94a:	81a3      	strhlt	r3, [r4, #12]
 800c94c:	bd10      	pop	{r4, pc}

0800c94e <__swrite>:
 800c94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c952:	461f      	mov	r7, r3
 800c954:	898b      	ldrh	r3, [r1, #12]
 800c956:	05db      	lsls	r3, r3, #23
 800c958:	4605      	mov	r5, r0
 800c95a:	460c      	mov	r4, r1
 800c95c:	4616      	mov	r6, r2
 800c95e:	d505      	bpl.n	800c96c <__swrite+0x1e>
 800c960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c964:	2302      	movs	r3, #2
 800c966:	2200      	movs	r2, #0
 800c968:	f000 f8d4 	bl	800cb14 <_lseek_r>
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c976:	81a3      	strh	r3, [r4, #12]
 800c978:	4632      	mov	r2, r6
 800c97a:	463b      	mov	r3, r7
 800c97c:	4628      	mov	r0, r5
 800c97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c982:	f000 b8eb 	b.w	800cb5c <_write_r>

0800c986 <__sseek>:
 800c986:	b510      	push	{r4, lr}
 800c988:	460c      	mov	r4, r1
 800c98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c98e:	f000 f8c1 	bl	800cb14 <_lseek_r>
 800c992:	1c43      	adds	r3, r0, #1
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	bf15      	itete	ne
 800c998:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c99a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c99e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c9a2:	81a3      	strheq	r3, [r4, #12]
 800c9a4:	bf18      	it	ne
 800c9a6:	81a3      	strhne	r3, [r4, #12]
 800c9a8:	bd10      	pop	{r4, pc}

0800c9aa <__sclose>:
 800c9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ae:	f000 b8a1 	b.w	800caf4 <_close_r>

0800c9b2 <__swbuf_r>:
 800c9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b4:	460e      	mov	r6, r1
 800c9b6:	4614      	mov	r4, r2
 800c9b8:	4605      	mov	r5, r0
 800c9ba:	b118      	cbz	r0, 800c9c4 <__swbuf_r+0x12>
 800c9bc:	6a03      	ldr	r3, [r0, #32]
 800c9be:	b90b      	cbnz	r3, 800c9c4 <__swbuf_r+0x12>
 800c9c0:	f7ff feee 	bl	800c7a0 <__sinit>
 800c9c4:	69a3      	ldr	r3, [r4, #24]
 800c9c6:	60a3      	str	r3, [r4, #8]
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	071a      	lsls	r2, r3, #28
 800c9cc:	d501      	bpl.n	800c9d2 <__swbuf_r+0x20>
 800c9ce:	6923      	ldr	r3, [r4, #16]
 800c9d0:	b943      	cbnz	r3, 800c9e4 <__swbuf_r+0x32>
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	f000 f82b 	bl	800ca30 <__swsetup_r>
 800c9da:	b118      	cbz	r0, 800c9e4 <__swbuf_r+0x32>
 800c9dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c9e0:	4638      	mov	r0, r7
 800c9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	6922      	ldr	r2, [r4, #16]
 800c9e8:	1a98      	subs	r0, r3, r2
 800c9ea:	6963      	ldr	r3, [r4, #20]
 800c9ec:	b2f6      	uxtb	r6, r6
 800c9ee:	4283      	cmp	r3, r0
 800c9f0:	4637      	mov	r7, r6
 800c9f2:	dc05      	bgt.n	800ca00 <__swbuf_r+0x4e>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	f002 fde4 	bl	800f5c4 <_fflush_r>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d1ed      	bne.n	800c9dc <__swbuf_r+0x2a>
 800ca00:	68a3      	ldr	r3, [r4, #8]
 800ca02:	3b01      	subs	r3, #1
 800ca04:	60a3      	str	r3, [r4, #8]
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	1c5a      	adds	r2, r3, #1
 800ca0a:	6022      	str	r2, [r4, #0]
 800ca0c:	701e      	strb	r6, [r3, #0]
 800ca0e:	6962      	ldr	r2, [r4, #20]
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d004      	beq.n	800ca20 <__swbuf_r+0x6e>
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	07db      	lsls	r3, r3, #31
 800ca1a:	d5e1      	bpl.n	800c9e0 <__swbuf_r+0x2e>
 800ca1c:	2e0a      	cmp	r6, #10
 800ca1e:	d1df      	bne.n	800c9e0 <__swbuf_r+0x2e>
 800ca20:	4621      	mov	r1, r4
 800ca22:	4628      	mov	r0, r5
 800ca24:	f002 fdce 	bl	800f5c4 <_fflush_r>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d0d9      	beq.n	800c9e0 <__swbuf_r+0x2e>
 800ca2c:	e7d6      	b.n	800c9dc <__swbuf_r+0x2a>
	...

0800ca30 <__swsetup_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	4b29      	ldr	r3, [pc, #164]	@ (800cad8 <__swsetup_r+0xa8>)
 800ca34:	4605      	mov	r5, r0
 800ca36:	6818      	ldr	r0, [r3, #0]
 800ca38:	460c      	mov	r4, r1
 800ca3a:	b118      	cbz	r0, 800ca44 <__swsetup_r+0x14>
 800ca3c:	6a03      	ldr	r3, [r0, #32]
 800ca3e:	b90b      	cbnz	r3, 800ca44 <__swsetup_r+0x14>
 800ca40:	f7ff feae 	bl	800c7a0 <__sinit>
 800ca44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca48:	0719      	lsls	r1, r3, #28
 800ca4a:	d422      	bmi.n	800ca92 <__swsetup_r+0x62>
 800ca4c:	06da      	lsls	r2, r3, #27
 800ca4e:	d407      	bmi.n	800ca60 <__swsetup_r+0x30>
 800ca50:	2209      	movs	r2, #9
 800ca52:	602a      	str	r2, [r5, #0]
 800ca54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca58:	81a3      	strh	r3, [r4, #12]
 800ca5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5e:	e033      	b.n	800cac8 <__swsetup_r+0x98>
 800ca60:	0758      	lsls	r0, r3, #29
 800ca62:	d512      	bpl.n	800ca8a <__swsetup_r+0x5a>
 800ca64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca66:	b141      	cbz	r1, 800ca7a <__swsetup_r+0x4a>
 800ca68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca6c:	4299      	cmp	r1, r3
 800ca6e:	d002      	beq.n	800ca76 <__swsetup_r+0x46>
 800ca70:	4628      	mov	r0, r5
 800ca72:	f000 fea7 	bl	800d7c4 <_free_r>
 800ca76:	2300      	movs	r3, #0
 800ca78:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca80:	81a3      	strh	r3, [r4, #12]
 800ca82:	2300      	movs	r3, #0
 800ca84:	6063      	str	r3, [r4, #4]
 800ca86:	6923      	ldr	r3, [r4, #16]
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	f043 0308 	orr.w	r3, r3, #8
 800ca90:	81a3      	strh	r3, [r4, #12]
 800ca92:	6923      	ldr	r3, [r4, #16]
 800ca94:	b94b      	cbnz	r3, 800caaa <__swsetup_r+0x7a>
 800ca96:	89a3      	ldrh	r3, [r4, #12]
 800ca98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800caa0:	d003      	beq.n	800caaa <__swsetup_r+0x7a>
 800caa2:	4621      	mov	r1, r4
 800caa4:	4628      	mov	r0, r5
 800caa6:	f002 fddb 	bl	800f660 <__smakebuf_r>
 800caaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caae:	f013 0201 	ands.w	r2, r3, #1
 800cab2:	d00a      	beq.n	800caca <__swsetup_r+0x9a>
 800cab4:	2200      	movs	r2, #0
 800cab6:	60a2      	str	r2, [r4, #8]
 800cab8:	6962      	ldr	r2, [r4, #20]
 800caba:	4252      	negs	r2, r2
 800cabc:	61a2      	str	r2, [r4, #24]
 800cabe:	6922      	ldr	r2, [r4, #16]
 800cac0:	b942      	cbnz	r2, 800cad4 <__swsetup_r+0xa4>
 800cac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cac6:	d1c5      	bne.n	800ca54 <__swsetup_r+0x24>
 800cac8:	bd38      	pop	{r3, r4, r5, pc}
 800caca:	0799      	lsls	r1, r3, #30
 800cacc:	bf58      	it	pl
 800cace:	6962      	ldrpl	r2, [r4, #20]
 800cad0:	60a2      	str	r2, [r4, #8]
 800cad2:	e7f4      	b.n	800cabe <__swsetup_r+0x8e>
 800cad4:	2000      	movs	r0, #0
 800cad6:	e7f7      	b.n	800cac8 <__swsetup_r+0x98>
 800cad8:	24000024 	.word	0x24000024

0800cadc <memset>:
 800cadc:	4402      	add	r2, r0
 800cade:	4603      	mov	r3, r0
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d100      	bne.n	800cae6 <memset+0xa>
 800cae4:	4770      	bx	lr
 800cae6:	f803 1b01 	strb.w	r1, [r3], #1
 800caea:	e7f9      	b.n	800cae0 <memset+0x4>

0800caec <_localeconv_r>:
 800caec:	4800      	ldr	r0, [pc, #0]	@ (800caf0 <_localeconv_r+0x4>)
 800caee:	4770      	bx	lr
 800caf0:	24000164 	.word	0x24000164

0800caf4 <_close_r>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	4d06      	ldr	r5, [pc, #24]	@ (800cb10 <_close_r+0x1c>)
 800caf8:	2300      	movs	r3, #0
 800cafa:	4604      	mov	r4, r0
 800cafc:	4608      	mov	r0, r1
 800cafe:	602b      	str	r3, [r5, #0]
 800cb00:	f7f5 f9bf 	bl	8001e82 <_close>
 800cb04:	1c43      	adds	r3, r0, #1
 800cb06:	d102      	bne.n	800cb0e <_close_r+0x1a>
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	b103      	cbz	r3, 800cb0e <_close_r+0x1a>
 800cb0c:	6023      	str	r3, [r4, #0]
 800cb0e:	bd38      	pop	{r3, r4, r5, pc}
 800cb10:	2400076c 	.word	0x2400076c

0800cb14 <_lseek_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4d07      	ldr	r5, [pc, #28]	@ (800cb34 <_lseek_r+0x20>)
 800cb18:	4604      	mov	r4, r0
 800cb1a:	4608      	mov	r0, r1
 800cb1c:	4611      	mov	r1, r2
 800cb1e:	2200      	movs	r2, #0
 800cb20:	602a      	str	r2, [r5, #0]
 800cb22:	461a      	mov	r2, r3
 800cb24:	f7f5 f9d4 	bl	8001ed0 <_lseek>
 800cb28:	1c43      	adds	r3, r0, #1
 800cb2a:	d102      	bne.n	800cb32 <_lseek_r+0x1e>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b103      	cbz	r3, 800cb32 <_lseek_r+0x1e>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd38      	pop	{r3, r4, r5, pc}
 800cb34:	2400076c 	.word	0x2400076c

0800cb38 <_read_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	4d07      	ldr	r5, [pc, #28]	@ (800cb58 <_read_r+0x20>)
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	4608      	mov	r0, r1
 800cb40:	4611      	mov	r1, r2
 800cb42:	2200      	movs	r2, #0
 800cb44:	602a      	str	r2, [r5, #0]
 800cb46:	461a      	mov	r2, r3
 800cb48:	f7f5 f97e 	bl	8001e48 <_read>
 800cb4c:	1c43      	adds	r3, r0, #1
 800cb4e:	d102      	bne.n	800cb56 <_read_r+0x1e>
 800cb50:	682b      	ldr	r3, [r5, #0]
 800cb52:	b103      	cbz	r3, 800cb56 <_read_r+0x1e>
 800cb54:	6023      	str	r3, [r4, #0]
 800cb56:	bd38      	pop	{r3, r4, r5, pc}
 800cb58:	2400076c 	.word	0x2400076c

0800cb5c <_write_r>:
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4d07      	ldr	r5, [pc, #28]	@ (800cb7c <_write_r+0x20>)
 800cb60:	4604      	mov	r4, r0
 800cb62:	4608      	mov	r0, r1
 800cb64:	4611      	mov	r1, r2
 800cb66:	2200      	movs	r2, #0
 800cb68:	602a      	str	r2, [r5, #0]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	f7f4 f89b 	bl	8000ca6 <_write>
 800cb70:	1c43      	adds	r3, r0, #1
 800cb72:	d102      	bne.n	800cb7a <_write_r+0x1e>
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	b103      	cbz	r3, 800cb7a <_write_r+0x1e>
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}
 800cb7c:	2400076c 	.word	0x2400076c

0800cb80 <__errno>:
 800cb80:	4b01      	ldr	r3, [pc, #4]	@ (800cb88 <__errno+0x8>)
 800cb82:	6818      	ldr	r0, [r3, #0]
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	24000024 	.word	0x24000024

0800cb8c <__libc_init_array>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	4d0d      	ldr	r5, [pc, #52]	@ (800cbc4 <__libc_init_array+0x38>)
 800cb90:	4c0d      	ldr	r4, [pc, #52]	@ (800cbc8 <__libc_init_array+0x3c>)
 800cb92:	1b64      	subs	r4, r4, r5
 800cb94:	10a4      	asrs	r4, r4, #2
 800cb96:	2600      	movs	r6, #0
 800cb98:	42a6      	cmp	r6, r4
 800cb9a:	d109      	bne.n	800cbb0 <__libc_init_array+0x24>
 800cb9c:	4d0b      	ldr	r5, [pc, #44]	@ (800cbcc <__libc_init_array+0x40>)
 800cb9e:	4c0c      	ldr	r4, [pc, #48]	@ (800cbd0 <__libc_init_array+0x44>)
 800cba0:	f003 fa20 	bl	800ffe4 <_init>
 800cba4:	1b64      	subs	r4, r4, r5
 800cba6:	10a4      	asrs	r4, r4, #2
 800cba8:	2600      	movs	r6, #0
 800cbaa:	42a6      	cmp	r6, r4
 800cbac:	d105      	bne.n	800cbba <__libc_init_array+0x2e>
 800cbae:	bd70      	pop	{r4, r5, r6, pc}
 800cbb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbb4:	4798      	blx	r3
 800cbb6:	3601      	adds	r6, #1
 800cbb8:	e7ee      	b.n	800cb98 <__libc_init_array+0xc>
 800cbba:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbbe:	4798      	blx	r3
 800cbc0:	3601      	adds	r6, #1
 800cbc2:	e7f2      	b.n	800cbaa <__libc_init_array+0x1e>
 800cbc4:	08010620 	.word	0x08010620
 800cbc8:	08010620 	.word	0x08010620
 800cbcc:	08010620 	.word	0x08010620
 800cbd0:	08010624 	.word	0x08010624

0800cbd4 <__retarget_lock_init_recursive>:
 800cbd4:	4770      	bx	lr

0800cbd6 <__retarget_lock_acquire_recursive>:
 800cbd6:	4770      	bx	lr

0800cbd8 <__retarget_lock_release_recursive>:
 800cbd8:	4770      	bx	lr

0800cbda <memcpy>:
 800cbda:	440a      	add	r2, r1
 800cbdc:	4291      	cmp	r1, r2
 800cbde:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbe2:	d100      	bne.n	800cbe6 <memcpy+0xc>
 800cbe4:	4770      	bx	lr
 800cbe6:	b510      	push	{r4, lr}
 800cbe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbf0:	4291      	cmp	r1, r2
 800cbf2:	d1f9      	bne.n	800cbe8 <memcpy+0xe>
 800cbf4:	bd10      	pop	{r4, pc}
	...

0800cbf8 <nanf>:
 800cbf8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cc00 <nanf+0x8>
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	7fc00000 	.word	0x7fc00000

0800cc04 <quorem>:
 800cc04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	6903      	ldr	r3, [r0, #16]
 800cc0a:	690c      	ldr	r4, [r1, #16]
 800cc0c:	42a3      	cmp	r3, r4
 800cc0e:	4607      	mov	r7, r0
 800cc10:	db7e      	blt.n	800cd10 <quorem+0x10c>
 800cc12:	3c01      	subs	r4, #1
 800cc14:	f101 0814 	add.w	r8, r1, #20
 800cc18:	00a3      	lsls	r3, r4, #2
 800cc1a:	f100 0514 	add.w	r5, r0, #20
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc24:	9301      	str	r3, [sp, #4]
 800cc26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	429a      	cmp	r2, r3
 800cc32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc36:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc3a:	d32e      	bcc.n	800cc9a <quorem+0x96>
 800cc3c:	f04f 0a00 	mov.w	sl, #0
 800cc40:	46c4      	mov	ip, r8
 800cc42:	46ae      	mov	lr, r5
 800cc44:	46d3      	mov	fp, sl
 800cc46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cc4a:	b298      	uxth	r0, r3
 800cc4c:	fb06 a000 	mla	r0, r6, r0, sl
 800cc50:	0c02      	lsrs	r2, r0, #16
 800cc52:	0c1b      	lsrs	r3, r3, #16
 800cc54:	fb06 2303 	mla	r3, r6, r3, r2
 800cc58:	f8de 2000 	ldr.w	r2, [lr]
 800cc5c:	b280      	uxth	r0, r0
 800cc5e:	b292      	uxth	r2, r2
 800cc60:	1a12      	subs	r2, r2, r0
 800cc62:	445a      	add	r2, fp
 800cc64:	f8de 0000 	ldr.w	r0, [lr]
 800cc68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cc72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cc76:	b292      	uxth	r2, r2
 800cc78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cc7c:	45e1      	cmp	r9, ip
 800cc7e:	f84e 2b04 	str.w	r2, [lr], #4
 800cc82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cc86:	d2de      	bcs.n	800cc46 <quorem+0x42>
 800cc88:	9b00      	ldr	r3, [sp, #0]
 800cc8a:	58eb      	ldr	r3, [r5, r3]
 800cc8c:	b92b      	cbnz	r3, 800cc9a <quorem+0x96>
 800cc8e:	9b01      	ldr	r3, [sp, #4]
 800cc90:	3b04      	subs	r3, #4
 800cc92:	429d      	cmp	r5, r3
 800cc94:	461a      	mov	r2, r3
 800cc96:	d32f      	bcc.n	800ccf8 <quorem+0xf4>
 800cc98:	613c      	str	r4, [r7, #16]
 800cc9a:	4638      	mov	r0, r7
 800cc9c:	f001 f956 	bl	800df4c <__mcmp>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	db25      	blt.n	800ccf0 <quorem+0xec>
 800cca4:	4629      	mov	r1, r5
 800cca6:	2000      	movs	r0, #0
 800cca8:	f858 2b04 	ldr.w	r2, [r8], #4
 800ccac:	f8d1 c000 	ldr.w	ip, [r1]
 800ccb0:	fa1f fe82 	uxth.w	lr, r2
 800ccb4:	fa1f f38c 	uxth.w	r3, ip
 800ccb8:	eba3 030e 	sub.w	r3, r3, lr
 800ccbc:	4403      	add	r3, r0
 800ccbe:	0c12      	lsrs	r2, r2, #16
 800ccc0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ccc4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccce:	45c1      	cmp	r9, r8
 800ccd0:	f841 3b04 	str.w	r3, [r1], #4
 800ccd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ccd8:	d2e6      	bcs.n	800cca8 <quorem+0xa4>
 800ccda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cce2:	b922      	cbnz	r2, 800ccee <quorem+0xea>
 800cce4:	3b04      	subs	r3, #4
 800cce6:	429d      	cmp	r5, r3
 800cce8:	461a      	mov	r2, r3
 800ccea:	d30b      	bcc.n	800cd04 <quorem+0x100>
 800ccec:	613c      	str	r4, [r7, #16]
 800ccee:	3601      	adds	r6, #1
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	b003      	add	sp, #12
 800ccf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf8:	6812      	ldr	r2, [r2, #0]
 800ccfa:	3b04      	subs	r3, #4
 800ccfc:	2a00      	cmp	r2, #0
 800ccfe:	d1cb      	bne.n	800cc98 <quorem+0x94>
 800cd00:	3c01      	subs	r4, #1
 800cd02:	e7c6      	b.n	800cc92 <quorem+0x8e>
 800cd04:	6812      	ldr	r2, [r2, #0]
 800cd06:	3b04      	subs	r3, #4
 800cd08:	2a00      	cmp	r2, #0
 800cd0a:	d1ef      	bne.n	800ccec <quorem+0xe8>
 800cd0c:	3c01      	subs	r4, #1
 800cd0e:	e7ea      	b.n	800cce6 <quorem+0xe2>
 800cd10:	2000      	movs	r0, #0
 800cd12:	e7ee      	b.n	800ccf2 <quorem+0xee>
 800cd14:	0000      	movs	r0, r0
	...

0800cd18 <_dtoa_r>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	ed2d 8b02 	vpush	{d8}
 800cd20:	69c7      	ldr	r7, [r0, #28]
 800cd22:	b091      	sub	sp, #68	@ 0x44
 800cd24:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cd28:	ec55 4b10 	vmov	r4, r5, d0
 800cd2c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800cd2e:	9107      	str	r1, [sp, #28]
 800cd30:	4681      	mov	r9, r0
 800cd32:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd34:	930d      	str	r3, [sp, #52]	@ 0x34
 800cd36:	b97f      	cbnz	r7, 800cd58 <_dtoa_r+0x40>
 800cd38:	2010      	movs	r0, #16
 800cd3a:	f000 fd8d 	bl	800d858 <malloc>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	f8c9 001c 	str.w	r0, [r9, #28]
 800cd44:	b920      	cbnz	r0, 800cd50 <_dtoa_r+0x38>
 800cd46:	4ba0      	ldr	r3, [pc, #640]	@ (800cfc8 <_dtoa_r+0x2b0>)
 800cd48:	21ef      	movs	r1, #239	@ 0xef
 800cd4a:	48a0      	ldr	r0, [pc, #640]	@ (800cfcc <_dtoa_r+0x2b4>)
 800cd4c:	f002 fd2c 	bl	800f7a8 <__assert_func>
 800cd50:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cd54:	6007      	str	r7, [r0, #0]
 800cd56:	60c7      	str	r7, [r0, #12]
 800cd58:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd5c:	6819      	ldr	r1, [r3, #0]
 800cd5e:	b159      	cbz	r1, 800cd78 <_dtoa_r+0x60>
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	604a      	str	r2, [r1, #4]
 800cd64:	2301      	movs	r3, #1
 800cd66:	4093      	lsls	r3, r2
 800cd68:	608b      	str	r3, [r1, #8]
 800cd6a:	4648      	mov	r0, r9
 800cd6c:	f000 fe6a 	bl	800da44 <_Bfree>
 800cd70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd74:	2200      	movs	r2, #0
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	1e2b      	subs	r3, r5, #0
 800cd7a:	bfbb      	ittet	lt
 800cd7c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cd80:	9303      	strlt	r3, [sp, #12]
 800cd82:	2300      	movge	r3, #0
 800cd84:	2201      	movlt	r2, #1
 800cd86:	bfac      	ite	ge
 800cd88:	6033      	strge	r3, [r6, #0]
 800cd8a:	6032      	strlt	r2, [r6, #0]
 800cd8c:	4b90      	ldr	r3, [pc, #576]	@ (800cfd0 <_dtoa_r+0x2b8>)
 800cd8e:	9e03      	ldr	r6, [sp, #12]
 800cd90:	43b3      	bics	r3, r6
 800cd92:	d110      	bne.n	800cdb6 <_dtoa_r+0x9e>
 800cd94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd96:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cda0:	4323      	orrs	r3, r4
 800cda2:	f000 84de 	beq.w	800d762 <_dtoa_r+0xa4a>
 800cda6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cda8:	4f8a      	ldr	r7, [pc, #552]	@ (800cfd4 <_dtoa_r+0x2bc>)
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 84e0 	beq.w	800d770 <_dtoa_r+0xa58>
 800cdb0:	1cfb      	adds	r3, r7, #3
 800cdb2:	f000 bcdb 	b.w	800d76c <_dtoa_r+0xa54>
 800cdb6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cdba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cdbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc2:	d10a      	bne.n	800cdda <_dtoa_r+0xc2>
 800cdc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	6013      	str	r3, [r2, #0]
 800cdca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdcc:	b113      	cbz	r3, 800cdd4 <_dtoa_r+0xbc>
 800cdce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cdd0:	4b81      	ldr	r3, [pc, #516]	@ (800cfd8 <_dtoa_r+0x2c0>)
 800cdd2:	6013      	str	r3, [r2, #0]
 800cdd4:	4f81      	ldr	r7, [pc, #516]	@ (800cfdc <_dtoa_r+0x2c4>)
 800cdd6:	f000 bccb 	b.w	800d770 <_dtoa_r+0xa58>
 800cdda:	aa0e      	add	r2, sp, #56	@ 0x38
 800cddc:	a90f      	add	r1, sp, #60	@ 0x3c
 800cdde:	4648      	mov	r0, r9
 800cde0:	eeb0 0b48 	vmov.f64	d0, d8
 800cde4:	f001 f9d2 	bl	800e18c <__d2b>
 800cde8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cdec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdee:	9001      	str	r0, [sp, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d045      	beq.n	800ce80 <_dtoa_r+0x168>
 800cdf4:	eeb0 7b48 	vmov.f64	d7, d8
 800cdf8:	ee18 1a90 	vmov	r1, s17
 800cdfc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ce00:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ce04:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ce08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ce0c:	2500      	movs	r5, #0
 800ce0e:	ee07 1a90 	vmov	s15, r1
 800ce12:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ce16:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cfb0 <_dtoa_r+0x298>
 800ce1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce1e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800cfb8 <_dtoa_r+0x2a0>
 800ce22:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ce26:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cfc0 <_dtoa_r+0x2a8>
 800ce2a:	ee07 3a90 	vmov	s15, r3
 800ce2e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ce32:	eeb0 7b46 	vmov.f64	d7, d6
 800ce36:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ce3a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ce3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ce42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce46:	ee16 8a90 	vmov	r8, s13
 800ce4a:	d508      	bpl.n	800ce5e <_dtoa_r+0x146>
 800ce4c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ce50:	eeb4 6b47 	vcmp.f64	d6, d7
 800ce54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce58:	bf18      	it	ne
 800ce5a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ce5e:	f1b8 0f16 	cmp.w	r8, #22
 800ce62:	d82b      	bhi.n	800cebc <_dtoa_r+0x1a4>
 800ce64:	495e      	ldr	r1, [pc, #376]	@ (800cfe0 <_dtoa_r+0x2c8>)
 800ce66:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ce6a:	ed91 7b00 	vldr	d7, [r1]
 800ce6e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ce72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce76:	d501      	bpl.n	800ce7c <_dtoa_r+0x164>
 800ce78:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	e01e      	b.n	800cebe <_dtoa_r+0x1a6>
 800ce80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce82:	4413      	add	r3, r2
 800ce84:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ce88:	2920      	cmp	r1, #32
 800ce8a:	bfc1      	itttt	gt
 800ce8c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ce90:	408e      	lslgt	r6, r1
 800ce92:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ce96:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ce9a:	bfd6      	itet	le
 800ce9c:	f1c1 0120 	rsble	r1, r1, #32
 800cea0:	4331      	orrgt	r1, r6
 800cea2:	fa04 f101 	lslle.w	r1, r4, r1
 800cea6:	ee07 1a90 	vmov	s15, r1
 800ceaa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	ee17 1a90 	vmov	r1, s15
 800ceb4:	2501      	movs	r5, #1
 800ceb6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ceba:	e7a8      	b.n	800ce0e <_dtoa_r+0xf6>
 800cebc:	2101      	movs	r1, #1
 800cebe:	1ad2      	subs	r2, r2, r3
 800cec0:	1e53      	subs	r3, r2, #1
 800cec2:	9306      	str	r3, [sp, #24]
 800cec4:	bf45      	ittet	mi
 800cec6:	f1c2 0301 	rsbmi	r3, r2, #1
 800ceca:	9305      	strmi	r3, [sp, #20]
 800cecc:	2300      	movpl	r3, #0
 800cece:	2300      	movmi	r3, #0
 800ced0:	bf4c      	ite	mi
 800ced2:	9306      	strmi	r3, [sp, #24]
 800ced4:	9305      	strpl	r3, [sp, #20]
 800ced6:	f1b8 0f00 	cmp.w	r8, #0
 800ceda:	910c      	str	r1, [sp, #48]	@ 0x30
 800cedc:	db18      	blt.n	800cf10 <_dtoa_r+0x1f8>
 800cede:	9b06      	ldr	r3, [sp, #24]
 800cee0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800cee4:	4443      	add	r3, r8
 800cee6:	9306      	str	r3, [sp, #24]
 800cee8:	2300      	movs	r3, #0
 800ceea:	9a07      	ldr	r2, [sp, #28]
 800ceec:	2a09      	cmp	r2, #9
 800ceee:	d849      	bhi.n	800cf84 <_dtoa_r+0x26c>
 800cef0:	2a05      	cmp	r2, #5
 800cef2:	bfc4      	itt	gt
 800cef4:	3a04      	subgt	r2, #4
 800cef6:	9207      	strgt	r2, [sp, #28]
 800cef8:	9a07      	ldr	r2, [sp, #28]
 800cefa:	f1a2 0202 	sub.w	r2, r2, #2
 800cefe:	bfcc      	ite	gt
 800cf00:	2400      	movgt	r4, #0
 800cf02:	2401      	movle	r4, #1
 800cf04:	2a03      	cmp	r2, #3
 800cf06:	d848      	bhi.n	800cf9a <_dtoa_r+0x282>
 800cf08:	e8df f002 	tbb	[pc, r2]
 800cf0c:	3a2c2e0b 	.word	0x3a2c2e0b
 800cf10:	9b05      	ldr	r3, [sp, #20]
 800cf12:	2200      	movs	r2, #0
 800cf14:	eba3 0308 	sub.w	r3, r3, r8
 800cf18:	9305      	str	r3, [sp, #20]
 800cf1a:	920a      	str	r2, [sp, #40]	@ 0x28
 800cf1c:	f1c8 0300 	rsb	r3, r8, #0
 800cf20:	e7e3      	b.n	800ceea <_dtoa_r+0x1d2>
 800cf22:	2200      	movs	r2, #0
 800cf24:	9208      	str	r2, [sp, #32]
 800cf26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf28:	2a00      	cmp	r2, #0
 800cf2a:	dc39      	bgt.n	800cfa0 <_dtoa_r+0x288>
 800cf2c:	f04f 0b01 	mov.w	fp, #1
 800cf30:	46da      	mov	sl, fp
 800cf32:	465a      	mov	r2, fp
 800cf34:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800cf38:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	2004      	movs	r0, #4
 800cf40:	f100 0614 	add.w	r6, r0, #20
 800cf44:	4296      	cmp	r6, r2
 800cf46:	d930      	bls.n	800cfaa <_dtoa_r+0x292>
 800cf48:	6079      	str	r1, [r7, #4]
 800cf4a:	4648      	mov	r0, r9
 800cf4c:	9304      	str	r3, [sp, #16]
 800cf4e:	f000 fd39 	bl	800d9c4 <_Balloc>
 800cf52:	9b04      	ldr	r3, [sp, #16]
 800cf54:	4607      	mov	r7, r0
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d146      	bne.n	800cfe8 <_dtoa_r+0x2d0>
 800cf5a:	4b22      	ldr	r3, [pc, #136]	@ (800cfe4 <_dtoa_r+0x2cc>)
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	f240 11af 	movw	r1, #431	@ 0x1af
 800cf62:	e6f2      	b.n	800cd4a <_dtoa_r+0x32>
 800cf64:	2201      	movs	r2, #1
 800cf66:	e7dd      	b.n	800cf24 <_dtoa_r+0x20c>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	9208      	str	r2, [sp, #32]
 800cf6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf6e:	eb08 0b02 	add.w	fp, r8, r2
 800cf72:	f10b 0a01 	add.w	sl, fp, #1
 800cf76:	4652      	mov	r2, sl
 800cf78:	2a01      	cmp	r2, #1
 800cf7a:	bfb8      	it	lt
 800cf7c:	2201      	movlt	r2, #1
 800cf7e:	e7db      	b.n	800cf38 <_dtoa_r+0x220>
 800cf80:	2201      	movs	r2, #1
 800cf82:	e7f2      	b.n	800cf6a <_dtoa_r+0x252>
 800cf84:	2401      	movs	r4, #1
 800cf86:	2200      	movs	r2, #0
 800cf88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cf8c:	f04f 3bff 	mov.w	fp, #4294967295
 800cf90:	2100      	movs	r1, #0
 800cf92:	46da      	mov	sl, fp
 800cf94:	2212      	movs	r2, #18
 800cf96:	9109      	str	r1, [sp, #36]	@ 0x24
 800cf98:	e7ce      	b.n	800cf38 <_dtoa_r+0x220>
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	9208      	str	r2, [sp, #32]
 800cf9e:	e7f5      	b.n	800cf8c <_dtoa_r+0x274>
 800cfa0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800cfa4:	46da      	mov	sl, fp
 800cfa6:	465a      	mov	r2, fp
 800cfa8:	e7c6      	b.n	800cf38 <_dtoa_r+0x220>
 800cfaa:	3101      	adds	r1, #1
 800cfac:	0040      	lsls	r0, r0, #1
 800cfae:	e7c7      	b.n	800cf40 <_dtoa_r+0x228>
 800cfb0:	636f4361 	.word	0x636f4361
 800cfb4:	3fd287a7 	.word	0x3fd287a7
 800cfb8:	8b60c8b3 	.word	0x8b60c8b3
 800cfbc:	3fc68a28 	.word	0x3fc68a28
 800cfc0:	509f79fb 	.word	0x509f79fb
 800cfc4:	3fd34413 	.word	0x3fd34413
 800cfc8:	0801022e 	.word	0x0801022e
 800cfcc:	08010245 	.word	0x08010245
 800cfd0:	7ff00000 	.word	0x7ff00000
 800cfd4:	0801022a 	.word	0x0801022a
 800cfd8:	080101f9 	.word	0x080101f9
 800cfdc:	080101f8 	.word	0x080101f8
 800cfe0:	08010340 	.word	0x08010340
 800cfe4:	0801029d 	.word	0x0801029d
 800cfe8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800cfec:	f1ba 0f0e 	cmp.w	sl, #14
 800cff0:	6010      	str	r0, [r2, #0]
 800cff2:	d86f      	bhi.n	800d0d4 <_dtoa_r+0x3bc>
 800cff4:	2c00      	cmp	r4, #0
 800cff6:	d06d      	beq.n	800d0d4 <_dtoa_r+0x3bc>
 800cff8:	f1b8 0f00 	cmp.w	r8, #0
 800cffc:	f340 80c2 	ble.w	800d184 <_dtoa_r+0x46c>
 800d000:	4aca      	ldr	r2, [pc, #808]	@ (800d32c <_dtoa_r+0x614>)
 800d002:	f008 010f 	and.w	r1, r8, #15
 800d006:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d00a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d00e:	ed92 7b00 	vldr	d7, [r2]
 800d012:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d016:	f000 80a9 	beq.w	800d16c <_dtoa_r+0x454>
 800d01a:	4ac5      	ldr	r2, [pc, #788]	@ (800d330 <_dtoa_r+0x618>)
 800d01c:	ed92 6b08 	vldr	d6, [r2, #32]
 800d020:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d024:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d028:	f001 010f 	and.w	r1, r1, #15
 800d02c:	2203      	movs	r2, #3
 800d02e:	48c0      	ldr	r0, [pc, #768]	@ (800d330 <_dtoa_r+0x618>)
 800d030:	2900      	cmp	r1, #0
 800d032:	f040 809d 	bne.w	800d170 <_dtoa_r+0x458>
 800d036:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d03a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d03e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d042:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d044:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d048:	2900      	cmp	r1, #0
 800d04a:	f000 80c1 	beq.w	800d1d0 <_dtoa_r+0x4b8>
 800d04e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d052:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d05a:	f140 80b9 	bpl.w	800d1d0 <_dtoa_r+0x4b8>
 800d05e:	f1ba 0f00 	cmp.w	sl, #0
 800d062:	f000 80b5 	beq.w	800d1d0 <_dtoa_r+0x4b8>
 800d066:	f1bb 0f00 	cmp.w	fp, #0
 800d06a:	dd31      	ble.n	800d0d0 <_dtoa_r+0x3b8>
 800d06c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d070:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d074:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d078:	f108 31ff 	add.w	r1, r8, #4294967295
 800d07c:	9104      	str	r1, [sp, #16]
 800d07e:	3201      	adds	r2, #1
 800d080:	465c      	mov	r4, fp
 800d082:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d086:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d08a:	ee07 2a90 	vmov	s15, r2
 800d08e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d092:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d096:	ee15 2a90 	vmov	r2, s11
 800d09a:	ec51 0b15 	vmov	r0, r1, d5
 800d09e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d0a2:	2c00      	cmp	r4, #0
 800d0a4:	f040 8098 	bne.w	800d1d8 <_dtoa_r+0x4c0>
 800d0a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d0ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d0b0:	ec41 0b17 	vmov	d7, r0, r1
 800d0b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0bc:	f300 8261 	bgt.w	800d582 <_dtoa_r+0x86a>
 800d0c0:	eeb1 7b47 	vneg.f64	d7, d7
 800d0c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0cc:	f100 80f5 	bmi.w	800d2ba <_dtoa_r+0x5a2>
 800d0d0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d0d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0d6:	2a00      	cmp	r2, #0
 800d0d8:	f2c0 812c 	blt.w	800d334 <_dtoa_r+0x61c>
 800d0dc:	f1b8 0f0e 	cmp.w	r8, #14
 800d0e0:	f300 8128 	bgt.w	800d334 <_dtoa_r+0x61c>
 800d0e4:	4b91      	ldr	r3, [pc, #580]	@ (800d32c <_dtoa_r+0x614>)
 800d0e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d0ea:	ed93 6b00 	vldr	d6, [r3]
 800d0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	da03      	bge.n	800d0fc <_dtoa_r+0x3e4>
 800d0f4:	f1ba 0f00 	cmp.w	sl, #0
 800d0f8:	f340 80d2 	ble.w	800d2a0 <_dtoa_r+0x588>
 800d0fc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d100:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d104:	463e      	mov	r6, r7
 800d106:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d10a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d10e:	ee15 3a10 	vmov	r3, s10
 800d112:	3330      	adds	r3, #48	@ 0x30
 800d114:	f806 3b01 	strb.w	r3, [r6], #1
 800d118:	1bf3      	subs	r3, r6, r7
 800d11a:	459a      	cmp	sl, r3
 800d11c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d120:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d124:	f040 80f8 	bne.w	800d318 <_dtoa_r+0x600>
 800d128:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d12c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d134:	f300 80dd 	bgt.w	800d2f2 <_dtoa_r+0x5da>
 800d138:	eeb4 7b46 	vcmp.f64	d7, d6
 800d13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d140:	d104      	bne.n	800d14c <_dtoa_r+0x434>
 800d142:	ee15 3a10 	vmov	r3, s10
 800d146:	07db      	lsls	r3, r3, #31
 800d148:	f100 80d3 	bmi.w	800d2f2 <_dtoa_r+0x5da>
 800d14c:	9901      	ldr	r1, [sp, #4]
 800d14e:	4648      	mov	r0, r9
 800d150:	f000 fc78 	bl	800da44 <_Bfree>
 800d154:	2300      	movs	r3, #0
 800d156:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d158:	7033      	strb	r3, [r6, #0]
 800d15a:	f108 0301 	add.w	r3, r8, #1
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 8304 	beq.w	800d770 <_dtoa_r+0xa58>
 800d168:	601e      	str	r6, [r3, #0]
 800d16a:	e301      	b.n	800d770 <_dtoa_r+0xa58>
 800d16c:	2202      	movs	r2, #2
 800d16e:	e75e      	b.n	800d02e <_dtoa_r+0x316>
 800d170:	07cc      	lsls	r4, r1, #31
 800d172:	d504      	bpl.n	800d17e <_dtoa_r+0x466>
 800d174:	ed90 6b00 	vldr	d6, [r0]
 800d178:	3201      	adds	r2, #1
 800d17a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d17e:	1049      	asrs	r1, r1, #1
 800d180:	3008      	adds	r0, #8
 800d182:	e755      	b.n	800d030 <_dtoa_r+0x318>
 800d184:	d022      	beq.n	800d1cc <_dtoa_r+0x4b4>
 800d186:	f1c8 0100 	rsb	r1, r8, #0
 800d18a:	4a68      	ldr	r2, [pc, #416]	@ (800d32c <_dtoa_r+0x614>)
 800d18c:	f001 000f 	and.w	r0, r1, #15
 800d190:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d194:	ed92 7b00 	vldr	d7, [r2]
 800d198:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d19c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1a0:	4863      	ldr	r0, [pc, #396]	@ (800d330 <_dtoa_r+0x618>)
 800d1a2:	1109      	asrs	r1, r1, #4
 800d1a4:	2400      	movs	r4, #0
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	b929      	cbnz	r1, 800d1b6 <_dtoa_r+0x49e>
 800d1aa:	2c00      	cmp	r4, #0
 800d1ac:	f43f af49 	beq.w	800d042 <_dtoa_r+0x32a>
 800d1b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1b4:	e745      	b.n	800d042 <_dtoa_r+0x32a>
 800d1b6:	07ce      	lsls	r6, r1, #31
 800d1b8:	d505      	bpl.n	800d1c6 <_dtoa_r+0x4ae>
 800d1ba:	ed90 6b00 	vldr	d6, [r0]
 800d1be:	3201      	adds	r2, #1
 800d1c0:	2401      	movs	r4, #1
 800d1c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1c6:	1049      	asrs	r1, r1, #1
 800d1c8:	3008      	adds	r0, #8
 800d1ca:	e7ed      	b.n	800d1a8 <_dtoa_r+0x490>
 800d1cc:	2202      	movs	r2, #2
 800d1ce:	e738      	b.n	800d042 <_dtoa_r+0x32a>
 800d1d0:	f8cd 8010 	str.w	r8, [sp, #16]
 800d1d4:	4654      	mov	r4, sl
 800d1d6:	e754      	b.n	800d082 <_dtoa_r+0x36a>
 800d1d8:	4a54      	ldr	r2, [pc, #336]	@ (800d32c <_dtoa_r+0x614>)
 800d1da:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d1de:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d1e2:	9a08      	ldr	r2, [sp, #32]
 800d1e4:	ec41 0b17 	vmov	d7, r0, r1
 800d1e8:	443c      	add	r4, r7
 800d1ea:	b34a      	cbz	r2, 800d240 <_dtoa_r+0x528>
 800d1ec:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d1f0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d1f4:	463e      	mov	r6, r7
 800d1f6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d1fa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d1fe:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d202:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d206:	ee14 2a90 	vmov	r2, s9
 800d20a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d20e:	3230      	adds	r2, #48	@ 0x30
 800d210:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d214:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21c:	f806 2b01 	strb.w	r2, [r6], #1
 800d220:	d438      	bmi.n	800d294 <_dtoa_r+0x57c>
 800d222:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d226:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22e:	d462      	bmi.n	800d2f6 <_dtoa_r+0x5de>
 800d230:	42a6      	cmp	r6, r4
 800d232:	f43f af4d 	beq.w	800d0d0 <_dtoa_r+0x3b8>
 800d236:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d23a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d23e:	e7e0      	b.n	800d202 <_dtoa_r+0x4ea>
 800d240:	4621      	mov	r1, r4
 800d242:	463e      	mov	r6, r7
 800d244:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d248:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d24c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d250:	ee14 2a90 	vmov	r2, s9
 800d254:	3230      	adds	r2, #48	@ 0x30
 800d256:	f806 2b01 	strb.w	r2, [r6], #1
 800d25a:	42a6      	cmp	r6, r4
 800d25c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d260:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d264:	d119      	bne.n	800d29a <_dtoa_r+0x582>
 800d266:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d26a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d26e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d276:	dc3e      	bgt.n	800d2f6 <_dtoa_r+0x5de>
 800d278:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d27c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d284:	f57f af24 	bpl.w	800d0d0 <_dtoa_r+0x3b8>
 800d288:	460e      	mov	r6, r1
 800d28a:	3901      	subs	r1, #1
 800d28c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d290:	2b30      	cmp	r3, #48	@ 0x30
 800d292:	d0f9      	beq.n	800d288 <_dtoa_r+0x570>
 800d294:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d298:	e758      	b.n	800d14c <_dtoa_r+0x434>
 800d29a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d29e:	e7d5      	b.n	800d24c <_dtoa_r+0x534>
 800d2a0:	d10b      	bne.n	800d2ba <_dtoa_r+0x5a2>
 800d2a2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d2a6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d2aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b6:	f2c0 8161 	blt.w	800d57c <_dtoa_r+0x864>
 800d2ba:	2400      	movs	r4, #0
 800d2bc:	4625      	mov	r5, r4
 800d2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2c0:	43db      	mvns	r3, r3
 800d2c2:	9304      	str	r3, [sp, #16]
 800d2c4:	463e      	mov	r6, r7
 800d2c6:	f04f 0800 	mov.w	r8, #0
 800d2ca:	4621      	mov	r1, r4
 800d2cc:	4648      	mov	r0, r9
 800d2ce:	f000 fbb9 	bl	800da44 <_Bfree>
 800d2d2:	2d00      	cmp	r5, #0
 800d2d4:	d0de      	beq.n	800d294 <_dtoa_r+0x57c>
 800d2d6:	f1b8 0f00 	cmp.w	r8, #0
 800d2da:	d005      	beq.n	800d2e8 <_dtoa_r+0x5d0>
 800d2dc:	45a8      	cmp	r8, r5
 800d2de:	d003      	beq.n	800d2e8 <_dtoa_r+0x5d0>
 800d2e0:	4641      	mov	r1, r8
 800d2e2:	4648      	mov	r0, r9
 800d2e4:	f000 fbae 	bl	800da44 <_Bfree>
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	4648      	mov	r0, r9
 800d2ec:	f000 fbaa 	bl	800da44 <_Bfree>
 800d2f0:	e7d0      	b.n	800d294 <_dtoa_r+0x57c>
 800d2f2:	f8cd 8010 	str.w	r8, [sp, #16]
 800d2f6:	4633      	mov	r3, r6
 800d2f8:	461e      	mov	r6, r3
 800d2fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2fe:	2a39      	cmp	r2, #57	@ 0x39
 800d300:	d106      	bne.n	800d310 <_dtoa_r+0x5f8>
 800d302:	429f      	cmp	r7, r3
 800d304:	d1f8      	bne.n	800d2f8 <_dtoa_r+0x5e0>
 800d306:	9a04      	ldr	r2, [sp, #16]
 800d308:	3201      	adds	r2, #1
 800d30a:	9204      	str	r2, [sp, #16]
 800d30c:	2230      	movs	r2, #48	@ 0x30
 800d30e:	703a      	strb	r2, [r7, #0]
 800d310:	781a      	ldrb	r2, [r3, #0]
 800d312:	3201      	adds	r2, #1
 800d314:	701a      	strb	r2, [r3, #0]
 800d316:	e7bd      	b.n	800d294 <_dtoa_r+0x57c>
 800d318:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d31c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d324:	f47f aeef 	bne.w	800d106 <_dtoa_r+0x3ee>
 800d328:	e710      	b.n	800d14c <_dtoa_r+0x434>
 800d32a:	bf00      	nop
 800d32c:	08010340 	.word	0x08010340
 800d330:	08010318 	.word	0x08010318
 800d334:	9908      	ldr	r1, [sp, #32]
 800d336:	2900      	cmp	r1, #0
 800d338:	f000 80e3 	beq.w	800d502 <_dtoa_r+0x7ea>
 800d33c:	9907      	ldr	r1, [sp, #28]
 800d33e:	2901      	cmp	r1, #1
 800d340:	f300 80c8 	bgt.w	800d4d4 <_dtoa_r+0x7bc>
 800d344:	2d00      	cmp	r5, #0
 800d346:	f000 80c1 	beq.w	800d4cc <_dtoa_r+0x7b4>
 800d34a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d34e:	9e05      	ldr	r6, [sp, #20]
 800d350:	461c      	mov	r4, r3
 800d352:	9304      	str	r3, [sp, #16]
 800d354:	9b05      	ldr	r3, [sp, #20]
 800d356:	4413      	add	r3, r2
 800d358:	9305      	str	r3, [sp, #20]
 800d35a:	9b06      	ldr	r3, [sp, #24]
 800d35c:	2101      	movs	r1, #1
 800d35e:	4413      	add	r3, r2
 800d360:	4648      	mov	r0, r9
 800d362:	9306      	str	r3, [sp, #24]
 800d364:	f000 fc6c 	bl	800dc40 <__i2b>
 800d368:	9b04      	ldr	r3, [sp, #16]
 800d36a:	4605      	mov	r5, r0
 800d36c:	b166      	cbz	r6, 800d388 <_dtoa_r+0x670>
 800d36e:	9a06      	ldr	r2, [sp, #24]
 800d370:	2a00      	cmp	r2, #0
 800d372:	dd09      	ble.n	800d388 <_dtoa_r+0x670>
 800d374:	42b2      	cmp	r2, r6
 800d376:	9905      	ldr	r1, [sp, #20]
 800d378:	bfa8      	it	ge
 800d37a:	4632      	movge	r2, r6
 800d37c:	1a89      	subs	r1, r1, r2
 800d37e:	9105      	str	r1, [sp, #20]
 800d380:	9906      	ldr	r1, [sp, #24]
 800d382:	1ab6      	subs	r6, r6, r2
 800d384:	1a8a      	subs	r2, r1, r2
 800d386:	9206      	str	r2, [sp, #24]
 800d388:	b1fb      	cbz	r3, 800d3ca <_dtoa_r+0x6b2>
 800d38a:	9a08      	ldr	r2, [sp, #32]
 800d38c:	2a00      	cmp	r2, #0
 800d38e:	f000 80bc 	beq.w	800d50a <_dtoa_r+0x7f2>
 800d392:	b19c      	cbz	r4, 800d3bc <_dtoa_r+0x6a4>
 800d394:	4629      	mov	r1, r5
 800d396:	4622      	mov	r2, r4
 800d398:	4648      	mov	r0, r9
 800d39a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d39c:	f000 fd10 	bl	800ddc0 <__pow5mult>
 800d3a0:	9a01      	ldr	r2, [sp, #4]
 800d3a2:	4601      	mov	r1, r0
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	4648      	mov	r0, r9
 800d3a8:	f000 fc60 	bl	800dc6c <__multiply>
 800d3ac:	9901      	ldr	r1, [sp, #4]
 800d3ae:	9004      	str	r0, [sp, #16]
 800d3b0:	4648      	mov	r0, r9
 800d3b2:	f000 fb47 	bl	800da44 <_Bfree>
 800d3b6:	9a04      	ldr	r2, [sp, #16]
 800d3b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3ba:	9201      	str	r2, [sp, #4]
 800d3bc:	1b1a      	subs	r2, r3, r4
 800d3be:	d004      	beq.n	800d3ca <_dtoa_r+0x6b2>
 800d3c0:	9901      	ldr	r1, [sp, #4]
 800d3c2:	4648      	mov	r0, r9
 800d3c4:	f000 fcfc 	bl	800ddc0 <__pow5mult>
 800d3c8:	9001      	str	r0, [sp, #4]
 800d3ca:	2101      	movs	r1, #1
 800d3cc:	4648      	mov	r0, r9
 800d3ce:	f000 fc37 	bl	800dc40 <__i2b>
 800d3d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 81d0 	beq.w	800d77c <_dtoa_r+0xa64>
 800d3dc:	461a      	mov	r2, r3
 800d3de:	4601      	mov	r1, r0
 800d3e0:	4648      	mov	r0, r9
 800d3e2:	f000 fced 	bl	800ddc0 <__pow5mult>
 800d3e6:	9b07      	ldr	r3, [sp, #28]
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	f300 8095 	bgt.w	800d51a <_dtoa_r+0x802>
 800d3f0:	9b02      	ldr	r3, [sp, #8]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f040 808b 	bne.w	800d50e <_dtoa_r+0x7f6>
 800d3f8:	9b03      	ldr	r3, [sp, #12]
 800d3fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d3fe:	2a00      	cmp	r2, #0
 800d400:	f040 8087 	bne.w	800d512 <_dtoa_r+0x7fa>
 800d404:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d408:	0d12      	lsrs	r2, r2, #20
 800d40a:	0512      	lsls	r2, r2, #20
 800d40c:	2a00      	cmp	r2, #0
 800d40e:	f000 8082 	beq.w	800d516 <_dtoa_r+0x7fe>
 800d412:	9b05      	ldr	r3, [sp, #20]
 800d414:	3301      	adds	r3, #1
 800d416:	9305      	str	r3, [sp, #20]
 800d418:	9b06      	ldr	r3, [sp, #24]
 800d41a:	3301      	adds	r3, #1
 800d41c:	9306      	str	r3, [sp, #24]
 800d41e:	2301      	movs	r3, #1
 800d420:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 81af 	beq.w	800d788 <_dtoa_r+0xa70>
 800d42a:	6922      	ldr	r2, [r4, #16]
 800d42c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d430:	6910      	ldr	r0, [r2, #16]
 800d432:	f000 fbb9 	bl	800dba8 <__hi0bits>
 800d436:	f1c0 0020 	rsb	r0, r0, #32
 800d43a:	9b06      	ldr	r3, [sp, #24]
 800d43c:	4418      	add	r0, r3
 800d43e:	f010 001f 	ands.w	r0, r0, #31
 800d442:	d076      	beq.n	800d532 <_dtoa_r+0x81a>
 800d444:	f1c0 0220 	rsb	r2, r0, #32
 800d448:	2a04      	cmp	r2, #4
 800d44a:	dd69      	ble.n	800d520 <_dtoa_r+0x808>
 800d44c:	9b05      	ldr	r3, [sp, #20]
 800d44e:	f1c0 001c 	rsb	r0, r0, #28
 800d452:	4403      	add	r3, r0
 800d454:	9305      	str	r3, [sp, #20]
 800d456:	9b06      	ldr	r3, [sp, #24]
 800d458:	4406      	add	r6, r0
 800d45a:	4403      	add	r3, r0
 800d45c:	9306      	str	r3, [sp, #24]
 800d45e:	9b05      	ldr	r3, [sp, #20]
 800d460:	2b00      	cmp	r3, #0
 800d462:	dd05      	ble.n	800d470 <_dtoa_r+0x758>
 800d464:	9901      	ldr	r1, [sp, #4]
 800d466:	461a      	mov	r2, r3
 800d468:	4648      	mov	r0, r9
 800d46a:	f000 fd03 	bl	800de74 <__lshift>
 800d46e:	9001      	str	r0, [sp, #4]
 800d470:	9b06      	ldr	r3, [sp, #24]
 800d472:	2b00      	cmp	r3, #0
 800d474:	dd05      	ble.n	800d482 <_dtoa_r+0x76a>
 800d476:	4621      	mov	r1, r4
 800d478:	461a      	mov	r2, r3
 800d47a:	4648      	mov	r0, r9
 800d47c:	f000 fcfa 	bl	800de74 <__lshift>
 800d480:	4604      	mov	r4, r0
 800d482:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d484:	2b00      	cmp	r3, #0
 800d486:	d056      	beq.n	800d536 <_dtoa_r+0x81e>
 800d488:	9801      	ldr	r0, [sp, #4]
 800d48a:	4621      	mov	r1, r4
 800d48c:	f000 fd5e 	bl	800df4c <__mcmp>
 800d490:	2800      	cmp	r0, #0
 800d492:	da50      	bge.n	800d536 <_dtoa_r+0x81e>
 800d494:	f108 33ff 	add.w	r3, r8, #4294967295
 800d498:	9304      	str	r3, [sp, #16]
 800d49a:	9901      	ldr	r1, [sp, #4]
 800d49c:	2300      	movs	r3, #0
 800d49e:	220a      	movs	r2, #10
 800d4a0:	4648      	mov	r0, r9
 800d4a2:	f000 faf1 	bl	800da88 <__multadd>
 800d4a6:	9b08      	ldr	r3, [sp, #32]
 800d4a8:	9001      	str	r0, [sp, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f000 816e 	beq.w	800d78c <_dtoa_r+0xa74>
 800d4b0:	4629      	mov	r1, r5
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	220a      	movs	r2, #10
 800d4b6:	4648      	mov	r0, r9
 800d4b8:	f000 fae6 	bl	800da88 <__multadd>
 800d4bc:	f1bb 0f00 	cmp.w	fp, #0
 800d4c0:	4605      	mov	r5, r0
 800d4c2:	dc64      	bgt.n	800d58e <_dtoa_r+0x876>
 800d4c4:	9b07      	ldr	r3, [sp, #28]
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	dc3e      	bgt.n	800d548 <_dtoa_r+0x830>
 800d4ca:	e060      	b.n	800d58e <_dtoa_r+0x876>
 800d4cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d4d2:	e73c      	b.n	800d34e <_dtoa_r+0x636>
 800d4d4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d4d8:	42a3      	cmp	r3, r4
 800d4da:	bfbf      	itttt	lt
 800d4dc:	1ae2      	sublt	r2, r4, r3
 800d4de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d4e0:	189b      	addlt	r3, r3, r2
 800d4e2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d4e4:	bfae      	itee	ge
 800d4e6:	1b1c      	subge	r4, r3, r4
 800d4e8:	4623      	movlt	r3, r4
 800d4ea:	2400      	movlt	r4, #0
 800d4ec:	f1ba 0f00 	cmp.w	sl, #0
 800d4f0:	bfb5      	itete	lt
 800d4f2:	9a05      	ldrlt	r2, [sp, #20]
 800d4f4:	9e05      	ldrge	r6, [sp, #20]
 800d4f6:	eba2 060a 	sublt.w	r6, r2, sl
 800d4fa:	4652      	movge	r2, sl
 800d4fc:	bfb8      	it	lt
 800d4fe:	2200      	movlt	r2, #0
 800d500:	e727      	b.n	800d352 <_dtoa_r+0x63a>
 800d502:	9e05      	ldr	r6, [sp, #20]
 800d504:	9d08      	ldr	r5, [sp, #32]
 800d506:	461c      	mov	r4, r3
 800d508:	e730      	b.n	800d36c <_dtoa_r+0x654>
 800d50a:	461a      	mov	r2, r3
 800d50c:	e758      	b.n	800d3c0 <_dtoa_r+0x6a8>
 800d50e:	2300      	movs	r3, #0
 800d510:	e786      	b.n	800d420 <_dtoa_r+0x708>
 800d512:	9b02      	ldr	r3, [sp, #8]
 800d514:	e784      	b.n	800d420 <_dtoa_r+0x708>
 800d516:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d518:	e783      	b.n	800d422 <_dtoa_r+0x70a>
 800d51a:	2300      	movs	r3, #0
 800d51c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d51e:	e784      	b.n	800d42a <_dtoa_r+0x712>
 800d520:	d09d      	beq.n	800d45e <_dtoa_r+0x746>
 800d522:	9b05      	ldr	r3, [sp, #20]
 800d524:	321c      	adds	r2, #28
 800d526:	4413      	add	r3, r2
 800d528:	9305      	str	r3, [sp, #20]
 800d52a:	9b06      	ldr	r3, [sp, #24]
 800d52c:	4416      	add	r6, r2
 800d52e:	4413      	add	r3, r2
 800d530:	e794      	b.n	800d45c <_dtoa_r+0x744>
 800d532:	4602      	mov	r2, r0
 800d534:	e7f5      	b.n	800d522 <_dtoa_r+0x80a>
 800d536:	f1ba 0f00 	cmp.w	sl, #0
 800d53a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d53e:	46d3      	mov	fp, sl
 800d540:	dc21      	bgt.n	800d586 <_dtoa_r+0x86e>
 800d542:	9b07      	ldr	r3, [sp, #28]
 800d544:	2b02      	cmp	r3, #2
 800d546:	dd1e      	ble.n	800d586 <_dtoa_r+0x86e>
 800d548:	f1bb 0f00 	cmp.w	fp, #0
 800d54c:	f47f aeb7 	bne.w	800d2be <_dtoa_r+0x5a6>
 800d550:	4621      	mov	r1, r4
 800d552:	465b      	mov	r3, fp
 800d554:	2205      	movs	r2, #5
 800d556:	4648      	mov	r0, r9
 800d558:	f000 fa96 	bl	800da88 <__multadd>
 800d55c:	4601      	mov	r1, r0
 800d55e:	4604      	mov	r4, r0
 800d560:	9801      	ldr	r0, [sp, #4]
 800d562:	f000 fcf3 	bl	800df4c <__mcmp>
 800d566:	2800      	cmp	r0, #0
 800d568:	f77f aea9 	ble.w	800d2be <_dtoa_r+0x5a6>
 800d56c:	463e      	mov	r6, r7
 800d56e:	2331      	movs	r3, #49	@ 0x31
 800d570:	f806 3b01 	strb.w	r3, [r6], #1
 800d574:	9b04      	ldr	r3, [sp, #16]
 800d576:	3301      	adds	r3, #1
 800d578:	9304      	str	r3, [sp, #16]
 800d57a:	e6a4      	b.n	800d2c6 <_dtoa_r+0x5ae>
 800d57c:	f8cd 8010 	str.w	r8, [sp, #16]
 800d580:	4654      	mov	r4, sl
 800d582:	4625      	mov	r5, r4
 800d584:	e7f2      	b.n	800d56c <_dtoa_r+0x854>
 800d586:	9b08      	ldr	r3, [sp, #32]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f000 8103 	beq.w	800d794 <_dtoa_r+0xa7c>
 800d58e:	2e00      	cmp	r6, #0
 800d590:	dd05      	ble.n	800d59e <_dtoa_r+0x886>
 800d592:	4629      	mov	r1, r5
 800d594:	4632      	mov	r2, r6
 800d596:	4648      	mov	r0, r9
 800d598:	f000 fc6c 	bl	800de74 <__lshift>
 800d59c:	4605      	mov	r5, r0
 800d59e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d058      	beq.n	800d656 <_dtoa_r+0x93e>
 800d5a4:	6869      	ldr	r1, [r5, #4]
 800d5a6:	4648      	mov	r0, r9
 800d5a8:	f000 fa0c 	bl	800d9c4 <_Balloc>
 800d5ac:	4606      	mov	r6, r0
 800d5ae:	b928      	cbnz	r0, 800d5bc <_dtoa_r+0x8a4>
 800d5b0:	4b82      	ldr	r3, [pc, #520]	@ (800d7bc <_dtoa_r+0xaa4>)
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d5b8:	f7ff bbc7 	b.w	800cd4a <_dtoa_r+0x32>
 800d5bc:	692a      	ldr	r2, [r5, #16]
 800d5be:	3202      	adds	r2, #2
 800d5c0:	0092      	lsls	r2, r2, #2
 800d5c2:	f105 010c 	add.w	r1, r5, #12
 800d5c6:	300c      	adds	r0, #12
 800d5c8:	f7ff fb07 	bl	800cbda <memcpy>
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	4631      	mov	r1, r6
 800d5d0:	4648      	mov	r0, r9
 800d5d2:	f000 fc4f 	bl	800de74 <__lshift>
 800d5d6:	1c7b      	adds	r3, r7, #1
 800d5d8:	9305      	str	r3, [sp, #20]
 800d5da:	eb07 030b 	add.w	r3, r7, fp
 800d5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5e0:	9b02      	ldr	r3, [sp, #8]
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	46a8      	mov	r8, r5
 800d5e8:	9308      	str	r3, [sp, #32]
 800d5ea:	4605      	mov	r5, r0
 800d5ec:	9b05      	ldr	r3, [sp, #20]
 800d5ee:	9801      	ldr	r0, [sp, #4]
 800d5f0:	4621      	mov	r1, r4
 800d5f2:	f103 3bff 	add.w	fp, r3, #4294967295
 800d5f6:	f7ff fb05 	bl	800cc04 <quorem>
 800d5fa:	4641      	mov	r1, r8
 800d5fc:	9002      	str	r0, [sp, #8]
 800d5fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d602:	9801      	ldr	r0, [sp, #4]
 800d604:	f000 fca2 	bl	800df4c <__mcmp>
 800d608:	462a      	mov	r2, r5
 800d60a:	9006      	str	r0, [sp, #24]
 800d60c:	4621      	mov	r1, r4
 800d60e:	4648      	mov	r0, r9
 800d610:	f000 fcb8 	bl	800df84 <__mdiff>
 800d614:	68c2      	ldr	r2, [r0, #12]
 800d616:	4606      	mov	r6, r0
 800d618:	b9fa      	cbnz	r2, 800d65a <_dtoa_r+0x942>
 800d61a:	4601      	mov	r1, r0
 800d61c:	9801      	ldr	r0, [sp, #4]
 800d61e:	f000 fc95 	bl	800df4c <__mcmp>
 800d622:	4602      	mov	r2, r0
 800d624:	4631      	mov	r1, r6
 800d626:	4648      	mov	r0, r9
 800d628:	920a      	str	r2, [sp, #40]	@ 0x28
 800d62a:	f000 fa0b 	bl	800da44 <_Bfree>
 800d62e:	9b07      	ldr	r3, [sp, #28]
 800d630:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d632:	9e05      	ldr	r6, [sp, #20]
 800d634:	ea43 0102 	orr.w	r1, r3, r2
 800d638:	9b08      	ldr	r3, [sp, #32]
 800d63a:	4319      	orrs	r1, r3
 800d63c:	d10f      	bne.n	800d65e <_dtoa_r+0x946>
 800d63e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d642:	d028      	beq.n	800d696 <_dtoa_r+0x97e>
 800d644:	9b06      	ldr	r3, [sp, #24]
 800d646:	2b00      	cmp	r3, #0
 800d648:	dd02      	ble.n	800d650 <_dtoa_r+0x938>
 800d64a:	9b02      	ldr	r3, [sp, #8]
 800d64c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d650:	f88b a000 	strb.w	sl, [fp]
 800d654:	e639      	b.n	800d2ca <_dtoa_r+0x5b2>
 800d656:	4628      	mov	r0, r5
 800d658:	e7bd      	b.n	800d5d6 <_dtoa_r+0x8be>
 800d65a:	2201      	movs	r2, #1
 800d65c:	e7e2      	b.n	800d624 <_dtoa_r+0x90c>
 800d65e:	9b06      	ldr	r3, [sp, #24]
 800d660:	2b00      	cmp	r3, #0
 800d662:	db04      	blt.n	800d66e <_dtoa_r+0x956>
 800d664:	9907      	ldr	r1, [sp, #28]
 800d666:	430b      	orrs	r3, r1
 800d668:	9908      	ldr	r1, [sp, #32]
 800d66a:	430b      	orrs	r3, r1
 800d66c:	d120      	bne.n	800d6b0 <_dtoa_r+0x998>
 800d66e:	2a00      	cmp	r2, #0
 800d670:	ddee      	ble.n	800d650 <_dtoa_r+0x938>
 800d672:	9901      	ldr	r1, [sp, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	4648      	mov	r0, r9
 800d678:	f000 fbfc 	bl	800de74 <__lshift>
 800d67c:	4621      	mov	r1, r4
 800d67e:	9001      	str	r0, [sp, #4]
 800d680:	f000 fc64 	bl	800df4c <__mcmp>
 800d684:	2800      	cmp	r0, #0
 800d686:	dc03      	bgt.n	800d690 <_dtoa_r+0x978>
 800d688:	d1e2      	bne.n	800d650 <_dtoa_r+0x938>
 800d68a:	f01a 0f01 	tst.w	sl, #1
 800d68e:	d0df      	beq.n	800d650 <_dtoa_r+0x938>
 800d690:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d694:	d1d9      	bne.n	800d64a <_dtoa_r+0x932>
 800d696:	2339      	movs	r3, #57	@ 0x39
 800d698:	f88b 3000 	strb.w	r3, [fp]
 800d69c:	4633      	mov	r3, r6
 800d69e:	461e      	mov	r6, r3
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d6a6:	2a39      	cmp	r2, #57	@ 0x39
 800d6a8:	d053      	beq.n	800d752 <_dtoa_r+0xa3a>
 800d6aa:	3201      	adds	r2, #1
 800d6ac:	701a      	strb	r2, [r3, #0]
 800d6ae:	e60c      	b.n	800d2ca <_dtoa_r+0x5b2>
 800d6b0:	2a00      	cmp	r2, #0
 800d6b2:	dd07      	ble.n	800d6c4 <_dtoa_r+0x9ac>
 800d6b4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d6b8:	d0ed      	beq.n	800d696 <_dtoa_r+0x97e>
 800d6ba:	f10a 0301 	add.w	r3, sl, #1
 800d6be:	f88b 3000 	strb.w	r3, [fp]
 800d6c2:	e602      	b.n	800d2ca <_dtoa_r+0x5b2>
 800d6c4:	9b05      	ldr	r3, [sp, #20]
 800d6c6:	9a05      	ldr	r2, [sp, #20]
 800d6c8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d6cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d029      	beq.n	800d726 <_dtoa_r+0xa0e>
 800d6d2:	9901      	ldr	r1, [sp, #4]
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	220a      	movs	r2, #10
 800d6d8:	4648      	mov	r0, r9
 800d6da:	f000 f9d5 	bl	800da88 <__multadd>
 800d6de:	45a8      	cmp	r8, r5
 800d6e0:	9001      	str	r0, [sp, #4]
 800d6e2:	f04f 0300 	mov.w	r3, #0
 800d6e6:	f04f 020a 	mov.w	r2, #10
 800d6ea:	4641      	mov	r1, r8
 800d6ec:	4648      	mov	r0, r9
 800d6ee:	d107      	bne.n	800d700 <_dtoa_r+0x9e8>
 800d6f0:	f000 f9ca 	bl	800da88 <__multadd>
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	4605      	mov	r5, r0
 800d6f8:	9b05      	ldr	r3, [sp, #20]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	9305      	str	r3, [sp, #20]
 800d6fe:	e775      	b.n	800d5ec <_dtoa_r+0x8d4>
 800d700:	f000 f9c2 	bl	800da88 <__multadd>
 800d704:	4629      	mov	r1, r5
 800d706:	4680      	mov	r8, r0
 800d708:	2300      	movs	r3, #0
 800d70a:	220a      	movs	r2, #10
 800d70c:	4648      	mov	r0, r9
 800d70e:	f000 f9bb 	bl	800da88 <__multadd>
 800d712:	4605      	mov	r5, r0
 800d714:	e7f0      	b.n	800d6f8 <_dtoa_r+0x9e0>
 800d716:	f1bb 0f00 	cmp.w	fp, #0
 800d71a:	bfcc      	ite	gt
 800d71c:	465e      	movgt	r6, fp
 800d71e:	2601      	movle	r6, #1
 800d720:	443e      	add	r6, r7
 800d722:	f04f 0800 	mov.w	r8, #0
 800d726:	9901      	ldr	r1, [sp, #4]
 800d728:	2201      	movs	r2, #1
 800d72a:	4648      	mov	r0, r9
 800d72c:	f000 fba2 	bl	800de74 <__lshift>
 800d730:	4621      	mov	r1, r4
 800d732:	9001      	str	r0, [sp, #4]
 800d734:	f000 fc0a 	bl	800df4c <__mcmp>
 800d738:	2800      	cmp	r0, #0
 800d73a:	dcaf      	bgt.n	800d69c <_dtoa_r+0x984>
 800d73c:	d102      	bne.n	800d744 <_dtoa_r+0xa2c>
 800d73e:	f01a 0f01 	tst.w	sl, #1
 800d742:	d1ab      	bne.n	800d69c <_dtoa_r+0x984>
 800d744:	4633      	mov	r3, r6
 800d746:	461e      	mov	r6, r3
 800d748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d74c:	2a30      	cmp	r2, #48	@ 0x30
 800d74e:	d0fa      	beq.n	800d746 <_dtoa_r+0xa2e>
 800d750:	e5bb      	b.n	800d2ca <_dtoa_r+0x5b2>
 800d752:	429f      	cmp	r7, r3
 800d754:	d1a3      	bne.n	800d69e <_dtoa_r+0x986>
 800d756:	9b04      	ldr	r3, [sp, #16]
 800d758:	3301      	adds	r3, #1
 800d75a:	9304      	str	r3, [sp, #16]
 800d75c:	2331      	movs	r3, #49	@ 0x31
 800d75e:	703b      	strb	r3, [r7, #0]
 800d760:	e5b3      	b.n	800d2ca <_dtoa_r+0x5b2>
 800d762:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d764:	4f16      	ldr	r7, [pc, #88]	@ (800d7c0 <_dtoa_r+0xaa8>)
 800d766:	b11b      	cbz	r3, 800d770 <_dtoa_r+0xa58>
 800d768:	f107 0308 	add.w	r3, r7, #8
 800d76c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d76e:	6013      	str	r3, [r2, #0]
 800d770:	4638      	mov	r0, r7
 800d772:	b011      	add	sp, #68	@ 0x44
 800d774:	ecbd 8b02 	vpop	{d8}
 800d778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77c:	9b07      	ldr	r3, [sp, #28]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	f77f ae36 	ble.w	800d3f0 <_dtoa_r+0x6d8>
 800d784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d786:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d788:	2001      	movs	r0, #1
 800d78a:	e656      	b.n	800d43a <_dtoa_r+0x722>
 800d78c:	f1bb 0f00 	cmp.w	fp, #0
 800d790:	f77f aed7 	ble.w	800d542 <_dtoa_r+0x82a>
 800d794:	463e      	mov	r6, r7
 800d796:	9801      	ldr	r0, [sp, #4]
 800d798:	4621      	mov	r1, r4
 800d79a:	f7ff fa33 	bl	800cc04 <quorem>
 800d79e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d7a2:	f806 ab01 	strb.w	sl, [r6], #1
 800d7a6:	1bf2      	subs	r2, r6, r7
 800d7a8:	4593      	cmp	fp, r2
 800d7aa:	ddb4      	ble.n	800d716 <_dtoa_r+0x9fe>
 800d7ac:	9901      	ldr	r1, [sp, #4]
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	220a      	movs	r2, #10
 800d7b2:	4648      	mov	r0, r9
 800d7b4:	f000 f968 	bl	800da88 <__multadd>
 800d7b8:	9001      	str	r0, [sp, #4]
 800d7ba:	e7ec      	b.n	800d796 <_dtoa_r+0xa7e>
 800d7bc:	0801029d 	.word	0x0801029d
 800d7c0:	08010221 	.word	0x08010221

0800d7c4 <_free_r>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	2900      	cmp	r1, #0
 800d7ca:	d041      	beq.n	800d850 <_free_r+0x8c>
 800d7cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7d0:	1f0c      	subs	r4, r1, #4
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	bfb8      	it	lt
 800d7d6:	18e4      	addlt	r4, r4, r3
 800d7d8:	f000 f8e8 	bl	800d9ac <__malloc_lock>
 800d7dc:	4a1d      	ldr	r2, [pc, #116]	@ (800d854 <_free_r+0x90>)
 800d7de:	6813      	ldr	r3, [r2, #0]
 800d7e0:	b933      	cbnz	r3, 800d7f0 <_free_r+0x2c>
 800d7e2:	6063      	str	r3, [r4, #4]
 800d7e4:	6014      	str	r4, [r2, #0]
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ec:	f000 b8e4 	b.w	800d9b8 <__malloc_unlock>
 800d7f0:	42a3      	cmp	r3, r4
 800d7f2:	d908      	bls.n	800d806 <_free_r+0x42>
 800d7f4:	6820      	ldr	r0, [r4, #0]
 800d7f6:	1821      	adds	r1, r4, r0
 800d7f8:	428b      	cmp	r3, r1
 800d7fa:	bf01      	itttt	eq
 800d7fc:	6819      	ldreq	r1, [r3, #0]
 800d7fe:	685b      	ldreq	r3, [r3, #4]
 800d800:	1809      	addeq	r1, r1, r0
 800d802:	6021      	streq	r1, [r4, #0]
 800d804:	e7ed      	b.n	800d7e2 <_free_r+0x1e>
 800d806:	461a      	mov	r2, r3
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	b10b      	cbz	r3, 800d810 <_free_r+0x4c>
 800d80c:	42a3      	cmp	r3, r4
 800d80e:	d9fa      	bls.n	800d806 <_free_r+0x42>
 800d810:	6811      	ldr	r1, [r2, #0]
 800d812:	1850      	adds	r0, r2, r1
 800d814:	42a0      	cmp	r0, r4
 800d816:	d10b      	bne.n	800d830 <_free_r+0x6c>
 800d818:	6820      	ldr	r0, [r4, #0]
 800d81a:	4401      	add	r1, r0
 800d81c:	1850      	adds	r0, r2, r1
 800d81e:	4283      	cmp	r3, r0
 800d820:	6011      	str	r1, [r2, #0]
 800d822:	d1e0      	bne.n	800d7e6 <_free_r+0x22>
 800d824:	6818      	ldr	r0, [r3, #0]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	6053      	str	r3, [r2, #4]
 800d82a:	4408      	add	r0, r1
 800d82c:	6010      	str	r0, [r2, #0]
 800d82e:	e7da      	b.n	800d7e6 <_free_r+0x22>
 800d830:	d902      	bls.n	800d838 <_free_r+0x74>
 800d832:	230c      	movs	r3, #12
 800d834:	602b      	str	r3, [r5, #0]
 800d836:	e7d6      	b.n	800d7e6 <_free_r+0x22>
 800d838:	6820      	ldr	r0, [r4, #0]
 800d83a:	1821      	adds	r1, r4, r0
 800d83c:	428b      	cmp	r3, r1
 800d83e:	bf04      	itt	eq
 800d840:	6819      	ldreq	r1, [r3, #0]
 800d842:	685b      	ldreq	r3, [r3, #4]
 800d844:	6063      	str	r3, [r4, #4]
 800d846:	bf04      	itt	eq
 800d848:	1809      	addeq	r1, r1, r0
 800d84a:	6021      	streq	r1, [r4, #0]
 800d84c:	6054      	str	r4, [r2, #4]
 800d84e:	e7ca      	b.n	800d7e6 <_free_r+0x22>
 800d850:	bd38      	pop	{r3, r4, r5, pc}
 800d852:	bf00      	nop
 800d854:	24000778 	.word	0x24000778

0800d858 <malloc>:
 800d858:	4b02      	ldr	r3, [pc, #8]	@ (800d864 <malloc+0xc>)
 800d85a:	4601      	mov	r1, r0
 800d85c:	6818      	ldr	r0, [r3, #0]
 800d85e:	f000 b825 	b.w	800d8ac <_malloc_r>
 800d862:	bf00      	nop
 800d864:	24000024 	.word	0x24000024

0800d868 <sbrk_aligned>:
 800d868:	b570      	push	{r4, r5, r6, lr}
 800d86a:	4e0f      	ldr	r6, [pc, #60]	@ (800d8a8 <sbrk_aligned+0x40>)
 800d86c:	460c      	mov	r4, r1
 800d86e:	6831      	ldr	r1, [r6, #0]
 800d870:	4605      	mov	r5, r0
 800d872:	b911      	cbnz	r1, 800d87a <sbrk_aligned+0x12>
 800d874:	f001 ff7e 	bl	800f774 <_sbrk_r>
 800d878:	6030      	str	r0, [r6, #0]
 800d87a:	4621      	mov	r1, r4
 800d87c:	4628      	mov	r0, r5
 800d87e:	f001 ff79 	bl	800f774 <_sbrk_r>
 800d882:	1c43      	adds	r3, r0, #1
 800d884:	d103      	bne.n	800d88e <sbrk_aligned+0x26>
 800d886:	f04f 34ff 	mov.w	r4, #4294967295
 800d88a:	4620      	mov	r0, r4
 800d88c:	bd70      	pop	{r4, r5, r6, pc}
 800d88e:	1cc4      	adds	r4, r0, #3
 800d890:	f024 0403 	bic.w	r4, r4, #3
 800d894:	42a0      	cmp	r0, r4
 800d896:	d0f8      	beq.n	800d88a <sbrk_aligned+0x22>
 800d898:	1a21      	subs	r1, r4, r0
 800d89a:	4628      	mov	r0, r5
 800d89c:	f001 ff6a 	bl	800f774 <_sbrk_r>
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	d1f2      	bne.n	800d88a <sbrk_aligned+0x22>
 800d8a4:	e7ef      	b.n	800d886 <sbrk_aligned+0x1e>
 800d8a6:	bf00      	nop
 800d8a8:	24000774 	.word	0x24000774

0800d8ac <_malloc_r>:
 800d8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8b0:	1ccd      	adds	r5, r1, #3
 800d8b2:	f025 0503 	bic.w	r5, r5, #3
 800d8b6:	3508      	adds	r5, #8
 800d8b8:	2d0c      	cmp	r5, #12
 800d8ba:	bf38      	it	cc
 800d8bc:	250c      	movcc	r5, #12
 800d8be:	2d00      	cmp	r5, #0
 800d8c0:	4606      	mov	r6, r0
 800d8c2:	db01      	blt.n	800d8c8 <_malloc_r+0x1c>
 800d8c4:	42a9      	cmp	r1, r5
 800d8c6:	d904      	bls.n	800d8d2 <_malloc_r+0x26>
 800d8c8:	230c      	movs	r3, #12
 800d8ca:	6033      	str	r3, [r6, #0]
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d9a8 <_malloc_r+0xfc>
 800d8d6:	f000 f869 	bl	800d9ac <__malloc_lock>
 800d8da:	f8d8 3000 	ldr.w	r3, [r8]
 800d8de:	461c      	mov	r4, r3
 800d8e0:	bb44      	cbnz	r4, 800d934 <_malloc_r+0x88>
 800d8e2:	4629      	mov	r1, r5
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f7ff ffbf 	bl	800d868 <sbrk_aligned>
 800d8ea:	1c43      	adds	r3, r0, #1
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	d158      	bne.n	800d9a2 <_malloc_r+0xf6>
 800d8f0:	f8d8 4000 	ldr.w	r4, [r8]
 800d8f4:	4627      	mov	r7, r4
 800d8f6:	2f00      	cmp	r7, #0
 800d8f8:	d143      	bne.n	800d982 <_malloc_r+0xd6>
 800d8fa:	2c00      	cmp	r4, #0
 800d8fc:	d04b      	beq.n	800d996 <_malloc_r+0xea>
 800d8fe:	6823      	ldr	r3, [r4, #0]
 800d900:	4639      	mov	r1, r7
 800d902:	4630      	mov	r0, r6
 800d904:	eb04 0903 	add.w	r9, r4, r3
 800d908:	f001 ff34 	bl	800f774 <_sbrk_r>
 800d90c:	4581      	cmp	r9, r0
 800d90e:	d142      	bne.n	800d996 <_malloc_r+0xea>
 800d910:	6821      	ldr	r1, [r4, #0]
 800d912:	1a6d      	subs	r5, r5, r1
 800d914:	4629      	mov	r1, r5
 800d916:	4630      	mov	r0, r6
 800d918:	f7ff ffa6 	bl	800d868 <sbrk_aligned>
 800d91c:	3001      	adds	r0, #1
 800d91e:	d03a      	beq.n	800d996 <_malloc_r+0xea>
 800d920:	6823      	ldr	r3, [r4, #0]
 800d922:	442b      	add	r3, r5
 800d924:	6023      	str	r3, [r4, #0]
 800d926:	f8d8 3000 	ldr.w	r3, [r8]
 800d92a:	685a      	ldr	r2, [r3, #4]
 800d92c:	bb62      	cbnz	r2, 800d988 <_malloc_r+0xdc>
 800d92e:	f8c8 7000 	str.w	r7, [r8]
 800d932:	e00f      	b.n	800d954 <_malloc_r+0xa8>
 800d934:	6822      	ldr	r2, [r4, #0]
 800d936:	1b52      	subs	r2, r2, r5
 800d938:	d420      	bmi.n	800d97c <_malloc_r+0xd0>
 800d93a:	2a0b      	cmp	r2, #11
 800d93c:	d917      	bls.n	800d96e <_malloc_r+0xc2>
 800d93e:	1961      	adds	r1, r4, r5
 800d940:	42a3      	cmp	r3, r4
 800d942:	6025      	str	r5, [r4, #0]
 800d944:	bf18      	it	ne
 800d946:	6059      	strne	r1, [r3, #4]
 800d948:	6863      	ldr	r3, [r4, #4]
 800d94a:	bf08      	it	eq
 800d94c:	f8c8 1000 	streq.w	r1, [r8]
 800d950:	5162      	str	r2, [r4, r5]
 800d952:	604b      	str	r3, [r1, #4]
 800d954:	4630      	mov	r0, r6
 800d956:	f000 f82f 	bl	800d9b8 <__malloc_unlock>
 800d95a:	f104 000b 	add.w	r0, r4, #11
 800d95e:	1d23      	adds	r3, r4, #4
 800d960:	f020 0007 	bic.w	r0, r0, #7
 800d964:	1ac2      	subs	r2, r0, r3
 800d966:	bf1c      	itt	ne
 800d968:	1a1b      	subne	r3, r3, r0
 800d96a:	50a3      	strne	r3, [r4, r2]
 800d96c:	e7af      	b.n	800d8ce <_malloc_r+0x22>
 800d96e:	6862      	ldr	r2, [r4, #4]
 800d970:	42a3      	cmp	r3, r4
 800d972:	bf0c      	ite	eq
 800d974:	f8c8 2000 	streq.w	r2, [r8]
 800d978:	605a      	strne	r2, [r3, #4]
 800d97a:	e7eb      	b.n	800d954 <_malloc_r+0xa8>
 800d97c:	4623      	mov	r3, r4
 800d97e:	6864      	ldr	r4, [r4, #4]
 800d980:	e7ae      	b.n	800d8e0 <_malloc_r+0x34>
 800d982:	463c      	mov	r4, r7
 800d984:	687f      	ldr	r7, [r7, #4]
 800d986:	e7b6      	b.n	800d8f6 <_malloc_r+0x4a>
 800d988:	461a      	mov	r2, r3
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	42a3      	cmp	r3, r4
 800d98e:	d1fb      	bne.n	800d988 <_malloc_r+0xdc>
 800d990:	2300      	movs	r3, #0
 800d992:	6053      	str	r3, [r2, #4]
 800d994:	e7de      	b.n	800d954 <_malloc_r+0xa8>
 800d996:	230c      	movs	r3, #12
 800d998:	6033      	str	r3, [r6, #0]
 800d99a:	4630      	mov	r0, r6
 800d99c:	f000 f80c 	bl	800d9b8 <__malloc_unlock>
 800d9a0:	e794      	b.n	800d8cc <_malloc_r+0x20>
 800d9a2:	6005      	str	r5, [r0, #0]
 800d9a4:	e7d6      	b.n	800d954 <_malloc_r+0xa8>
 800d9a6:	bf00      	nop
 800d9a8:	24000778 	.word	0x24000778

0800d9ac <__malloc_lock>:
 800d9ac:	4801      	ldr	r0, [pc, #4]	@ (800d9b4 <__malloc_lock+0x8>)
 800d9ae:	f7ff b912 	b.w	800cbd6 <__retarget_lock_acquire_recursive>
 800d9b2:	bf00      	nop
 800d9b4:	24000770 	.word	0x24000770

0800d9b8 <__malloc_unlock>:
 800d9b8:	4801      	ldr	r0, [pc, #4]	@ (800d9c0 <__malloc_unlock+0x8>)
 800d9ba:	f7ff b90d 	b.w	800cbd8 <__retarget_lock_release_recursive>
 800d9be:	bf00      	nop
 800d9c0:	24000770 	.word	0x24000770

0800d9c4 <_Balloc>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	69c6      	ldr	r6, [r0, #28]
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	460d      	mov	r5, r1
 800d9cc:	b976      	cbnz	r6, 800d9ec <_Balloc+0x28>
 800d9ce:	2010      	movs	r0, #16
 800d9d0:	f7ff ff42 	bl	800d858 <malloc>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	61e0      	str	r0, [r4, #28]
 800d9d8:	b920      	cbnz	r0, 800d9e4 <_Balloc+0x20>
 800d9da:	4b18      	ldr	r3, [pc, #96]	@ (800da3c <_Balloc+0x78>)
 800d9dc:	4818      	ldr	r0, [pc, #96]	@ (800da40 <_Balloc+0x7c>)
 800d9de:	216b      	movs	r1, #107	@ 0x6b
 800d9e0:	f001 fee2 	bl	800f7a8 <__assert_func>
 800d9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9e8:	6006      	str	r6, [r0, #0]
 800d9ea:	60c6      	str	r6, [r0, #12]
 800d9ec:	69e6      	ldr	r6, [r4, #28]
 800d9ee:	68f3      	ldr	r3, [r6, #12]
 800d9f0:	b183      	cbz	r3, 800da14 <_Balloc+0x50>
 800d9f2:	69e3      	ldr	r3, [r4, #28]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9fa:	b9b8      	cbnz	r0, 800da2c <_Balloc+0x68>
 800d9fc:	2101      	movs	r1, #1
 800d9fe:	fa01 f605 	lsl.w	r6, r1, r5
 800da02:	1d72      	adds	r2, r6, #5
 800da04:	0092      	lsls	r2, r2, #2
 800da06:	4620      	mov	r0, r4
 800da08:	f001 feec 	bl	800f7e4 <_calloc_r>
 800da0c:	b160      	cbz	r0, 800da28 <_Balloc+0x64>
 800da0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da12:	e00e      	b.n	800da32 <_Balloc+0x6e>
 800da14:	2221      	movs	r2, #33	@ 0x21
 800da16:	2104      	movs	r1, #4
 800da18:	4620      	mov	r0, r4
 800da1a:	f001 fee3 	bl	800f7e4 <_calloc_r>
 800da1e:	69e3      	ldr	r3, [r4, #28]
 800da20:	60f0      	str	r0, [r6, #12]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1e4      	bne.n	800d9f2 <_Balloc+0x2e>
 800da28:	2000      	movs	r0, #0
 800da2a:	bd70      	pop	{r4, r5, r6, pc}
 800da2c:	6802      	ldr	r2, [r0, #0]
 800da2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da32:	2300      	movs	r3, #0
 800da34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da38:	e7f7      	b.n	800da2a <_Balloc+0x66>
 800da3a:	bf00      	nop
 800da3c:	0801022e 	.word	0x0801022e
 800da40:	080102ae 	.word	0x080102ae

0800da44 <_Bfree>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	69c6      	ldr	r6, [r0, #28]
 800da48:	4605      	mov	r5, r0
 800da4a:	460c      	mov	r4, r1
 800da4c:	b976      	cbnz	r6, 800da6c <_Bfree+0x28>
 800da4e:	2010      	movs	r0, #16
 800da50:	f7ff ff02 	bl	800d858 <malloc>
 800da54:	4602      	mov	r2, r0
 800da56:	61e8      	str	r0, [r5, #28]
 800da58:	b920      	cbnz	r0, 800da64 <_Bfree+0x20>
 800da5a:	4b09      	ldr	r3, [pc, #36]	@ (800da80 <_Bfree+0x3c>)
 800da5c:	4809      	ldr	r0, [pc, #36]	@ (800da84 <_Bfree+0x40>)
 800da5e:	218f      	movs	r1, #143	@ 0x8f
 800da60:	f001 fea2 	bl	800f7a8 <__assert_func>
 800da64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da68:	6006      	str	r6, [r0, #0]
 800da6a:	60c6      	str	r6, [r0, #12]
 800da6c:	b13c      	cbz	r4, 800da7e <_Bfree+0x3a>
 800da6e:	69eb      	ldr	r3, [r5, #28]
 800da70:	6862      	ldr	r2, [r4, #4]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da78:	6021      	str	r1, [r4, #0]
 800da7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da7e:	bd70      	pop	{r4, r5, r6, pc}
 800da80:	0801022e 	.word	0x0801022e
 800da84:	080102ae 	.word	0x080102ae

0800da88 <__multadd>:
 800da88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da8c:	690d      	ldr	r5, [r1, #16]
 800da8e:	4607      	mov	r7, r0
 800da90:	460c      	mov	r4, r1
 800da92:	461e      	mov	r6, r3
 800da94:	f101 0c14 	add.w	ip, r1, #20
 800da98:	2000      	movs	r0, #0
 800da9a:	f8dc 3000 	ldr.w	r3, [ip]
 800da9e:	b299      	uxth	r1, r3
 800daa0:	fb02 6101 	mla	r1, r2, r1, r6
 800daa4:	0c1e      	lsrs	r6, r3, #16
 800daa6:	0c0b      	lsrs	r3, r1, #16
 800daa8:	fb02 3306 	mla	r3, r2, r6, r3
 800daac:	b289      	uxth	r1, r1
 800daae:	3001      	adds	r0, #1
 800dab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dab4:	4285      	cmp	r5, r0
 800dab6:	f84c 1b04 	str.w	r1, [ip], #4
 800daba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dabe:	dcec      	bgt.n	800da9a <__multadd+0x12>
 800dac0:	b30e      	cbz	r6, 800db06 <__multadd+0x7e>
 800dac2:	68a3      	ldr	r3, [r4, #8]
 800dac4:	42ab      	cmp	r3, r5
 800dac6:	dc19      	bgt.n	800dafc <__multadd+0x74>
 800dac8:	6861      	ldr	r1, [r4, #4]
 800daca:	4638      	mov	r0, r7
 800dacc:	3101      	adds	r1, #1
 800dace:	f7ff ff79 	bl	800d9c4 <_Balloc>
 800dad2:	4680      	mov	r8, r0
 800dad4:	b928      	cbnz	r0, 800dae2 <__multadd+0x5a>
 800dad6:	4602      	mov	r2, r0
 800dad8:	4b0c      	ldr	r3, [pc, #48]	@ (800db0c <__multadd+0x84>)
 800dada:	480d      	ldr	r0, [pc, #52]	@ (800db10 <__multadd+0x88>)
 800dadc:	21ba      	movs	r1, #186	@ 0xba
 800dade:	f001 fe63 	bl	800f7a8 <__assert_func>
 800dae2:	6922      	ldr	r2, [r4, #16]
 800dae4:	3202      	adds	r2, #2
 800dae6:	f104 010c 	add.w	r1, r4, #12
 800daea:	0092      	lsls	r2, r2, #2
 800daec:	300c      	adds	r0, #12
 800daee:	f7ff f874 	bl	800cbda <memcpy>
 800daf2:	4621      	mov	r1, r4
 800daf4:	4638      	mov	r0, r7
 800daf6:	f7ff ffa5 	bl	800da44 <_Bfree>
 800dafa:	4644      	mov	r4, r8
 800dafc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db00:	3501      	adds	r5, #1
 800db02:	615e      	str	r6, [r3, #20]
 800db04:	6125      	str	r5, [r4, #16]
 800db06:	4620      	mov	r0, r4
 800db08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db0c:	0801029d 	.word	0x0801029d
 800db10:	080102ae 	.word	0x080102ae

0800db14 <__s2b>:
 800db14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db18:	460c      	mov	r4, r1
 800db1a:	4615      	mov	r5, r2
 800db1c:	461f      	mov	r7, r3
 800db1e:	2209      	movs	r2, #9
 800db20:	3308      	adds	r3, #8
 800db22:	4606      	mov	r6, r0
 800db24:	fb93 f3f2 	sdiv	r3, r3, r2
 800db28:	2100      	movs	r1, #0
 800db2a:	2201      	movs	r2, #1
 800db2c:	429a      	cmp	r2, r3
 800db2e:	db09      	blt.n	800db44 <__s2b+0x30>
 800db30:	4630      	mov	r0, r6
 800db32:	f7ff ff47 	bl	800d9c4 <_Balloc>
 800db36:	b940      	cbnz	r0, 800db4a <__s2b+0x36>
 800db38:	4602      	mov	r2, r0
 800db3a:	4b19      	ldr	r3, [pc, #100]	@ (800dba0 <__s2b+0x8c>)
 800db3c:	4819      	ldr	r0, [pc, #100]	@ (800dba4 <__s2b+0x90>)
 800db3e:	21d3      	movs	r1, #211	@ 0xd3
 800db40:	f001 fe32 	bl	800f7a8 <__assert_func>
 800db44:	0052      	lsls	r2, r2, #1
 800db46:	3101      	adds	r1, #1
 800db48:	e7f0      	b.n	800db2c <__s2b+0x18>
 800db4a:	9b08      	ldr	r3, [sp, #32]
 800db4c:	6143      	str	r3, [r0, #20]
 800db4e:	2d09      	cmp	r5, #9
 800db50:	f04f 0301 	mov.w	r3, #1
 800db54:	6103      	str	r3, [r0, #16]
 800db56:	dd16      	ble.n	800db86 <__s2b+0x72>
 800db58:	f104 0909 	add.w	r9, r4, #9
 800db5c:	46c8      	mov	r8, r9
 800db5e:	442c      	add	r4, r5
 800db60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db64:	4601      	mov	r1, r0
 800db66:	3b30      	subs	r3, #48	@ 0x30
 800db68:	220a      	movs	r2, #10
 800db6a:	4630      	mov	r0, r6
 800db6c:	f7ff ff8c 	bl	800da88 <__multadd>
 800db70:	45a0      	cmp	r8, r4
 800db72:	d1f5      	bne.n	800db60 <__s2b+0x4c>
 800db74:	f1a5 0408 	sub.w	r4, r5, #8
 800db78:	444c      	add	r4, r9
 800db7a:	1b2d      	subs	r5, r5, r4
 800db7c:	1963      	adds	r3, r4, r5
 800db7e:	42bb      	cmp	r3, r7
 800db80:	db04      	blt.n	800db8c <__s2b+0x78>
 800db82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db86:	340a      	adds	r4, #10
 800db88:	2509      	movs	r5, #9
 800db8a:	e7f6      	b.n	800db7a <__s2b+0x66>
 800db8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db90:	4601      	mov	r1, r0
 800db92:	3b30      	subs	r3, #48	@ 0x30
 800db94:	220a      	movs	r2, #10
 800db96:	4630      	mov	r0, r6
 800db98:	f7ff ff76 	bl	800da88 <__multadd>
 800db9c:	e7ee      	b.n	800db7c <__s2b+0x68>
 800db9e:	bf00      	nop
 800dba0:	0801029d 	.word	0x0801029d
 800dba4:	080102ae 	.word	0x080102ae

0800dba8 <__hi0bits>:
 800dba8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dbac:	4603      	mov	r3, r0
 800dbae:	bf36      	itet	cc
 800dbb0:	0403      	lslcc	r3, r0, #16
 800dbb2:	2000      	movcs	r0, #0
 800dbb4:	2010      	movcc	r0, #16
 800dbb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dbba:	bf3c      	itt	cc
 800dbbc:	021b      	lslcc	r3, r3, #8
 800dbbe:	3008      	addcc	r0, #8
 800dbc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dbc4:	bf3c      	itt	cc
 800dbc6:	011b      	lslcc	r3, r3, #4
 800dbc8:	3004      	addcc	r0, #4
 800dbca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbce:	bf3c      	itt	cc
 800dbd0:	009b      	lslcc	r3, r3, #2
 800dbd2:	3002      	addcc	r0, #2
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	db05      	blt.n	800dbe4 <__hi0bits+0x3c>
 800dbd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dbdc:	f100 0001 	add.w	r0, r0, #1
 800dbe0:	bf08      	it	eq
 800dbe2:	2020      	moveq	r0, #32
 800dbe4:	4770      	bx	lr

0800dbe6 <__lo0bits>:
 800dbe6:	6803      	ldr	r3, [r0, #0]
 800dbe8:	4602      	mov	r2, r0
 800dbea:	f013 0007 	ands.w	r0, r3, #7
 800dbee:	d00b      	beq.n	800dc08 <__lo0bits+0x22>
 800dbf0:	07d9      	lsls	r1, r3, #31
 800dbf2:	d421      	bmi.n	800dc38 <__lo0bits+0x52>
 800dbf4:	0798      	lsls	r0, r3, #30
 800dbf6:	bf49      	itett	mi
 800dbf8:	085b      	lsrmi	r3, r3, #1
 800dbfa:	089b      	lsrpl	r3, r3, #2
 800dbfc:	2001      	movmi	r0, #1
 800dbfe:	6013      	strmi	r3, [r2, #0]
 800dc00:	bf5c      	itt	pl
 800dc02:	6013      	strpl	r3, [r2, #0]
 800dc04:	2002      	movpl	r0, #2
 800dc06:	4770      	bx	lr
 800dc08:	b299      	uxth	r1, r3
 800dc0a:	b909      	cbnz	r1, 800dc10 <__lo0bits+0x2a>
 800dc0c:	0c1b      	lsrs	r3, r3, #16
 800dc0e:	2010      	movs	r0, #16
 800dc10:	b2d9      	uxtb	r1, r3
 800dc12:	b909      	cbnz	r1, 800dc18 <__lo0bits+0x32>
 800dc14:	3008      	adds	r0, #8
 800dc16:	0a1b      	lsrs	r3, r3, #8
 800dc18:	0719      	lsls	r1, r3, #28
 800dc1a:	bf04      	itt	eq
 800dc1c:	091b      	lsreq	r3, r3, #4
 800dc1e:	3004      	addeq	r0, #4
 800dc20:	0799      	lsls	r1, r3, #30
 800dc22:	bf04      	itt	eq
 800dc24:	089b      	lsreq	r3, r3, #2
 800dc26:	3002      	addeq	r0, #2
 800dc28:	07d9      	lsls	r1, r3, #31
 800dc2a:	d403      	bmi.n	800dc34 <__lo0bits+0x4e>
 800dc2c:	085b      	lsrs	r3, r3, #1
 800dc2e:	f100 0001 	add.w	r0, r0, #1
 800dc32:	d003      	beq.n	800dc3c <__lo0bits+0x56>
 800dc34:	6013      	str	r3, [r2, #0]
 800dc36:	4770      	bx	lr
 800dc38:	2000      	movs	r0, #0
 800dc3a:	4770      	bx	lr
 800dc3c:	2020      	movs	r0, #32
 800dc3e:	4770      	bx	lr

0800dc40 <__i2b>:
 800dc40:	b510      	push	{r4, lr}
 800dc42:	460c      	mov	r4, r1
 800dc44:	2101      	movs	r1, #1
 800dc46:	f7ff febd 	bl	800d9c4 <_Balloc>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	b928      	cbnz	r0, 800dc5a <__i2b+0x1a>
 800dc4e:	4b05      	ldr	r3, [pc, #20]	@ (800dc64 <__i2b+0x24>)
 800dc50:	4805      	ldr	r0, [pc, #20]	@ (800dc68 <__i2b+0x28>)
 800dc52:	f240 1145 	movw	r1, #325	@ 0x145
 800dc56:	f001 fda7 	bl	800f7a8 <__assert_func>
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	6144      	str	r4, [r0, #20]
 800dc5e:	6103      	str	r3, [r0, #16]
 800dc60:	bd10      	pop	{r4, pc}
 800dc62:	bf00      	nop
 800dc64:	0801029d 	.word	0x0801029d
 800dc68:	080102ae 	.word	0x080102ae

0800dc6c <__multiply>:
 800dc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc70:	4614      	mov	r4, r2
 800dc72:	690a      	ldr	r2, [r1, #16]
 800dc74:	6923      	ldr	r3, [r4, #16]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	bfa8      	it	ge
 800dc7a:	4623      	movge	r3, r4
 800dc7c:	460f      	mov	r7, r1
 800dc7e:	bfa4      	itt	ge
 800dc80:	460c      	movge	r4, r1
 800dc82:	461f      	movge	r7, r3
 800dc84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dc88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dc8c:	68a3      	ldr	r3, [r4, #8]
 800dc8e:	6861      	ldr	r1, [r4, #4]
 800dc90:	eb0a 0609 	add.w	r6, sl, r9
 800dc94:	42b3      	cmp	r3, r6
 800dc96:	b085      	sub	sp, #20
 800dc98:	bfb8      	it	lt
 800dc9a:	3101      	addlt	r1, #1
 800dc9c:	f7ff fe92 	bl	800d9c4 <_Balloc>
 800dca0:	b930      	cbnz	r0, 800dcb0 <__multiply+0x44>
 800dca2:	4602      	mov	r2, r0
 800dca4:	4b44      	ldr	r3, [pc, #272]	@ (800ddb8 <__multiply+0x14c>)
 800dca6:	4845      	ldr	r0, [pc, #276]	@ (800ddbc <__multiply+0x150>)
 800dca8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dcac:	f001 fd7c 	bl	800f7a8 <__assert_func>
 800dcb0:	f100 0514 	add.w	r5, r0, #20
 800dcb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dcb8:	462b      	mov	r3, r5
 800dcba:	2200      	movs	r2, #0
 800dcbc:	4543      	cmp	r3, r8
 800dcbe:	d321      	bcc.n	800dd04 <__multiply+0x98>
 800dcc0:	f107 0114 	add.w	r1, r7, #20
 800dcc4:	f104 0214 	add.w	r2, r4, #20
 800dcc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dccc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dcd0:	9302      	str	r3, [sp, #8]
 800dcd2:	1b13      	subs	r3, r2, r4
 800dcd4:	3b15      	subs	r3, #21
 800dcd6:	f023 0303 	bic.w	r3, r3, #3
 800dcda:	3304      	adds	r3, #4
 800dcdc:	f104 0715 	add.w	r7, r4, #21
 800dce0:	42ba      	cmp	r2, r7
 800dce2:	bf38      	it	cc
 800dce4:	2304      	movcc	r3, #4
 800dce6:	9301      	str	r3, [sp, #4]
 800dce8:	9b02      	ldr	r3, [sp, #8]
 800dcea:	9103      	str	r1, [sp, #12]
 800dcec:	428b      	cmp	r3, r1
 800dcee:	d80c      	bhi.n	800dd0a <__multiply+0x9e>
 800dcf0:	2e00      	cmp	r6, #0
 800dcf2:	dd03      	ble.n	800dcfc <__multiply+0x90>
 800dcf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d05b      	beq.n	800ddb4 <__multiply+0x148>
 800dcfc:	6106      	str	r6, [r0, #16]
 800dcfe:	b005      	add	sp, #20
 800dd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd04:	f843 2b04 	str.w	r2, [r3], #4
 800dd08:	e7d8      	b.n	800dcbc <__multiply+0x50>
 800dd0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800dd0e:	f1ba 0f00 	cmp.w	sl, #0
 800dd12:	d024      	beq.n	800dd5e <__multiply+0xf2>
 800dd14:	f104 0e14 	add.w	lr, r4, #20
 800dd18:	46a9      	mov	r9, r5
 800dd1a:	f04f 0c00 	mov.w	ip, #0
 800dd1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dd22:	f8d9 3000 	ldr.w	r3, [r9]
 800dd26:	fa1f fb87 	uxth.w	fp, r7
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800dd30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dd34:	f8d9 7000 	ldr.w	r7, [r9]
 800dd38:	4463      	add	r3, ip
 800dd3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd3e:	fb0a c70b 	mla	r7, sl, fp, ip
 800dd42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd4c:	4572      	cmp	r2, lr
 800dd4e:	f849 3b04 	str.w	r3, [r9], #4
 800dd52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd56:	d8e2      	bhi.n	800dd1e <__multiply+0xb2>
 800dd58:	9b01      	ldr	r3, [sp, #4]
 800dd5a:	f845 c003 	str.w	ip, [r5, r3]
 800dd5e:	9b03      	ldr	r3, [sp, #12]
 800dd60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dd64:	3104      	adds	r1, #4
 800dd66:	f1b9 0f00 	cmp.w	r9, #0
 800dd6a:	d021      	beq.n	800ddb0 <__multiply+0x144>
 800dd6c:	682b      	ldr	r3, [r5, #0]
 800dd6e:	f104 0c14 	add.w	ip, r4, #20
 800dd72:	46ae      	mov	lr, r5
 800dd74:	f04f 0a00 	mov.w	sl, #0
 800dd78:	f8bc b000 	ldrh.w	fp, [ip]
 800dd7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dd80:	fb09 770b 	mla	r7, r9, fp, r7
 800dd84:	4457      	add	r7, sl
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd8c:	f84e 3b04 	str.w	r3, [lr], #4
 800dd90:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd98:	f8be 3000 	ldrh.w	r3, [lr]
 800dd9c:	fb09 330a 	mla	r3, r9, sl, r3
 800dda0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dda4:	4562      	cmp	r2, ip
 800dda6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddaa:	d8e5      	bhi.n	800dd78 <__multiply+0x10c>
 800ddac:	9f01      	ldr	r7, [sp, #4]
 800ddae:	51eb      	str	r3, [r5, r7]
 800ddb0:	3504      	adds	r5, #4
 800ddb2:	e799      	b.n	800dce8 <__multiply+0x7c>
 800ddb4:	3e01      	subs	r6, #1
 800ddb6:	e79b      	b.n	800dcf0 <__multiply+0x84>
 800ddb8:	0801029d 	.word	0x0801029d
 800ddbc:	080102ae 	.word	0x080102ae

0800ddc0 <__pow5mult>:
 800ddc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddc4:	4615      	mov	r5, r2
 800ddc6:	f012 0203 	ands.w	r2, r2, #3
 800ddca:	4607      	mov	r7, r0
 800ddcc:	460e      	mov	r6, r1
 800ddce:	d007      	beq.n	800dde0 <__pow5mult+0x20>
 800ddd0:	4c25      	ldr	r4, [pc, #148]	@ (800de68 <__pow5mult+0xa8>)
 800ddd2:	3a01      	subs	r2, #1
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddda:	f7ff fe55 	bl	800da88 <__multadd>
 800ddde:	4606      	mov	r6, r0
 800dde0:	10ad      	asrs	r5, r5, #2
 800dde2:	d03d      	beq.n	800de60 <__pow5mult+0xa0>
 800dde4:	69fc      	ldr	r4, [r7, #28]
 800dde6:	b97c      	cbnz	r4, 800de08 <__pow5mult+0x48>
 800dde8:	2010      	movs	r0, #16
 800ddea:	f7ff fd35 	bl	800d858 <malloc>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	61f8      	str	r0, [r7, #28]
 800ddf2:	b928      	cbnz	r0, 800de00 <__pow5mult+0x40>
 800ddf4:	4b1d      	ldr	r3, [pc, #116]	@ (800de6c <__pow5mult+0xac>)
 800ddf6:	481e      	ldr	r0, [pc, #120]	@ (800de70 <__pow5mult+0xb0>)
 800ddf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ddfc:	f001 fcd4 	bl	800f7a8 <__assert_func>
 800de00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de04:	6004      	str	r4, [r0, #0]
 800de06:	60c4      	str	r4, [r0, #12]
 800de08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800de0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de10:	b94c      	cbnz	r4, 800de26 <__pow5mult+0x66>
 800de12:	f240 2171 	movw	r1, #625	@ 0x271
 800de16:	4638      	mov	r0, r7
 800de18:	f7ff ff12 	bl	800dc40 <__i2b>
 800de1c:	2300      	movs	r3, #0
 800de1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800de22:	4604      	mov	r4, r0
 800de24:	6003      	str	r3, [r0, #0]
 800de26:	f04f 0900 	mov.w	r9, #0
 800de2a:	07eb      	lsls	r3, r5, #31
 800de2c:	d50a      	bpl.n	800de44 <__pow5mult+0x84>
 800de2e:	4631      	mov	r1, r6
 800de30:	4622      	mov	r2, r4
 800de32:	4638      	mov	r0, r7
 800de34:	f7ff ff1a 	bl	800dc6c <__multiply>
 800de38:	4631      	mov	r1, r6
 800de3a:	4680      	mov	r8, r0
 800de3c:	4638      	mov	r0, r7
 800de3e:	f7ff fe01 	bl	800da44 <_Bfree>
 800de42:	4646      	mov	r6, r8
 800de44:	106d      	asrs	r5, r5, #1
 800de46:	d00b      	beq.n	800de60 <__pow5mult+0xa0>
 800de48:	6820      	ldr	r0, [r4, #0]
 800de4a:	b938      	cbnz	r0, 800de5c <__pow5mult+0x9c>
 800de4c:	4622      	mov	r2, r4
 800de4e:	4621      	mov	r1, r4
 800de50:	4638      	mov	r0, r7
 800de52:	f7ff ff0b 	bl	800dc6c <__multiply>
 800de56:	6020      	str	r0, [r4, #0]
 800de58:	f8c0 9000 	str.w	r9, [r0]
 800de5c:	4604      	mov	r4, r0
 800de5e:	e7e4      	b.n	800de2a <__pow5mult+0x6a>
 800de60:	4630      	mov	r0, r6
 800de62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de66:	bf00      	nop
 800de68:	08010308 	.word	0x08010308
 800de6c:	0801022e 	.word	0x0801022e
 800de70:	080102ae 	.word	0x080102ae

0800de74 <__lshift>:
 800de74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de78:	460c      	mov	r4, r1
 800de7a:	6849      	ldr	r1, [r1, #4]
 800de7c:	6923      	ldr	r3, [r4, #16]
 800de7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de82:	68a3      	ldr	r3, [r4, #8]
 800de84:	4607      	mov	r7, r0
 800de86:	4691      	mov	r9, r2
 800de88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de8c:	f108 0601 	add.w	r6, r8, #1
 800de90:	42b3      	cmp	r3, r6
 800de92:	db0b      	blt.n	800deac <__lshift+0x38>
 800de94:	4638      	mov	r0, r7
 800de96:	f7ff fd95 	bl	800d9c4 <_Balloc>
 800de9a:	4605      	mov	r5, r0
 800de9c:	b948      	cbnz	r0, 800deb2 <__lshift+0x3e>
 800de9e:	4602      	mov	r2, r0
 800dea0:	4b28      	ldr	r3, [pc, #160]	@ (800df44 <__lshift+0xd0>)
 800dea2:	4829      	ldr	r0, [pc, #164]	@ (800df48 <__lshift+0xd4>)
 800dea4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dea8:	f001 fc7e 	bl	800f7a8 <__assert_func>
 800deac:	3101      	adds	r1, #1
 800deae:	005b      	lsls	r3, r3, #1
 800deb0:	e7ee      	b.n	800de90 <__lshift+0x1c>
 800deb2:	2300      	movs	r3, #0
 800deb4:	f100 0114 	add.w	r1, r0, #20
 800deb8:	f100 0210 	add.w	r2, r0, #16
 800debc:	4618      	mov	r0, r3
 800debe:	4553      	cmp	r3, sl
 800dec0:	db33      	blt.n	800df2a <__lshift+0xb6>
 800dec2:	6920      	ldr	r0, [r4, #16]
 800dec4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dec8:	f104 0314 	add.w	r3, r4, #20
 800decc:	f019 091f 	ands.w	r9, r9, #31
 800ded0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ded4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ded8:	d02b      	beq.n	800df32 <__lshift+0xbe>
 800deda:	f1c9 0e20 	rsb	lr, r9, #32
 800dede:	468a      	mov	sl, r1
 800dee0:	2200      	movs	r2, #0
 800dee2:	6818      	ldr	r0, [r3, #0]
 800dee4:	fa00 f009 	lsl.w	r0, r0, r9
 800dee8:	4310      	orrs	r0, r2
 800deea:	f84a 0b04 	str.w	r0, [sl], #4
 800deee:	f853 2b04 	ldr.w	r2, [r3], #4
 800def2:	459c      	cmp	ip, r3
 800def4:	fa22 f20e 	lsr.w	r2, r2, lr
 800def8:	d8f3      	bhi.n	800dee2 <__lshift+0x6e>
 800defa:	ebac 0304 	sub.w	r3, ip, r4
 800defe:	3b15      	subs	r3, #21
 800df00:	f023 0303 	bic.w	r3, r3, #3
 800df04:	3304      	adds	r3, #4
 800df06:	f104 0015 	add.w	r0, r4, #21
 800df0a:	4584      	cmp	ip, r0
 800df0c:	bf38      	it	cc
 800df0e:	2304      	movcc	r3, #4
 800df10:	50ca      	str	r2, [r1, r3]
 800df12:	b10a      	cbz	r2, 800df18 <__lshift+0xa4>
 800df14:	f108 0602 	add.w	r6, r8, #2
 800df18:	3e01      	subs	r6, #1
 800df1a:	4638      	mov	r0, r7
 800df1c:	612e      	str	r6, [r5, #16]
 800df1e:	4621      	mov	r1, r4
 800df20:	f7ff fd90 	bl	800da44 <_Bfree>
 800df24:	4628      	mov	r0, r5
 800df26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800df2e:	3301      	adds	r3, #1
 800df30:	e7c5      	b.n	800debe <__lshift+0x4a>
 800df32:	3904      	subs	r1, #4
 800df34:	f853 2b04 	ldr.w	r2, [r3], #4
 800df38:	f841 2f04 	str.w	r2, [r1, #4]!
 800df3c:	459c      	cmp	ip, r3
 800df3e:	d8f9      	bhi.n	800df34 <__lshift+0xc0>
 800df40:	e7ea      	b.n	800df18 <__lshift+0xa4>
 800df42:	bf00      	nop
 800df44:	0801029d 	.word	0x0801029d
 800df48:	080102ae 	.word	0x080102ae

0800df4c <__mcmp>:
 800df4c:	690a      	ldr	r2, [r1, #16]
 800df4e:	4603      	mov	r3, r0
 800df50:	6900      	ldr	r0, [r0, #16]
 800df52:	1a80      	subs	r0, r0, r2
 800df54:	b530      	push	{r4, r5, lr}
 800df56:	d10e      	bne.n	800df76 <__mcmp+0x2a>
 800df58:	3314      	adds	r3, #20
 800df5a:	3114      	adds	r1, #20
 800df5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df6c:	4295      	cmp	r5, r2
 800df6e:	d003      	beq.n	800df78 <__mcmp+0x2c>
 800df70:	d205      	bcs.n	800df7e <__mcmp+0x32>
 800df72:	f04f 30ff 	mov.w	r0, #4294967295
 800df76:	bd30      	pop	{r4, r5, pc}
 800df78:	42a3      	cmp	r3, r4
 800df7a:	d3f3      	bcc.n	800df64 <__mcmp+0x18>
 800df7c:	e7fb      	b.n	800df76 <__mcmp+0x2a>
 800df7e:	2001      	movs	r0, #1
 800df80:	e7f9      	b.n	800df76 <__mcmp+0x2a>
	...

0800df84 <__mdiff>:
 800df84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df88:	4689      	mov	r9, r1
 800df8a:	4606      	mov	r6, r0
 800df8c:	4611      	mov	r1, r2
 800df8e:	4648      	mov	r0, r9
 800df90:	4614      	mov	r4, r2
 800df92:	f7ff ffdb 	bl	800df4c <__mcmp>
 800df96:	1e05      	subs	r5, r0, #0
 800df98:	d112      	bne.n	800dfc0 <__mdiff+0x3c>
 800df9a:	4629      	mov	r1, r5
 800df9c:	4630      	mov	r0, r6
 800df9e:	f7ff fd11 	bl	800d9c4 <_Balloc>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	b928      	cbnz	r0, 800dfb2 <__mdiff+0x2e>
 800dfa6:	4b3f      	ldr	r3, [pc, #252]	@ (800e0a4 <__mdiff+0x120>)
 800dfa8:	f240 2137 	movw	r1, #567	@ 0x237
 800dfac:	483e      	ldr	r0, [pc, #248]	@ (800e0a8 <__mdiff+0x124>)
 800dfae:	f001 fbfb 	bl	800f7a8 <__assert_func>
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dfb8:	4610      	mov	r0, r2
 800dfba:	b003      	add	sp, #12
 800dfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc0:	bfbc      	itt	lt
 800dfc2:	464b      	movlt	r3, r9
 800dfc4:	46a1      	movlt	r9, r4
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dfcc:	bfba      	itte	lt
 800dfce:	461c      	movlt	r4, r3
 800dfd0:	2501      	movlt	r5, #1
 800dfd2:	2500      	movge	r5, #0
 800dfd4:	f7ff fcf6 	bl	800d9c4 <_Balloc>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	b918      	cbnz	r0, 800dfe4 <__mdiff+0x60>
 800dfdc:	4b31      	ldr	r3, [pc, #196]	@ (800e0a4 <__mdiff+0x120>)
 800dfde:	f240 2145 	movw	r1, #581	@ 0x245
 800dfe2:	e7e3      	b.n	800dfac <__mdiff+0x28>
 800dfe4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dfe8:	6926      	ldr	r6, [r4, #16]
 800dfea:	60c5      	str	r5, [r0, #12]
 800dfec:	f109 0310 	add.w	r3, r9, #16
 800dff0:	f109 0514 	add.w	r5, r9, #20
 800dff4:	f104 0e14 	add.w	lr, r4, #20
 800dff8:	f100 0b14 	add.w	fp, r0, #20
 800dffc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e000:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e004:	9301      	str	r3, [sp, #4]
 800e006:	46d9      	mov	r9, fp
 800e008:	f04f 0c00 	mov.w	ip, #0
 800e00c:	9b01      	ldr	r3, [sp, #4]
 800e00e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e012:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e016:	9301      	str	r3, [sp, #4]
 800e018:	fa1f f38a 	uxth.w	r3, sl
 800e01c:	4619      	mov	r1, r3
 800e01e:	b283      	uxth	r3, r0
 800e020:	1acb      	subs	r3, r1, r3
 800e022:	0c00      	lsrs	r0, r0, #16
 800e024:	4463      	add	r3, ip
 800e026:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e02a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e02e:	b29b      	uxth	r3, r3
 800e030:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e034:	4576      	cmp	r6, lr
 800e036:	f849 3b04 	str.w	r3, [r9], #4
 800e03a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e03e:	d8e5      	bhi.n	800e00c <__mdiff+0x88>
 800e040:	1b33      	subs	r3, r6, r4
 800e042:	3b15      	subs	r3, #21
 800e044:	f023 0303 	bic.w	r3, r3, #3
 800e048:	3415      	adds	r4, #21
 800e04a:	3304      	adds	r3, #4
 800e04c:	42a6      	cmp	r6, r4
 800e04e:	bf38      	it	cc
 800e050:	2304      	movcc	r3, #4
 800e052:	441d      	add	r5, r3
 800e054:	445b      	add	r3, fp
 800e056:	461e      	mov	r6, r3
 800e058:	462c      	mov	r4, r5
 800e05a:	4544      	cmp	r4, r8
 800e05c:	d30e      	bcc.n	800e07c <__mdiff+0xf8>
 800e05e:	f108 0103 	add.w	r1, r8, #3
 800e062:	1b49      	subs	r1, r1, r5
 800e064:	f021 0103 	bic.w	r1, r1, #3
 800e068:	3d03      	subs	r5, #3
 800e06a:	45a8      	cmp	r8, r5
 800e06c:	bf38      	it	cc
 800e06e:	2100      	movcc	r1, #0
 800e070:	440b      	add	r3, r1
 800e072:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e076:	b191      	cbz	r1, 800e09e <__mdiff+0x11a>
 800e078:	6117      	str	r7, [r2, #16]
 800e07a:	e79d      	b.n	800dfb8 <__mdiff+0x34>
 800e07c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e080:	46e6      	mov	lr, ip
 800e082:	0c08      	lsrs	r0, r1, #16
 800e084:	fa1c fc81 	uxtah	ip, ip, r1
 800e088:	4471      	add	r1, lr
 800e08a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e08e:	b289      	uxth	r1, r1
 800e090:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e094:	f846 1b04 	str.w	r1, [r6], #4
 800e098:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e09c:	e7dd      	b.n	800e05a <__mdiff+0xd6>
 800e09e:	3f01      	subs	r7, #1
 800e0a0:	e7e7      	b.n	800e072 <__mdiff+0xee>
 800e0a2:	bf00      	nop
 800e0a4:	0801029d 	.word	0x0801029d
 800e0a8:	080102ae 	.word	0x080102ae

0800e0ac <__ulp>:
 800e0ac:	b082      	sub	sp, #8
 800e0ae:	ed8d 0b00 	vstr	d0, [sp]
 800e0b2:	9a01      	ldr	r2, [sp, #4]
 800e0b4:	4b0f      	ldr	r3, [pc, #60]	@ (800e0f4 <__ulp+0x48>)
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	dc08      	bgt.n	800e0d2 <__ulp+0x26>
 800e0c0:	425b      	negs	r3, r3
 800e0c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e0c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e0ca:	da04      	bge.n	800e0d6 <__ulp+0x2a>
 800e0cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e0d0:	4113      	asrs	r3, r2
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	e008      	b.n	800e0e8 <__ulp+0x3c>
 800e0d6:	f1a2 0314 	sub.w	r3, r2, #20
 800e0da:	2b1e      	cmp	r3, #30
 800e0dc:	bfda      	itte	le
 800e0de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e0e2:	40da      	lsrle	r2, r3
 800e0e4:	2201      	movgt	r2, #1
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	ec41 0b10 	vmov	d0, r0, r1
 800e0f0:	b002      	add	sp, #8
 800e0f2:	4770      	bx	lr
 800e0f4:	7ff00000 	.word	0x7ff00000

0800e0f8 <__b2d>:
 800e0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fc:	6906      	ldr	r6, [r0, #16]
 800e0fe:	f100 0814 	add.w	r8, r0, #20
 800e102:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e106:	1f37      	subs	r7, r6, #4
 800e108:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e10c:	4610      	mov	r0, r2
 800e10e:	f7ff fd4b 	bl	800dba8 <__hi0bits>
 800e112:	f1c0 0320 	rsb	r3, r0, #32
 800e116:	280a      	cmp	r0, #10
 800e118:	600b      	str	r3, [r1, #0]
 800e11a:	491b      	ldr	r1, [pc, #108]	@ (800e188 <__b2d+0x90>)
 800e11c:	dc15      	bgt.n	800e14a <__b2d+0x52>
 800e11e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e122:	fa22 f30c 	lsr.w	r3, r2, ip
 800e126:	45b8      	cmp	r8, r7
 800e128:	ea43 0501 	orr.w	r5, r3, r1
 800e12c:	bf34      	ite	cc
 800e12e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e132:	2300      	movcs	r3, #0
 800e134:	3015      	adds	r0, #21
 800e136:	fa02 f000 	lsl.w	r0, r2, r0
 800e13a:	fa23 f30c 	lsr.w	r3, r3, ip
 800e13e:	4303      	orrs	r3, r0
 800e140:	461c      	mov	r4, r3
 800e142:	ec45 4b10 	vmov	d0, r4, r5
 800e146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e14a:	45b8      	cmp	r8, r7
 800e14c:	bf3a      	itte	cc
 800e14e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e152:	f1a6 0708 	subcc.w	r7, r6, #8
 800e156:	2300      	movcs	r3, #0
 800e158:	380b      	subs	r0, #11
 800e15a:	d012      	beq.n	800e182 <__b2d+0x8a>
 800e15c:	f1c0 0120 	rsb	r1, r0, #32
 800e160:	fa23 f401 	lsr.w	r4, r3, r1
 800e164:	4082      	lsls	r2, r0
 800e166:	4322      	orrs	r2, r4
 800e168:	4547      	cmp	r7, r8
 800e16a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e16e:	bf8c      	ite	hi
 800e170:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e174:	2200      	movls	r2, #0
 800e176:	4083      	lsls	r3, r0
 800e178:	40ca      	lsrs	r2, r1
 800e17a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e17e:	4313      	orrs	r3, r2
 800e180:	e7de      	b.n	800e140 <__b2d+0x48>
 800e182:	ea42 0501 	orr.w	r5, r2, r1
 800e186:	e7db      	b.n	800e140 <__b2d+0x48>
 800e188:	3ff00000 	.word	0x3ff00000

0800e18c <__d2b>:
 800e18c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e190:	460f      	mov	r7, r1
 800e192:	2101      	movs	r1, #1
 800e194:	ec59 8b10 	vmov	r8, r9, d0
 800e198:	4616      	mov	r6, r2
 800e19a:	f7ff fc13 	bl	800d9c4 <_Balloc>
 800e19e:	4604      	mov	r4, r0
 800e1a0:	b930      	cbnz	r0, 800e1b0 <__d2b+0x24>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	4b23      	ldr	r3, [pc, #140]	@ (800e234 <__d2b+0xa8>)
 800e1a6:	4824      	ldr	r0, [pc, #144]	@ (800e238 <__d2b+0xac>)
 800e1a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800e1ac:	f001 fafc 	bl	800f7a8 <__assert_func>
 800e1b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e1b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e1b8:	b10d      	cbz	r5, 800e1be <__d2b+0x32>
 800e1ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e1be:	9301      	str	r3, [sp, #4]
 800e1c0:	f1b8 0300 	subs.w	r3, r8, #0
 800e1c4:	d023      	beq.n	800e20e <__d2b+0x82>
 800e1c6:	4668      	mov	r0, sp
 800e1c8:	9300      	str	r3, [sp, #0]
 800e1ca:	f7ff fd0c 	bl	800dbe6 <__lo0bits>
 800e1ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e1d2:	b1d0      	cbz	r0, 800e20a <__d2b+0x7e>
 800e1d4:	f1c0 0320 	rsb	r3, r0, #32
 800e1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1dc:	430b      	orrs	r3, r1
 800e1de:	40c2      	lsrs	r2, r0
 800e1e0:	6163      	str	r3, [r4, #20]
 800e1e2:	9201      	str	r2, [sp, #4]
 800e1e4:	9b01      	ldr	r3, [sp, #4]
 800e1e6:	61a3      	str	r3, [r4, #24]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	bf0c      	ite	eq
 800e1ec:	2201      	moveq	r2, #1
 800e1ee:	2202      	movne	r2, #2
 800e1f0:	6122      	str	r2, [r4, #16]
 800e1f2:	b1a5      	cbz	r5, 800e21e <__d2b+0x92>
 800e1f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e1f8:	4405      	add	r5, r0
 800e1fa:	603d      	str	r5, [r7, #0]
 800e1fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e200:	6030      	str	r0, [r6, #0]
 800e202:	4620      	mov	r0, r4
 800e204:	b003      	add	sp, #12
 800e206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e20a:	6161      	str	r1, [r4, #20]
 800e20c:	e7ea      	b.n	800e1e4 <__d2b+0x58>
 800e20e:	a801      	add	r0, sp, #4
 800e210:	f7ff fce9 	bl	800dbe6 <__lo0bits>
 800e214:	9b01      	ldr	r3, [sp, #4]
 800e216:	6163      	str	r3, [r4, #20]
 800e218:	3020      	adds	r0, #32
 800e21a:	2201      	movs	r2, #1
 800e21c:	e7e8      	b.n	800e1f0 <__d2b+0x64>
 800e21e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e222:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e226:	6038      	str	r0, [r7, #0]
 800e228:	6918      	ldr	r0, [r3, #16]
 800e22a:	f7ff fcbd 	bl	800dba8 <__hi0bits>
 800e22e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e232:	e7e5      	b.n	800e200 <__d2b+0x74>
 800e234:	0801029d 	.word	0x0801029d
 800e238:	080102ae 	.word	0x080102ae

0800e23c <__ratio>:
 800e23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e240:	4688      	mov	r8, r1
 800e242:	4669      	mov	r1, sp
 800e244:	4681      	mov	r9, r0
 800e246:	f7ff ff57 	bl	800e0f8 <__b2d>
 800e24a:	a901      	add	r1, sp, #4
 800e24c:	4640      	mov	r0, r8
 800e24e:	ec55 4b10 	vmov	r4, r5, d0
 800e252:	f7ff ff51 	bl	800e0f8 <__b2d>
 800e256:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e25a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e25e:	1ad2      	subs	r2, r2, r3
 800e260:	e9dd 3100 	ldrd	r3, r1, [sp]
 800e264:	1a5b      	subs	r3, r3, r1
 800e266:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800e26a:	ec57 6b10 	vmov	r6, r7, d0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	bfd6      	itet	le
 800e272:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e276:	462a      	movgt	r2, r5
 800e278:	463a      	movle	r2, r7
 800e27a:	46ab      	mov	fp, r5
 800e27c:	46a2      	mov	sl, r4
 800e27e:	bfce      	itee	gt
 800e280:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e284:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e288:	ee00 3a90 	vmovle	s1, r3
 800e28c:	ec4b ab17 	vmov	d7, sl, fp
 800e290:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e294:	b003      	add	sp, #12
 800e296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e29a <__copybits>:
 800e29a:	3901      	subs	r1, #1
 800e29c:	b570      	push	{r4, r5, r6, lr}
 800e29e:	1149      	asrs	r1, r1, #5
 800e2a0:	6914      	ldr	r4, [r2, #16]
 800e2a2:	3101      	adds	r1, #1
 800e2a4:	f102 0314 	add.w	r3, r2, #20
 800e2a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e2ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e2b0:	1f05      	subs	r5, r0, #4
 800e2b2:	42a3      	cmp	r3, r4
 800e2b4:	d30c      	bcc.n	800e2d0 <__copybits+0x36>
 800e2b6:	1aa3      	subs	r3, r4, r2
 800e2b8:	3b11      	subs	r3, #17
 800e2ba:	f023 0303 	bic.w	r3, r3, #3
 800e2be:	3211      	adds	r2, #17
 800e2c0:	42a2      	cmp	r2, r4
 800e2c2:	bf88      	it	hi
 800e2c4:	2300      	movhi	r3, #0
 800e2c6:	4418      	add	r0, r3
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	4288      	cmp	r0, r1
 800e2cc:	d305      	bcc.n	800e2da <__copybits+0x40>
 800e2ce:	bd70      	pop	{r4, r5, r6, pc}
 800e2d0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e2d4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e2d8:	e7eb      	b.n	800e2b2 <__copybits+0x18>
 800e2da:	f840 3b04 	str.w	r3, [r0], #4
 800e2de:	e7f4      	b.n	800e2ca <__copybits+0x30>

0800e2e0 <__any_on>:
 800e2e0:	f100 0214 	add.w	r2, r0, #20
 800e2e4:	6900      	ldr	r0, [r0, #16]
 800e2e6:	114b      	asrs	r3, r1, #5
 800e2e8:	4298      	cmp	r0, r3
 800e2ea:	b510      	push	{r4, lr}
 800e2ec:	db11      	blt.n	800e312 <__any_on+0x32>
 800e2ee:	dd0a      	ble.n	800e306 <__any_on+0x26>
 800e2f0:	f011 011f 	ands.w	r1, r1, #31
 800e2f4:	d007      	beq.n	800e306 <__any_on+0x26>
 800e2f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2fa:	fa24 f001 	lsr.w	r0, r4, r1
 800e2fe:	fa00 f101 	lsl.w	r1, r0, r1
 800e302:	428c      	cmp	r4, r1
 800e304:	d10b      	bne.n	800e31e <__any_on+0x3e>
 800e306:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d803      	bhi.n	800e316 <__any_on+0x36>
 800e30e:	2000      	movs	r0, #0
 800e310:	bd10      	pop	{r4, pc}
 800e312:	4603      	mov	r3, r0
 800e314:	e7f7      	b.n	800e306 <__any_on+0x26>
 800e316:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e31a:	2900      	cmp	r1, #0
 800e31c:	d0f5      	beq.n	800e30a <__any_on+0x2a>
 800e31e:	2001      	movs	r0, #1
 800e320:	e7f6      	b.n	800e310 <__any_on+0x30>

0800e322 <sulp>:
 800e322:	b570      	push	{r4, r5, r6, lr}
 800e324:	4604      	mov	r4, r0
 800e326:	460d      	mov	r5, r1
 800e328:	4616      	mov	r6, r2
 800e32a:	ec45 4b10 	vmov	d0, r4, r5
 800e32e:	f7ff febd 	bl	800e0ac <__ulp>
 800e332:	b17e      	cbz	r6, 800e354 <sulp+0x32>
 800e334:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e338:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	dd09      	ble.n	800e354 <sulp+0x32>
 800e340:	051b      	lsls	r3, r3, #20
 800e342:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e346:	2000      	movs	r0, #0
 800e348:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e34c:	ec41 0b17 	vmov	d7, r0, r1
 800e350:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e354:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e358 <_strtod_l>:
 800e358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e35c:	ed2d 8b0a 	vpush	{d8-d12}
 800e360:	b097      	sub	sp, #92	@ 0x5c
 800e362:	4688      	mov	r8, r1
 800e364:	920e      	str	r2, [sp, #56]	@ 0x38
 800e366:	2200      	movs	r2, #0
 800e368:	9212      	str	r2, [sp, #72]	@ 0x48
 800e36a:	9005      	str	r0, [sp, #20]
 800e36c:	f04f 0a00 	mov.w	sl, #0
 800e370:	f04f 0b00 	mov.w	fp, #0
 800e374:	460a      	mov	r2, r1
 800e376:	9211      	str	r2, [sp, #68]	@ 0x44
 800e378:	7811      	ldrb	r1, [r2, #0]
 800e37a:	292b      	cmp	r1, #43	@ 0x2b
 800e37c:	d04c      	beq.n	800e418 <_strtod_l+0xc0>
 800e37e:	d839      	bhi.n	800e3f4 <_strtod_l+0x9c>
 800e380:	290d      	cmp	r1, #13
 800e382:	d833      	bhi.n	800e3ec <_strtod_l+0x94>
 800e384:	2908      	cmp	r1, #8
 800e386:	d833      	bhi.n	800e3f0 <_strtod_l+0x98>
 800e388:	2900      	cmp	r1, #0
 800e38a:	d03c      	beq.n	800e406 <_strtod_l+0xae>
 800e38c:	2200      	movs	r2, #0
 800e38e:	9208      	str	r2, [sp, #32]
 800e390:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e392:	782a      	ldrb	r2, [r5, #0]
 800e394:	2a30      	cmp	r2, #48	@ 0x30
 800e396:	f040 80b5 	bne.w	800e504 <_strtod_l+0x1ac>
 800e39a:	786a      	ldrb	r2, [r5, #1]
 800e39c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e3a0:	2a58      	cmp	r2, #88	@ 0x58
 800e3a2:	d170      	bne.n	800e486 <_strtod_l+0x12e>
 800e3a4:	9302      	str	r3, [sp, #8]
 800e3a6:	9b08      	ldr	r3, [sp, #32]
 800e3a8:	9301      	str	r3, [sp, #4]
 800e3aa:	ab12      	add	r3, sp, #72	@ 0x48
 800e3ac:	9300      	str	r3, [sp, #0]
 800e3ae:	4a8b      	ldr	r2, [pc, #556]	@ (800e5dc <_strtod_l+0x284>)
 800e3b0:	9805      	ldr	r0, [sp, #20]
 800e3b2:	ab13      	add	r3, sp, #76	@ 0x4c
 800e3b4:	a911      	add	r1, sp, #68	@ 0x44
 800e3b6:	f001 fa91 	bl	800f8dc <__gethex>
 800e3ba:	f010 060f 	ands.w	r6, r0, #15
 800e3be:	4604      	mov	r4, r0
 800e3c0:	d005      	beq.n	800e3ce <_strtod_l+0x76>
 800e3c2:	2e06      	cmp	r6, #6
 800e3c4:	d12a      	bne.n	800e41c <_strtod_l+0xc4>
 800e3c6:	3501      	adds	r5, #1
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	9511      	str	r5, [sp, #68]	@ 0x44
 800e3cc:	9308      	str	r3, [sp, #32]
 800e3ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f040 852f 	bne.w	800ee34 <_strtod_l+0xadc>
 800e3d6:	9b08      	ldr	r3, [sp, #32]
 800e3d8:	ec4b ab10 	vmov	d0, sl, fp
 800e3dc:	b1cb      	cbz	r3, 800e412 <_strtod_l+0xba>
 800e3de:	eeb1 0b40 	vneg.f64	d0, d0
 800e3e2:	b017      	add	sp, #92	@ 0x5c
 800e3e4:	ecbd 8b0a 	vpop	{d8-d12}
 800e3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ec:	2920      	cmp	r1, #32
 800e3ee:	d1cd      	bne.n	800e38c <_strtod_l+0x34>
 800e3f0:	3201      	adds	r2, #1
 800e3f2:	e7c0      	b.n	800e376 <_strtod_l+0x1e>
 800e3f4:	292d      	cmp	r1, #45	@ 0x2d
 800e3f6:	d1c9      	bne.n	800e38c <_strtod_l+0x34>
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	9108      	str	r1, [sp, #32]
 800e3fc:	1c51      	adds	r1, r2, #1
 800e3fe:	9111      	str	r1, [sp, #68]	@ 0x44
 800e400:	7852      	ldrb	r2, [r2, #1]
 800e402:	2a00      	cmp	r2, #0
 800e404:	d1c4      	bne.n	800e390 <_strtod_l+0x38>
 800e406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e408:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f040 850f 	bne.w	800ee30 <_strtod_l+0xad8>
 800e412:	ec4b ab10 	vmov	d0, sl, fp
 800e416:	e7e4      	b.n	800e3e2 <_strtod_l+0x8a>
 800e418:	2100      	movs	r1, #0
 800e41a:	e7ee      	b.n	800e3fa <_strtod_l+0xa2>
 800e41c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e41e:	b13a      	cbz	r2, 800e430 <_strtod_l+0xd8>
 800e420:	2135      	movs	r1, #53	@ 0x35
 800e422:	a814      	add	r0, sp, #80	@ 0x50
 800e424:	f7ff ff39 	bl	800e29a <__copybits>
 800e428:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e42a:	9805      	ldr	r0, [sp, #20]
 800e42c:	f7ff fb0a 	bl	800da44 <_Bfree>
 800e430:	1e73      	subs	r3, r6, #1
 800e432:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e434:	2b04      	cmp	r3, #4
 800e436:	d806      	bhi.n	800e446 <_strtod_l+0xee>
 800e438:	e8df f003 	tbb	[pc, r3]
 800e43c:	201d0314 	.word	0x201d0314
 800e440:	14          	.byte	0x14
 800e441:	00          	.byte	0x00
 800e442:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e446:	05e3      	lsls	r3, r4, #23
 800e448:	bf48      	it	mi
 800e44a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e44e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e452:	0d1b      	lsrs	r3, r3, #20
 800e454:	051b      	lsls	r3, r3, #20
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1b9      	bne.n	800e3ce <_strtod_l+0x76>
 800e45a:	f7fe fb91 	bl	800cb80 <__errno>
 800e45e:	2322      	movs	r3, #34	@ 0x22
 800e460:	6003      	str	r3, [r0, #0]
 800e462:	e7b4      	b.n	800e3ce <_strtod_l+0x76>
 800e464:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e468:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e46c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e470:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e474:	e7e7      	b.n	800e446 <_strtod_l+0xee>
 800e476:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e5e4 <_strtod_l+0x28c>
 800e47a:	e7e4      	b.n	800e446 <_strtod_l+0xee>
 800e47c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e480:	f04f 3aff 	mov.w	sl, #4294967295
 800e484:	e7df      	b.n	800e446 <_strtod_l+0xee>
 800e486:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e488:	1c5a      	adds	r2, r3, #1
 800e48a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e48c:	785b      	ldrb	r3, [r3, #1]
 800e48e:	2b30      	cmp	r3, #48	@ 0x30
 800e490:	d0f9      	beq.n	800e486 <_strtod_l+0x12e>
 800e492:	2b00      	cmp	r3, #0
 800e494:	d09b      	beq.n	800e3ce <_strtod_l+0x76>
 800e496:	2301      	movs	r3, #1
 800e498:	2600      	movs	r6, #0
 800e49a:	9307      	str	r3, [sp, #28]
 800e49c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e49e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4a0:	46b1      	mov	r9, r6
 800e4a2:	4635      	mov	r5, r6
 800e4a4:	220a      	movs	r2, #10
 800e4a6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e4a8:	7804      	ldrb	r4, [r0, #0]
 800e4aa:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e4ae:	b2d9      	uxtb	r1, r3
 800e4b0:	2909      	cmp	r1, #9
 800e4b2:	d929      	bls.n	800e508 <_strtod_l+0x1b0>
 800e4b4:	494a      	ldr	r1, [pc, #296]	@ (800e5e0 <_strtod_l+0x288>)
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f001 f928 	bl	800f70c <strncmp>
 800e4bc:	b378      	cbz	r0, 800e51e <_strtod_l+0x1c6>
 800e4be:	2000      	movs	r0, #0
 800e4c0:	4622      	mov	r2, r4
 800e4c2:	462b      	mov	r3, r5
 800e4c4:	4607      	mov	r7, r0
 800e4c6:	9006      	str	r0, [sp, #24]
 800e4c8:	2a65      	cmp	r2, #101	@ 0x65
 800e4ca:	d001      	beq.n	800e4d0 <_strtod_l+0x178>
 800e4cc:	2a45      	cmp	r2, #69	@ 0x45
 800e4ce:	d117      	bne.n	800e500 <_strtod_l+0x1a8>
 800e4d0:	b91b      	cbnz	r3, 800e4da <_strtod_l+0x182>
 800e4d2:	9b07      	ldr	r3, [sp, #28]
 800e4d4:	4303      	orrs	r3, r0
 800e4d6:	d096      	beq.n	800e406 <_strtod_l+0xae>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e4de:	f108 0201 	add.w	r2, r8, #1
 800e4e2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e4e4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e4e8:	2a2b      	cmp	r2, #43	@ 0x2b
 800e4ea:	d06b      	beq.n	800e5c4 <_strtod_l+0x26c>
 800e4ec:	2a2d      	cmp	r2, #45	@ 0x2d
 800e4ee:	d071      	beq.n	800e5d4 <_strtod_l+0x27c>
 800e4f0:	f04f 0e00 	mov.w	lr, #0
 800e4f4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e4f8:	2c09      	cmp	r4, #9
 800e4fa:	d979      	bls.n	800e5f0 <_strtod_l+0x298>
 800e4fc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e500:	2400      	movs	r4, #0
 800e502:	e094      	b.n	800e62e <_strtod_l+0x2d6>
 800e504:	2300      	movs	r3, #0
 800e506:	e7c7      	b.n	800e498 <_strtod_l+0x140>
 800e508:	2d08      	cmp	r5, #8
 800e50a:	f100 0001 	add.w	r0, r0, #1
 800e50e:	bfd4      	ite	le
 800e510:	fb02 3909 	mlale	r9, r2, r9, r3
 800e514:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e518:	3501      	adds	r5, #1
 800e51a:	9011      	str	r0, [sp, #68]	@ 0x44
 800e51c:	e7c3      	b.n	800e4a6 <_strtod_l+0x14e>
 800e51e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e520:	1c5a      	adds	r2, r3, #1
 800e522:	9211      	str	r2, [sp, #68]	@ 0x44
 800e524:	785a      	ldrb	r2, [r3, #1]
 800e526:	b375      	cbz	r5, 800e586 <_strtod_l+0x22e>
 800e528:	4607      	mov	r7, r0
 800e52a:	462b      	mov	r3, r5
 800e52c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e530:	2909      	cmp	r1, #9
 800e532:	d913      	bls.n	800e55c <_strtod_l+0x204>
 800e534:	2101      	movs	r1, #1
 800e536:	9106      	str	r1, [sp, #24]
 800e538:	e7c6      	b.n	800e4c8 <_strtod_l+0x170>
 800e53a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e53c:	1c5a      	adds	r2, r3, #1
 800e53e:	9211      	str	r2, [sp, #68]	@ 0x44
 800e540:	785a      	ldrb	r2, [r3, #1]
 800e542:	3001      	adds	r0, #1
 800e544:	2a30      	cmp	r2, #48	@ 0x30
 800e546:	d0f8      	beq.n	800e53a <_strtod_l+0x1e2>
 800e548:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e54c:	2b08      	cmp	r3, #8
 800e54e:	f200 8476 	bhi.w	800ee3e <_strtod_l+0xae6>
 800e552:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e554:	930a      	str	r3, [sp, #40]	@ 0x28
 800e556:	4607      	mov	r7, r0
 800e558:	2000      	movs	r0, #0
 800e55a:	4603      	mov	r3, r0
 800e55c:	3a30      	subs	r2, #48	@ 0x30
 800e55e:	f100 0101 	add.w	r1, r0, #1
 800e562:	d023      	beq.n	800e5ac <_strtod_l+0x254>
 800e564:	440f      	add	r7, r1
 800e566:	eb00 0c03 	add.w	ip, r0, r3
 800e56a:	4619      	mov	r1, r3
 800e56c:	240a      	movs	r4, #10
 800e56e:	4561      	cmp	r1, ip
 800e570:	d10b      	bne.n	800e58a <_strtod_l+0x232>
 800e572:	1c5c      	adds	r4, r3, #1
 800e574:	4403      	add	r3, r0
 800e576:	2b08      	cmp	r3, #8
 800e578:	4404      	add	r4, r0
 800e57a:	dc11      	bgt.n	800e5a0 <_strtod_l+0x248>
 800e57c:	230a      	movs	r3, #10
 800e57e:	fb03 2909 	mla	r9, r3, r9, r2
 800e582:	2100      	movs	r1, #0
 800e584:	e013      	b.n	800e5ae <_strtod_l+0x256>
 800e586:	4628      	mov	r0, r5
 800e588:	e7dc      	b.n	800e544 <_strtod_l+0x1ec>
 800e58a:	2908      	cmp	r1, #8
 800e58c:	f101 0101 	add.w	r1, r1, #1
 800e590:	dc02      	bgt.n	800e598 <_strtod_l+0x240>
 800e592:	fb04 f909 	mul.w	r9, r4, r9
 800e596:	e7ea      	b.n	800e56e <_strtod_l+0x216>
 800e598:	2910      	cmp	r1, #16
 800e59a:	bfd8      	it	le
 800e59c:	4366      	mulle	r6, r4
 800e59e:	e7e6      	b.n	800e56e <_strtod_l+0x216>
 800e5a0:	2b0f      	cmp	r3, #15
 800e5a2:	dcee      	bgt.n	800e582 <_strtod_l+0x22a>
 800e5a4:	230a      	movs	r3, #10
 800e5a6:	fb03 2606 	mla	r6, r3, r6, r2
 800e5aa:	e7ea      	b.n	800e582 <_strtod_l+0x22a>
 800e5ac:	461c      	mov	r4, r3
 800e5ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5b0:	1c5a      	adds	r2, r3, #1
 800e5b2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e5b4:	785a      	ldrb	r2, [r3, #1]
 800e5b6:	4608      	mov	r0, r1
 800e5b8:	4623      	mov	r3, r4
 800e5ba:	e7b7      	b.n	800e52c <_strtod_l+0x1d4>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	2700      	movs	r7, #0
 800e5c0:	9306      	str	r3, [sp, #24]
 800e5c2:	e786      	b.n	800e4d2 <_strtod_l+0x17a>
 800e5c4:	f04f 0e00 	mov.w	lr, #0
 800e5c8:	f108 0202 	add.w	r2, r8, #2
 800e5cc:	9211      	str	r2, [sp, #68]	@ 0x44
 800e5ce:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e5d2:	e78f      	b.n	800e4f4 <_strtod_l+0x19c>
 800e5d4:	f04f 0e01 	mov.w	lr, #1
 800e5d8:	e7f6      	b.n	800e5c8 <_strtod_l+0x270>
 800e5da:	bf00      	nop
 800e5dc:	08010420 	.word	0x08010420
 800e5e0:	08010408 	.word	0x08010408
 800e5e4:	7ff00000 	.word	0x7ff00000
 800e5e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e5ea:	1c54      	adds	r4, r2, #1
 800e5ec:	9411      	str	r4, [sp, #68]	@ 0x44
 800e5ee:	7852      	ldrb	r2, [r2, #1]
 800e5f0:	2a30      	cmp	r2, #48	@ 0x30
 800e5f2:	d0f9      	beq.n	800e5e8 <_strtod_l+0x290>
 800e5f4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e5f8:	2c08      	cmp	r4, #8
 800e5fa:	d881      	bhi.n	800e500 <_strtod_l+0x1a8>
 800e5fc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e600:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e602:	9209      	str	r2, [sp, #36]	@ 0x24
 800e604:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e606:	1c51      	adds	r1, r2, #1
 800e608:	9111      	str	r1, [sp, #68]	@ 0x44
 800e60a:	7852      	ldrb	r2, [r2, #1]
 800e60c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e610:	2c09      	cmp	r4, #9
 800e612:	d938      	bls.n	800e686 <_strtod_l+0x32e>
 800e614:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e616:	1b0c      	subs	r4, r1, r4
 800e618:	2c08      	cmp	r4, #8
 800e61a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e61e:	dc02      	bgt.n	800e626 <_strtod_l+0x2ce>
 800e620:	4564      	cmp	r4, ip
 800e622:	bfa8      	it	ge
 800e624:	4664      	movge	r4, ip
 800e626:	f1be 0f00 	cmp.w	lr, #0
 800e62a:	d000      	beq.n	800e62e <_strtod_l+0x2d6>
 800e62c:	4264      	negs	r4, r4
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d14e      	bne.n	800e6d0 <_strtod_l+0x378>
 800e632:	9b07      	ldr	r3, [sp, #28]
 800e634:	4318      	orrs	r0, r3
 800e636:	f47f aeca 	bne.w	800e3ce <_strtod_l+0x76>
 800e63a:	9b06      	ldr	r3, [sp, #24]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f47f aee2 	bne.w	800e406 <_strtod_l+0xae>
 800e642:	2a69      	cmp	r2, #105	@ 0x69
 800e644:	d027      	beq.n	800e696 <_strtod_l+0x33e>
 800e646:	dc24      	bgt.n	800e692 <_strtod_l+0x33a>
 800e648:	2a49      	cmp	r2, #73	@ 0x49
 800e64a:	d024      	beq.n	800e696 <_strtod_l+0x33e>
 800e64c:	2a4e      	cmp	r2, #78	@ 0x4e
 800e64e:	f47f aeda 	bne.w	800e406 <_strtod_l+0xae>
 800e652:	4997      	ldr	r1, [pc, #604]	@ (800e8b0 <_strtod_l+0x558>)
 800e654:	a811      	add	r0, sp, #68	@ 0x44
 800e656:	f001 fb63 	bl	800fd20 <__match>
 800e65a:	2800      	cmp	r0, #0
 800e65c:	f43f aed3 	beq.w	800e406 <_strtod_l+0xae>
 800e660:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	2b28      	cmp	r3, #40	@ 0x28
 800e666:	d12d      	bne.n	800e6c4 <_strtod_l+0x36c>
 800e668:	4992      	ldr	r1, [pc, #584]	@ (800e8b4 <_strtod_l+0x55c>)
 800e66a:	aa14      	add	r2, sp, #80	@ 0x50
 800e66c:	a811      	add	r0, sp, #68	@ 0x44
 800e66e:	f001 fb6b 	bl	800fd48 <__hexnan>
 800e672:	2805      	cmp	r0, #5
 800e674:	d126      	bne.n	800e6c4 <_strtod_l+0x36c>
 800e676:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e678:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e67c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e680:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e684:	e6a3      	b.n	800e3ce <_strtod_l+0x76>
 800e686:	240a      	movs	r4, #10
 800e688:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e68c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e690:	e7b8      	b.n	800e604 <_strtod_l+0x2ac>
 800e692:	2a6e      	cmp	r2, #110	@ 0x6e
 800e694:	e7db      	b.n	800e64e <_strtod_l+0x2f6>
 800e696:	4988      	ldr	r1, [pc, #544]	@ (800e8b8 <_strtod_l+0x560>)
 800e698:	a811      	add	r0, sp, #68	@ 0x44
 800e69a:	f001 fb41 	bl	800fd20 <__match>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	f43f aeb1 	beq.w	800e406 <_strtod_l+0xae>
 800e6a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6a6:	4985      	ldr	r1, [pc, #532]	@ (800e8bc <_strtod_l+0x564>)
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	a811      	add	r0, sp, #68	@ 0x44
 800e6ac:	9311      	str	r3, [sp, #68]	@ 0x44
 800e6ae:	f001 fb37 	bl	800fd20 <__match>
 800e6b2:	b910      	cbnz	r0, 800e6ba <_strtod_l+0x362>
 800e6b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e6ba:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e8d0 <_strtod_l+0x578>
 800e6be:	f04f 0a00 	mov.w	sl, #0
 800e6c2:	e684      	b.n	800e3ce <_strtod_l+0x76>
 800e6c4:	487e      	ldr	r0, [pc, #504]	@ (800e8c0 <_strtod_l+0x568>)
 800e6c6:	f001 f867 	bl	800f798 <nan>
 800e6ca:	ec5b ab10 	vmov	sl, fp, d0
 800e6ce:	e67e      	b.n	800e3ce <_strtod_l+0x76>
 800e6d0:	ee07 9a90 	vmov	s15, r9
 800e6d4:	1be2      	subs	r2, r4, r7
 800e6d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e6da:	2d00      	cmp	r5, #0
 800e6dc:	bf08      	it	eq
 800e6de:	461d      	moveq	r5, r3
 800e6e0:	2b10      	cmp	r3, #16
 800e6e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	bfa8      	it	ge
 800e6e8:	2210      	movge	r2, #16
 800e6ea:	2b09      	cmp	r3, #9
 800e6ec:	ec5b ab17 	vmov	sl, fp, d7
 800e6f0:	dc15      	bgt.n	800e71e <_strtod_l+0x3c6>
 800e6f2:	1be1      	subs	r1, r4, r7
 800e6f4:	2900      	cmp	r1, #0
 800e6f6:	f43f ae6a 	beq.w	800e3ce <_strtod_l+0x76>
 800e6fa:	eba4 0107 	sub.w	r1, r4, r7
 800e6fe:	dd72      	ble.n	800e7e6 <_strtod_l+0x48e>
 800e700:	2916      	cmp	r1, #22
 800e702:	dc59      	bgt.n	800e7b8 <_strtod_l+0x460>
 800e704:	4b6f      	ldr	r3, [pc, #444]	@ (800e8c4 <_strtod_l+0x56c>)
 800e706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e70c:	ed93 7b00 	vldr	d7, [r3]
 800e710:	ec4b ab16 	vmov	d6, sl, fp
 800e714:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e718:	ec5b ab17 	vmov	sl, fp, d7
 800e71c:	e657      	b.n	800e3ce <_strtod_l+0x76>
 800e71e:	4969      	ldr	r1, [pc, #420]	@ (800e8c4 <_strtod_l+0x56c>)
 800e720:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e724:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e728:	ee06 6a90 	vmov	s13, r6
 800e72c:	2b0f      	cmp	r3, #15
 800e72e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e732:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e736:	ec5b ab16 	vmov	sl, fp, d6
 800e73a:	ddda      	ble.n	800e6f2 <_strtod_l+0x39a>
 800e73c:	1a9a      	subs	r2, r3, r2
 800e73e:	1be1      	subs	r1, r4, r7
 800e740:	440a      	add	r2, r1
 800e742:	2a00      	cmp	r2, #0
 800e744:	f340 8094 	ble.w	800e870 <_strtod_l+0x518>
 800e748:	f012 000f 	ands.w	r0, r2, #15
 800e74c:	d00a      	beq.n	800e764 <_strtod_l+0x40c>
 800e74e:	495d      	ldr	r1, [pc, #372]	@ (800e8c4 <_strtod_l+0x56c>)
 800e750:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e754:	ed91 7b00 	vldr	d7, [r1]
 800e758:	ec4b ab16 	vmov	d6, sl, fp
 800e75c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e760:	ec5b ab17 	vmov	sl, fp, d7
 800e764:	f032 020f 	bics.w	r2, r2, #15
 800e768:	d073      	beq.n	800e852 <_strtod_l+0x4fa>
 800e76a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e76e:	dd47      	ble.n	800e800 <_strtod_l+0x4a8>
 800e770:	2400      	movs	r4, #0
 800e772:	4625      	mov	r5, r4
 800e774:	9407      	str	r4, [sp, #28]
 800e776:	4626      	mov	r6, r4
 800e778:	9a05      	ldr	r2, [sp, #20]
 800e77a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e8d0 <_strtod_l+0x578>
 800e77e:	2322      	movs	r3, #34	@ 0x22
 800e780:	6013      	str	r3, [r2, #0]
 800e782:	f04f 0a00 	mov.w	sl, #0
 800e786:	9b07      	ldr	r3, [sp, #28]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f43f ae20 	beq.w	800e3ce <_strtod_l+0x76>
 800e78e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e790:	9805      	ldr	r0, [sp, #20]
 800e792:	f7ff f957 	bl	800da44 <_Bfree>
 800e796:	9805      	ldr	r0, [sp, #20]
 800e798:	4631      	mov	r1, r6
 800e79a:	f7ff f953 	bl	800da44 <_Bfree>
 800e79e:	9805      	ldr	r0, [sp, #20]
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	f7ff f94f 	bl	800da44 <_Bfree>
 800e7a6:	9907      	ldr	r1, [sp, #28]
 800e7a8:	9805      	ldr	r0, [sp, #20]
 800e7aa:	f7ff f94b 	bl	800da44 <_Bfree>
 800e7ae:	9805      	ldr	r0, [sp, #20]
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	f7ff f947 	bl	800da44 <_Bfree>
 800e7b6:	e60a      	b.n	800e3ce <_strtod_l+0x76>
 800e7b8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e7bc:	1be0      	subs	r0, r4, r7
 800e7be:	4281      	cmp	r1, r0
 800e7c0:	dbbc      	blt.n	800e73c <_strtod_l+0x3e4>
 800e7c2:	4a40      	ldr	r2, [pc, #256]	@ (800e8c4 <_strtod_l+0x56c>)
 800e7c4:	f1c3 030f 	rsb	r3, r3, #15
 800e7c8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e7cc:	ed91 7b00 	vldr	d7, [r1]
 800e7d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e7d2:	ec4b ab16 	vmov	d6, sl, fp
 800e7d6:	1acb      	subs	r3, r1, r3
 800e7d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e7dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7e0:	ed92 6b00 	vldr	d6, [r2]
 800e7e4:	e796      	b.n	800e714 <_strtod_l+0x3bc>
 800e7e6:	3116      	adds	r1, #22
 800e7e8:	dba8      	blt.n	800e73c <_strtod_l+0x3e4>
 800e7ea:	4b36      	ldr	r3, [pc, #216]	@ (800e8c4 <_strtod_l+0x56c>)
 800e7ec:	1b3c      	subs	r4, r7, r4
 800e7ee:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e7f2:	ed94 7b00 	vldr	d7, [r4]
 800e7f6:	ec4b ab16 	vmov	d6, sl, fp
 800e7fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e7fe:	e78b      	b.n	800e718 <_strtod_l+0x3c0>
 800e800:	2000      	movs	r0, #0
 800e802:	ec4b ab17 	vmov	d7, sl, fp
 800e806:	4e30      	ldr	r6, [pc, #192]	@ (800e8c8 <_strtod_l+0x570>)
 800e808:	1112      	asrs	r2, r2, #4
 800e80a:	4601      	mov	r1, r0
 800e80c:	2a01      	cmp	r2, #1
 800e80e:	dc23      	bgt.n	800e858 <_strtod_l+0x500>
 800e810:	b108      	cbz	r0, 800e816 <_strtod_l+0x4be>
 800e812:	ec5b ab17 	vmov	sl, fp, d7
 800e816:	4a2c      	ldr	r2, [pc, #176]	@ (800e8c8 <_strtod_l+0x570>)
 800e818:	482c      	ldr	r0, [pc, #176]	@ (800e8cc <_strtod_l+0x574>)
 800e81a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e81e:	ed92 7b00 	vldr	d7, [r2]
 800e822:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e826:	ec4b ab16 	vmov	d6, sl, fp
 800e82a:	4a29      	ldr	r2, [pc, #164]	@ (800e8d0 <_strtod_l+0x578>)
 800e82c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e830:	ee17 1a90 	vmov	r1, s15
 800e834:	400a      	ands	r2, r1
 800e836:	4282      	cmp	r2, r0
 800e838:	ec5b ab17 	vmov	sl, fp, d7
 800e83c:	d898      	bhi.n	800e770 <_strtod_l+0x418>
 800e83e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e842:	4282      	cmp	r2, r0
 800e844:	bf86      	itte	hi
 800e846:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e8d4 <_strtod_l+0x57c>
 800e84a:	f04f 3aff 	movhi.w	sl, #4294967295
 800e84e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e852:	2200      	movs	r2, #0
 800e854:	9206      	str	r2, [sp, #24]
 800e856:	e076      	b.n	800e946 <_strtod_l+0x5ee>
 800e858:	f012 0f01 	tst.w	r2, #1
 800e85c:	d004      	beq.n	800e868 <_strtod_l+0x510>
 800e85e:	ed96 6b00 	vldr	d6, [r6]
 800e862:	2001      	movs	r0, #1
 800e864:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e868:	3101      	adds	r1, #1
 800e86a:	1052      	asrs	r2, r2, #1
 800e86c:	3608      	adds	r6, #8
 800e86e:	e7cd      	b.n	800e80c <_strtod_l+0x4b4>
 800e870:	d0ef      	beq.n	800e852 <_strtod_l+0x4fa>
 800e872:	4252      	negs	r2, r2
 800e874:	f012 000f 	ands.w	r0, r2, #15
 800e878:	d00a      	beq.n	800e890 <_strtod_l+0x538>
 800e87a:	4912      	ldr	r1, [pc, #72]	@ (800e8c4 <_strtod_l+0x56c>)
 800e87c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e880:	ed91 7b00 	vldr	d7, [r1]
 800e884:	ec4b ab16 	vmov	d6, sl, fp
 800e888:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e88c:	ec5b ab17 	vmov	sl, fp, d7
 800e890:	1112      	asrs	r2, r2, #4
 800e892:	d0de      	beq.n	800e852 <_strtod_l+0x4fa>
 800e894:	2a1f      	cmp	r2, #31
 800e896:	dd1f      	ble.n	800e8d8 <_strtod_l+0x580>
 800e898:	2400      	movs	r4, #0
 800e89a:	4625      	mov	r5, r4
 800e89c:	9407      	str	r4, [sp, #28]
 800e89e:	4626      	mov	r6, r4
 800e8a0:	9a05      	ldr	r2, [sp, #20]
 800e8a2:	2322      	movs	r3, #34	@ 0x22
 800e8a4:	f04f 0a00 	mov.w	sl, #0
 800e8a8:	f04f 0b00 	mov.w	fp, #0
 800e8ac:	6013      	str	r3, [r2, #0]
 800e8ae:	e76a      	b.n	800e786 <_strtod_l+0x42e>
 800e8b0:	080101f5 	.word	0x080101f5
 800e8b4:	0801040c 	.word	0x0801040c
 800e8b8:	080101ed 	.word	0x080101ed
 800e8bc:	08010224 	.word	0x08010224
 800e8c0:	080105b5 	.word	0x080105b5
 800e8c4:	08010340 	.word	0x08010340
 800e8c8:	08010318 	.word	0x08010318
 800e8cc:	7ca00000 	.word	0x7ca00000
 800e8d0:	7ff00000 	.word	0x7ff00000
 800e8d4:	7fefffff 	.word	0x7fefffff
 800e8d8:	f012 0110 	ands.w	r1, r2, #16
 800e8dc:	bf18      	it	ne
 800e8de:	216a      	movne	r1, #106	@ 0x6a
 800e8e0:	9106      	str	r1, [sp, #24]
 800e8e2:	ec4b ab17 	vmov	d7, sl, fp
 800e8e6:	49b0      	ldr	r1, [pc, #704]	@ (800eba8 <_strtod_l+0x850>)
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	07d6      	lsls	r6, r2, #31
 800e8ec:	d504      	bpl.n	800e8f8 <_strtod_l+0x5a0>
 800e8ee:	ed91 6b00 	vldr	d6, [r1]
 800e8f2:	2001      	movs	r0, #1
 800e8f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8f8:	1052      	asrs	r2, r2, #1
 800e8fa:	f101 0108 	add.w	r1, r1, #8
 800e8fe:	d1f4      	bne.n	800e8ea <_strtod_l+0x592>
 800e900:	b108      	cbz	r0, 800e906 <_strtod_l+0x5ae>
 800e902:	ec5b ab17 	vmov	sl, fp, d7
 800e906:	9a06      	ldr	r2, [sp, #24]
 800e908:	b1b2      	cbz	r2, 800e938 <_strtod_l+0x5e0>
 800e90a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e90e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e912:	2a00      	cmp	r2, #0
 800e914:	4658      	mov	r0, fp
 800e916:	dd0f      	ble.n	800e938 <_strtod_l+0x5e0>
 800e918:	2a1f      	cmp	r2, #31
 800e91a:	dd55      	ble.n	800e9c8 <_strtod_l+0x670>
 800e91c:	2a34      	cmp	r2, #52	@ 0x34
 800e91e:	bfde      	ittt	le
 800e920:	f04f 32ff 	movle.w	r2, #4294967295
 800e924:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e928:	408a      	lslle	r2, r1
 800e92a:	f04f 0a00 	mov.w	sl, #0
 800e92e:	bfcc      	ite	gt
 800e930:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e934:	ea02 0b00 	andle.w	fp, r2, r0
 800e938:	ec4b ab17 	vmov	d7, sl, fp
 800e93c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e944:	d0a8      	beq.n	800e898 <_strtod_l+0x540>
 800e946:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e948:	9805      	ldr	r0, [sp, #20]
 800e94a:	f8cd 9000 	str.w	r9, [sp]
 800e94e:	462a      	mov	r2, r5
 800e950:	f7ff f8e0 	bl	800db14 <__s2b>
 800e954:	9007      	str	r0, [sp, #28]
 800e956:	2800      	cmp	r0, #0
 800e958:	f43f af0a 	beq.w	800e770 <_strtod_l+0x418>
 800e95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e95e:	1b3f      	subs	r7, r7, r4
 800e960:	2b00      	cmp	r3, #0
 800e962:	bfb4      	ite	lt
 800e964:	463b      	movlt	r3, r7
 800e966:	2300      	movge	r3, #0
 800e968:	930a      	str	r3, [sp, #40]	@ 0x28
 800e96a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e96c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800eb98 <_strtod_l+0x840>
 800e970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e974:	2400      	movs	r4, #0
 800e976:	930d      	str	r3, [sp, #52]	@ 0x34
 800e978:	4625      	mov	r5, r4
 800e97a:	9b07      	ldr	r3, [sp, #28]
 800e97c:	9805      	ldr	r0, [sp, #20]
 800e97e:	6859      	ldr	r1, [r3, #4]
 800e980:	f7ff f820 	bl	800d9c4 <_Balloc>
 800e984:	4606      	mov	r6, r0
 800e986:	2800      	cmp	r0, #0
 800e988:	f43f aef6 	beq.w	800e778 <_strtod_l+0x420>
 800e98c:	9b07      	ldr	r3, [sp, #28]
 800e98e:	691a      	ldr	r2, [r3, #16]
 800e990:	ec4b ab19 	vmov	d9, sl, fp
 800e994:	3202      	adds	r2, #2
 800e996:	f103 010c 	add.w	r1, r3, #12
 800e99a:	0092      	lsls	r2, r2, #2
 800e99c:	300c      	adds	r0, #12
 800e99e:	f7fe f91c 	bl	800cbda <memcpy>
 800e9a2:	eeb0 0b49 	vmov.f64	d0, d9
 800e9a6:	9805      	ldr	r0, [sp, #20]
 800e9a8:	aa14      	add	r2, sp, #80	@ 0x50
 800e9aa:	a913      	add	r1, sp, #76	@ 0x4c
 800e9ac:	f7ff fbee 	bl	800e18c <__d2b>
 800e9b0:	9012      	str	r0, [sp, #72]	@ 0x48
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	f43f aee0 	beq.w	800e778 <_strtod_l+0x420>
 800e9b8:	9805      	ldr	r0, [sp, #20]
 800e9ba:	2101      	movs	r1, #1
 800e9bc:	f7ff f940 	bl	800dc40 <__i2b>
 800e9c0:	4605      	mov	r5, r0
 800e9c2:	b940      	cbnz	r0, 800e9d6 <_strtod_l+0x67e>
 800e9c4:	2500      	movs	r5, #0
 800e9c6:	e6d7      	b.n	800e778 <_strtod_l+0x420>
 800e9c8:	f04f 31ff 	mov.w	r1, #4294967295
 800e9cc:	fa01 f202 	lsl.w	r2, r1, r2
 800e9d0:	ea02 0a0a 	and.w	sl, r2, sl
 800e9d4:	e7b0      	b.n	800e938 <_strtod_l+0x5e0>
 800e9d6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e9d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e9da:	2f00      	cmp	r7, #0
 800e9dc:	bfab      	itete	ge
 800e9de:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e9e0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e9e2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e9e6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e9ea:	bfac      	ite	ge
 800e9ec:	eb07 0903 	addge.w	r9, r7, r3
 800e9f0:	eba3 0807 	sublt.w	r8, r3, r7
 800e9f4:	9b06      	ldr	r3, [sp, #24]
 800e9f6:	1aff      	subs	r7, r7, r3
 800e9f8:	4417      	add	r7, r2
 800e9fa:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e9fe:	4a6b      	ldr	r2, [pc, #428]	@ (800ebac <_strtod_l+0x854>)
 800ea00:	3f01      	subs	r7, #1
 800ea02:	4297      	cmp	r7, r2
 800ea04:	da51      	bge.n	800eaaa <_strtod_l+0x752>
 800ea06:	1bd1      	subs	r1, r2, r7
 800ea08:	291f      	cmp	r1, #31
 800ea0a:	eba3 0301 	sub.w	r3, r3, r1
 800ea0e:	f04f 0201 	mov.w	r2, #1
 800ea12:	dc3e      	bgt.n	800ea92 <_strtod_l+0x73a>
 800ea14:	408a      	lsls	r2, r1
 800ea16:	920c      	str	r2, [sp, #48]	@ 0x30
 800ea18:	2200      	movs	r2, #0
 800ea1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ea1c:	eb09 0703 	add.w	r7, r9, r3
 800ea20:	4498      	add	r8, r3
 800ea22:	9b06      	ldr	r3, [sp, #24]
 800ea24:	45b9      	cmp	r9, r7
 800ea26:	4498      	add	r8, r3
 800ea28:	464b      	mov	r3, r9
 800ea2a:	bfa8      	it	ge
 800ea2c:	463b      	movge	r3, r7
 800ea2e:	4543      	cmp	r3, r8
 800ea30:	bfa8      	it	ge
 800ea32:	4643      	movge	r3, r8
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	bfc2      	ittt	gt
 800ea38:	1aff      	subgt	r7, r7, r3
 800ea3a:	eba8 0803 	subgt.w	r8, r8, r3
 800ea3e:	eba9 0903 	subgt.w	r9, r9, r3
 800ea42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	dd16      	ble.n	800ea76 <_strtod_l+0x71e>
 800ea48:	4629      	mov	r1, r5
 800ea4a:	9805      	ldr	r0, [sp, #20]
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	f7ff f9b7 	bl	800ddc0 <__pow5mult>
 800ea52:	4605      	mov	r5, r0
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d0b5      	beq.n	800e9c4 <_strtod_l+0x66c>
 800ea58:	4601      	mov	r1, r0
 800ea5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ea5c:	9805      	ldr	r0, [sp, #20]
 800ea5e:	f7ff f905 	bl	800dc6c <__multiply>
 800ea62:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ea64:	2800      	cmp	r0, #0
 800ea66:	f43f ae87 	beq.w	800e778 <_strtod_l+0x420>
 800ea6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ea6c:	9805      	ldr	r0, [sp, #20]
 800ea6e:	f7fe ffe9 	bl	800da44 <_Bfree>
 800ea72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea74:	9312      	str	r3, [sp, #72]	@ 0x48
 800ea76:	2f00      	cmp	r7, #0
 800ea78:	dc1b      	bgt.n	800eab2 <_strtod_l+0x75a>
 800ea7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	dd21      	ble.n	800eac4 <_strtod_l+0x76c>
 800ea80:	4631      	mov	r1, r6
 800ea82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ea84:	9805      	ldr	r0, [sp, #20]
 800ea86:	f7ff f99b 	bl	800ddc0 <__pow5mult>
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	b9d0      	cbnz	r0, 800eac4 <_strtod_l+0x76c>
 800ea8e:	2600      	movs	r6, #0
 800ea90:	e672      	b.n	800e778 <_strtod_l+0x420>
 800ea92:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ea96:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ea9a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ea9e:	37e2      	adds	r7, #226	@ 0xe2
 800eaa0:	fa02 f107 	lsl.w	r1, r2, r7
 800eaa4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eaa6:	920c      	str	r2, [sp, #48]	@ 0x30
 800eaa8:	e7b8      	b.n	800ea1c <_strtod_l+0x6c4>
 800eaaa:	2200      	movs	r2, #0
 800eaac:	920b      	str	r2, [sp, #44]	@ 0x2c
 800eaae:	2201      	movs	r2, #1
 800eab0:	e7f9      	b.n	800eaa6 <_strtod_l+0x74e>
 800eab2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eab4:	9805      	ldr	r0, [sp, #20]
 800eab6:	463a      	mov	r2, r7
 800eab8:	f7ff f9dc 	bl	800de74 <__lshift>
 800eabc:	9012      	str	r0, [sp, #72]	@ 0x48
 800eabe:	2800      	cmp	r0, #0
 800eac0:	d1db      	bne.n	800ea7a <_strtod_l+0x722>
 800eac2:	e659      	b.n	800e778 <_strtod_l+0x420>
 800eac4:	f1b8 0f00 	cmp.w	r8, #0
 800eac8:	dd07      	ble.n	800eada <_strtod_l+0x782>
 800eaca:	4631      	mov	r1, r6
 800eacc:	9805      	ldr	r0, [sp, #20]
 800eace:	4642      	mov	r2, r8
 800ead0:	f7ff f9d0 	bl	800de74 <__lshift>
 800ead4:	4606      	mov	r6, r0
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d0d9      	beq.n	800ea8e <_strtod_l+0x736>
 800eada:	f1b9 0f00 	cmp.w	r9, #0
 800eade:	dd08      	ble.n	800eaf2 <_strtod_l+0x79a>
 800eae0:	4629      	mov	r1, r5
 800eae2:	9805      	ldr	r0, [sp, #20]
 800eae4:	464a      	mov	r2, r9
 800eae6:	f7ff f9c5 	bl	800de74 <__lshift>
 800eaea:	4605      	mov	r5, r0
 800eaec:	2800      	cmp	r0, #0
 800eaee:	f43f ae43 	beq.w	800e778 <_strtod_l+0x420>
 800eaf2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eaf4:	9805      	ldr	r0, [sp, #20]
 800eaf6:	4632      	mov	r2, r6
 800eaf8:	f7ff fa44 	bl	800df84 <__mdiff>
 800eafc:	4604      	mov	r4, r0
 800eafe:	2800      	cmp	r0, #0
 800eb00:	f43f ae3a 	beq.w	800e778 <_strtod_l+0x420>
 800eb04:	2300      	movs	r3, #0
 800eb06:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800eb0a:	60c3      	str	r3, [r0, #12]
 800eb0c:	4629      	mov	r1, r5
 800eb0e:	f7ff fa1d 	bl	800df4c <__mcmp>
 800eb12:	2800      	cmp	r0, #0
 800eb14:	da4e      	bge.n	800ebb4 <_strtod_l+0x85c>
 800eb16:	ea58 080a 	orrs.w	r8, r8, sl
 800eb1a:	d174      	bne.n	800ec06 <_strtod_l+0x8ae>
 800eb1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d170      	bne.n	800ec06 <_strtod_l+0x8ae>
 800eb24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb28:	0d1b      	lsrs	r3, r3, #20
 800eb2a:	051b      	lsls	r3, r3, #20
 800eb2c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eb30:	d969      	bls.n	800ec06 <_strtod_l+0x8ae>
 800eb32:	6963      	ldr	r3, [r4, #20]
 800eb34:	b913      	cbnz	r3, 800eb3c <_strtod_l+0x7e4>
 800eb36:	6923      	ldr	r3, [r4, #16]
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	dd64      	ble.n	800ec06 <_strtod_l+0x8ae>
 800eb3c:	4621      	mov	r1, r4
 800eb3e:	2201      	movs	r2, #1
 800eb40:	9805      	ldr	r0, [sp, #20]
 800eb42:	f7ff f997 	bl	800de74 <__lshift>
 800eb46:	4629      	mov	r1, r5
 800eb48:	4604      	mov	r4, r0
 800eb4a:	f7ff f9ff 	bl	800df4c <__mcmp>
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	dd59      	ble.n	800ec06 <_strtod_l+0x8ae>
 800eb52:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb56:	9a06      	ldr	r2, [sp, #24]
 800eb58:	0d1b      	lsrs	r3, r3, #20
 800eb5a:	051b      	lsls	r3, r3, #20
 800eb5c:	2a00      	cmp	r2, #0
 800eb5e:	d070      	beq.n	800ec42 <_strtod_l+0x8ea>
 800eb60:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eb64:	d86d      	bhi.n	800ec42 <_strtod_l+0x8ea>
 800eb66:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800eb6a:	f67f ae99 	bls.w	800e8a0 <_strtod_l+0x548>
 800eb6e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800eba0 <_strtod_l+0x848>
 800eb72:	ec4b ab16 	vmov	d6, sl, fp
 800eb76:	4b0e      	ldr	r3, [pc, #56]	@ (800ebb0 <_strtod_l+0x858>)
 800eb78:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eb7c:	ee17 2a90 	vmov	r2, s15
 800eb80:	4013      	ands	r3, r2
 800eb82:	ec5b ab17 	vmov	sl, fp, d7
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f47f ae01 	bne.w	800e78e <_strtod_l+0x436>
 800eb8c:	9a05      	ldr	r2, [sp, #20]
 800eb8e:	2322      	movs	r3, #34	@ 0x22
 800eb90:	6013      	str	r3, [r2, #0]
 800eb92:	e5fc      	b.n	800e78e <_strtod_l+0x436>
 800eb94:	f3af 8000 	nop.w
 800eb98:	ffc00000 	.word	0xffc00000
 800eb9c:	41dfffff 	.word	0x41dfffff
 800eba0:	00000000 	.word	0x00000000
 800eba4:	39500000 	.word	0x39500000
 800eba8:	08010438 	.word	0x08010438
 800ebac:	fffffc02 	.word	0xfffffc02
 800ebb0:	7ff00000 	.word	0x7ff00000
 800ebb4:	46d9      	mov	r9, fp
 800ebb6:	d15d      	bne.n	800ec74 <_strtod_l+0x91c>
 800ebb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebbc:	f1b8 0f00 	cmp.w	r8, #0
 800ebc0:	d02a      	beq.n	800ec18 <_strtod_l+0x8c0>
 800ebc2:	4aab      	ldr	r2, [pc, #684]	@ (800ee70 <_strtod_l+0xb18>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d12a      	bne.n	800ec1e <_strtod_l+0x8c6>
 800ebc8:	9b06      	ldr	r3, [sp, #24]
 800ebca:	4652      	mov	r2, sl
 800ebcc:	b1fb      	cbz	r3, 800ec0e <_strtod_l+0x8b6>
 800ebce:	4ba9      	ldr	r3, [pc, #676]	@ (800ee74 <_strtod_l+0xb1c>)
 800ebd0:	ea0b 0303 	and.w	r3, fp, r3
 800ebd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ebd8:	f04f 31ff 	mov.w	r1, #4294967295
 800ebdc:	d81a      	bhi.n	800ec14 <_strtod_l+0x8bc>
 800ebde:	0d1b      	lsrs	r3, r3, #20
 800ebe0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ebe4:	fa01 f303 	lsl.w	r3, r1, r3
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d118      	bne.n	800ec1e <_strtod_l+0x8c6>
 800ebec:	4ba2      	ldr	r3, [pc, #648]	@ (800ee78 <_strtod_l+0xb20>)
 800ebee:	4599      	cmp	r9, r3
 800ebf0:	d102      	bne.n	800ebf8 <_strtod_l+0x8a0>
 800ebf2:	3201      	adds	r2, #1
 800ebf4:	f43f adc0 	beq.w	800e778 <_strtod_l+0x420>
 800ebf8:	4b9e      	ldr	r3, [pc, #632]	@ (800ee74 <_strtod_l+0xb1c>)
 800ebfa:	ea09 0303 	and.w	r3, r9, r3
 800ebfe:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ec02:	f04f 0a00 	mov.w	sl, #0
 800ec06:	9b06      	ldr	r3, [sp, #24]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1b0      	bne.n	800eb6e <_strtod_l+0x816>
 800ec0c:	e5bf      	b.n	800e78e <_strtod_l+0x436>
 800ec0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec12:	e7e9      	b.n	800ebe8 <_strtod_l+0x890>
 800ec14:	460b      	mov	r3, r1
 800ec16:	e7e7      	b.n	800ebe8 <_strtod_l+0x890>
 800ec18:	ea53 030a 	orrs.w	r3, r3, sl
 800ec1c:	d099      	beq.n	800eb52 <_strtod_l+0x7fa>
 800ec1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec20:	b1c3      	cbz	r3, 800ec54 <_strtod_l+0x8fc>
 800ec22:	ea13 0f09 	tst.w	r3, r9
 800ec26:	d0ee      	beq.n	800ec06 <_strtod_l+0x8ae>
 800ec28:	9a06      	ldr	r2, [sp, #24]
 800ec2a:	4650      	mov	r0, sl
 800ec2c:	4659      	mov	r1, fp
 800ec2e:	f1b8 0f00 	cmp.w	r8, #0
 800ec32:	d013      	beq.n	800ec5c <_strtod_l+0x904>
 800ec34:	f7ff fb75 	bl	800e322 <sulp>
 800ec38:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ec3c:	ec5b ab17 	vmov	sl, fp, d7
 800ec40:	e7e1      	b.n	800ec06 <_strtod_l+0x8ae>
 800ec42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ec46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ec4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ec4e:	f04f 3aff 	mov.w	sl, #4294967295
 800ec52:	e7d8      	b.n	800ec06 <_strtod_l+0x8ae>
 800ec54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec56:	ea13 0f0a 	tst.w	r3, sl
 800ec5a:	e7e4      	b.n	800ec26 <_strtod_l+0x8ce>
 800ec5c:	f7ff fb61 	bl	800e322 <sulp>
 800ec60:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ec64:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ec68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6c:	ec5b ab10 	vmov	sl, fp, d0
 800ec70:	d1c9      	bne.n	800ec06 <_strtod_l+0x8ae>
 800ec72:	e615      	b.n	800e8a0 <_strtod_l+0x548>
 800ec74:	4629      	mov	r1, r5
 800ec76:	4620      	mov	r0, r4
 800ec78:	f7ff fae0 	bl	800e23c <__ratio>
 800ec7c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ec80:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ec84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec88:	d85d      	bhi.n	800ed46 <_strtod_l+0x9ee>
 800ec8a:	f1b8 0f00 	cmp.w	r8, #0
 800ec8e:	d164      	bne.n	800ed5a <_strtod_l+0xa02>
 800ec90:	f1ba 0f00 	cmp.w	sl, #0
 800ec94:	d14b      	bne.n	800ed2e <_strtod_l+0x9d6>
 800ec96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec9a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d160      	bne.n	800ed64 <_strtod_l+0xa0c>
 800eca2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800eca6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ecaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecae:	d401      	bmi.n	800ecb4 <_strtod_l+0x95c>
 800ecb0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ecb4:	eeb1 ab48 	vneg.f64	d10, d8
 800ecb8:	486e      	ldr	r0, [pc, #440]	@ (800ee74 <_strtod_l+0xb1c>)
 800ecba:	4970      	ldr	r1, [pc, #448]	@ (800ee7c <_strtod_l+0xb24>)
 800ecbc:	ea09 0700 	and.w	r7, r9, r0
 800ecc0:	428f      	cmp	r7, r1
 800ecc2:	ec53 2b1a 	vmov	r2, r3, d10
 800ecc6:	d17d      	bne.n	800edc4 <_strtod_l+0xa6c>
 800ecc8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800eccc:	ec4b ab1c 	vmov	d12, sl, fp
 800ecd0:	eeb0 0b4c 	vmov.f64	d0, d12
 800ecd4:	f7ff f9ea 	bl	800e0ac <__ulp>
 800ecd8:	4866      	ldr	r0, [pc, #408]	@ (800ee74 <_strtod_l+0xb1c>)
 800ecda:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ecde:	ee1c 3a90 	vmov	r3, s25
 800ece2:	4a67      	ldr	r2, [pc, #412]	@ (800ee80 <_strtod_l+0xb28>)
 800ece4:	ea03 0100 	and.w	r1, r3, r0
 800ece8:	4291      	cmp	r1, r2
 800ecea:	ec5b ab1c 	vmov	sl, fp, d12
 800ecee:	d93c      	bls.n	800ed6a <_strtod_l+0xa12>
 800ecf0:	ee19 2a90 	vmov	r2, s19
 800ecf4:	4b60      	ldr	r3, [pc, #384]	@ (800ee78 <_strtod_l+0xb20>)
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d104      	bne.n	800ed04 <_strtod_l+0x9ac>
 800ecfa:	ee19 3a10 	vmov	r3, s18
 800ecfe:	3301      	adds	r3, #1
 800ed00:	f43f ad3a 	beq.w	800e778 <_strtod_l+0x420>
 800ed04:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800ee78 <_strtod_l+0xb20>
 800ed08:	f04f 3aff 	mov.w	sl, #4294967295
 800ed0c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ed0e:	9805      	ldr	r0, [sp, #20]
 800ed10:	f7fe fe98 	bl	800da44 <_Bfree>
 800ed14:	9805      	ldr	r0, [sp, #20]
 800ed16:	4631      	mov	r1, r6
 800ed18:	f7fe fe94 	bl	800da44 <_Bfree>
 800ed1c:	9805      	ldr	r0, [sp, #20]
 800ed1e:	4629      	mov	r1, r5
 800ed20:	f7fe fe90 	bl	800da44 <_Bfree>
 800ed24:	9805      	ldr	r0, [sp, #20]
 800ed26:	4621      	mov	r1, r4
 800ed28:	f7fe fe8c 	bl	800da44 <_Bfree>
 800ed2c:	e625      	b.n	800e97a <_strtod_l+0x622>
 800ed2e:	f1ba 0f01 	cmp.w	sl, #1
 800ed32:	d103      	bne.n	800ed3c <_strtod_l+0x9e4>
 800ed34:	f1bb 0f00 	cmp.w	fp, #0
 800ed38:	f43f adb2 	beq.w	800e8a0 <_strtod_l+0x548>
 800ed3c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ed40:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ed44:	e7b8      	b.n	800ecb8 <_strtod_l+0x960>
 800ed46:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ed4a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ed4e:	f1b8 0f00 	cmp.w	r8, #0
 800ed52:	d0af      	beq.n	800ecb4 <_strtod_l+0x95c>
 800ed54:	eeb0 ab48 	vmov.f64	d10, d8
 800ed58:	e7ae      	b.n	800ecb8 <_strtod_l+0x960>
 800ed5a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ed5e:	eeb0 8b4a 	vmov.f64	d8, d10
 800ed62:	e7a9      	b.n	800ecb8 <_strtod_l+0x960>
 800ed64:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ed68:	e7a6      	b.n	800ecb8 <_strtod_l+0x960>
 800ed6a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ed6e:	9b06      	ldr	r3, [sp, #24]
 800ed70:	46d9      	mov	r9, fp
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1ca      	bne.n	800ed0c <_strtod_l+0x9b4>
 800ed76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed7a:	0d1b      	lsrs	r3, r3, #20
 800ed7c:	051b      	lsls	r3, r3, #20
 800ed7e:	429f      	cmp	r7, r3
 800ed80:	d1c4      	bne.n	800ed0c <_strtod_l+0x9b4>
 800ed82:	ec51 0b18 	vmov	r0, r1, d8
 800ed86:	f7f1 fcef 	bl	8000768 <__aeabi_d2lz>
 800ed8a:	f7f1 fca7 	bl	80006dc <__aeabi_l2d>
 800ed8e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ed92:	ec41 0b17 	vmov	d7, r0, r1
 800ed96:	ea49 090a 	orr.w	r9, r9, sl
 800ed9a:	ea59 0908 	orrs.w	r9, r9, r8
 800ed9e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800eda2:	d03c      	beq.n	800ee1e <_strtod_l+0xac6>
 800eda4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ee58 <_strtod_l+0xb00>
 800eda8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800edac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb0:	f53f aced 	bmi.w	800e78e <_strtod_l+0x436>
 800edb4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ee60 <_strtod_l+0xb08>
 800edb8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800edbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc0:	dda4      	ble.n	800ed0c <_strtod_l+0x9b4>
 800edc2:	e4e4      	b.n	800e78e <_strtod_l+0x436>
 800edc4:	9906      	ldr	r1, [sp, #24]
 800edc6:	b1e1      	cbz	r1, 800ee02 <_strtod_l+0xaaa>
 800edc8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800edcc:	d819      	bhi.n	800ee02 <_strtod_l+0xaaa>
 800edce:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800edd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd6:	d811      	bhi.n	800edfc <_strtod_l+0xaa4>
 800edd8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800eddc:	ee18 3a10 	vmov	r3, s16
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	bf38      	it	cc
 800ede4:	2301      	movcc	r3, #1
 800ede6:	ee08 3a10 	vmov	s16, r3
 800edea:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800edee:	f1b8 0f00 	cmp.w	r8, #0
 800edf2:	d111      	bne.n	800ee18 <_strtod_l+0xac0>
 800edf4:	eeb1 7b48 	vneg.f64	d7, d8
 800edf8:	ec53 2b17 	vmov	r2, r3, d7
 800edfc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ee00:	1bcb      	subs	r3, r1, r7
 800ee02:	eeb0 0b49 	vmov.f64	d0, d9
 800ee06:	ec43 2b1a 	vmov	d10, r2, r3
 800ee0a:	f7ff f94f 	bl	800e0ac <__ulp>
 800ee0e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ee12:	ec5b ab19 	vmov	sl, fp, d9
 800ee16:	e7aa      	b.n	800ed6e <_strtod_l+0xa16>
 800ee18:	eeb0 7b48 	vmov.f64	d7, d8
 800ee1c:	e7ec      	b.n	800edf8 <_strtod_l+0xaa0>
 800ee1e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800ee68 <_strtod_l+0xb10>
 800ee22:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ee26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2a:	f57f af6f 	bpl.w	800ed0c <_strtod_l+0x9b4>
 800ee2e:	e4ae      	b.n	800e78e <_strtod_l+0x436>
 800ee30:	2300      	movs	r3, #0
 800ee32:	9308      	str	r3, [sp, #32]
 800ee34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ee38:	6013      	str	r3, [r2, #0]
 800ee3a:	f7ff bacc 	b.w	800e3d6 <_strtod_l+0x7e>
 800ee3e:	2a65      	cmp	r2, #101	@ 0x65
 800ee40:	f43f abbc 	beq.w	800e5bc <_strtod_l+0x264>
 800ee44:	2a45      	cmp	r2, #69	@ 0x45
 800ee46:	f43f abb9 	beq.w	800e5bc <_strtod_l+0x264>
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	9306      	str	r3, [sp, #24]
 800ee4e:	f7ff bbf0 	b.w	800e632 <_strtod_l+0x2da>
 800ee52:	bf00      	nop
 800ee54:	f3af 8000 	nop.w
 800ee58:	94a03595 	.word	0x94a03595
 800ee5c:	3fdfffff 	.word	0x3fdfffff
 800ee60:	35afe535 	.word	0x35afe535
 800ee64:	3fe00000 	.word	0x3fe00000
 800ee68:	94a03595 	.word	0x94a03595
 800ee6c:	3fcfffff 	.word	0x3fcfffff
 800ee70:	000fffff 	.word	0x000fffff
 800ee74:	7ff00000 	.word	0x7ff00000
 800ee78:	7fefffff 	.word	0x7fefffff
 800ee7c:	7fe00000 	.word	0x7fe00000
 800ee80:	7c9fffff 	.word	0x7c9fffff

0800ee84 <_strtod_r>:
 800ee84:	4b01      	ldr	r3, [pc, #4]	@ (800ee8c <_strtod_r+0x8>)
 800ee86:	f7ff ba67 	b.w	800e358 <_strtod_l>
 800ee8a:	bf00      	nop
 800ee8c:	24000074 	.word	0x24000074

0800ee90 <_strtol_l.constprop.0>:
 800ee90:	2b24      	cmp	r3, #36	@ 0x24
 800ee92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee96:	4686      	mov	lr, r0
 800ee98:	4690      	mov	r8, r2
 800ee9a:	d801      	bhi.n	800eea0 <_strtol_l.constprop.0+0x10>
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d106      	bne.n	800eeae <_strtol_l.constprop.0+0x1e>
 800eea0:	f7fd fe6e 	bl	800cb80 <__errno>
 800eea4:	2316      	movs	r3, #22
 800eea6:	6003      	str	r3, [r0, #0]
 800eea8:	2000      	movs	r0, #0
 800eeaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeae:	4834      	ldr	r0, [pc, #208]	@ (800ef80 <_strtol_l.constprop.0+0xf0>)
 800eeb0:	460d      	mov	r5, r1
 800eeb2:	462a      	mov	r2, r5
 800eeb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eeb8:	5d06      	ldrb	r6, [r0, r4]
 800eeba:	f016 0608 	ands.w	r6, r6, #8
 800eebe:	d1f8      	bne.n	800eeb2 <_strtol_l.constprop.0+0x22>
 800eec0:	2c2d      	cmp	r4, #45	@ 0x2d
 800eec2:	d12d      	bne.n	800ef20 <_strtol_l.constprop.0+0x90>
 800eec4:	782c      	ldrb	r4, [r5, #0]
 800eec6:	2601      	movs	r6, #1
 800eec8:	1c95      	adds	r5, r2, #2
 800eeca:	f033 0210 	bics.w	r2, r3, #16
 800eece:	d109      	bne.n	800eee4 <_strtol_l.constprop.0+0x54>
 800eed0:	2c30      	cmp	r4, #48	@ 0x30
 800eed2:	d12a      	bne.n	800ef2a <_strtol_l.constprop.0+0x9a>
 800eed4:	782a      	ldrb	r2, [r5, #0]
 800eed6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eeda:	2a58      	cmp	r2, #88	@ 0x58
 800eedc:	d125      	bne.n	800ef2a <_strtol_l.constprop.0+0x9a>
 800eede:	786c      	ldrb	r4, [r5, #1]
 800eee0:	2310      	movs	r3, #16
 800eee2:	3502      	adds	r5, #2
 800eee4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800eee8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eeec:	2200      	movs	r2, #0
 800eeee:	fbbc f9f3 	udiv	r9, ip, r3
 800eef2:	4610      	mov	r0, r2
 800eef4:	fb03 ca19 	mls	sl, r3, r9, ip
 800eef8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800eefc:	2f09      	cmp	r7, #9
 800eefe:	d81b      	bhi.n	800ef38 <_strtol_l.constprop.0+0xa8>
 800ef00:	463c      	mov	r4, r7
 800ef02:	42a3      	cmp	r3, r4
 800ef04:	dd27      	ble.n	800ef56 <_strtol_l.constprop.0+0xc6>
 800ef06:	1c57      	adds	r7, r2, #1
 800ef08:	d007      	beq.n	800ef1a <_strtol_l.constprop.0+0x8a>
 800ef0a:	4581      	cmp	r9, r0
 800ef0c:	d320      	bcc.n	800ef50 <_strtol_l.constprop.0+0xc0>
 800ef0e:	d101      	bne.n	800ef14 <_strtol_l.constprop.0+0x84>
 800ef10:	45a2      	cmp	sl, r4
 800ef12:	db1d      	blt.n	800ef50 <_strtol_l.constprop.0+0xc0>
 800ef14:	fb00 4003 	mla	r0, r0, r3, r4
 800ef18:	2201      	movs	r2, #1
 800ef1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef1e:	e7eb      	b.n	800eef8 <_strtol_l.constprop.0+0x68>
 800ef20:	2c2b      	cmp	r4, #43	@ 0x2b
 800ef22:	bf04      	itt	eq
 800ef24:	782c      	ldrbeq	r4, [r5, #0]
 800ef26:	1c95      	addeq	r5, r2, #2
 800ef28:	e7cf      	b.n	800eeca <_strtol_l.constprop.0+0x3a>
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1da      	bne.n	800eee4 <_strtol_l.constprop.0+0x54>
 800ef2e:	2c30      	cmp	r4, #48	@ 0x30
 800ef30:	bf0c      	ite	eq
 800ef32:	2308      	moveq	r3, #8
 800ef34:	230a      	movne	r3, #10
 800ef36:	e7d5      	b.n	800eee4 <_strtol_l.constprop.0+0x54>
 800ef38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ef3c:	2f19      	cmp	r7, #25
 800ef3e:	d801      	bhi.n	800ef44 <_strtol_l.constprop.0+0xb4>
 800ef40:	3c37      	subs	r4, #55	@ 0x37
 800ef42:	e7de      	b.n	800ef02 <_strtol_l.constprop.0+0x72>
 800ef44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ef48:	2f19      	cmp	r7, #25
 800ef4a:	d804      	bhi.n	800ef56 <_strtol_l.constprop.0+0xc6>
 800ef4c:	3c57      	subs	r4, #87	@ 0x57
 800ef4e:	e7d8      	b.n	800ef02 <_strtol_l.constprop.0+0x72>
 800ef50:	f04f 32ff 	mov.w	r2, #4294967295
 800ef54:	e7e1      	b.n	800ef1a <_strtol_l.constprop.0+0x8a>
 800ef56:	1c53      	adds	r3, r2, #1
 800ef58:	d108      	bne.n	800ef6c <_strtol_l.constprop.0+0xdc>
 800ef5a:	2322      	movs	r3, #34	@ 0x22
 800ef5c:	f8ce 3000 	str.w	r3, [lr]
 800ef60:	4660      	mov	r0, ip
 800ef62:	f1b8 0f00 	cmp.w	r8, #0
 800ef66:	d0a0      	beq.n	800eeaa <_strtol_l.constprop.0+0x1a>
 800ef68:	1e69      	subs	r1, r5, #1
 800ef6a:	e006      	b.n	800ef7a <_strtol_l.constprop.0+0xea>
 800ef6c:	b106      	cbz	r6, 800ef70 <_strtol_l.constprop.0+0xe0>
 800ef6e:	4240      	negs	r0, r0
 800ef70:	f1b8 0f00 	cmp.w	r8, #0
 800ef74:	d099      	beq.n	800eeaa <_strtol_l.constprop.0+0x1a>
 800ef76:	2a00      	cmp	r2, #0
 800ef78:	d1f6      	bne.n	800ef68 <_strtol_l.constprop.0+0xd8>
 800ef7a:	f8c8 1000 	str.w	r1, [r8]
 800ef7e:	e794      	b.n	800eeaa <_strtol_l.constprop.0+0x1a>
 800ef80:	08010461 	.word	0x08010461

0800ef84 <_strtol_r>:
 800ef84:	f7ff bf84 	b.w	800ee90 <_strtol_l.constprop.0>

0800ef88 <__ssputs_r>:
 800ef88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef8c:	688e      	ldr	r6, [r1, #8]
 800ef8e:	461f      	mov	r7, r3
 800ef90:	42be      	cmp	r6, r7
 800ef92:	680b      	ldr	r3, [r1, #0]
 800ef94:	4682      	mov	sl, r0
 800ef96:	460c      	mov	r4, r1
 800ef98:	4690      	mov	r8, r2
 800ef9a:	d82d      	bhi.n	800eff8 <__ssputs_r+0x70>
 800ef9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800efa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800efa4:	d026      	beq.n	800eff4 <__ssputs_r+0x6c>
 800efa6:	6965      	ldr	r5, [r4, #20]
 800efa8:	6909      	ldr	r1, [r1, #16]
 800efaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800efae:	eba3 0901 	sub.w	r9, r3, r1
 800efb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800efb6:	1c7b      	adds	r3, r7, #1
 800efb8:	444b      	add	r3, r9
 800efba:	106d      	asrs	r5, r5, #1
 800efbc:	429d      	cmp	r5, r3
 800efbe:	bf38      	it	cc
 800efc0:	461d      	movcc	r5, r3
 800efc2:	0553      	lsls	r3, r2, #21
 800efc4:	d527      	bpl.n	800f016 <__ssputs_r+0x8e>
 800efc6:	4629      	mov	r1, r5
 800efc8:	f7fe fc70 	bl	800d8ac <_malloc_r>
 800efcc:	4606      	mov	r6, r0
 800efce:	b360      	cbz	r0, 800f02a <__ssputs_r+0xa2>
 800efd0:	6921      	ldr	r1, [r4, #16]
 800efd2:	464a      	mov	r2, r9
 800efd4:	f7fd fe01 	bl	800cbda <memcpy>
 800efd8:	89a3      	ldrh	r3, [r4, #12]
 800efda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800efde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efe2:	81a3      	strh	r3, [r4, #12]
 800efe4:	6126      	str	r6, [r4, #16]
 800efe6:	6165      	str	r5, [r4, #20]
 800efe8:	444e      	add	r6, r9
 800efea:	eba5 0509 	sub.w	r5, r5, r9
 800efee:	6026      	str	r6, [r4, #0]
 800eff0:	60a5      	str	r5, [r4, #8]
 800eff2:	463e      	mov	r6, r7
 800eff4:	42be      	cmp	r6, r7
 800eff6:	d900      	bls.n	800effa <__ssputs_r+0x72>
 800eff8:	463e      	mov	r6, r7
 800effa:	6820      	ldr	r0, [r4, #0]
 800effc:	4632      	mov	r2, r6
 800effe:	4641      	mov	r1, r8
 800f000:	f000 fb6a 	bl	800f6d8 <memmove>
 800f004:	68a3      	ldr	r3, [r4, #8]
 800f006:	1b9b      	subs	r3, r3, r6
 800f008:	60a3      	str	r3, [r4, #8]
 800f00a:	6823      	ldr	r3, [r4, #0]
 800f00c:	4433      	add	r3, r6
 800f00e:	6023      	str	r3, [r4, #0]
 800f010:	2000      	movs	r0, #0
 800f012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f016:	462a      	mov	r2, r5
 800f018:	f000 ff43 	bl	800fea2 <_realloc_r>
 800f01c:	4606      	mov	r6, r0
 800f01e:	2800      	cmp	r0, #0
 800f020:	d1e0      	bne.n	800efe4 <__ssputs_r+0x5c>
 800f022:	6921      	ldr	r1, [r4, #16]
 800f024:	4650      	mov	r0, sl
 800f026:	f7fe fbcd 	bl	800d7c4 <_free_r>
 800f02a:	230c      	movs	r3, #12
 800f02c:	f8ca 3000 	str.w	r3, [sl]
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f036:	81a3      	strh	r3, [r4, #12]
 800f038:	f04f 30ff 	mov.w	r0, #4294967295
 800f03c:	e7e9      	b.n	800f012 <__ssputs_r+0x8a>
	...

0800f040 <_svfiprintf_r>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	4698      	mov	r8, r3
 800f046:	898b      	ldrh	r3, [r1, #12]
 800f048:	061b      	lsls	r3, r3, #24
 800f04a:	b09d      	sub	sp, #116	@ 0x74
 800f04c:	4607      	mov	r7, r0
 800f04e:	460d      	mov	r5, r1
 800f050:	4614      	mov	r4, r2
 800f052:	d510      	bpl.n	800f076 <_svfiprintf_r+0x36>
 800f054:	690b      	ldr	r3, [r1, #16]
 800f056:	b973      	cbnz	r3, 800f076 <_svfiprintf_r+0x36>
 800f058:	2140      	movs	r1, #64	@ 0x40
 800f05a:	f7fe fc27 	bl	800d8ac <_malloc_r>
 800f05e:	6028      	str	r0, [r5, #0]
 800f060:	6128      	str	r0, [r5, #16]
 800f062:	b930      	cbnz	r0, 800f072 <_svfiprintf_r+0x32>
 800f064:	230c      	movs	r3, #12
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	f04f 30ff 	mov.w	r0, #4294967295
 800f06c:	b01d      	add	sp, #116	@ 0x74
 800f06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f072:	2340      	movs	r3, #64	@ 0x40
 800f074:	616b      	str	r3, [r5, #20]
 800f076:	2300      	movs	r3, #0
 800f078:	9309      	str	r3, [sp, #36]	@ 0x24
 800f07a:	2320      	movs	r3, #32
 800f07c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f080:	f8cd 800c 	str.w	r8, [sp, #12]
 800f084:	2330      	movs	r3, #48	@ 0x30
 800f086:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f224 <_svfiprintf_r+0x1e4>
 800f08a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f08e:	f04f 0901 	mov.w	r9, #1
 800f092:	4623      	mov	r3, r4
 800f094:	469a      	mov	sl, r3
 800f096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f09a:	b10a      	cbz	r2, 800f0a0 <_svfiprintf_r+0x60>
 800f09c:	2a25      	cmp	r2, #37	@ 0x25
 800f09e:	d1f9      	bne.n	800f094 <_svfiprintf_r+0x54>
 800f0a0:	ebba 0b04 	subs.w	fp, sl, r4
 800f0a4:	d00b      	beq.n	800f0be <_svfiprintf_r+0x7e>
 800f0a6:	465b      	mov	r3, fp
 800f0a8:	4622      	mov	r2, r4
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	f7ff ff6b 	bl	800ef88 <__ssputs_r>
 800f0b2:	3001      	adds	r0, #1
 800f0b4:	f000 80a7 	beq.w	800f206 <_svfiprintf_r+0x1c6>
 800f0b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0ba:	445a      	add	r2, fp
 800f0bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0be:	f89a 3000 	ldrb.w	r3, [sl]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f000 809f 	beq.w	800f206 <_svfiprintf_r+0x1c6>
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f0ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0d2:	f10a 0a01 	add.w	sl, sl, #1
 800f0d6:	9304      	str	r3, [sp, #16]
 800f0d8:	9307      	str	r3, [sp, #28]
 800f0da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f0de:	931a      	str	r3, [sp, #104]	@ 0x68
 800f0e0:	4654      	mov	r4, sl
 800f0e2:	2205      	movs	r2, #5
 800f0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0e8:	484e      	ldr	r0, [pc, #312]	@ (800f224 <_svfiprintf_r+0x1e4>)
 800f0ea:	f7f1 f911 	bl	8000310 <memchr>
 800f0ee:	9a04      	ldr	r2, [sp, #16]
 800f0f0:	b9d8      	cbnz	r0, 800f12a <_svfiprintf_r+0xea>
 800f0f2:	06d0      	lsls	r0, r2, #27
 800f0f4:	bf44      	itt	mi
 800f0f6:	2320      	movmi	r3, #32
 800f0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0fc:	0711      	lsls	r1, r2, #28
 800f0fe:	bf44      	itt	mi
 800f100:	232b      	movmi	r3, #43	@ 0x2b
 800f102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f106:	f89a 3000 	ldrb.w	r3, [sl]
 800f10a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f10c:	d015      	beq.n	800f13a <_svfiprintf_r+0xfa>
 800f10e:	9a07      	ldr	r2, [sp, #28]
 800f110:	4654      	mov	r4, sl
 800f112:	2000      	movs	r0, #0
 800f114:	f04f 0c0a 	mov.w	ip, #10
 800f118:	4621      	mov	r1, r4
 800f11a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f11e:	3b30      	subs	r3, #48	@ 0x30
 800f120:	2b09      	cmp	r3, #9
 800f122:	d94b      	bls.n	800f1bc <_svfiprintf_r+0x17c>
 800f124:	b1b0      	cbz	r0, 800f154 <_svfiprintf_r+0x114>
 800f126:	9207      	str	r2, [sp, #28]
 800f128:	e014      	b.n	800f154 <_svfiprintf_r+0x114>
 800f12a:	eba0 0308 	sub.w	r3, r0, r8
 800f12e:	fa09 f303 	lsl.w	r3, r9, r3
 800f132:	4313      	orrs	r3, r2
 800f134:	9304      	str	r3, [sp, #16]
 800f136:	46a2      	mov	sl, r4
 800f138:	e7d2      	b.n	800f0e0 <_svfiprintf_r+0xa0>
 800f13a:	9b03      	ldr	r3, [sp, #12]
 800f13c:	1d19      	adds	r1, r3, #4
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	9103      	str	r1, [sp, #12]
 800f142:	2b00      	cmp	r3, #0
 800f144:	bfbb      	ittet	lt
 800f146:	425b      	neglt	r3, r3
 800f148:	f042 0202 	orrlt.w	r2, r2, #2
 800f14c:	9307      	strge	r3, [sp, #28]
 800f14e:	9307      	strlt	r3, [sp, #28]
 800f150:	bfb8      	it	lt
 800f152:	9204      	strlt	r2, [sp, #16]
 800f154:	7823      	ldrb	r3, [r4, #0]
 800f156:	2b2e      	cmp	r3, #46	@ 0x2e
 800f158:	d10a      	bne.n	800f170 <_svfiprintf_r+0x130>
 800f15a:	7863      	ldrb	r3, [r4, #1]
 800f15c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f15e:	d132      	bne.n	800f1c6 <_svfiprintf_r+0x186>
 800f160:	9b03      	ldr	r3, [sp, #12]
 800f162:	1d1a      	adds	r2, r3, #4
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	9203      	str	r2, [sp, #12]
 800f168:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f16c:	3402      	adds	r4, #2
 800f16e:	9305      	str	r3, [sp, #20]
 800f170:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f234 <_svfiprintf_r+0x1f4>
 800f174:	7821      	ldrb	r1, [r4, #0]
 800f176:	2203      	movs	r2, #3
 800f178:	4650      	mov	r0, sl
 800f17a:	f7f1 f8c9 	bl	8000310 <memchr>
 800f17e:	b138      	cbz	r0, 800f190 <_svfiprintf_r+0x150>
 800f180:	9b04      	ldr	r3, [sp, #16]
 800f182:	eba0 000a 	sub.w	r0, r0, sl
 800f186:	2240      	movs	r2, #64	@ 0x40
 800f188:	4082      	lsls	r2, r0
 800f18a:	4313      	orrs	r3, r2
 800f18c:	3401      	adds	r4, #1
 800f18e:	9304      	str	r3, [sp, #16]
 800f190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f194:	4824      	ldr	r0, [pc, #144]	@ (800f228 <_svfiprintf_r+0x1e8>)
 800f196:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f19a:	2206      	movs	r2, #6
 800f19c:	f7f1 f8b8 	bl	8000310 <memchr>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	d036      	beq.n	800f212 <_svfiprintf_r+0x1d2>
 800f1a4:	4b21      	ldr	r3, [pc, #132]	@ (800f22c <_svfiprintf_r+0x1ec>)
 800f1a6:	bb1b      	cbnz	r3, 800f1f0 <_svfiprintf_r+0x1b0>
 800f1a8:	9b03      	ldr	r3, [sp, #12]
 800f1aa:	3307      	adds	r3, #7
 800f1ac:	f023 0307 	bic.w	r3, r3, #7
 800f1b0:	3308      	adds	r3, #8
 800f1b2:	9303      	str	r3, [sp, #12]
 800f1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1b6:	4433      	add	r3, r6
 800f1b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1ba:	e76a      	b.n	800f092 <_svfiprintf_r+0x52>
 800f1bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1c0:	460c      	mov	r4, r1
 800f1c2:	2001      	movs	r0, #1
 800f1c4:	e7a8      	b.n	800f118 <_svfiprintf_r+0xd8>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	3401      	adds	r4, #1
 800f1ca:	9305      	str	r3, [sp, #20]
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	f04f 0c0a 	mov.w	ip, #10
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1d8:	3a30      	subs	r2, #48	@ 0x30
 800f1da:	2a09      	cmp	r2, #9
 800f1dc:	d903      	bls.n	800f1e6 <_svfiprintf_r+0x1a6>
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d0c6      	beq.n	800f170 <_svfiprintf_r+0x130>
 800f1e2:	9105      	str	r1, [sp, #20]
 800f1e4:	e7c4      	b.n	800f170 <_svfiprintf_r+0x130>
 800f1e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e7f0      	b.n	800f1d2 <_svfiprintf_r+0x192>
 800f1f0:	ab03      	add	r3, sp, #12
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	462a      	mov	r2, r5
 800f1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800f230 <_svfiprintf_r+0x1f0>)
 800f1f8:	a904      	add	r1, sp, #16
 800f1fa:	4638      	mov	r0, r7
 800f1fc:	f7fc fc90 	bl	800bb20 <_printf_float>
 800f200:	1c42      	adds	r2, r0, #1
 800f202:	4606      	mov	r6, r0
 800f204:	d1d6      	bne.n	800f1b4 <_svfiprintf_r+0x174>
 800f206:	89ab      	ldrh	r3, [r5, #12]
 800f208:	065b      	lsls	r3, r3, #25
 800f20a:	f53f af2d 	bmi.w	800f068 <_svfiprintf_r+0x28>
 800f20e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f210:	e72c      	b.n	800f06c <_svfiprintf_r+0x2c>
 800f212:	ab03      	add	r3, sp, #12
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	462a      	mov	r2, r5
 800f218:	4b05      	ldr	r3, [pc, #20]	@ (800f230 <_svfiprintf_r+0x1f0>)
 800f21a:	a904      	add	r1, sp, #16
 800f21c:	4638      	mov	r0, r7
 800f21e:	f7fc ff07 	bl	800c030 <_printf_i>
 800f222:	e7ed      	b.n	800f200 <_svfiprintf_r+0x1c0>
 800f224:	08010561 	.word	0x08010561
 800f228:	0801056b 	.word	0x0801056b
 800f22c:	0800bb21 	.word	0x0800bb21
 800f230:	0800ef89 	.word	0x0800ef89
 800f234:	08010567 	.word	0x08010567

0800f238 <__sfputc_r>:
 800f238:	6893      	ldr	r3, [r2, #8]
 800f23a:	3b01      	subs	r3, #1
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	b410      	push	{r4}
 800f240:	6093      	str	r3, [r2, #8]
 800f242:	da08      	bge.n	800f256 <__sfputc_r+0x1e>
 800f244:	6994      	ldr	r4, [r2, #24]
 800f246:	42a3      	cmp	r3, r4
 800f248:	db01      	blt.n	800f24e <__sfputc_r+0x16>
 800f24a:	290a      	cmp	r1, #10
 800f24c:	d103      	bne.n	800f256 <__sfputc_r+0x1e>
 800f24e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f252:	f7fd bbae 	b.w	800c9b2 <__swbuf_r>
 800f256:	6813      	ldr	r3, [r2, #0]
 800f258:	1c58      	adds	r0, r3, #1
 800f25a:	6010      	str	r0, [r2, #0]
 800f25c:	7019      	strb	r1, [r3, #0]
 800f25e:	4608      	mov	r0, r1
 800f260:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f264:	4770      	bx	lr

0800f266 <__sfputs_r>:
 800f266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f268:	4606      	mov	r6, r0
 800f26a:	460f      	mov	r7, r1
 800f26c:	4614      	mov	r4, r2
 800f26e:	18d5      	adds	r5, r2, r3
 800f270:	42ac      	cmp	r4, r5
 800f272:	d101      	bne.n	800f278 <__sfputs_r+0x12>
 800f274:	2000      	movs	r0, #0
 800f276:	e007      	b.n	800f288 <__sfputs_r+0x22>
 800f278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f27c:	463a      	mov	r2, r7
 800f27e:	4630      	mov	r0, r6
 800f280:	f7ff ffda 	bl	800f238 <__sfputc_r>
 800f284:	1c43      	adds	r3, r0, #1
 800f286:	d1f3      	bne.n	800f270 <__sfputs_r+0xa>
 800f288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f28c <_vfiprintf_r>:
 800f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f290:	460d      	mov	r5, r1
 800f292:	b09d      	sub	sp, #116	@ 0x74
 800f294:	4614      	mov	r4, r2
 800f296:	4698      	mov	r8, r3
 800f298:	4606      	mov	r6, r0
 800f29a:	b118      	cbz	r0, 800f2a4 <_vfiprintf_r+0x18>
 800f29c:	6a03      	ldr	r3, [r0, #32]
 800f29e:	b90b      	cbnz	r3, 800f2a4 <_vfiprintf_r+0x18>
 800f2a0:	f7fd fa7e 	bl	800c7a0 <__sinit>
 800f2a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2a6:	07d9      	lsls	r1, r3, #31
 800f2a8:	d405      	bmi.n	800f2b6 <_vfiprintf_r+0x2a>
 800f2aa:	89ab      	ldrh	r3, [r5, #12]
 800f2ac:	059a      	lsls	r2, r3, #22
 800f2ae:	d402      	bmi.n	800f2b6 <_vfiprintf_r+0x2a>
 800f2b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2b2:	f7fd fc90 	bl	800cbd6 <__retarget_lock_acquire_recursive>
 800f2b6:	89ab      	ldrh	r3, [r5, #12]
 800f2b8:	071b      	lsls	r3, r3, #28
 800f2ba:	d501      	bpl.n	800f2c0 <_vfiprintf_r+0x34>
 800f2bc:	692b      	ldr	r3, [r5, #16]
 800f2be:	b99b      	cbnz	r3, 800f2e8 <_vfiprintf_r+0x5c>
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f7fd fbb4 	bl	800ca30 <__swsetup_r>
 800f2c8:	b170      	cbz	r0, 800f2e8 <_vfiprintf_r+0x5c>
 800f2ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2cc:	07dc      	lsls	r4, r3, #31
 800f2ce:	d504      	bpl.n	800f2da <_vfiprintf_r+0x4e>
 800f2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d4:	b01d      	add	sp, #116	@ 0x74
 800f2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2da:	89ab      	ldrh	r3, [r5, #12]
 800f2dc:	0598      	lsls	r0, r3, #22
 800f2de:	d4f7      	bmi.n	800f2d0 <_vfiprintf_r+0x44>
 800f2e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2e2:	f7fd fc79 	bl	800cbd8 <__retarget_lock_release_recursive>
 800f2e6:	e7f3      	b.n	800f2d0 <_vfiprintf_r+0x44>
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2ec:	2320      	movs	r3, #32
 800f2ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2f6:	2330      	movs	r3, #48	@ 0x30
 800f2f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f4a8 <_vfiprintf_r+0x21c>
 800f2fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f300:	f04f 0901 	mov.w	r9, #1
 800f304:	4623      	mov	r3, r4
 800f306:	469a      	mov	sl, r3
 800f308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f30c:	b10a      	cbz	r2, 800f312 <_vfiprintf_r+0x86>
 800f30e:	2a25      	cmp	r2, #37	@ 0x25
 800f310:	d1f9      	bne.n	800f306 <_vfiprintf_r+0x7a>
 800f312:	ebba 0b04 	subs.w	fp, sl, r4
 800f316:	d00b      	beq.n	800f330 <_vfiprintf_r+0xa4>
 800f318:	465b      	mov	r3, fp
 800f31a:	4622      	mov	r2, r4
 800f31c:	4629      	mov	r1, r5
 800f31e:	4630      	mov	r0, r6
 800f320:	f7ff ffa1 	bl	800f266 <__sfputs_r>
 800f324:	3001      	adds	r0, #1
 800f326:	f000 80a7 	beq.w	800f478 <_vfiprintf_r+0x1ec>
 800f32a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f32c:	445a      	add	r2, fp
 800f32e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f330:	f89a 3000 	ldrb.w	r3, [sl]
 800f334:	2b00      	cmp	r3, #0
 800f336:	f000 809f 	beq.w	800f478 <_vfiprintf_r+0x1ec>
 800f33a:	2300      	movs	r3, #0
 800f33c:	f04f 32ff 	mov.w	r2, #4294967295
 800f340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f344:	f10a 0a01 	add.w	sl, sl, #1
 800f348:	9304      	str	r3, [sp, #16]
 800f34a:	9307      	str	r3, [sp, #28]
 800f34c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f350:	931a      	str	r3, [sp, #104]	@ 0x68
 800f352:	4654      	mov	r4, sl
 800f354:	2205      	movs	r2, #5
 800f356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f35a:	4853      	ldr	r0, [pc, #332]	@ (800f4a8 <_vfiprintf_r+0x21c>)
 800f35c:	f7f0 ffd8 	bl	8000310 <memchr>
 800f360:	9a04      	ldr	r2, [sp, #16]
 800f362:	b9d8      	cbnz	r0, 800f39c <_vfiprintf_r+0x110>
 800f364:	06d1      	lsls	r1, r2, #27
 800f366:	bf44      	itt	mi
 800f368:	2320      	movmi	r3, #32
 800f36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f36e:	0713      	lsls	r3, r2, #28
 800f370:	bf44      	itt	mi
 800f372:	232b      	movmi	r3, #43	@ 0x2b
 800f374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f378:	f89a 3000 	ldrb.w	r3, [sl]
 800f37c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f37e:	d015      	beq.n	800f3ac <_vfiprintf_r+0x120>
 800f380:	9a07      	ldr	r2, [sp, #28]
 800f382:	4654      	mov	r4, sl
 800f384:	2000      	movs	r0, #0
 800f386:	f04f 0c0a 	mov.w	ip, #10
 800f38a:	4621      	mov	r1, r4
 800f38c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f390:	3b30      	subs	r3, #48	@ 0x30
 800f392:	2b09      	cmp	r3, #9
 800f394:	d94b      	bls.n	800f42e <_vfiprintf_r+0x1a2>
 800f396:	b1b0      	cbz	r0, 800f3c6 <_vfiprintf_r+0x13a>
 800f398:	9207      	str	r2, [sp, #28]
 800f39a:	e014      	b.n	800f3c6 <_vfiprintf_r+0x13a>
 800f39c:	eba0 0308 	sub.w	r3, r0, r8
 800f3a0:	fa09 f303 	lsl.w	r3, r9, r3
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	9304      	str	r3, [sp, #16]
 800f3a8:	46a2      	mov	sl, r4
 800f3aa:	e7d2      	b.n	800f352 <_vfiprintf_r+0xc6>
 800f3ac:	9b03      	ldr	r3, [sp, #12]
 800f3ae:	1d19      	adds	r1, r3, #4
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	9103      	str	r1, [sp, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	bfbb      	ittet	lt
 800f3b8:	425b      	neglt	r3, r3
 800f3ba:	f042 0202 	orrlt.w	r2, r2, #2
 800f3be:	9307      	strge	r3, [sp, #28]
 800f3c0:	9307      	strlt	r3, [sp, #28]
 800f3c2:	bfb8      	it	lt
 800f3c4:	9204      	strlt	r2, [sp, #16]
 800f3c6:	7823      	ldrb	r3, [r4, #0]
 800f3c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3ca:	d10a      	bne.n	800f3e2 <_vfiprintf_r+0x156>
 800f3cc:	7863      	ldrb	r3, [r4, #1]
 800f3ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3d0:	d132      	bne.n	800f438 <_vfiprintf_r+0x1ac>
 800f3d2:	9b03      	ldr	r3, [sp, #12]
 800f3d4:	1d1a      	adds	r2, r3, #4
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	9203      	str	r2, [sp, #12]
 800f3da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3de:	3402      	adds	r4, #2
 800f3e0:	9305      	str	r3, [sp, #20]
 800f3e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f4b8 <_vfiprintf_r+0x22c>
 800f3e6:	7821      	ldrb	r1, [r4, #0]
 800f3e8:	2203      	movs	r2, #3
 800f3ea:	4650      	mov	r0, sl
 800f3ec:	f7f0 ff90 	bl	8000310 <memchr>
 800f3f0:	b138      	cbz	r0, 800f402 <_vfiprintf_r+0x176>
 800f3f2:	9b04      	ldr	r3, [sp, #16]
 800f3f4:	eba0 000a 	sub.w	r0, r0, sl
 800f3f8:	2240      	movs	r2, #64	@ 0x40
 800f3fa:	4082      	lsls	r2, r0
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	3401      	adds	r4, #1
 800f400:	9304      	str	r3, [sp, #16]
 800f402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f406:	4829      	ldr	r0, [pc, #164]	@ (800f4ac <_vfiprintf_r+0x220>)
 800f408:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f40c:	2206      	movs	r2, #6
 800f40e:	f7f0 ff7f 	bl	8000310 <memchr>
 800f412:	2800      	cmp	r0, #0
 800f414:	d03f      	beq.n	800f496 <_vfiprintf_r+0x20a>
 800f416:	4b26      	ldr	r3, [pc, #152]	@ (800f4b0 <_vfiprintf_r+0x224>)
 800f418:	bb1b      	cbnz	r3, 800f462 <_vfiprintf_r+0x1d6>
 800f41a:	9b03      	ldr	r3, [sp, #12]
 800f41c:	3307      	adds	r3, #7
 800f41e:	f023 0307 	bic.w	r3, r3, #7
 800f422:	3308      	adds	r3, #8
 800f424:	9303      	str	r3, [sp, #12]
 800f426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f428:	443b      	add	r3, r7
 800f42a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f42c:	e76a      	b.n	800f304 <_vfiprintf_r+0x78>
 800f42e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f432:	460c      	mov	r4, r1
 800f434:	2001      	movs	r0, #1
 800f436:	e7a8      	b.n	800f38a <_vfiprintf_r+0xfe>
 800f438:	2300      	movs	r3, #0
 800f43a:	3401      	adds	r4, #1
 800f43c:	9305      	str	r3, [sp, #20]
 800f43e:	4619      	mov	r1, r3
 800f440:	f04f 0c0a 	mov.w	ip, #10
 800f444:	4620      	mov	r0, r4
 800f446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f44a:	3a30      	subs	r2, #48	@ 0x30
 800f44c:	2a09      	cmp	r2, #9
 800f44e:	d903      	bls.n	800f458 <_vfiprintf_r+0x1cc>
 800f450:	2b00      	cmp	r3, #0
 800f452:	d0c6      	beq.n	800f3e2 <_vfiprintf_r+0x156>
 800f454:	9105      	str	r1, [sp, #20]
 800f456:	e7c4      	b.n	800f3e2 <_vfiprintf_r+0x156>
 800f458:	fb0c 2101 	mla	r1, ip, r1, r2
 800f45c:	4604      	mov	r4, r0
 800f45e:	2301      	movs	r3, #1
 800f460:	e7f0      	b.n	800f444 <_vfiprintf_r+0x1b8>
 800f462:	ab03      	add	r3, sp, #12
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	462a      	mov	r2, r5
 800f468:	4b12      	ldr	r3, [pc, #72]	@ (800f4b4 <_vfiprintf_r+0x228>)
 800f46a:	a904      	add	r1, sp, #16
 800f46c:	4630      	mov	r0, r6
 800f46e:	f7fc fb57 	bl	800bb20 <_printf_float>
 800f472:	4607      	mov	r7, r0
 800f474:	1c78      	adds	r0, r7, #1
 800f476:	d1d6      	bne.n	800f426 <_vfiprintf_r+0x19a>
 800f478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f47a:	07d9      	lsls	r1, r3, #31
 800f47c:	d405      	bmi.n	800f48a <_vfiprintf_r+0x1fe>
 800f47e:	89ab      	ldrh	r3, [r5, #12]
 800f480:	059a      	lsls	r2, r3, #22
 800f482:	d402      	bmi.n	800f48a <_vfiprintf_r+0x1fe>
 800f484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f486:	f7fd fba7 	bl	800cbd8 <__retarget_lock_release_recursive>
 800f48a:	89ab      	ldrh	r3, [r5, #12]
 800f48c:	065b      	lsls	r3, r3, #25
 800f48e:	f53f af1f 	bmi.w	800f2d0 <_vfiprintf_r+0x44>
 800f492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f494:	e71e      	b.n	800f2d4 <_vfiprintf_r+0x48>
 800f496:	ab03      	add	r3, sp, #12
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	462a      	mov	r2, r5
 800f49c:	4b05      	ldr	r3, [pc, #20]	@ (800f4b4 <_vfiprintf_r+0x228>)
 800f49e:	a904      	add	r1, sp, #16
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	f7fc fdc5 	bl	800c030 <_printf_i>
 800f4a6:	e7e4      	b.n	800f472 <_vfiprintf_r+0x1e6>
 800f4a8:	08010561 	.word	0x08010561
 800f4ac:	0801056b 	.word	0x0801056b
 800f4b0:	0800bb21 	.word	0x0800bb21
 800f4b4:	0800f267 	.word	0x0800f267
 800f4b8:	08010567 	.word	0x08010567

0800f4bc <__sflush_r>:
 800f4bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c4:	0716      	lsls	r6, r2, #28
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	d454      	bmi.n	800f576 <__sflush_r+0xba>
 800f4cc:	684b      	ldr	r3, [r1, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	dc02      	bgt.n	800f4d8 <__sflush_r+0x1c>
 800f4d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	dd48      	ble.n	800f56a <__sflush_r+0xae>
 800f4d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4da:	2e00      	cmp	r6, #0
 800f4dc:	d045      	beq.n	800f56a <__sflush_r+0xae>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f4e4:	682f      	ldr	r7, [r5, #0]
 800f4e6:	6a21      	ldr	r1, [r4, #32]
 800f4e8:	602b      	str	r3, [r5, #0]
 800f4ea:	d030      	beq.n	800f54e <__sflush_r+0x92>
 800f4ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f4ee:	89a3      	ldrh	r3, [r4, #12]
 800f4f0:	0759      	lsls	r1, r3, #29
 800f4f2:	d505      	bpl.n	800f500 <__sflush_r+0x44>
 800f4f4:	6863      	ldr	r3, [r4, #4]
 800f4f6:	1ad2      	subs	r2, r2, r3
 800f4f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4fa:	b10b      	cbz	r3, 800f500 <__sflush_r+0x44>
 800f4fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4fe:	1ad2      	subs	r2, r2, r3
 800f500:	2300      	movs	r3, #0
 800f502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f504:	6a21      	ldr	r1, [r4, #32]
 800f506:	4628      	mov	r0, r5
 800f508:	47b0      	blx	r6
 800f50a:	1c43      	adds	r3, r0, #1
 800f50c:	89a3      	ldrh	r3, [r4, #12]
 800f50e:	d106      	bne.n	800f51e <__sflush_r+0x62>
 800f510:	6829      	ldr	r1, [r5, #0]
 800f512:	291d      	cmp	r1, #29
 800f514:	d82b      	bhi.n	800f56e <__sflush_r+0xb2>
 800f516:	4a2a      	ldr	r2, [pc, #168]	@ (800f5c0 <__sflush_r+0x104>)
 800f518:	410a      	asrs	r2, r1
 800f51a:	07d6      	lsls	r6, r2, #31
 800f51c:	d427      	bmi.n	800f56e <__sflush_r+0xb2>
 800f51e:	2200      	movs	r2, #0
 800f520:	6062      	str	r2, [r4, #4]
 800f522:	04d9      	lsls	r1, r3, #19
 800f524:	6922      	ldr	r2, [r4, #16]
 800f526:	6022      	str	r2, [r4, #0]
 800f528:	d504      	bpl.n	800f534 <__sflush_r+0x78>
 800f52a:	1c42      	adds	r2, r0, #1
 800f52c:	d101      	bne.n	800f532 <__sflush_r+0x76>
 800f52e:	682b      	ldr	r3, [r5, #0]
 800f530:	b903      	cbnz	r3, 800f534 <__sflush_r+0x78>
 800f532:	6560      	str	r0, [r4, #84]	@ 0x54
 800f534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f536:	602f      	str	r7, [r5, #0]
 800f538:	b1b9      	cbz	r1, 800f56a <__sflush_r+0xae>
 800f53a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f53e:	4299      	cmp	r1, r3
 800f540:	d002      	beq.n	800f548 <__sflush_r+0x8c>
 800f542:	4628      	mov	r0, r5
 800f544:	f7fe f93e 	bl	800d7c4 <_free_r>
 800f548:	2300      	movs	r3, #0
 800f54a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f54c:	e00d      	b.n	800f56a <__sflush_r+0xae>
 800f54e:	2301      	movs	r3, #1
 800f550:	4628      	mov	r0, r5
 800f552:	47b0      	blx	r6
 800f554:	4602      	mov	r2, r0
 800f556:	1c50      	adds	r0, r2, #1
 800f558:	d1c9      	bne.n	800f4ee <__sflush_r+0x32>
 800f55a:	682b      	ldr	r3, [r5, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d0c6      	beq.n	800f4ee <__sflush_r+0x32>
 800f560:	2b1d      	cmp	r3, #29
 800f562:	d001      	beq.n	800f568 <__sflush_r+0xac>
 800f564:	2b16      	cmp	r3, #22
 800f566:	d11e      	bne.n	800f5a6 <__sflush_r+0xea>
 800f568:	602f      	str	r7, [r5, #0]
 800f56a:	2000      	movs	r0, #0
 800f56c:	e022      	b.n	800f5b4 <__sflush_r+0xf8>
 800f56e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f572:	b21b      	sxth	r3, r3
 800f574:	e01b      	b.n	800f5ae <__sflush_r+0xf2>
 800f576:	690f      	ldr	r7, [r1, #16]
 800f578:	2f00      	cmp	r7, #0
 800f57a:	d0f6      	beq.n	800f56a <__sflush_r+0xae>
 800f57c:	0793      	lsls	r3, r2, #30
 800f57e:	680e      	ldr	r6, [r1, #0]
 800f580:	bf08      	it	eq
 800f582:	694b      	ldreq	r3, [r1, #20]
 800f584:	600f      	str	r7, [r1, #0]
 800f586:	bf18      	it	ne
 800f588:	2300      	movne	r3, #0
 800f58a:	eba6 0807 	sub.w	r8, r6, r7
 800f58e:	608b      	str	r3, [r1, #8]
 800f590:	f1b8 0f00 	cmp.w	r8, #0
 800f594:	dde9      	ble.n	800f56a <__sflush_r+0xae>
 800f596:	6a21      	ldr	r1, [r4, #32]
 800f598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f59a:	4643      	mov	r3, r8
 800f59c:	463a      	mov	r2, r7
 800f59e:	4628      	mov	r0, r5
 800f5a0:	47b0      	blx	r6
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	dc08      	bgt.n	800f5b8 <__sflush_r+0xfc>
 800f5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5ae:	81a3      	strh	r3, [r4, #12]
 800f5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5b8:	4407      	add	r7, r0
 800f5ba:	eba8 0800 	sub.w	r8, r8, r0
 800f5be:	e7e7      	b.n	800f590 <__sflush_r+0xd4>
 800f5c0:	dfbffffe 	.word	0xdfbffffe

0800f5c4 <_fflush_r>:
 800f5c4:	b538      	push	{r3, r4, r5, lr}
 800f5c6:	690b      	ldr	r3, [r1, #16]
 800f5c8:	4605      	mov	r5, r0
 800f5ca:	460c      	mov	r4, r1
 800f5cc:	b913      	cbnz	r3, 800f5d4 <_fflush_r+0x10>
 800f5ce:	2500      	movs	r5, #0
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	bd38      	pop	{r3, r4, r5, pc}
 800f5d4:	b118      	cbz	r0, 800f5de <_fflush_r+0x1a>
 800f5d6:	6a03      	ldr	r3, [r0, #32]
 800f5d8:	b90b      	cbnz	r3, 800f5de <_fflush_r+0x1a>
 800f5da:	f7fd f8e1 	bl	800c7a0 <__sinit>
 800f5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d0f3      	beq.n	800f5ce <_fflush_r+0xa>
 800f5e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f5e8:	07d0      	lsls	r0, r2, #31
 800f5ea:	d404      	bmi.n	800f5f6 <_fflush_r+0x32>
 800f5ec:	0599      	lsls	r1, r3, #22
 800f5ee:	d402      	bmi.n	800f5f6 <_fflush_r+0x32>
 800f5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5f2:	f7fd faf0 	bl	800cbd6 <__retarget_lock_acquire_recursive>
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	4621      	mov	r1, r4
 800f5fa:	f7ff ff5f 	bl	800f4bc <__sflush_r>
 800f5fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f600:	07da      	lsls	r2, r3, #31
 800f602:	4605      	mov	r5, r0
 800f604:	d4e4      	bmi.n	800f5d0 <_fflush_r+0xc>
 800f606:	89a3      	ldrh	r3, [r4, #12]
 800f608:	059b      	lsls	r3, r3, #22
 800f60a:	d4e1      	bmi.n	800f5d0 <_fflush_r+0xc>
 800f60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f60e:	f7fd fae3 	bl	800cbd8 <__retarget_lock_release_recursive>
 800f612:	e7dd      	b.n	800f5d0 <_fflush_r+0xc>

0800f614 <__swhatbuf_r>:
 800f614:	b570      	push	{r4, r5, r6, lr}
 800f616:	460c      	mov	r4, r1
 800f618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f61c:	2900      	cmp	r1, #0
 800f61e:	b096      	sub	sp, #88	@ 0x58
 800f620:	4615      	mov	r5, r2
 800f622:	461e      	mov	r6, r3
 800f624:	da0d      	bge.n	800f642 <__swhatbuf_r+0x2e>
 800f626:	89a3      	ldrh	r3, [r4, #12]
 800f628:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f62c:	f04f 0100 	mov.w	r1, #0
 800f630:	bf14      	ite	ne
 800f632:	2340      	movne	r3, #64	@ 0x40
 800f634:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f638:	2000      	movs	r0, #0
 800f63a:	6031      	str	r1, [r6, #0]
 800f63c:	602b      	str	r3, [r5, #0]
 800f63e:	b016      	add	sp, #88	@ 0x58
 800f640:	bd70      	pop	{r4, r5, r6, pc}
 800f642:	466a      	mov	r2, sp
 800f644:	f000 f874 	bl	800f730 <_fstat_r>
 800f648:	2800      	cmp	r0, #0
 800f64a:	dbec      	blt.n	800f626 <__swhatbuf_r+0x12>
 800f64c:	9901      	ldr	r1, [sp, #4]
 800f64e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f652:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f656:	4259      	negs	r1, r3
 800f658:	4159      	adcs	r1, r3
 800f65a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f65e:	e7eb      	b.n	800f638 <__swhatbuf_r+0x24>

0800f660 <__smakebuf_r>:
 800f660:	898b      	ldrh	r3, [r1, #12]
 800f662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f664:	079d      	lsls	r5, r3, #30
 800f666:	4606      	mov	r6, r0
 800f668:	460c      	mov	r4, r1
 800f66a:	d507      	bpl.n	800f67c <__smakebuf_r+0x1c>
 800f66c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f670:	6023      	str	r3, [r4, #0]
 800f672:	6123      	str	r3, [r4, #16]
 800f674:	2301      	movs	r3, #1
 800f676:	6163      	str	r3, [r4, #20]
 800f678:	b003      	add	sp, #12
 800f67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f67c:	ab01      	add	r3, sp, #4
 800f67e:	466a      	mov	r2, sp
 800f680:	f7ff ffc8 	bl	800f614 <__swhatbuf_r>
 800f684:	9f00      	ldr	r7, [sp, #0]
 800f686:	4605      	mov	r5, r0
 800f688:	4639      	mov	r1, r7
 800f68a:	4630      	mov	r0, r6
 800f68c:	f7fe f90e 	bl	800d8ac <_malloc_r>
 800f690:	b948      	cbnz	r0, 800f6a6 <__smakebuf_r+0x46>
 800f692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f696:	059a      	lsls	r2, r3, #22
 800f698:	d4ee      	bmi.n	800f678 <__smakebuf_r+0x18>
 800f69a:	f023 0303 	bic.w	r3, r3, #3
 800f69e:	f043 0302 	orr.w	r3, r3, #2
 800f6a2:	81a3      	strh	r3, [r4, #12]
 800f6a4:	e7e2      	b.n	800f66c <__smakebuf_r+0xc>
 800f6a6:	89a3      	ldrh	r3, [r4, #12]
 800f6a8:	6020      	str	r0, [r4, #0]
 800f6aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6ae:	81a3      	strh	r3, [r4, #12]
 800f6b0:	9b01      	ldr	r3, [sp, #4]
 800f6b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f6b6:	b15b      	cbz	r3, 800f6d0 <__smakebuf_r+0x70>
 800f6b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6bc:	4630      	mov	r0, r6
 800f6be:	f000 f849 	bl	800f754 <_isatty_r>
 800f6c2:	b128      	cbz	r0, 800f6d0 <__smakebuf_r+0x70>
 800f6c4:	89a3      	ldrh	r3, [r4, #12]
 800f6c6:	f023 0303 	bic.w	r3, r3, #3
 800f6ca:	f043 0301 	orr.w	r3, r3, #1
 800f6ce:	81a3      	strh	r3, [r4, #12]
 800f6d0:	89a3      	ldrh	r3, [r4, #12]
 800f6d2:	431d      	orrs	r5, r3
 800f6d4:	81a5      	strh	r5, [r4, #12]
 800f6d6:	e7cf      	b.n	800f678 <__smakebuf_r+0x18>

0800f6d8 <memmove>:
 800f6d8:	4288      	cmp	r0, r1
 800f6da:	b510      	push	{r4, lr}
 800f6dc:	eb01 0402 	add.w	r4, r1, r2
 800f6e0:	d902      	bls.n	800f6e8 <memmove+0x10>
 800f6e2:	4284      	cmp	r4, r0
 800f6e4:	4623      	mov	r3, r4
 800f6e6:	d807      	bhi.n	800f6f8 <memmove+0x20>
 800f6e8:	1e43      	subs	r3, r0, #1
 800f6ea:	42a1      	cmp	r1, r4
 800f6ec:	d008      	beq.n	800f700 <memmove+0x28>
 800f6ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6f6:	e7f8      	b.n	800f6ea <memmove+0x12>
 800f6f8:	4402      	add	r2, r0
 800f6fa:	4601      	mov	r1, r0
 800f6fc:	428a      	cmp	r2, r1
 800f6fe:	d100      	bne.n	800f702 <memmove+0x2a>
 800f700:	bd10      	pop	{r4, pc}
 800f702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f70a:	e7f7      	b.n	800f6fc <memmove+0x24>

0800f70c <strncmp>:
 800f70c:	b510      	push	{r4, lr}
 800f70e:	b16a      	cbz	r2, 800f72c <strncmp+0x20>
 800f710:	3901      	subs	r1, #1
 800f712:	1884      	adds	r4, r0, r2
 800f714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f718:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d103      	bne.n	800f728 <strncmp+0x1c>
 800f720:	42a0      	cmp	r0, r4
 800f722:	d001      	beq.n	800f728 <strncmp+0x1c>
 800f724:	2a00      	cmp	r2, #0
 800f726:	d1f5      	bne.n	800f714 <strncmp+0x8>
 800f728:	1ad0      	subs	r0, r2, r3
 800f72a:	bd10      	pop	{r4, pc}
 800f72c:	4610      	mov	r0, r2
 800f72e:	e7fc      	b.n	800f72a <strncmp+0x1e>

0800f730 <_fstat_r>:
 800f730:	b538      	push	{r3, r4, r5, lr}
 800f732:	4d07      	ldr	r5, [pc, #28]	@ (800f750 <_fstat_r+0x20>)
 800f734:	2300      	movs	r3, #0
 800f736:	4604      	mov	r4, r0
 800f738:	4608      	mov	r0, r1
 800f73a:	4611      	mov	r1, r2
 800f73c:	602b      	str	r3, [r5, #0]
 800f73e:	f7f2 fbac 	bl	8001e9a <_fstat>
 800f742:	1c43      	adds	r3, r0, #1
 800f744:	d102      	bne.n	800f74c <_fstat_r+0x1c>
 800f746:	682b      	ldr	r3, [r5, #0]
 800f748:	b103      	cbz	r3, 800f74c <_fstat_r+0x1c>
 800f74a:	6023      	str	r3, [r4, #0]
 800f74c:	bd38      	pop	{r3, r4, r5, pc}
 800f74e:	bf00      	nop
 800f750:	2400076c 	.word	0x2400076c

0800f754 <_isatty_r>:
 800f754:	b538      	push	{r3, r4, r5, lr}
 800f756:	4d06      	ldr	r5, [pc, #24]	@ (800f770 <_isatty_r+0x1c>)
 800f758:	2300      	movs	r3, #0
 800f75a:	4604      	mov	r4, r0
 800f75c:	4608      	mov	r0, r1
 800f75e:	602b      	str	r3, [r5, #0]
 800f760:	f7f2 fbab 	bl	8001eba <_isatty>
 800f764:	1c43      	adds	r3, r0, #1
 800f766:	d102      	bne.n	800f76e <_isatty_r+0x1a>
 800f768:	682b      	ldr	r3, [r5, #0]
 800f76a:	b103      	cbz	r3, 800f76e <_isatty_r+0x1a>
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	bd38      	pop	{r3, r4, r5, pc}
 800f770:	2400076c 	.word	0x2400076c

0800f774 <_sbrk_r>:
 800f774:	b538      	push	{r3, r4, r5, lr}
 800f776:	4d06      	ldr	r5, [pc, #24]	@ (800f790 <_sbrk_r+0x1c>)
 800f778:	2300      	movs	r3, #0
 800f77a:	4604      	mov	r4, r0
 800f77c:	4608      	mov	r0, r1
 800f77e:	602b      	str	r3, [r5, #0]
 800f780:	f7f2 fbb4 	bl	8001eec <_sbrk>
 800f784:	1c43      	adds	r3, r0, #1
 800f786:	d102      	bne.n	800f78e <_sbrk_r+0x1a>
 800f788:	682b      	ldr	r3, [r5, #0]
 800f78a:	b103      	cbz	r3, 800f78e <_sbrk_r+0x1a>
 800f78c:	6023      	str	r3, [r4, #0]
 800f78e:	bd38      	pop	{r3, r4, r5, pc}
 800f790:	2400076c 	.word	0x2400076c
 800f794:	00000000 	.word	0x00000000

0800f798 <nan>:
 800f798:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f7a0 <nan+0x8>
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	00000000 	.word	0x00000000
 800f7a4:	7ff80000 	.word	0x7ff80000

0800f7a8 <__assert_func>:
 800f7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7aa:	4614      	mov	r4, r2
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	4b09      	ldr	r3, [pc, #36]	@ (800f7d4 <__assert_func+0x2c>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4605      	mov	r5, r0
 800f7b4:	68d8      	ldr	r0, [r3, #12]
 800f7b6:	b954      	cbnz	r4, 800f7ce <__assert_func+0x26>
 800f7b8:	4b07      	ldr	r3, [pc, #28]	@ (800f7d8 <__assert_func+0x30>)
 800f7ba:	461c      	mov	r4, r3
 800f7bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7c0:	9100      	str	r1, [sp, #0]
 800f7c2:	462b      	mov	r3, r5
 800f7c4:	4905      	ldr	r1, [pc, #20]	@ (800f7dc <__assert_func+0x34>)
 800f7c6:	f000 fba7 	bl	800ff18 <fiprintf>
 800f7ca:	f000 fbb7 	bl	800ff3c <abort>
 800f7ce:	4b04      	ldr	r3, [pc, #16]	@ (800f7e0 <__assert_func+0x38>)
 800f7d0:	e7f4      	b.n	800f7bc <__assert_func+0x14>
 800f7d2:	bf00      	nop
 800f7d4:	24000024 	.word	0x24000024
 800f7d8:	080105b5 	.word	0x080105b5
 800f7dc:	08010587 	.word	0x08010587
 800f7e0:	0801057a 	.word	0x0801057a

0800f7e4 <_calloc_r>:
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	fba1 5402 	umull	r5, r4, r1, r2
 800f7ea:	b93c      	cbnz	r4, 800f7fc <_calloc_r+0x18>
 800f7ec:	4629      	mov	r1, r5
 800f7ee:	f7fe f85d 	bl	800d8ac <_malloc_r>
 800f7f2:	4606      	mov	r6, r0
 800f7f4:	b928      	cbnz	r0, 800f802 <_calloc_r+0x1e>
 800f7f6:	2600      	movs	r6, #0
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	bd70      	pop	{r4, r5, r6, pc}
 800f7fc:	220c      	movs	r2, #12
 800f7fe:	6002      	str	r2, [r0, #0]
 800f800:	e7f9      	b.n	800f7f6 <_calloc_r+0x12>
 800f802:	462a      	mov	r2, r5
 800f804:	4621      	mov	r1, r4
 800f806:	f7fd f969 	bl	800cadc <memset>
 800f80a:	e7f5      	b.n	800f7f8 <_calloc_r+0x14>

0800f80c <rshift>:
 800f80c:	6903      	ldr	r3, [r0, #16]
 800f80e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f812:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f816:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f81a:	f100 0414 	add.w	r4, r0, #20
 800f81e:	dd45      	ble.n	800f8ac <rshift+0xa0>
 800f820:	f011 011f 	ands.w	r1, r1, #31
 800f824:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f828:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f82c:	d10c      	bne.n	800f848 <rshift+0x3c>
 800f82e:	f100 0710 	add.w	r7, r0, #16
 800f832:	4629      	mov	r1, r5
 800f834:	42b1      	cmp	r1, r6
 800f836:	d334      	bcc.n	800f8a2 <rshift+0x96>
 800f838:	1a9b      	subs	r3, r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	1eea      	subs	r2, r5, #3
 800f83e:	4296      	cmp	r6, r2
 800f840:	bf38      	it	cc
 800f842:	2300      	movcc	r3, #0
 800f844:	4423      	add	r3, r4
 800f846:	e015      	b.n	800f874 <rshift+0x68>
 800f848:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f84c:	f1c1 0820 	rsb	r8, r1, #32
 800f850:	40cf      	lsrs	r7, r1
 800f852:	f105 0e04 	add.w	lr, r5, #4
 800f856:	46a1      	mov	r9, r4
 800f858:	4576      	cmp	r6, lr
 800f85a:	46f4      	mov	ip, lr
 800f85c:	d815      	bhi.n	800f88a <rshift+0x7e>
 800f85e:	1a9a      	subs	r2, r3, r2
 800f860:	0092      	lsls	r2, r2, #2
 800f862:	3a04      	subs	r2, #4
 800f864:	3501      	adds	r5, #1
 800f866:	42ae      	cmp	r6, r5
 800f868:	bf38      	it	cc
 800f86a:	2200      	movcc	r2, #0
 800f86c:	18a3      	adds	r3, r4, r2
 800f86e:	50a7      	str	r7, [r4, r2]
 800f870:	b107      	cbz	r7, 800f874 <rshift+0x68>
 800f872:	3304      	adds	r3, #4
 800f874:	1b1a      	subs	r2, r3, r4
 800f876:	42a3      	cmp	r3, r4
 800f878:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f87c:	bf08      	it	eq
 800f87e:	2300      	moveq	r3, #0
 800f880:	6102      	str	r2, [r0, #16]
 800f882:	bf08      	it	eq
 800f884:	6143      	streq	r3, [r0, #20]
 800f886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f88a:	f8dc c000 	ldr.w	ip, [ip]
 800f88e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f892:	ea4c 0707 	orr.w	r7, ip, r7
 800f896:	f849 7b04 	str.w	r7, [r9], #4
 800f89a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f89e:	40cf      	lsrs	r7, r1
 800f8a0:	e7da      	b.n	800f858 <rshift+0x4c>
 800f8a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f8a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f8aa:	e7c3      	b.n	800f834 <rshift+0x28>
 800f8ac:	4623      	mov	r3, r4
 800f8ae:	e7e1      	b.n	800f874 <rshift+0x68>

0800f8b0 <__hexdig_fun>:
 800f8b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f8b4:	2b09      	cmp	r3, #9
 800f8b6:	d802      	bhi.n	800f8be <__hexdig_fun+0xe>
 800f8b8:	3820      	subs	r0, #32
 800f8ba:	b2c0      	uxtb	r0, r0
 800f8bc:	4770      	bx	lr
 800f8be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f8c2:	2b05      	cmp	r3, #5
 800f8c4:	d801      	bhi.n	800f8ca <__hexdig_fun+0x1a>
 800f8c6:	3847      	subs	r0, #71	@ 0x47
 800f8c8:	e7f7      	b.n	800f8ba <__hexdig_fun+0xa>
 800f8ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f8ce:	2b05      	cmp	r3, #5
 800f8d0:	d801      	bhi.n	800f8d6 <__hexdig_fun+0x26>
 800f8d2:	3827      	subs	r0, #39	@ 0x27
 800f8d4:	e7f1      	b.n	800f8ba <__hexdig_fun+0xa>
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	4770      	bx	lr
	...

0800f8dc <__gethex>:
 800f8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e0:	b085      	sub	sp, #20
 800f8e2:	468a      	mov	sl, r1
 800f8e4:	9302      	str	r3, [sp, #8]
 800f8e6:	680b      	ldr	r3, [r1, #0]
 800f8e8:	9001      	str	r0, [sp, #4]
 800f8ea:	4690      	mov	r8, r2
 800f8ec:	1c9c      	adds	r4, r3, #2
 800f8ee:	46a1      	mov	r9, r4
 800f8f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f8f4:	2830      	cmp	r0, #48	@ 0x30
 800f8f6:	d0fa      	beq.n	800f8ee <__gethex+0x12>
 800f8f8:	eba9 0303 	sub.w	r3, r9, r3
 800f8fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800f900:	f7ff ffd6 	bl	800f8b0 <__hexdig_fun>
 800f904:	4605      	mov	r5, r0
 800f906:	2800      	cmp	r0, #0
 800f908:	d168      	bne.n	800f9dc <__gethex+0x100>
 800f90a:	49a0      	ldr	r1, [pc, #640]	@ (800fb8c <__gethex+0x2b0>)
 800f90c:	2201      	movs	r2, #1
 800f90e:	4648      	mov	r0, r9
 800f910:	f7ff fefc 	bl	800f70c <strncmp>
 800f914:	4607      	mov	r7, r0
 800f916:	2800      	cmp	r0, #0
 800f918:	d167      	bne.n	800f9ea <__gethex+0x10e>
 800f91a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f91e:	4626      	mov	r6, r4
 800f920:	f7ff ffc6 	bl	800f8b0 <__hexdig_fun>
 800f924:	2800      	cmp	r0, #0
 800f926:	d062      	beq.n	800f9ee <__gethex+0x112>
 800f928:	4623      	mov	r3, r4
 800f92a:	7818      	ldrb	r0, [r3, #0]
 800f92c:	2830      	cmp	r0, #48	@ 0x30
 800f92e:	4699      	mov	r9, r3
 800f930:	f103 0301 	add.w	r3, r3, #1
 800f934:	d0f9      	beq.n	800f92a <__gethex+0x4e>
 800f936:	f7ff ffbb 	bl	800f8b0 <__hexdig_fun>
 800f93a:	fab0 f580 	clz	r5, r0
 800f93e:	096d      	lsrs	r5, r5, #5
 800f940:	f04f 0b01 	mov.w	fp, #1
 800f944:	464a      	mov	r2, r9
 800f946:	4616      	mov	r6, r2
 800f948:	3201      	adds	r2, #1
 800f94a:	7830      	ldrb	r0, [r6, #0]
 800f94c:	f7ff ffb0 	bl	800f8b0 <__hexdig_fun>
 800f950:	2800      	cmp	r0, #0
 800f952:	d1f8      	bne.n	800f946 <__gethex+0x6a>
 800f954:	498d      	ldr	r1, [pc, #564]	@ (800fb8c <__gethex+0x2b0>)
 800f956:	2201      	movs	r2, #1
 800f958:	4630      	mov	r0, r6
 800f95a:	f7ff fed7 	bl	800f70c <strncmp>
 800f95e:	2800      	cmp	r0, #0
 800f960:	d13f      	bne.n	800f9e2 <__gethex+0x106>
 800f962:	b944      	cbnz	r4, 800f976 <__gethex+0x9a>
 800f964:	1c74      	adds	r4, r6, #1
 800f966:	4622      	mov	r2, r4
 800f968:	4616      	mov	r6, r2
 800f96a:	3201      	adds	r2, #1
 800f96c:	7830      	ldrb	r0, [r6, #0]
 800f96e:	f7ff ff9f 	bl	800f8b0 <__hexdig_fun>
 800f972:	2800      	cmp	r0, #0
 800f974:	d1f8      	bne.n	800f968 <__gethex+0x8c>
 800f976:	1ba4      	subs	r4, r4, r6
 800f978:	00a7      	lsls	r7, r4, #2
 800f97a:	7833      	ldrb	r3, [r6, #0]
 800f97c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f980:	2b50      	cmp	r3, #80	@ 0x50
 800f982:	d13e      	bne.n	800fa02 <__gethex+0x126>
 800f984:	7873      	ldrb	r3, [r6, #1]
 800f986:	2b2b      	cmp	r3, #43	@ 0x2b
 800f988:	d033      	beq.n	800f9f2 <__gethex+0x116>
 800f98a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f98c:	d034      	beq.n	800f9f8 <__gethex+0x11c>
 800f98e:	1c71      	adds	r1, r6, #1
 800f990:	2400      	movs	r4, #0
 800f992:	7808      	ldrb	r0, [r1, #0]
 800f994:	f7ff ff8c 	bl	800f8b0 <__hexdig_fun>
 800f998:	1e43      	subs	r3, r0, #1
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	2b18      	cmp	r3, #24
 800f99e:	d830      	bhi.n	800fa02 <__gethex+0x126>
 800f9a0:	f1a0 0210 	sub.w	r2, r0, #16
 800f9a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f9a8:	f7ff ff82 	bl	800f8b0 <__hexdig_fun>
 800f9ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800f9b0:	fa5f fc8c 	uxtb.w	ip, ip
 800f9b4:	f1bc 0f18 	cmp.w	ip, #24
 800f9b8:	f04f 030a 	mov.w	r3, #10
 800f9bc:	d91e      	bls.n	800f9fc <__gethex+0x120>
 800f9be:	b104      	cbz	r4, 800f9c2 <__gethex+0xe6>
 800f9c0:	4252      	negs	r2, r2
 800f9c2:	4417      	add	r7, r2
 800f9c4:	f8ca 1000 	str.w	r1, [sl]
 800f9c8:	b1ed      	cbz	r5, 800fa06 <__gethex+0x12a>
 800f9ca:	f1bb 0f00 	cmp.w	fp, #0
 800f9ce:	bf0c      	ite	eq
 800f9d0:	2506      	moveq	r5, #6
 800f9d2:	2500      	movne	r5, #0
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	b005      	add	sp, #20
 800f9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9dc:	2500      	movs	r5, #0
 800f9de:	462c      	mov	r4, r5
 800f9e0:	e7b0      	b.n	800f944 <__gethex+0x68>
 800f9e2:	2c00      	cmp	r4, #0
 800f9e4:	d1c7      	bne.n	800f976 <__gethex+0x9a>
 800f9e6:	4627      	mov	r7, r4
 800f9e8:	e7c7      	b.n	800f97a <__gethex+0x9e>
 800f9ea:	464e      	mov	r6, r9
 800f9ec:	462f      	mov	r7, r5
 800f9ee:	2501      	movs	r5, #1
 800f9f0:	e7c3      	b.n	800f97a <__gethex+0x9e>
 800f9f2:	2400      	movs	r4, #0
 800f9f4:	1cb1      	adds	r1, r6, #2
 800f9f6:	e7cc      	b.n	800f992 <__gethex+0xb6>
 800f9f8:	2401      	movs	r4, #1
 800f9fa:	e7fb      	b.n	800f9f4 <__gethex+0x118>
 800f9fc:	fb03 0002 	mla	r0, r3, r2, r0
 800fa00:	e7ce      	b.n	800f9a0 <__gethex+0xc4>
 800fa02:	4631      	mov	r1, r6
 800fa04:	e7de      	b.n	800f9c4 <__gethex+0xe8>
 800fa06:	eba6 0309 	sub.w	r3, r6, r9
 800fa0a:	3b01      	subs	r3, #1
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	2b07      	cmp	r3, #7
 800fa10:	dc0a      	bgt.n	800fa28 <__gethex+0x14c>
 800fa12:	9801      	ldr	r0, [sp, #4]
 800fa14:	f7fd ffd6 	bl	800d9c4 <_Balloc>
 800fa18:	4604      	mov	r4, r0
 800fa1a:	b940      	cbnz	r0, 800fa2e <__gethex+0x152>
 800fa1c:	4b5c      	ldr	r3, [pc, #368]	@ (800fb90 <__gethex+0x2b4>)
 800fa1e:	4602      	mov	r2, r0
 800fa20:	21e4      	movs	r1, #228	@ 0xe4
 800fa22:	485c      	ldr	r0, [pc, #368]	@ (800fb94 <__gethex+0x2b8>)
 800fa24:	f7ff fec0 	bl	800f7a8 <__assert_func>
 800fa28:	3101      	adds	r1, #1
 800fa2a:	105b      	asrs	r3, r3, #1
 800fa2c:	e7ef      	b.n	800fa0e <__gethex+0x132>
 800fa2e:	f100 0a14 	add.w	sl, r0, #20
 800fa32:	2300      	movs	r3, #0
 800fa34:	4655      	mov	r5, sl
 800fa36:	469b      	mov	fp, r3
 800fa38:	45b1      	cmp	r9, r6
 800fa3a:	d337      	bcc.n	800faac <__gethex+0x1d0>
 800fa3c:	f845 bb04 	str.w	fp, [r5], #4
 800fa40:	eba5 050a 	sub.w	r5, r5, sl
 800fa44:	10ad      	asrs	r5, r5, #2
 800fa46:	6125      	str	r5, [r4, #16]
 800fa48:	4658      	mov	r0, fp
 800fa4a:	f7fe f8ad 	bl	800dba8 <__hi0bits>
 800fa4e:	016d      	lsls	r5, r5, #5
 800fa50:	f8d8 6000 	ldr.w	r6, [r8]
 800fa54:	1a2d      	subs	r5, r5, r0
 800fa56:	42b5      	cmp	r5, r6
 800fa58:	dd54      	ble.n	800fb04 <__gethex+0x228>
 800fa5a:	1bad      	subs	r5, r5, r6
 800fa5c:	4629      	mov	r1, r5
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f7fe fc3e 	bl	800e2e0 <__any_on>
 800fa64:	4681      	mov	r9, r0
 800fa66:	b178      	cbz	r0, 800fa88 <__gethex+0x1ac>
 800fa68:	1e6b      	subs	r3, r5, #1
 800fa6a:	1159      	asrs	r1, r3, #5
 800fa6c:	f003 021f 	and.w	r2, r3, #31
 800fa70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fa74:	f04f 0901 	mov.w	r9, #1
 800fa78:	fa09 f202 	lsl.w	r2, r9, r2
 800fa7c:	420a      	tst	r2, r1
 800fa7e:	d003      	beq.n	800fa88 <__gethex+0x1ac>
 800fa80:	454b      	cmp	r3, r9
 800fa82:	dc36      	bgt.n	800faf2 <__gethex+0x216>
 800fa84:	f04f 0902 	mov.w	r9, #2
 800fa88:	4629      	mov	r1, r5
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	f7ff febe 	bl	800f80c <rshift>
 800fa90:	442f      	add	r7, r5
 800fa92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa96:	42bb      	cmp	r3, r7
 800fa98:	da42      	bge.n	800fb20 <__gethex+0x244>
 800fa9a:	9801      	ldr	r0, [sp, #4]
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	f7fd ffd1 	bl	800da44 <_Bfree>
 800faa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800faa4:	2300      	movs	r3, #0
 800faa6:	6013      	str	r3, [r2, #0]
 800faa8:	25a3      	movs	r5, #163	@ 0xa3
 800faaa:	e793      	b.n	800f9d4 <__gethex+0xf8>
 800faac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fab0:	2a2e      	cmp	r2, #46	@ 0x2e
 800fab2:	d012      	beq.n	800fada <__gethex+0x1fe>
 800fab4:	2b20      	cmp	r3, #32
 800fab6:	d104      	bne.n	800fac2 <__gethex+0x1e6>
 800fab8:	f845 bb04 	str.w	fp, [r5], #4
 800fabc:	f04f 0b00 	mov.w	fp, #0
 800fac0:	465b      	mov	r3, fp
 800fac2:	7830      	ldrb	r0, [r6, #0]
 800fac4:	9303      	str	r3, [sp, #12]
 800fac6:	f7ff fef3 	bl	800f8b0 <__hexdig_fun>
 800faca:	9b03      	ldr	r3, [sp, #12]
 800facc:	f000 000f 	and.w	r0, r0, #15
 800fad0:	4098      	lsls	r0, r3
 800fad2:	ea4b 0b00 	orr.w	fp, fp, r0
 800fad6:	3304      	adds	r3, #4
 800fad8:	e7ae      	b.n	800fa38 <__gethex+0x15c>
 800fada:	45b1      	cmp	r9, r6
 800fadc:	d8ea      	bhi.n	800fab4 <__gethex+0x1d8>
 800fade:	492b      	ldr	r1, [pc, #172]	@ (800fb8c <__gethex+0x2b0>)
 800fae0:	9303      	str	r3, [sp, #12]
 800fae2:	2201      	movs	r2, #1
 800fae4:	4630      	mov	r0, r6
 800fae6:	f7ff fe11 	bl	800f70c <strncmp>
 800faea:	9b03      	ldr	r3, [sp, #12]
 800faec:	2800      	cmp	r0, #0
 800faee:	d1e1      	bne.n	800fab4 <__gethex+0x1d8>
 800faf0:	e7a2      	b.n	800fa38 <__gethex+0x15c>
 800faf2:	1ea9      	subs	r1, r5, #2
 800faf4:	4620      	mov	r0, r4
 800faf6:	f7fe fbf3 	bl	800e2e0 <__any_on>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d0c2      	beq.n	800fa84 <__gethex+0x1a8>
 800fafe:	f04f 0903 	mov.w	r9, #3
 800fb02:	e7c1      	b.n	800fa88 <__gethex+0x1ac>
 800fb04:	da09      	bge.n	800fb1a <__gethex+0x23e>
 800fb06:	1b75      	subs	r5, r6, r5
 800fb08:	4621      	mov	r1, r4
 800fb0a:	9801      	ldr	r0, [sp, #4]
 800fb0c:	462a      	mov	r2, r5
 800fb0e:	f7fe f9b1 	bl	800de74 <__lshift>
 800fb12:	1b7f      	subs	r7, r7, r5
 800fb14:	4604      	mov	r4, r0
 800fb16:	f100 0a14 	add.w	sl, r0, #20
 800fb1a:	f04f 0900 	mov.w	r9, #0
 800fb1e:	e7b8      	b.n	800fa92 <__gethex+0x1b6>
 800fb20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fb24:	42bd      	cmp	r5, r7
 800fb26:	dd6f      	ble.n	800fc08 <__gethex+0x32c>
 800fb28:	1bed      	subs	r5, r5, r7
 800fb2a:	42ae      	cmp	r6, r5
 800fb2c:	dc34      	bgt.n	800fb98 <__gethex+0x2bc>
 800fb2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d022      	beq.n	800fb7c <__gethex+0x2a0>
 800fb36:	2b03      	cmp	r3, #3
 800fb38:	d024      	beq.n	800fb84 <__gethex+0x2a8>
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d115      	bne.n	800fb6a <__gethex+0x28e>
 800fb3e:	42ae      	cmp	r6, r5
 800fb40:	d113      	bne.n	800fb6a <__gethex+0x28e>
 800fb42:	2e01      	cmp	r6, #1
 800fb44:	d10b      	bne.n	800fb5e <__gethex+0x282>
 800fb46:	9a02      	ldr	r2, [sp, #8]
 800fb48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fb4c:	6013      	str	r3, [r2, #0]
 800fb4e:	2301      	movs	r3, #1
 800fb50:	6123      	str	r3, [r4, #16]
 800fb52:	f8ca 3000 	str.w	r3, [sl]
 800fb56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb58:	2562      	movs	r5, #98	@ 0x62
 800fb5a:	601c      	str	r4, [r3, #0]
 800fb5c:	e73a      	b.n	800f9d4 <__gethex+0xf8>
 800fb5e:	1e71      	subs	r1, r6, #1
 800fb60:	4620      	mov	r0, r4
 800fb62:	f7fe fbbd 	bl	800e2e0 <__any_on>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d1ed      	bne.n	800fb46 <__gethex+0x26a>
 800fb6a:	9801      	ldr	r0, [sp, #4]
 800fb6c:	4621      	mov	r1, r4
 800fb6e:	f7fd ff69 	bl	800da44 <_Bfree>
 800fb72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb74:	2300      	movs	r3, #0
 800fb76:	6013      	str	r3, [r2, #0]
 800fb78:	2550      	movs	r5, #80	@ 0x50
 800fb7a:	e72b      	b.n	800f9d4 <__gethex+0xf8>
 800fb7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1f3      	bne.n	800fb6a <__gethex+0x28e>
 800fb82:	e7e0      	b.n	800fb46 <__gethex+0x26a>
 800fb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1dd      	bne.n	800fb46 <__gethex+0x26a>
 800fb8a:	e7ee      	b.n	800fb6a <__gethex+0x28e>
 800fb8c:	08010408 	.word	0x08010408
 800fb90:	0801029d 	.word	0x0801029d
 800fb94:	080105b6 	.word	0x080105b6
 800fb98:	1e6f      	subs	r7, r5, #1
 800fb9a:	f1b9 0f00 	cmp.w	r9, #0
 800fb9e:	d130      	bne.n	800fc02 <__gethex+0x326>
 800fba0:	b127      	cbz	r7, 800fbac <__gethex+0x2d0>
 800fba2:	4639      	mov	r1, r7
 800fba4:	4620      	mov	r0, r4
 800fba6:	f7fe fb9b 	bl	800e2e0 <__any_on>
 800fbaa:	4681      	mov	r9, r0
 800fbac:	117a      	asrs	r2, r7, #5
 800fbae:	2301      	movs	r3, #1
 800fbb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fbb4:	f007 071f 	and.w	r7, r7, #31
 800fbb8:	40bb      	lsls	r3, r7
 800fbba:	4213      	tst	r3, r2
 800fbbc:	4629      	mov	r1, r5
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	bf18      	it	ne
 800fbc2:	f049 0902 	orrne.w	r9, r9, #2
 800fbc6:	f7ff fe21 	bl	800f80c <rshift>
 800fbca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fbce:	1b76      	subs	r6, r6, r5
 800fbd0:	2502      	movs	r5, #2
 800fbd2:	f1b9 0f00 	cmp.w	r9, #0
 800fbd6:	d047      	beq.n	800fc68 <__gethex+0x38c>
 800fbd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fbdc:	2b02      	cmp	r3, #2
 800fbde:	d015      	beq.n	800fc0c <__gethex+0x330>
 800fbe0:	2b03      	cmp	r3, #3
 800fbe2:	d017      	beq.n	800fc14 <__gethex+0x338>
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d109      	bne.n	800fbfc <__gethex+0x320>
 800fbe8:	f019 0f02 	tst.w	r9, #2
 800fbec:	d006      	beq.n	800fbfc <__gethex+0x320>
 800fbee:	f8da 3000 	ldr.w	r3, [sl]
 800fbf2:	ea49 0903 	orr.w	r9, r9, r3
 800fbf6:	f019 0f01 	tst.w	r9, #1
 800fbfa:	d10e      	bne.n	800fc1a <__gethex+0x33e>
 800fbfc:	f045 0510 	orr.w	r5, r5, #16
 800fc00:	e032      	b.n	800fc68 <__gethex+0x38c>
 800fc02:	f04f 0901 	mov.w	r9, #1
 800fc06:	e7d1      	b.n	800fbac <__gethex+0x2d0>
 800fc08:	2501      	movs	r5, #1
 800fc0a:	e7e2      	b.n	800fbd2 <__gethex+0x2f6>
 800fc0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc0e:	f1c3 0301 	rsb	r3, r3, #1
 800fc12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d0f0      	beq.n	800fbfc <__gethex+0x320>
 800fc1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fc1e:	f104 0314 	add.w	r3, r4, #20
 800fc22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fc26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fc2a:	f04f 0c00 	mov.w	ip, #0
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fc38:	d01b      	beq.n	800fc72 <__gethex+0x396>
 800fc3a:	3201      	adds	r2, #1
 800fc3c:	6002      	str	r2, [r0, #0]
 800fc3e:	2d02      	cmp	r5, #2
 800fc40:	f104 0314 	add.w	r3, r4, #20
 800fc44:	d13c      	bne.n	800fcc0 <__gethex+0x3e4>
 800fc46:	f8d8 2000 	ldr.w	r2, [r8]
 800fc4a:	3a01      	subs	r2, #1
 800fc4c:	42b2      	cmp	r2, r6
 800fc4e:	d109      	bne.n	800fc64 <__gethex+0x388>
 800fc50:	1171      	asrs	r1, r6, #5
 800fc52:	2201      	movs	r2, #1
 800fc54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc58:	f006 061f 	and.w	r6, r6, #31
 800fc5c:	fa02 f606 	lsl.w	r6, r2, r6
 800fc60:	421e      	tst	r6, r3
 800fc62:	d13a      	bne.n	800fcda <__gethex+0x3fe>
 800fc64:	f045 0520 	orr.w	r5, r5, #32
 800fc68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc6a:	601c      	str	r4, [r3, #0]
 800fc6c:	9b02      	ldr	r3, [sp, #8]
 800fc6e:	601f      	str	r7, [r3, #0]
 800fc70:	e6b0      	b.n	800f9d4 <__gethex+0xf8>
 800fc72:	4299      	cmp	r1, r3
 800fc74:	f843 cc04 	str.w	ip, [r3, #-4]
 800fc78:	d8d9      	bhi.n	800fc2e <__gethex+0x352>
 800fc7a:	68a3      	ldr	r3, [r4, #8]
 800fc7c:	459b      	cmp	fp, r3
 800fc7e:	db17      	blt.n	800fcb0 <__gethex+0x3d4>
 800fc80:	6861      	ldr	r1, [r4, #4]
 800fc82:	9801      	ldr	r0, [sp, #4]
 800fc84:	3101      	adds	r1, #1
 800fc86:	f7fd fe9d 	bl	800d9c4 <_Balloc>
 800fc8a:	4681      	mov	r9, r0
 800fc8c:	b918      	cbnz	r0, 800fc96 <__gethex+0x3ba>
 800fc8e:	4b1a      	ldr	r3, [pc, #104]	@ (800fcf8 <__gethex+0x41c>)
 800fc90:	4602      	mov	r2, r0
 800fc92:	2184      	movs	r1, #132	@ 0x84
 800fc94:	e6c5      	b.n	800fa22 <__gethex+0x146>
 800fc96:	6922      	ldr	r2, [r4, #16]
 800fc98:	3202      	adds	r2, #2
 800fc9a:	f104 010c 	add.w	r1, r4, #12
 800fc9e:	0092      	lsls	r2, r2, #2
 800fca0:	300c      	adds	r0, #12
 800fca2:	f7fc ff9a 	bl	800cbda <memcpy>
 800fca6:	4621      	mov	r1, r4
 800fca8:	9801      	ldr	r0, [sp, #4]
 800fcaa:	f7fd fecb 	bl	800da44 <_Bfree>
 800fcae:	464c      	mov	r4, r9
 800fcb0:	6923      	ldr	r3, [r4, #16]
 800fcb2:	1c5a      	adds	r2, r3, #1
 800fcb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fcb8:	6122      	str	r2, [r4, #16]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	615a      	str	r2, [r3, #20]
 800fcbe:	e7be      	b.n	800fc3e <__gethex+0x362>
 800fcc0:	6922      	ldr	r2, [r4, #16]
 800fcc2:	455a      	cmp	r2, fp
 800fcc4:	dd0b      	ble.n	800fcde <__gethex+0x402>
 800fcc6:	2101      	movs	r1, #1
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f7ff fd9f 	bl	800f80c <rshift>
 800fcce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fcd2:	3701      	adds	r7, #1
 800fcd4:	42bb      	cmp	r3, r7
 800fcd6:	f6ff aee0 	blt.w	800fa9a <__gethex+0x1be>
 800fcda:	2501      	movs	r5, #1
 800fcdc:	e7c2      	b.n	800fc64 <__gethex+0x388>
 800fcde:	f016 061f 	ands.w	r6, r6, #31
 800fce2:	d0fa      	beq.n	800fcda <__gethex+0x3fe>
 800fce4:	4453      	add	r3, sl
 800fce6:	f1c6 0620 	rsb	r6, r6, #32
 800fcea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fcee:	f7fd ff5b 	bl	800dba8 <__hi0bits>
 800fcf2:	42b0      	cmp	r0, r6
 800fcf4:	dbe7      	blt.n	800fcc6 <__gethex+0x3ea>
 800fcf6:	e7f0      	b.n	800fcda <__gethex+0x3fe>
 800fcf8:	0801029d 	.word	0x0801029d

0800fcfc <L_shift>:
 800fcfc:	f1c2 0208 	rsb	r2, r2, #8
 800fd00:	0092      	lsls	r2, r2, #2
 800fd02:	b570      	push	{r4, r5, r6, lr}
 800fd04:	f1c2 0620 	rsb	r6, r2, #32
 800fd08:	6843      	ldr	r3, [r0, #4]
 800fd0a:	6804      	ldr	r4, [r0, #0]
 800fd0c:	fa03 f506 	lsl.w	r5, r3, r6
 800fd10:	432c      	orrs	r4, r5
 800fd12:	40d3      	lsrs	r3, r2
 800fd14:	6004      	str	r4, [r0, #0]
 800fd16:	f840 3f04 	str.w	r3, [r0, #4]!
 800fd1a:	4288      	cmp	r0, r1
 800fd1c:	d3f4      	bcc.n	800fd08 <L_shift+0xc>
 800fd1e:	bd70      	pop	{r4, r5, r6, pc}

0800fd20 <__match>:
 800fd20:	b530      	push	{r4, r5, lr}
 800fd22:	6803      	ldr	r3, [r0, #0]
 800fd24:	3301      	adds	r3, #1
 800fd26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd2a:	b914      	cbnz	r4, 800fd32 <__match+0x12>
 800fd2c:	6003      	str	r3, [r0, #0]
 800fd2e:	2001      	movs	r0, #1
 800fd30:	bd30      	pop	{r4, r5, pc}
 800fd32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fd3a:	2d19      	cmp	r5, #25
 800fd3c:	bf98      	it	ls
 800fd3e:	3220      	addls	r2, #32
 800fd40:	42a2      	cmp	r2, r4
 800fd42:	d0f0      	beq.n	800fd26 <__match+0x6>
 800fd44:	2000      	movs	r0, #0
 800fd46:	e7f3      	b.n	800fd30 <__match+0x10>

0800fd48 <__hexnan>:
 800fd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4c:	680b      	ldr	r3, [r1, #0]
 800fd4e:	6801      	ldr	r1, [r0, #0]
 800fd50:	115e      	asrs	r6, r3, #5
 800fd52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fd56:	f013 031f 	ands.w	r3, r3, #31
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	bf18      	it	ne
 800fd5e:	3604      	addne	r6, #4
 800fd60:	2500      	movs	r5, #0
 800fd62:	1f37      	subs	r7, r6, #4
 800fd64:	4682      	mov	sl, r0
 800fd66:	4690      	mov	r8, r2
 800fd68:	9301      	str	r3, [sp, #4]
 800fd6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800fd6e:	46b9      	mov	r9, r7
 800fd70:	463c      	mov	r4, r7
 800fd72:	9502      	str	r5, [sp, #8]
 800fd74:	46ab      	mov	fp, r5
 800fd76:	784a      	ldrb	r2, [r1, #1]
 800fd78:	1c4b      	adds	r3, r1, #1
 800fd7a:	9303      	str	r3, [sp, #12]
 800fd7c:	b342      	cbz	r2, 800fdd0 <__hexnan+0x88>
 800fd7e:	4610      	mov	r0, r2
 800fd80:	9105      	str	r1, [sp, #20]
 800fd82:	9204      	str	r2, [sp, #16]
 800fd84:	f7ff fd94 	bl	800f8b0 <__hexdig_fun>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d151      	bne.n	800fe30 <__hexnan+0xe8>
 800fd8c:	9a04      	ldr	r2, [sp, #16]
 800fd8e:	9905      	ldr	r1, [sp, #20]
 800fd90:	2a20      	cmp	r2, #32
 800fd92:	d818      	bhi.n	800fdc6 <__hexnan+0x7e>
 800fd94:	9b02      	ldr	r3, [sp, #8]
 800fd96:	459b      	cmp	fp, r3
 800fd98:	dd13      	ble.n	800fdc2 <__hexnan+0x7a>
 800fd9a:	454c      	cmp	r4, r9
 800fd9c:	d206      	bcs.n	800fdac <__hexnan+0x64>
 800fd9e:	2d07      	cmp	r5, #7
 800fda0:	dc04      	bgt.n	800fdac <__hexnan+0x64>
 800fda2:	462a      	mov	r2, r5
 800fda4:	4649      	mov	r1, r9
 800fda6:	4620      	mov	r0, r4
 800fda8:	f7ff ffa8 	bl	800fcfc <L_shift>
 800fdac:	4544      	cmp	r4, r8
 800fdae:	d952      	bls.n	800fe56 <__hexnan+0x10e>
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	f1a4 0904 	sub.w	r9, r4, #4
 800fdb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800fdba:	f8cd b008 	str.w	fp, [sp, #8]
 800fdbe:	464c      	mov	r4, r9
 800fdc0:	461d      	mov	r5, r3
 800fdc2:	9903      	ldr	r1, [sp, #12]
 800fdc4:	e7d7      	b.n	800fd76 <__hexnan+0x2e>
 800fdc6:	2a29      	cmp	r2, #41	@ 0x29
 800fdc8:	d157      	bne.n	800fe7a <__hexnan+0x132>
 800fdca:	3102      	adds	r1, #2
 800fdcc:	f8ca 1000 	str.w	r1, [sl]
 800fdd0:	f1bb 0f00 	cmp.w	fp, #0
 800fdd4:	d051      	beq.n	800fe7a <__hexnan+0x132>
 800fdd6:	454c      	cmp	r4, r9
 800fdd8:	d206      	bcs.n	800fde8 <__hexnan+0xa0>
 800fdda:	2d07      	cmp	r5, #7
 800fddc:	dc04      	bgt.n	800fde8 <__hexnan+0xa0>
 800fdde:	462a      	mov	r2, r5
 800fde0:	4649      	mov	r1, r9
 800fde2:	4620      	mov	r0, r4
 800fde4:	f7ff ff8a 	bl	800fcfc <L_shift>
 800fde8:	4544      	cmp	r4, r8
 800fdea:	d936      	bls.n	800fe5a <__hexnan+0x112>
 800fdec:	f1a8 0204 	sub.w	r2, r8, #4
 800fdf0:	4623      	mov	r3, r4
 800fdf2:	f853 1b04 	ldr.w	r1, [r3], #4
 800fdf6:	f842 1f04 	str.w	r1, [r2, #4]!
 800fdfa:	429f      	cmp	r7, r3
 800fdfc:	d2f9      	bcs.n	800fdf2 <__hexnan+0xaa>
 800fdfe:	1b3b      	subs	r3, r7, r4
 800fe00:	f023 0303 	bic.w	r3, r3, #3
 800fe04:	3304      	adds	r3, #4
 800fe06:	3401      	adds	r4, #1
 800fe08:	3e03      	subs	r6, #3
 800fe0a:	42b4      	cmp	r4, r6
 800fe0c:	bf88      	it	hi
 800fe0e:	2304      	movhi	r3, #4
 800fe10:	4443      	add	r3, r8
 800fe12:	2200      	movs	r2, #0
 800fe14:	f843 2b04 	str.w	r2, [r3], #4
 800fe18:	429f      	cmp	r7, r3
 800fe1a:	d2fb      	bcs.n	800fe14 <__hexnan+0xcc>
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	b91b      	cbnz	r3, 800fe28 <__hexnan+0xe0>
 800fe20:	4547      	cmp	r7, r8
 800fe22:	d128      	bne.n	800fe76 <__hexnan+0x12e>
 800fe24:	2301      	movs	r3, #1
 800fe26:	603b      	str	r3, [r7, #0]
 800fe28:	2005      	movs	r0, #5
 800fe2a:	b007      	add	sp, #28
 800fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe30:	3501      	adds	r5, #1
 800fe32:	2d08      	cmp	r5, #8
 800fe34:	f10b 0b01 	add.w	fp, fp, #1
 800fe38:	dd06      	ble.n	800fe48 <__hexnan+0x100>
 800fe3a:	4544      	cmp	r4, r8
 800fe3c:	d9c1      	bls.n	800fdc2 <__hexnan+0x7a>
 800fe3e:	2300      	movs	r3, #0
 800fe40:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe44:	2501      	movs	r5, #1
 800fe46:	3c04      	subs	r4, #4
 800fe48:	6822      	ldr	r2, [r4, #0]
 800fe4a:	f000 000f 	and.w	r0, r0, #15
 800fe4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fe52:	6020      	str	r0, [r4, #0]
 800fe54:	e7b5      	b.n	800fdc2 <__hexnan+0x7a>
 800fe56:	2508      	movs	r5, #8
 800fe58:	e7b3      	b.n	800fdc2 <__hexnan+0x7a>
 800fe5a:	9b01      	ldr	r3, [sp, #4]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d0dd      	beq.n	800fe1c <__hexnan+0xd4>
 800fe60:	f1c3 0320 	rsb	r3, r3, #32
 800fe64:	f04f 32ff 	mov.w	r2, #4294967295
 800fe68:	40da      	lsrs	r2, r3
 800fe6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fe6e:	4013      	ands	r3, r2
 800fe70:	f846 3c04 	str.w	r3, [r6, #-4]
 800fe74:	e7d2      	b.n	800fe1c <__hexnan+0xd4>
 800fe76:	3f04      	subs	r7, #4
 800fe78:	e7d0      	b.n	800fe1c <__hexnan+0xd4>
 800fe7a:	2004      	movs	r0, #4
 800fe7c:	e7d5      	b.n	800fe2a <__hexnan+0xe2>

0800fe7e <__ascii_mbtowc>:
 800fe7e:	b082      	sub	sp, #8
 800fe80:	b901      	cbnz	r1, 800fe84 <__ascii_mbtowc+0x6>
 800fe82:	a901      	add	r1, sp, #4
 800fe84:	b142      	cbz	r2, 800fe98 <__ascii_mbtowc+0x1a>
 800fe86:	b14b      	cbz	r3, 800fe9c <__ascii_mbtowc+0x1e>
 800fe88:	7813      	ldrb	r3, [r2, #0]
 800fe8a:	600b      	str	r3, [r1, #0]
 800fe8c:	7812      	ldrb	r2, [r2, #0]
 800fe8e:	1e10      	subs	r0, r2, #0
 800fe90:	bf18      	it	ne
 800fe92:	2001      	movne	r0, #1
 800fe94:	b002      	add	sp, #8
 800fe96:	4770      	bx	lr
 800fe98:	4610      	mov	r0, r2
 800fe9a:	e7fb      	b.n	800fe94 <__ascii_mbtowc+0x16>
 800fe9c:	f06f 0001 	mvn.w	r0, #1
 800fea0:	e7f8      	b.n	800fe94 <__ascii_mbtowc+0x16>

0800fea2 <_realloc_r>:
 800fea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea6:	4680      	mov	r8, r0
 800fea8:	4615      	mov	r5, r2
 800feaa:	460c      	mov	r4, r1
 800feac:	b921      	cbnz	r1, 800feb8 <_realloc_r+0x16>
 800feae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feb2:	4611      	mov	r1, r2
 800feb4:	f7fd bcfa 	b.w	800d8ac <_malloc_r>
 800feb8:	b92a      	cbnz	r2, 800fec6 <_realloc_r+0x24>
 800feba:	f7fd fc83 	bl	800d7c4 <_free_r>
 800febe:	2400      	movs	r4, #0
 800fec0:	4620      	mov	r0, r4
 800fec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fec6:	f000 f840 	bl	800ff4a <_malloc_usable_size_r>
 800feca:	4285      	cmp	r5, r0
 800fecc:	4606      	mov	r6, r0
 800fece:	d802      	bhi.n	800fed6 <_realloc_r+0x34>
 800fed0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fed4:	d8f4      	bhi.n	800fec0 <_realloc_r+0x1e>
 800fed6:	4629      	mov	r1, r5
 800fed8:	4640      	mov	r0, r8
 800feda:	f7fd fce7 	bl	800d8ac <_malloc_r>
 800fede:	4607      	mov	r7, r0
 800fee0:	2800      	cmp	r0, #0
 800fee2:	d0ec      	beq.n	800febe <_realloc_r+0x1c>
 800fee4:	42b5      	cmp	r5, r6
 800fee6:	462a      	mov	r2, r5
 800fee8:	4621      	mov	r1, r4
 800feea:	bf28      	it	cs
 800feec:	4632      	movcs	r2, r6
 800feee:	f7fc fe74 	bl	800cbda <memcpy>
 800fef2:	4621      	mov	r1, r4
 800fef4:	4640      	mov	r0, r8
 800fef6:	f7fd fc65 	bl	800d7c4 <_free_r>
 800fefa:	463c      	mov	r4, r7
 800fefc:	e7e0      	b.n	800fec0 <_realloc_r+0x1e>

0800fefe <__ascii_wctomb>:
 800fefe:	4603      	mov	r3, r0
 800ff00:	4608      	mov	r0, r1
 800ff02:	b141      	cbz	r1, 800ff16 <__ascii_wctomb+0x18>
 800ff04:	2aff      	cmp	r2, #255	@ 0xff
 800ff06:	d904      	bls.n	800ff12 <__ascii_wctomb+0x14>
 800ff08:	228a      	movs	r2, #138	@ 0x8a
 800ff0a:	601a      	str	r2, [r3, #0]
 800ff0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff10:	4770      	bx	lr
 800ff12:	700a      	strb	r2, [r1, #0]
 800ff14:	2001      	movs	r0, #1
 800ff16:	4770      	bx	lr

0800ff18 <fiprintf>:
 800ff18:	b40e      	push	{r1, r2, r3}
 800ff1a:	b503      	push	{r0, r1, lr}
 800ff1c:	4601      	mov	r1, r0
 800ff1e:	ab03      	add	r3, sp, #12
 800ff20:	4805      	ldr	r0, [pc, #20]	@ (800ff38 <fiprintf+0x20>)
 800ff22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff26:	6800      	ldr	r0, [r0, #0]
 800ff28:	9301      	str	r3, [sp, #4]
 800ff2a:	f7ff f9af 	bl	800f28c <_vfiprintf_r>
 800ff2e:	b002      	add	sp, #8
 800ff30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff34:	b003      	add	sp, #12
 800ff36:	4770      	bx	lr
 800ff38:	24000024 	.word	0x24000024

0800ff3c <abort>:
 800ff3c:	b508      	push	{r3, lr}
 800ff3e:	2006      	movs	r0, #6
 800ff40:	f000 f834 	bl	800ffac <raise>
 800ff44:	2001      	movs	r0, #1
 800ff46:	f7f1 ff74 	bl	8001e32 <_exit>

0800ff4a <_malloc_usable_size_r>:
 800ff4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff4e:	1f18      	subs	r0, r3, #4
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	bfbc      	itt	lt
 800ff54:	580b      	ldrlt	r3, [r1, r0]
 800ff56:	18c0      	addlt	r0, r0, r3
 800ff58:	4770      	bx	lr

0800ff5a <_raise_r>:
 800ff5a:	291f      	cmp	r1, #31
 800ff5c:	b538      	push	{r3, r4, r5, lr}
 800ff5e:	4605      	mov	r5, r0
 800ff60:	460c      	mov	r4, r1
 800ff62:	d904      	bls.n	800ff6e <_raise_r+0x14>
 800ff64:	2316      	movs	r3, #22
 800ff66:	6003      	str	r3, [r0, #0]
 800ff68:	f04f 30ff 	mov.w	r0, #4294967295
 800ff6c:	bd38      	pop	{r3, r4, r5, pc}
 800ff6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ff70:	b112      	cbz	r2, 800ff78 <_raise_r+0x1e>
 800ff72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff76:	b94b      	cbnz	r3, 800ff8c <_raise_r+0x32>
 800ff78:	4628      	mov	r0, r5
 800ff7a:	f000 f831 	bl	800ffe0 <_getpid_r>
 800ff7e:	4622      	mov	r2, r4
 800ff80:	4601      	mov	r1, r0
 800ff82:	4628      	mov	r0, r5
 800ff84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff88:	f000 b818 	b.w	800ffbc <_kill_r>
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d00a      	beq.n	800ffa6 <_raise_r+0x4c>
 800ff90:	1c59      	adds	r1, r3, #1
 800ff92:	d103      	bne.n	800ff9c <_raise_r+0x42>
 800ff94:	2316      	movs	r3, #22
 800ff96:	6003      	str	r3, [r0, #0]
 800ff98:	2001      	movs	r0, #1
 800ff9a:	e7e7      	b.n	800ff6c <_raise_r+0x12>
 800ff9c:	2100      	movs	r1, #0
 800ff9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	4798      	blx	r3
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	e7e0      	b.n	800ff6c <_raise_r+0x12>
	...

0800ffac <raise>:
 800ffac:	4b02      	ldr	r3, [pc, #8]	@ (800ffb8 <raise+0xc>)
 800ffae:	4601      	mov	r1, r0
 800ffb0:	6818      	ldr	r0, [r3, #0]
 800ffb2:	f7ff bfd2 	b.w	800ff5a <_raise_r>
 800ffb6:	bf00      	nop
 800ffb8:	24000024 	.word	0x24000024

0800ffbc <_kill_r>:
 800ffbc:	b538      	push	{r3, r4, r5, lr}
 800ffbe:	4d07      	ldr	r5, [pc, #28]	@ (800ffdc <_kill_r+0x20>)
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	4604      	mov	r4, r0
 800ffc4:	4608      	mov	r0, r1
 800ffc6:	4611      	mov	r1, r2
 800ffc8:	602b      	str	r3, [r5, #0]
 800ffca:	f7f1 ff22 	bl	8001e12 <_kill>
 800ffce:	1c43      	adds	r3, r0, #1
 800ffd0:	d102      	bne.n	800ffd8 <_kill_r+0x1c>
 800ffd2:	682b      	ldr	r3, [r5, #0]
 800ffd4:	b103      	cbz	r3, 800ffd8 <_kill_r+0x1c>
 800ffd6:	6023      	str	r3, [r4, #0]
 800ffd8:	bd38      	pop	{r3, r4, r5, pc}
 800ffda:	bf00      	nop
 800ffdc:	2400076c 	.word	0x2400076c

0800ffe0 <_getpid_r>:
 800ffe0:	f7f1 bf0f 	b.w	8001e02 <_getpid>

0800ffe4 <_init>:
 800ffe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffe6:	bf00      	nop
 800ffe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffea:	bc08      	pop	{r3}
 800ffec:	469e      	mov	lr, r3
 800ffee:	4770      	bx	lr

0800fff0 <_fini>:
 800fff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff2:	bf00      	nop
 800fff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fff6:	bc08      	pop	{r3}
 800fff8:	469e      	mov	lr, r3
 800fffa:	4770      	bx	lr
