
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f9c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08012270  08012270  00013270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080126e8  080126e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080126f0  080126f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080126f4  080126f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  080126f8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b34  240001d8  080128d0  000141d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000d0c  080128d0  00014d0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025177  00000000  00000000  00014206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ad1  00000000  00000000  0003937d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fa0  00000000  00000000  0003ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018da  00000000  00000000  0003edf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005a63  00000000  00000000  000406ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029740  00000000  00000000  0004612d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172fa1  00000000  00000000  0006f86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e280e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009e34  00000000  00000000  001e2854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001ec688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012254 	.word	0x08012254

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	08012254 	.word	0x08012254

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a9c:	f001 fa94 	bl	8001fc8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f002 fce0 	bl	8003464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f836 	bl	8000b14 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000aa8:	f000 f8a4 	bl	8000bf4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aac:	f001 f980 	bl	8001db0 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000ab0:	f000 fa70 	bl	8000f94 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8000ab4:	f000 f8ce 	bl	8000c54 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ab8:	f000 f9ac 	bl	8000e14 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000abc:	f000 f9ea 	bl	8000e94 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000ac0:	f000 fa28 	bl	8000f14 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000ac4:	f000 fa8a 	bl	8000fdc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000ac8:	f000 fade 	bl	8001088 <MX_SPI2_Init>
  MX_SPI4_Init();
 8000acc:	f000 fb32 	bl	8001134 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000ad0:	f000 fb86 	bl	80011e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ad4:	f000 fc48 	bl	8001368 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ad8:	f000 fca0 	bl	800141c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000adc:	f000 fcf8 	bl	80014d0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ae0:	f000 fd50 	bl	8001584 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000ae4:	f000 fda8 	bl	8001638 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ae8:	f000 fe36 	bl	8001758 <MX_TIM12_Init>
  MX_TIM15_Init();
 8000aec:	f000 fe8e 	bl	800180c <MX_TIM15_Init>
  MX_UART4_Init();
 8000af0:	f000 ff12 	bl	8001918 <MX_UART4_Init>
  MX_UART5_Init();
 8000af4:	f000 ff5c 	bl	80019b0 <MX_UART5_Init>
  MX_UART7_Init();
 8000af8:	f000 ffa6 	bl	8001a48 <MX_UART7_Init>
  MX_UART8_Init();
 8000afc:	f000 fff0 	bl	8001ae0 <MX_UART8_Init>
  MX_USART1_Init();
 8000b00:	f001 f83c 	bl	8001b7c <MX_USART1_Init>
  MX_USART2_Init();
 8000b04:	f001 f898 	bl	8001c38 <MX_USART2_Init>
  MX_USART3_Init();
 8000b08:	f001 f8f4 	bl	8001cf4 <MX_USART3_Init>
  MX_ADC2_Init();
 8000b0c:	f000 f91c 	bl	8000d48 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <main+0x78>

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b09c      	sub	sp, #112	@ 0x70
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1e:	224c      	movs	r2, #76	@ 0x4c
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f00e f881 	bl	800ec2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f00e f87b 	bl	800ec2a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b34:	2002      	movs	r0, #2
 8000b36:	f004 fd11 	bl	800555c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf0 <SystemClock_Config+0xdc>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b46:	4a2a      	ldr	r2, [pc, #168]	@ (8000bf0 <SystemClock_Config+0xdc>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b4c:	6193      	str	r3, [r2, #24]
 8000b4e:	4b28      	ldr	r3, [pc, #160]	@ (8000bf0 <SystemClock_Config+0xdc>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b5a:	bf00      	nop
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <SystemClock_Config+0xdc>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b68:	d1f8      	bne.n	8000b5c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b72:	2340      	movs	r3, #64	@ 0x40
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b76:	2302      	movs	r3, #2
 8000b78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000b82:	230c      	movs	r3, #12
 8000b84:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b92:	230c      	movs	r3, #12
 8000b94:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 fd14 	bl	80055d0 <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bae:	f001 fa37 	bl	8002020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	233f      	movs	r3, #63	@ 0x3f
 8000bb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bc6:	2340      	movs	r3, #64	@ 0x40
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bd0:	2340      	movs	r3, #64	@ 0x40
 8000bd2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f005 f8d3 	bl	8005d84 <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000be4:	f001 fa1c 	bl	8002020 <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	3770      	adds	r7, #112	@ 0x70
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	58024800 	.word	0x58024800

08000bf4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0ae      	sub	sp, #184	@ 0xb8
 8000bf8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	22b8      	movs	r2, #184	@ 0xb8
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00e f812 	bl	800ec2a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c06:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000c12:	2304      	movs	r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000c16:	230c      	movs	r3, #12
 8000c18:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c26:	23c0      	movs	r3, #192	@ 0xc0
 8000c28:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f005 fc2e 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c46:	f001 f9eb 	bl	8002020 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	37b8      	adds	r7, #184	@ 0xb8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	@ 0x30
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c66:	463b      	mov	r3, r7
 8000c68:	2224      	movs	r2, #36	@ 0x24
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f00d ffdc 	bl	800ec2a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c72:	4b31      	ldr	r3, [pc, #196]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000c74:	4a31      	ldr	r2, [pc, #196]	@ (8000d3c <MX_ADC1_Init+0xe8>)
 8000c76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000c78:	4b2f      	ldr	r3, [pc, #188]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000c7a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c80:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c86:	4b2c      	ldr	r3, [pc, #176]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c92:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c98:	4b27      	ldr	r3, [pc, #156]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c9e:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca4:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cac:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd2:	4819      	ldr	r0, [pc, #100]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000cd4:	f002 fec2 	bl	8003a5c <HAL_ADC_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cde:	f001 f99f 	bl	8002020 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4812      	ldr	r0, [pc, #72]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000cee:	f003 ff01 	bl	8004af4 <HAL_ADCEx_MultiModeConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000cf8:	f001 f992 	bl	8002020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <MX_ADC1_Init+0xec>)
 8000cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d00:	2306      	movs	r3, #6
 8000d02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_ADC1_Init+0xf0>)
 8000d0a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <MX_ADC1_Init+0xe4>)
 8000d20:	f003 f8a4 	bl	8003e6c <HAL_ADC_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000d2a:	f001 f979 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	3730      	adds	r7, #48	@ 0x30
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	240001f4 	.word	0x240001f4
 8000d3c:	40022000 	.word	0x40022000
 8000d40:	10c00010 	.word	0x10c00010
 8000d44:	47ff0000 	.word	0x47ff0000

08000d48 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	@ 0x28
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2224      	movs	r2, #36	@ 0x24
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f00d ff68 	bl	800ec2a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8000e08 <MX_ADC2_Init+0xc0>)
 8000d5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000d60:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d62:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d68:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d74:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d7a:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d80:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d94:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000da0:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dac:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dba:	4812      	ldr	r0, [pc, #72]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000dbc:	f002 fe4e 	bl	8003a5c <HAL_ADC_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000dc6:	f001 f92b 	bl	8002020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <MX_ADC2_Init+0xc4>)
 8000dcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dce:	2306      	movs	r3, #6
 8000dd0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_ADC2_Init+0xc8>)
 8000dd8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_ADC2_Init+0xbc>)
 8000dee:	f003 f83d 	bl	8003e6c <HAL_ADC_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000df8:	f001 f912 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	@ 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	24000264 	.word	0x24000264
 8000e08:	40022100 	.word	0x40022100
 8000e0c:	14f00020 	.word	0x14f00020
 8000e10:	47ff0000 	.word	0x47ff0000

08000e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <MX_I2C1_Init+0x78>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e20:	4a1b      	ldr	r2, [pc, #108]	@ (8000e90 <MX_I2C1_Init+0x7c>)
 8000e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e24:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e30:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4e:	480e      	ldr	r0, [pc, #56]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e50:	f004 fa50 	bl	80052f4 <HAL_I2C_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e5a:	f001 f8e1 	bl	8002020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e62:	f004 fae3 	bl	800542c <HAL_I2CEx_ConfigAnalogFilter>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e6c:	f001 f8d8 	bl	8002020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e70:	2100      	movs	r1, #0
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e74:	f004 fb25 	bl	80054c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e7e:	f001 f8cf 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	240002d4 	.word	0x240002d4
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	00707cbb 	.word	0x00707cbb

08000e94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <MX_I2C2_Init+0x78>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <MX_I2C2_Init+0x7c>)
 8000ea2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ed0:	f004 fa10 	bl	80052f4 <HAL_I2C_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eda:	f001 f8a1 	bl	8002020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ee2:	f004 faa3 	bl	800542c <HAL_I2CEx_ConfigAnalogFilter>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000eec:	f001 f898 	bl	8002020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ef4:	f004 fae5 	bl	80054c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f001 f88f 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	24000328 	.word	0x24000328
 8000f0c:	40005800 	.word	0x40005800
 8000f10:	00707cbb 	.word	0x00707cbb

08000f14 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <MX_I2C4_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	@ (8000f90 <MX_I2C4_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f50:	f004 f9d0 	bl	80052f4 <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f001 f861 	bl	8002020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f62:	f004 fa63 	bl	800542c <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f001 f858 	bl	8002020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_I2C4_Init+0x74>)
 8000f74:	f004 faa5 	bl	80054c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f001 f84f 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2400037c 	.word	0x2400037c
 8000f8c:	58001c00 	.word	0x58001c00
 8000f90:	00707cbb 	.word	0x00707cbb

08000f94 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_SDMMC1_SD_Init+0x40>)
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <MX_SDMMC1_SD_Init+0x44>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_SDMMC1_SD_Init+0x40>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_SDMMC1_SD_Init+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_SDMMC1_SD_Init+0x40>)
 8000fac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fb0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_SDMMC1_SD_Init+0x40>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_SDMMC1_SD_Init+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_SDMMC1_SD_Init+0x40>)
 8000fc0:	f007 fe52 	bl	8008c68 <HAL_SD_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000fca:	f001 f829 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	240003d0 	.word	0x240003d0
 8000fd8:	52007000 	.word	0x52007000

08000fdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8000fe2:	4a28      	ldr	r2, [pc, #160]	@ (8001084 <MX_SPI1_Init+0xa8>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8000fe8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001008:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800100c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001014:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <MX_SPI1_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_SPI1_Init+0xa4>)
 800102e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001032:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_SPI1_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001042:	2200      	movs	r2, #0
 8001044:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_SPI1_Init+0xa4>)
 800104e:	2200      	movs	r2, #0
 8001050:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_SPI1_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_SPI1_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_SPI1_Init+0xa4>)
 800106c:	f008 fe6a 	bl	8009d44 <HAL_SPI_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001076:	f000 ffd3 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2400044c 	.word	0x2400044c
 8001084:	40013000 	.word	0x40013000

08001088 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <MX_SPI2_Init+0xa4>)
 800108e:	4a28      	ldr	r2, [pc, #160]	@ (8001130 <MX_SPI2_Init+0xa8>)
 8001090:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b26      	ldr	r3, [pc, #152]	@ (800112c <MX_SPI2_Init+0xa4>)
 8001094:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001098:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <MX_SPI2_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010a0:	4b22      	ldr	r3, [pc, #136]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010a2:	2203      	movs	r2, #3
 80010a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010de:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_SPI2_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_SPI2_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_SPI2_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_SPI2_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_SPI2_Init+0xa4>)
 8001112:	2200      	movs	r2, #0
 8001114:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_SPI2_Init+0xa4>)
 8001118:	f008 fe14 	bl	8009d44 <HAL_SPI_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001122:	f000 ff7d 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	240004d4 	.word	0x240004d4
 8001130:	40003800 	.word	0x40003800

08001134 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001138:	4b27      	ldr	r3, [pc, #156]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 800113a:	4a28      	ldr	r2, [pc, #160]	@ (80011dc <MX_SPI4_Init+0xa8>)
 800113c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800113e:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 8001140:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001144:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001146:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800114c:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 800114e:	2203      	movs	r2, #3
 8001150:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001152:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001158:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 8001160:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001164:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116c:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001172:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001178:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_SPI4_Init+0xa4>)
 80011c4:	f008 fdbe 	bl	8009d44 <HAL_SPI_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80011ce:	f000 ff27 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2400055c 	.word	0x2400055c
 80011dc:	40013400 	.word	0x40013400

080011e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b09c      	sub	sp, #112	@ 0x70
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001200:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2234      	movs	r2, #52	@ 0x34
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f00d fd05 	bl	800ec2a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001220:	4b4f      	ldr	r3, [pc, #316]	@ (8001360 <MX_TIM1_Init+0x180>)
 8001222:	4a50      	ldr	r2, [pc, #320]	@ (8001364 <MX_TIM1_Init+0x184>)
 8001224:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001226:	4b4e      	ldr	r3, [pc, #312]	@ (8001360 <MX_TIM1_Init+0x180>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b4c      	ldr	r3, [pc, #304]	@ (8001360 <MX_TIM1_Init+0x180>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001232:	4b4b      	ldr	r3, [pc, #300]	@ (8001360 <MX_TIM1_Init+0x180>)
 8001234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001238:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123a:	4b49      	ldr	r3, [pc, #292]	@ (8001360 <MX_TIM1_Init+0x180>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001240:	4b47      	ldr	r3, [pc, #284]	@ (8001360 <MX_TIM1_Init+0x180>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b46      	ldr	r3, [pc, #280]	@ (8001360 <MX_TIM1_Init+0x180>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800124c:	4844      	ldr	r0, [pc, #272]	@ (8001360 <MX_TIM1_Init+0x180>)
 800124e:	f008 feb8 	bl	8009fc2 <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001258:	f000 fee2 	bl	8002020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001260:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001262:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001266:	4619      	mov	r1, r3
 8001268:	483d      	ldr	r0, [pc, #244]	@ (8001360 <MX_TIM1_Init+0x180>)
 800126a:	f009 f86d 	bl	800a348 <HAL_TIM_ConfigClockSource>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001274:	f000 fed4 	bl	8002020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001278:	4839      	ldr	r0, [pc, #228]	@ (8001360 <MX_TIM1_Init+0x180>)
 800127a:	f008 fef9 	bl	800a070 <HAL_TIM_PWM_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001284:	f000 fecc 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001294:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001298:	4619      	mov	r1, r3
 800129a:	4831      	ldr	r0, [pc, #196]	@ (8001360 <MX_TIM1_Init+0x180>)
 800129c:	f009 fd72 	bl	800ad84 <HAL_TIMEx_MasterConfigSynchronization>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012a6:	f000 febb 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012aa:	2360      	movs	r3, #96	@ 0x60
 80012ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b2:	2300      	movs	r3, #0
 80012b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b6:	2300      	movs	r3, #0
 80012b8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	4824      	ldr	r0, [pc, #144]	@ (8001360 <MX_TIM1_Init+0x180>)
 80012d0:	f008 ff26 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012da:	f000 fea1 	bl	8002020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012e2:	2204      	movs	r2, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	481e      	ldr	r0, [pc, #120]	@ (8001360 <MX_TIM1_Init+0x180>)
 80012e8:	f008 ff1a 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80012f2:	f000 fe95 	bl	8002020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012fa:	2208      	movs	r2, #8
 80012fc:	4619      	mov	r1, r3
 80012fe:	4818      	ldr	r0, [pc, #96]	@ (8001360 <MX_TIM1_Init+0x180>)
 8001300:	f008 ff0e 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800130a:	f000 fe89 	bl	8002020 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001326:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001330:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	@ (8001360 <MX_TIM1_Init+0x180>)
 8001344:	f009 fdba 	bl	800aebc <HAL_TIMEx_ConfigBreakDeadTime>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800134e:	f000 fe67 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001352:	4803      	ldr	r0, [pc, #12]	@ (8001360 <MX_TIM1_Init+0x180>)
 8001354:	f001 faf0 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8001358:	bf00      	nop
 800135a:	3770      	adds	r7, #112	@ 0x70
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	240005e4 	.word	0x240005e4
 8001364:	40010000 	.word	0x40010000

08001368 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	@ 0x28
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138c:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <MX_TIM2_Init+0xb0>)
 800138e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001394:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <MX_TIM2_Init+0xb0>)
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <MX_TIM2_Init+0xb0>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <MX_TIM2_Init+0xb0>)
 80013a2:	f04f 32ff 	mov.w	r2, #4294967295
 80013a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <MX_TIM2_Init+0xb0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <MX_TIM2_Init+0xb0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013b4:	4818      	ldr	r0, [pc, #96]	@ (8001418 <MX_TIM2_Init+0xb0>)
 80013b6:	f008 fe5b 	bl	800a070 <HAL_TIM_PWM_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013c0:	f000 fe2e 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4811      	ldr	r0, [pc, #68]	@ (8001418 <MX_TIM2_Init+0xb0>)
 80013d4:	f009 fcd6 	bl	800ad84 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80013de:	f000 fe1f 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e2:	2360      	movs	r3, #96	@ 0x60
 80013e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	4807      	ldr	r0, [pc, #28]	@ (8001418 <MX_TIM2_Init+0xb0>)
 80013fa:	f008 fe91 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001404:	f000 fe0c 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001408:	4803      	ldr	r0, [pc, #12]	@ (8001418 <MX_TIM2_Init+0xb0>)
 800140a:	f001 fa95 	bl	8002938 <HAL_TIM_MspPostInit>

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	@ 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	24000630 	.word	0x24000630

0800141c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001442:	4a22      	ldr	r2, [pc, #136]	@ (80014cc <MX_TIM3_Init+0xb0>)
 8001444:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001446:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <MX_TIM3_Init+0xac>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001452:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001458:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <MX_TIM3_Init+0xac>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001466:	4818      	ldr	r0, [pc, #96]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001468:	f008 fe02 	bl	800a070 <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001472:	f000 fdd5 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4810      	ldr	r0, [pc, #64]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001486:	f009 fc7d 	bl	800ad84 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001490:	f000 fdc6 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	@ 0x60
 8001496:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	4807      	ldr	r0, [pc, #28]	@ (80014c8 <MX_TIM3_Init+0xac>)
 80014ac:	f008 fe38 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80014b6:	f000 fdb3 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014ba:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <MX_TIM3_Init+0xac>)
 80014bc:	f001 fa3c 	bl	8002938 <HAL_TIM_MspPostInit>

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	@ 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2400067c 	.word	0x2400067c
 80014cc:	40000400 	.word	0x40000400

080014d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e2:	463b      	mov	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014f4:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_TIM4_Init+0xac>)
 80014f6:	4a22      	ldr	r2, [pc, #136]	@ (8001580 <MX_TIM4_Init+0xb0>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014fa:	4b20      	ldr	r3, [pc, #128]	@ (800157c <MX_TIM4_Init+0xac>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_TIM4_Init+0xac>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001506:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <MX_TIM4_Init+0xac>)
 8001508:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800150c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <MX_TIM4_Init+0xac>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_TIM4_Init+0xac>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800151a:	4818      	ldr	r0, [pc, #96]	@ (800157c <MX_TIM4_Init+0xac>)
 800151c:	f008 fda8 	bl	800a070 <HAL_TIM_PWM_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001526:	f000 fd7b 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4810      	ldr	r0, [pc, #64]	@ (800157c <MX_TIM4_Init+0xac>)
 800153a:	f009 fc23 	bl	800ad84 <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001544:	f000 fd6c 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001548:	2360      	movs	r3, #96	@ 0x60
 800154a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <MX_TIM4_Init+0xac>)
 8001560:	f008 fdde 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800156a:	f000 fd59 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <MX_TIM4_Init+0xac>)
 8001570:	f001 f9e2 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	240006c8 	.word	0x240006c8
 8001580:	40000800 	.word	0x40000800

08001584 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015a8:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <MX_TIM5_Init+0xac>)
 80015aa:	4a22      	ldr	r2, [pc, #136]	@ (8001634 <MX_TIM5_Init+0xb0>)
 80015ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015ae:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <MX_TIM5_Init+0xac>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001630 <MX_TIM5_Init+0xac>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <MX_TIM5_Init+0xac>)
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <MX_TIM5_Init+0xac>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <MX_TIM5_Init+0xac>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015ce:	4818      	ldr	r0, [pc, #96]	@ (8001630 <MX_TIM5_Init+0xac>)
 80015d0:	f008 fd4e 	bl	800a070 <HAL_TIM_PWM_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80015da:	f000 fd21 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4810      	ldr	r0, [pc, #64]	@ (8001630 <MX_TIM5_Init+0xac>)
 80015ee:	f009 fbc9 	bl	800ad84 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80015f8:	f000 fd12 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fc:	2360      	movs	r3, #96	@ 0x60
 80015fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	4807      	ldr	r0, [pc, #28]	@ (8001630 <MX_TIM5_Init+0xac>)
 8001614:	f008 fd84 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800161e:	f000 fcff 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001622:	4803      	ldr	r0, [pc, #12]	@ (8001630 <MX_TIM5_Init+0xac>)
 8001624:	f001 f988 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	@ 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	24000714 	.word	0x24000714
 8001634:	40000c00 	.word	0x40000c00

08001638 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b098      	sub	sp, #96	@ 0x60
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2234      	movs	r2, #52	@ 0x34
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f00d fae0 	bl	800ec2a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800166a:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <MX_TIM8_Init+0x118>)
 800166c:	4a39      	ldr	r2, [pc, #228]	@ (8001754 <MX_TIM8_Init+0x11c>)
 800166e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001670:	4b37      	ldr	r3, [pc, #220]	@ (8001750 <MX_TIM8_Init+0x118>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b36      	ldr	r3, [pc, #216]	@ (8001750 <MX_TIM8_Init+0x118>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800167c:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <MX_TIM8_Init+0x118>)
 800167e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001682:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001684:	4b32      	ldr	r3, [pc, #200]	@ (8001750 <MX_TIM8_Init+0x118>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800168a:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <MX_TIM8_Init+0x118>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <MX_TIM8_Init+0x118>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001696:	482e      	ldr	r0, [pc, #184]	@ (8001750 <MX_TIM8_Init+0x118>)
 8001698:	f008 fcea 	bl	800a070 <HAL_TIM_PWM_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80016a2:	f000 fcbd 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016b6:	4619      	mov	r1, r3
 80016b8:	4825      	ldr	r0, [pc, #148]	@ (8001750 <MX_TIM8_Init+0x118>)
 80016ba:	f009 fb63 	bl	800ad84 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80016c4:	f000 fcac 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c8:	2360      	movs	r3, #96	@ 0x60
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d4:	2300      	movs	r3, #0
 80016d6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	4818      	ldr	r0, [pc, #96]	@ (8001750 <MX_TIM8_Init+0x118>)
 80016ee:	f008 fd17 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016f8:	f000 fc92 	bl	8002020 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001710:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001714:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800171e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4807      	ldr	r0, [pc, #28]	@ (8001750 <MX_TIM8_Init+0x118>)
 8001732:	f009 fbc3 	bl	800aebc <HAL_TIMEx_ConfigBreakDeadTime>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800173c:	f000 fc70 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001740:	4803      	ldr	r0, [pc, #12]	@ (8001750 <MX_TIM8_Init+0x118>)
 8001742:	f001 f8f9 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8001746:	bf00      	nop
 8001748:	3760      	adds	r7, #96	@ 0x60
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	24000760 	.word	0x24000760
 8001754:	40010400 	.word	0x40010400

08001758 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176a:	463b      	mov	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800177c:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <MX_TIM12_Init+0xac>)
 800177e:	4a22      	ldr	r2, [pc, #136]	@ (8001808 <MX_TIM12_Init+0xb0>)
 8001780:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001782:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <MX_TIM12_Init+0xac>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <MX_TIM12_Init+0xac>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800178e:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <MX_TIM12_Init+0xac>)
 8001790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001794:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <MX_TIM12_Init+0xac>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <MX_TIM12_Init+0xac>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017a2:	4818      	ldr	r0, [pc, #96]	@ (8001804 <MX_TIM12_Init+0xac>)
 80017a4:	f008 fc64 	bl	800a070 <HAL_TIM_PWM_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80017ae:	f000 fc37 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4810      	ldr	r0, [pc, #64]	@ (8001804 <MX_TIM12_Init+0xac>)
 80017c2:	f009 fadf 	bl	800ad84 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80017cc:	f000 fc28 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d0:	2360      	movs	r3, #96	@ 0x60
 80017d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_TIM12_Init+0xac>)
 80017e8:	f008 fc9a 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 80017f2:	f000 fc15 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80017f6:	4803      	ldr	r0, [pc, #12]	@ (8001804 <MX_TIM12_Init+0xac>)
 80017f8:	f001 f89e 	bl	8002938 <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	@ 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	240007ac 	.word	0x240007ac
 8001808:	40001800 	.word	0x40001800

0800180c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b098      	sub	sp, #96	@ 0x60
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001812:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]
 800182e:	615a      	str	r2, [r3, #20]
 8001830:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2234      	movs	r2, #52	@ 0x34
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f00d f9f6 	bl	800ec2a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800183e:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <MX_TIM15_Init+0x104>)
 8001840:	4a34      	ldr	r2, [pc, #208]	@ (8001914 <MX_TIM15_Init+0x108>)
 8001842:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001844:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <MX_TIM15_Init+0x104>)
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <MX_TIM15_Init+0x104>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001850:	4b2f      	ldr	r3, [pc, #188]	@ (8001910 <MX_TIM15_Init+0x104>)
 8001852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001856:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001858:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <MX_TIM15_Init+0x104>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800185e:	4b2c      	ldr	r3, [pc, #176]	@ (8001910 <MX_TIM15_Init+0x104>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <MX_TIM15_Init+0x104>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800186a:	4829      	ldr	r0, [pc, #164]	@ (8001910 <MX_TIM15_Init+0x104>)
 800186c:	f008 fc00 	bl	800a070 <HAL_TIM_PWM_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001876:	f000 fbd3 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001882:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001886:	4619      	mov	r1, r3
 8001888:	4821      	ldr	r0, [pc, #132]	@ (8001910 <MX_TIM15_Init+0x104>)
 800188a:	f009 fa7b 	bl	800ad84 <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001894:	f000 fbc4 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001898:	2360      	movs	r3, #96	@ 0x60
 800189a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a4:	2300      	movs	r3, #0
 80018a6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018b8:	2200      	movs	r2, #0
 80018ba:	4619      	mov	r1, r3
 80018bc:	4814      	ldr	r0, [pc, #80]	@ (8001910 <MX_TIM15_Init+0x104>)
 80018be:	f008 fc2f 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80018c8:	f000 fbaa 	bl	8002020 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	@ (8001910 <MX_TIM15_Init+0x104>)
 80018f4:	f009 fae2 	bl	800aebc <HAL_TIMEx_ConfigBreakDeadTime>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80018fe:	f000 fb8f 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001902:	4803      	ldr	r0, [pc, #12]	@ (8001910 <MX_TIM15_Init+0x104>)
 8001904:	f001 f818 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3760      	adds	r7, #96	@ 0x60
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	240007f8 	.word	0x240007f8
 8001914:	40014000 	.word	0x40014000

08001918 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800191c:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <MX_UART4_Init+0x90>)
 800191e:	4a23      	ldr	r2, [pc, #140]	@ (80019ac <MX_UART4_Init+0x94>)
 8001920:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001922:	4b21      	ldr	r3, [pc, #132]	@ (80019a8 <MX_UART4_Init+0x90>)
 8001924:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001928:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <MX_UART4_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <MX_UART4_Init+0x90>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001936:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <MX_UART4_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <MX_UART4_Init+0x90>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <MX_UART4_Init+0x90>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <MX_UART4_Init+0x90>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194e:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <MX_UART4_Init+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001954:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <MX_UART4_Init+0x90>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <MX_UART4_Init+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001960:	4811      	ldr	r0, [pc, #68]	@ (80019a8 <MX_UART4_Init+0x90>)
 8001962:	f009 fb37 	bl	800afd4 <HAL_UART_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800196c:	f000 fb58 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001970:	2100      	movs	r1, #0
 8001972:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <MX_UART4_Init+0x90>)
 8001974:	f00a fc43 	bl	800c1fe <HAL_UARTEx_SetTxFifoThreshold>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800197e:	f000 fb4f 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001982:	2100      	movs	r1, #0
 8001984:	4808      	ldr	r0, [pc, #32]	@ (80019a8 <MX_UART4_Init+0x90>)
 8001986:	f00a fc78 	bl	800c27a <HAL_UARTEx_SetRxFifoThreshold>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001990:	f000 fb46 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <MX_UART4_Init+0x90>)
 8001996:	f00a fbf9 	bl	800c18c <HAL_UARTEx_DisableFifoMode>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80019a0:	f000 fb3e 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	24000844 	.word	0x24000844
 80019ac:	40004c00 	.word	0x40004c00

080019b0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019b4:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019b6:	4a23      	ldr	r2, [pc, #140]	@ (8001a44 <MX_UART5_Init+0x94>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80019ba:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019e6:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ec:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f2:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80019f8:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <MX_UART5_Init+0x90>)
 80019fa:	f009 faeb 	bl	800afd4 <HAL_UART_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001a04:	f000 fb0c 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a08:	2100      	movs	r1, #0
 8001a0a:	480d      	ldr	r0, [pc, #52]	@ (8001a40 <MX_UART5_Init+0x90>)
 8001a0c:	f00a fbf7 	bl	800c1fe <HAL_UARTEx_SetTxFifoThreshold>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001a16:	f000 fb03 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <MX_UART5_Init+0x90>)
 8001a1e:	f00a fc2c 	bl	800c27a <HAL_UARTEx_SetRxFifoThreshold>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001a28:	f000 fafa 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <MX_UART5_Init+0x90>)
 8001a2e:	f00a fbad 	bl	800c18c <HAL_UARTEx_DisableFifoMode>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001a38:	f000 faf2 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	240008d8 	.word	0x240008d8
 8001a44:	40005000 	.word	0x40005000

08001a48 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001a4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a4e:	4a23      	ldr	r2, [pc, #140]	@ (8001adc <MX_UART7_Init+0x94>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a84:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001a90:	4811      	ldr	r0, [pc, #68]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001a92:	f009 fa9f 	bl	800afd4 <HAL_UART_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001a9c:	f000 fac0 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001aa4:	f00a fbab 	bl	800c1fe <HAL_UARTEx_SetTxFifoThreshold>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001aae:	f000 fab7 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4808      	ldr	r0, [pc, #32]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001ab6:	f00a fbe0 	bl	800c27a <HAL_UARTEx_SetRxFifoThreshold>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001ac0:	f000 faae 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	@ (8001ad8 <MX_UART7_Init+0x90>)
 8001ac6:	f00a fb61 	bl	800c18c <HAL_UARTEx_DisableFifoMode>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001ad0:	f000 faa6 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	2400096c 	.word	0x2400096c
 8001adc:	40007800 	.word	0x40007800

08001ae0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001ae4:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001ae6:	4a24      	ldr	r2, [pc, #144]	@ (8001b78 <MX_UART8_Init+0x98>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001aea:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b0c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001b10:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001b2a:	4812      	ldr	r0, [pc, #72]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b2c:	f009 fa52 	bl	800afd4 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8001b36:	f000 fa73 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b3e:	f00a fb5e 	bl	800c1fe <HAL_UARTEx_SetTxFifoThreshold>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8001b48:	f000 fa6a 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4809      	ldr	r0, [pc, #36]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b50:	f00a fb93 	bl	800c27a <HAL_UARTEx_SetRxFifoThreshold>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8001b5a:	f000 fa61 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001b5e:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <MX_UART8_Init+0x94>)
 8001b60:	f00a fb14 	bl	800c18c <HAL_UARTEx_DisableFifoMode>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8001b6a:	f000 fa59 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	24000a00 	.word	0x24000a00
 8001b78:	40007c00 	.word	0x40007c00

08001b7c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001b80:	4b2b      	ldr	r3, [pc, #172]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001b82:	4a2c      	ldr	r2, [pc, #176]	@ (8001c34 <MX_USART1_Init+0xb8>)
 8001b84:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001b86:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b8c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001b8e:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001b94:	4b26      	ldr	r3, [pc, #152]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001b9a:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001ba0:	4b23      	ldr	r3, [pc, #140]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001ba6:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001bac:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001bc4:	481a      	ldr	r0, [pc, #104]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001bc6:	f00a fbe5 	bl	800c394 <HAL_USART_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8001bd0:	f000 fa26 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4816      	ldr	r0, [pc, #88]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001bd8:	f00b fb0c 	bl	800d1f4 <HAL_USARTEx_SetTxFifoThreshold>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001be2:	f000 fa1d 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be6:	2100      	movs	r1, #0
 8001be8:	4811      	ldr	r0, [pc, #68]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001bea:	f00b fb41 	bl	800d270 <HAL_USARTEx_SetRxFifoThreshold>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8001bf4:	f000 fa14 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	480d      	ldr	r0, [pc, #52]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001bfc:	f00b fa84 	bl	800d108 <HAL_USARTEx_ConfigNSS>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8001c06:	f000 fa0b 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8001c0a:	4809      	ldr	r0, [pc, #36]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001c0c:	f00b fab9 	bl	800d182 <HAL_USARTEx_DisableFifoMode>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 8001c16:	f000 fa03 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <MX_USART1_Init+0xb4>)
 8001c1c:	f00b fa1f 	bl	800d05e <HAL_USARTEx_EnableSlaveMode>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_USART1_Init+0xae>
  {
    Error_Handler();
 8001c26:	f000 f9fb 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	24000a94 	.word	0x24000a94
 8001c34:	40011000 	.word	0x40011000

08001c38 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001cf0 <MX_USART2_Init+0xb8>)
 8001c40:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001c42:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c48:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001c4a:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001c50:	4b26      	ldr	r3, [pc, #152]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001c56:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001c5c:	4b23      	ldr	r3, [pc, #140]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001c62:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001c68:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001c80:	481a      	ldr	r0, [pc, #104]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c82:	f00a fb87 	bl	800c394 <HAL_USART_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8001c8c:	f000 f9c8 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c90:	2100      	movs	r1, #0
 8001c92:	4816      	ldr	r0, [pc, #88]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001c94:	f00b faae 	bl	800d1f4 <HAL_USARTEx_SetTxFifoThreshold>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 8001c9e:	f000 f9bf 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4811      	ldr	r0, [pc, #68]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001ca6:	f00b fae3 	bl	800d270 <HAL_USARTEx_SetRxFifoThreshold>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8001cb0:	f000 f9b6 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart2, USART_NSS_HARD) != HAL_OK)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	480d      	ldr	r0, [pc, #52]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001cb8:	f00b fa26 	bl	800d108 <HAL_USARTEx_ConfigNSS>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_USART2_Init+0x8e>
  {
    Error_Handler();
 8001cc2:	f000 f9ad 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8001cc6:	4809      	ldr	r0, [pc, #36]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001cc8:	f00b fa5b 	bl	800d182 <HAL_USARTEx_DisableFifoMode>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART2_Init+0x9e>
  {
    Error_Handler();
 8001cd2:	f000 f9a5 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	@ (8001cec <MX_USART2_Init+0xb4>)
 8001cd8:	f00b f9c1 	bl	800d05e <HAL_USARTEx_EnableSlaveMode>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_USART2_Init+0xae>
  {
    Error_Handler();
 8001ce2:	f000 f99d 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	24000af4 	.word	0x24000af4
 8001cf0:	40004400 	.word	0x40004400

08001cf4 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8001dac <MX_USART3_Init+0xb8>)
 8001cfc:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d04:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001d06:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001d0c:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001d12:	4b25      	ldr	r3, [pc, #148]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001d18:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001d1e:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001d24:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001d3c:	481a      	ldr	r0, [pc, #104]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d3e:	f00a fb29 	bl	800c394 <HAL_USART_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8001d48:	f000 f96a 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4816      	ldr	r0, [pc, #88]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d50:	f00b fa50 	bl	800d1f4 <HAL_USARTEx_SetTxFifoThreshold>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8001d5a:	f000 f961 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4811      	ldr	r0, [pc, #68]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d62:	f00b fa85 	bl	800d270 <HAL_USARTEx_SetRxFifoThreshold>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8001d6c:	f000 f958 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8001d70:	2100      	movs	r1, #0
 8001d72:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d74:	f00b f9c8 	bl	800d108 <HAL_USARTEx_ConfigNSS>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8001d7e:	f000 f94f 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001d82:	4809      	ldr	r0, [pc, #36]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d84:	f00b f9fd 	bl	800d182 <HAL_USARTEx_DisableFifoMode>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8001d8e:	f000 f947 	bl	8002020 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <MX_USART3_Init+0xb4>)
 8001d94:	f00b f963 	bl	800d05e <HAL_USARTEx_EnableSlaveMode>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8001d9e:	f000 f93f 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	24000b54 	.word	0x24000b54
 8001dac:	40004800 	.word	0x40004800

08001db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	@ 0x30
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b7a      	ldr	r3, [pc, #488]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dcc:	4a78      	ldr	r2, [pc, #480]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd6:	4b76      	ldr	r3, [pc, #472]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de4:	4b72      	ldr	r3, [pc, #456]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dea:	4a71      	ldr	r2, [pc, #452]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df4:	4b6e      	ldr	r3, [pc, #440]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e08:	4a69      	ldr	r2, [pc, #420]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e12:	4b67      	ldr	r3, [pc, #412]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b63      	ldr	r3, [pc, #396]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e26:	4a62      	ldr	r2, [pc, #392]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e30:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e44:	4a5a      	ldr	r2, [pc, #360]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4e:	4b58      	ldr	r3, [pc, #352]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5c:	4b54      	ldr	r3, [pc, #336]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e62:	4a53      	ldr	r2, [pc, #332]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6c:	4b50      	ldr	r3, [pc, #320]	@ (8001fb0 <MX_GPIO_Init+0x200>)
 8001e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	484d      	ldr	r0, [pc, #308]	@ (8001fb4 <MX_GPIO_Init+0x204>)
 8001e80:	f003 fa1e 	bl	80052c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e8a:	484b      	ldr	r0, [pc, #300]	@ (8001fb8 <MX_GPIO_Init+0x208>)
 8001e8c:	f003 fa18 	bl	80052c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001e90:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e96:	2300      	movs	r3, #0
 8001e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4843      	ldr	r0, [pc, #268]	@ (8001fb4 <MX_GPIO_Init+0x204>)
 8001ea6:	f003 f863 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE10 PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_12;
 8001eaa:	f245 4308 	movw	r3, #21512	@ 0x5408
 8001eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	483f      	ldr	r0, [pc, #252]	@ (8001fbc <MX_GPIO_Init+0x20c>)
 8001ec0:	f003 f856 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	483a      	ldr	r0, [pc, #232]	@ (8001fc0 <MX_GPIO_Init+0x210>)
 8001ed8:	f003 f84a 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	4834      	ldr	r0, [pc, #208]	@ (8001fc0 <MX_GPIO_Init+0x210>)
 8001ef0:	f003 f83e 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	482a      	ldr	r0, [pc, #168]	@ (8001fb4 <MX_GPIO_Init+0x204>)
 8001f0c:	f003 f830 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f10:	2308      	movs	r3, #8
 8001f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f14:	2303      	movs	r3, #3
 8001f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	4824      	ldr	r0, [pc, #144]	@ (8001fb4 <MX_GPIO_Init+0x204>)
 8001f24:	f003 f824 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	481f      	ldr	r0, [pc, #124]	@ (8001fb8 <MX_GPIO_Init+0x208>)
 8001f3c:	f003 f818 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4817      	ldr	r0, [pc, #92]	@ (8001fb8 <MX_GPIO_Init+0x208>)
 8001f5a:	f003 f809 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4814      	ldr	r0, [pc, #80]	@ (8001fc4 <MX_GPIO_Init+0x214>)
 8001f72:	f002 fffd 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <MX_GPIO_Init+0x20c>)
 8001f8c:	f002 fff0 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f90:	2308      	movs	r3, #8
 8001f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f94:	2303      	movs	r3, #3
 8001f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4808      	ldr	r0, [pc, #32]	@ (8001fc4 <MX_GPIO_Init+0x214>)
 8001fa4:	f002 ffe4 	bl	8004f70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fa8:	bf00      	nop
 8001faa:	3730      	adds	r7, #48	@ 0x30
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	58024400 	.word	0x58024400
 8001fb4:	58020800 	.word	0x58020800
 8001fb8:	58020400 	.word	0x58020400
 8001fbc:	58021000 	.word	0x58021000
 8001fc0:	58020c00 	.word	0x58020c00
 8001fc4:	58020000 	.word	0x58020000

08001fc8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001fce:	463b      	mov	r3, r7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001fda:	f002 ff51 	bl	8004e80 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001fea:	231f      	movs	r3, #31
 8001fec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001fee:	2387      	movs	r3, #135	@ 0x87
 8001ff0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800200a:	463b      	mov	r3, r7
 800200c:	4618      	mov	r0, r3
 800200e:	f002 ff6f 	bl	8004ef0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002012:	2004      	movs	r0, #4
 8002014:	f002 ff4c 	bl	8004eb0 <HAL_MPU_Enable>

}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002024:	b672      	cpsid	i
}
 8002026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <Error_Handler+0x8>

0800202c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_MspInit+0x30>)
 8002034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002038:	4a08      	ldr	r2, [pc, #32]	@ (800205c <HAL_MspInit+0x30>)
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_MspInit+0x30>)
 8002044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	58024400 	.word	0x58024400

08002060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	@ 0x30
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a39      	ldr	r2, [pc, #228]	@ (8002164 <HAL_ADC_MspInit+0x104>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d133      	bne.n	80020ea <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002082:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <HAL_ADC_MspInit+0x108>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	4a37      	ldr	r2, [pc, #220]	@ (8002168 <HAL_ADC_MspInit+0x108>)
 800208a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800208c:	4b36      	ldr	r3, [pc, #216]	@ (8002168 <HAL_ADC_MspInit+0x108>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d10e      	bne.n	80020b2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002094:	4b35      	ldr	r3, [pc, #212]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 8002096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800209a:	4a34      	ldr	r2, [pc, #208]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 800209c:	f043 0320 	orr.w	r3, r3, #32
 80020a0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80020a4:	4b31      	ldr	r3, [pc, #196]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 80020a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	4b2e      	ldr	r3, [pc, #184]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	4a2c      	ldr	r2, [pc, #176]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c2:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020d0:	2330      	movs	r3, #48	@ 0x30
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d4:	2303      	movs	r3, #3
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	4619      	mov	r1, r3
 80020e2:	4823      	ldr	r0, [pc, #140]	@ (8002170 <HAL_ADC_MspInit+0x110>)
 80020e4:	f002 ff44 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020e8:	e037      	b.n	800215a <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a21      	ldr	r2, [pc, #132]	@ (8002174 <HAL_ADC_MspInit+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d132      	bne.n	800215a <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <HAL_ADC_MspInit+0x108>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002168 <HAL_ADC_MspInit+0x108>)
 80020fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <HAL_ADC_MspInit+0x108>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10e      	bne.n	8002124 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002106:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 8002108:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800210c:	4a17      	ldr	r2, [pc, #92]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 800210e:	f043 0320 	orr.w	r3, r3, #32
 8002112:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 8002118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212a:	4a10      	ldr	r2, [pc, #64]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002134:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <HAL_ADC_MspInit+0x10c>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002142:	2303      	movs	r3, #3
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002146:	2303      	movs	r3, #3
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4619      	mov	r1, r3
 8002154:	4808      	ldr	r0, [pc, #32]	@ (8002178 <HAL_ADC_MspInit+0x118>)
 8002156:	f002 ff0b 	bl	8004f70 <HAL_GPIO_Init>
}
 800215a:	bf00      	nop
 800215c:	3730      	adds	r7, #48	@ 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000
 8002168:	24000bb4 	.word	0x24000bb4
 800216c:	58024400 	.word	0x58024400
 8002170:	58020800 	.word	0x58020800
 8002174:	40022100 	.word	0x40022100
 8002178:	58020400 	.word	0x58020400

0800217c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0bc      	sub	sp, #240	@ 0xf0
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002194:	f107 0320 	add.w	r3, r7, #32
 8002198:	22b8      	movs	r2, #184	@ 0xb8
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f00c fd44 	bl	800ec2a <memset>
  if(hi2c->Instance==I2C1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a74      	ldr	r2, [pc, #464]	@ (8002378 <HAL_I2C_MspInit+0x1fc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d147      	bne.n	800223c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021ac:	f04f 0208 	mov.w	r2, #8
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021be:	f107 0320 	add.w	r3, r7, #32
 80021c2:	4618      	mov	r0, r3
 80021c4:	f004 f96a 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80021ce:	f7ff ff27 	bl	8002020 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	4b6a      	ldr	r3, [pc, #424]	@ (800237c <HAL_I2C_MspInit+0x200>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	4a68      	ldr	r2, [pc, #416]	@ (800237c <HAL_I2C_MspInit+0x200>)
 80021da:	f043 0302 	orr.w	r3, r3, #2
 80021de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021e2:	4b66      	ldr	r3, [pc, #408]	@ (800237c <HAL_I2C_MspInit+0x200>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80021f0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80021f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f8:	2312      	movs	r3, #18
 80021fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800220a:	2304      	movs	r3, #4
 800220c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002214:	4619      	mov	r1, r3
 8002216:	485a      	ldr	r0, [pc, #360]	@ (8002380 <HAL_I2C_MspInit+0x204>)
 8002218:	f002 feaa 	bl	8004f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800221c:	4b57      	ldr	r3, [pc, #348]	@ (800237c <HAL_I2C_MspInit+0x200>)
 800221e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002222:	4a56      	ldr	r2, [pc, #344]	@ (800237c <HAL_I2C_MspInit+0x200>)
 8002224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002228:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800222c:	4b53      	ldr	r3, [pc, #332]	@ (800237c <HAL_I2C_MspInit+0x200>)
 800222e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002232:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800223a:	e098      	b.n	800236e <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a50      	ldr	r2, [pc, #320]	@ (8002384 <HAL_I2C_MspInit+0x208>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d147      	bne.n	80022d6 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002246:	f04f 0208 	mov.w	r2, #8
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002258:	f107 0320 	add.w	r3, r7, #32
 800225c:	4618      	mov	r0, r3
 800225e:	f004 f91d 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8002268:	f7ff feda 	bl	8002020 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226c:	4b43      	ldr	r3, [pc, #268]	@ (800237c <HAL_I2C_MspInit+0x200>)
 800226e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002272:	4a42      	ldr	r2, [pc, #264]	@ (800237c <HAL_I2C_MspInit+0x200>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800227c:	4b3f      	ldr	r3, [pc, #252]	@ (800237c <HAL_I2C_MspInit+0x200>)
 800227e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800228a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800228e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002292:	2312      	movs	r3, #18
 8002294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022a4:	2304      	movs	r3, #4
 80022a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022aa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022ae:	4619      	mov	r1, r3
 80022b0:	4833      	ldr	r0, [pc, #204]	@ (8002380 <HAL_I2C_MspInit+0x204>)
 80022b2:	f002 fe5d 	bl	8004f70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022b6:	4b31      	ldr	r3, [pc, #196]	@ (800237c <HAL_I2C_MspInit+0x200>)
 80022b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022bc:	4a2f      	ldr	r2, [pc, #188]	@ (800237c <HAL_I2C_MspInit+0x200>)
 80022be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022c6:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <HAL_I2C_MspInit+0x200>)
 80022c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
}
 80022d4:	e04b      	b.n	800236e <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2b      	ldr	r2, [pc, #172]	@ (8002388 <HAL_I2C_MspInit+0x20c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d146      	bne.n	800236e <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80022e0:	f04f 0210 	mov.w	r2, #16
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f2:	f107 0320 	add.w	r3, r7, #32
 80022f6:	4618      	mov	r0, r3
 80022f8:	f004 f8d0 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8002302:	f7ff fe8d 	bl	8002020 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	4b1d      	ldr	r3, [pc, #116]	@ (800237c <HAL_I2C_MspInit+0x200>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230c:	4a1b      	ldr	r2, [pc, #108]	@ (800237c <HAL_I2C_MspInit+0x200>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002316:	4b19      	ldr	r3, [pc, #100]	@ (800237c <HAL_I2C_MspInit+0x200>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002324:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002328:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800232c:	2312      	movs	r3, #18
 800232e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800233e:	2304      	movs	r3, #4
 8002340:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002344:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002348:	4619      	mov	r1, r3
 800234a:	4810      	ldr	r0, [pc, #64]	@ (800238c <HAL_I2C_MspInit+0x210>)
 800234c:	f002 fe10 	bl	8004f70 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002350:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <HAL_I2C_MspInit+0x200>)
 8002352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002356:	4a09      	ldr	r2, [pc, #36]	@ (800237c <HAL_I2C_MspInit+0x200>)
 8002358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800235c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002360:	4b06      	ldr	r3, [pc, #24]	@ (800237c <HAL_I2C_MspInit+0x200>)
 8002362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
}
 800236e:	bf00      	nop
 8002370:	37f0      	adds	r7, #240	@ 0xf0
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40005400 	.word	0x40005400
 800237c:	58024400 	.word	0x58024400
 8002380:	58020400 	.word	0x58020400
 8002384:	40005800 	.word	0x40005800
 8002388:	58001c00 	.word	0x58001c00
 800238c:	58020c00 	.word	0x58020c00

08002390 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0ba      	sub	sp, #232	@ 0xe8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a8:	f107 0318 	add.w	r3, r7, #24
 80023ac:	22b8      	movs	r2, #184	@ 0xb8
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f00c fc3a 	bl	800ec2a <memset>
  if(hsd->Instance==SDMMC1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a38      	ldr	r2, [pc, #224]	@ (800249c <HAL_SD_MspInit+0x10c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d169      	bne.n	8002494 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80023c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d0:	f107 0318 	add.w	r3, r7, #24
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 f861 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80023e0:	f7ff fe1e 	bl	8002020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80023e4:	4b2e      	ldr	r3, [pc, #184]	@ (80024a0 <HAL_SD_MspInit+0x110>)
 80023e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023ea:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <HAL_SD_MspInit+0x110>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80023f4:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <HAL_SD_MspInit+0x110>)
 80023f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002402:	4b27      	ldr	r3, [pc, #156]	@ (80024a0 <HAL_SD_MspInit+0x110>)
 8002404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002408:	4a25      	ldr	r2, [pc, #148]	@ (80024a0 <HAL_SD_MspInit+0x110>)
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <HAL_SD_MspInit+0x110>)
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002420:	4b1f      	ldr	r3, [pc, #124]	@ (80024a0 <HAL_SD_MspInit+0x110>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002426:	4a1e      	ldr	r2, [pc, #120]	@ (80024a0 <HAL_SD_MspInit+0x110>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002430:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <HAL_SD_MspInit+0x110>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800243e:	2304      	movs	r3, #4
 8002440:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002456:	230c      	movs	r3, #12
 8002458:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800245c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002460:	4619      	mov	r1, r3
 8002462:	4810      	ldr	r0, [pc, #64]	@ (80024a4 <HAL_SD_MspInit+0x114>)
 8002464:	f002 fd84 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8002468:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800246c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002482:	230c      	movs	r3, #12
 8002484:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002488:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800248c:	4619      	mov	r1, r3
 800248e:	4806      	ldr	r0, [pc, #24]	@ (80024a8 <HAL_SD_MspInit+0x118>)
 8002490:	f002 fd6e 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002494:	bf00      	nop
 8002496:	37e8      	adds	r7, #232	@ 0xe8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	52007000 	.word	0x52007000
 80024a0:	58024400 	.word	0x58024400
 80024a4:	58020c00 	.word	0x58020c00
 80024a8:	58020800 	.word	0x58020800

080024ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0c0      	sub	sp, #256	@ 0x100
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024c8:	22b8      	movs	r2, #184	@ 0xb8
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f00c fbac 	bl	800ec2a <memset>
  if(hspi->Instance==SPI1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4aaa      	ldr	r2, [pc, #680]	@ (8002780 <HAL_SPI_MspInit+0x2d4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d16a      	bne.n	80025b2 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80024dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 ffd2 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80024fe:	f7ff fd8f 	bl	8002020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002502:	4ba0      	ldr	r3, [pc, #640]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002508:	4a9e      	ldr	r2, [pc, #632]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 800250a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800250e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002512:	4b9c      	ldr	r3, [pc, #624]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002518:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800251e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002520:	4b98      	ldr	r3, [pc, #608]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002526:	4a97      	ldr	r2, [pc, #604]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002530:	4b94      	ldr	r3, [pc, #592]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800253c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	4b91      	ldr	r3, [pc, #580]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002544:	4a8f      	ldr	r2, [pc, #572]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800254e:	4b8d      	ldr	r3, [pc, #564]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PB4(NJTRST)     ------> SPI1_MISO
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800255c:	2310      	movs	r3, #16
 800255e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002574:	2305      	movs	r3, #5
 8002576:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800257e:	4619      	mov	r1, r3
 8002580:	4881      	ldr	r0, [pc, #516]	@ (8002788 <HAL_SPI_MspInit+0x2dc>)
 8002582:	f002 fcf5 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002586:	23b0      	movs	r3, #176	@ 0xb0
 8002588:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259e:	2305      	movs	r3, #5
 80025a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80025a8:	4619      	mov	r1, r3
 80025aa:	4878      	ldr	r0, [pc, #480]	@ (800278c <HAL_SPI_MspInit+0x2e0>)
 80025ac:	f002 fce0 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80025b0:	e0e1      	b.n	8002776 <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a76      	ldr	r2, [pc, #472]	@ (8002790 <HAL_SPI_MspInit+0x2e4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	f040 8091 	bne.w	80026e0 <HAL_SPI_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80025be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 ff61 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 80025e0:	f7ff fd1e 	bl	8002020 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025e4:	4b67      	ldr	r3, [pc, #412]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 80025e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025ea:	4a66      	ldr	r2, [pc, #408]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025f4:	4b63      	ldr	r3, [pc, #396]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 80025f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b60      	ldr	r3, [pc, #384]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002608:	4a5e      	ldr	r2, [pc, #376]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002612:	4b5c      	ldr	r3, [pc, #368]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002620:	4b58      	ldr	r3, [pc, #352]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002626:	4a57      	ldr	r2, [pc, #348]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002630:	4b54      	ldr	r3, [pc, #336]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	4b51      	ldr	r3, [pc, #324]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002644:	4a4f      	ldr	r2, [pc, #316]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800264e:	4b4d      	ldr	r3, [pc, #308]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800265c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002660:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002676:	2305      	movs	r3, #5
 8002678:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002680:	4619      	mov	r1, r3
 8002682:	4842      	ldr	r0, [pc, #264]	@ (800278c <HAL_SPI_MspInit+0x2e0>)
 8002684:	f002 fc74 	bl	8004f70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8002688:	2306      	movs	r3, #6
 800268a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026a0:	2305      	movs	r3, #5
 80026a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80026aa:	4619      	mov	r1, r3
 80026ac:	4839      	ldr	r0, [pc, #228]	@ (8002794 <HAL_SPI_MspInit+0x2e8>)
 80026ae:	f002 fc5f 	bl	8004f70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026cc:	2305      	movs	r3, #5
 80026ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80026d6:	4619      	mov	r1, r3
 80026d8:	482b      	ldr	r0, [pc, #172]	@ (8002788 <HAL_SPI_MspInit+0x2dc>)
 80026da:	f002 fc49 	bl	8004f70 <HAL_GPIO_Init>
}
 80026de:	e04a      	b.n	8002776 <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI4)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002798 <HAL_SPI_MspInit+0x2ec>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d145      	bne.n	8002776 <HAL_SPI_MspInit+0x2ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80026ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fecb 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_SPI_MspInit+0x264>
      Error_Handler();
 800270c:	f7ff fc88 	bl	8002020 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002710:	4b1c      	ldr	r3, [pc, #112]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002716:	4a1b      	ldr	r2, [pc, #108]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002718:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800271c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002720:	4b18      	ldr	r3, [pc, #96]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002734:	4a13      	ldr	r2, [pc, #76]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002736:	f043 0310 	orr.w	r3, r3, #16
 800273a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800273e:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <HAL_SPI_MspInit+0x2d8>)
 8002740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800274c:	2374      	movs	r3, #116	@ 0x74
 800274e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002764:	2305      	movs	r3, #5
 8002766:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800276a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800276e:	4619      	mov	r1, r3
 8002770:	480a      	ldr	r0, [pc, #40]	@ (800279c <HAL_SPI_MspInit+0x2f0>)
 8002772:	f002 fbfd 	bl	8004f70 <HAL_GPIO_Init>
}
 8002776:	bf00      	nop
 8002778:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40013000 	.word	0x40013000
 8002784:	58024400 	.word	0x58024400
 8002788:	58020400 	.word	0x58020400
 800278c:	58020000 	.word	0x58020000
 8002790:	40003800 	.word	0x40003800
 8002794:	58020800 	.word	0x58020800
 8002798:	40013400 	.word	0x40013400
 800279c:	58021000 	.word	0x58021000

080027a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0b      	ldr	r2, [pc, #44]	@ (80027dc <HAL_TIM_Base_MspInit+0x3c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_TIM_Base_MspInit+0x40>)
 80027b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027b8:	4a09      	ldr	r2, [pc, #36]	@ (80027e0 <HAL_TIM_Base_MspInit+0x40>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <HAL_TIM_Base_MspInit+0x40>)
 80027c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40010000 	.word	0x40010000
 80027e0:	58024400 	.word	0x58024400

080027e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b08b      	sub	sp, #44	@ 0x2c
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f4:	d10f      	bne.n	8002816 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f6:	4b49      	ldr	r3, [pc, #292]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 80027f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027fc:	4a47      	ldr	r2, [pc, #284]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002806:	4b45      	ldr	r3, [pc, #276]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 8002808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002814:	e07c      	b.n	8002910 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a41      	ldr	r2, [pc, #260]	@ (8002920 <HAL_TIM_PWM_MspInit+0x13c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10f      	bne.n	8002840 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002820:	4b3e      	ldr	r3, [pc, #248]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 8002822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002826:	4a3d      	ldr	r2, [pc, #244]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002830:	4b3a      	ldr	r3, [pc, #232]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 8002832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	6a3b      	ldr	r3, [r7, #32]
}
 800283e:	e067      	b.n	8002910 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM4)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a37      	ldr	r2, [pc, #220]	@ (8002924 <HAL_TIM_PWM_MspInit+0x140>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10f      	bne.n	800286a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800284a:	4b34      	ldr	r3, [pc, #208]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 800284c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002850:	4a32      	ldr	r2, [pc, #200]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800285a:	4b30      	ldr	r3, [pc, #192]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 800285c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	69fb      	ldr	r3, [r7, #28]
}
 8002868:	e052      	b.n	8002910 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM5)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2e      	ldr	r2, [pc, #184]	@ (8002928 <HAL_TIM_PWM_MspInit+0x144>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10f      	bne.n	8002894 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002874:	4b29      	ldr	r3, [pc, #164]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 8002876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800287a:	4a28      	ldr	r2, [pc, #160]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002884:	4b25      	ldr	r3, [pc, #148]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 8002886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	69bb      	ldr	r3, [r7, #24]
}
 8002892:	e03d      	b.n	8002910 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM8)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a24      	ldr	r2, [pc, #144]	@ (800292c <HAL_TIM_PWM_MspInit+0x148>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10f      	bne.n	80028be <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800289e:	4b1f      	ldr	r3, [pc, #124]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 80028a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a4:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ae:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 80028b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]
}
 80028bc:	e028      	b.n	8002910 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM12)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002930 <HAL_TIM_PWM_MspInit+0x14c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10f      	bne.n	80028e8 <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028c8:	4b14      	ldr	r3, [pc, #80]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 80028ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ce:	4a13      	ldr	r2, [pc, #76]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 80028d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028d8:	4b10      	ldr	r3, [pc, #64]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 80028da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
}
 80028e6:	e013      	b.n	8002910 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM15)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a11      	ldr	r2, [pc, #68]	@ (8002934 <HAL_TIM_PWM_MspInit+0x150>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10e      	bne.n	8002910 <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 80028f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f8:	4a08      	ldr	r2, [pc, #32]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002902:	4b06      	ldr	r3, [pc, #24]	@ (800291c <HAL_TIM_PWM_MspInit+0x138>)
 8002904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
}
 8002910:	bf00      	nop
 8002912:	372c      	adds	r7, #44	@ 0x2c
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	58024400 	.word	0x58024400
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800
 8002928:	40000c00 	.word	0x40000c00
 800292c:	40010400 	.word	0x40010400
 8002930:	40001800 	.word	0x40001800
 8002934:	40014000 	.word	0x40014000

08002938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b090      	sub	sp, #64	@ 0x40
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a95      	ldr	r2, [pc, #596]	@ (8002bac <HAL_TIM_MspPostInit+0x274>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d120      	bne.n	800299c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800295a:	4b95      	ldr	r3, [pc, #596]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 800295c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002960:	4a93      	ldr	r2, [pc, #588]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002962:	f043 0310 	orr.w	r3, r3, #16
 8002966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800296a:	4b91      	ldr	r3, [pc, #580]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 800296c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_13;
 8002978:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 800297c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800298a:	2301      	movs	r3, #1
 800298c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800298e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002992:	4619      	mov	r1, r3
 8002994:	4887      	ldr	r0, [pc, #540]	@ (8002bb4 <HAL_TIM_MspPostInit+0x27c>)
 8002996:	f002 faeb 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800299a:	e103      	b.n	8002ba4 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a4:	d120      	bne.n	80029e8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b82      	ldr	r3, [pc, #520]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ac:	4a80      	ldr	r2, [pc, #512]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029b6:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029d6:	2301      	movs	r3, #1
 80029d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029de:	4619      	mov	r1, r3
 80029e0:	4875      	ldr	r0, [pc, #468]	@ (8002bb8 <HAL_TIM_MspPostInit+0x280>)
 80029e2:	f002 fac5 	bl	8004f70 <HAL_GPIO_Init>
}
 80029e6:	e0dd      	b.n	8002ba4 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM3)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a73      	ldr	r2, [pc, #460]	@ (8002bbc <HAL_TIM_MspPostInit+0x284>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d11f      	bne.n	8002a32 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f8:	4a6d      	ldr	r2, [pc, #436]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a02:	4b6b      	ldr	r3, [pc, #428]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a10:	2340      	movs	r3, #64	@ 0x40
 8002a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a20:	2302      	movs	r3, #2
 8002a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4863      	ldr	r0, [pc, #396]	@ (8002bb8 <HAL_TIM_MspPostInit+0x280>)
 8002a2c:	f002 faa0 	bl	8004f70 <HAL_GPIO_Init>
}
 8002a30:	e0b8      	b.n	8002ba4 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM4)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a62      	ldr	r2, [pc, #392]	@ (8002bc0 <HAL_TIM_MspPostInit+0x288>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d11f      	bne.n	8002a7c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a42:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a4c:	4b58      	ldr	r3, [pc, #352]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a5a:	2340      	movs	r3, #64	@ 0x40
 8002a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a72:	4619      	mov	r1, r3
 8002a74:	4853      	ldr	r0, [pc, #332]	@ (8002bc4 <HAL_TIM_MspPostInit+0x28c>)
 8002a76:	f002 fa7b 	bl	8004f70 <HAL_GPIO_Init>
}
 8002a7a:	e093      	b.n	8002ba4 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM5)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a51      	ldr	r2, [pc, #324]	@ (8002bc8 <HAL_TIM_MspPostInit+0x290>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11f      	bne.n	8002ac6 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a8c:	4a48      	ldr	r2, [pc, #288]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a96:	4b46      	ldr	r3, [pc, #280]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002abc:	4619      	mov	r1, r3
 8002abe:	483e      	ldr	r0, [pc, #248]	@ (8002bb8 <HAL_TIM_MspPostInit+0x280>)
 8002ac0:	f002 fa56 	bl	8004f70 <HAL_GPIO_Init>
}
 8002ac4:	e06e      	b.n	8002ba4 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM8)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a40      	ldr	r2, [pc, #256]	@ (8002bcc <HAL_TIM_MspPostInit+0x294>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d11f      	bne.n	8002b10 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad0:	4b37      	ldr	r3, [pc, #220]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ad6:	4a36      	ldr	r2, [pc, #216]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ae0:	4b33      	ldr	r3, [pc, #204]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002aee:	2340      	movs	r3, #64	@ 0x40
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002afe:	2303      	movs	r3, #3
 8002b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b06:	4619      	mov	r1, r3
 8002b08:	4831      	ldr	r0, [pc, #196]	@ (8002bd0 <HAL_TIM_MspPostInit+0x298>)
 8002b0a:	f002 fa31 	bl	8004f70 <HAL_GPIO_Init>
}
 8002b0e:	e049      	b.n	8002ba4 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM12)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd4 <HAL_TIM_MspPostInit+0x29c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d120      	bne.n	8002b5c <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b20:	4a23      	ldr	r2, [pc, #140]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002b22:	f043 0302 	orr.w	r3, r3, #2
 8002b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b2a:	4b21      	ldr	r3, [pc, #132]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b52:	4619      	mov	r1, r3
 8002b54:	481b      	ldr	r0, [pc, #108]	@ (8002bc4 <HAL_TIM_MspPostInit+0x28c>)
 8002b56:	f002 fa0b 	bl	8004f70 <HAL_GPIO_Init>
}
 8002b5a:	e023      	b.n	8002ba4 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM15)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd8 <HAL_TIM_MspPostInit+0x2a0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d11e      	bne.n	8002ba4 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b6c:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b76:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <HAL_TIM_MspPostInit+0x278>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b84:	2304      	movs	r3, #4
 8002b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002b94:	2304      	movs	r3, #4
 8002b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4806      	ldr	r0, [pc, #24]	@ (8002bb8 <HAL_TIM_MspPostInit+0x280>)
 8002ba0:	f002 f9e6 	bl	8004f70 <HAL_GPIO_Init>
}
 8002ba4:	bf00      	nop
 8002ba6:	3740      	adds	r7, #64	@ 0x40
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	58021000 	.word	0x58021000
 8002bb8:	58020000 	.word	0x58020000
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40000800 	.word	0x40000800
 8002bc4:	58020400 	.word	0x58020400
 8002bc8:	40000c00 	.word	0x40000c00
 8002bcc:	40010400 	.word	0x40010400
 8002bd0:	58020800 	.word	0x58020800
 8002bd4:	40001800 	.word	0x40001800
 8002bd8:	40014000 	.word	0x40014000

08002bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b0c0      	sub	sp, #256	@ 0x100
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bf4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002bf8:	22b8      	movs	r2, #184	@ 0xb8
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f00c f814 	bl	800ec2a <memset>
  if(huart->Instance==UART4)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4abf      	ldr	r2, [pc, #764]	@ (8002f04 <HAL_UART_MspInit+0x328>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d16b      	bne.n	8002ce4 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002c0c:	f04f 0202 	mov.w	r2, #2
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fc3a 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c2e:	f7ff f9f7 	bl	8002020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c32:	4bb5      	ldr	r3, [pc, #724]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c38:	4ab3      	ldr	r2, [pc, #716]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002c3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c42:	4bb1      	ldr	r3, [pc, #708]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c50:	4bad      	ldr	r3, [pc, #692]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c56:	4aac      	ldr	r2, [pc, #688]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c60:	4ba9      	ldr	r3, [pc, #676]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c6e:	4ba6      	ldr	r3, [pc, #664]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c74:	4aa4      	ldr	r2, [pc, #656]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002c76:	f043 0308 	orr.w	r3, r3, #8
 8002c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c7e:	4ba2      	ldr	r3, [pc, #648]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PB9     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4896      	ldr	r0, [pc, #600]	@ (8002f0c <HAL_UART_MspInit+0x330>)
 8002cb4:	f002 f95c 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002cda:	4619      	mov	r1, r3
 8002cdc:	488c      	ldr	r0, [pc, #560]	@ (8002f10 <HAL_UART_MspInit+0x334>)
 8002cde:	f002 f947 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8002ce2:	e109      	b.n	8002ef8 <HAL_UART_MspInit+0x31c>
  else if(huart->Instance==UART5)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a8a      	ldr	r2, [pc, #552]	@ (8002f14 <HAL_UART_MspInit+0x338>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d147      	bne.n	8002d7e <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002cee:	f04f 0202 	mov.w	r2, #2
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 fbc9 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8002d10:	f7ff f986 	bl	8002020 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d14:	4b7c      	ldr	r3, [pc, #496]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d1a:	4a7b      	ldr	r2, [pc, #492]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002d1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d24:	4b78      	ldr	r3, [pc, #480]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	623b      	str	r3, [r7, #32]
 8002d30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d32:	4b75      	ldr	r3, [pc, #468]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d38:	4a73      	ldr	r2, [pc, #460]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d42:	4b71      	ldr	r3, [pc, #452]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8002d50:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002d54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002d6a:	230e      	movs	r3, #14
 8002d6c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d70:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002d74:	4619      	mov	r1, r3
 8002d76:	4865      	ldr	r0, [pc, #404]	@ (8002f0c <HAL_UART_MspInit+0x330>)
 8002d78:	f002 f8fa 	bl	8004f70 <HAL_GPIO_Init>
}
 8002d7c:	e0bc      	b.n	8002ef8 <HAL_UART_MspInit+0x31c>
  else if(huart->Instance==UART7)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a65      	ldr	r2, [pc, #404]	@ (8002f18 <HAL_UART_MspInit+0x33c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d147      	bne.n	8002e18 <HAL_UART_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002d88:	f04f 0202 	mov.w	r2, #2
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 fb7c 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8002daa:	f7ff f939 	bl	8002020 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002dae:	4b56      	ldr	r3, [pc, #344]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002db4:	4a54      	ldr	r2, [pc, #336]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002db6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002dba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002dbe:	4b52      	ldr	r3, [pc, #328]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dc4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd2:	4a4d      	ldr	r2, [pc, #308]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002dd4:	f043 0310 	orr.w	r3, r3, #16
 8002dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002dea:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002dee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002e04:	2307      	movs	r3, #7
 8002e06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e0a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4842      	ldr	r0, [pc, #264]	@ (8002f1c <HAL_UART_MspInit+0x340>)
 8002e12:	f002 f8ad 	bl	8004f70 <HAL_GPIO_Init>
}
 8002e16:	e06f      	b.n	8002ef8 <HAL_UART_MspInit+0x31c>
  else if(huart->Instance==UART8)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a40      	ldr	r2, [pc, #256]	@ (8002f20 <HAL_UART_MspInit+0x344>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d16a      	bne.n	8002ef8 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002e22:	f04f 0202 	mov.w	r2, #2
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 fb2f 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8002e44:	f7ff f8ec 	bl	8002020 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002e48:	4b2f      	ldr	r3, [pc, #188]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002e50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e58:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e66:	4b28      	ldr	r3, [pc, #160]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e6c:	4a26      	ldr	r2, [pc, #152]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002e6e:	f043 0310 	orr.w	r3, r3, #16
 8002e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e76:	4b24      	ldr	r3, [pc, #144]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e84:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002e8c:	f043 0308 	orr.w	r3, r3, #8
 8002e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e94:	4b1c      	ldr	r3, [pc, #112]	@ (8002f08 <HAL_UART_MspInit+0x32c>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002eba:	2308      	movs	r3, #8
 8002ebc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ec0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4815      	ldr	r0, [pc, #84]	@ (8002f1c <HAL_UART_MspInit+0x340>)
 8002ec8:	f002 f852 	bl	8004f70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8002ecc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ed0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eec:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4807      	ldr	r0, [pc, #28]	@ (8002f10 <HAL_UART_MspInit+0x334>)
 8002ef4:	f002 f83c 	bl	8004f70 <HAL_GPIO_Init>
}
 8002ef8:	bf00      	nop
 8002efa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40004c00 	.word	0x40004c00
 8002f08:	58024400 	.word	0x58024400
 8002f0c:	58020400 	.word	0x58020400
 8002f10:	58020c00 	.word	0x58020c00
 8002f14:	40005000 	.word	0x40005000
 8002f18:	40007800 	.word	0x40007800
 8002f1c:	58021000 	.word	0x58021000
 8002f20:	40007c00 	.word	0x40007c00

08002f24 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b0bc      	sub	sp, #240	@ 0xf0
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f3c:	f107 0320 	add.w	r3, r7, #32
 8002f40:	22b8      	movs	r2, #184	@ 0xb8
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f00b fe70 	bl	800ec2a <memset>
  if(husart->Instance==USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a73      	ldr	r2, [pc, #460]	@ (800311c <HAL_USART_MspInit+0x1f8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d147      	bne.n	8002fe4 <HAL_USART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f54:	f04f 0201 	mov.w	r2, #1
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f66:	f107 0320 	add.w	r3, r7, #32
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 fa96 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8002f76:	f7ff f853 	bl	8002020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f7a:	4b69      	ldr	r3, [pc, #420]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 8002f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f80:	4a67      	ldr	r2, [pc, #412]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 8002f82:	f043 0310 	orr.w	r3, r3, #16
 8002f86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f8a:	4b65      	ldr	r3, [pc, #404]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 8002f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f98:	4b61      	ldr	r3, [pc, #388]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 8002f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f9e:	4a60      	ldr	r2, [pc, #384]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fa8:	4b5d      	ldr	r3, [pc, #372]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 8002faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 8002fb6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002fba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fd0:	2307      	movs	r3, #7
 8002fd2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4851      	ldr	r0, [pc, #324]	@ (8003124 <HAL_USART_MspInit+0x200>)
 8002fde:	f001 ffc7 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002fe2:	e097      	b.n	8003114 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8003128 <HAL_USART_MspInit+0x204>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d146      	bne.n	800307c <HAL_USART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fee:	f04f 0202 	mov.w	r2, #2
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003000:	f107 0320 	add.w	r3, r7, #32
 8003004:	4618      	mov	r0, r3
 8003006:	f003 fa49 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_USART_MspInit+0xf0>
      Error_Handler();
 8003010:	f7ff f806 	bl	8002020 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003014:	4b42      	ldr	r3, [pc, #264]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 8003016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800301a:	4a41      	ldr	r2, [pc, #260]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 800301c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003020:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003024:	4b3e      	ldr	r3, [pc, #248]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 8003026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800302a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003032:	4b3b      	ldr	r3, [pc, #236]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 8003034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003038:	4a39      	ldr	r2, [pc, #228]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 800303a:	f043 0308 	orr.w	r3, r3, #8
 800303e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003042:	4b37      	ldr	r3, [pc, #220]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 8003044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
 8003050:	23e8      	movs	r3, #232	@ 0xe8
 8003052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003056:	2302      	movs	r3, #2
 8003058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003068:	2307      	movs	r3, #7
 800306a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003072:	4619      	mov	r1, r3
 8003074:	482d      	ldr	r0, [pc, #180]	@ (800312c <HAL_USART_MspInit+0x208>)
 8003076:	f001 ff7b 	bl	8004f70 <HAL_GPIO_Init>
}
 800307a:	e04b      	b.n	8003114 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART3)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2b      	ldr	r2, [pc, #172]	@ (8003130 <HAL_USART_MspInit+0x20c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d146      	bne.n	8003114 <HAL_USART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003086:	f04f 0202 	mov.w	r2, #2
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003098:	f107 0320 	add.w	r3, r7, #32
 800309c:	4618      	mov	r0, r3
 800309e:	f003 f9fd 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_USART_MspInit+0x188>
      Error_Handler();
 80030a8:	f7fe ffba 	bl	8002020 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 80030ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 80030be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 80030cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030d0:	4a13      	ldr	r2, [pc, #76]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030da:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <HAL_USART_MspInit+0x1fc>)
 80030dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 80030e8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80030ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003102:	2307      	movs	r3, #7
 8003104:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003108:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800310c:	4619      	mov	r1, r3
 800310e:	4807      	ldr	r0, [pc, #28]	@ (800312c <HAL_USART_MspInit+0x208>)
 8003110:	f001 ff2e 	bl	8004f70 <HAL_GPIO_Init>
}
 8003114:	bf00      	nop
 8003116:	37f0      	adds	r7, #240	@ 0xf0
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40011000 	.word	0x40011000
 8003120:	58024400 	.word	0x58024400
 8003124:	58020000 	.word	0x58020000
 8003128:	40004400 	.word	0x40004400
 800312c:	58020c00 	.word	0x58020c00
 8003130:	40004800 	.word	0x40004800

08003134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <NMI_Handler+0x4>

0800313c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <HardFault_Handler+0x4>

08003144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <MemManage_Handler+0x4>

0800314c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <BusFault_Handler+0x4>

08003154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003158:	bf00      	nop
 800315a:	e7fd      	b.n	8003158 <UsageFault_Handler+0x4>

0800315c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800318a:	f000 f9dd 	bl	8003548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}

08003192 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
  return 1;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <_kill>:

int _kill(int pid, int sig)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031ac:	f00b fd90 	bl	800ecd0 <__errno>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2216      	movs	r2, #22
 80031b4:	601a      	str	r2, [r3, #0]
  return -1;
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <_exit>:

void _exit (int status)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031ca:	f04f 31ff 	mov.w	r1, #4294967295
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ffe7 	bl	80031a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <_exit+0x12>

080031d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e00a      	b.n	8003200 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031ea:	f3af 8000 	nop.w
 80031ee:	4601      	mov	r1, r0
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	60ba      	str	r2, [r7, #8]
 80031f6:	b2ca      	uxtb	r2, r1
 80031f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	3301      	adds	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	dbf0      	blt.n	80031ea <_read+0x12>
  }

  return len;
 8003208:	687b      	ldr	r3, [r7, #4]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e009      	b.n	8003238 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	60ba      	str	r2, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3301      	adds	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	dbf1      	blt.n	8003224 <_write+0x12>
  }
  return len;
 8003240:	687b      	ldr	r3, [r7, #4]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <_close>:

int _close(int file)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003272:	605a      	str	r2, [r3, #4]
  return 0;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <_isatty>:

int _isatty(int file)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032bc:	4a14      	ldr	r2, [pc, #80]	@ (8003310 <_sbrk+0x5c>)
 80032be:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <_sbrk+0x60>)
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c8:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <_sbrk+0x64>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d0:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <_sbrk+0x64>)
 80032d2:	4a12      	ldr	r2, [pc, #72]	@ (800331c <_sbrk+0x68>)
 80032d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032d6:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <_sbrk+0x64>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d207      	bcs.n	80032f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032e4:	f00b fcf4 	bl	800ecd0 <__errno>
 80032e8:	4603      	mov	r3, r0
 80032ea:	220c      	movs	r2, #12
 80032ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	e009      	b.n	8003308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032f4:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <_sbrk+0x64>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032fa:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <_sbrk+0x64>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	4a05      	ldr	r2, [pc, #20]	@ (8003318 <_sbrk+0x64>)
 8003304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	24050000 	.word	0x24050000
 8003314:	00000400 	.word	0x00000400
 8003318:	24000bb8 	.word	0x24000bb8
 800331c:	24000d10 	.word	0x24000d10

08003320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003324:	4b32      	ldr	r3, [pc, #200]	@ (80033f0 <SystemInit+0xd0>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332a:	4a31      	ldr	r2, [pc, #196]	@ (80033f0 <SystemInit+0xd0>)
 800332c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003334:	4b2f      	ldr	r3, [pc, #188]	@ (80033f4 <SystemInit+0xd4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	2b06      	cmp	r3, #6
 800333e:	d807      	bhi.n	8003350 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003340:	4b2c      	ldr	r3, [pc, #176]	@ (80033f4 <SystemInit+0xd4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f023 030f 	bic.w	r3, r3, #15
 8003348:	4a2a      	ldr	r2, [pc, #168]	@ (80033f4 <SystemInit+0xd4>)
 800334a:	f043 0307 	orr.w	r3, r3, #7
 800334e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003350:	4b29      	ldr	r3, [pc, #164]	@ (80033f8 <SystemInit+0xd8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a28      	ldr	r2, [pc, #160]	@ (80033f8 <SystemInit+0xd8>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800335c:	4b26      	ldr	r3, [pc, #152]	@ (80033f8 <SystemInit+0xd8>)
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003362:	4b25      	ldr	r3, [pc, #148]	@ (80033f8 <SystemInit+0xd8>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4924      	ldr	r1, [pc, #144]	@ (80033f8 <SystemInit+0xd8>)
 8003368:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <SystemInit+0xdc>)
 800336a:	4013      	ands	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800336e:	4b21      	ldr	r3, [pc, #132]	@ (80033f4 <SystemInit+0xd4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800337a:	4b1e      	ldr	r3, [pc, #120]	@ (80033f4 <SystemInit+0xd4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 030f 	bic.w	r3, r3, #15
 8003382:	4a1c      	ldr	r2, [pc, #112]	@ (80033f4 <SystemInit+0xd4>)
 8003384:	f043 0307 	orr.w	r3, r3, #7
 8003388:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800338a:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <SystemInit+0xd8>)
 800338c:	2200      	movs	r2, #0
 800338e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003390:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <SystemInit+0xd8>)
 8003392:	2200      	movs	r2, #0
 8003394:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003396:	4b18      	ldr	r3, [pc, #96]	@ (80033f8 <SystemInit+0xd8>)
 8003398:	2200      	movs	r2, #0
 800339a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800339c:	4b16      	ldr	r3, [pc, #88]	@ (80033f8 <SystemInit+0xd8>)
 800339e:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <SystemInit+0xe0>)
 80033a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80033a2:	4b15      	ldr	r3, [pc, #84]	@ (80033f8 <SystemInit+0xd8>)
 80033a4:	4a17      	ldr	r2, [pc, #92]	@ (8003404 <SystemInit+0xe4>)
 80033a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80033a8:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <SystemInit+0xd8>)
 80033aa:	4a17      	ldr	r2, [pc, #92]	@ (8003408 <SystemInit+0xe8>)
 80033ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80033ae:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <SystemInit+0xd8>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80033b4:	4b10      	ldr	r3, [pc, #64]	@ (80033f8 <SystemInit+0xd8>)
 80033b6:	4a14      	ldr	r2, [pc, #80]	@ (8003408 <SystemInit+0xe8>)
 80033b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80033ba:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <SystemInit+0xd8>)
 80033bc:	2200      	movs	r2, #0
 80033be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80033c0:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <SystemInit+0xd8>)
 80033c2:	4a11      	ldr	r2, [pc, #68]	@ (8003408 <SystemInit+0xe8>)
 80033c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80033c6:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <SystemInit+0xd8>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033cc:	4b0a      	ldr	r3, [pc, #40]	@ (80033f8 <SystemInit+0xd8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a09      	ldr	r2, [pc, #36]	@ (80033f8 <SystemInit+0xd8>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033d8:	4b07      	ldr	r3, [pc, #28]	@ (80033f8 <SystemInit+0xd8>)
 80033da:	2200      	movs	r2, #0
 80033dc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033de:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <SystemInit+0xec>)
 80033e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80033e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00
 80033f4:	52002000 	.word	0x52002000
 80033f8:	58024400 	.word	0x58024400
 80033fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003400:	02020200 	.word	0x02020200
 8003404:	01ff0000 	.word	0x01ff0000
 8003408:	01010280 	.word	0x01010280
 800340c:	52004000 	.word	0x52004000

08003410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003410:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003448 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003414:	f7ff ff84 	bl	8003320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003418:	480c      	ldr	r0, [pc, #48]	@ (800344c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800341a:	490d      	ldr	r1, [pc, #52]	@ (8003450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800341c:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800341e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003420:	e002      	b.n	8003428 <LoopCopyDataInit>

08003422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003426:	3304      	adds	r3, #4

08003428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800342a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800342c:	d3f9      	bcc.n	8003422 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003430:	4c0a      	ldr	r4, [pc, #40]	@ (800345c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003434:	e001      	b.n	800343a <LoopFillZerobss>

08003436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003438:	3204      	adds	r2, #4

0800343a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800343a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800343c:	d3fb      	bcc.n	8003436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800343e:	f00b fc4d 	bl	800ecdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003442:	f7fd fb29 	bl	8000a98 <main>
  bx  lr
 8003446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003448:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800344c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003450:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8003454:	080126f8 	.word	0x080126f8
  ldr r2, =_sbss
 8003458:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800345c:	24000d0c 	.word	0x24000d0c

08003460 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003460:	e7fe      	b.n	8003460 <ADC3_IRQHandler>
	...

08003464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800346a:	2003      	movs	r0, #3
 800346c:	f001 fcd6 	bl	8004e1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003470:	f002 fe3e 	bl	80060f0 <HAL_RCC_GetSysClockFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <HAL_Init+0x68>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	4913      	ldr	r1, [pc, #76]	@ (80034d0 <HAL_Init+0x6c>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800348e:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <HAL_Init+0x68>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	4a0e      	ldr	r2, [pc, #56]	@ (80034d0 <HAL_Init+0x6c>)
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	4a0b      	ldr	r2, [pc, #44]	@ (80034d4 <HAL_Init+0x70>)
 80034a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034a8:	4a0b      	ldr	r2, [pc, #44]	@ (80034d8 <HAL_Init+0x74>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ae:	200f      	movs	r0, #15
 80034b0:	f000 f814 	bl	80034dc <HAL_InitTick>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e002      	b.n	80034c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80034be:	f7fe fdb5 	bl	800202c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	58024400 	.word	0x58024400
 80034d0:	08012270 	.word	0x08012270
 80034d4:	24000004 	.word	0x24000004
 80034d8:	24000000 	.word	0x24000000

080034dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80034e4:	4b15      	ldr	r3, [pc, #84]	@ (800353c <HAL_InitTick+0x60>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e021      	b.n	8003534 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80034f0:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <HAL_InitTick+0x64>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_InitTick+0x60>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	4618      	mov	r0, r3
 8003508:	f001 fcad 	bl	8004e66 <HAL_SYSTICK_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e00e      	b.n	8003534 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b0f      	cmp	r3, #15
 800351a:	d80a      	bhi.n	8003532 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800351c:	2200      	movs	r2, #0
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	f001 fc85 	bl	8004e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003528:	4a06      	ldr	r2, [pc, #24]	@ (8003544 <HAL_InitTick+0x68>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e000      	b.n	8003534 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	2400000c 	.word	0x2400000c
 8003540:	24000000 	.word	0x24000000
 8003544:	24000008 	.word	0x24000008

08003548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_IncTick+0x20>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_IncTick+0x24>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4413      	add	r3, r2
 8003558:	4a04      	ldr	r2, [pc, #16]	@ (800356c <HAL_IncTick+0x24>)
 800355a:	6013      	str	r3, [r2, #0]
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	2400000c 	.word	0x2400000c
 800356c:	24000bbc 	.word	0x24000bbc

08003570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return uwTick;
 8003574:	4b03      	ldr	r3, [pc, #12]	@ (8003584 <HAL_GetTick+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	24000bbc 	.word	0x24000bbc

08003588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7ff ffee 	bl	8003570 <HAL_GetTick>
 8003594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d005      	beq.n	80035ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035a2:	4b0a      	ldr	r3, [pc, #40]	@ (80035cc <HAL_Delay+0x44>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ae:	bf00      	nop
 80035b0:	f7ff ffde 	bl	8003570 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d8f7      	bhi.n	80035b0 <HAL_Delay+0x28>
  {
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2400000c 	.word	0x2400000c

080035d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	609a      	str	r2, [r3, #8]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3360      	adds	r3, #96	@ 0x60
 800364a:	461a      	mov	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a10      	ldr	r2, [pc, #64]	@ (8003698 <LL_ADC_SetOffset+0x60>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d10b      	bne.n	8003674 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	4313      	orrs	r3, r2
 800366a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003672:	e00b      	b.n	800368c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	430b      	orrs	r3, r1
 8003686:	431a      	orrs	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	601a      	str	r2, [r3, #0]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	58026000 	.word	0x58026000

0800369c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3360      	adds	r3, #96	@ 0x60
 80036aa:	461a      	mov	r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	611a      	str	r2, [r3, #16]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a0c      	ldr	r2, [pc, #48]	@ (800373c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3360      	adds	r3, #96	@ 0x60
 8003714:	461a      	mov	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	431a      	orrs	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	601a      	str	r2, [r3, #0]
  }
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	58026000 	.word	0x58026000

08003740 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a0c      	ldr	r2, [pc, #48]	@ (8003780 <LL_ADC_SetOffsetSaturation+0x40>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d10e      	bne.n	8003772 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3360      	adds	r3, #96	@ 0x60
 8003758:	461a      	mov	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	431a      	orrs	r2, r3
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	58026000 	.word	0x58026000

08003784 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a0c      	ldr	r2, [pc, #48]	@ (80037c4 <LL_ADC_SetOffsetSign+0x40>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10e      	bne.n	80037b6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3360      	adds	r3, #96	@ 0x60
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	58026000 	.word	0x58026000

080037c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3360      	adds	r3, #96	@ 0x60
 80037d8:	461a      	mov	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003818 <LL_ADC_SetOffsetState+0x50>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d108      	bne.n	80037fc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80037fa:	e007      	b.n	800380c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	431a      	orrs	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	601a      	str	r2, [r3, #0]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	58026000 	.word	0x58026000

0800381c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3330      	adds	r3, #48	@ 0x30
 800382c:	461a      	mov	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	4413      	add	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	211f      	movs	r1, #31
 8003848:	fa01 f303 	lsl.w	r3, r1, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	401a      	ands	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0e9b      	lsrs	r3, r3, #26
 8003854:	f003 011f 	and.w	r1, r3, #31
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	431a      	orrs	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3314      	adds	r3, #20
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	0e5b      	lsrs	r3, r3, #25
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	4413      	add	r3, r2
 8003892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	0d1b      	lsrs	r3, r3, #20
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	2107      	movs	r1, #7
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	401a      	ands	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	0d1b      	lsrs	r3, r3, #20
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	fa01 f303 	lsl.w	r3, r1, r3
 80038b8:	431a      	orrs	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a1a      	ldr	r2, [pc, #104]	@ (8003944 <LL_ADC_SetChannelSingleDiff+0x78>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d115      	bne.n	800390c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038ec:	43db      	mvns	r3, r3
 80038ee:	401a      	ands	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f003 0318 	and.w	r3, r3, #24
 80038f6:	4914      	ldr	r1, [pc, #80]	@ (8003948 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80038f8:	40d9      	lsrs	r1, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	400b      	ands	r3, r1
 80038fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003902:	431a      	orrs	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800390a:	e014      	b.n	8003936 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003918:	43db      	mvns	r3, r3
 800391a:	401a      	ands	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f003 0318 	and.w	r3, r3, #24
 8003922:	4909      	ldr	r1, [pc, #36]	@ (8003948 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003924:	40d9      	lsrs	r1, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	400b      	ands	r3, r1
 800392a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800392e:	431a      	orrs	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	58026000 	.word	0x58026000
 8003948:	000fffff 	.word	0x000fffff

0800394c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	4b04      	ldr	r3, [pc, #16]	@ (800396c <LL_ADC_DisableDeepPowerDown+0x20>)
 800395a:	4013      	ands	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6093      	str	r3, [r2, #8]
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	5fffffc0 	.word	0x5fffffc0

08003970 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003984:	d101      	bne.n	800398a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <LL_ADC_EnableInternalRegulator+0x24>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	6fffffc0 	.word	0x6fffffc0

080039c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039d4:	d101      	bne.n	80039da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <LL_ADC_IsEnabled+0x18>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <LL_ADC_IsEnabled+0x1a>
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d101      	bne.n	8003a26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d101      	bne.n	8003a4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b089      	sub	sp, #36	@ 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e1ee      	b.n	8003e54 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fe faeb 	bl	8002060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff67 	bl	8003970 <LL_ADC_IsDeepPowerDownEnabled>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff4d 	bl	800394c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff82 	bl	80039c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d114      	bne.n	8003aec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff66 	bl	8003998 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003acc:	4b8e      	ldr	r3, [pc, #568]	@ (8003d08 <HAL_ADC_Init+0x2ac>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	4a8e      	ldr	r2, [pc, #568]	@ (8003d0c <HAL_ADC_Init+0x2b0>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	3301      	adds	r3, #1
 8003adc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ade:	e002      	b.n	8003ae6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f9      	bne.n	8003ae0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff65 	bl	80039c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff76 	bl	8003a0e <LL_ADC_REG_IsConversionOngoing>
 8003b22:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 8188 	bne.w	8003e42 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 8184 	bne.w	8003e42 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b42:	f043 0202 	orr.w	r2, r3, #2
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ff4a 	bl	80039e8 <LL_ADC_IsEnabled>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d136      	bne.n	8003bc8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6c      	ldr	r2, [pc, #432]	@ (8003d10 <HAL_ADC_Init+0x2b4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_ADC_Init+0x112>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6a      	ldr	r2, [pc, #424]	@ (8003d14 <HAL_ADC_Init+0x2b8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10e      	bne.n	8003b8c <HAL_ADC_Init+0x130>
 8003b6e:	4868      	ldr	r0, [pc, #416]	@ (8003d10 <HAL_ADC_Init+0x2b4>)
 8003b70:	f7ff ff3a 	bl	80039e8 <LL_ADC_IsEnabled>
 8003b74:	4604      	mov	r4, r0
 8003b76:	4867      	ldr	r0, [pc, #412]	@ (8003d14 <HAL_ADC_Init+0x2b8>)
 8003b78:	f7ff ff36 	bl	80039e8 <LL_ADC_IsEnabled>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4323      	orrs	r3, r4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e008      	b.n	8003b9e <HAL_ADC_Init+0x142>
 8003b8c:	4862      	ldr	r0, [pc, #392]	@ (8003d18 <HAL_ADC_Init+0x2bc>)
 8003b8e:	f7ff ff2b 	bl	80039e8 <LL_ADC_IsEnabled>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d012      	beq.n	8003bc8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5a      	ldr	r2, [pc, #360]	@ (8003d10 <HAL_ADC_Init+0x2b4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_ADC_Init+0x15a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	@ (8003d14 <HAL_ADC_Init+0x2b8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_Init+0x15e>
 8003bb6:	4a59      	ldr	r2, [pc, #356]	@ (8003d1c <HAL_ADC_Init+0x2c0>)
 8003bb8:	e000      	b.n	8003bbc <HAL_ADC_Init+0x160>
 8003bba:	4a59      	ldr	r2, [pc, #356]	@ (8003d20 <HAL_ADC_Init+0x2c4>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f7ff fd04 	bl	80035d0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	@ (8003d18 <HAL_ADC_Init+0x2bc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d129      	bne.n	8003c26 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	7e5b      	ldrb	r3, [r3, #25]
 8003bd6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003bdc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003be2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d013      	beq.n	8003c14 <HAL_ADC_Init+0x1b8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	d00d      	beq.n	8003c10 <HAL_ADC_Init+0x1b4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b1c      	cmp	r3, #28
 8003bfa:	d007      	beq.n	8003c0c <HAL_ADC_Init+0x1b0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b18      	cmp	r3, #24
 8003c02:	d101      	bne.n	8003c08 <HAL_ADC_Init+0x1ac>
 8003c04:	2318      	movs	r3, #24
 8003c06:	e006      	b.n	8003c16 <HAL_ADC_Init+0x1ba>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e004      	b.n	8003c16 <HAL_ADC_Init+0x1ba>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	e002      	b.n	8003c16 <HAL_ADC_Init+0x1ba>
 8003c10:	2308      	movs	r3, #8
 8003c12:	e000      	b.n	8003c16 <HAL_ADC_Init+0x1ba>
 8003c14:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003c16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	e00e      	b.n	8003c44 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7e5b      	ldrb	r3, [r3, #25]
 8003c2a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c30:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003c36:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d106      	bne.n	8003c5c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	3b01      	subs	r3, #1
 8003c54:	045b      	lsls	r3, r3, #17
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d009      	beq.n	8003c78 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	@ (8003d18 <HAL_ADC_Init+0x2bc>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d115      	bne.n	8003cae <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	4b26      	ldr	r3, [pc, #152]	@ (8003d24 <HAL_ADC_Init+0x2c8>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	69b9      	ldr	r1, [r7, #24]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	611a      	str	r2, [r3, #16]
 8003cac:	e009      	b.n	8003cc2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d28 <HAL_ADC_Init+0x2cc>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fea1 	bl	8003a0e <LL_ADC_REG_IsConversionOngoing>
 8003ccc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff feae 	bl	8003a34 <LL_ADC_INJ_IsConversionOngoing>
 8003cd8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f040 808e 	bne.w	8003dfe <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f040 808a 	bne.w	8003dfe <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a0a      	ldr	r2, [pc, #40]	@ (8003d18 <HAL_ADC_Init+0x2bc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d11b      	bne.n	8003d2c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7e1b      	ldrb	r3, [r3, #24]
 8003cf8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d00:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e018      	b.n	8003d3a <HAL_ADC_Init+0x2de>
 8003d08:	24000000 	.word	0x24000000
 8003d0c:	053e2d63 	.word	0x053e2d63
 8003d10:	40022000 	.word	0x40022000
 8003d14:	40022100 	.word	0x40022100
 8003d18:	58026000 	.word	0x58026000
 8003d1c:	40022300 	.word	0x40022300
 8003d20:	58026300 	.word	0x58026300
 8003d24:	fff04007 	.word	0xfff04007
 8003d28:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7e1b      	ldrb	r3, [r3, #24]
 8003d30:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	4b46      	ldr	r3, [pc, #280]	@ (8003e5c <HAL_ADC_Init+0x400>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	69b9      	ldr	r1, [r7, #24]
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d137      	bne.n	8003dc8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3f      	ldr	r2, [pc, #252]	@ (8003e60 <HAL_ADC_Init+0x404>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d116      	bne.n	8003d96 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e64 <HAL_ADC_Init+0x408>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d80:	4311      	orrs	r1, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003d86:	430a      	orrs	r2, r1
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	611a      	str	r2, [r3, #16]
 8003d94:	e020      	b.n	8003dd8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	4b32      	ldr	r3, [pc, #200]	@ (8003e68 <HAL_ADC_Init+0x40c>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003da4:	3a01      	subs	r2, #1
 8003da6:	0411      	lsls	r1, r2, #16
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003dac:	4311      	orrs	r1, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003db2:	4311      	orrs	r1, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003db8:	430a      	orrs	r2, r1
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	611a      	str	r2, [r3, #16]
 8003dc6:	e007      	b.n	8003dd8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e60 <HAL_ADC_Init+0x404>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d002      	beq.n	8003dfe <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fd67 	bl	80048cc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d10c      	bne.n	8003e20 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0c:	f023 010f 	bic.w	r1, r3, #15
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	1e5a      	subs	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e1e:	e007      	b.n	8003e30 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 020f 	bic.w	r2, r2, #15
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e34:	f023 0303 	bic.w	r3, r3, #3
 8003e38:	f043 0201 	orr.w	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e40:	e007      	b.n	8003e52 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e46:	f043 0210 	orr.w	r2, r3, #16
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3724      	adds	r7, #36	@ 0x24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd90      	pop	{r4, r7, pc}
 8003e5c:	ffffbffc 	.word	0xffffbffc
 8003e60:	58026000 	.word	0x58026000
 8003e64:	fc00f81f 	.word	0xfc00f81f
 8003e68:	fc00f81e 	.word	0xfc00f81e

08003e6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b0b9      	sub	sp, #228	@ 0xe4
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e86:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4aab      	ldr	r2, [pc, #684]	@ (800413c <HAL_ADC_ConfigChannel+0x2d0>)
 8003e8e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d102      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x34>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	f000 bcfe 	b.w	800489c <HAL_ADC_ConfigChannel+0xa30>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fdae 	bl	8003a0e <LL_ADC_REG_IsConversionOngoing>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 84e2 	bne.w	800487e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	db38      	blt.n	8003f34 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a9e      	ldr	r2, [pc, #632]	@ (8004140 <HAL_ADC_ConfigChannel+0x2d4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d033      	beq.n	8003f34 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d108      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x7e>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	e01d      	b.n	8003f26 <HAL_ADC_ConfigChannel+0xba>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003efe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003f0e:	2320      	movs	r3, #32
 8003f10:	e004      	b.n	8003f1c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f16:	fab3 f383 	clz	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2201      	movs	r2, #1
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	69d1      	ldr	r1, [r2, #28]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f7ff fc6b 	bl	800381c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fd5f 	bl	8003a0e <LL_ADC_REG_IsConversionOngoing>
 8003f50:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fd6b 	bl	8003a34 <LL_ADC_INJ_IsConversionOngoing>
 8003f5e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f040 8270 	bne.w	800444c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f040 826b 	bne.w	800444c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f7ff fc76 	bl	8003874 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a6c      	ldr	r2, [pc, #432]	@ (8004140 <HAL_ADC_ConfigChannel+0x2d4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10d      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	08db      	lsrs	r3, r3, #3
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fac:	e032      	b.n	8004014 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003fae:	4b65      	ldr	r3, [pc, #404]	@ (8004144 <HAL_ADC_ConfigChannel+0x2d8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fba:	d10b      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x168>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	089b      	lsrs	r3, r3, #2
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	e01d      	b.n	8004010 <HAL_ADC_ConfigChannel+0x1a4>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x18e>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	089b      	lsrs	r3, r3, #2
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	e00a      	b.n	8004010 <HAL_ADC_ConfigChannel+0x1a4>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d048      	beq.n	80040ae <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6919      	ldr	r1, [r3, #16]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800402c:	f7ff fb04 	bl	8003638 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a42      	ldr	r2, [pc, #264]	@ (8004140 <HAL_ADC_ConfigChannel+0x2d4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d119      	bne.n	800406e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6919      	ldr	r1, [r3, #16]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	461a      	mov	r2, r3
 8004048:	f7ff fb9c 	bl	8003784 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6919      	ldr	r1, [r3, #16]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d102      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x1f8>
 800405e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004062:	e000      	b.n	8004066 <HAL_ADC_ConfigChannel+0x1fa>
 8004064:	2300      	movs	r3, #0
 8004066:	461a      	mov	r2, r3
 8004068:	f7ff fb6a 	bl	8003740 <LL_ADC_SetOffsetSaturation>
 800406c:	e1ee      	b.n	800444c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6919      	ldr	r1, [r3, #16]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800407c:	2b01      	cmp	r3, #1
 800407e:	d102      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x21a>
 8004080:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004084:	e000      	b.n	8004088 <HAL_ADC_ConfigChannel+0x21c>
 8004086:	2300      	movs	r3, #0
 8004088:	461a      	mov	r2, r3
 800408a:	f7ff fb37 	bl	80036fc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6919      	ldr	r1, [r3, #16]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	7e1b      	ldrb	r3, [r3, #24]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d102      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x238>
 800409e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80040a2:	e000      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x23a>
 80040a4:	2300      	movs	r3, #0
 80040a6:	461a      	mov	r2, r3
 80040a8:	f7ff fb0e 	bl	80036c8 <LL_ADC_SetDataRightShift>
 80040ac:	e1ce      	b.n	800444c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a23      	ldr	r2, [pc, #140]	@ (8004140 <HAL_ADC_ConfigChannel+0x2d4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	f040 8181 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff faeb 	bl	800369c <LL_ADC_GetOffsetChannel>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x27a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fae0 	bl	800369c <LL_ADC_GetOffsetChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	0e9b      	lsrs	r3, r3, #26
 80040e0:	f003 021f 	and.w	r2, r3, #31
 80040e4:	e01e      	b.n	8004124 <HAL_ADC_ConfigChannel+0x2b8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fad5 	bl	800369c <LL_ADC_GetOffsetChannel>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004104:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004108:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800410c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8004114:	2320      	movs	r3, #32
 8004116:	e004      	b.n	8004122 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8004118:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x2dc>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	e01e      	b.n	800417a <HAL_ADC_ConfigChannel+0x30e>
 800413c:	47ff0000 	.word	0x47ff0000
 8004140:	58026000 	.word	0x58026000
 8004144:	5c001000 	.word	0x5c001000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800415c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800416c:	2320      	movs	r3, #32
 800416e:	e004      	b.n	800417a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004170:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004174:	fab3 f383 	clz	r3, r3
 8004178:	b2db      	uxtb	r3, r3
 800417a:	429a      	cmp	r2, r3
 800417c:	d106      	bne.n	800418c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fb1e 	bl	80037c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fa82 	bl	800369c <LL_ADC_GetOffsetChannel>
 8004198:	4603      	mov	r3, r0
 800419a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x34c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fa77 	bl	800369c <LL_ADC_GetOffsetChannel>
 80041ae:	4603      	mov	r3, r0
 80041b0:	0e9b      	lsrs	r3, r3, #26
 80041b2:	f003 021f 	and.w	r2, r3, #31
 80041b6:	e01e      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x38a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fa6c 	bl	800369c <LL_ADC_GetOffsetChannel>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80041d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80041de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80041e6:	2320      	movs	r3, #32
 80041e8:	e004      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80041ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041ee:	fab3 f383 	clz	r3, r3
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <HAL_ADC_ConfigChannel+0x3a2>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	0e9b      	lsrs	r3, r3, #26
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	e018      	b.n	8004240 <HAL_ADC_ConfigChannel+0x3d4>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004222:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004226:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800422a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8004232:	2320      	movs	r3, #32
 8004234:	e004      	b.n	8004240 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8004236:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	429a      	cmp	r2, r3
 8004242:	d106      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2200      	movs	r2, #0
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fabb 	bl	80037c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2102      	movs	r1, #2
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fa1f 	bl	800369c <LL_ADC_GetOffsetChannel>
 800425e:	4603      	mov	r3, r0
 8004260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <HAL_ADC_ConfigChannel+0x412>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2102      	movs	r1, #2
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fa14 	bl	800369c <LL_ADC_GetOffsetChannel>
 8004274:	4603      	mov	r3, r0
 8004276:	0e9b      	lsrs	r3, r3, #26
 8004278:	f003 021f 	and.w	r2, r3, #31
 800427c:	e01e      	b.n	80042bc <HAL_ADC_ConfigChannel+0x450>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2102      	movs	r1, #2
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fa09 	bl	800369c <LL_ADC_GetOffsetChannel>
 800428a:	4603      	mov	r3, r0
 800428c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800429c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80042a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e004      	b.n	80042ba <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80042b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042b4:	fab3 f383 	clz	r3, r3
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x468>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0e9b      	lsrs	r3, r3, #26
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	e014      	b.n	80042fe <HAL_ADC_ConfigChannel+0x492>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80042e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80042e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80042f0:	2320      	movs	r3, #32
 80042f2:	e004      	b.n	80042fe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80042f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042f8:	fab3 f383 	clz	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	429a      	cmp	r2, r3
 8004300:	d106      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fa5c 	bl	80037c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2103      	movs	r1, #3
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff f9c0 	bl	800369c <LL_ADC_GetOffsetChannel>
 800431c:	4603      	mov	r3, r0
 800431e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <HAL_ADC_ConfigChannel+0x4d0>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2103      	movs	r1, #3
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff f9b5 	bl	800369c <LL_ADC_GetOffsetChannel>
 8004332:	4603      	mov	r3, r0
 8004334:	0e9b      	lsrs	r3, r3, #26
 8004336:	f003 021f 	and.w	r2, r3, #31
 800433a:	e017      	b.n	800436c <HAL_ADC_ConfigChannel+0x500>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2103      	movs	r1, #3
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff f9aa 	bl	800369c <LL_ADC_GetOffsetChannel>
 8004348:	4603      	mov	r3, r0
 800434a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004356:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004358:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800435e:	2320      	movs	r3, #32
 8004360:	e003      	b.n	800436a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004374:	2b00      	cmp	r3, #0
 8004376:	d105      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x518>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0e9b      	lsrs	r3, r3, #26
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	e011      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x53c>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004394:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800439c:	2320      	movs	r3, #32
 800439e:	e003      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80043a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043a2:	fab3 f383 	clz	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d14f      	bne.n	800444c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2103      	movs	r1, #3
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fa07 	bl	80037c8 <LL_ADC_SetOffsetState>
 80043ba:	e047      	b.n	800444c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	069b      	lsls	r3, r3, #26
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d107      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043de:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	069b      	lsls	r3, r3, #26
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d107      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004402:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800440a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	069b      	lsls	r3, r3, #26
 8004414:	429a      	cmp	r2, r3
 8004416:	d107      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004426:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800442e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	069b      	lsls	r3, r3, #26
 8004438:	429a      	cmp	r2, r3
 800443a:	d107      	bne.n	800444c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800444a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fac9 	bl	80039e8 <LL_ADC_IsEnabled>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	f040 8219 	bne.w	8004890 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6819      	ldr	r1, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	461a      	mov	r2, r3
 800446c:	f7ff fa2e 	bl	80038cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4aa1      	ldr	r2, [pc, #644]	@ (80046fc <HAL_ADC_ConfigChannel+0x890>)
 8004476:	4293      	cmp	r3, r2
 8004478:	f040 812e 	bne.w	80046d8 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x638>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0e9b      	lsrs	r3, r3, #26
 8004492:	3301      	adds	r3, #1
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2b09      	cmp	r3, #9
 800449a:	bf94      	ite	ls
 800449c:	2301      	movls	r3, #1
 800449e:	2300      	movhi	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e019      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x66c>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044ac:	fa93 f3a3 	rbit	r3, r3
 80044b0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80044b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80044b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80044bc:	2320      	movs	r3, #32
 80044be:	e003      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80044c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c2:	fab3 f383 	clz	r3, r3
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	3301      	adds	r3, #1
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	bf94      	ite	ls
 80044d2:	2301      	movls	r3, #1
 80044d4:	2300      	movhi	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d079      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d107      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x68c>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	3301      	adds	r3, #1
 80044f0:	069b      	lsls	r3, r3, #26
 80044f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044f6:	e015      	b.n	8004524 <HAL_ADC_ConfigChannel+0x6b8>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004500:	fa93 f3a3 	rbit	r3, r3
 8004504:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004508:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800450a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004510:	2320      	movs	r3, #32
 8004512:	e003      	b.n	800451c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	3301      	adds	r3, #1
 800451e:	069b      	lsls	r3, r3, #26
 8004520:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x6d8>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	0e9b      	lsrs	r3, r3, #26
 8004536:	3301      	adds	r3, #1
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	2101      	movs	r1, #1
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	e017      	b.n	8004574 <HAL_ADC_ConfigChannel+0x708>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004554:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800455c:	2320      	movs	r3, #32
 800455e:	e003      	b.n	8004568 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004562:	fab3 f383 	clz	r3, r3
 8004566:	b2db      	uxtb	r3, r3
 8004568:	3301      	adds	r3, #1
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2101      	movs	r1, #1
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	ea42 0103 	orr.w	r1, r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <HAL_ADC_ConfigChannel+0x72e>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0e9b      	lsrs	r3, r3, #26
 800458a:	3301      	adds	r3, #1
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	4613      	mov	r3, r2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	4413      	add	r3, r2
 8004596:	051b      	lsls	r3, r3, #20
 8004598:	e018      	b.n	80045cc <HAL_ADC_ConfigChannel+0x760>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80045ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80045b2:	2320      	movs	r3, #32
 80045b4:	e003      	b.n	80045be <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80045b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	f003 021f 	and.w	r2, r3, #31
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045cc:	430b      	orrs	r3, r1
 80045ce:	e07e      	b.n	80046ce <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d107      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x780>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	0e9b      	lsrs	r3, r3, #26
 80045e2:	3301      	adds	r3, #1
 80045e4:	069b      	lsls	r3, r3, #26
 80045e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045ea:	e015      	b.n	8004618 <HAL_ADC_ConfigChannel+0x7ac>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	fa93 f3a3 	rbit	r3, r3
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80045fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004604:	2320      	movs	r3, #32
 8004606:	e003      	b.n	8004610 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	3301      	adds	r3, #1
 8004612:	069b      	lsls	r3, r3, #26
 8004614:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x7cc>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	0e9b      	lsrs	r3, r3, #26
 800462a:	3301      	adds	r3, #1
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2101      	movs	r1, #1
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	e017      	b.n	8004668 <HAL_ADC_ConfigChannel+0x7fc>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	61bb      	str	r3, [r7, #24]
  return result;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004650:	2320      	movs	r3, #32
 8004652:	e003      	b.n	800465c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3301      	adds	r3, #1
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2101      	movs	r1, #1
 8004664:	fa01 f303 	lsl.w	r3, r1, r3
 8004668:	ea42 0103 	orr.w	r1, r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10d      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x828>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	0e9b      	lsrs	r3, r3, #26
 800467e:	3301      	adds	r3, #1
 8004680:	f003 021f 	and.w	r2, r3, #31
 8004684:	4613      	mov	r3, r2
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	4413      	add	r3, r2
 800468a:	3b1e      	subs	r3, #30
 800468c:	051b      	lsls	r3, r3, #20
 800468e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004692:	e01b      	b.n	80046cc <HAL_ADC_ConfigChannel+0x860>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	60fb      	str	r3, [r7, #12]
  return result;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80046ac:	2320      	movs	r3, #32
 80046ae:	e003      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	3301      	adds	r3, #1
 80046ba:	f003 021f 	and.w	r2, r3, #31
 80046be:	4613      	mov	r3, r2
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	4413      	add	r3, r2
 80046c4:	3b1e      	subs	r3, #30
 80046c6:	051b      	lsls	r3, r3, #20
 80046c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046cc:	430b      	orrs	r3, r1
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	6892      	ldr	r2, [r2, #8]
 80046d2:	4619      	mov	r1, r3
 80046d4:	f7ff f8ce 	bl	8003874 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f280 80d7 	bge.w	8004890 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a06      	ldr	r2, [pc, #24]	@ (8004700 <HAL_ADC_ConfigChannel+0x894>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_ADC_ConfigChannel+0x88a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a04      	ldr	r2, [pc, #16]	@ (8004704 <HAL_ADC_ConfigChannel+0x898>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10a      	bne.n	800470c <HAL_ADC_ConfigChannel+0x8a0>
 80046f6:	4b04      	ldr	r3, [pc, #16]	@ (8004708 <HAL_ADC_ConfigChannel+0x89c>)
 80046f8:	e009      	b.n	800470e <HAL_ADC_ConfigChannel+0x8a2>
 80046fa:	bf00      	nop
 80046fc:	47ff0000 	.word	0x47ff0000
 8004700:	40022000 	.word	0x40022000
 8004704:	40022100 	.word	0x40022100
 8004708:	40022300 	.word	0x40022300
 800470c:	4b65      	ldr	r3, [pc, #404]	@ (80048a4 <HAL_ADC_ConfigChannel+0xa38>)
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe ff84 	bl	800361c <LL_ADC_GetCommonPathInternalCh>
 8004714:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a62      	ldr	r2, [pc, #392]	@ (80048a8 <HAL_ADC_ConfigChannel+0xa3c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_ADC_ConfigChannel+0x8c0>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a61      	ldr	r2, [pc, #388]	@ (80048ac <HAL_ADC_ConfigChannel+0xa40>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10e      	bne.n	800474a <HAL_ADC_ConfigChannel+0x8de>
 800472c:	485e      	ldr	r0, [pc, #376]	@ (80048a8 <HAL_ADC_ConfigChannel+0xa3c>)
 800472e:	f7ff f95b 	bl	80039e8 <LL_ADC_IsEnabled>
 8004732:	4604      	mov	r4, r0
 8004734:	485d      	ldr	r0, [pc, #372]	@ (80048ac <HAL_ADC_ConfigChannel+0xa40>)
 8004736:	f7ff f957 	bl	80039e8 <LL_ADC_IsEnabled>
 800473a:	4603      	mov	r3, r0
 800473c:	4323      	orrs	r3, r4
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf0c      	ite	eq
 8004742:	2301      	moveq	r3, #1
 8004744:	2300      	movne	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e008      	b.n	800475c <HAL_ADC_ConfigChannel+0x8f0>
 800474a:	4859      	ldr	r0, [pc, #356]	@ (80048b0 <HAL_ADC_ConfigChannel+0xa44>)
 800474c:	f7ff f94c 	bl	80039e8 <LL_ADC_IsEnabled>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8084 	beq.w	800486a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a53      	ldr	r2, [pc, #332]	@ (80048b4 <HAL_ADC_ConfigChannel+0xa48>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d132      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x966>
 800476c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004770:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d12c      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a4c      	ldr	r2, [pc, #304]	@ (80048b0 <HAL_ADC_ConfigChannel+0xa44>)
 800477e:	4293      	cmp	r3, r2
 8004780:	f040 8086 	bne.w	8004890 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a47      	ldr	r2, [pc, #284]	@ (80048a8 <HAL_ADC_ConfigChannel+0xa3c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_ADC_ConfigChannel+0x92c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a46      	ldr	r2, [pc, #280]	@ (80048ac <HAL_ADC_ConfigChannel+0xa40>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d101      	bne.n	800479c <HAL_ADC_ConfigChannel+0x930>
 8004798:	4a47      	ldr	r2, [pc, #284]	@ (80048b8 <HAL_ADC_ConfigChannel+0xa4c>)
 800479a:	e000      	b.n	800479e <HAL_ADC_ConfigChannel+0x932>
 800479c:	4a41      	ldr	r2, [pc, #260]	@ (80048a4 <HAL_ADC_ConfigChannel+0xa38>)
 800479e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f7fe ff24 	bl	80035f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047ae:	4b43      	ldr	r3, [pc, #268]	@ (80048bc <HAL_ADC_ConfigChannel+0xa50>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	099b      	lsrs	r3, r3, #6
 80047b4:	4a42      	ldr	r2, [pc, #264]	@ (80048c0 <HAL_ADC_ConfigChannel+0xa54>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	3301      	adds	r3, #1
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80047c2:	e002      	b.n	80047ca <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f9      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047d0:	e05e      	b.n	8004890 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a3b      	ldr	r2, [pc, #236]	@ (80048c4 <HAL_ADC_ConfigChannel+0xa58>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d120      	bne.n	800481e <HAL_ADC_ConfigChannel+0x9b2>
 80047dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d11a      	bne.n	800481e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a30      	ldr	r2, [pc, #192]	@ (80048b0 <HAL_ADC_ConfigChannel+0xa44>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d14e      	bne.n	8004890 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2c      	ldr	r2, [pc, #176]	@ (80048a8 <HAL_ADC_ConfigChannel+0xa3c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_ADC_ConfigChannel+0x99a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a2a      	ldr	r2, [pc, #168]	@ (80048ac <HAL_ADC_ConfigChannel+0xa40>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_ADC_ConfigChannel+0x99e>
 8004806:	4a2c      	ldr	r2, [pc, #176]	@ (80048b8 <HAL_ADC_ConfigChannel+0xa4c>)
 8004808:	e000      	b.n	800480c <HAL_ADC_ConfigChannel+0x9a0>
 800480a:	4a26      	ldr	r2, [pc, #152]	@ (80048a4 <HAL_ADC_ConfigChannel+0xa38>)
 800480c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004810:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f7fe feed 	bl	80035f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800481c:	e038      	b.n	8004890 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a29      	ldr	r2, [pc, #164]	@ (80048c8 <HAL_ADC_ConfigChannel+0xa5c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d133      	bne.n	8004890 <HAL_ADC_ConfigChannel+0xa24>
 8004828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800482c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d12d      	bne.n	8004890 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1d      	ldr	r2, [pc, #116]	@ (80048b0 <HAL_ADC_ConfigChannel+0xa44>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d128      	bne.n	8004890 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a19      	ldr	r2, [pc, #100]	@ (80048a8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_ADC_ConfigChannel+0x9e6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a17      	ldr	r2, [pc, #92]	@ (80048ac <HAL_ADC_ConfigChannel+0xa40>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d101      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x9ea>
 8004852:	4a19      	ldr	r2, [pc, #100]	@ (80048b8 <HAL_ADC_ConfigChannel+0xa4c>)
 8004854:	e000      	b.n	8004858 <HAL_ADC_ConfigChannel+0x9ec>
 8004856:	4a13      	ldr	r2, [pc, #76]	@ (80048a4 <HAL_ADC_ConfigChannel+0xa38>)
 8004858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800485c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004860:	4619      	mov	r1, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f7fe fec7 	bl	80035f6 <LL_ADC_SetCommonPathInternalCh>
 8004868:	e012      	b.n	8004890 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800487c:	e008      	b.n	8004890 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004898:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800489c:	4618      	mov	r0, r3
 800489e:	37e4      	adds	r7, #228	@ 0xe4
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd90      	pop	{r4, r7, pc}
 80048a4:	58026300 	.word	0x58026300
 80048a8:	40022000 	.word	0x40022000
 80048ac:	40022100 	.word	0x40022100
 80048b0:	58026000 	.word	0x58026000
 80048b4:	c7520000 	.word	0xc7520000
 80048b8:	40022300 	.word	0x40022300
 80048bc:	24000000 	.word	0x24000000
 80048c0:	053e2d63 	.word	0x053e2d63
 80048c4:	c3210000 	.word	0xc3210000
 80048c8:	cb840000 	.word	0xcb840000

080048cc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a6c      	ldr	r2, [pc, #432]	@ (8004a8c <ADC_ConfigureBoostMode+0x1c0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <ADC_ConfigureBoostMode+0x1c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004a90 <ADC_ConfigureBoostMode+0x1c4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d109      	bne.n	80048fc <ADC_ConfigureBoostMode+0x30>
 80048e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a94 <ADC_ConfigureBoostMode+0x1c8>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf14      	ite	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	2300      	moveq	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	e008      	b.n	800490e <ADC_ConfigureBoostMode+0x42>
 80048fc:	4b66      	ldr	r3, [pc, #408]	@ (8004a98 <ADC_ConfigureBoostMode+0x1cc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01c      	beq.n	800494c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004912:	f001 fd67 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 8004916:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004920:	d010      	beq.n	8004944 <ADC_ConfigureBoostMode+0x78>
 8004922:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004926:	d873      	bhi.n	8004a10 <ADC_ConfigureBoostMode+0x144>
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492c:	d002      	beq.n	8004934 <ADC_ConfigureBoostMode+0x68>
 800492e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004932:	d16d      	bne.n	8004a10 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	60fb      	str	r3, [r7, #12]
        break;
 8004942:	e068      	b.n	8004a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	089b      	lsrs	r3, r3, #2
 8004948:	60fb      	str	r3, [r7, #12]
        break;
 800494a:	e064      	b.n	8004a16 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800494c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004950:	f04f 0100 	mov.w	r1, #0
 8004954:	f002 ff42 	bl	80077dc <HAL_RCCEx_GetPeriphCLKFreq>
 8004958:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004962:	d051      	beq.n	8004a08 <ADC_ConfigureBoostMode+0x13c>
 8004964:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004968:	d854      	bhi.n	8004a14 <ADC_ConfigureBoostMode+0x148>
 800496a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800496e:	d047      	beq.n	8004a00 <ADC_ConfigureBoostMode+0x134>
 8004970:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004974:	d84e      	bhi.n	8004a14 <ADC_ConfigureBoostMode+0x148>
 8004976:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800497a:	d03d      	beq.n	80049f8 <ADC_ConfigureBoostMode+0x12c>
 800497c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004980:	d848      	bhi.n	8004a14 <ADC_ConfigureBoostMode+0x148>
 8004982:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004986:	d033      	beq.n	80049f0 <ADC_ConfigureBoostMode+0x124>
 8004988:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800498c:	d842      	bhi.n	8004a14 <ADC_ConfigureBoostMode+0x148>
 800498e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004992:	d029      	beq.n	80049e8 <ADC_ConfigureBoostMode+0x11c>
 8004994:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004998:	d83c      	bhi.n	8004a14 <ADC_ConfigureBoostMode+0x148>
 800499a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800499e:	d01a      	beq.n	80049d6 <ADC_ConfigureBoostMode+0x10a>
 80049a0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80049a4:	d836      	bhi.n	8004a14 <ADC_ConfigureBoostMode+0x148>
 80049a6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80049aa:	d014      	beq.n	80049d6 <ADC_ConfigureBoostMode+0x10a>
 80049ac:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80049b0:	d830      	bhi.n	8004a14 <ADC_ConfigureBoostMode+0x148>
 80049b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b6:	d00e      	beq.n	80049d6 <ADC_ConfigureBoostMode+0x10a>
 80049b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049bc:	d82a      	bhi.n	8004a14 <ADC_ConfigureBoostMode+0x148>
 80049be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049c2:	d008      	beq.n	80049d6 <ADC_ConfigureBoostMode+0x10a>
 80049c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049c8:	d824      	bhi.n	8004a14 <ADC_ConfigureBoostMode+0x148>
 80049ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049ce:	d002      	beq.n	80049d6 <ADC_ConfigureBoostMode+0x10a>
 80049d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049d4:	d11e      	bne.n	8004a14 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	0c9b      	lsrs	r3, r3, #18
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	60fb      	str	r3, [r7, #12]
        break;
 80049e6:	e016      	b.n	8004a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	60fb      	str	r3, [r7, #12]
        break;
 80049ee:	e012      	b.n	8004a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	60fb      	str	r3, [r7, #12]
        break;
 80049f6:	e00e      	b.n	8004a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	60fb      	str	r3, [r7, #12]
        break;
 80049fe:	e00a      	b.n	8004a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	09db      	lsrs	r3, r3, #7
 8004a04:	60fb      	str	r3, [r7, #12]
        break;
 8004a06:	e006      	b.n	8004a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	60fb      	str	r3, [r7, #12]
        break;
 8004a0e:	e002      	b.n	8004a16 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a10:	bf00      	nop
 8004a12:	e000      	b.n	8004a16 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a14:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004a9c <ADC_ConfigureBoostMode+0x1d0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d808      	bhi.n	8004a36 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a32:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a34:	e025      	b.n	8004a82 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a19      	ldr	r2, [pc, #100]	@ (8004aa0 <ADC_ConfigureBoostMode+0x1d4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d80a      	bhi.n	8004a54 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a50:	609a      	str	r2, [r3, #8]
}
 8004a52:	e016      	b.n	8004a82 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4a13      	ldr	r2, [pc, #76]	@ (8004aa4 <ADC_ConfigureBoostMode+0x1d8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d80a      	bhi.n	8004a72 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a6e:	609a      	str	r2, [r3, #8]
}
 8004a70:	e007      	b.n	8004a82 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004a80:	609a      	str	r2, [r3, #8]
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40022000 	.word	0x40022000
 8004a90:	40022100 	.word	0x40022100
 8004a94:	40022300 	.word	0x40022300
 8004a98:	58026300 	.word	0x58026300
 8004a9c:	005f5e10 	.word	0x005f5e10
 8004aa0:	00bebc20 	.word	0x00bebc20
 8004aa4:	017d7840 	.word	0x017d7840

08004aa8 <LL_ADC_IsEnabled>:
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <LL_ADC_IsEnabled+0x18>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <LL_ADC_IsEnabled+0x1a>
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <LL_ADC_REG_IsConversionOngoing>:
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d101      	bne.n	8004ae6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b0a3      	sub	sp, #140	@ 0x8c
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0c1      	b.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a5e      	ldr	r2, [pc, #376]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d102      	bne.n	8004b32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b2c:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e001      	b.n	8004b36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10b      	bne.n	8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b40:	f043 0220 	orr.w	r2, r3, #32
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0a0      	b.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ffb9 	bl	8004ace <LL_ADC_REG_IsConversionOngoing>
 8004b5c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff ffb2 	bl	8004ace <LL_ADC_REG_IsConversionOngoing>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f040 8081 	bne.w	8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d17c      	bne.n	8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a48      	ldr	r2, [pc, #288]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a46      	ldr	r2, [pc, #280]	@ (8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004b8e:	4b46      	ldr	r3, [pc, #280]	@ (8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004b90:	e000      	b.n	8004b94 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004b92:	4b46      	ldr	r3, [pc, #280]	@ (8004cac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004b94:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d039      	beq.n	8004c12 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a39      	ldr	r2, [pc, #228]	@ (8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d10e      	bne.n	8004be2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004bc4:	4836      	ldr	r0, [pc, #216]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bc6:	f7ff ff6f 	bl	8004aa8 <LL_ADC_IsEnabled>
 8004bca:	4604      	mov	r4, r0
 8004bcc:	4835      	ldr	r0, [pc, #212]	@ (8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bce:	f7ff ff6b 	bl	8004aa8 <LL_ADC_IsEnabled>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4323      	orrs	r3, r4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bf0c      	ite	eq
 8004bda:	2301      	moveq	r3, #1
 8004bdc:	2300      	movne	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	e008      	b.n	8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004be2:	4833      	ldr	r0, [pc, #204]	@ (8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004be4:	f7ff ff60 	bl	8004aa8 <LL_ADC_IsEnabled>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bf0c      	ite	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d047      	beq.n	8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004bf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	6811      	ldr	r1, [r2, #0]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	6892      	ldr	r2, [r2, #8]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c0e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c10:	e03a      	b.n	8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004c12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d10e      	bne.n	8004c50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004c32:	481b      	ldr	r0, [pc, #108]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c34:	f7ff ff38 	bl	8004aa8 <LL_ADC_IsEnabled>
 8004c38:	4604      	mov	r4, r0
 8004c3a:	481a      	ldr	r0, [pc, #104]	@ (8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c3c:	f7ff ff34 	bl	8004aa8 <LL_ADC_IsEnabled>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4323      	orrs	r3, r4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e008      	b.n	8004c62 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004c50:	4817      	ldr	r0, [pc, #92]	@ (8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004c52:	f7ff ff29 	bl	8004aa8 <LL_ADC_IsEnabled>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d010      	beq.n	8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	4b12      	ldr	r3, [pc, #72]	@ (8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004c70:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c72:	e009      	b.n	8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004c86:	e000      	b.n	8004c8a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004c92:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	378c      	adds	r7, #140	@ 0x8c
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd90      	pop	{r4, r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40022000 	.word	0x40022000
 8004ca4:	40022100 	.word	0x40022100
 8004ca8:	40022300 	.word	0x40022300
 8004cac:	58026300 	.word	0x58026300
 8004cb0:	58026000 	.word	0x58026000
 8004cb4:	fffff0e0 	.word	0xfffff0e0

08004cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ce0:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <__NVIC_SetPriorityGrouping+0x44>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ce6:	4a04      	ldr	r2, [pc, #16]	@ (8004cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	60d3      	str	r3, [r2, #12]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000ed00 	.word	0xe000ed00
 8004cfc:	05fa0000 	.word	0x05fa0000

08004d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d04:	4b04      	ldr	r3, [pc, #16]	@ (8004d18 <__NVIC_GetPriorityGrouping+0x18>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	f003 0307 	and.w	r3, r3, #7
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000ed00 	.word	0xe000ed00

08004d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	6039      	str	r1, [r7, #0]
 8004d26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	db0a      	blt.n	8004d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	490c      	ldr	r1, [pc, #48]	@ (8004d68 <__NVIC_SetPriority+0x4c>)
 8004d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	440b      	add	r3, r1
 8004d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d44:	e00a      	b.n	8004d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	4908      	ldr	r1, [pc, #32]	@ (8004d6c <__NVIC_SetPriority+0x50>)
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	3b04      	subs	r3, #4
 8004d54:	0112      	lsls	r2, r2, #4
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	440b      	add	r3, r1
 8004d5a:	761a      	strb	r2, [r3, #24]
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000e100 	.word	0xe000e100
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b089      	sub	sp, #36	@ 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f1c3 0307 	rsb	r3, r3, #7
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	bf28      	it	cs
 8004d8e:	2304      	movcs	r3, #4
 8004d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3304      	adds	r3, #4
 8004d96:	2b06      	cmp	r3, #6
 8004d98:	d902      	bls.n	8004da0 <NVIC_EncodePriority+0x30>
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	3b03      	subs	r3, #3
 8004d9e:	e000      	b.n	8004da2 <NVIC_EncodePriority+0x32>
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da4:	f04f 32ff 	mov.w	r2, #4294967295
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43da      	mvns	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	401a      	ands	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004db8:	f04f 31ff 	mov.w	r1, #4294967295
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	43d9      	mvns	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc8:	4313      	orrs	r3, r2
         );
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3724      	adds	r7, #36	@ 0x24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004de8:	d301      	bcc.n	8004dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dea:	2301      	movs	r3, #1
 8004dec:	e00f      	b.n	8004e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dee:	4a0a      	ldr	r2, [pc, #40]	@ (8004e18 <SysTick_Config+0x40>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004df6:	210f      	movs	r1, #15
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	f7ff ff8e 	bl	8004d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e00:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <SysTick_Config+0x40>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e06:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <SysTick_Config+0x40>)
 8004e08:	2207      	movs	r2, #7
 8004e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	e000e010 	.word	0xe000e010

08004e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff47 	bl	8004cb8 <__NVIC_SetPriorityGrouping>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b086      	sub	sp, #24
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	4603      	mov	r3, r0
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e40:	f7ff ff5e 	bl	8004d00 <__NVIC_GetPriorityGrouping>
 8004e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f7ff ff90 	bl	8004d70 <NVIC_EncodePriority>
 8004e50:	4602      	mov	r2, r0
 8004e52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff ff5f 	bl	8004d1c <__NVIC_SetPriority>
}
 8004e5e:	bf00      	nop
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ffb2 	bl	8004dd8 <SysTick_Config>
 8004e74:	4603      	mov	r3, r0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004e84:	f3bf 8f5f 	dmb	sy
}
 8004e88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004e8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ea8 <HAL_MPU_Disable+0x28>)
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	4a06      	ldr	r2, [pc, #24]	@ (8004ea8 <HAL_MPU_Disable+0x28>)
 8004e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e94:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <HAL_MPU_Disable+0x2c>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	605a      	str	r2, [r3, #4]
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	e000ed00 	.word	0xe000ed00
 8004eac:	e000ed90 	.word	0xe000ed90

08004eb0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee8 <HAL_MPU_Enable+0x38>)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <HAL_MPU_Enable+0x3c>)
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	4a09      	ldr	r2, [pc, #36]	@ (8004eec <HAL_MPU_Enable+0x3c>)
 8004ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ecc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004ece:	f3bf 8f4f 	dsb	sy
}
 8004ed2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ed4:	f3bf 8f6f 	isb	sy
}
 8004ed8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	e000ed90 	.word	0xe000ed90
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	785a      	ldrb	r2, [r3, #1]
 8004efc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f6c <HAL_MPU_ConfigRegion+0x7c>)
 8004efe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004f00:	4b1a      	ldr	r3, [pc, #104]	@ (8004f6c <HAL_MPU_ConfigRegion+0x7c>)
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	4a19      	ldr	r2, [pc, #100]	@ (8004f6c <HAL_MPU_ConfigRegion+0x7c>)
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004f0c:	4a17      	ldr	r2, [pc, #92]	@ (8004f6c <HAL_MPU_ConfigRegion+0x7c>)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7b1b      	ldrb	r3, [r3, #12]
 8004f18:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	7adb      	ldrb	r3, [r3, #11]
 8004f1e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	7a9b      	ldrb	r3, [r3, #10]
 8004f26:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004f28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	7b5b      	ldrb	r3, [r3, #13]
 8004f2e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004f30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7b9b      	ldrb	r3, [r3, #14]
 8004f36:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004f38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	7bdb      	ldrb	r3, [r3, #15]
 8004f3e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004f40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	7a5b      	ldrb	r3, [r3, #9]
 8004f46:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004f48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	7a1b      	ldrb	r3, [r3, #8]
 8004f4e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004f50:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f58:	4a04      	ldr	r2, [pc, #16]	@ (8004f6c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004f5a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f5c:	6113      	str	r3, [r2, #16]
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	e000ed90 	.word	0xe000ed90

08004f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	@ 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f7e:	4b86      	ldr	r3, [pc, #536]	@ (8005198 <HAL_GPIO_Init+0x228>)
 8004f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f82:	e18c      	b.n	800529e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	4013      	ands	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 817e 	beq.w	8005298 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d005      	beq.n	8004fb4 <HAL_GPIO_Init+0x44>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d130      	bne.n	8005016 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fea:	2201      	movs	r2, #1
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	f003 0201 	and.w	r2, r3, #1
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b03      	cmp	r3, #3
 8005020:	d017      	beq.n	8005052 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	2203      	movs	r2, #3
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4313      	orrs	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d123      	bne.n	80050a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	08da      	lsrs	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3208      	adds	r2, #8
 8005066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800506a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	220f      	movs	r2, #15
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43db      	mvns	r3, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4013      	ands	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	08da      	lsrs	r2, r3, #3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3208      	adds	r2, #8
 80050a0:	69b9      	ldr	r1, [r7, #24]
 80050a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	2203      	movs	r2, #3
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4013      	ands	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0203 	and.w	r2, r3, #3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 80d8 	beq.w	8005298 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e8:	4b2c      	ldr	r3, [pc, #176]	@ (800519c <HAL_GPIO_Init+0x22c>)
 80050ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050ee:	4a2b      	ldr	r2, [pc, #172]	@ (800519c <HAL_GPIO_Init+0x22c>)
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80050f8:	4b28      	ldr	r3, [pc, #160]	@ (800519c <HAL_GPIO_Init+0x22c>)
 80050fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005106:	4a26      	ldr	r2, [pc, #152]	@ (80051a0 <HAL_GPIO_Init+0x230>)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	089b      	lsrs	r3, r3, #2
 800510c:	3302      	adds	r3, #2
 800510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	220f      	movs	r2, #15
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43db      	mvns	r3, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	4013      	ands	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1d      	ldr	r2, [pc, #116]	@ (80051a4 <HAL_GPIO_Init+0x234>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d04a      	beq.n	80051c8 <HAL_GPIO_Init+0x258>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1c      	ldr	r2, [pc, #112]	@ (80051a8 <HAL_GPIO_Init+0x238>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d02b      	beq.n	8005192 <HAL_GPIO_Init+0x222>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1b      	ldr	r2, [pc, #108]	@ (80051ac <HAL_GPIO_Init+0x23c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d025      	beq.n	800518e <HAL_GPIO_Init+0x21e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1a      	ldr	r2, [pc, #104]	@ (80051b0 <HAL_GPIO_Init+0x240>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01f      	beq.n	800518a <HAL_GPIO_Init+0x21a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a19      	ldr	r2, [pc, #100]	@ (80051b4 <HAL_GPIO_Init+0x244>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d019      	beq.n	8005186 <HAL_GPIO_Init+0x216>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a18      	ldr	r2, [pc, #96]	@ (80051b8 <HAL_GPIO_Init+0x248>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <HAL_GPIO_Init+0x212>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a17      	ldr	r2, [pc, #92]	@ (80051bc <HAL_GPIO_Init+0x24c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00d      	beq.n	800517e <HAL_GPIO_Init+0x20e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a16      	ldr	r2, [pc, #88]	@ (80051c0 <HAL_GPIO_Init+0x250>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d007      	beq.n	800517a <HAL_GPIO_Init+0x20a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <HAL_GPIO_Init+0x254>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d101      	bne.n	8005176 <HAL_GPIO_Init+0x206>
 8005172:	2309      	movs	r3, #9
 8005174:	e029      	b.n	80051ca <HAL_GPIO_Init+0x25a>
 8005176:	230a      	movs	r3, #10
 8005178:	e027      	b.n	80051ca <HAL_GPIO_Init+0x25a>
 800517a:	2307      	movs	r3, #7
 800517c:	e025      	b.n	80051ca <HAL_GPIO_Init+0x25a>
 800517e:	2306      	movs	r3, #6
 8005180:	e023      	b.n	80051ca <HAL_GPIO_Init+0x25a>
 8005182:	2305      	movs	r3, #5
 8005184:	e021      	b.n	80051ca <HAL_GPIO_Init+0x25a>
 8005186:	2304      	movs	r3, #4
 8005188:	e01f      	b.n	80051ca <HAL_GPIO_Init+0x25a>
 800518a:	2303      	movs	r3, #3
 800518c:	e01d      	b.n	80051ca <HAL_GPIO_Init+0x25a>
 800518e:	2302      	movs	r3, #2
 8005190:	e01b      	b.n	80051ca <HAL_GPIO_Init+0x25a>
 8005192:	2301      	movs	r3, #1
 8005194:	e019      	b.n	80051ca <HAL_GPIO_Init+0x25a>
 8005196:	bf00      	nop
 8005198:	58000080 	.word	0x58000080
 800519c:	58024400 	.word	0x58024400
 80051a0:	58000400 	.word	0x58000400
 80051a4:	58020000 	.word	0x58020000
 80051a8:	58020400 	.word	0x58020400
 80051ac:	58020800 	.word	0x58020800
 80051b0:	58020c00 	.word	0x58020c00
 80051b4:	58021000 	.word	0x58021000
 80051b8:	58021400 	.word	0x58021400
 80051bc:	58021800 	.word	0x58021800
 80051c0:	58021c00 	.word	0x58021c00
 80051c4:	58022400 	.word	0x58022400
 80051c8:	2300      	movs	r3, #0
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	f002 0203 	and.w	r2, r2, #3
 80051d0:	0092      	lsls	r2, r2, #2
 80051d2:	4093      	lsls	r3, r2
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051da:	4938      	ldr	r1, [pc, #224]	@ (80052bc <HAL_GPIO_Init+0x34c>)
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	089b      	lsrs	r3, r3, #2
 80051e0:	3302      	adds	r3, #2
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	43db      	mvns	r3, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800520e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800523c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	43db      	mvns	r3, r3
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	4013      	ands	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	43db      	mvns	r3, r3
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	4013      	ands	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	3301      	adds	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f47f ae6b 	bne.w	8004f84 <HAL_GPIO_Init+0x14>
  }
}
 80052ae:	bf00      	nop
 80052b0:	bf00      	nop
 80052b2:	3724      	adds	r7, #36	@ 0x24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	58000400 	.word	0x58000400

080052c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	807b      	strh	r3, [r7, #2]
 80052cc:	4613      	mov	r3, r2
 80052ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052d0:	787b      	ldrb	r3, [r7, #1]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052d6:	887a      	ldrh	r2, [r7, #2]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052dc:	e003      	b.n	80052e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052de:	887b      	ldrh	r3, [r7, #2]
 80052e0:	041a      	lsls	r2, r3, #16
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	619a      	str	r2, [r3, #24]
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e08b      	b.n	800541e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fc ff2e 	bl	800217c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2224      	movs	r2, #36	@ 0x24
 8005324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005344:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005354:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d107      	bne.n	800536e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	e006      	b.n	800537c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800537a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d108      	bne.n	8005396 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005392:	605a      	str	r2, [r3, #4]
 8005394:	e007      	b.n	80053a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6859      	ldr	r1, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005428 <HAL_I2C_Init+0x134>)
 80053b2:	430b      	orrs	r3, r1
 80053b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69d9      	ldr	r1, [r3, #28]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1a      	ldr	r2, [r3, #32]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	02008000 	.word	0x02008000

0800542c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b20      	cmp	r3, #32
 8005440:	d138      	bne.n	80054b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800544c:	2302      	movs	r3, #2
 800544e:	e032      	b.n	80054b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2224      	movs	r2, #36	@ 0x24
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0201 	bic.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800547e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6819      	ldr	r1, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e000      	b.n	80054b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054b4:	2302      	movs	r3, #2
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d139      	bne.n	800554c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e033      	b.n	800554e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2224      	movs	r2, #36	@ 0x24
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005514:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	e000      	b.n	800554e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005564:	4b19      	ldr	r3, [pc, #100]	@ (80055cc <HAL_PWREx_ConfigSupply+0x70>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b04      	cmp	r3, #4
 800556e:	d00a      	beq.n	8005586 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005570:	4b16      	ldr	r3, [pc, #88]	@ (80055cc <HAL_PWREx_ConfigSupply+0x70>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d001      	beq.n	8005582 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e01f      	b.n	80055c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e01d      	b.n	80055c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005586:	4b11      	ldr	r3, [pc, #68]	@ (80055cc <HAL_PWREx_ConfigSupply+0x70>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f023 0207 	bic.w	r2, r3, #7
 800558e:	490f      	ldr	r1, [pc, #60]	@ (80055cc <HAL_PWREx_ConfigSupply+0x70>)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4313      	orrs	r3, r2
 8005594:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005596:	f7fd ffeb 	bl	8003570 <HAL_GetTick>
 800559a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800559c:	e009      	b.n	80055b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800559e:	f7fd ffe7 	bl	8003570 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055ac:	d901      	bls.n	80055b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e007      	b.n	80055c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055b2:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <HAL_PWREx_ConfigSupply+0x70>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055be:	d1ee      	bne.n	800559e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	58024800 	.word	0x58024800

080055d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08c      	sub	sp, #48	@ 0x30
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e3c8      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8087 	beq.w	80056fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f0:	4b88      	ldr	r3, [pc, #544]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055fa:	4b86      	ldr	r3, [pc, #536]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80055fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005602:	2b10      	cmp	r3, #16
 8005604:	d007      	beq.n	8005616 <HAL_RCC_OscConfig+0x46>
 8005606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005608:	2b18      	cmp	r3, #24
 800560a:	d110      	bne.n	800562e <HAL_RCC_OscConfig+0x5e>
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d10b      	bne.n	800562e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005616:	4b7f      	ldr	r3, [pc, #508]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d06c      	beq.n	80056fc <HAL_RCC_OscConfig+0x12c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d168      	bne.n	80056fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e3a2      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005636:	d106      	bne.n	8005646 <HAL_RCC_OscConfig+0x76>
 8005638:	4b76      	ldr	r3, [pc, #472]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a75      	ldr	r2, [pc, #468]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 800563e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	e02e      	b.n	80056a4 <HAL_RCC_OscConfig+0xd4>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10c      	bne.n	8005668 <HAL_RCC_OscConfig+0x98>
 800564e:	4b71      	ldr	r3, [pc, #452]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a70      	ldr	r2, [pc, #448]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	4b6e      	ldr	r3, [pc, #440]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6d      	ldr	r2, [pc, #436]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005660:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e01d      	b.n	80056a4 <HAL_RCC_OscConfig+0xd4>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005670:	d10c      	bne.n	800568c <HAL_RCC_OscConfig+0xbc>
 8005672:	4b68      	ldr	r3, [pc, #416]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a67      	ldr	r2, [pc, #412]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	4b65      	ldr	r3, [pc, #404]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a64      	ldr	r2, [pc, #400]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	e00b      	b.n	80056a4 <HAL_RCC_OscConfig+0xd4>
 800568c:	4b61      	ldr	r3, [pc, #388]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a60      	ldr	r2, [pc, #384]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b5e      	ldr	r3, [pc, #376]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a5d      	ldr	r2, [pc, #372]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 800569e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d013      	beq.n	80056d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fd ff60 	bl	8003570 <HAL_GetTick>
 80056b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b4:	f7fd ff5c 	bl	8003570 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b64      	cmp	r3, #100	@ 0x64
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e356      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056c6:	4b53      	ldr	r3, [pc, #332]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0xe4>
 80056d2:	e014      	b.n	80056fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d4:	f7fd ff4c 	bl	8003570 <HAL_GetTick>
 80056d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056dc:	f7fd ff48 	bl	8003570 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b64      	cmp	r3, #100	@ 0x64
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e342      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056ee:	4b49      	ldr	r3, [pc, #292]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x10c>
 80056fa:	e000      	b.n	80056fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 808c 	beq.w	8005824 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800570c:	4b41      	ldr	r3, [pc, #260]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005714:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005716:	4b3f      	ldr	r3, [pc, #252]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <HAL_RCC_OscConfig+0x162>
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	2b18      	cmp	r3, #24
 8005726:	d137      	bne.n	8005798 <HAL_RCC_OscConfig+0x1c8>
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d132      	bne.n	8005798 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005732:	4b38      	ldr	r3, [pc, #224]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <HAL_RCC_OscConfig+0x17a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e314      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800574a:	4b32      	ldr	r3, [pc, #200]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f023 0219 	bic.w	r2, r3, #25
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	492f      	ldr	r1, [pc, #188]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005758:	4313      	orrs	r3, r2
 800575a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fd ff08 	bl	8003570 <HAL_GetTick>
 8005760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005764:	f7fd ff04 	bl	8003570 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e2fe      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005776:	4b27      	ldr	r3, [pc, #156]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005782:	4b24      	ldr	r3, [pc, #144]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	061b      	lsls	r3, r3, #24
 8005790:	4920      	ldr	r1, [pc, #128]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 8005792:	4313      	orrs	r3, r2
 8005794:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005796:	e045      	b.n	8005824 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d026      	beq.n	80057ee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f023 0219 	bic.w	r2, r3, #25
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4919      	ldr	r1, [pc, #100]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b2:	f7fd fedd 	bl	8003570 <HAL_GetTick>
 80057b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ba:	f7fd fed9 	bl	8003570 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e2d3      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057cc:	4b11      	ldr	r3, [pc, #68]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	061b      	lsls	r3, r3, #24
 80057e6:	490b      	ldr	r1, [pc, #44]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]
 80057ec:	e01a      	b.n	8005824 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ee:	4b09      	ldr	r3, [pc, #36]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a08      	ldr	r2, [pc, #32]	@ (8005814 <HAL_RCC_OscConfig+0x244>)
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fa:	f7fd feb9 	bl	8003570 <HAL_GetTick>
 80057fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005800:	e00a      	b.n	8005818 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005802:	f7fd feb5 	bl	8003570 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d903      	bls.n	8005818 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e2af      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
 8005814:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005818:	4b96      	ldr	r3, [pc, #600]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ee      	bne.n	8005802 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	d06a      	beq.n	8005906 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005830:	4b90      	ldr	r3, [pc, #576]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005838:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800583a:	4b8e      	ldr	r3, [pc, #568]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b08      	cmp	r3, #8
 8005844:	d007      	beq.n	8005856 <HAL_RCC_OscConfig+0x286>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b18      	cmp	r3, #24
 800584a:	d11b      	bne.n	8005884 <HAL_RCC_OscConfig+0x2b4>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	2b01      	cmp	r3, #1
 8005854:	d116      	bne.n	8005884 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005856:	4b87      	ldr	r3, [pc, #540]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_RCC_OscConfig+0x29e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	2b80      	cmp	r3, #128	@ 0x80
 8005868:	d001      	beq.n	800586e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e282      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800586e:	4b81      	ldr	r3, [pc, #516]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	497d      	ldr	r1, [pc, #500]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 800587e:	4313      	orrs	r3, r2
 8005880:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005882:	e040      	b.n	8005906 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d023      	beq.n	80058d4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800588c:	4b79      	ldr	r3, [pc, #484]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a78      	ldr	r2, [pc, #480]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd fe6a 	bl	8003570 <HAL_GetTick>
 800589c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80058a0:	f7fd fe66 	bl	8003570 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e260      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058b2:	4b70      	ldr	r3, [pc, #448]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f0      	beq.n	80058a0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058be:	4b6d      	ldr	r3, [pc, #436]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	4969      	ldr	r1, [pc, #420]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60cb      	str	r3, [r1, #12]
 80058d2:	e018      	b.n	8005906 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80058d4:	4b67      	ldr	r3, [pc, #412]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a66      	ldr	r2, [pc, #408]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 80058da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fd fe46 	bl	8003570 <HAL_GetTick>
 80058e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80058e8:	f7fd fe42 	bl	8003570 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e23c      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d036      	beq.n	8005980 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d019      	beq.n	800594e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800591a:	4b56      	ldr	r3, [pc, #344]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 800591c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800591e:	4a55      	ldr	r2, [pc, #340]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005926:	f7fd fe23 	bl	8003570 <HAL_GetTick>
 800592a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800592e:	f7fd fe1f 	bl	8003570 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e219      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005940:	4b4c      	ldr	r3, [pc, #304]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x35e>
 800594c:	e018      	b.n	8005980 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800594e:	4b49      	ldr	r3, [pc, #292]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005952:	4a48      	ldr	r2, [pc, #288]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595a:	f7fd fe09 	bl	8003570 <HAL_GetTick>
 800595e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005962:	f7fd fe05 	bl	8003570 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e1ff      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005974:	4b3f      	ldr	r3, [pc, #252]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f0      	bne.n	8005962 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d036      	beq.n	80059fa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d019      	beq.n	80059c8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005994:	4b37      	ldr	r3, [pc, #220]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a36      	ldr	r2, [pc, #216]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 800599a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800599e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059a0:	f7fd fde6 	bl	8003570 <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059a8:	f7fd fde2 	bl	8003570 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e1dc      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x3d8>
 80059c6:	e018      	b.n	80059fa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a29      	ldr	r2, [pc, #164]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 80059ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059d4:	f7fd fdcc 	bl	8003570 <HAL_GetTick>
 80059d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059dc:	f7fd fdc8 	bl	8003570 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e1c2      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059ee:	4b21      	ldr	r3, [pc, #132]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 8086 	beq.w	8005b14 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a08:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <HAL_RCC_OscConfig+0x4a8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a78 <HAL_RCC_OscConfig+0x4a8>)
 8005a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a14:	f7fd fdac 	bl	8003570 <HAL_GetTick>
 8005a18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a1c:	f7fd fda8 	bl	8003570 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b64      	cmp	r3, #100	@ 0x64
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e1a2      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a2e:	4b12      	ldr	r3, [pc, #72]	@ (8005a78 <HAL_RCC_OscConfig+0x4a8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d106      	bne.n	8005a50 <HAL_RCC_OscConfig+0x480>
 8005a42:	4b0c      	ldr	r3, [pc, #48]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a46:	4a0b      	ldr	r2, [pc, #44]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a4e:	e032      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d111      	bne.n	8005a7c <HAL_RCC_OscConfig+0x4ac>
 8005a58:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5c:	4a05      	ldr	r2, [pc, #20]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005a5e:	f023 0301 	bic.w	r3, r3, #1
 8005a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a64:	4b03      	ldr	r3, [pc, #12]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a68:	4a02      	ldr	r2, [pc, #8]	@ (8005a74 <HAL_RCC_OscConfig+0x4a4>)
 8005a6a:	f023 0304 	bic.w	r3, r3, #4
 8005a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a70:	e021      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e6>
 8005a72:	bf00      	nop
 8005a74:	58024400 	.word	0x58024400
 8005a78:	58024800 	.word	0x58024800
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b05      	cmp	r3, #5
 8005a82:	d10c      	bne.n	8005a9e <HAL_RCC_OscConfig+0x4ce>
 8005a84:	4b83      	ldr	r3, [pc, #524]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a88:	4a82      	ldr	r2, [pc, #520]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005a8a:	f043 0304 	orr.w	r3, r3, #4
 8005a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a90:	4b80      	ldr	r3, [pc, #512]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a94:	4a7f      	ldr	r2, [pc, #508]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a9c:	e00b      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e6>
 8005a9e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa2:	4a7c      	ldr	r2, [pc, #496]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aaa:	4b7a      	ldr	r3, [pc, #488]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aae:	4a79      	ldr	r2, [pc, #484]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005ab0:	f023 0304 	bic.w	r3, r3, #4
 8005ab4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d015      	beq.n	8005aea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abe:	f7fd fd57 	bl	8003570 <HAL_GetTick>
 8005ac2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ac4:	e00a      	b.n	8005adc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac6:	f7fd fd53 	bl	8003570 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e14b      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005adc:	4b6d      	ldr	r3, [pc, #436]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0ee      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x4f6>
 8005ae8:	e014      	b.n	8005b14 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aea:	f7fd fd41 	bl	8003570 <HAL_GetTick>
 8005aee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005af0:	e00a      	b.n	8005b08 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af2:	f7fd fd3d 	bl	8003570 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e135      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b08:	4b62      	ldr	r3, [pc, #392]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ee      	bne.n	8005af2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 812a 	beq.w	8005d72 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b26:	2b18      	cmp	r3, #24
 8005b28:	f000 80ba 	beq.w	8005ca0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	f040 8095 	bne.w	8005c60 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b36:	4b57      	ldr	r3, [pc, #348]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a56      	ldr	r2, [pc, #344]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005b3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b42:	f7fd fd15 	bl	8003570 <HAL_GetTick>
 8005b46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4a:	f7fd fd11 	bl	8003570 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e10b      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f0      	bne.n	8005b4a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b68:	4b4a      	ldr	r3, [pc, #296]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005b6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8005c98 <HAL_RCC_OscConfig+0x6c8>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b78:	0112      	lsls	r2, r2, #4
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	4945      	ldr	r1, [pc, #276]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	3b01      	subs	r3, #1
 8005b88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b90:	3b01      	subs	r3, #1
 8005b92:	025b      	lsls	r3, r3, #9
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005baa:	3b01      	subs	r3, #1
 8005bac:	061b      	lsls	r3, r3, #24
 8005bae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005bb2:	4938      	ldr	r1, [pc, #224]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005bb8:	4b36      	ldr	r3, [pc, #216]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	4a35      	ldr	r2, [pc, #212]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005bbe:	f023 0301 	bic.w	r3, r3, #1
 8005bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005bc4:	4b33      	ldr	r3, [pc, #204]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005bc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bc8:	4b34      	ldr	r3, [pc, #208]	@ (8005c9c <HAL_RCC_OscConfig+0x6cc>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005bd0:	00d2      	lsls	r2, r2, #3
 8005bd2:	4930      	ldr	r1, [pc, #192]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	f023 020c 	bic.w	r2, r3, #12
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be4:	492b      	ldr	r1, [pc, #172]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bea:	4b2a      	ldr	r3, [pc, #168]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	f023 0202 	bic.w	r2, r3, #2
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf6:	4927      	ldr	r1, [pc, #156]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bfc:	4b25      	ldr	r3, [pc, #148]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	4a24      	ldr	r2, [pc, #144]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c08:	4b22      	ldr	r3, [pc, #136]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0c:	4a21      	ldr	r2, [pc, #132]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c14:	4b1f      	ldr	r3, [pc, #124]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	4a1e      	ldr	r2, [pc, #120]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c20:	4b1c      	ldr	r3, [pc, #112]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c24:	4a1b      	ldr	r2, [pc, #108]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c2c:	4b19      	ldr	r3, [pc, #100]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a18      	ldr	r2, [pc, #96]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c38:	f7fd fc9a 	bl	8003570 <HAL_GetTick>
 8005c3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c40:	f7fd fc96 	bl	8003570 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e090      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c52:	4b10      	ldr	r3, [pc, #64]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCC_OscConfig+0x670>
 8005c5e:	e088      	b.n	8005d72 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c60:	4b0c      	ldr	r3, [pc, #48]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a0b      	ldr	r2, [pc, #44]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fd fc80 	bl	8003570 <HAL_GetTick>
 8005c70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c74:	f7fd fc7c 	bl	8003570 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e076      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c86:	4b03      	ldr	r3, [pc, #12]	@ (8005c94 <HAL_RCC_OscConfig+0x6c4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0x6a4>
 8005c92:	e06e      	b.n	8005d72 <HAL_RCC_OscConfig+0x7a2>
 8005c94:	58024400 	.word	0x58024400
 8005c98:	fffffc0c 	.word	0xfffffc0c
 8005c9c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ca0:	4b36      	ldr	r3, [pc, #216]	@ (8005d7c <HAL_RCC_OscConfig+0x7ac>)
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ca6:	4b35      	ldr	r3, [pc, #212]	@ (8005d7c <HAL_RCC_OscConfig+0x7ac>)
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005caa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d031      	beq.n	8005d18 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f003 0203 	and.w	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d12a      	bne.n	8005d18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d122      	bne.n	8005d18 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d11a      	bne.n	8005d18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	0a5b      	lsrs	r3, r3, #9
 8005ce6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d111      	bne.n	8005d18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	0c1b      	lsrs	r3, r3, #16
 8005cf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d108      	bne.n	8005d18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	0e1b      	lsrs	r3, r3, #24
 8005d0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d001      	beq.n	8005d1c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e02b      	b.n	8005d74 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005d1c:	4b17      	ldr	r3, [pc, #92]	@ (8005d7c <HAL_RCC_OscConfig+0x7ac>)
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d20:	08db      	lsrs	r3, r3, #3
 8005d22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d26:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d01f      	beq.n	8005d72 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005d32:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <HAL_RCC_OscConfig+0x7ac>)
 8005d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d36:	4a11      	ldr	r2, [pc, #68]	@ (8005d7c <HAL_RCC_OscConfig+0x7ac>)
 8005d38:	f023 0301 	bic.w	r3, r3, #1
 8005d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d3e:	f7fd fc17 	bl	8003570 <HAL_GetTick>
 8005d42:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005d44:	bf00      	nop
 8005d46:	f7fd fc13 	bl	8003570 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d0f9      	beq.n	8005d46 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d52:	4b0a      	ldr	r3, [pc, #40]	@ (8005d7c <HAL_RCC_OscConfig+0x7ac>)
 8005d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d56:	4b0a      	ldr	r3, [pc, #40]	@ (8005d80 <HAL_RCC_OscConfig+0x7b0>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d5e:	00d2      	lsls	r2, r2, #3
 8005d60:	4906      	ldr	r1, [pc, #24]	@ (8005d7c <HAL_RCC_OscConfig+0x7ac>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005d66:	4b05      	ldr	r3, [pc, #20]	@ (8005d7c <HAL_RCC_OscConfig+0x7ac>)
 8005d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6a:	4a04      	ldr	r2, [pc, #16]	@ (8005d7c <HAL_RCC_OscConfig+0x7ac>)
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3730      	adds	r7, #48	@ 0x30
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	58024400 	.word	0x58024400
 8005d80:	ffff0007 	.word	0xffff0007

08005d84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e19c      	b.n	80060d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d98:	4b8a      	ldr	r3, [pc, #552]	@ (8005fc4 <HAL_RCC_ClockConfig+0x240>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d910      	bls.n	8005dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da6:	4b87      	ldr	r3, [pc, #540]	@ (8005fc4 <HAL_RCC_ClockConfig+0x240>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f023 020f 	bic.w	r2, r3, #15
 8005dae:	4985      	ldr	r1, [pc, #532]	@ (8005fc4 <HAL_RCC_ClockConfig+0x240>)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db6:	4b83      	ldr	r3, [pc, #524]	@ (8005fc4 <HAL_RCC_ClockConfig+0x240>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d001      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e184      	b.n	80060d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d010      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	4b7b      	ldr	r3, [pc, #492]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d908      	bls.n	8005df6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005de4:	4b78      	ldr	r3, [pc, #480]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	4975      	ldr	r1, [pc, #468]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d010      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	4b70      	ldr	r3, [pc, #448]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d908      	bls.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e12:	4b6d      	ldr	r3, [pc, #436]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	496a      	ldr	r1, [pc, #424]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	4b64      	ldr	r3, [pc, #400]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d908      	bls.n	8005e52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e40:	4b61      	ldr	r3, [pc, #388]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	495e      	ldr	r1, [pc, #376]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d010      	beq.n	8005e80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69da      	ldr	r2, [r3, #28]
 8005e62:	4b59      	ldr	r3, [pc, #356]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d908      	bls.n	8005e80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e6e:	4b56      	ldr	r3, [pc, #344]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	4953      	ldr	r1, [pc, #332]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d010      	beq.n	8005eae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	4b4d      	ldr	r3, [pc, #308]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d908      	bls.n	8005eae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f023 020f 	bic.w	r2, r3, #15
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4947      	ldr	r1, [pc, #284]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d055      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005eba:	4b43      	ldr	r3, [pc, #268]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	4940      	ldr	r1, [pc, #256]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d107      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d121      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0f6      	b.n	80060d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d107      	bne.n	8005efc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eec:	4b36      	ldr	r3, [pc, #216]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d115      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0ea      	b.n	80060d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d107      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f04:	4b30      	ldr	r3, [pc, #192]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0de      	b.n	80060d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f14:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0d6      	b.n	80060d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f24:	4b28      	ldr	r3, [pc, #160]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f023 0207 	bic.w	r2, r3, #7
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	4925      	ldr	r1, [pc, #148]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f36:	f7fd fb1b 	bl	8003570 <HAL_GetTick>
 8005f3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f3e:	f7fd fb17 	bl	8003570 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e0be      	b.n	80060d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f54:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d1eb      	bne.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d010      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	4b14      	ldr	r3, [pc, #80]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d208      	bcs.n	8005f94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f82:	4b11      	ldr	r3, [pc, #68]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f023 020f 	bic.w	r2, r3, #15
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	490e      	ldr	r1, [pc, #56]	@ (8005fc8 <HAL_RCC_ClockConfig+0x244>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f94:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <HAL_RCC_ClockConfig+0x240>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d214      	bcs.n	8005fcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa2:	4b08      	ldr	r3, [pc, #32]	@ (8005fc4 <HAL_RCC_ClockConfig+0x240>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f023 020f 	bic.w	r2, r3, #15
 8005faa:	4906      	ldr	r1, [pc, #24]	@ (8005fc4 <HAL_RCC_ClockConfig+0x240>)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb2:	4b04      	ldr	r3, [pc, #16]	@ (8005fc4 <HAL_RCC_ClockConfig+0x240>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d005      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e086      	b.n	80060d2 <HAL_RCC_ClockConfig+0x34e>
 8005fc4:	52002000 	.word	0x52002000
 8005fc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d010      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d208      	bcs.n	8005ffa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fe8:	4b3c      	ldr	r3, [pc, #240]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	4939      	ldr	r1, [pc, #228]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d010      	beq.n	8006028 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	4b34      	ldr	r3, [pc, #208]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006012:	429a      	cmp	r2, r3
 8006014:	d208      	bcs.n	8006028 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006016:	4b31      	ldr	r3, [pc, #196]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	492e      	ldr	r1, [pc, #184]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 8006024:	4313      	orrs	r3, r2
 8006026:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699a      	ldr	r2, [r3, #24]
 8006038:	4b28      	ldr	r3, [pc, #160]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006040:	429a      	cmp	r2, r3
 8006042:	d208      	bcs.n	8006056 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006044:	4b25      	ldr	r3, [pc, #148]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	4922      	ldr	r1, [pc, #136]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 8006052:	4313      	orrs	r3, r2
 8006054:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d010      	beq.n	8006084 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69da      	ldr	r2, [r3, #28]
 8006066:	4b1d      	ldr	r3, [pc, #116]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800606e:	429a      	cmp	r2, r3
 8006070:	d208      	bcs.n	8006084 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006072:	4b1a      	ldr	r3, [pc, #104]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	4917      	ldr	r1, [pc, #92]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 8006080:	4313      	orrs	r3, r2
 8006082:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006084:	f000 f834 	bl	80060f0 <HAL_RCC_GetSysClockFreq>
 8006088:	4602      	mov	r2, r0
 800608a:	4b14      	ldr	r3, [pc, #80]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	4912      	ldr	r1, [pc, #72]	@ (80060e0 <HAL_RCC_ClockConfig+0x35c>)
 8006096:	5ccb      	ldrb	r3, [r1, r3]
 8006098:	f003 031f 	and.w	r3, r3, #31
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
 80060a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060a2:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <HAL_RCC_ClockConfig+0x358>)
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	4a0d      	ldr	r2, [pc, #52]	@ (80060e0 <HAL_RCC_ClockConfig+0x35c>)
 80060ac:	5cd3      	ldrb	r3, [r2, r3]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
 80060b8:	4a0a      	ldr	r2, [pc, #40]	@ (80060e4 <HAL_RCC_ClockConfig+0x360>)
 80060ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060bc:	4a0a      	ldr	r2, [pc, #40]	@ (80060e8 <HAL_RCC_ClockConfig+0x364>)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80060c2:	4b0a      	ldr	r3, [pc, #40]	@ (80060ec <HAL_RCC_ClockConfig+0x368>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fd fa08 	bl	80034dc <HAL_InitTick>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	58024400 	.word	0x58024400
 80060e0:	08012270 	.word	0x08012270
 80060e4:	24000004 	.word	0x24000004
 80060e8:	24000000 	.word	0x24000000
 80060ec:	24000008 	.word	0x24000008

080060f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b089      	sub	sp, #36	@ 0x24
 80060f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060f6:	4bb3      	ldr	r3, [pc, #716]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060fe:	2b18      	cmp	r3, #24
 8006100:	f200 8155 	bhi.w	80063ae <HAL_RCC_GetSysClockFreq+0x2be>
 8006104:	a201      	add	r2, pc, #4	@ (adr r2, 800610c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006171 	.word	0x08006171
 8006110:	080063af 	.word	0x080063af
 8006114:	080063af 	.word	0x080063af
 8006118:	080063af 	.word	0x080063af
 800611c:	080063af 	.word	0x080063af
 8006120:	080063af 	.word	0x080063af
 8006124:	080063af 	.word	0x080063af
 8006128:	080063af 	.word	0x080063af
 800612c:	08006197 	.word	0x08006197
 8006130:	080063af 	.word	0x080063af
 8006134:	080063af 	.word	0x080063af
 8006138:	080063af 	.word	0x080063af
 800613c:	080063af 	.word	0x080063af
 8006140:	080063af 	.word	0x080063af
 8006144:	080063af 	.word	0x080063af
 8006148:	080063af 	.word	0x080063af
 800614c:	0800619d 	.word	0x0800619d
 8006150:	080063af 	.word	0x080063af
 8006154:	080063af 	.word	0x080063af
 8006158:	080063af 	.word	0x080063af
 800615c:	080063af 	.word	0x080063af
 8006160:	080063af 	.word	0x080063af
 8006164:	080063af 	.word	0x080063af
 8006168:	080063af 	.word	0x080063af
 800616c:	080061a3 	.word	0x080061a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006170:	4b94      	ldr	r3, [pc, #592]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d009      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800617c:	4b91      	ldr	r3, [pc, #580]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	08db      	lsrs	r3, r3, #3
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	4a90      	ldr	r2, [pc, #576]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006188:	fa22 f303 	lsr.w	r3, r2, r3
 800618c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800618e:	e111      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006190:	4b8d      	ldr	r3, [pc, #564]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006192:	61bb      	str	r3, [r7, #24]
      break;
 8006194:	e10e      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006196:	4b8d      	ldr	r3, [pc, #564]	@ (80063cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006198:	61bb      	str	r3, [r7, #24]
      break;
 800619a:	e10b      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800619c:	4b8c      	ldr	r3, [pc, #560]	@ (80063d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800619e:	61bb      	str	r3, [r7, #24]
      break;
 80061a0:	e108      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061a2:	4b88      	ldr	r3, [pc, #544]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80061ac:	4b85      	ldr	r3, [pc, #532]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80061b8:	4b82      	ldr	r3, [pc, #520]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80061c2:	4b80      	ldr	r3, [pc, #512]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c6:	08db      	lsrs	r3, r3, #3
 80061c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	fb02 f303 	mul.w	r3, r2, r3
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 80e1 	beq.w	80063a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	f000 8083 	beq.w	80062f4 <HAL_RCC_GetSysClockFreq+0x204>
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	f200 80a1 	bhi.w	8006338 <HAL_RCC_GetSysClockFreq+0x248>
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_RCC_GetSysClockFreq+0x114>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d056      	beq.n	80062b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006202:	e099      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006204:	4b6f      	ldr	r3, [pc, #444]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	d02d      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006210:	4b6c      	ldr	r3, [pc, #432]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	08db      	lsrs	r3, r3, #3
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	4a6b      	ldr	r2, [pc, #428]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800621c:	fa22 f303 	lsr.w	r3, r2, r3
 8006220:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	ee07 3a90 	vmov	s15, r3
 8006228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800623a:	4b62      	ldr	r3, [pc, #392]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800624a:	ed97 6a02 	vldr	s12, [r7, #8]
 800624e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80063d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800625a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800625e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006266:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800626a:	e087      	b.n	800637c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006276:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80063d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800627a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627e:	4b51      	ldr	r3, [pc, #324]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006292:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80063d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062ae:	e065      	b.n	800637c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80063dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80062be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c2:	4b40      	ldr	r3, [pc, #256]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80063d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062f2:	e043      	b.n	800637c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80063e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006306:	4b2f      	ldr	r3, [pc, #188]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006316:	ed97 6a02 	vldr	s12, [r7, #8]
 800631a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80063d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800631e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800632a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006336:	e021      	b.n	800637c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80063dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634a:	4b1e      	ldr	r3, [pc, #120]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800634c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635a:	ed97 6a02 	vldr	s12, [r7, #8]
 800635e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80063d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800637a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800637c:	4b11      	ldr	r3, [pc, #68]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800637e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006380:	0a5b      	lsrs	r3, r3, #9
 8006382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006386:	3301      	adds	r3, #1
 8006388:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	ee07 3a90 	vmov	s15, r3
 8006390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006394:	edd7 6a07 	vldr	s13, [r7, #28]
 8006398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800639c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a0:	ee17 3a90 	vmov	r3, s15
 80063a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80063a6:	e005      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61bb      	str	r3, [r7, #24]
      break;
 80063ac:	e002      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80063ae:	4b07      	ldr	r3, [pc, #28]	@ (80063cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063b0:	61bb      	str	r3, [r7, #24]
      break;
 80063b2:	bf00      	nop
  }

  return sysclockfreq;
 80063b4:	69bb      	ldr	r3, [r7, #24]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3724      	adds	r7, #36	@ 0x24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	58024400 	.word	0x58024400
 80063c8:	03d09000 	.word	0x03d09000
 80063cc:	003d0900 	.word	0x003d0900
 80063d0:	02dc6c00 	.word	0x02dc6c00
 80063d4:	46000000 	.word	0x46000000
 80063d8:	4c742400 	.word	0x4c742400
 80063dc:	4a742400 	.word	0x4a742400
 80063e0:	4c371b00 	.word	0x4c371b00

080063e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80063ea:	f7ff fe81 	bl	80060f0 <HAL_RCC_GetSysClockFreq>
 80063ee:	4602      	mov	r2, r0
 80063f0:	4b10      	ldr	r3, [pc, #64]	@ (8006434 <HAL_RCC_GetHCLKFreq+0x50>)
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	0a1b      	lsrs	r3, r3, #8
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	490f      	ldr	r1, [pc, #60]	@ (8006438 <HAL_RCC_GetHCLKFreq+0x54>)
 80063fc:	5ccb      	ldrb	r3, [r1, r3]
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	fa22 f303 	lsr.w	r3, r2, r3
 8006406:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006408:	4b0a      	ldr	r3, [pc, #40]	@ (8006434 <HAL_RCC_GetHCLKFreq+0x50>)
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f003 030f 	and.w	r3, r3, #15
 8006410:	4a09      	ldr	r2, [pc, #36]	@ (8006438 <HAL_RCC_GetHCLKFreq+0x54>)
 8006412:	5cd3      	ldrb	r3, [r2, r3]
 8006414:	f003 031f 	and.w	r3, r3, #31
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	4a07      	ldr	r2, [pc, #28]	@ (800643c <HAL_RCC_GetHCLKFreq+0x58>)
 8006420:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006422:	4a07      	ldr	r2, [pc, #28]	@ (8006440 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006428:	4b04      	ldr	r3, [pc, #16]	@ (800643c <HAL_RCC_GetHCLKFreq+0x58>)
 800642a:	681b      	ldr	r3, [r3, #0]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	58024400 	.word	0x58024400
 8006438:	08012270 	.word	0x08012270
 800643c:	24000004 	.word	0x24000004
 8006440:	24000000 	.word	0x24000000

08006444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006448:	f7ff ffcc 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 800644c:	4602      	mov	r2, r0
 800644e:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	091b      	lsrs	r3, r3, #4
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	4904      	ldr	r1, [pc, #16]	@ (800646c <HAL_RCC_GetPCLK1Freq+0x28>)
 800645a:	5ccb      	ldrb	r3, [r1, r3]
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006464:	4618      	mov	r0, r3
 8006466:	bd80      	pop	{r7, pc}
 8006468:	58024400 	.word	0x58024400
 800646c:	08012270 	.word	0x08012270

08006470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006474:	f7ff ffb6 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 8006478:	4602      	mov	r2, r0
 800647a:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	0a1b      	lsrs	r3, r3, #8
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	4904      	ldr	r1, [pc, #16]	@ (8006498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006486:	5ccb      	ldrb	r3, [r1, r3]
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006490:	4618      	mov	r0, r3
 8006492:	bd80      	pop	{r7, pc}
 8006494:	58024400 	.word	0x58024400
 8006498:	08012270 	.word	0x08012270

0800649c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800649c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a0:	b0c6      	sub	sp, #280	@ 0x118
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064ae:	2300      	movs	r3, #0
 80064b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80064c0:	2500      	movs	r5, #0
 80064c2:	ea54 0305 	orrs.w	r3, r4, r5
 80064c6:	d049      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064d2:	d02f      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80064d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064d8:	d828      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80064da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064de:	d01a      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064e4:	d822      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80064ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ee:	d007      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064f0:	e01c      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f2:	4bab      	ldr	r3, [pc, #684]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	4aaa      	ldr	r2, [pc, #680]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064fe:	e01a      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006504:	3308      	adds	r3, #8
 8006506:	2102      	movs	r1, #2
 8006508:	4618      	mov	r0, r3
 800650a:	f002 fa49 	bl	80089a0 <RCCEx_PLL2_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006514:	e00f      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651a:	3328      	adds	r3, #40	@ 0x28
 800651c:	2102      	movs	r1, #2
 800651e:	4618      	mov	r0, r3
 8006520:	f002 faf0 	bl	8008b04 <RCCEx_PLL3_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800652a:	e004      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006536:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800653e:	4b98      	ldr	r3, [pc, #608]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006542:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800654c:	4a94      	ldr	r2, [pc, #592]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800654e:	430b      	orrs	r3, r1
 8006550:	6513      	str	r3, [r2, #80]	@ 0x50
 8006552:	e003      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006554:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006558:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006568:	f04f 0900 	mov.w	r9, #0
 800656c:	ea58 0309 	orrs.w	r3, r8, r9
 8006570:	d047      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006578:	2b04      	cmp	r3, #4
 800657a:	d82a      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800657c:	a201      	add	r2, pc, #4	@ (adr r2, 8006584 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	08006599 	.word	0x08006599
 8006588:	080065a7 	.word	0x080065a7
 800658c:	080065bd 	.word	0x080065bd
 8006590:	080065db 	.word	0x080065db
 8006594:	080065db 	.word	0x080065db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006598:	4b81      	ldr	r3, [pc, #516]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800659a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659c:	4a80      	ldr	r2, [pc, #512]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800659e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065a4:	e01a      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	3308      	adds	r3, #8
 80065ac:	2100      	movs	r1, #0
 80065ae:	4618      	mov	r0, r3
 80065b0:	f002 f9f6 	bl	80089a0 <RCCEx_PLL2_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065ba:	e00f      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c0:	3328      	adds	r3, #40	@ 0x28
 80065c2:	2100      	movs	r1, #0
 80065c4:	4618      	mov	r0, r3
 80065c6:	f002 fa9d 	bl	8008b04 <RCCEx_PLL3_Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065d0:	e004      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065d8:	e000      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80065da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065e4:	4b6e      	ldr	r3, [pc, #440]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e8:	f023 0107 	bic.w	r1, r3, #7
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f2:	4a6b      	ldr	r2, [pc, #428]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80065f8:	e003      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800660e:	f04f 0b00 	mov.w	fp, #0
 8006612:	ea5a 030b 	orrs.w	r3, sl, fp
 8006616:	d05b      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006620:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006624:	d03b      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006626:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800662a:	d834      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800662c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006630:	d037      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006632:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006636:	d82e      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006638:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800663c:	d033      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800663e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006642:	d828      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006644:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006648:	d01a      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800664a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800664e:	d822      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006654:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006658:	d007      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800665a:	e01c      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800665c:	4b50      	ldr	r3, [pc, #320]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	4a4f      	ldr	r2, [pc, #316]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006668:	e01e      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	3308      	adds	r3, #8
 8006670:	2100      	movs	r1, #0
 8006672:	4618      	mov	r0, r3
 8006674:	f002 f994 	bl	80089a0 <RCCEx_PLL2_Config>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800667e:	e013      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006684:	3328      	adds	r3, #40	@ 0x28
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f002 fa3b 	bl	8008b04 <RCCEx_PLL3_Config>
 800668e:	4603      	mov	r3, r0
 8006690:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006694:	e008      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800669c:	e004      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800669e:	bf00      	nop
 80066a0:	e002      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80066a2:	bf00      	nop
 80066a4:	e000      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80066a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80066b0:	4b3b      	ldr	r3, [pc, #236]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80066b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066c0:	4a37      	ldr	r2, [pc, #220]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066c2:	430b      	orrs	r3, r1
 80066c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80066c6:	e003      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80066dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80066ea:	460b      	mov	r3, r1
 80066ec:	4313      	orrs	r3, r2
 80066ee:	d05d      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80066f8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80066fc:	d03b      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80066fe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006702:	d834      	bhi.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006704:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006708:	d037      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800670a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800670e:	d82e      	bhi.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006710:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006714:	d033      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006716:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800671a:	d828      	bhi.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800671c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006720:	d01a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006722:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006726:	d822      	bhi.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800672c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006730:	d007      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006732:	e01c      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006734:	4b1a      	ldr	r3, [pc, #104]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006738:	4a19      	ldr	r2, [pc, #100]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800673a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800673e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006740:	e01e      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006746:	3308      	adds	r3, #8
 8006748:	2100      	movs	r1, #0
 800674a:	4618      	mov	r0, r3
 800674c:	f002 f928 	bl	80089a0 <RCCEx_PLL2_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006756:	e013      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675c:	3328      	adds	r3, #40	@ 0x28
 800675e:	2100      	movs	r1, #0
 8006760:	4618      	mov	r0, r3
 8006762:	f002 f9cf 	bl	8008b04 <RCCEx_PLL3_Config>
 8006766:	4603      	mov	r3, r0
 8006768:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800676c:	e008      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006774:	e004      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006776:	bf00      	nop
 8006778:	e002      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800677a:	bf00      	nop
 800677c:	e000      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800677e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006780:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10d      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800678a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006794:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006798:	4a01      	ldr	r2, [pc, #4]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800679a:	430b      	orrs	r3, r1
 800679c:	6593      	str	r3, [r2, #88]	@ 0x58
 800679e:	e005      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80067a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80067b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067c2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4313      	orrs	r3, r2
 80067ca:	d03a      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80067cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d2:	2b30      	cmp	r3, #48	@ 0x30
 80067d4:	d01f      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80067d6:	2b30      	cmp	r3, #48	@ 0x30
 80067d8:	d819      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d00c      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d815      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d019      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d111      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ea:	4baa      	ldr	r3, [pc, #680]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ee:	4aa9      	ldr	r2, [pc, #676]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80067f6:	e011      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fc:	3308      	adds	r3, #8
 80067fe:	2102      	movs	r1, #2
 8006800:	4618      	mov	r0, r3
 8006802:	f002 f8cd 	bl	80089a0 <RCCEx_PLL2_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800680c:	e006      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006814:	e002      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800681a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006824:	4b9b      	ldr	r3, [pc, #620]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006828:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006832:	4a98      	ldr	r2, [pc, #608]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006834:	430b      	orrs	r3, r1
 8006836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006838:	e003      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800683e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800684e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006852:	2300      	movs	r3, #0
 8006854:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006858:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800685c:	460b      	mov	r3, r1
 800685e:	4313      	orrs	r3, r2
 8006860:	d051      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006868:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800686c:	d035      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800686e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006872:	d82e      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006874:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006878:	d031      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x442>
 800687a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800687e:	d828      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006884:	d01a      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800688a:	d822      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006894:	d007      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006896:	e01c      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006898:	4b7e      	ldr	r3, [pc, #504]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800689a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689c:	4a7d      	ldr	r2, [pc, #500]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800689e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068a4:	e01c      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068aa:	3308      	adds	r3, #8
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f002 f876 	bl	80089a0 <RCCEx_PLL2_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068ba:	e011      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c0:	3328      	adds	r3, #40	@ 0x28
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f002 f91d 	bl	8008b04 <RCCEx_PLL3_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068d0:	e006      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068d8:	e002      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80068da:	bf00      	nop
 80068dc:	e000      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80068de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80068e8:	4b6a      	ldr	r3, [pc, #424]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f6:	4a67      	ldr	r2, [pc, #412]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80068fc:	e003      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006902:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006912:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006916:	2300      	movs	r3, #0
 8006918:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800691c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006920:	460b      	mov	r3, r1
 8006922:	4313      	orrs	r3, r2
 8006924:	d053      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800692c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006930:	d033      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006932:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006936:	d82c      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006938:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800693c:	d02f      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800693e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006942:	d826      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006944:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006948:	d02b      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800694a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800694e:	d820      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006954:	d012      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800695a:	d81a      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d022      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006964:	d115      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696a:	3308      	adds	r3, #8
 800696c:	2101      	movs	r1, #1
 800696e:	4618      	mov	r0, r3
 8006970:	f002 f816 	bl	80089a0 <RCCEx_PLL2_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800697a:	e015      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006980:	3328      	adds	r3, #40	@ 0x28
 8006982:	2101      	movs	r1, #1
 8006984:	4618      	mov	r0, r3
 8006986:	f002 f8bd 	bl	8008b04 <RCCEx_PLL3_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006990:	e00a      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006998:	e006      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800699a:	bf00      	nop
 800699c:	e004      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800699e:	bf00      	nop
 80069a0:	e002      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80069a2:	bf00      	nop
 80069a4:	e000      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80069a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069b0:	4b38      	ldr	r3, [pc, #224]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069be:	4a35      	ldr	r2, [pc, #212]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80069c4:	e003      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80069da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069de:	2300      	movs	r3, #0
 80069e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069e4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d058      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80069f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069fa:	d033      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80069fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a00:	d82c      	bhi.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a06:	d02f      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a0c:	d826      	bhi.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a12:	d02b      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006a14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a18:	d820      	bhi.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a1e:	d012      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a24:	d81a      	bhi.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d022      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006a2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a2e:	d115      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a34:	3308      	adds	r3, #8
 8006a36:	2101      	movs	r1, #1
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 ffb1 	bl	80089a0 <RCCEx_PLL2_Config>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a44:	e015      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4a:	3328      	adds	r3, #40	@ 0x28
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f002 f858 	bl	8008b04 <RCCEx_PLL3_Config>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a62:	e006      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a64:	bf00      	nop
 8006a66:	e004      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a68:	bf00      	nop
 8006a6a:	e002      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a6c:	bf00      	nop
 8006a6e:	e000      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10e      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a7a:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a8a:	4a02      	ldr	r2, [pc, #8]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a90:	e006      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006a92:	bf00      	nop
 8006a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006aac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006ab6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4313      	orrs	r3, r2
 8006abe:	d037      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aca:	d00e      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ad0:	d816      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d018      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006ad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ada:	d111      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006adc:	4bc4      	ldr	r3, [pc, #784]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae0:	4ac3      	ldr	r2, [pc, #780]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ae8:	e00f      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aee:	3308      	adds	r3, #8
 8006af0:	2101      	movs	r1, #1
 8006af2:	4618      	mov	r0, r3
 8006af4:	f001 ff54 	bl	80089a0 <RCCEx_PLL2_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006afe:	e004      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b06:	e000      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b12:	4bb7      	ldr	r3, [pc, #732]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b20:	4ab3      	ldr	r2, [pc, #716]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b22:	430b      	orrs	r3, r1
 8006b24:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b26:	e003      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b40:	2300      	movs	r3, #0
 8006b42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d039      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d81c      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b9d 	.word	0x08006b9d
 8006b64:	08006b71 	.word	0x08006b71
 8006b68:	08006b7f 	.word	0x08006b7f
 8006b6c:	08006b9d 	.word	0x08006b9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b70:	4b9f      	ldr	r3, [pc, #636]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	4a9e      	ldr	r2, [pc, #632]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b7c:	e00f      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b82:	3308      	adds	r3, #8
 8006b84:	2102      	movs	r1, #2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 ff0a 	bl	80089a0 <RCCEx_PLL2_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b92:	e004      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b9a:	e000      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ba6:	4b92      	ldr	r3, [pc, #584]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006baa:	f023 0103 	bic.w	r1, r3, #3
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bb4:	4a8e      	ldr	r2, [pc, #568]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bba:	e003      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f000 8099 	beq.w	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006be6:	4b83      	ldr	r3, [pc, #524]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a82      	ldr	r2, [pc, #520]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bf2:	f7fc fcbd 	bl	8003570 <HAL_GetTick>
 8006bf6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bfa:	e00b      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bfc:	f7fc fcb8 	bl	8003570 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b64      	cmp	r3, #100	@ 0x64
 8006c0a:	d903      	bls.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c12:	e005      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c14:	4b77      	ldr	r3, [pc, #476]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0ed      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006c20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d173      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c28:	4b71      	ldr	r3, [pc, #452]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c34:	4053      	eors	r3, r2
 8006c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d015      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c3e:	4b6c      	ldr	r3, [pc, #432]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c46:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c4a:	4b69      	ldr	r3, [pc, #420]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c4e:	4a68      	ldr	r2, [pc, #416]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c54:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c56:	4b66      	ldr	r3, [pc, #408]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c5a:	4a65      	ldr	r2, [pc, #404]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c60:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c62:	4a63      	ldr	r2, [pc, #396]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c68:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c76:	d118      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c78:	f7fc fc7a 	bl	8003570 <HAL_GetTick>
 8006c7c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c80:	e00d      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c82:	f7fc fc75 	bl	8003570 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006c8c:	1ad2      	subs	r2, r2, r3
 8006c8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d903      	bls.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006c9c:	e005      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c9e:	4b54      	ldr	r3, [pc, #336]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0eb      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006caa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d129      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cc2:	d10e      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006cd4:	091a      	lsrs	r2, r3, #4
 8006cd6:	4b48      	ldr	r3, [pc, #288]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	4a45      	ldr	r2, [pc, #276]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6113      	str	r3, [r2, #16]
 8006ce0:	e005      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006ce2:	4b43      	ldr	r3, [pc, #268]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	4a42      	ldr	r2, [pc, #264]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006cec:	6113      	str	r3, [r2, #16]
 8006cee:	4b40      	ldr	r3, [pc, #256]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cf0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cfe:	4a3c      	ldr	r2, [pc, #240]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d00:	430b      	orrs	r3, r1
 8006d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d04:	e008      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006d0e:	e003      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f002 0301 	and.w	r3, r2, #1
 8006d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f000 808f 	beq.w	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d40:	2b28      	cmp	r3, #40	@ 0x28
 8006d42:	d871      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006d44:	a201      	add	r2, pc, #4	@ (adr r2, 8006d4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006e31 	.word	0x08006e31
 8006d50:	08006e29 	.word	0x08006e29
 8006d54:	08006e29 	.word	0x08006e29
 8006d58:	08006e29 	.word	0x08006e29
 8006d5c:	08006e29 	.word	0x08006e29
 8006d60:	08006e29 	.word	0x08006e29
 8006d64:	08006e29 	.word	0x08006e29
 8006d68:	08006e29 	.word	0x08006e29
 8006d6c:	08006dfd 	.word	0x08006dfd
 8006d70:	08006e29 	.word	0x08006e29
 8006d74:	08006e29 	.word	0x08006e29
 8006d78:	08006e29 	.word	0x08006e29
 8006d7c:	08006e29 	.word	0x08006e29
 8006d80:	08006e29 	.word	0x08006e29
 8006d84:	08006e29 	.word	0x08006e29
 8006d88:	08006e29 	.word	0x08006e29
 8006d8c:	08006e13 	.word	0x08006e13
 8006d90:	08006e29 	.word	0x08006e29
 8006d94:	08006e29 	.word	0x08006e29
 8006d98:	08006e29 	.word	0x08006e29
 8006d9c:	08006e29 	.word	0x08006e29
 8006da0:	08006e29 	.word	0x08006e29
 8006da4:	08006e29 	.word	0x08006e29
 8006da8:	08006e29 	.word	0x08006e29
 8006dac:	08006e31 	.word	0x08006e31
 8006db0:	08006e29 	.word	0x08006e29
 8006db4:	08006e29 	.word	0x08006e29
 8006db8:	08006e29 	.word	0x08006e29
 8006dbc:	08006e29 	.word	0x08006e29
 8006dc0:	08006e29 	.word	0x08006e29
 8006dc4:	08006e29 	.word	0x08006e29
 8006dc8:	08006e29 	.word	0x08006e29
 8006dcc:	08006e31 	.word	0x08006e31
 8006dd0:	08006e29 	.word	0x08006e29
 8006dd4:	08006e29 	.word	0x08006e29
 8006dd8:	08006e29 	.word	0x08006e29
 8006ddc:	08006e29 	.word	0x08006e29
 8006de0:	08006e29 	.word	0x08006e29
 8006de4:	08006e29 	.word	0x08006e29
 8006de8:	08006e29 	.word	0x08006e29
 8006dec:	08006e31 	.word	0x08006e31
 8006df0:	58024400 	.word	0x58024400
 8006df4:	58024800 	.word	0x58024800
 8006df8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e00:	3308      	adds	r3, #8
 8006e02:	2101      	movs	r1, #1
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 fdcb 	bl	80089a0 <RCCEx_PLL2_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e10:	e00f      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e16:	3328      	adds	r3, #40	@ 0x28
 8006e18:	2101      	movs	r1, #1
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 fe72 	bl	8008b04 <RCCEx_PLL3_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e26:	e004      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e2e:	e000      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e3a:	4bbf      	ldr	r3, [pc, #764]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e3e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e48:	4abb      	ldr	r2, [pc, #748]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e4e:	e003      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f002 0302 	and.w	r3, r2, #2
 8006e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4313      	orrs	r3, r2
 8006e76:	d041      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	d824      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006e82:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006ea1 	.word	0x08006ea1
 8006e90:	08006eb7 	.word	0x08006eb7
 8006e94:	08006ed5 	.word	0x08006ed5
 8006e98:	08006ed5 	.word	0x08006ed5
 8006e9c:	08006ed5 	.word	0x08006ed5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f001 fd79 	bl	80089a0 <RCCEx_PLL2_Config>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006eb4:	e00f      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eba:	3328      	adds	r3, #40	@ 0x28
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f001 fe20 	bl	8008b04 <RCCEx_PLL3_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006eca:	e004      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ed2:	e000      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ede:	4b96      	ldr	r3, [pc, #600]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee2:	f023 0107 	bic.w	r1, r3, #7
 8006ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eec:	4a92      	ldr	r2, [pc, #584]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ef2:	e003      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ef8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f002 0304 	and.w	r3, r2, #4
 8006f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f12:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f16:	460b      	mov	r3, r1
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	d044      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f24:	2b05      	cmp	r3, #5
 8006f26:	d825      	bhi.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006f28:	a201      	add	r2, pc, #4	@ (adr r2, 8006f30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f7d 	.word	0x08006f7d
 8006f34:	08006f49 	.word	0x08006f49
 8006f38:	08006f5f 	.word	0x08006f5f
 8006f3c:	08006f7d 	.word	0x08006f7d
 8006f40:	08006f7d 	.word	0x08006f7d
 8006f44:	08006f7d 	.word	0x08006f7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	2101      	movs	r1, #1
 8006f50:	4618      	mov	r0, r3
 8006f52:	f001 fd25 	bl	80089a0 <RCCEx_PLL2_Config>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f5c:	e00f      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f62:	3328      	adds	r3, #40	@ 0x28
 8006f64:	2101      	movs	r1, #1
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 fdcc 	bl	8008b04 <RCCEx_PLL3_Config>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f72:	e004      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f7a:	e000      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10b      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f86:	4b6c      	ldr	r3, [pc, #432]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f8a:	f023 0107 	bic.w	r1, r3, #7
 8006f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f96:	4a68      	ldr	r2, [pc, #416]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f9c:	e003      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f002 0320 	and.w	r3, r2, #32
 8006fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006fbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	d055      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fd2:	d033      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fd8:	d82c      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fde:	d02f      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe4:	d826      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006fe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fea:	d02b      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006fec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ff0:	d820      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff6:	d012      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ffc:	d81a      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d022      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007006:	d115      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700c:	3308      	adds	r3, #8
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f001 fcc5 	bl	80089a0 <RCCEx_PLL2_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800701c:	e015      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007022:	3328      	adds	r3, #40	@ 0x28
 8007024:	2102      	movs	r1, #2
 8007026:	4618      	mov	r0, r3
 8007028:	f001 fd6c 	bl	8008b04 <RCCEx_PLL3_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007032:	e00a      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800703a:	e006      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800703c:	bf00      	nop
 800703e:	e004      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007040:	bf00      	nop
 8007042:	e002      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007044:	bf00      	nop
 8007046:	e000      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800704a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10b      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007052:	4b39      	ldr	r3, [pc, #228]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007056:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007062:	4a35      	ldr	r2, [pc, #212]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007064:	430b      	orrs	r3, r1
 8007066:	6553      	str	r3, [r2, #84]	@ 0x54
 8007068:	e003      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800706e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800707e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007082:	2300      	movs	r3, #0
 8007084:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007088:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800708c:	460b      	mov	r3, r1
 800708e:	4313      	orrs	r3, r2
 8007090:	d058      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007096:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800709a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800709e:	d033      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80070a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80070a4:	d82c      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80070a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070aa:	d02f      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80070ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070b0:	d826      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80070b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070b6:	d02b      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80070b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070bc:	d820      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80070be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070c2:	d012      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80070c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070c8:	d81a      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d022      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80070ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d2:	d115      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	3308      	adds	r3, #8
 80070da:	2100      	movs	r1, #0
 80070dc:	4618      	mov	r0, r3
 80070de:	f001 fc5f 	bl	80089a0 <RCCEx_PLL2_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80070e8:	e015      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ee:	3328      	adds	r3, #40	@ 0x28
 80070f0:	2102      	movs	r1, #2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f001 fd06 	bl	8008b04 <RCCEx_PLL3_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80070fe:	e00a      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007106:	e006      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007108:	bf00      	nop
 800710a:	e004      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800710c:	bf00      	nop
 800710e:	e002      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007110:	bf00      	nop
 8007112:	e000      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10e      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800711e:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007122:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800712e:	4a02      	ldr	r2, [pc, #8]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007130:	430b      	orrs	r3, r1
 8007132:	6593      	str	r3, [r2, #88]	@ 0x58
 8007134:	e006      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007136:	bf00      	nop
 8007138:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007140:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007150:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007154:	2300      	movs	r3, #0
 8007156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800715a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800715e:	460b      	mov	r3, r1
 8007160:	4313      	orrs	r3, r2
 8007162:	d055      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007168:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800716c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007170:	d033      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007172:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007176:	d82c      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800717c:	d02f      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800717e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007182:	d826      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007184:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007188:	d02b      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800718a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800718e:	d820      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007190:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007194:	d012      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007196:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800719a:	d81a      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d022      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80071a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a4:	d115      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071aa:	3308      	adds	r3, #8
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 fbf6 	bl	80089a0 <RCCEx_PLL2_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071ba:	e015      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c0:	3328      	adds	r3, #40	@ 0x28
 80071c2:	2102      	movs	r1, #2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 fc9d 	bl	8008b04 <RCCEx_PLL3_Config>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071d0:	e00a      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071d8:	e006      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80071da:	bf00      	nop
 80071dc:	e004      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80071de:	bf00      	nop
 80071e0:	e002      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80071e2:	bf00      	nop
 80071e4:	e000      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80071e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10b      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071f0:	4ba0      	ldr	r3, [pc, #640]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007200:	4a9c      	ldr	r2, [pc, #624]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007202:	430b      	orrs	r3, r1
 8007204:	6593      	str	r3, [r2, #88]	@ 0x58
 8007206:	e003      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800720c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f002 0308 	and.w	r3, r2, #8
 800721c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007220:	2300      	movs	r3, #0
 8007222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007226:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800722a:	460b      	mov	r3, r1
 800722c:	4313      	orrs	r3, r2
 800722e:	d01e      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800723c:	d10c      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007242:	3328      	adds	r3, #40	@ 0x28
 8007244:	2102      	movs	r1, #2
 8007246:	4618      	mov	r0, r3
 8007248:	f001 fc5c 	bl	8008b04 <RCCEx_PLL3_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007258:	4b86      	ldr	r3, [pc, #536]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800725a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800725c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007268:	4a82      	ldr	r2, [pc, #520]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800726a:	430b      	orrs	r3, r1
 800726c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f002 0310 	and.w	r3, r2, #16
 800727a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800727e:	2300      	movs	r3, #0
 8007280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007284:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007288:	460b      	mov	r3, r1
 800728a:	4313      	orrs	r3, r2
 800728c:	d01e      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800728e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800729a:	d10c      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800729c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a0:	3328      	adds	r3, #40	@ 0x28
 80072a2:	2102      	movs	r1, #2
 80072a4:	4618      	mov	r0, r3
 80072a6:	f001 fc2d 	bl	8008b04 <RCCEx_PLL3_Config>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072c6:	4a6b      	ldr	r2, [pc, #428]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072c8:	430b      	orrs	r3, r1
 80072ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80072d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072da:	2300      	movs	r3, #0
 80072dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80072e2:	460b      	mov	r3, r1
 80072e4:	4313      	orrs	r3, r2
 80072e6:	d03e      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80072f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072f4:	d022      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80072f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072fa:	d81b      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007304:	d00b      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007306:	e015      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730c:	3308      	adds	r3, #8
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f001 fb45 	bl	80089a0 <RCCEx_PLL2_Config>
 8007316:	4603      	mov	r3, r0
 8007318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800731c:	e00f      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007322:	3328      	adds	r3, #40	@ 0x28
 8007324:	2102      	movs	r1, #2
 8007326:	4618      	mov	r0, r3
 8007328:	f001 fbec 	bl	8008b04 <RCCEx_PLL3_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007332:	e004      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800733a:	e000      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800733c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800733e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10b      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007346:	4b4b      	ldr	r3, [pc, #300]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800734a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007352:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007356:	4a47      	ldr	r2, [pc, #284]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007358:	430b      	orrs	r3, r1
 800735a:	6593      	str	r3, [r2, #88]	@ 0x58
 800735c:	e003      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007362:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007372:	673b      	str	r3, [r7, #112]	@ 0x70
 8007374:	2300      	movs	r3, #0
 8007376:	677b      	str	r3, [r7, #116]	@ 0x74
 8007378:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800737c:	460b      	mov	r3, r1
 800737e:	4313      	orrs	r3, r2
 8007380:	d03b      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800738a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800738e:	d01f      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007390:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007394:	d818      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800739a:	d003      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800739c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073a0:	d007      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80073a2:	e011      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073a4:	4b33      	ldr	r3, [pc, #204]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a8:	4a32      	ldr	r2, [pc, #200]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80073b0:	e00f      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b6:	3328      	adds	r3, #40	@ 0x28
 80073b8:	2101      	movs	r1, #1
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 fba2 	bl	8008b04 <RCCEx_PLL3_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80073c6:	e004      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073ce:	e000      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80073d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10b      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073da:	4b26      	ldr	r3, [pc, #152]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ea:	4a22      	ldr	r2, [pc, #136]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80073f0:	e003      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007406:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007408:	2300      	movs	r3, #0
 800740a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800740c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007410:	460b      	mov	r3, r1
 8007412:	4313      	orrs	r3, r2
 8007414:	d034      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007424:	d007      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007426:	e011      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007428:	4b12      	ldr	r3, [pc, #72]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800742a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742c:	4a11      	ldr	r2, [pc, #68]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800742e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007434:	e00e      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743a:	3308      	adds	r3, #8
 800743c:	2102      	movs	r1, #2
 800743e:	4618      	mov	r0, r3
 8007440:	f001 faae 	bl	80089a0 <RCCEx_PLL2_Config>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800744a:	e003      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800745c:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800745e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007460:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800746a:	4a02      	ldr	r2, [pc, #8]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800746c:	430b      	orrs	r3, r1
 800746e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007470:	e006      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007472:	bf00      	nop
 8007474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800747c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800748c:	663b      	str	r3, [r7, #96]	@ 0x60
 800748e:	2300      	movs	r3, #0
 8007490:	667b      	str	r3, [r7, #100]	@ 0x64
 8007492:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007496:	460b      	mov	r3, r1
 8007498:	4313      	orrs	r3, r2
 800749a:	d00c      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800749c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a0:	3328      	adds	r3, #40	@ 0x28
 80074a2:	2102      	movs	r1, #2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 fb2d 	bl	8008b04 <RCCEx_PLL3_Config>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80074b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80074c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074c4:	2300      	movs	r3, #0
 80074c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074c8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80074cc:	460b      	mov	r3, r1
 80074ce:	4313      	orrs	r3, r2
 80074d0:	d036      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80074d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074dc:	d018      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80074de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074e2:	d811      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80074e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074e8:	d014      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80074ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ee:	d80b      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d011      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80074f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074f8:	d106      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fa:	4bb7      	ldr	r3, [pc, #732]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	4ab6      	ldr	r2, [pc, #728]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007504:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007506:	e008      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800750e:	e004      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007510:	bf00      	nop
 8007512:	e002      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007522:	4bad      	ldr	r3, [pc, #692]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007526:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800752a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007530:	4aa9      	ldr	r2, [pc, #676]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007532:	430b      	orrs	r3, r1
 8007534:	6553      	str	r3, [r2, #84]	@ 0x54
 8007536:	e003      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800753c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800754c:	653b      	str	r3, [r7, #80]	@ 0x50
 800754e:	2300      	movs	r3, #0
 8007550:	657b      	str	r3, [r7, #84]	@ 0x54
 8007552:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007556:	460b      	mov	r3, r1
 8007558:	4313      	orrs	r3, r2
 800755a:	d009      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800755c:	4b9e      	ldr	r3, [pc, #632]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800755e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007560:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800756a:	4a9b      	ldr	r2, [pc, #620]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800756c:	430b      	orrs	r3, r1
 800756e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800757c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800757e:	2300      	movs	r3, #0
 8007580:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007582:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007586:	460b      	mov	r3, r1
 8007588:	4313      	orrs	r3, r2
 800758a:	d009      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800758c:	4b92      	ldr	r3, [pc, #584]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800758e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007590:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800759a:	4a8f      	ldr	r2, [pc, #572]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800759c:	430b      	orrs	r3, r1
 800759e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80075ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ae:	2300      	movs	r3, #0
 80075b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d00e      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075bc:	4b86      	ldr	r3, [pc, #536]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	4a85      	ldr	r2, [pc, #532]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075c6:	6113      	str	r3, [r2, #16]
 80075c8:	4b83      	ldr	r3, [pc, #524]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075ca:	6919      	ldr	r1, [r3, #16]
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075d4:	4a80      	ldr	r2, [pc, #512]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075d6:	430b      	orrs	r3, r1
 80075d8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80075da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80075e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075e8:	2300      	movs	r3, #0
 80075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80075f0:	460b      	mov	r3, r1
 80075f2:	4313      	orrs	r3, r2
 80075f4:	d009      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80075f6:	4b78      	ldr	r3, [pc, #480]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80075fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007604:	4a74      	ldr	r2, [pc, #464]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007606:	430b      	orrs	r3, r1
 8007608:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007616:	633b      	str	r3, [r7, #48]	@ 0x30
 8007618:	2300      	movs	r3, #0
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
 800761c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007620:	460b      	mov	r3, r1
 8007622:	4313      	orrs	r3, r2
 8007624:	d00a      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007626:	4b6c      	ldr	r3, [pc, #432]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800762a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800762e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007636:	4a68      	ldr	r2, [pc, #416]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007638:	430b      	orrs	r3, r1
 800763a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	2100      	movs	r1, #0
 8007646:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800764e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007652:	460b      	mov	r3, r1
 8007654:	4313      	orrs	r3, r2
 8007656:	d011      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765c:	3308      	adds	r3, #8
 800765e:	2100      	movs	r1, #0
 8007660:	4618      	mov	r0, r3
 8007662:	f001 f99d 	bl	80089a0 <RCCEx_PLL2_Config>
 8007666:	4603      	mov	r3, r0
 8007668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800766c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	2100      	movs	r1, #0
 8007686:	6239      	str	r1, [r7, #32]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
 800768e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007692:	460b      	mov	r3, r1
 8007694:	4313      	orrs	r3, r2
 8007696:	d011      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769c:	3308      	adds	r3, #8
 800769e:	2101      	movs	r1, #1
 80076a0:	4618      	mov	r0, r3
 80076a2:	f001 f97d 	bl	80089a0 <RCCEx_PLL2_Config>
 80076a6:	4603      	mov	r3, r0
 80076a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80076ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80076bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	2100      	movs	r1, #0
 80076c6:	61b9      	str	r1, [r7, #24]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80076d2:	460b      	mov	r3, r1
 80076d4:	4313      	orrs	r3, r2
 80076d6:	d011      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076dc:	3308      	adds	r3, #8
 80076de:	2102      	movs	r1, #2
 80076e0:	4618      	mov	r0, r3
 80076e2:	f001 f95d 	bl	80089a0 <RCCEx_PLL2_Config>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80076ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	2100      	movs	r1, #0
 8007706:	6139      	str	r1, [r7, #16]
 8007708:	f003 0308 	and.w	r3, r3, #8
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007712:	460b      	mov	r3, r1
 8007714:	4313      	orrs	r3, r2
 8007716:	d011      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771c:	3328      	adds	r3, #40	@ 0x28
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f001 f9ef 	bl	8008b04 <RCCEx_PLL3_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800772c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007738:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	2100      	movs	r1, #0
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007752:	460b      	mov	r3, r1
 8007754:	4313      	orrs	r3, r2
 8007756:	d011      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775c:	3328      	adds	r3, #40	@ 0x28
 800775e:	2101      	movs	r1, #1
 8007760:	4618      	mov	r0, r3
 8007762:	f001 f9cf 	bl	8008b04 <RCCEx_PLL3_Config>
 8007766:	4603      	mov	r3, r0
 8007768:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800776c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007778:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	2100      	movs	r1, #0
 8007786:	6039      	str	r1, [r7, #0]
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	607b      	str	r3, [r7, #4]
 800778e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007792:	460b      	mov	r3, r1
 8007794:	4313      	orrs	r3, r2
 8007796:	d011      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779c:	3328      	adds	r3, #40	@ 0x28
 800779e:	2102      	movs	r1, #2
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 f9af 	bl	8008b04 <RCCEx_PLL3_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80077ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80077bc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	e000      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80077d0:	46bd      	mov	sp, r7
 80077d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077d6:	bf00      	nop
 80077d8:	58024400 	.word	0x58024400

080077dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b090      	sub	sp, #64	@ 0x40
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80077e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80077ee:	430b      	orrs	r3, r1
 80077f0:	f040 8094 	bne.w	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80077f4:	4b9b      	ldr	r3, [pc, #620]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80077f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	2b04      	cmp	r3, #4
 8007802:	f200 8087 	bhi.w	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007806:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	08007821 	.word	0x08007821
 8007810:	08007849 	.word	0x08007849
 8007814:	08007871 	.word	0x08007871
 8007818:	0800790d 	.word	0x0800790d
 800781c:	08007899 	.word	0x08007899
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007820:	4b90      	ldr	r3, [pc, #576]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007828:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800782c:	d108      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800782e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007832:	4618      	mov	r0, r3
 8007834:	f000 ff62 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800783c:	f000 bc93 	b.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007844:	f000 bc8f 	b.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007848:	4b86      	ldr	r3, [pc, #536]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007854:	d108      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007856:	f107 0318 	add.w	r3, r7, #24
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fca6 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007864:	f000 bc7f 	b.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800786c:	f000 bc7b 	b.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007870:	4b7c      	ldr	r3, [pc, #496]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800787c:	d108      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800787e:	f107 030c 	add.w	r3, r7, #12
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fde6 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800788c:	f000 bc6b 	b.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007894:	f000 bc67 	b.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007898:	4b72      	ldr	r3, [pc, #456]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800789a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800789c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078a2:	4b70      	ldr	r3, [pc, #448]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0304 	and.w	r3, r3, #4
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d10c      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80078ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078b4:	4b6b      	ldr	r3, [pc, #428]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	08db      	lsrs	r3, r3, #3
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	4a6a      	ldr	r2, [pc, #424]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80078c0:	fa22 f303 	lsr.w	r3, r2, r3
 80078c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c6:	e01f      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078c8:	4b66      	ldr	r3, [pc, #408]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078d4:	d106      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80078d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078dc:	d102      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078de:	4b63      	ldr	r3, [pc, #396]	@ (8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80078e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e2:	e011      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078e4:	4b5f      	ldr	r3, [pc, #380]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f0:	d106      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80078f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078f8:	d102      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078fa:	4b5d      	ldr	r3, [pc, #372]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078fe:	e003      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007904:	f000 bc2f 	b.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007908:	f000 bc2d 	b.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800790c:	4b59      	ldr	r3, [pc, #356]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800790e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007910:	f000 bc29 	b.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007918:	f000 bc25 	b.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800791c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007920:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007924:	430b      	orrs	r3, r1
 8007926:	f040 80a7 	bne.w	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800792a:	4b4e      	ldr	r3, [pc, #312]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800792c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800792e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007932:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007936:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800793a:	d054      	beq.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800793c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007942:	f200 808b 	bhi.w	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800794c:	f000 8083 	beq.w	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007952:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007956:	f200 8081 	bhi.w	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800795a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007960:	d02f      	beq.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007968:	d878      	bhi.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800796a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796c:	2b00      	cmp	r3, #0
 800796e:	d004      	beq.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007972:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007976:	d012      	beq.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007978:	e070      	b.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800797a:	4b3a      	ldr	r3, [pc, #232]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007982:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007986:	d107      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800798c:	4618      	mov	r0, r3
 800798e:	f000 feb5 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007996:	e3e6      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800799c:	e3e3      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800799e:	4b31      	ldr	r3, [pc, #196]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079aa:	d107      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ac:	f107 0318 	add.w	r3, r7, #24
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fbfb 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ba:	e3d4      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c0:	e3d1      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079c2:	4b28      	ldr	r3, [pc, #160]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ce:	d107      	bne.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079d0:	f107 030c 	add.w	r3, r7, #12
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fd3d 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079de:	e3c2      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079e4:	e3bf      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	d10c      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80079fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a02:	4b18      	ldr	r3, [pc, #96]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	08db      	lsrs	r3, r3, #3
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	4a16      	ldr	r2, [pc, #88]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a14:	e01e      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a16:	4b13      	ldr	r3, [pc, #76]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a22:	d106      	bne.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a2a:	d102      	bne.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a30:	e010      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a32:	4b0c      	ldr	r3, [pc, #48]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a3e:	d106      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a46:	d102      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a48:	4b09      	ldr	r3, [pc, #36]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a4c:	e002      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a52:	e388      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a54:	e387      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a56:	4b07      	ldr	r3, [pc, #28]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a5a:	e384      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a60:	e381      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a62:	bf00      	nop
 8007a64:	58024400 	.word	0x58024400
 8007a68:	03d09000 	.word	0x03d09000
 8007a6c:	003d0900 	.word	0x003d0900
 8007a70:	02dc6c00 	.word	0x02dc6c00
 8007a74:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a7c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007a80:	430b      	orrs	r3, r1
 8007a82:	f040 809c 	bne.w	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007a86:	4b9e      	ldr	r3, [pc, #632]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007a8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a96:	d054      	beq.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a9e:	f200 808b 	bhi.w	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007aa8:	f000 8083 	beq.w	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ab2:	f200 8081 	bhi.w	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007abc:	d02f      	beq.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ac4:	d878      	bhi.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ace:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ad2:	d012      	beq.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007ad4:	e070      	b.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ade:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ae2:	d107      	bne.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fe07 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007af2:	e338      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007af4:	2300      	movs	r3, #0
 8007af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af8:	e335      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007afa:	4b81      	ldr	r3, [pc, #516]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b06:	d107      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b08:	f107 0318 	add.w	r3, r7, #24
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fb4d 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b16:	e326      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b1c:	e323      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b1e:	4b78      	ldr	r3, [pc, #480]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b2a:	d107      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b2c:	f107 030c 	add.w	r3, r7, #12
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fc8f 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b3a:	e314      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b40:	e311      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b42:	4b6f      	ldr	r3, [pc, #444]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0304 	and.w	r3, r3, #4
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d10c      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b5e:	4b68      	ldr	r3, [pc, #416]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	08db      	lsrs	r3, r3, #3
 8007b64:	f003 0303 	and.w	r3, r3, #3
 8007b68:	4a66      	ldr	r2, [pc, #408]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b70:	e01e      	b.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b72:	4b63      	ldr	r3, [pc, #396]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b7e:	d106      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b86:	d102      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b88:	4b5f      	ldr	r3, [pc, #380]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b8c:	e010      	b.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b9a:	d106      	bne.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ba2:	d102      	bne.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ba4:	4b59      	ldr	r3, [pc, #356]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba8:	e002      	b.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007bae:	e2da      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007bb0:	e2d9      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bb2:	4b57      	ldr	r3, [pc, #348]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb6:	e2d6      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bbc:	e2d3      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007bc6:	430b      	orrs	r3, r1
 8007bc8:	f040 80a7 	bne.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007bd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bdc:	d055      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007be4:	f200 8096 	bhi.w	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bee:	f000 8084 	beq.w	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bf8:	f200 808c 	bhi.w	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c02:	d030      	beq.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c0a:	f200 8083 	bhi.w	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1a:	d012      	beq.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007c1c:	e07a      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c1e:	4b38      	ldr	r3, [pc, #224]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c2a:	d107      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fd63 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c3a:	e294      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c40:	e291      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c42:	4b2f      	ldr	r3, [pc, #188]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c4e:	d107      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c50:	f107 0318 	add.w	r3, r7, #24
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 faa9 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c5e:	e282      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c64:	e27f      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c66:	4b26      	ldr	r3, [pc, #152]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c72:	d107      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c74:	f107 030c 	add.w	r3, r7, #12
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fbeb 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c82:	e270      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c88:	e26d      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c94:	4b1a      	ldr	r3, [pc, #104]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	d10c      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ca6:	4b16      	ldr	r3, [pc, #88]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	08db      	lsrs	r3, r3, #3
 8007cac:	f003 0303 	and.w	r3, r3, #3
 8007cb0:	4a14      	ldr	r2, [pc, #80]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cb8:	e01e      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cba:	4b11      	ldr	r3, [pc, #68]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cc6:	d106      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cce:	d102      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cd4:	e010      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ce2:	d106      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cea:	d102      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cec:	4b07      	ldr	r3, [pc, #28]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cf0:	e002      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007cf6:	e236      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007cf8:	e235      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cfa:	4b05      	ldr	r3, [pc, #20]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cfe:	e232      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d00:	58024400 	.word	0x58024400
 8007d04:	03d09000 	.word	0x03d09000
 8007d08:	003d0900 	.word	0x003d0900
 8007d0c:	02dc6c00 	.word	0x02dc6c00
 8007d10:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d18:	e225      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d1e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007d22:	430b      	orrs	r3, r1
 8007d24:	f040 8085 	bne.w	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007d28:	4b9c      	ldr	r3, [pc, #624]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d2c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007d30:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d38:	d06b      	beq.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d40:	d874      	bhi.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d48:	d056      	beq.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d50:	d86c      	bhi.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d58:	d03b      	beq.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d60:	d864      	bhi.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d68:	d021      	beq.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d70:	d85c      	bhi.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d004      	beq.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d7e:	d004      	beq.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007d80:	e054      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007d82:	f7fe fb5f 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 8007d86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d88:	e1ed      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d8a:	4b84      	ldr	r3, [pc, #528]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d96:	d107      	bne.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d98:	f107 0318 	add.w	r3, r7, #24
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fa05 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007da6:	e1de      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007da8:	2300      	movs	r3, #0
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dac:	e1db      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dae:	4b7b      	ldr	r3, [pc, #492]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dba:	d107      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dbc:	f107 030c 	add.w	r3, r7, #12
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 fb47 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dca:	e1cc      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd0:	e1c9      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dd2:	4b72      	ldr	r3, [pc, #456]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d109      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dde:	4b6f      	ldr	r3, [pc, #444]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	08db      	lsrs	r3, r3, #3
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	4a6d      	ldr	r2, [pc, #436]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007dea:	fa22 f303 	lsr.w	r3, r2, r3
 8007dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df0:	e1b9      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df6:	e1b6      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007df8:	4b68      	ldr	r3, [pc, #416]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e04:	d102      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007e06:	4b67      	ldr	r3, [pc, #412]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e0a:	e1ac      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e10:	e1a9      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e12:	4b62      	ldr	r3, [pc, #392]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e1e:	d102      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007e20:	4b61      	ldr	r3, [pc, #388]	@ (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e24:	e19f      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e2a:	e19c      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e30:	e199      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e36:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	d173      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007e3e:	4b57      	ldr	r3, [pc, #348]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e46:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e4e:	d02f      	beq.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e56:	d863      	bhi.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e64:	d012      	beq.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007e66:	e05b      	b.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e68:	4b4c      	ldr	r3, [pc, #304]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e74:	d107      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e76:	f107 0318 	add.w	r3, r7, #24
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 f996 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e84:	e16f      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e8a:	e16c      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e8c:	4b43      	ldr	r3, [pc, #268]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e98:	d107      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e9a:	f107 030c 	add.w	r3, r7, #12
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 fad8 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea8:	e15d      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eae:	e15a      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007eb8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eba:	4b38      	ldr	r3, [pc, #224]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d109      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ecc:	4b33      	ldr	r3, [pc, #204]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	08db      	lsrs	r3, r3, #3
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	4a32      	ldr	r2, [pc, #200]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8007edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ede:	e01e      	b.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eec:	d106      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ef4:	d102      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007efa:	e010      	b.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007efc:	4b27      	ldr	r3, [pc, #156]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f08:	d106      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f10:	d102      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f12:	4b25      	ldr	r3, [pc, #148]	@ (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f16:	e002      	b.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f1c:	e123      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f1e:	e122      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f24:	e11f      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f2a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	d13c      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007f32:	4b1a      	ldr	r3, [pc, #104]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f3a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f48:	d012      	beq.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007f4a:	e023      	b.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f4c:	4b13      	ldr	r3, [pc, #76]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f58:	d107      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fbcc 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f68:	e0fd      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f6e:	e0fa      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f70:	4b0a      	ldr	r3, [pc, #40]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f7c:	d107      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f7e:	f107 0318 	add.w	r3, r7, #24
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 f912 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f8c:	e0eb      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f92:	e0e8      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f98:	e0e5      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f9a:	bf00      	nop
 8007f9c:	58024400 	.word	0x58024400
 8007fa0:	03d09000 	.word	0x03d09000
 8007fa4:	003d0900 	.word	0x003d0900
 8007fa8:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fb0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	f040 8085 	bne.w	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007fba:	4b6d      	ldr	r3, [pc, #436]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fbe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007fc2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fca:	d06b      	beq.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fd2:	d874      	bhi.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fda:	d056      	beq.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe2:	d86c      	bhi.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fea:	d03b      	beq.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ff2:	d864      	bhi.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ffa:	d021      	beq.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008002:	d85c      	bhi.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008006:	2b00      	cmp	r3, #0
 8008008:	d004      	beq.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800800a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008010:	d004      	beq.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008012:	e054      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008014:	f000 f8b4 	bl	8008180 <HAL_RCCEx_GetD3PCLK1Freq>
 8008018:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800801a:	e0a4      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800801c:	4b54      	ldr	r3, [pc, #336]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008024:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008028:	d107      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800802a:	f107 0318 	add.w	r3, r7, #24
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f8bc 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008038:	e095      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800803e:	e092      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008040:	4b4b      	ldr	r3, [pc, #300]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800804c:	d107      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800804e:	f107 030c 	add.w	r3, r7, #12
 8008052:	4618      	mov	r0, r3
 8008054:	f000 f9fe 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800805c:	e083      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008062:	e080      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008064:	4b42      	ldr	r3, [pc, #264]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b04      	cmp	r3, #4
 800806e:	d109      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008070:	4b3f      	ldr	r3, [pc, #252]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	08db      	lsrs	r3, r3, #3
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	4a3e      	ldr	r2, [pc, #248]	@ (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800807c:	fa22 f303 	lsr.w	r3, r2, r3
 8008080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008082:	e070      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008088:	e06d      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800808a:	4b39      	ldr	r3, [pc, #228]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008096:	d102      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008098:	4b37      	ldr	r3, [pc, #220]	@ (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800809a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800809c:	e063      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080a2:	e060      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080a4:	4b32      	ldr	r3, [pc, #200]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080b0:	d102      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80080b2:	4b32      	ldr	r3, [pc, #200]	@ (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80080b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080b6:	e056      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080bc:	e053      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c2:	e050      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80080c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80080cc:	430b      	orrs	r3, r1
 80080ce:	d148      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80080d0:	4b27      	ldr	r3, [pc, #156]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e0:	d02a      	beq.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80080e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e8:	d838      	bhi.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80080ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80080f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080f6:	d00d      	beq.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80080f8:	e030      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008102:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008106:	d102      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008108:	4b1c      	ldr	r3, [pc, #112]	@ (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800810a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800810c:	e02b      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008112:	e028      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008114:	4b16      	ldr	r3, [pc, #88]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800811c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008120:	d107      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fae8 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800812c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008130:	e019      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008136:	e016      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008138:	4b0d      	ldr	r3, [pc, #52]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008140:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008144:	d107      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008146:	f107 0318 	add.w	r3, r7, #24
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f82e 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008154:	e007      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800815a:	e004      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008160:	e001      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008168:	4618      	mov	r0, r3
 800816a:	3740      	adds	r7, #64	@ 0x40
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	58024400 	.word	0x58024400
 8008174:	03d09000 	.word	0x03d09000
 8008178:	003d0900 	.word	0x003d0900
 800817c:	02dc6c00 	.word	0x02dc6c00

08008180 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008184:	f7fe f92e 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 8008188:	4602      	mov	r2, r0
 800818a:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	091b      	lsrs	r3, r3, #4
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	4904      	ldr	r1, [pc, #16]	@ (80081a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008196:	5ccb      	ldrb	r3, [r1, r3]
 8008198:	f003 031f 	and.w	r3, r3, #31
 800819c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	58024400 	.word	0x58024400
 80081a8:	08012270 	.word	0x08012270

080081ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b089      	sub	sp, #36	@ 0x24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081b4:	4ba1      	ldr	r3, [pc, #644]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80081be:	4b9f      	ldr	r3, [pc, #636]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c2:	0b1b      	lsrs	r3, r3, #12
 80081c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081ca:	4b9c      	ldr	r3, [pc, #624]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	091b      	lsrs	r3, r3, #4
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80081d6:	4b99      	ldr	r3, [pc, #612]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081da:	08db      	lsrs	r3, r3, #3
 80081dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 8111 	beq.w	800841c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	f000 8083 	beq.w	8008308 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b02      	cmp	r3, #2
 8008206:	f200 80a1 	bhi.w	800834c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d056      	beq.n	80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008216:	e099      	b.n	800834c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008218:	4b88      	ldr	r3, [pc, #544]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d02d      	beq.n	8008280 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008224:	4b85      	ldr	r3, [pc, #532]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	08db      	lsrs	r3, r3, #3
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	4a84      	ldr	r2, [pc, #528]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
 8008234:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	ee07 3a90 	vmov	s15, r3
 800823c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800824e:	4b7b      	ldr	r3, [pc, #492]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008262:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800827e:	e087      	b.n	8008390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800828e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008292:	4b6a      	ldr	r3, [pc, #424]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082c2:	e065      	b.n	8008390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d6:	4b59      	ldr	r3, [pc, #356]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008306:	e043      	b.n	8008390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008312:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831a:	4b48      	ldr	r3, [pc, #288]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800831c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832a:	ed97 6a03 	vldr	s12, [r7, #12]
 800832e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800833e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800834a:	e021      	b.n	8008390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800835a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800835e:	4b37      	ldr	r3, [pc, #220]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008372:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800837e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800838e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008390:	4b2a      	ldr	r3, [pc, #168]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008394:	0a5b      	lsrs	r3, r3, #9
 8008396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b6:	ee17 2a90 	vmov	r2, s15
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80083be:	4b1f      	ldr	r3, [pc, #124]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c2:	0c1b      	lsrs	r3, r3, #16
 80083c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e4:	ee17 2a90 	vmov	r2, s15
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80083ec:	4b13      	ldr	r3, [pc, #76]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	0e1b      	lsrs	r3, r3, #24
 80083f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008402:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008406:	edd7 6a07 	vldr	s13, [r7, #28]
 800840a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800840e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008412:	ee17 2a90 	vmov	r2, s15
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800841a:	e008      	b.n	800842e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	609a      	str	r2, [r3, #8]
}
 800842e:	bf00      	nop
 8008430:	3724      	adds	r7, #36	@ 0x24
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	58024400 	.word	0x58024400
 8008440:	03d09000 	.word	0x03d09000
 8008444:	46000000 	.word	0x46000000
 8008448:	4c742400 	.word	0x4c742400
 800844c:	4a742400 	.word	0x4a742400
 8008450:	4c371b00 	.word	0x4c371b00

08008454 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008454:	b480      	push	{r7}
 8008456:	b089      	sub	sp, #36	@ 0x24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800845c:	4ba1      	ldr	r3, [pc, #644]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008466:	4b9f      	ldr	r3, [pc, #636]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846a:	0d1b      	lsrs	r3, r3, #20
 800846c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008470:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008472:	4b9c      	ldr	r3, [pc, #624]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008476:	0a1b      	lsrs	r3, r3, #8
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800847e:	4b99      	ldr	r3, [pc, #612]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008482:	08db      	lsrs	r3, r3, #3
 8008484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	fb02 f303 	mul.w	r3, r2, r3
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008496:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 8111 	beq.w	80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	f000 8083 	beq.w	80085b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	f200 80a1 	bhi.w	80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d056      	beq.n	800856c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084be:	e099      	b.n	80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084c0:	4b88      	ldr	r3, [pc, #544]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d02d      	beq.n	8008528 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084cc:	4b85      	ldr	r3, [pc, #532]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	08db      	lsrs	r3, r3, #3
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	4a84      	ldr	r2, [pc, #528]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084d8:	fa22 f303 	lsr.w	r3, r2, r3
 80084dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	ee07 3a90 	vmov	s15, r3
 80084e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f6:	4b7b      	ldr	r3, [pc, #492]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008506:	ed97 6a03 	vldr	s12, [r7, #12]
 800850a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800850e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800851a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008522:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008526:	e087      	b.n	8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008532:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853a:	4b6a      	ldr	r3, [pc, #424]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800853c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854a:	ed97 6a03 	vldr	s12, [r7, #12]
 800854e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800855e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800856a:	e065      	b.n	8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008576:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800857a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857e:	4b59      	ldr	r3, [pc, #356]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008592:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ae:	e043      	b.n	8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80086f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c2:	4b48      	ldr	r3, [pc, #288]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085f2:	e021      	b.n	8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008606:	4b37      	ldr	r3, [pc, #220]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008616:	ed97 6a03 	vldr	s12, [r7, #12]
 800861a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800861e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800862a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800862e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008636:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008638:	4b2a      	ldr	r3, [pc, #168]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	0a5b      	lsrs	r3, r3, #9
 800863e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800864e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008652:	edd7 6a07 	vldr	s13, [r7, #28]
 8008656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800865a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800865e:	ee17 2a90 	vmov	r2, s15
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008666:	4b1f      	ldr	r3, [pc, #124]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866a:	0c1b      	lsrs	r3, r3, #16
 800866c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800867c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008680:	edd7 6a07 	vldr	s13, [r7, #28]
 8008684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800868c:	ee17 2a90 	vmov	r2, s15
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008694:	4b13      	ldr	r3, [pc, #76]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	0e1b      	lsrs	r3, r3, #24
 800869a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ba:	ee17 2a90 	vmov	r2, s15
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086c2:	e008      	b.n	80086d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	609a      	str	r2, [r3, #8]
}
 80086d6:	bf00      	nop
 80086d8:	3724      	adds	r7, #36	@ 0x24
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	58024400 	.word	0x58024400
 80086e8:	03d09000 	.word	0x03d09000
 80086ec:	46000000 	.word	0x46000000
 80086f0:	4c742400 	.word	0x4c742400
 80086f4:	4a742400 	.word	0x4a742400
 80086f8:	4c371b00 	.word	0x4c371b00

080086fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b089      	sub	sp, #36	@ 0x24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008704:	4ba0      	ldr	r3, [pc, #640]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008708:	f003 0303 	and.w	r3, r3, #3
 800870c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800870e:	4b9e      	ldr	r3, [pc, #632]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008712:	091b      	lsrs	r3, r3, #4
 8008714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008718:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800871a:	4b9b      	ldr	r3, [pc, #620]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800871c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008724:	4b98      	ldr	r3, [pc, #608]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008728:	08db      	lsrs	r3, r3, #3
 800872a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	fb02 f303 	mul.w	r3, r2, r3
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8111 	beq.w	800896a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	2b02      	cmp	r3, #2
 800874c:	f000 8083 	beq.w	8008856 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	2b02      	cmp	r3, #2
 8008754:	f200 80a1 	bhi.w	800889a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d056      	beq.n	8008812 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008764:	e099      	b.n	800889a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008766:	4b88      	ldr	r3, [pc, #544]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d02d      	beq.n	80087ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008772:	4b85      	ldr	r3, [pc, #532]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	08db      	lsrs	r3, r3, #3
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	4a83      	ldr	r2, [pc, #524]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800877e:	fa22 f303 	lsr.w	r3, r2, r3
 8008782:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879c:	4b7a      	ldr	r3, [pc, #488]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800879e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087cc:	e087      	b.n	80088de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008994 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80087dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e0:	4b69      	ldr	r3, [pc, #420]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e8:	ee07 3a90 	vmov	s15, r3
 80087ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008810:	e065      	b.n	80088de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008998 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008824:	4b58      	ldr	r3, [pc, #352]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882c:	ee07 3a90 	vmov	s15, r3
 8008830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008834:	ed97 6a03 	vldr	s12, [r7, #12]
 8008838:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800883c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008850:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008854:	e043      	b.n	80088de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008860:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008868:	4b47      	ldr	r3, [pc, #284]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800886a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008878:	ed97 6a03 	vldr	s12, [r7, #12]
 800887c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800888c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008894:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008898:	e021      	b.n	80088de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008994 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ac:	4b36      	ldr	r3, [pc, #216]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b4:	ee07 3a90 	vmov	s15, r3
 80088b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80088de:	4b2a      	ldr	r3, [pc, #168]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e2:	0a5b      	lsrs	r3, r3, #9
 80088e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80088fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008904:	ee17 2a90 	vmov	r2, s15
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800890c:	4b1e      	ldr	r3, [pc, #120]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800890e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008910:	0c1b      	lsrs	r3, r3, #16
 8008912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008926:	edd7 6a07 	vldr	s13, [r7, #28]
 800892a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800892e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008932:	ee17 2a90 	vmov	r2, s15
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800893a:	4b13      	ldr	r3, [pc, #76]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893e:	0e1b      	lsrs	r3, r3, #24
 8008940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008954:	edd7 6a07 	vldr	s13, [r7, #28]
 8008958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800895c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008960:	ee17 2a90 	vmov	r2, s15
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008968:	e008      	b.n	800897c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	609a      	str	r2, [r3, #8]
}
 800897c:	bf00      	nop
 800897e:	3724      	adds	r7, #36	@ 0x24
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	58024400 	.word	0x58024400
 800898c:	03d09000 	.word	0x03d09000
 8008990:	46000000 	.word	0x46000000
 8008994:	4c742400 	.word	0x4c742400
 8008998:	4a742400 	.word	0x4a742400
 800899c:	4c371b00 	.word	0x4c371b00

080089a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089ae:	4b53      	ldr	r3, [pc, #332]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 80089b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d101      	bne.n	80089be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e099      	b.n	8008af2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80089be:	4b4f      	ldr	r3, [pc, #316]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a4e      	ldr	r2, [pc, #312]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 80089c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ca:	f7fa fdd1 	bl	8003570 <HAL_GetTick>
 80089ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089d0:	e008      	b.n	80089e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089d2:	f7fa fdcd 	bl	8003570 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d901      	bls.n	80089e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e086      	b.n	8008af2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089e4:	4b45      	ldr	r3, [pc, #276]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1f0      	bne.n	80089d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80089f0:	4b42      	ldr	r3, [pc, #264]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 80089f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	031b      	lsls	r3, r3, #12
 80089fe:	493f      	ldr	r1, [pc, #252]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	025b      	lsls	r3, r3, #9
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	041b      	lsls	r3, r3, #16
 8008a22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	061b      	lsls	r3, r3, #24
 8008a30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a34:	4931      	ldr	r1, [pc, #196]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a3a:	4b30      	ldr	r3, [pc, #192]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	492d      	ldr	r1, [pc, #180]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	f023 0220 	bic.w	r2, r3, #32
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	4928      	ldr	r1, [pc, #160]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a5e:	4b27      	ldr	r3, [pc, #156]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	4a26      	ldr	r2, [pc, #152]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a64:	f023 0310 	bic.w	r3, r3, #16
 8008a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a6a:	4b24      	ldr	r3, [pc, #144]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a6e:	4b24      	ldr	r3, [pc, #144]	@ (8008b00 <RCCEx_PLL2_Config+0x160>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	69d2      	ldr	r2, [r2, #28]
 8008a76:	00d2      	lsls	r2, r2, #3
 8008a78:	4920      	ldr	r1, [pc, #128]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a82:	4a1e      	ldr	r2, [pc, #120]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a84:	f043 0310 	orr.w	r3, r3, #16
 8008a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a90:	4b1a      	ldr	r3, [pc, #104]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a94:	4a19      	ldr	r2, [pc, #100]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a9c:	e00f      	b.n	8008abe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d106      	bne.n	8008ab2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008aa4:	4b15      	ldr	r3, [pc, #84]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa8:	4a14      	ldr	r2, [pc, #80]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008aae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ab0:	e005      	b.n	8008abe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ab2:	4b12      	ldr	r3, [pc, #72]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab6:	4a11      	ldr	r2, [pc, #68]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008ab8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008abe:	4b0f      	ldr	r3, [pc, #60]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008ac4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aca:	f7fa fd51 	bl	8003570 <HAL_GetTick>
 8008ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ad0:	e008      	b.n	8008ae4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ad2:	f7fa fd4d 	bl	8003570 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d901      	bls.n	8008ae4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e006      	b.n	8008af2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ae4:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0f0      	beq.n	8008ad2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	58024400 	.word	0x58024400
 8008b00:	ffff0007 	.word	0xffff0007

08008b04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b12:	4b53      	ldr	r3, [pc, #332]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d101      	bne.n	8008b22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e099      	b.n	8008c56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b22:	4b4f      	ldr	r3, [pc, #316]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a4e      	ldr	r2, [pc, #312]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b2e:	f7fa fd1f 	bl	8003570 <HAL_GetTick>
 8008b32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b34:	e008      	b.n	8008b48 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b36:	f7fa fd1b 	bl	8003570 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d901      	bls.n	8008b48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e086      	b.n	8008c56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b48:	4b45      	ldr	r3, [pc, #276]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f0      	bne.n	8008b36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b54:	4b42      	ldr	r3, [pc, #264]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b58:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	051b      	lsls	r3, r3, #20
 8008b62:	493f      	ldr	r1, [pc, #252]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	025b      	lsls	r3, r3, #9
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	041b      	lsls	r3, r3, #16
 8008b86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	061b      	lsls	r3, r3, #24
 8008b94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b98:	4931      	ldr	r1, [pc, #196]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b9e:	4b30      	ldr	r3, [pc, #192]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	492d      	ldr	r1, [pc, #180]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	4928      	ldr	r1, [pc, #160]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008bc2:	4b27      	ldr	r3, [pc, #156]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc6:	4a26      	ldr	r2, [pc, #152]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bce:	4b24      	ldr	r3, [pc, #144]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bd2:	4b24      	ldr	r3, [pc, #144]	@ (8008c64 <RCCEx_PLL3_Config+0x160>)
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	69d2      	ldr	r2, [r2, #28]
 8008bda:	00d2      	lsls	r2, r2, #3
 8008bdc:	4920      	ldr	r1, [pc, #128]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008be2:	4b1f      	ldr	r3, [pc, #124]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be6:	4a1e      	ldr	r2, [pc, #120]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d106      	bne.n	8008c02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf8:	4a19      	ldr	r2, [pc, #100]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bfa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c00:	e00f      	b.n	8008c22 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d106      	bne.n	8008c16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c08:	4b15      	ldr	r3, [pc, #84]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0c:	4a14      	ldr	r2, [pc, #80]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c14:	e005      	b.n	8008c22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c16:	4b12      	ldr	r3, [pc, #72]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	4a11      	ldr	r2, [pc, #68]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c22:	4b0f      	ldr	r3, [pc, #60]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a0e      	ldr	r2, [pc, #56]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c2e:	f7fa fc9f 	bl	8003570 <HAL_GetTick>
 8008c32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c34:	e008      	b.n	8008c48 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c36:	f7fa fc9b 	bl	8003570 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d901      	bls.n	8008c48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e006      	b.n	8008c56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c48:	4b05      	ldr	r3, [pc, #20]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0f0      	beq.n	8008c36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	58024400 	.word	0x58024400
 8008c64:	ffff0007 	.word	0xffff0007

08008c68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	@ 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e075      	b.n	8008d66 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d105      	bne.n	8008c92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7f9 fb7f 	bl	8002390 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2204      	movs	r2, #4
 8008c96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f868 	bl	8008d70 <HAL_SD_InitCard>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e05d      	b.n	8008d66 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008caa:	f107 0308 	add.w	r3, r7, #8
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fa9d 	bl	80091f0 <HAL_SD_GetCardStatus>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e052      	b.n	8008d66 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008cc0:	7e3b      	ldrb	r3, [r7, #24]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008cc6:	7e7b      	ldrb	r3, [r7, #25]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d10a      	bne.n	8008cea <HAL_SD_Init+0x82>
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <HAL_SD_Init+0x78>
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ce6:	659a      	str	r2, [r3, #88]	@ 0x58
 8008ce8:	e00b      	b.n	8008d02 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d104      	bne.n	8008cfc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cf8:	659a      	str	r2, [r3, #88]	@ 0x58
 8008cfa:	e002      	b.n	8008d02 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fb2f 	bl	800936c <HAL_SD_ConfigWideBusOperation>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e026      	b.n	8008d66 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008d18:	f7fa fc2a 	bl	8003570 <HAL_GetTick>
 8008d1c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008d1e:	e011      	b.n	8008d44 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d20:	f7fa fc26 	bl	8003570 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2e:	d109      	bne.n	8008d44 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d36:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e010      	b.n	8008d66 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fc23 	bl	8009590 <HAL_SD_GetCardState>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d1e7      	bne.n	8008d20 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3728      	adds	r7, #40	@ 0x28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b08d      	sub	sp, #52	@ 0x34
 8008d74:	af02      	add	r7, sp, #8
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008d80:	2300      	movs	r3, #0
 8008d82:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008d84:	2300      	movs	r3, #0
 8008d86:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008d88:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008d8c:	f04f 0100 	mov.w	r1, #0
 8008d90:	f7fe fd24 	bl	80077dc <HAL_RCCEx_GetPeriphCLKFreq>
 8008d94:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d109      	bne.n	8008db0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008daa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e070      	b.n	8008e92 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db2:	0a1b      	lsrs	r3, r3, #8
 8008db4:	4a39      	ldr	r2, [pc, #228]	@ (8008e9c <HAL_SD_InitCard+0x12c>)
 8008db6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dba:	091b      	lsrs	r3, r3, #4
 8008dbc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681c      	ldr	r4, [r3, #0]
 8008dc2:	466a      	mov	r2, sp
 8008dc4:	f107 0318 	add.w	r3, r7, #24
 8008dc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008dcc:	e882 0003 	stmia.w	r2, {r0, r1}
 8008dd0:	f107 030c 	add.w	r3, r7, #12
 8008dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f004 fad2 	bl	800d380 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f004 fb04 	bl	800d3ee <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d005      	beq.n	8008df8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d007      	beq.n	8008e0e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008dfe:	4a28      	ldr	r2, [pc, #160]	@ (8008ea0 <HAL_SD_InitCard+0x130>)
 8008e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e06:	3301      	adds	r3, #1
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fa fbbd 	bl	8003588 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fcac 	bl	800976c <SD_PowerON>
 8008e14:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e02e      	b.n	8008e92 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fbcb 	bl	80095d0 <SD_InitCard>
 8008e3a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	431a      	orrs	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e01b      	b.n	8008e92 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e62:	4618      	mov	r0, r3
 8008e64:	f004 fb58 	bl	800d518 <SDMMC_CmdBlockLength>
 8008e68:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00f      	beq.n	8008e90 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a0b      	ldr	r2, [pc, #44]	@ (8008ea4 <HAL_SD_InitCard+0x134>)
 8008e76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e000      	b.n	8008e92 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	372c      	adds	r7, #44	@ 0x2c
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd90      	pop	{r4, r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	014f8b59 	.word	0x014f8b59
 8008ea0:	00012110 	.word	0x00012110
 8008ea4:	1fe00fff 	.word	0x1fe00fff

08008ea8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eb6:	0f9b      	lsrs	r3, r3, #30
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ec2:	0e9b      	lsrs	r3, r3, #26
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	f003 030f 	and.w	r3, r3, #15
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ed4:	0e1b      	lsrs	r3, r3, #24
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f003 0303 	and.w	r3, r3, #3
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ee6:	0c1b      	lsrs	r3, r3, #16
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ef2:	0a1b      	lsrs	r3, r3, #8
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f08:	0d1b      	lsrs	r3, r3, #20
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f14:	0c1b      	lsrs	r3, r3, #16
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f26:	0bdb      	lsrs	r3, r3, #15
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f38:	0b9b      	lsrs	r3, r3, #14
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f4a:	0b5b      	lsrs	r3, r3, #13
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f5c:	0b1b      	lsrs	r3, r3, #12
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d163      	bne.n	8009040 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f7c:	009a      	lsls	r2, r3, #2
 8008f7e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008f82:	4013      	ands	r3, r2
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008f88:	0f92      	lsrs	r2, r2, #30
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f94:	0edb      	lsrs	r3, r3, #27
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fa6:	0e1b      	lsrs	r3, r3, #24
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	f003 0307 	and.w	r3, r3, #7
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fb8:	0d5b      	lsrs	r3, r3, #21
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f003 0307 	and.w	r3, r3, #7
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fca:	0c9b      	lsrs	r3, r3, #18
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f003 0307 	and.w	r3, r3, #7
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fdc:	0bdb      	lsrs	r3, r3, #15
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	7e1b      	ldrb	r3, [r3, #24]
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	3302      	adds	r3, #2
 8009000:	2201      	movs	r2, #1
 8009002:	fa02 f303 	lsl.w	r3, r2, r3
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800900a:	fb03 f202 	mul.w	r2, r3, r2
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	7a1b      	ldrb	r3, [r3, #8]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	f003 030f 	and.w	r3, r3, #15
 800901c:	2201      	movs	r2, #1
 800901e:	409a      	lsls	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800902c:	0a52      	lsrs	r2, r2, #9
 800902e:	fb03 f202 	mul.w	r2, r3, r2
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800903c:	655a      	str	r2, [r3, #84]	@ 0x54
 800903e:	e031      	b.n	80090a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009044:	2b01      	cmp	r3, #1
 8009046:	d11d      	bne.n	8009084 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800904c:	041b      	lsls	r3, r3, #16
 800904e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009056:	0c1b      	lsrs	r3, r3, #16
 8009058:	431a      	orrs	r2, r3
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	3301      	adds	r3, #1
 8009064:	029a      	lsls	r2, r3, #10
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009078:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	655a      	str	r2, [r3, #84]	@ 0x54
 8009082:	e00f      	b.n	80090a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a58      	ldr	r2, [pc, #352]	@ (80091ec <HAL_SD_GetCardCSD+0x344>)
 800908a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009090:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e09d      	b.n	80091e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090a8:	0b9b      	lsrs	r3, r3, #14
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ba:	09db      	lsrs	r3, r3, #7
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090dc:	0fdb      	lsrs	r3, r3, #31
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090e8:	0f5b      	lsrs	r3, r3, #29
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	f003 0303 	and.w	r3, r3, #3
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090fa:	0e9b      	lsrs	r3, r3, #26
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	b2da      	uxtb	r2, r3
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800910c:	0d9b      	lsrs	r3, r3, #22
 800910e:	b2db      	uxtb	r3, r3
 8009110:	f003 030f 	and.w	r3, r3, #15
 8009114:	b2da      	uxtb	r2, r3
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800911e:	0d5b      	lsrs	r3, r3, #21
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	b2da      	uxtb	r2, r3
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800913a:	0c1b      	lsrs	r3, r3, #16
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	b2da      	uxtb	r2, r3
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800914e:	0bdb      	lsrs	r3, r3, #15
 8009150:	b2db      	uxtb	r3, r3
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	b2da      	uxtb	r2, r3
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009162:	0b9b      	lsrs	r3, r3, #14
 8009164:	b2db      	uxtb	r3, r3
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	b2da      	uxtb	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009176:	0b5b      	lsrs	r3, r3, #13
 8009178:	b2db      	uxtb	r3, r3
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	b2da      	uxtb	r2, r3
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800918a:	0b1b      	lsrs	r3, r3, #12
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800919e:	0a9b      	lsrs	r3, r3, #10
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091b2:	0a1b      	lsrs	r3, r3, #8
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	f003 0303 	and.w	r3, r3, #3
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091c6:	085b      	lsrs	r3, r3, #1
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	1fe00fff 	.word	0x1fe00fff

080091f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b094      	sub	sp, #80	@ 0x50
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b03      	cmp	r3, #3
 800920a:	d101      	bne.n	8009210 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e0a7      	b.n	8009360 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009210:	f107 0308 	add.w	r3, r7, #8
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fb36 	bl	8009888 <SD_SendSDStatus>
 800921c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800921e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009220:	2b00      	cmp	r3, #0
 8009222:	d011      	beq.n	8009248 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a4f      	ldr	r2, [pc, #316]	@ (8009368 <HAL_SD_GetCardStatus+0x178>)
 800922a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009246:	e070      	b.n	800932a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	099b      	lsrs	r3, r3, #6
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 0303 	and.w	r3, r3, #3
 8009252:	b2da      	uxtb	r2, r3
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	095b      	lsrs	r3, r3, #5
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	b2da      	uxtb	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	0a1b      	lsrs	r3, r3, #8
 800926c:	b29b      	uxth	r3, r3
 800926e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009272:	b29a      	uxth	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	0e1b      	lsrs	r3, r3, #24
 8009278:	b29b      	uxth	r3, r3
 800927a:	4313      	orrs	r3, r2
 800927c:	b29a      	uxth	r2, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	061a      	lsls	r2, r3, #24
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800928e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009298:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	0e1b      	lsrs	r3, r3, #24
 800929e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	0a1b      	lsrs	r3, r3, #8
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	0d1b      	lsrs	r3, r3, #20
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	0c1b      	lsrs	r3, r3, #16
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4313      	orrs	r3, r2
 80092dc:	b29a      	uxth	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	0a9b      	lsrs	r3, r3, #10
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	0a1b      	lsrs	r3, r3, #8
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	f003 0303 	and.w	r3, r3, #3
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	091b      	lsrs	r3, r3, #4
 8009306:	b2db      	uxtb	r3, r3
 8009308:	f003 030f 	and.w	r3, r3, #15
 800930c:	b2da      	uxtb	r2, r3
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f003 030f 	and.w	r3, r3, #15
 800931a:	b2da      	uxtb	r2, r3
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	0e1b      	lsrs	r3, r3, #24
 8009324:	b2da      	uxtb	r2, r3
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009332:	4618      	mov	r0, r3
 8009334:	f004 f8f0 	bl	800d518 <SDMMC_CmdBlockLength>
 8009338:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800933a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00d      	beq.n	800935c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a08      	ldr	r2, [pc, #32]	@ (8009368 <HAL_SD_GetCardStatus+0x178>)
 8009346:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800934c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800935c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009360:	4618      	mov	r0, r3
 8009362:	3750      	adds	r7, #80	@ 0x50
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	1fe00fff 	.word	0x1fe00fff

0800936c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800936c:	b590      	push	{r4, r7, lr}
 800936e:	b08d      	sub	sp, #52	@ 0x34
 8009370:	af02      	add	r7, sp, #8
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2203      	movs	r2, #3
 8009380:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009388:	2b03      	cmp	r3, #3
 800938a:	d02e      	beq.n	80093ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009392:	d106      	bne.n	80093a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009398:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	635a      	str	r2, [r3, #52]	@ 0x34
 80093a0:	e029      	b.n	80093f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093a8:	d10a      	bne.n	80093c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fb64 	bl	8009a78 <SD_WideBus_Enable>
 80093b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	431a      	orrs	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80093be:	e01a      	b.n	80093f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10a      	bne.n	80093dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fba1 	bl	8009b0e <SD_WideBus_Disable>
 80093cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	431a      	orrs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80093da:	e00c      	b.n	80093f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80093e8:	e005      	b.n	80093f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d007      	beq.n	800940e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a5f      	ldr	r2, [pc, #380]	@ (8009580 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009404:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800940c:	e096      	b.n	800953c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800940e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009412:	f04f 0100 	mov.w	r1, #0
 8009416:	f7fe f9e1 	bl	80077dc <HAL_RCCEx_GetPeriphCLKFreq>
 800941a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 8083 	beq.w	800952a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	695a      	ldr	r2, [r3, #20]
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	4950      	ldr	r1, [pc, #320]	@ (8009584 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009442:	fba1 1303 	umull	r1, r3, r1, r3
 8009446:	0e1b      	lsrs	r3, r3, #24
 8009448:	429a      	cmp	r2, r3
 800944a:	d303      	bcc.n	8009454 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	61bb      	str	r3, [r7, #24]
 8009452:	e05a      	b.n	800950a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800945c:	d103      	bne.n	8009466 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	61bb      	str	r3, [r7, #24]
 8009464:	e051      	b.n	800950a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800946a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800946e:	d126      	bne.n	80094be <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	695b      	ldr	r3, [r3, #20]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10e      	bne.n	8009496 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	4a43      	ldr	r2, [pc, #268]	@ (8009588 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d906      	bls.n	800948e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	4a40      	ldr	r2, [pc, #256]	@ (8009584 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009484:	fba2 2303 	umull	r2, r3, r2, r3
 8009488:	0e5b      	lsrs	r3, r3, #25
 800948a:	61bb      	str	r3, [r7, #24]
 800948c:	e03d      	b.n	800950a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	61bb      	str	r3, [r7, #24]
 8009494:	e039      	b.n	800950a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	69fa      	ldr	r2, [r7, #28]
 800949e:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a2:	4a39      	ldr	r2, [pc, #228]	@ (8009588 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d906      	bls.n	80094b6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	4a36      	ldr	r2, [pc, #216]	@ (8009584 <HAL_SD_ConfigWideBusOperation+0x218>)
 80094ac:	fba2 2303 	umull	r2, r3, r2, r3
 80094b0:	0e5b      	lsrs	r3, r3, #25
 80094b2:	61bb      	str	r3, [r7, #24]
 80094b4:	e029      	b.n	800950a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	61bb      	str	r3, [r7, #24]
 80094bc:	e025      	b.n	800950a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10e      	bne.n	80094e4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	4a30      	ldr	r2, [pc, #192]	@ (800958c <HAL_SD_ConfigWideBusOperation+0x220>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d906      	bls.n	80094dc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	4a2c      	ldr	r2, [pc, #176]	@ (8009584 <HAL_SD_ConfigWideBusOperation+0x218>)
 80094d2:	fba2 2303 	umull	r2, r3, r2, r3
 80094d6:	0e1b      	lsrs	r3, r3, #24
 80094d8:	61bb      	str	r3, [r7, #24]
 80094da:	e016      	b.n	800950a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	61bb      	str	r3, [r7, #24]
 80094e2:	e012      	b.n	800950a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	69fa      	ldr	r2, [r7, #28]
 80094ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f0:	4a26      	ldr	r2, [pc, #152]	@ (800958c <HAL_SD_ConfigWideBusOperation+0x220>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d906      	bls.n	8009504 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	4a22      	ldr	r2, [pc, #136]	@ (8009584 <HAL_SD_ConfigWideBusOperation+0x218>)
 80094fa:	fba2 2303 	umull	r2, r3, r2, r3
 80094fe:	0e1b      	lsrs	r3, r3, #24
 8009500:	61bb      	str	r3, [r7, #24]
 8009502:	e002      	b.n	800950a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681c      	ldr	r4, [r3, #0]
 800950e:	466a      	mov	r2, sp
 8009510:	f107 0314 	add.w	r3, r7, #20
 8009514:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009518:	e882 0003 	stmia.w	r2, {r0, r1}
 800951c:	f107 0308 	add.w	r3, r7, #8
 8009520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009522:	4620      	mov	r0, r4
 8009524:	f003 ff2c 	bl	800d380 <SDMMC_Init>
 8009528:	e008      	b.n	800953c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800952e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009544:	4618      	mov	r0, r3
 8009546:	f003 ffe7 	bl	800d518 <SDMMC_CmdBlockLength>
 800954a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00c      	beq.n	800956c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a0a      	ldr	r2, [pc, #40]	@ (8009580 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009558:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009578:	4618      	mov	r0, r3
 800957a:	372c      	adds	r7, #44	@ 0x2c
 800957c:	46bd      	mov	sp, r7
 800957e:	bd90      	pop	{r4, r7, pc}
 8009580:	1fe00fff 	.word	0x1fe00fff
 8009584:	55e63b89 	.word	0x55e63b89
 8009588:	02faf080 	.word	0x02faf080
 800958c:	017d7840 	.word	0x017d7840

08009590 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800959c:	f107 030c 	add.w	r3, r7, #12
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fa40 	bl	8009a28 <SD_SendStatus>
 80095a8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	0a5b      	lsrs	r3, r3, #9
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80095c6:	693b      	ldr	r3, [r7, #16]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b090      	sub	sp, #64	@ 0x40
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80095dc:	f7f9 ffc8 	bl	8003570 <HAL_GetTick>
 80095e0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f003 ff12 	bl	800d410 <SDMMC_GetPowerState>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d102      	bne.n	80095f8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80095f6:	e0b5      	b.n	8009764 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d02e      	beq.n	800965e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4618      	mov	r0, r3
 8009606:	f004 f893 	bl	800d730 <SDMMC_CmdSendCID>
 800960a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800960c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <SD_InitCard+0x46>
    {
      return errorstate;
 8009612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009614:	e0a6      	b.n	8009764 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2100      	movs	r1, #0
 800961c:	4618      	mov	r0, r3
 800961e:	f003 ff3c 	bl	800d49a <SDMMC_GetResponse>
 8009622:	4602      	mov	r2, r0
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2104      	movs	r1, #4
 800962e:	4618      	mov	r0, r3
 8009630:	f003 ff33 	bl	800d49a <SDMMC_GetResponse>
 8009634:	4602      	mov	r2, r0
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2108      	movs	r1, #8
 8009640:	4618      	mov	r0, r3
 8009642:	f003 ff2a 	bl	800d49a <SDMMC_GetResponse>
 8009646:	4602      	mov	r2, r0
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	210c      	movs	r1, #12
 8009652:	4618      	mov	r0, r3
 8009654:	f003 ff21 	bl	800d49a <SDMMC_GetResponse>
 8009658:	4602      	mov	r2, r0
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009662:	2b03      	cmp	r3, #3
 8009664:	d01d      	beq.n	80096a2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009666:	e019      	b.n	800969c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f107 020a 	add.w	r2, r7, #10
 8009670:	4611      	mov	r1, r2
 8009672:	4618      	mov	r0, r3
 8009674:	f004 f89b 	bl	800d7ae <SDMMC_CmdSetRelAdd>
 8009678:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800967a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	e06f      	b.n	8009764 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009684:	f7f9 ff74 	bl	8003570 <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009692:	4293      	cmp	r3, r2
 8009694:	d902      	bls.n	800969c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009696:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800969a:	e063      	b.n	8009764 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800969c:	897b      	ldrh	r3, [r7, #10]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d0e2      	beq.n	8009668 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d036      	beq.n	8009718 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80096aa:	897b      	ldrh	r3, [r7, #10]
 80096ac:	461a      	mov	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ba:	041b      	lsls	r3, r3, #16
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f004 f855 	bl	800d76e <SDMMC_CmdSendCSD>
 80096c4:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80096c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <SD_InitCard+0x100>
    {
      return errorstate;
 80096cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ce:	e049      	b.n	8009764 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2100      	movs	r1, #0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f003 fedf 	bl	800d49a <SDMMC_GetResponse>
 80096dc:	4602      	mov	r2, r0
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2104      	movs	r1, #4
 80096e8:	4618      	mov	r0, r3
 80096ea:	f003 fed6 	bl	800d49a <SDMMC_GetResponse>
 80096ee:	4602      	mov	r2, r0
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2108      	movs	r1, #8
 80096fa:	4618      	mov	r0, r3
 80096fc:	f003 fecd 	bl	800d49a <SDMMC_GetResponse>
 8009700:	4602      	mov	r2, r0
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	210c      	movs	r1, #12
 800970c:	4618      	mov	r0, r3
 800970e:	f003 fec4 	bl	800d49a <SDMMC_GetResponse>
 8009712:	4602      	mov	r2, r0
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2104      	movs	r1, #4
 800971e:	4618      	mov	r0, r3
 8009720:	f003 febb 	bl	800d49a <SDMMC_GetResponse>
 8009724:	4603      	mov	r3, r0
 8009726:	0d1a      	lsrs	r2, r3, #20
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800972c:	f107 030c 	add.w	r3, r7, #12
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7ff fbb8 	bl	8008ea8 <HAL_SD_GetCardCSD>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800973e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009742:	e00f      	b.n	8009764 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800974c:	041b      	lsls	r3, r3, #16
 800974e:	4619      	mov	r1, r3
 8009750:	4610      	mov	r0, r2
 8009752:	f003 ff04 	bl	800d55e <SDMMC_CmdSelDesel>
 8009756:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <SD_InitCard+0x192>
  {
    return errorstate;
 800975e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009760:	e000      	b.n	8009764 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3740      	adds	r7, #64	@ 0x40
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f003 ff0d 	bl	800d5a4 <SDMMC_CmdGoIdleState>
 800978a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	e072      	b.n	800987c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4618      	mov	r0, r3
 800979c:	f003 ff20 	bl	800d5e0 <SDMMC_CmdOperCond>
 80097a0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097a8:	d10d      	bne.n	80097c6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f003 fef5 	bl	800d5a4 <SDMMC_CmdGoIdleState>
 80097ba:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d004      	beq.n	80097cc <SD_PowerON+0x60>
    {
      return errorstate;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	e05a      	b.n	800987c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d137      	bne.n	8009844 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2100      	movs	r1, #0
 80097da:	4618      	mov	r0, r3
 80097dc:	f003 ff20 	bl	800d620 <SDMMC_CmdAppCommand>
 80097e0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d02d      	beq.n	8009844 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097e8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80097ec:	e046      	b.n	800987c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2100      	movs	r1, #0
 80097f4:	4618      	mov	r0, r3
 80097f6:	f003 ff13 	bl	800d620 <SDMMC_CmdAppCommand>
 80097fa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	e03a      	b.n	800987c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	491e      	ldr	r1, [pc, #120]	@ (8009884 <SD_PowerON+0x118>)
 800980c:	4618      	mov	r0, r3
 800980e:	f003 ff2a 	bl	800d666 <SDMMC_CmdAppOperCommand>
 8009812:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800981a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800981e:	e02d      	b.n	800987c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2100      	movs	r1, #0
 8009826:	4618      	mov	r0, r3
 8009828:	f003 fe37 	bl	800d49a <SDMMC_GetResponse>
 800982c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	0fdb      	lsrs	r3, r3, #31
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <SD_PowerON+0xce>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <SD_PowerON+0xd0>
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]

    count++;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	3301      	adds	r3, #1
 8009842:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800984a:	4293      	cmp	r3, r2
 800984c:	d802      	bhi.n	8009854 <SD_PowerON+0xe8>
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0cc      	beq.n	80097ee <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800985a:	4293      	cmp	r3, r2
 800985c:	d902      	bls.n	8009864 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800985e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009862:	e00b      	b.n	800987c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	c1100000 	.word	0xc1100000

08009888 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08c      	sub	sp, #48	@ 0x30
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009892:	f7f9 fe6d 	bl	8003570 <HAL_GetTick>
 8009896:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2100      	movs	r1, #0
 80098a2:	4618      	mov	r0, r3
 80098a4:	f003 fdf9 	bl	800d49a <SDMMC_GetResponse>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098b2:	d102      	bne.n	80098ba <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80098b8:	e0b0      	b.n	8009a1c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2140      	movs	r1, #64	@ 0x40
 80098c0:	4618      	mov	r0, r3
 80098c2:	f003 fe29 	bl	800d518 <SDMMC_CmdBlockLength>
 80098c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d005      	beq.n	80098da <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	e0a0      	b.n	8009a1c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098e2:	041b      	lsls	r3, r3, #16
 80098e4:	4619      	mov	r1, r3
 80098e6:	4610      	mov	r0, r2
 80098e8:	f003 fe9a 	bl	800d620 <SDMMC_CmdAppCommand>
 80098ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	e08d      	b.n	8009a1c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009900:	f04f 33ff 	mov.w	r3, #4294967295
 8009904:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009906:	2340      	movs	r3, #64	@ 0x40
 8009908:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800990a:	2360      	movs	r3, #96	@ 0x60
 800990c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800990e:	2302      	movs	r3, #2
 8009910:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009912:	2300      	movs	r3, #0
 8009914:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009916:	2301      	movs	r3, #1
 8009918:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f107 0208 	add.w	r2, r7, #8
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f003 fdcb 	bl	800d4c0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4618      	mov	r0, r3
 8009930:	f003 ff82 	bl	800d838 <SDMMC_CmdStatusRegister>
 8009934:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d02b      	beq.n	8009994 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	e069      	b.n	8009a1c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800994e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d013      	beq.n	800997e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009956:	2300      	movs	r3, #0
 8009958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800995a:	e00d      	b.n	8009978 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4618      	mov	r0, r3
 8009962:	f003 fd37 	bl	800d3d4 <SDMMC_ReadFIFO>
 8009966:	4602      	mov	r2, r0
 8009968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996a:	601a      	str	r2, [r3, #0]
        pData++;
 800996c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996e:	3304      	adds	r3, #4
 8009970:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009974:	3301      	adds	r3, #1
 8009976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800997a:	2b07      	cmp	r3, #7
 800997c:	d9ee      	bls.n	800995c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800997e:	f7f9 fdf7 	bl	8003570 <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998c:	d102      	bne.n	8009994 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800998e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009992:	e043      	b.n	8009a1c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800999a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0d2      	beq.n	8009948 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80099b0:	2308      	movs	r3, #8
 80099b2:	e033      	b.n	8009a1c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80099c2:	2302      	movs	r3, #2
 80099c4:	e02a      	b.n	8009a1c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d017      	beq.n	8009a04 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80099d4:	2320      	movs	r3, #32
 80099d6:	e021      	b.n	8009a1c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4618      	mov	r0, r3
 80099de:	f003 fcf9 	bl	800d3d4 <SDMMC_ReadFIFO>
 80099e2:	4602      	mov	r2, r0
 80099e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e6:	601a      	str	r2, [r3, #0]
    pData++;
 80099e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ea:	3304      	adds	r3, #4
 80099ec:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80099ee:	f7f9 fdbf 	bl	8003570 <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fc:	d102      	bne.n	8009a04 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80099fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a02:	e00b      	b.n	8009a1c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e2      	bne.n	80099d8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a03      	ldr	r2, [pc, #12]	@ (8009a24 <SD_SendSDStatus+0x19c>)
 8009a18:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3730      	adds	r7, #48	@ 0x30
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	18000f3a 	.word	0x18000f3a

08009a28 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d102      	bne.n	8009a3e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a3c:	e018      	b.n	8009a70 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a46:	041b      	lsls	r3, r3, #16
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f003 fed1 	bl	800d7f2 <SDMMC_CmdSendStatus>
 8009a50:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	e009      	b.n	8009a70 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2100      	movs	r1, #0
 8009a62:	4618      	mov	r0, r3
 8009a64:	f003 fd19 	bl	800d49a <SDMMC_GetResponse>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	2300      	movs	r3, #0
 8009a86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f003 fd03 	bl	800d49a <SDMMC_GetResponse>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a9e:	d102      	bne.n	8009aa6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009aa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009aa4:	e02f      	b.n	8009b06 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009aa6:	f107 030c 	add.w	r3, r7, #12
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f879 	bl	8009ba4 <SD_FindSCR>
 8009ab2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	e023      	b.n	8009b06 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d01c      	beq.n	8009b02 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ad0:	041b      	lsls	r3, r3, #16
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	f003 fda3 	bl	800d620 <SDMMC_CmdAppCommand>
 8009ada:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	e00f      	b.n	8009b06 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2102      	movs	r1, #2
 8009aec:	4618      	mov	r0, r3
 8009aee:	f003 fdda 	bl	800d6a6 <SDMMC_CmdBusWidth>
 8009af2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	e003      	b.n	8009b06 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e001      	b.n	8009b06 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b02:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3718      	adds	r7, #24
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b086      	sub	sp, #24
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2100      	movs	r1, #0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f003 fcb8 	bl	800d49a <SDMMC_GetResponse>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b34:	d102      	bne.n	8009b3c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b3a:	e02f      	b.n	8009b9c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b3c:	f107 030c 	add.w	r3, r7, #12
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f82e 	bl	8009ba4 <SD_FindSCR>
 8009b48:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	e023      	b.n	8009b9c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d01c      	beq.n	8009b98 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b66:	041b      	lsls	r3, r3, #16
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	f003 fd58 	bl	800d620 <SDMMC_CmdAppCommand>
 8009b70:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	e00f      	b.n	8009b9c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2100      	movs	r1, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f003 fd8f 	bl	800d6a6 <SDMMC_CmdBusWidth>
 8009b88:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	e003      	b.n	8009b9c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b94:	2300      	movs	r3, #0
 8009b96:	e001      	b.n	8009b9c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b98:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3718      	adds	r7, #24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08e      	sub	sp, #56	@ 0x38
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009bae:	f7f9 fcdf 	bl	8003570 <HAL_GetTick>
 8009bb2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60bb      	str	r3, [r7, #8]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2108      	movs	r1, #8
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f003 fca4 	bl	800d518 <SDMMC_CmdBlockLength>
 8009bd0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <SD_FindSCR+0x38>
  {
    return errorstate;
 8009bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bda:	e0ad      	b.n	8009d38 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009be4:	041b      	lsls	r3, r3, #16
 8009be6:	4619      	mov	r1, r3
 8009be8:	4610      	mov	r0, r2
 8009bea:	f003 fd19 	bl	800d620 <SDMMC_CmdAppCommand>
 8009bee:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <SD_FindSCR+0x56>
  {
    return errorstate;
 8009bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf8:	e09e      	b.n	8009d38 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009c00:	2308      	movs	r3, #8
 8009c02:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009c04:	2330      	movs	r3, #48	@ 0x30
 8009c06:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c10:	2301      	movs	r3, #1
 8009c12:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f107 0210 	add.w	r2, r7, #16
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f003 fc4e 	bl	800d4c0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f003 fd5f 	bl	800d6ec <SDMMC_CmdSendSCR>
 8009c2e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d027      	beq.n	8009c86 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c38:	e07e      	b.n	8009d38 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d113      	bne.n	8009c70 <SD_FindSCR+0xcc>
 8009c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d110      	bne.n	8009c70 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f003 fbbe 	bl	800d3d4 <SDMMC_ReadFIFO>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f003 fbb7 	bl	800d3d4 <SDMMC_ReadFIFO>
 8009c66:	4603      	mov	r3, r0
 8009c68:	60fb      	str	r3, [r7, #12]
      index++;
 8009c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c70:	f7f9 fc7e 	bl	8003570 <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7e:	d102      	bne.n	8009c86 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c84:	e058      	b.n	8009d38 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c8c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009c90:	4013      	ands	r3, r2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0d1      	beq.n	8009c3a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c9c:	f003 0308 	and.w	r3, r3, #8
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d005      	beq.n	8009cb0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2208      	movs	r2, #8
 8009caa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009cac:	2308      	movs	r3, #8
 8009cae:	e043      	b.n	8009d38 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	e036      	b.n	8009d38 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d005      	beq.n	8009ce4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	e029      	b.n	8009d38 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a15      	ldr	r2, [pc, #84]	@ (8009d40 <SD_FindSCR+0x19c>)
 8009cea:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	061a      	lsls	r2, r3, #24
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009cf8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	0a1b      	lsrs	r3, r3, #8
 8009cfe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009d02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	0e1b      	lsrs	r3, r3, #24
 8009d08:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0c:	601a      	str	r2, [r3, #0]
    scr++;
 8009d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d10:	3304      	adds	r3, #4
 8009d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	061a      	lsls	r2, r3, #24
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	021b      	lsls	r3, r3, #8
 8009d1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	0a1b      	lsrs	r3, r3, #8
 8009d26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009d2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	0e1b      	lsrs	r3, r3, #24
 8009d30:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d34:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3738      	adds	r7, #56	@ 0x38
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	18000f3a 	.word	0x18000f3a

08009d44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e10f      	b.n	8009f76 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a87      	ldr	r2, [pc, #540]	@ (8009f80 <HAL_SPI_Init+0x23c>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d00f      	beq.n	8009d86 <HAL_SPI_Init+0x42>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a86      	ldr	r2, [pc, #536]	@ (8009f84 <HAL_SPI_Init+0x240>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d00a      	beq.n	8009d86 <HAL_SPI_Init+0x42>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a84      	ldr	r2, [pc, #528]	@ (8009f88 <HAL_SPI_Init+0x244>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d005      	beq.n	8009d86 <HAL_SPI_Init+0x42>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	2b0f      	cmp	r3, #15
 8009d80:	d901      	bls.n	8009d86 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e0f7      	b.n	8009f76 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f900 	bl	8009f8c <SPI_GetPacketSize>
 8009d8c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a7b      	ldr	r2, [pc, #492]	@ (8009f80 <HAL_SPI_Init+0x23c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d00c      	beq.n	8009db2 <HAL_SPI_Init+0x6e>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a79      	ldr	r2, [pc, #484]	@ (8009f84 <HAL_SPI_Init+0x240>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d007      	beq.n	8009db2 <HAL_SPI_Init+0x6e>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a78      	ldr	r2, [pc, #480]	@ (8009f88 <HAL_SPI_Init+0x244>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d002      	beq.n	8009db2 <HAL_SPI_Init+0x6e>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b08      	cmp	r3, #8
 8009db0:	d811      	bhi.n	8009dd6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009db6:	4a72      	ldr	r2, [pc, #456]	@ (8009f80 <HAL_SPI_Init+0x23c>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d009      	beq.n	8009dd0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a70      	ldr	r2, [pc, #448]	@ (8009f84 <HAL_SPI_Init+0x240>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d004      	beq.n	8009dd0 <HAL_SPI_Init+0x8c>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a6f      	ldr	r2, [pc, #444]	@ (8009f88 <HAL_SPI_Init+0x244>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d104      	bne.n	8009dda <HAL_SPI_Init+0x96>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2b10      	cmp	r3, #16
 8009dd4:	d901      	bls.n	8009dda <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e0cd      	b.n	8009f76 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d106      	bne.n	8009df4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7f8 fb5c 	bl	80024ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2202      	movs	r2, #2
 8009df8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f022 0201 	bic.w	r2, r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009e16:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e20:	d119      	bne.n	8009e56 <HAL_SPI_Init+0x112>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e2a:	d103      	bne.n	8009e34 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d008      	beq.n	8009e46 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10c      	bne.n	8009e56 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009e40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e44:	d107      	bne.n	8009e56 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009e54:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00f      	beq.n	8009e82 <HAL_SPI_Init+0x13e>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	2b06      	cmp	r3, #6
 8009e68:	d90b      	bls.n	8009e82 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	601a      	str	r2, [r3, #0]
 8009e80:	e007      	b.n	8009e92 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	69da      	ldr	r2, [r3, #28]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea4:	ea42 0103 	orr.w	r1, r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	68da      	ldr	r2, [r3, #12]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ebc:	431a      	orrs	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec2:	431a      	orrs	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	431a      	orrs	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	431a      	orrs	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	431a      	orrs	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ef2:	ea42 0103 	orr.w	r1, r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d113      	bne.n	8009f32 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f1c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009f30:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0201 	bic.w	r2, r2, #1
 8009f40:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	40013000 	.word	0x40013000
 8009f84:	40003800 	.word	0x40003800
 8009f88:	40003c00 	.word	0x40003c00

08009f8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f98:	095b      	lsrs	r3, r3, #5
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	3307      	adds	r3, #7
 8009faa:	08db      	lsrs	r3, r3, #3
 8009fac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	fb02 f303 	mul.w	r3, r2, r3
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b082      	sub	sp, #8
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e049      	b.n	800a068 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d106      	bne.n	8009fee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7f8 fbd9 	bl	80027a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	4619      	mov	r1, r3
 800a000:	4610      	mov	r0, r2
 800a002:	f000 fa99 	bl	800a538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e049      	b.n	800a116 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d106      	bne.n	800a09c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7f8 fba4 	bl	80027e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	f000 fa42 	bl	800a538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a136:	2b01      	cmp	r3, #1
 800a138:	d101      	bne.n	800a13e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a13a:	2302      	movs	r3, #2
 800a13c:	e0ff      	b.n	800a33e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b14      	cmp	r3, #20
 800a14a:	f200 80f0 	bhi.w	800a32e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a14e:	a201      	add	r2, pc, #4	@ (adr r2, 800a154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a1a9 	.word	0x0800a1a9
 800a158:	0800a32f 	.word	0x0800a32f
 800a15c:	0800a32f 	.word	0x0800a32f
 800a160:	0800a32f 	.word	0x0800a32f
 800a164:	0800a1e9 	.word	0x0800a1e9
 800a168:	0800a32f 	.word	0x0800a32f
 800a16c:	0800a32f 	.word	0x0800a32f
 800a170:	0800a32f 	.word	0x0800a32f
 800a174:	0800a22b 	.word	0x0800a22b
 800a178:	0800a32f 	.word	0x0800a32f
 800a17c:	0800a32f 	.word	0x0800a32f
 800a180:	0800a32f 	.word	0x0800a32f
 800a184:	0800a26b 	.word	0x0800a26b
 800a188:	0800a32f 	.word	0x0800a32f
 800a18c:	0800a32f 	.word	0x0800a32f
 800a190:	0800a32f 	.word	0x0800a32f
 800a194:	0800a2ad 	.word	0x0800a2ad
 800a198:	0800a32f 	.word	0x0800a32f
 800a19c:	0800a32f 	.word	0x0800a32f
 800a1a0:	0800a32f 	.word	0x0800a32f
 800a1a4:	0800a2ed 	.word	0x0800a2ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68b9      	ldr	r1, [r7, #8]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fa74 	bl	800a69c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	699a      	ldr	r2, [r3, #24]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f042 0208 	orr.w	r2, r2, #8
 800a1c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	699a      	ldr	r2, [r3, #24]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f022 0204 	bic.w	r2, r2, #4
 800a1d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6999      	ldr	r1, [r3, #24]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	691a      	ldr	r2, [r3, #16]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	619a      	str	r2, [r3, #24]
      break;
 800a1e6:	e0a5      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68b9      	ldr	r1, [r7, #8]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 fae4 	bl	800a7bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	699a      	ldr	r2, [r3, #24]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	699a      	ldr	r2, [r3, #24]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6999      	ldr	r1, [r3, #24]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	021a      	lsls	r2, r3, #8
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	430a      	orrs	r2, r1
 800a226:	619a      	str	r2, [r3, #24]
      break;
 800a228:	e084      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68b9      	ldr	r1, [r7, #8]
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fb4d 	bl	800a8d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	69da      	ldr	r2, [r3, #28]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f042 0208 	orr.w	r2, r2, #8
 800a244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	69da      	ldr	r2, [r3, #28]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f022 0204 	bic.w	r2, r2, #4
 800a254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	69d9      	ldr	r1, [r3, #28]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	691a      	ldr	r2, [r3, #16]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	430a      	orrs	r2, r1
 800a266:	61da      	str	r2, [r3, #28]
      break;
 800a268:	e064      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68b9      	ldr	r1, [r7, #8]
 800a270:	4618      	mov	r0, r3
 800a272:	f000 fbb5 	bl	800a9e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	69da      	ldr	r2, [r3, #28]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	69da      	ldr	r2, [r3, #28]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69d9      	ldr	r1, [r3, #28]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	021a      	lsls	r2, r3, #8
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	61da      	str	r2, [r3, #28]
      break;
 800a2aa:	e043      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68b9      	ldr	r1, [r7, #8]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fbfe 	bl	800aab4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f042 0208 	orr.w	r2, r2, #8
 800a2c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 0204 	bic.w	r2, r2, #4
 800a2d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	691a      	ldr	r2, [r3, #16]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a2ea:	e023      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68b9      	ldr	r1, [r7, #8]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 fc42 	bl	800ab7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a306:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a316:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	021a      	lsls	r2, r3, #8
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	430a      	orrs	r2, r1
 800a32a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a32c:	e002      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]
      break;
 800a332:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop

0800a348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d101      	bne.n	800a364 <HAL_TIM_ConfigClockSource+0x1c>
 800a360:	2302      	movs	r3, #2
 800a362:	e0dc      	b.n	800a51e <HAL_TIM_ConfigClockSource+0x1d6>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	4b6a      	ldr	r3, [pc, #424]	@ (800a528 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a380:	4013      	ands	r3, r2
 800a382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a38a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a64      	ldr	r2, [pc, #400]	@ (800a52c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	f000 80a9 	beq.w	800a4f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a3a0:	4a62      	ldr	r2, [pc, #392]	@ (800a52c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	f200 80ae 	bhi.w	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a3a8:	4a61      	ldr	r2, [pc, #388]	@ (800a530 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	f000 80a1 	beq.w	800a4f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a3b0:	4a5f      	ldr	r2, [pc, #380]	@ (800a530 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	f200 80a6 	bhi.w	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a3b8:	4a5e      	ldr	r2, [pc, #376]	@ (800a534 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	f000 8099 	beq.w	800a4f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a3c0:	4a5c      	ldr	r2, [pc, #368]	@ (800a534 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	f200 809e 	bhi.w	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a3c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a3cc:	f000 8091 	beq.w	800a4f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a3d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a3d4:	f200 8096 	bhi.w	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a3d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3dc:	f000 8089 	beq.w	800a4f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a3e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3e4:	f200 808e 	bhi.w	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a3e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3ec:	d03e      	beq.n	800a46c <HAL_TIM_ConfigClockSource+0x124>
 800a3ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3f2:	f200 8087 	bhi.w	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a3f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3fa:	f000 8086 	beq.w	800a50a <HAL_TIM_ConfigClockSource+0x1c2>
 800a3fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a402:	d87f      	bhi.n	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a404:	2b70      	cmp	r3, #112	@ 0x70
 800a406:	d01a      	beq.n	800a43e <HAL_TIM_ConfigClockSource+0xf6>
 800a408:	2b70      	cmp	r3, #112	@ 0x70
 800a40a:	d87b      	bhi.n	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a40c:	2b60      	cmp	r3, #96	@ 0x60
 800a40e:	d050      	beq.n	800a4b2 <HAL_TIM_ConfigClockSource+0x16a>
 800a410:	2b60      	cmp	r3, #96	@ 0x60
 800a412:	d877      	bhi.n	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a414:	2b50      	cmp	r3, #80	@ 0x50
 800a416:	d03c      	beq.n	800a492 <HAL_TIM_ConfigClockSource+0x14a>
 800a418:	2b50      	cmp	r3, #80	@ 0x50
 800a41a:	d873      	bhi.n	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a41c:	2b40      	cmp	r3, #64	@ 0x40
 800a41e:	d058      	beq.n	800a4d2 <HAL_TIM_ConfigClockSource+0x18a>
 800a420:	2b40      	cmp	r3, #64	@ 0x40
 800a422:	d86f      	bhi.n	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a424:	2b30      	cmp	r3, #48	@ 0x30
 800a426:	d064      	beq.n	800a4f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a428:	2b30      	cmp	r3, #48	@ 0x30
 800a42a:	d86b      	bhi.n	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a42c:	2b20      	cmp	r3, #32
 800a42e:	d060      	beq.n	800a4f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a430:	2b20      	cmp	r3, #32
 800a432:	d867      	bhi.n	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
 800a434:	2b00      	cmp	r3, #0
 800a436:	d05c      	beq.n	800a4f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a438:	2b10      	cmp	r3, #16
 800a43a:	d05a      	beq.n	800a4f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a43c:	e062      	b.n	800a504 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a44e:	f000 fc79 	bl	800ad44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	609a      	str	r2, [r3, #8]
      break;
 800a46a:	e04f      	b.n	800a50c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a47c:	f000 fc62 	bl	800ad44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a48e:	609a      	str	r2, [r3, #8]
      break;
 800a490:	e03c      	b.n	800a50c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f000 fbd2 	bl	800ac48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2150      	movs	r1, #80	@ 0x50
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fc2c 	bl	800ad08 <TIM_ITRx_SetConfig>
      break;
 800a4b0:	e02c      	b.n	800a50c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f000 fbf1 	bl	800aca6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2160      	movs	r1, #96	@ 0x60
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 fc1c 	bl	800ad08 <TIM_ITRx_SetConfig>
      break;
 800a4d0:	e01c      	b.n	800a50c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f000 fbb2 	bl	800ac48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2140      	movs	r1, #64	@ 0x40
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 fc0c 	bl	800ad08 <TIM_ITRx_SetConfig>
      break;
 800a4f0:	e00c      	b.n	800a50c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	f000 fc03 	bl	800ad08 <TIM_ITRx_SetConfig>
      break;
 800a502:	e003      	b.n	800a50c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	73fb      	strb	r3, [r7, #15]
      break;
 800a508:	e000      	b.n	800a50c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a50a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	ffceff88 	.word	0xffceff88
 800a52c:	00100040 	.word	0x00100040
 800a530:	00100030 	.word	0x00100030
 800a534:	00100020 	.word	0x00100020

0800a538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a4a      	ldr	r2, [pc, #296]	@ (800a674 <TIM_Base_SetConfig+0x13c>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d013      	beq.n	800a578 <TIM_Base_SetConfig+0x40>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a556:	d00f      	beq.n	800a578 <TIM_Base_SetConfig+0x40>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a47      	ldr	r2, [pc, #284]	@ (800a678 <TIM_Base_SetConfig+0x140>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d00b      	beq.n	800a578 <TIM_Base_SetConfig+0x40>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a46      	ldr	r2, [pc, #280]	@ (800a67c <TIM_Base_SetConfig+0x144>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d007      	beq.n	800a578 <TIM_Base_SetConfig+0x40>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a45      	ldr	r2, [pc, #276]	@ (800a680 <TIM_Base_SetConfig+0x148>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d003      	beq.n	800a578 <TIM_Base_SetConfig+0x40>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a44      	ldr	r2, [pc, #272]	@ (800a684 <TIM_Base_SetConfig+0x14c>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d108      	bne.n	800a58a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a57e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	4313      	orrs	r3, r2
 800a588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a39      	ldr	r2, [pc, #228]	@ (800a674 <TIM_Base_SetConfig+0x13c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d027      	beq.n	800a5e2 <TIM_Base_SetConfig+0xaa>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a598:	d023      	beq.n	800a5e2 <TIM_Base_SetConfig+0xaa>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a36      	ldr	r2, [pc, #216]	@ (800a678 <TIM_Base_SetConfig+0x140>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d01f      	beq.n	800a5e2 <TIM_Base_SetConfig+0xaa>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a35      	ldr	r2, [pc, #212]	@ (800a67c <TIM_Base_SetConfig+0x144>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d01b      	beq.n	800a5e2 <TIM_Base_SetConfig+0xaa>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a34      	ldr	r2, [pc, #208]	@ (800a680 <TIM_Base_SetConfig+0x148>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d017      	beq.n	800a5e2 <TIM_Base_SetConfig+0xaa>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a33      	ldr	r2, [pc, #204]	@ (800a684 <TIM_Base_SetConfig+0x14c>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d013      	beq.n	800a5e2 <TIM_Base_SetConfig+0xaa>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a32      	ldr	r2, [pc, #200]	@ (800a688 <TIM_Base_SetConfig+0x150>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00f      	beq.n	800a5e2 <TIM_Base_SetConfig+0xaa>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a31      	ldr	r2, [pc, #196]	@ (800a68c <TIM_Base_SetConfig+0x154>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00b      	beq.n	800a5e2 <TIM_Base_SetConfig+0xaa>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a30      	ldr	r2, [pc, #192]	@ (800a690 <TIM_Base_SetConfig+0x158>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d007      	beq.n	800a5e2 <TIM_Base_SetConfig+0xaa>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a2f      	ldr	r2, [pc, #188]	@ (800a694 <TIM_Base_SetConfig+0x15c>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d003      	beq.n	800a5e2 <TIM_Base_SetConfig+0xaa>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a2e      	ldr	r2, [pc, #184]	@ (800a698 <TIM_Base_SetConfig+0x160>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d108      	bne.n	800a5f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a16      	ldr	r2, [pc, #88]	@ (800a674 <TIM_Base_SetConfig+0x13c>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d00f      	beq.n	800a640 <TIM_Base_SetConfig+0x108>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a18      	ldr	r2, [pc, #96]	@ (800a684 <TIM_Base_SetConfig+0x14c>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d00b      	beq.n	800a640 <TIM_Base_SetConfig+0x108>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a17      	ldr	r2, [pc, #92]	@ (800a688 <TIM_Base_SetConfig+0x150>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d007      	beq.n	800a640 <TIM_Base_SetConfig+0x108>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a16      	ldr	r2, [pc, #88]	@ (800a68c <TIM_Base_SetConfig+0x154>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d003      	beq.n	800a640 <TIM_Base_SetConfig+0x108>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a15      	ldr	r2, [pc, #84]	@ (800a690 <TIM_Base_SetConfig+0x158>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d103      	bne.n	800a648 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	691a      	ldr	r2, [r3, #16]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b01      	cmp	r3, #1
 800a658:	d105      	bne.n	800a666 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	f023 0201 	bic.w	r2, r3, #1
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	611a      	str	r2, [r3, #16]
  }
}
 800a666:	bf00      	nop
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	40010000 	.word	0x40010000
 800a678:	40000400 	.word	0x40000400
 800a67c:	40000800 	.word	0x40000800
 800a680:	40000c00 	.word	0x40000c00
 800a684:	40010400 	.word	0x40010400
 800a688:	40014000 	.word	0x40014000
 800a68c:	40014400 	.word	0x40014400
 800a690:	40014800 	.word	0x40014800
 800a694:	4000e000 	.word	0x4000e000
 800a698:	4000e400 	.word	0x4000e400

0800a69c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	f023 0201 	bic.w	r2, r3, #1
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4b37      	ldr	r3, [pc, #220]	@ (800a7a4 <TIM_OC1_SetConfig+0x108>)
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f023 0303 	bic.w	r3, r3, #3
 800a6d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f023 0302 	bic.w	r3, r3, #2
 800a6e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4a2d      	ldr	r2, [pc, #180]	@ (800a7a8 <TIM_OC1_SetConfig+0x10c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d00f      	beq.n	800a718 <TIM_OC1_SetConfig+0x7c>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a2c      	ldr	r2, [pc, #176]	@ (800a7ac <TIM_OC1_SetConfig+0x110>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d00b      	beq.n	800a718 <TIM_OC1_SetConfig+0x7c>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a2b      	ldr	r2, [pc, #172]	@ (800a7b0 <TIM_OC1_SetConfig+0x114>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d007      	beq.n	800a718 <TIM_OC1_SetConfig+0x7c>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a2a      	ldr	r2, [pc, #168]	@ (800a7b4 <TIM_OC1_SetConfig+0x118>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d003      	beq.n	800a718 <TIM_OC1_SetConfig+0x7c>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a29      	ldr	r2, [pc, #164]	@ (800a7b8 <TIM_OC1_SetConfig+0x11c>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d10c      	bne.n	800a732 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	f023 0308 	bic.w	r3, r3, #8
 800a71e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	4313      	orrs	r3, r2
 800a728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f023 0304 	bic.w	r3, r3, #4
 800a730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a1c      	ldr	r2, [pc, #112]	@ (800a7a8 <TIM_OC1_SetConfig+0x10c>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d00f      	beq.n	800a75a <TIM_OC1_SetConfig+0xbe>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a1b      	ldr	r2, [pc, #108]	@ (800a7ac <TIM_OC1_SetConfig+0x110>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d00b      	beq.n	800a75a <TIM_OC1_SetConfig+0xbe>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a1a      	ldr	r2, [pc, #104]	@ (800a7b0 <TIM_OC1_SetConfig+0x114>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d007      	beq.n	800a75a <TIM_OC1_SetConfig+0xbe>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a19      	ldr	r2, [pc, #100]	@ (800a7b4 <TIM_OC1_SetConfig+0x118>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d003      	beq.n	800a75a <TIM_OC1_SetConfig+0xbe>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a18      	ldr	r2, [pc, #96]	@ (800a7b8 <TIM_OC1_SetConfig+0x11c>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d111      	bne.n	800a77e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	4313      	orrs	r3, r2
 800a772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	693a      	ldr	r2, [r7, #16]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	621a      	str	r2, [r3, #32]
}
 800a798:	bf00      	nop
 800a79a:	371c      	adds	r7, #28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	fffeff8f 	.word	0xfffeff8f
 800a7a8:	40010000 	.word	0x40010000
 800a7ac:	40010400 	.word	0x40010400
 800a7b0:	40014000 	.word	0x40014000
 800a7b4:	40014400 	.word	0x40014400
 800a7b8:	40014800 	.word	0x40014800

0800a7bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	f023 0210 	bic.w	r2, r3, #16
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	4b34      	ldr	r3, [pc, #208]	@ (800a8b8 <TIM_OC2_SetConfig+0xfc>)
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	021b      	lsls	r3, r3, #8
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f023 0320 	bic.w	r3, r3, #32
 800a806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	011b      	lsls	r3, r3, #4
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4313      	orrs	r3, r2
 800a812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a29      	ldr	r2, [pc, #164]	@ (800a8bc <TIM_OC2_SetConfig+0x100>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d003      	beq.n	800a824 <TIM_OC2_SetConfig+0x68>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a28      	ldr	r2, [pc, #160]	@ (800a8c0 <TIM_OC2_SetConfig+0x104>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d10d      	bne.n	800a840 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a82a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	011b      	lsls	r3, r3, #4
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	4313      	orrs	r3, r2
 800a836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a83e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a1e      	ldr	r2, [pc, #120]	@ (800a8bc <TIM_OC2_SetConfig+0x100>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d00f      	beq.n	800a868 <TIM_OC2_SetConfig+0xac>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a1d      	ldr	r2, [pc, #116]	@ (800a8c0 <TIM_OC2_SetConfig+0x104>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d00b      	beq.n	800a868 <TIM_OC2_SetConfig+0xac>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a1c      	ldr	r2, [pc, #112]	@ (800a8c4 <TIM_OC2_SetConfig+0x108>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d007      	beq.n	800a868 <TIM_OC2_SetConfig+0xac>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a1b      	ldr	r2, [pc, #108]	@ (800a8c8 <TIM_OC2_SetConfig+0x10c>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d003      	beq.n	800a868 <TIM_OC2_SetConfig+0xac>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a1a      	ldr	r2, [pc, #104]	@ (800a8cc <TIM_OC2_SetConfig+0x110>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d113      	bne.n	800a890 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a86e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a876:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	4313      	orrs	r3, r2
 800a882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	621a      	str	r2, [r3, #32]
}
 800a8aa:	bf00      	nop
 800a8ac:	371c      	adds	r7, #28
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	feff8fff 	.word	0xfeff8fff
 800a8bc:	40010000 	.word	0x40010000
 800a8c0:	40010400 	.word	0x40010400
 800a8c4:	40014000 	.word	0x40014000
 800a8c8:	40014400 	.word	0x40014400
 800a8cc:	40014800 	.word	0x40014800

0800a8d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4b33      	ldr	r3, [pc, #204]	@ (800a9c8 <TIM_OC3_SetConfig+0xf8>)
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f023 0303 	bic.w	r3, r3, #3
 800a906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4313      	orrs	r3, r2
 800a910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	021b      	lsls	r3, r3, #8
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	4313      	orrs	r3, r2
 800a924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a28      	ldr	r2, [pc, #160]	@ (800a9cc <TIM_OC3_SetConfig+0xfc>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d003      	beq.n	800a936 <TIM_OC3_SetConfig+0x66>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a27      	ldr	r2, [pc, #156]	@ (800a9d0 <TIM_OC3_SetConfig+0x100>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d10d      	bne.n	800a952 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a93c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	021b      	lsls	r3, r3, #8
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	4313      	orrs	r3, r2
 800a948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a1d      	ldr	r2, [pc, #116]	@ (800a9cc <TIM_OC3_SetConfig+0xfc>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d00f      	beq.n	800a97a <TIM_OC3_SetConfig+0xaa>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a1c      	ldr	r2, [pc, #112]	@ (800a9d0 <TIM_OC3_SetConfig+0x100>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d00b      	beq.n	800a97a <TIM_OC3_SetConfig+0xaa>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a1b      	ldr	r2, [pc, #108]	@ (800a9d4 <TIM_OC3_SetConfig+0x104>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d007      	beq.n	800a97a <TIM_OC3_SetConfig+0xaa>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a1a      	ldr	r2, [pc, #104]	@ (800a9d8 <TIM_OC3_SetConfig+0x108>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d003      	beq.n	800a97a <TIM_OC3_SetConfig+0xaa>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a19      	ldr	r2, [pc, #100]	@ (800a9dc <TIM_OC3_SetConfig+0x10c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d113      	bne.n	800a9a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	011b      	lsls	r3, r3, #4
 800a990:	693a      	ldr	r2, [r7, #16]
 800a992:	4313      	orrs	r3, r2
 800a994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	685a      	ldr	r2, [r3, #4]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	621a      	str	r2, [r3, #32]
}
 800a9bc:	bf00      	nop
 800a9be:	371c      	adds	r7, #28
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	fffeff8f 	.word	0xfffeff8f
 800a9cc:	40010000 	.word	0x40010000
 800a9d0:	40010400 	.word	0x40010400
 800a9d4:	40014000 	.word	0x40014000
 800a9d8:	40014400 	.word	0x40014400
 800a9dc:	40014800 	.word	0x40014800

0800a9e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	4b24      	ldr	r3, [pc, #144]	@ (800aa9c <TIM_OC4_SetConfig+0xbc>)
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	021b      	lsls	r3, r3, #8
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	031b      	lsls	r3, r3, #12
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a19      	ldr	r2, [pc, #100]	@ (800aaa0 <TIM_OC4_SetConfig+0xc0>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d00f      	beq.n	800aa60 <TIM_OC4_SetConfig+0x80>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a18      	ldr	r2, [pc, #96]	@ (800aaa4 <TIM_OC4_SetConfig+0xc4>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d00b      	beq.n	800aa60 <TIM_OC4_SetConfig+0x80>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a17      	ldr	r2, [pc, #92]	@ (800aaa8 <TIM_OC4_SetConfig+0xc8>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d007      	beq.n	800aa60 <TIM_OC4_SetConfig+0x80>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a16      	ldr	r2, [pc, #88]	@ (800aaac <TIM_OC4_SetConfig+0xcc>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d003      	beq.n	800aa60 <TIM_OC4_SetConfig+0x80>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a15      	ldr	r2, [pc, #84]	@ (800aab0 <TIM_OC4_SetConfig+0xd0>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d109      	bne.n	800aa74 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	019b      	lsls	r3, r3, #6
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	621a      	str	r2, [r3, #32]
}
 800aa8e:	bf00      	nop
 800aa90:	371c      	adds	r7, #28
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	feff8fff 	.word	0xfeff8fff
 800aaa0:	40010000 	.word	0x40010000
 800aaa4:	40010400 	.word	0x40010400
 800aaa8:	40014000 	.word	0x40014000
 800aaac:	40014400 	.word	0x40014400
 800aab0:	40014800 	.word	0x40014800

0800aab4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	4b21      	ldr	r3, [pc, #132]	@ (800ab64 <TIM_OC5_SetConfig+0xb0>)
 800aae0:	4013      	ands	r3, r2
 800aae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aaf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	041b      	lsls	r3, r3, #16
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a18      	ldr	r2, [pc, #96]	@ (800ab68 <TIM_OC5_SetConfig+0xb4>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d00f      	beq.n	800ab2a <TIM_OC5_SetConfig+0x76>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a17      	ldr	r2, [pc, #92]	@ (800ab6c <TIM_OC5_SetConfig+0xb8>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d00b      	beq.n	800ab2a <TIM_OC5_SetConfig+0x76>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a16      	ldr	r2, [pc, #88]	@ (800ab70 <TIM_OC5_SetConfig+0xbc>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d007      	beq.n	800ab2a <TIM_OC5_SetConfig+0x76>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a15      	ldr	r2, [pc, #84]	@ (800ab74 <TIM_OC5_SetConfig+0xc0>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d003      	beq.n	800ab2a <TIM_OC5_SetConfig+0x76>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a14      	ldr	r2, [pc, #80]	@ (800ab78 <TIM_OC5_SetConfig+0xc4>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d109      	bne.n	800ab3e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	021b      	lsls	r3, r3, #8
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	621a      	str	r2, [r3, #32]
}
 800ab58:	bf00      	nop
 800ab5a:	371c      	adds	r7, #28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	fffeff8f 	.word	0xfffeff8f
 800ab68:	40010000 	.word	0x40010000
 800ab6c:	40010400 	.word	0x40010400
 800ab70:	40014000 	.word	0x40014000
 800ab74:	40014400 	.word	0x40014400
 800ab78:	40014800 	.word	0x40014800

0800ab7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	4b22      	ldr	r3, [pc, #136]	@ (800ac30 <TIM_OC6_SetConfig+0xb4>)
 800aba8:	4013      	ands	r3, r2
 800abaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	021b      	lsls	r3, r3, #8
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	051b      	lsls	r3, r3, #20
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	4313      	orrs	r3, r2
 800abca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a19      	ldr	r2, [pc, #100]	@ (800ac34 <TIM_OC6_SetConfig+0xb8>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d00f      	beq.n	800abf4 <TIM_OC6_SetConfig+0x78>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a18      	ldr	r2, [pc, #96]	@ (800ac38 <TIM_OC6_SetConfig+0xbc>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d00b      	beq.n	800abf4 <TIM_OC6_SetConfig+0x78>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a17      	ldr	r2, [pc, #92]	@ (800ac3c <TIM_OC6_SetConfig+0xc0>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d007      	beq.n	800abf4 <TIM_OC6_SetConfig+0x78>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a16      	ldr	r2, [pc, #88]	@ (800ac40 <TIM_OC6_SetConfig+0xc4>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d003      	beq.n	800abf4 <TIM_OC6_SetConfig+0x78>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a15      	ldr	r2, [pc, #84]	@ (800ac44 <TIM_OC6_SetConfig+0xc8>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d109      	bne.n	800ac08 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800abfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	029b      	lsls	r3, r3, #10
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	621a      	str	r2, [r3, #32]
}
 800ac22:	bf00      	nop
 800ac24:	371c      	adds	r7, #28
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	feff8fff 	.word	0xfeff8fff
 800ac34:	40010000 	.word	0x40010000
 800ac38:	40010400 	.word	0x40010400
 800ac3c:	40014000 	.word	0x40014000
 800ac40:	40014400 	.word	0x40014400
 800ac44:	40014800 	.word	0x40014800

0800ac48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	f023 0201 	bic.w	r2, r3, #1
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f023 030a 	bic.w	r3, r3, #10
 800ac84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	621a      	str	r2, [r3, #32]
}
 800ac9a:	bf00      	nop
 800ac9c:	371c      	adds	r7, #28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b087      	sub	sp, #28
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	f023 0210 	bic.w	r2, r3, #16
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800acd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	031b      	lsls	r3, r3, #12
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	4313      	orrs	r3, r2
 800acda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ace2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	011b      	lsls	r3, r3, #4
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	4313      	orrs	r3, r2
 800acec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	621a      	str	r2, [r3, #32]
}
 800acfa:	bf00      	nop
 800acfc:	371c      	adds	r7, #28
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	4b09      	ldr	r3, [pc, #36]	@ (800ad40 <TIM_ITRx_SetConfig+0x38>)
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	f043 0307 	orr.w	r3, r3, #7
 800ad2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	609a      	str	r2, [r3, #8]
}
 800ad32:	bf00      	nop
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	ffcfff8f 	.word	0xffcfff8f

0800ad44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	021a      	lsls	r2, r3, #8
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	431a      	orrs	r2, r3
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	609a      	str	r2, [r3, #8]
}
 800ad78:	bf00      	nop
 800ad7a:	371c      	adds	r7, #28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d101      	bne.n	800ad9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad98:	2302      	movs	r3, #2
 800ad9a:	e077      	b.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2202      	movs	r2, #2
 800ada8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a35      	ldr	r2, [pc, #212]	@ (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d004      	beq.n	800add0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a34      	ldr	r2, [pc, #208]	@ (800ae9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d108      	bne.n	800ade2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800add6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	4313      	orrs	r3, r2
 800ade0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ade8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a25      	ldr	r2, [pc, #148]	@ (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d02c      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae0e:	d027      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a22      	ldr	r2, [pc, #136]	@ (800aea0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d022      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a21      	ldr	r2, [pc, #132]	@ (800aea4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d01d      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a1f      	ldr	r2, [pc, #124]	@ (800aea8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d018      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a1a      	ldr	r2, [pc, #104]	@ (800ae9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d013      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a1b      	ldr	r2, [pc, #108]	@ (800aeac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d00e      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a1a      	ldr	r2, [pc, #104]	@ (800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d009      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a18      	ldr	r2, [pc, #96]	@ (800aeb4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d004      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a17      	ldr	r2, [pc, #92]	@ (800aeb8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d10c      	bne.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	40010000 	.word	0x40010000
 800ae9c:	40010400 	.word	0x40010400
 800aea0:	40000400 	.word	0x40000400
 800aea4:	40000800 	.word	0x40000800
 800aea8:	40000c00 	.word	0x40000c00
 800aeac:	40001800 	.word	0x40001800
 800aeb0:	40014000 	.word	0x40014000
 800aeb4:	4000e000 	.word	0x4000e000
 800aeb8:	4000e400 	.word	0x4000e400

0800aebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aec6:	2300      	movs	r3, #0
 800aec8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d101      	bne.n	800aed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aed4:	2302      	movs	r3, #2
 800aed6:	e073      	b.n	800afc0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	4313      	orrs	r3, r2
 800af08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4313      	orrs	r3, r2
 800af16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	4313      	orrs	r3, r2
 800af24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	4313      	orrs	r3, r2
 800af32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af3e:	4313      	orrs	r3, r2
 800af40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	041b      	lsls	r3, r3, #16
 800af4e:	4313      	orrs	r3, r2
 800af50:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	69db      	ldr	r3, [r3, #28]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a19      	ldr	r2, [pc, #100]	@ (800afcc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d004      	beq.n	800af74 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a18      	ldr	r2, [pc, #96]	@ (800afd0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d11c      	bne.n	800afae <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af7e:	051b      	lsls	r3, r3, #20
 800af80:	4313      	orrs	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	4313      	orrs	r3, r2
 800af90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9c:	4313      	orrs	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	40010000 	.word	0x40010000
 800afd0:	40010400 	.word	0x40010400

0800afd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e042      	b.n	800b06c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afec:	2b00      	cmp	r3, #0
 800afee:	d106      	bne.n	800affe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7f7 fdef 	bl	8002bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2224      	movs	r2, #36	@ 0x24
 800b002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f022 0201 	bic.w	r2, r2, #1
 800b014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fe94 	bl	800bd4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f825 	bl	800b074 <UART_SetConfig>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d101      	bne.n	800b034 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e01b      	b.n	800b06c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689a      	ldr	r2, [r3, #8]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0201 	orr.w	r2, r2, #1
 800b062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 ff13 	bl	800be90 <UART_CheckIdleState>
 800b06a:	4603      	mov	r3, r0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b078:	b092      	sub	sp, #72	@ 0x48
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	689a      	ldr	r2, [r3, #8]
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	431a      	orrs	r2, r3
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	431a      	orrs	r2, r3
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	69db      	ldr	r3, [r3, #28]
 800b098:	4313      	orrs	r3, r2
 800b09a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	4bbe      	ldr	r3, [pc, #760]	@ (800b39c <UART_SetConfig+0x328>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	6812      	ldr	r2, [r2, #0]
 800b0aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4ab3      	ldr	r2, [pc, #716]	@ (800b3a0 <UART_SetConfig+0x32c>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d004      	beq.n	800b0e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	689a      	ldr	r2, [r3, #8]
 800b0e6:	4baf      	ldr	r3, [pc, #700]	@ (800b3a4 <UART_SetConfig+0x330>)
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	6812      	ldr	r2, [r2, #0]
 800b0ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b0f0:	430b      	orrs	r3, r1
 800b0f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fa:	f023 010f 	bic.w	r1, r3, #15
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	430a      	orrs	r2, r1
 800b108:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4aa6      	ldr	r2, [pc, #664]	@ (800b3a8 <UART_SetConfig+0x334>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d177      	bne.n	800b204 <UART_SetConfig+0x190>
 800b114:	4ba5      	ldr	r3, [pc, #660]	@ (800b3ac <UART_SetConfig+0x338>)
 800b116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b118:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b11c:	2b28      	cmp	r3, #40	@ 0x28
 800b11e:	d86d      	bhi.n	800b1fc <UART_SetConfig+0x188>
 800b120:	a201      	add	r2, pc, #4	@ (adr r2, 800b128 <UART_SetConfig+0xb4>)
 800b122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b126:	bf00      	nop
 800b128:	0800b1cd 	.word	0x0800b1cd
 800b12c:	0800b1fd 	.word	0x0800b1fd
 800b130:	0800b1fd 	.word	0x0800b1fd
 800b134:	0800b1fd 	.word	0x0800b1fd
 800b138:	0800b1fd 	.word	0x0800b1fd
 800b13c:	0800b1fd 	.word	0x0800b1fd
 800b140:	0800b1fd 	.word	0x0800b1fd
 800b144:	0800b1fd 	.word	0x0800b1fd
 800b148:	0800b1d5 	.word	0x0800b1d5
 800b14c:	0800b1fd 	.word	0x0800b1fd
 800b150:	0800b1fd 	.word	0x0800b1fd
 800b154:	0800b1fd 	.word	0x0800b1fd
 800b158:	0800b1fd 	.word	0x0800b1fd
 800b15c:	0800b1fd 	.word	0x0800b1fd
 800b160:	0800b1fd 	.word	0x0800b1fd
 800b164:	0800b1fd 	.word	0x0800b1fd
 800b168:	0800b1dd 	.word	0x0800b1dd
 800b16c:	0800b1fd 	.word	0x0800b1fd
 800b170:	0800b1fd 	.word	0x0800b1fd
 800b174:	0800b1fd 	.word	0x0800b1fd
 800b178:	0800b1fd 	.word	0x0800b1fd
 800b17c:	0800b1fd 	.word	0x0800b1fd
 800b180:	0800b1fd 	.word	0x0800b1fd
 800b184:	0800b1fd 	.word	0x0800b1fd
 800b188:	0800b1e5 	.word	0x0800b1e5
 800b18c:	0800b1fd 	.word	0x0800b1fd
 800b190:	0800b1fd 	.word	0x0800b1fd
 800b194:	0800b1fd 	.word	0x0800b1fd
 800b198:	0800b1fd 	.word	0x0800b1fd
 800b19c:	0800b1fd 	.word	0x0800b1fd
 800b1a0:	0800b1fd 	.word	0x0800b1fd
 800b1a4:	0800b1fd 	.word	0x0800b1fd
 800b1a8:	0800b1ed 	.word	0x0800b1ed
 800b1ac:	0800b1fd 	.word	0x0800b1fd
 800b1b0:	0800b1fd 	.word	0x0800b1fd
 800b1b4:	0800b1fd 	.word	0x0800b1fd
 800b1b8:	0800b1fd 	.word	0x0800b1fd
 800b1bc:	0800b1fd 	.word	0x0800b1fd
 800b1c0:	0800b1fd 	.word	0x0800b1fd
 800b1c4:	0800b1fd 	.word	0x0800b1fd
 800b1c8:	0800b1f5 	.word	0x0800b1f5
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1d2:	e326      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1d4:	2304      	movs	r3, #4
 800b1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1da:	e322      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1dc:	2308      	movs	r3, #8
 800b1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1e2:	e31e      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1e4:	2310      	movs	r3, #16
 800b1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ea:	e31a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1ec:	2320      	movs	r3, #32
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f2:	e316      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1f4:	2340      	movs	r3, #64	@ 0x40
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fa:	e312      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1fc:	2380      	movs	r3, #128	@ 0x80
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b202:	e30e      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a69      	ldr	r2, [pc, #420]	@ (800b3b0 <UART_SetConfig+0x33c>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d130      	bne.n	800b270 <UART_SetConfig+0x1fc>
 800b20e:	4b67      	ldr	r3, [pc, #412]	@ (800b3ac <UART_SetConfig+0x338>)
 800b210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	2b05      	cmp	r3, #5
 800b218:	d826      	bhi.n	800b268 <UART_SetConfig+0x1f4>
 800b21a:	a201      	add	r2, pc, #4	@ (adr r2, 800b220 <UART_SetConfig+0x1ac>)
 800b21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b220:	0800b239 	.word	0x0800b239
 800b224:	0800b241 	.word	0x0800b241
 800b228:	0800b249 	.word	0x0800b249
 800b22c:	0800b251 	.word	0x0800b251
 800b230:	0800b259 	.word	0x0800b259
 800b234:	0800b261 	.word	0x0800b261
 800b238:	2300      	movs	r3, #0
 800b23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b23e:	e2f0      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b240:	2304      	movs	r3, #4
 800b242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b246:	e2ec      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b248:	2308      	movs	r3, #8
 800b24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b24e:	e2e8      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b250:	2310      	movs	r3, #16
 800b252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b256:	e2e4      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b258:	2320      	movs	r3, #32
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b25e:	e2e0      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b260:	2340      	movs	r3, #64	@ 0x40
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b266:	e2dc      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b268:	2380      	movs	r3, #128	@ 0x80
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b26e:	e2d8      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a4f      	ldr	r2, [pc, #316]	@ (800b3b4 <UART_SetConfig+0x340>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d130      	bne.n	800b2dc <UART_SetConfig+0x268>
 800b27a:	4b4c      	ldr	r3, [pc, #304]	@ (800b3ac <UART_SetConfig+0x338>)
 800b27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	2b05      	cmp	r3, #5
 800b284:	d826      	bhi.n	800b2d4 <UART_SetConfig+0x260>
 800b286:	a201      	add	r2, pc, #4	@ (adr r2, 800b28c <UART_SetConfig+0x218>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b2a5 	.word	0x0800b2a5
 800b290:	0800b2ad 	.word	0x0800b2ad
 800b294:	0800b2b5 	.word	0x0800b2b5
 800b298:	0800b2bd 	.word	0x0800b2bd
 800b29c:	0800b2c5 	.word	0x0800b2c5
 800b2a0:	0800b2cd 	.word	0x0800b2cd
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2aa:	e2ba      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2ac:	2304      	movs	r3, #4
 800b2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2b2:	e2b6      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2b4:	2308      	movs	r3, #8
 800b2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ba:	e2b2      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2bc:	2310      	movs	r3, #16
 800b2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2c2:	e2ae      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2c4:	2320      	movs	r3, #32
 800b2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ca:	e2aa      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2cc:	2340      	movs	r3, #64	@ 0x40
 800b2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2d2:	e2a6      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2d4:	2380      	movs	r3, #128	@ 0x80
 800b2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2da:	e2a2      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a35      	ldr	r2, [pc, #212]	@ (800b3b8 <UART_SetConfig+0x344>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d130      	bne.n	800b348 <UART_SetConfig+0x2d4>
 800b2e6:	4b31      	ldr	r3, [pc, #196]	@ (800b3ac <UART_SetConfig+0x338>)
 800b2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2ea:	f003 0307 	and.w	r3, r3, #7
 800b2ee:	2b05      	cmp	r3, #5
 800b2f0:	d826      	bhi.n	800b340 <UART_SetConfig+0x2cc>
 800b2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2f8 <UART_SetConfig+0x284>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b311 	.word	0x0800b311
 800b2fc:	0800b319 	.word	0x0800b319
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b329 	.word	0x0800b329
 800b308:	0800b331 	.word	0x0800b331
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	2300      	movs	r3, #0
 800b312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b316:	e284      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b318:	2304      	movs	r3, #4
 800b31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b31e:	e280      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b320:	2308      	movs	r3, #8
 800b322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b326:	e27c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b328:	2310      	movs	r3, #16
 800b32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b32e:	e278      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b330:	2320      	movs	r3, #32
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b336:	e274      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b338:	2340      	movs	r3, #64	@ 0x40
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33e:	e270      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b340:	2380      	movs	r3, #128	@ 0x80
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b346:	e26c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a1b      	ldr	r2, [pc, #108]	@ (800b3bc <UART_SetConfig+0x348>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d142      	bne.n	800b3d8 <UART_SetConfig+0x364>
 800b352:	4b16      	ldr	r3, [pc, #88]	@ (800b3ac <UART_SetConfig+0x338>)
 800b354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b356:	f003 0307 	and.w	r3, r3, #7
 800b35a:	2b05      	cmp	r3, #5
 800b35c:	d838      	bhi.n	800b3d0 <UART_SetConfig+0x35c>
 800b35e:	a201      	add	r2, pc, #4	@ (adr r2, 800b364 <UART_SetConfig+0x2f0>)
 800b360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b364:	0800b37d 	.word	0x0800b37d
 800b368:	0800b385 	.word	0x0800b385
 800b36c:	0800b38d 	.word	0x0800b38d
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b3c1 	.word	0x0800b3c1
 800b378:	0800b3c9 	.word	0x0800b3c9
 800b37c:	2300      	movs	r3, #0
 800b37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b382:	e24e      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b384:	2304      	movs	r3, #4
 800b386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b38a:	e24a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b38c:	2308      	movs	r3, #8
 800b38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b392:	e246      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b394:	2310      	movs	r3, #16
 800b396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39a:	e242      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b39c:	cfff69f3 	.word	0xcfff69f3
 800b3a0:	58000c00 	.word	0x58000c00
 800b3a4:	11fff4ff 	.word	0x11fff4ff
 800b3a8:	40011000 	.word	0x40011000
 800b3ac:	58024400 	.word	0x58024400
 800b3b0:	40004400 	.word	0x40004400
 800b3b4:	40004800 	.word	0x40004800
 800b3b8:	40004c00 	.word	0x40004c00
 800b3bc:	40005000 	.word	0x40005000
 800b3c0:	2320      	movs	r3, #32
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c6:	e22c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b3c8:	2340      	movs	r3, #64	@ 0x40
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ce:	e228      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b3d0:	2380      	movs	r3, #128	@ 0x80
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3d6:	e224      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4ab1      	ldr	r2, [pc, #708]	@ (800b6a4 <UART_SetConfig+0x630>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d176      	bne.n	800b4d0 <UART_SetConfig+0x45c>
 800b3e2:	4bb1      	ldr	r3, [pc, #708]	@ (800b6a8 <UART_SetConfig+0x634>)
 800b3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b3ea:	2b28      	cmp	r3, #40	@ 0x28
 800b3ec:	d86c      	bhi.n	800b4c8 <UART_SetConfig+0x454>
 800b3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f4 <UART_SetConfig+0x380>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b499 	.word	0x0800b499
 800b3f8:	0800b4c9 	.word	0x0800b4c9
 800b3fc:	0800b4c9 	.word	0x0800b4c9
 800b400:	0800b4c9 	.word	0x0800b4c9
 800b404:	0800b4c9 	.word	0x0800b4c9
 800b408:	0800b4c9 	.word	0x0800b4c9
 800b40c:	0800b4c9 	.word	0x0800b4c9
 800b410:	0800b4c9 	.word	0x0800b4c9
 800b414:	0800b4a1 	.word	0x0800b4a1
 800b418:	0800b4c9 	.word	0x0800b4c9
 800b41c:	0800b4c9 	.word	0x0800b4c9
 800b420:	0800b4c9 	.word	0x0800b4c9
 800b424:	0800b4c9 	.word	0x0800b4c9
 800b428:	0800b4c9 	.word	0x0800b4c9
 800b42c:	0800b4c9 	.word	0x0800b4c9
 800b430:	0800b4c9 	.word	0x0800b4c9
 800b434:	0800b4a9 	.word	0x0800b4a9
 800b438:	0800b4c9 	.word	0x0800b4c9
 800b43c:	0800b4c9 	.word	0x0800b4c9
 800b440:	0800b4c9 	.word	0x0800b4c9
 800b444:	0800b4c9 	.word	0x0800b4c9
 800b448:	0800b4c9 	.word	0x0800b4c9
 800b44c:	0800b4c9 	.word	0x0800b4c9
 800b450:	0800b4c9 	.word	0x0800b4c9
 800b454:	0800b4b1 	.word	0x0800b4b1
 800b458:	0800b4c9 	.word	0x0800b4c9
 800b45c:	0800b4c9 	.word	0x0800b4c9
 800b460:	0800b4c9 	.word	0x0800b4c9
 800b464:	0800b4c9 	.word	0x0800b4c9
 800b468:	0800b4c9 	.word	0x0800b4c9
 800b46c:	0800b4c9 	.word	0x0800b4c9
 800b470:	0800b4c9 	.word	0x0800b4c9
 800b474:	0800b4b9 	.word	0x0800b4b9
 800b478:	0800b4c9 	.word	0x0800b4c9
 800b47c:	0800b4c9 	.word	0x0800b4c9
 800b480:	0800b4c9 	.word	0x0800b4c9
 800b484:	0800b4c9 	.word	0x0800b4c9
 800b488:	0800b4c9 	.word	0x0800b4c9
 800b48c:	0800b4c9 	.word	0x0800b4c9
 800b490:	0800b4c9 	.word	0x0800b4c9
 800b494:	0800b4c1 	.word	0x0800b4c1
 800b498:	2301      	movs	r3, #1
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49e:	e1c0      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4a0:	2304      	movs	r3, #4
 800b4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a6:	e1bc      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4a8:	2308      	movs	r3, #8
 800b4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ae:	e1b8      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4b0:	2310      	movs	r3, #16
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4b6:	e1b4      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4b8:	2320      	movs	r3, #32
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4be:	e1b0      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4c0:	2340      	movs	r3, #64	@ 0x40
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4c6:	e1ac      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4c8:	2380      	movs	r3, #128	@ 0x80
 800b4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ce:	e1a8      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a75      	ldr	r2, [pc, #468]	@ (800b6ac <UART_SetConfig+0x638>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d130      	bne.n	800b53c <UART_SetConfig+0x4c8>
 800b4da:	4b73      	ldr	r3, [pc, #460]	@ (800b6a8 <UART_SetConfig+0x634>)
 800b4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4de:	f003 0307 	and.w	r3, r3, #7
 800b4e2:	2b05      	cmp	r3, #5
 800b4e4:	d826      	bhi.n	800b534 <UART_SetConfig+0x4c0>
 800b4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4ec <UART_SetConfig+0x478>)
 800b4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ec:	0800b505 	.word	0x0800b505
 800b4f0:	0800b50d 	.word	0x0800b50d
 800b4f4:	0800b515 	.word	0x0800b515
 800b4f8:	0800b51d 	.word	0x0800b51d
 800b4fc:	0800b525 	.word	0x0800b525
 800b500:	0800b52d 	.word	0x0800b52d
 800b504:	2300      	movs	r3, #0
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50a:	e18a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b50c:	2304      	movs	r3, #4
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b512:	e186      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b514:	2308      	movs	r3, #8
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b51a:	e182      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b51c:	2310      	movs	r3, #16
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b522:	e17e      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b524:	2320      	movs	r3, #32
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52a:	e17a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b52c:	2340      	movs	r3, #64	@ 0x40
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b532:	e176      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b534:	2380      	movs	r3, #128	@ 0x80
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53a:	e172      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a5b      	ldr	r2, [pc, #364]	@ (800b6b0 <UART_SetConfig+0x63c>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d130      	bne.n	800b5a8 <UART_SetConfig+0x534>
 800b546:	4b58      	ldr	r3, [pc, #352]	@ (800b6a8 <UART_SetConfig+0x634>)
 800b548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b54a:	f003 0307 	and.w	r3, r3, #7
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d826      	bhi.n	800b5a0 <UART_SetConfig+0x52c>
 800b552:	a201      	add	r2, pc, #4	@ (adr r2, 800b558 <UART_SetConfig+0x4e4>)
 800b554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b558:	0800b571 	.word	0x0800b571
 800b55c:	0800b579 	.word	0x0800b579
 800b560:	0800b581 	.word	0x0800b581
 800b564:	0800b589 	.word	0x0800b589
 800b568:	0800b591 	.word	0x0800b591
 800b56c:	0800b599 	.word	0x0800b599
 800b570:	2300      	movs	r3, #0
 800b572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b576:	e154      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b578:	2304      	movs	r3, #4
 800b57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b57e:	e150      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b580:	2308      	movs	r3, #8
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b586:	e14c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b588:	2310      	movs	r3, #16
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58e:	e148      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b590:	2320      	movs	r3, #32
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b596:	e144      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b598:	2340      	movs	r3, #64	@ 0x40
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59e:	e140      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b5a0:	2380      	movs	r3, #128	@ 0x80
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5a6:	e13c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a41      	ldr	r2, [pc, #260]	@ (800b6b4 <UART_SetConfig+0x640>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	f040 8082 	bne.w	800b6b8 <UART_SetConfig+0x644>
 800b5b4:	4b3c      	ldr	r3, [pc, #240]	@ (800b6a8 <UART_SetConfig+0x634>)
 800b5b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b5bc:	2b28      	cmp	r3, #40	@ 0x28
 800b5be:	d86d      	bhi.n	800b69c <UART_SetConfig+0x628>
 800b5c0:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c8 <UART_SetConfig+0x554>)
 800b5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c6:	bf00      	nop
 800b5c8:	0800b66d 	.word	0x0800b66d
 800b5cc:	0800b69d 	.word	0x0800b69d
 800b5d0:	0800b69d 	.word	0x0800b69d
 800b5d4:	0800b69d 	.word	0x0800b69d
 800b5d8:	0800b69d 	.word	0x0800b69d
 800b5dc:	0800b69d 	.word	0x0800b69d
 800b5e0:	0800b69d 	.word	0x0800b69d
 800b5e4:	0800b69d 	.word	0x0800b69d
 800b5e8:	0800b675 	.word	0x0800b675
 800b5ec:	0800b69d 	.word	0x0800b69d
 800b5f0:	0800b69d 	.word	0x0800b69d
 800b5f4:	0800b69d 	.word	0x0800b69d
 800b5f8:	0800b69d 	.word	0x0800b69d
 800b5fc:	0800b69d 	.word	0x0800b69d
 800b600:	0800b69d 	.word	0x0800b69d
 800b604:	0800b69d 	.word	0x0800b69d
 800b608:	0800b67d 	.word	0x0800b67d
 800b60c:	0800b69d 	.word	0x0800b69d
 800b610:	0800b69d 	.word	0x0800b69d
 800b614:	0800b69d 	.word	0x0800b69d
 800b618:	0800b69d 	.word	0x0800b69d
 800b61c:	0800b69d 	.word	0x0800b69d
 800b620:	0800b69d 	.word	0x0800b69d
 800b624:	0800b69d 	.word	0x0800b69d
 800b628:	0800b685 	.word	0x0800b685
 800b62c:	0800b69d 	.word	0x0800b69d
 800b630:	0800b69d 	.word	0x0800b69d
 800b634:	0800b69d 	.word	0x0800b69d
 800b638:	0800b69d 	.word	0x0800b69d
 800b63c:	0800b69d 	.word	0x0800b69d
 800b640:	0800b69d 	.word	0x0800b69d
 800b644:	0800b69d 	.word	0x0800b69d
 800b648:	0800b68d 	.word	0x0800b68d
 800b64c:	0800b69d 	.word	0x0800b69d
 800b650:	0800b69d 	.word	0x0800b69d
 800b654:	0800b69d 	.word	0x0800b69d
 800b658:	0800b69d 	.word	0x0800b69d
 800b65c:	0800b69d 	.word	0x0800b69d
 800b660:	0800b69d 	.word	0x0800b69d
 800b664:	0800b69d 	.word	0x0800b69d
 800b668:	0800b695 	.word	0x0800b695
 800b66c:	2301      	movs	r3, #1
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b672:	e0d6      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b674:	2304      	movs	r3, #4
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67a:	e0d2      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b67c:	2308      	movs	r3, #8
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b682:	e0ce      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b684:	2310      	movs	r3, #16
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68a:	e0ca      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b68c:	2320      	movs	r3, #32
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b692:	e0c6      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b694:	2340      	movs	r3, #64	@ 0x40
 800b696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69a:	e0c2      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b69c:	2380      	movs	r3, #128	@ 0x80
 800b69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a2:	e0be      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b6a4:	40011400 	.word	0x40011400
 800b6a8:	58024400 	.word	0x58024400
 800b6ac:	40007800 	.word	0x40007800
 800b6b0:	40007c00 	.word	0x40007c00
 800b6b4:	40011800 	.word	0x40011800
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4aad      	ldr	r2, [pc, #692]	@ (800b974 <UART_SetConfig+0x900>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d176      	bne.n	800b7b0 <UART_SetConfig+0x73c>
 800b6c2:	4bad      	ldr	r3, [pc, #692]	@ (800b978 <UART_SetConfig+0x904>)
 800b6c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b6ca:	2b28      	cmp	r3, #40	@ 0x28
 800b6cc:	d86c      	bhi.n	800b7a8 <UART_SetConfig+0x734>
 800b6ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d4 <UART_SetConfig+0x660>)
 800b6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d4:	0800b779 	.word	0x0800b779
 800b6d8:	0800b7a9 	.word	0x0800b7a9
 800b6dc:	0800b7a9 	.word	0x0800b7a9
 800b6e0:	0800b7a9 	.word	0x0800b7a9
 800b6e4:	0800b7a9 	.word	0x0800b7a9
 800b6e8:	0800b7a9 	.word	0x0800b7a9
 800b6ec:	0800b7a9 	.word	0x0800b7a9
 800b6f0:	0800b7a9 	.word	0x0800b7a9
 800b6f4:	0800b781 	.word	0x0800b781
 800b6f8:	0800b7a9 	.word	0x0800b7a9
 800b6fc:	0800b7a9 	.word	0x0800b7a9
 800b700:	0800b7a9 	.word	0x0800b7a9
 800b704:	0800b7a9 	.word	0x0800b7a9
 800b708:	0800b7a9 	.word	0x0800b7a9
 800b70c:	0800b7a9 	.word	0x0800b7a9
 800b710:	0800b7a9 	.word	0x0800b7a9
 800b714:	0800b789 	.word	0x0800b789
 800b718:	0800b7a9 	.word	0x0800b7a9
 800b71c:	0800b7a9 	.word	0x0800b7a9
 800b720:	0800b7a9 	.word	0x0800b7a9
 800b724:	0800b7a9 	.word	0x0800b7a9
 800b728:	0800b7a9 	.word	0x0800b7a9
 800b72c:	0800b7a9 	.word	0x0800b7a9
 800b730:	0800b7a9 	.word	0x0800b7a9
 800b734:	0800b791 	.word	0x0800b791
 800b738:	0800b7a9 	.word	0x0800b7a9
 800b73c:	0800b7a9 	.word	0x0800b7a9
 800b740:	0800b7a9 	.word	0x0800b7a9
 800b744:	0800b7a9 	.word	0x0800b7a9
 800b748:	0800b7a9 	.word	0x0800b7a9
 800b74c:	0800b7a9 	.word	0x0800b7a9
 800b750:	0800b7a9 	.word	0x0800b7a9
 800b754:	0800b799 	.word	0x0800b799
 800b758:	0800b7a9 	.word	0x0800b7a9
 800b75c:	0800b7a9 	.word	0x0800b7a9
 800b760:	0800b7a9 	.word	0x0800b7a9
 800b764:	0800b7a9 	.word	0x0800b7a9
 800b768:	0800b7a9 	.word	0x0800b7a9
 800b76c:	0800b7a9 	.word	0x0800b7a9
 800b770:	0800b7a9 	.word	0x0800b7a9
 800b774:	0800b7a1 	.word	0x0800b7a1
 800b778:	2301      	movs	r3, #1
 800b77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77e:	e050      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b780:	2304      	movs	r3, #4
 800b782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b786:	e04c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b788:	2308      	movs	r3, #8
 800b78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78e:	e048      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b790:	2310      	movs	r3, #16
 800b792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b796:	e044      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b798:	2320      	movs	r3, #32
 800b79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b79e:	e040      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7a0:	2340      	movs	r3, #64	@ 0x40
 800b7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7a6:	e03c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7a8:	2380      	movs	r3, #128	@ 0x80
 800b7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ae:	e038      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a71      	ldr	r2, [pc, #452]	@ (800b97c <UART_SetConfig+0x908>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d130      	bne.n	800b81c <UART_SetConfig+0x7a8>
 800b7ba:	4b6f      	ldr	r3, [pc, #444]	@ (800b978 <UART_SetConfig+0x904>)
 800b7bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7be:	f003 0307 	and.w	r3, r3, #7
 800b7c2:	2b05      	cmp	r3, #5
 800b7c4:	d826      	bhi.n	800b814 <UART_SetConfig+0x7a0>
 800b7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7cc <UART_SetConfig+0x758>)
 800b7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7cc:	0800b7e5 	.word	0x0800b7e5
 800b7d0:	0800b7ed 	.word	0x0800b7ed
 800b7d4:	0800b7f5 	.word	0x0800b7f5
 800b7d8:	0800b7fd 	.word	0x0800b7fd
 800b7dc:	0800b805 	.word	0x0800b805
 800b7e0:	0800b80d 	.word	0x0800b80d
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ea:	e01a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7ec:	2304      	movs	r3, #4
 800b7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7f2:	e016      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7f4:	2308      	movs	r3, #8
 800b7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fa:	e012      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7fc:	2310      	movs	r3, #16
 800b7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b802:	e00e      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b804:	2320      	movs	r3, #32
 800b806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80a:	e00a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b80c:	2340      	movs	r3, #64	@ 0x40
 800b80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b812:	e006      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b814:	2380      	movs	r3, #128	@ 0x80
 800b816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81a:	e002      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b81c:	2380      	movs	r3, #128	@ 0x80
 800b81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a55      	ldr	r2, [pc, #340]	@ (800b97c <UART_SetConfig+0x908>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	f040 80f8 	bne.w	800ba1e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b82e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b832:	2b20      	cmp	r3, #32
 800b834:	dc46      	bgt.n	800b8c4 <UART_SetConfig+0x850>
 800b836:	2b02      	cmp	r3, #2
 800b838:	db75      	blt.n	800b926 <UART_SetConfig+0x8b2>
 800b83a:	3b02      	subs	r3, #2
 800b83c:	2b1e      	cmp	r3, #30
 800b83e:	d872      	bhi.n	800b926 <UART_SetConfig+0x8b2>
 800b840:	a201      	add	r2, pc, #4	@ (adr r2, 800b848 <UART_SetConfig+0x7d4>)
 800b842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b846:	bf00      	nop
 800b848:	0800b8cb 	.word	0x0800b8cb
 800b84c:	0800b927 	.word	0x0800b927
 800b850:	0800b8d3 	.word	0x0800b8d3
 800b854:	0800b927 	.word	0x0800b927
 800b858:	0800b927 	.word	0x0800b927
 800b85c:	0800b927 	.word	0x0800b927
 800b860:	0800b8e3 	.word	0x0800b8e3
 800b864:	0800b927 	.word	0x0800b927
 800b868:	0800b927 	.word	0x0800b927
 800b86c:	0800b927 	.word	0x0800b927
 800b870:	0800b927 	.word	0x0800b927
 800b874:	0800b927 	.word	0x0800b927
 800b878:	0800b927 	.word	0x0800b927
 800b87c:	0800b927 	.word	0x0800b927
 800b880:	0800b8f3 	.word	0x0800b8f3
 800b884:	0800b927 	.word	0x0800b927
 800b888:	0800b927 	.word	0x0800b927
 800b88c:	0800b927 	.word	0x0800b927
 800b890:	0800b927 	.word	0x0800b927
 800b894:	0800b927 	.word	0x0800b927
 800b898:	0800b927 	.word	0x0800b927
 800b89c:	0800b927 	.word	0x0800b927
 800b8a0:	0800b927 	.word	0x0800b927
 800b8a4:	0800b927 	.word	0x0800b927
 800b8a8:	0800b927 	.word	0x0800b927
 800b8ac:	0800b927 	.word	0x0800b927
 800b8b0:	0800b927 	.word	0x0800b927
 800b8b4:	0800b927 	.word	0x0800b927
 800b8b8:	0800b927 	.word	0x0800b927
 800b8bc:	0800b927 	.word	0x0800b927
 800b8c0:	0800b919 	.word	0x0800b919
 800b8c4:	2b40      	cmp	r3, #64	@ 0x40
 800b8c6:	d02a      	beq.n	800b91e <UART_SetConfig+0x8aa>
 800b8c8:	e02d      	b.n	800b926 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b8ca:	f7fc fc59 	bl	8008180 <HAL_RCCEx_GetD3PCLK1Freq>
 800b8ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8d0:	e02f      	b.n	800b932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fc fc68 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8e0:	e027      	b.n	800b932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8e2:	f107 0318 	add.w	r3, r7, #24
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fc fdb4 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8f0:	e01f      	b.n	800b932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8f2:	4b21      	ldr	r3, [pc, #132]	@ (800b978 <UART_SetConfig+0x904>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f003 0320 	and.w	r3, r3, #32
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d009      	beq.n	800b912 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b978 <UART_SetConfig+0x904>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	08db      	lsrs	r3, r3, #3
 800b904:	f003 0303 	and.w	r3, r3, #3
 800b908:	4a1d      	ldr	r2, [pc, #116]	@ (800b980 <UART_SetConfig+0x90c>)
 800b90a:	fa22 f303 	lsr.w	r3, r2, r3
 800b90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b910:	e00f      	b.n	800b932 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b912:	4b1b      	ldr	r3, [pc, #108]	@ (800b980 <UART_SetConfig+0x90c>)
 800b914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b916:	e00c      	b.n	800b932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b918:	4b1a      	ldr	r3, [pc, #104]	@ (800b984 <UART_SetConfig+0x910>)
 800b91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b91c:	e009      	b.n	800b932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b91e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b924:	e005      	b.n	800b932 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b926:	2300      	movs	r3, #0
 800b928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b930:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 81ee 	beq.w	800bd16 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b93e:	4a12      	ldr	r2, [pc, #72]	@ (800b988 <UART_SetConfig+0x914>)
 800b940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b944:	461a      	mov	r2, r3
 800b946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b948:	fbb3 f3f2 	udiv	r3, r3, r2
 800b94c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	4613      	mov	r3, r2
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	4413      	add	r3, r2
 800b958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d305      	bcc.n	800b96a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b966:	429a      	cmp	r2, r3
 800b968:	d910      	bls.n	800b98c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b970:	e1d1      	b.n	800bd16 <UART_SetConfig+0xca2>
 800b972:	bf00      	nop
 800b974:	40011c00 	.word	0x40011c00
 800b978:	58024400 	.word	0x58024400
 800b97c:	58000c00 	.word	0x58000c00
 800b980:	03d09000 	.word	0x03d09000
 800b984:	003d0900 	.word	0x003d0900
 800b988:	08012280 	.word	0x08012280
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98e:	2200      	movs	r2, #0
 800b990:	60bb      	str	r3, [r7, #8]
 800b992:	60fa      	str	r2, [r7, #12]
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b998:	4ac0      	ldr	r2, [pc, #768]	@ (800bc9c <UART_SetConfig+0xc28>)
 800b99a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	603b      	str	r3, [r7, #0]
 800b9a4:	607a      	str	r2, [r7, #4]
 800b9a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9ae:	f7f4 fec3 	bl	8000738 <__aeabi_uldivmod>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	f04f 0200 	mov.w	r2, #0
 800b9be:	f04f 0300 	mov.w	r3, #0
 800b9c2:	020b      	lsls	r3, r1, #8
 800b9c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9c8:	0202      	lsls	r2, r0, #8
 800b9ca:	6979      	ldr	r1, [r7, #20]
 800b9cc:	6849      	ldr	r1, [r1, #4]
 800b9ce:	0849      	lsrs	r1, r1, #1
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	eb12 0804 	adds.w	r8, r2, r4
 800b9da:	eb43 0905 	adc.w	r9, r3, r5
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	469a      	mov	sl, r3
 800b9e6:	4693      	mov	fp, r2
 800b9e8:	4652      	mov	r2, sl
 800b9ea:	465b      	mov	r3, fp
 800b9ec:	4640      	mov	r0, r8
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	f7f4 fea2 	bl	8000738 <__aeabi_uldivmod>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba02:	d308      	bcc.n	800ba16 <UART_SetConfig+0x9a2>
 800ba04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba0a:	d204      	bcs.n	800ba16 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba12:	60da      	str	r2, [r3, #12]
 800ba14:	e17f      	b.n	800bd16 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ba1c:	e17b      	b.n	800bd16 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	69db      	ldr	r3, [r3, #28]
 800ba22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba26:	f040 80bd 	bne.w	800bba4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ba2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba2e:	2b20      	cmp	r3, #32
 800ba30:	dc48      	bgt.n	800bac4 <UART_SetConfig+0xa50>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	db7b      	blt.n	800bb2e <UART_SetConfig+0xaba>
 800ba36:	2b20      	cmp	r3, #32
 800ba38:	d879      	bhi.n	800bb2e <UART_SetConfig+0xaba>
 800ba3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba40 <UART_SetConfig+0x9cc>)
 800ba3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba40:	0800bacb 	.word	0x0800bacb
 800ba44:	0800bad3 	.word	0x0800bad3
 800ba48:	0800bb2f 	.word	0x0800bb2f
 800ba4c:	0800bb2f 	.word	0x0800bb2f
 800ba50:	0800badb 	.word	0x0800badb
 800ba54:	0800bb2f 	.word	0x0800bb2f
 800ba58:	0800bb2f 	.word	0x0800bb2f
 800ba5c:	0800bb2f 	.word	0x0800bb2f
 800ba60:	0800baeb 	.word	0x0800baeb
 800ba64:	0800bb2f 	.word	0x0800bb2f
 800ba68:	0800bb2f 	.word	0x0800bb2f
 800ba6c:	0800bb2f 	.word	0x0800bb2f
 800ba70:	0800bb2f 	.word	0x0800bb2f
 800ba74:	0800bb2f 	.word	0x0800bb2f
 800ba78:	0800bb2f 	.word	0x0800bb2f
 800ba7c:	0800bb2f 	.word	0x0800bb2f
 800ba80:	0800bafb 	.word	0x0800bafb
 800ba84:	0800bb2f 	.word	0x0800bb2f
 800ba88:	0800bb2f 	.word	0x0800bb2f
 800ba8c:	0800bb2f 	.word	0x0800bb2f
 800ba90:	0800bb2f 	.word	0x0800bb2f
 800ba94:	0800bb2f 	.word	0x0800bb2f
 800ba98:	0800bb2f 	.word	0x0800bb2f
 800ba9c:	0800bb2f 	.word	0x0800bb2f
 800baa0:	0800bb2f 	.word	0x0800bb2f
 800baa4:	0800bb2f 	.word	0x0800bb2f
 800baa8:	0800bb2f 	.word	0x0800bb2f
 800baac:	0800bb2f 	.word	0x0800bb2f
 800bab0:	0800bb2f 	.word	0x0800bb2f
 800bab4:	0800bb2f 	.word	0x0800bb2f
 800bab8:	0800bb2f 	.word	0x0800bb2f
 800babc:	0800bb2f 	.word	0x0800bb2f
 800bac0:	0800bb21 	.word	0x0800bb21
 800bac4:	2b40      	cmp	r3, #64	@ 0x40
 800bac6:	d02e      	beq.n	800bb26 <UART_SetConfig+0xab2>
 800bac8:	e031      	b.n	800bb2e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baca:	f7fa fcbb 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 800bace:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bad0:	e033      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bad2:	f7fa fccd 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 800bad6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bad8:	e02f      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fc fb64 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bae8:	e027      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baea:	f107 0318 	add.w	r3, r7, #24
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fc fcb0 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baf8:	e01f      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bafa:	4b69      	ldr	r3, [pc, #420]	@ (800bca0 <UART_SetConfig+0xc2c>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f003 0320 	and.w	r3, r3, #32
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb06:	4b66      	ldr	r3, [pc, #408]	@ (800bca0 <UART_SetConfig+0xc2c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	08db      	lsrs	r3, r3, #3
 800bb0c:	f003 0303 	and.w	r3, r3, #3
 800bb10:	4a64      	ldr	r2, [pc, #400]	@ (800bca4 <UART_SetConfig+0xc30>)
 800bb12:	fa22 f303 	lsr.w	r3, r2, r3
 800bb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb18:	e00f      	b.n	800bb3a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bb1a:	4b62      	ldr	r3, [pc, #392]	@ (800bca4 <UART_SetConfig+0xc30>)
 800bb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb1e:	e00c      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb20:	4b61      	ldr	r3, [pc, #388]	@ (800bca8 <UART_SetConfig+0xc34>)
 800bb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb24:	e009      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb2c:	e005      	b.n	800bb3a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bb38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f000 80ea 	beq.w	800bd16 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb46:	4a55      	ldr	r2, [pc, #340]	@ (800bc9c <UART_SetConfig+0xc28>)
 800bb48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb50:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb54:	005a      	lsls	r2, r3, #1
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	085b      	lsrs	r3, r3, #1
 800bb5c:	441a      	add	r2, r3
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6a:	2b0f      	cmp	r3, #15
 800bb6c:	d916      	bls.n	800bb9c <UART_SetConfig+0xb28>
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb74:	d212      	bcs.n	800bb9c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	f023 030f 	bic.w	r3, r3, #15
 800bb7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb82:	085b      	lsrs	r3, r3, #1
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	f003 0307 	and.w	r3, r3, #7
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bb98:	60da      	str	r2, [r3, #12]
 800bb9a:	e0bc      	b.n	800bd16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bba2:	e0b8      	b.n	800bd16 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bba4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bba8:	2b20      	cmp	r3, #32
 800bbaa:	dc4b      	bgt.n	800bc44 <UART_SetConfig+0xbd0>
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f2c0 8087 	blt.w	800bcc0 <UART_SetConfig+0xc4c>
 800bbb2:	2b20      	cmp	r3, #32
 800bbb4:	f200 8084 	bhi.w	800bcc0 <UART_SetConfig+0xc4c>
 800bbb8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc0 <UART_SetConfig+0xb4c>)
 800bbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbe:	bf00      	nop
 800bbc0:	0800bc4b 	.word	0x0800bc4b
 800bbc4:	0800bc53 	.word	0x0800bc53
 800bbc8:	0800bcc1 	.word	0x0800bcc1
 800bbcc:	0800bcc1 	.word	0x0800bcc1
 800bbd0:	0800bc5b 	.word	0x0800bc5b
 800bbd4:	0800bcc1 	.word	0x0800bcc1
 800bbd8:	0800bcc1 	.word	0x0800bcc1
 800bbdc:	0800bcc1 	.word	0x0800bcc1
 800bbe0:	0800bc6b 	.word	0x0800bc6b
 800bbe4:	0800bcc1 	.word	0x0800bcc1
 800bbe8:	0800bcc1 	.word	0x0800bcc1
 800bbec:	0800bcc1 	.word	0x0800bcc1
 800bbf0:	0800bcc1 	.word	0x0800bcc1
 800bbf4:	0800bcc1 	.word	0x0800bcc1
 800bbf8:	0800bcc1 	.word	0x0800bcc1
 800bbfc:	0800bcc1 	.word	0x0800bcc1
 800bc00:	0800bc7b 	.word	0x0800bc7b
 800bc04:	0800bcc1 	.word	0x0800bcc1
 800bc08:	0800bcc1 	.word	0x0800bcc1
 800bc0c:	0800bcc1 	.word	0x0800bcc1
 800bc10:	0800bcc1 	.word	0x0800bcc1
 800bc14:	0800bcc1 	.word	0x0800bcc1
 800bc18:	0800bcc1 	.word	0x0800bcc1
 800bc1c:	0800bcc1 	.word	0x0800bcc1
 800bc20:	0800bcc1 	.word	0x0800bcc1
 800bc24:	0800bcc1 	.word	0x0800bcc1
 800bc28:	0800bcc1 	.word	0x0800bcc1
 800bc2c:	0800bcc1 	.word	0x0800bcc1
 800bc30:	0800bcc1 	.word	0x0800bcc1
 800bc34:	0800bcc1 	.word	0x0800bcc1
 800bc38:	0800bcc1 	.word	0x0800bcc1
 800bc3c:	0800bcc1 	.word	0x0800bcc1
 800bc40:	0800bcb3 	.word	0x0800bcb3
 800bc44:	2b40      	cmp	r3, #64	@ 0x40
 800bc46:	d037      	beq.n	800bcb8 <UART_SetConfig+0xc44>
 800bc48:	e03a      	b.n	800bcc0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc4a:	f7fa fbfb 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 800bc4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc50:	e03c      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc52:	f7fa fc0d 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 800bc56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc58:	e038      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fc faa4 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc68:	e030      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc6a:	f107 0318 	add.w	r3, r7, #24
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fc fbf0 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc78:	e028      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc7a:	4b09      	ldr	r3, [pc, #36]	@ (800bca0 <UART_SetConfig+0xc2c>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f003 0320 	and.w	r3, r3, #32
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d012      	beq.n	800bcac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc86:	4b06      	ldr	r3, [pc, #24]	@ (800bca0 <UART_SetConfig+0xc2c>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	08db      	lsrs	r3, r3, #3
 800bc8c:	f003 0303 	and.w	r3, r3, #3
 800bc90:	4a04      	ldr	r2, [pc, #16]	@ (800bca4 <UART_SetConfig+0xc30>)
 800bc92:	fa22 f303 	lsr.w	r3, r2, r3
 800bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc98:	e018      	b.n	800bccc <UART_SetConfig+0xc58>
 800bc9a:	bf00      	nop
 800bc9c:	08012280 	.word	0x08012280
 800bca0:	58024400 	.word	0x58024400
 800bca4:	03d09000 	.word	0x03d09000
 800bca8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bcac:	4b24      	ldr	r3, [pc, #144]	@ (800bd40 <UART_SetConfig+0xccc>)
 800bcae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcb0:	e00c      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bcb2:	4b24      	ldr	r3, [pc, #144]	@ (800bd44 <UART_SetConfig+0xcd0>)
 800bcb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcb6:	e009      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcbe:	e005      	b.n	800bccc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bcca:	bf00      	nop
    }

    if (pclk != 0U)
 800bccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d021      	beq.n	800bd16 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd6:	4a1c      	ldr	r2, [pc, #112]	@ (800bd48 <UART_SetConfig+0xcd4>)
 800bcd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcdc:	461a      	mov	r2, r3
 800bcde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce0:	fbb3 f2f2 	udiv	r2, r3, r2
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	085b      	lsrs	r3, r3, #1
 800bcea:	441a      	add	r2, r3
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf8:	2b0f      	cmp	r3, #15
 800bcfa:	d909      	bls.n	800bd10 <UART_SetConfig+0xc9c>
 800bcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd02:	d205      	bcs.n	800bd10 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	60da      	str	r2, [r3, #12]
 800bd0e:	e002      	b.n	800bd16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd32:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3748      	adds	r7, #72	@ 0x48
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd40:	03d09000 	.word	0x03d09000
 800bd44:	003d0900 	.word	0x003d0900
 800bd48:	08012280 	.word	0x08012280

0800bd4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd58:	f003 0308 	and.w	r3, r3, #8
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	430a      	orrs	r2, r1
 800bd74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd7a:	f003 0301 	and.w	r3, r3, #1
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	430a      	orrs	r2, r1
 800bd96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00a      	beq.n	800bdba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdbe:	f003 0304 	and.w	r3, r3, #4
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00a      	beq.n	800bddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	430a      	orrs	r2, r1
 800bdda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde0:	f003 0310 	and.w	r3, r3, #16
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00a      	beq.n	800bdfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be02:	f003 0320 	and.w	r3, r3, #32
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	430a      	orrs	r2, r1
 800be1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01a      	beq.n	800be62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	430a      	orrs	r2, r1
 800be40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be4a:	d10a      	bne.n	800be62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	430a      	orrs	r2, r1
 800be60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00a      	beq.n	800be84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	430a      	orrs	r2, r1
 800be82:	605a      	str	r2, [r3, #4]
  }
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b098      	sub	sp, #96	@ 0x60
 800be94:	af02      	add	r7, sp, #8
 800be96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bea0:	f7f7 fb66 	bl	8003570 <HAL_GetTick>
 800bea4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 0308 	and.w	r3, r3, #8
 800beb0:	2b08      	cmp	r3, #8
 800beb2:	d12f      	bne.n	800bf14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800beb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800beb8:	9300      	str	r3, [sp, #0]
 800beba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bebc:	2200      	movs	r2, #0
 800bebe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f88e 	bl	800bfe4 <UART_WaitOnFlagUntilTimeout>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d022      	beq.n	800bf14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed6:	e853 3f00 	ldrex	r3, [r3]
 800beda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bee2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	461a      	mov	r2, r3
 800beea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beec:	647b      	str	r3, [r7, #68]	@ 0x44
 800beee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bef4:	e841 2300 	strex	r3, r2, [r1]
 800bef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800befa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1e6      	bne.n	800bece <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2220      	movs	r2, #32
 800bf04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf10:	2303      	movs	r3, #3
 800bf12:	e063      	b.n	800bfdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0304 	and.w	r3, r3, #4
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	d149      	bne.n	800bfb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f857 	bl	800bfe4 <UART_WaitOnFlagUntilTimeout>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d03c      	beq.n	800bfb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf44:	e853 3f00 	ldrex	r3, [r3]
 800bf48:	623b      	str	r3, [r7, #32]
   return(result);
 800bf4a:	6a3b      	ldr	r3, [r7, #32]
 800bf4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	461a      	mov	r2, r3
 800bf58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf62:	e841 2300 	strex	r3, r2, [r1]
 800bf66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1e6      	bne.n	800bf3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3308      	adds	r3, #8
 800bf74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f023 0301 	bic.w	r3, r3, #1
 800bf84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf8e:	61fa      	str	r2, [r7, #28]
 800bf90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	69b9      	ldr	r1, [r7, #24]
 800bf94:	69fa      	ldr	r2, [r7, #28]
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	617b      	str	r3, [r7, #20]
   return(result);
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e5      	bne.n	800bf6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e012      	b.n	800bfdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2220      	movs	r2, #32
 800bfc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3758      	adds	r7, #88	@ 0x58
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	603b      	str	r3, [r7, #0]
 800bff0:	4613      	mov	r3, r2
 800bff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bff4:	e04f      	b.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffc:	d04b      	beq.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bffe:	f7f7 fab7 	bl	8003570 <HAL_GetTick>
 800c002:	4602      	mov	r2, r0
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	69ba      	ldr	r2, [r7, #24]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d302      	bcc.n	800c014 <UART_WaitOnFlagUntilTimeout+0x30>
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d101      	bne.n	800c018 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c014:	2303      	movs	r3, #3
 800c016:	e04e      	b.n	800c0b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 0304 	and.w	r3, r3, #4
 800c022:	2b00      	cmp	r3, #0
 800c024:	d037      	beq.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	2b80      	cmp	r3, #128	@ 0x80
 800c02a:	d034      	beq.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	2b40      	cmp	r3, #64	@ 0x40
 800c030:	d031      	beq.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	69db      	ldr	r3, [r3, #28]
 800c038:	f003 0308 	and.w	r3, r3, #8
 800c03c:	2b08      	cmp	r3, #8
 800c03e:	d110      	bne.n	800c062 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2208      	movs	r2, #8
 800c046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f000 f839 	bl	800c0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2208      	movs	r2, #8
 800c052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e029      	b.n	800c0b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c06c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c070:	d111      	bne.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c07a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f000 f81f 	bl	800c0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2220      	movs	r2, #32
 800c086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e00f      	b.n	800c0b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	69da      	ldr	r2, [r3, #28]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	4013      	ands	r3, r2
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	bf0c      	ite	eq
 800c0a6:	2301      	moveq	r3, #1
 800c0a8:	2300      	movne	r3, #0
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d0a0      	beq.n	800bff6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b095      	sub	sp, #84	@ 0x54
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d0:	e853 3f00 	ldrex	r3, [r3]
 800c0d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0ee:	e841 2300 	strex	r3, r2, [r1]
 800c0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1e6      	bne.n	800c0c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	3308      	adds	r3, #8
 800c100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	e853 3f00 	ldrex	r3, [r3]
 800c108:	61fb      	str	r3, [r7, #28]
   return(result);
 800c10a:	69fa      	ldr	r2, [r7, #28]
 800c10c:	4b1e      	ldr	r3, [pc, #120]	@ (800c188 <UART_EndRxTransfer+0xc8>)
 800c10e:	4013      	ands	r3, r2
 800c110:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3308      	adds	r3, #8
 800c118:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c11a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c11c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c122:	e841 2300 	strex	r3, r2, [r1]
 800c126:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e5      	bne.n	800c0fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c132:	2b01      	cmp	r3, #1
 800c134:	d118      	bne.n	800c168 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	60bb      	str	r3, [r7, #8]
   return(result);
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f023 0310 	bic.w	r3, r3, #16
 800c14a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c154:	61bb      	str	r3, [r7, #24]
 800c156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6979      	ldr	r1, [r7, #20]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	613b      	str	r3, [r7, #16]
   return(result);
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e6      	bne.n	800c136 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2220      	movs	r2, #32
 800c16c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c17c:	bf00      	nop
 800c17e:	3754      	adds	r7, #84	@ 0x54
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	effffffe 	.word	0xeffffffe

0800c18c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d101      	bne.n	800c1a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c19e:	2302      	movs	r3, #2
 800c1a0:	e027      	b.n	800c1f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2224      	movs	r2, #36	@ 0x24
 800c1ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f022 0201 	bic.w	r2, r2, #1
 800c1c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c1d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2220      	movs	r2, #32
 800c1e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr

0800c1fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b084      	sub	sp, #16
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d101      	bne.n	800c216 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c212:	2302      	movs	r3, #2
 800c214:	e02d      	b.n	800c272 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2224      	movs	r2, #36	@ 0x24
 800c222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f022 0201 	bic.w	r2, r2, #1
 800c23c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	430a      	orrs	r2, r1
 800c250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f850 	bl	800c2f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2220      	movs	r2, #32
 800c264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d101      	bne.n	800c292 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c28e:	2302      	movs	r3, #2
 800c290:	e02d      	b.n	800c2ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2224      	movs	r2, #36	@ 0x24
 800c29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0201 	bic.w	r2, r2, #1
 800c2b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f812 	bl	800c2f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
	...

0800c2f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c304:	2b00      	cmp	r3, #0
 800c306:	d108      	bne.n	800c31a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c318:	e031      	b.n	800c37e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c31a:	2310      	movs	r3, #16
 800c31c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c31e:	2310      	movs	r3, #16
 800c320:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	0e5b      	lsrs	r3, r3, #25
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	f003 0307 	and.w	r3, r3, #7
 800c330:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	0f5b      	lsrs	r3, r3, #29
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	f003 0307 	and.w	r3, r3, #7
 800c340:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	7b3a      	ldrb	r2, [r7, #12]
 800c346:	4911      	ldr	r1, [pc, #68]	@ (800c38c <UARTEx_SetNbDataToProcess+0x94>)
 800c348:	5c8a      	ldrb	r2, [r1, r2]
 800c34a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c34e:	7b3a      	ldrb	r2, [r7, #12]
 800c350:	490f      	ldr	r1, [pc, #60]	@ (800c390 <UARTEx_SetNbDataToProcess+0x98>)
 800c352:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c354:	fb93 f3f2 	sdiv	r3, r3, r2
 800c358:	b29a      	uxth	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c360:	7bfb      	ldrb	r3, [r7, #15]
 800c362:	7b7a      	ldrb	r2, [r7, #13]
 800c364:	4909      	ldr	r1, [pc, #36]	@ (800c38c <UARTEx_SetNbDataToProcess+0x94>)
 800c366:	5c8a      	ldrb	r2, [r1, r2]
 800c368:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c36c:	7b7a      	ldrb	r2, [r7, #13]
 800c36e:	4908      	ldr	r1, [pc, #32]	@ (800c390 <UARTEx_SetNbDataToProcess+0x98>)
 800c370:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c372:	fb93 f3f2 	sdiv	r3, r3, r2
 800c376:	b29a      	uxth	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c37e:	bf00      	nop
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	08012298 	.word	0x08012298
 800c390:	080122a0 	.word	0x080122a0

0800c394 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e03c      	b.n	800c420 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7f6 fdb2 	bl	8002f24 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f022 0201 	bic.w	r2, r2, #1
 800c3d6:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 f85b 	bl	800c494 <USART_SetConfig>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d101      	bne.n	800c3e8 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e01b      	b.n	800c420 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	685a      	ldr	r2, [r3, #4]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c3f6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	689a      	ldr	r2, [r3, #8]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c406:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f042 0201 	orr.w	r2, r2, #1
 800c416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fddd 	bl	800cfd8 <USART_CheckIdleState>
 800c41e:	4603      	mov	r3, r0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	603b      	str	r3, [r7, #0]
 800c434:	4613      	mov	r3, r2
 800c436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c438:	e018      	b.n	800c46c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c440:	d014      	beq.n	800c46c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c442:	f7f7 f895 	bl	8003570 <HAL_GetTick>
 800c446:	4602      	mov	r2, r0
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	69ba      	ldr	r2, [r7, #24]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d302      	bcc.n	800c458 <USART_WaitOnFlagUntilTimeout+0x30>
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d109      	bne.n	800c46c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800c468:	2303      	movs	r3, #3
 800c46a:	e00f      	b.n	800c48c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	69da      	ldr	r2, [r3, #28]
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	4013      	ands	r3, r2
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	429a      	cmp	r2, r3
 800c47a:	bf0c      	ite	eq
 800c47c:	2301      	moveq	r3, #1
 800c47e:	2300      	movne	r3, #0
 800c480:	b2db      	uxtb	r3, r3
 800c482:	461a      	mov	r2, r3
 800c484:	79fb      	ldrb	r3, [r7, #7]
 800c486:	429a      	cmp	r2, r3
 800c488:	d0d7      	beq.n	800c43a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b08e      	sub	sp, #56	@ 0x38
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	689a      	ldr	r2, [r3, #8]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	431a      	orrs	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	4bc9      	ldr	r3, [pc, #804]	@ (800c7e8 <USART_SetConfig+0x354>)
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	6812      	ldr	r2, [r2, #0]
 800c4ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4cc:	430b      	orrs	r3, r1
 800c4ce:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800c4d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c4d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a1b      	ldr	r3, [r3, #32]
 800c4da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	699a      	ldr	r2, [r3, #24]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	69db      	ldr	r3, [r3, #28]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	4bba      	ldr	r3, [pc, #744]	@ (800c7ec <USART_SetConfig+0x358>)
 800c502:	4013      	ands	r3, r2
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	6812      	ldr	r2, [r2, #0]
 800c508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c50a:	430b      	orrs	r3, r1
 800c50c:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c514:	f023 010f 	bic.w	r1, r3, #15
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	430a      	orrs	r2, r1
 800c522:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4ab1      	ldr	r2, [pc, #708]	@ (800c7f0 <USART_SetConfig+0x35c>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d176      	bne.n	800c61c <USART_SetConfig+0x188>
 800c52e:	4bb1      	ldr	r3, [pc, #708]	@ (800c7f4 <USART_SetConfig+0x360>)
 800c530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c536:	2b28      	cmp	r3, #40	@ 0x28
 800c538:	d86c      	bhi.n	800c614 <USART_SetConfig+0x180>
 800c53a:	a201      	add	r2, pc, #4	@ (adr r2, 800c540 <USART_SetConfig+0xac>)
 800c53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c540:	0800c5e5 	.word	0x0800c5e5
 800c544:	0800c615 	.word	0x0800c615
 800c548:	0800c615 	.word	0x0800c615
 800c54c:	0800c615 	.word	0x0800c615
 800c550:	0800c615 	.word	0x0800c615
 800c554:	0800c615 	.word	0x0800c615
 800c558:	0800c615 	.word	0x0800c615
 800c55c:	0800c615 	.word	0x0800c615
 800c560:	0800c5ed 	.word	0x0800c5ed
 800c564:	0800c615 	.word	0x0800c615
 800c568:	0800c615 	.word	0x0800c615
 800c56c:	0800c615 	.word	0x0800c615
 800c570:	0800c615 	.word	0x0800c615
 800c574:	0800c615 	.word	0x0800c615
 800c578:	0800c615 	.word	0x0800c615
 800c57c:	0800c615 	.word	0x0800c615
 800c580:	0800c5f5 	.word	0x0800c5f5
 800c584:	0800c615 	.word	0x0800c615
 800c588:	0800c615 	.word	0x0800c615
 800c58c:	0800c615 	.word	0x0800c615
 800c590:	0800c615 	.word	0x0800c615
 800c594:	0800c615 	.word	0x0800c615
 800c598:	0800c615 	.word	0x0800c615
 800c59c:	0800c615 	.word	0x0800c615
 800c5a0:	0800c5fd 	.word	0x0800c5fd
 800c5a4:	0800c615 	.word	0x0800c615
 800c5a8:	0800c615 	.word	0x0800c615
 800c5ac:	0800c615 	.word	0x0800c615
 800c5b0:	0800c615 	.word	0x0800c615
 800c5b4:	0800c615 	.word	0x0800c615
 800c5b8:	0800c615 	.word	0x0800c615
 800c5bc:	0800c615 	.word	0x0800c615
 800c5c0:	0800c605 	.word	0x0800c605
 800c5c4:	0800c615 	.word	0x0800c615
 800c5c8:	0800c615 	.word	0x0800c615
 800c5cc:	0800c615 	.word	0x0800c615
 800c5d0:	0800c615 	.word	0x0800c615
 800c5d4:	0800c615 	.word	0x0800c615
 800c5d8:	0800c615 	.word	0x0800c615
 800c5dc:	0800c615 	.word	0x0800c615
 800c5e0:	0800c60d 	.word	0x0800c60d
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c5ea:	e18e      	b.n	800c90a <USART_SetConfig+0x476>
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c5f2:	e18a      	b.n	800c90a <USART_SetConfig+0x476>
 800c5f4:	2304      	movs	r3, #4
 800c5f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c5fa:	e186      	b.n	800c90a <USART_SetConfig+0x476>
 800c5fc:	2308      	movs	r3, #8
 800c5fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c602:	e182      	b.n	800c90a <USART_SetConfig+0x476>
 800c604:	2310      	movs	r3, #16
 800c606:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c60a:	e17e      	b.n	800c90a <USART_SetConfig+0x476>
 800c60c:	2320      	movs	r3, #32
 800c60e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c612:	e17a      	b.n	800c90a <USART_SetConfig+0x476>
 800c614:	2340      	movs	r3, #64	@ 0x40
 800c616:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c61a:	e176      	b.n	800c90a <USART_SetConfig+0x476>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a75      	ldr	r2, [pc, #468]	@ (800c7f8 <USART_SetConfig+0x364>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d130      	bne.n	800c688 <USART_SetConfig+0x1f4>
 800c626:	4b73      	ldr	r3, [pc, #460]	@ (800c7f4 <USART_SetConfig+0x360>)
 800c628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c62a:	f003 0307 	and.w	r3, r3, #7
 800c62e:	2b05      	cmp	r3, #5
 800c630:	d826      	bhi.n	800c680 <USART_SetConfig+0x1ec>
 800c632:	a201      	add	r2, pc, #4	@ (adr r2, 800c638 <USART_SetConfig+0x1a4>)
 800c634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c638:	0800c651 	.word	0x0800c651
 800c63c:	0800c659 	.word	0x0800c659
 800c640:	0800c661 	.word	0x0800c661
 800c644:	0800c669 	.word	0x0800c669
 800c648:	0800c671 	.word	0x0800c671
 800c64c:	0800c679 	.word	0x0800c679
 800c650:	2300      	movs	r3, #0
 800c652:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c656:	e158      	b.n	800c90a <USART_SetConfig+0x476>
 800c658:	2302      	movs	r3, #2
 800c65a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c65e:	e154      	b.n	800c90a <USART_SetConfig+0x476>
 800c660:	2304      	movs	r3, #4
 800c662:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c666:	e150      	b.n	800c90a <USART_SetConfig+0x476>
 800c668:	2308      	movs	r3, #8
 800c66a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c66e:	e14c      	b.n	800c90a <USART_SetConfig+0x476>
 800c670:	2310      	movs	r3, #16
 800c672:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c676:	e148      	b.n	800c90a <USART_SetConfig+0x476>
 800c678:	2320      	movs	r3, #32
 800c67a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c67e:	e144      	b.n	800c90a <USART_SetConfig+0x476>
 800c680:	2340      	movs	r3, #64	@ 0x40
 800c682:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c686:	e140      	b.n	800c90a <USART_SetConfig+0x476>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a5b      	ldr	r2, [pc, #364]	@ (800c7fc <USART_SetConfig+0x368>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d130      	bne.n	800c6f4 <USART_SetConfig+0x260>
 800c692:	4b58      	ldr	r3, [pc, #352]	@ (800c7f4 <USART_SetConfig+0x360>)
 800c694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c696:	f003 0307 	and.w	r3, r3, #7
 800c69a:	2b05      	cmp	r3, #5
 800c69c:	d826      	bhi.n	800c6ec <USART_SetConfig+0x258>
 800c69e:	a201      	add	r2, pc, #4	@ (adr r2, 800c6a4 <USART_SetConfig+0x210>)
 800c6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a4:	0800c6bd 	.word	0x0800c6bd
 800c6a8:	0800c6c5 	.word	0x0800c6c5
 800c6ac:	0800c6cd 	.word	0x0800c6cd
 800c6b0:	0800c6d5 	.word	0x0800c6d5
 800c6b4:	0800c6dd 	.word	0x0800c6dd
 800c6b8:	0800c6e5 	.word	0x0800c6e5
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6c2:	e122      	b.n	800c90a <USART_SetConfig+0x476>
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6ca:	e11e      	b.n	800c90a <USART_SetConfig+0x476>
 800c6cc:	2304      	movs	r3, #4
 800c6ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6d2:	e11a      	b.n	800c90a <USART_SetConfig+0x476>
 800c6d4:	2308      	movs	r3, #8
 800c6d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6da:	e116      	b.n	800c90a <USART_SetConfig+0x476>
 800c6dc:	2310      	movs	r3, #16
 800c6de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6e2:	e112      	b.n	800c90a <USART_SetConfig+0x476>
 800c6e4:	2320      	movs	r3, #32
 800c6e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6ea:	e10e      	b.n	800c90a <USART_SetConfig+0x476>
 800c6ec:	2340      	movs	r3, #64	@ 0x40
 800c6ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6f2:	e10a      	b.n	800c90a <USART_SetConfig+0x476>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a41      	ldr	r2, [pc, #260]	@ (800c800 <USART_SetConfig+0x36c>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	f040 8086 	bne.w	800c80c <USART_SetConfig+0x378>
 800c700:	4b3c      	ldr	r3, [pc, #240]	@ (800c7f4 <USART_SetConfig+0x360>)
 800c702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c704:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c708:	2b28      	cmp	r3, #40	@ 0x28
 800c70a:	d87b      	bhi.n	800c804 <USART_SetConfig+0x370>
 800c70c:	a201      	add	r2, pc, #4	@ (adr r2, 800c714 <USART_SetConfig+0x280>)
 800c70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c712:	bf00      	nop
 800c714:	0800c7b9 	.word	0x0800c7b9
 800c718:	0800c805 	.word	0x0800c805
 800c71c:	0800c805 	.word	0x0800c805
 800c720:	0800c805 	.word	0x0800c805
 800c724:	0800c805 	.word	0x0800c805
 800c728:	0800c805 	.word	0x0800c805
 800c72c:	0800c805 	.word	0x0800c805
 800c730:	0800c805 	.word	0x0800c805
 800c734:	0800c7c1 	.word	0x0800c7c1
 800c738:	0800c805 	.word	0x0800c805
 800c73c:	0800c805 	.word	0x0800c805
 800c740:	0800c805 	.word	0x0800c805
 800c744:	0800c805 	.word	0x0800c805
 800c748:	0800c805 	.word	0x0800c805
 800c74c:	0800c805 	.word	0x0800c805
 800c750:	0800c805 	.word	0x0800c805
 800c754:	0800c7c9 	.word	0x0800c7c9
 800c758:	0800c805 	.word	0x0800c805
 800c75c:	0800c805 	.word	0x0800c805
 800c760:	0800c805 	.word	0x0800c805
 800c764:	0800c805 	.word	0x0800c805
 800c768:	0800c805 	.word	0x0800c805
 800c76c:	0800c805 	.word	0x0800c805
 800c770:	0800c805 	.word	0x0800c805
 800c774:	0800c7d1 	.word	0x0800c7d1
 800c778:	0800c805 	.word	0x0800c805
 800c77c:	0800c805 	.word	0x0800c805
 800c780:	0800c805 	.word	0x0800c805
 800c784:	0800c805 	.word	0x0800c805
 800c788:	0800c805 	.word	0x0800c805
 800c78c:	0800c805 	.word	0x0800c805
 800c790:	0800c805 	.word	0x0800c805
 800c794:	0800c7d9 	.word	0x0800c7d9
 800c798:	0800c805 	.word	0x0800c805
 800c79c:	0800c805 	.word	0x0800c805
 800c7a0:	0800c805 	.word	0x0800c805
 800c7a4:	0800c805 	.word	0x0800c805
 800c7a8:	0800c805 	.word	0x0800c805
 800c7ac:	0800c805 	.word	0x0800c805
 800c7b0:	0800c805 	.word	0x0800c805
 800c7b4:	0800c7e1 	.word	0x0800c7e1
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c7be:	e0a4      	b.n	800c90a <USART_SetConfig+0x476>
 800c7c0:	2302      	movs	r3, #2
 800c7c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c7c6:	e0a0      	b.n	800c90a <USART_SetConfig+0x476>
 800c7c8:	2304      	movs	r3, #4
 800c7ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c7ce:	e09c      	b.n	800c90a <USART_SetConfig+0x476>
 800c7d0:	2308      	movs	r3, #8
 800c7d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c7d6:	e098      	b.n	800c90a <USART_SetConfig+0x476>
 800c7d8:	2310      	movs	r3, #16
 800c7da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c7de:	e094      	b.n	800c90a <USART_SetConfig+0x476>
 800c7e0:	2320      	movs	r3, #32
 800c7e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c7e6:	e090      	b.n	800c90a <USART_SetConfig+0x476>
 800c7e8:	cfff69f3 	.word	0xcfff69f3
 800c7ec:	ffffc0f6 	.word	0xffffc0f6
 800c7f0:	40011000 	.word	0x40011000
 800c7f4:	58024400 	.word	0x58024400
 800c7f8:	40004400 	.word	0x40004400
 800c7fc:	40004800 	.word	0x40004800
 800c800:	40011400 	.word	0x40011400
 800c804:	2340      	movs	r3, #64	@ 0x40
 800c806:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c80a:	e07e      	b.n	800c90a <USART_SetConfig+0x476>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4ab5      	ldr	r2, [pc, #724]	@ (800cae8 <USART_SetConfig+0x654>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d176      	bne.n	800c904 <USART_SetConfig+0x470>
 800c816:	4bb5      	ldr	r3, [pc, #724]	@ (800caec <USART_SetConfig+0x658>)
 800c818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c81a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c81e:	2b28      	cmp	r3, #40	@ 0x28
 800c820:	d86c      	bhi.n	800c8fc <USART_SetConfig+0x468>
 800c822:	a201      	add	r2, pc, #4	@ (adr r2, 800c828 <USART_SetConfig+0x394>)
 800c824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c828:	0800c8cd 	.word	0x0800c8cd
 800c82c:	0800c8fd 	.word	0x0800c8fd
 800c830:	0800c8fd 	.word	0x0800c8fd
 800c834:	0800c8fd 	.word	0x0800c8fd
 800c838:	0800c8fd 	.word	0x0800c8fd
 800c83c:	0800c8fd 	.word	0x0800c8fd
 800c840:	0800c8fd 	.word	0x0800c8fd
 800c844:	0800c8fd 	.word	0x0800c8fd
 800c848:	0800c8d5 	.word	0x0800c8d5
 800c84c:	0800c8fd 	.word	0x0800c8fd
 800c850:	0800c8fd 	.word	0x0800c8fd
 800c854:	0800c8fd 	.word	0x0800c8fd
 800c858:	0800c8fd 	.word	0x0800c8fd
 800c85c:	0800c8fd 	.word	0x0800c8fd
 800c860:	0800c8fd 	.word	0x0800c8fd
 800c864:	0800c8fd 	.word	0x0800c8fd
 800c868:	0800c8dd 	.word	0x0800c8dd
 800c86c:	0800c8fd 	.word	0x0800c8fd
 800c870:	0800c8fd 	.word	0x0800c8fd
 800c874:	0800c8fd 	.word	0x0800c8fd
 800c878:	0800c8fd 	.word	0x0800c8fd
 800c87c:	0800c8fd 	.word	0x0800c8fd
 800c880:	0800c8fd 	.word	0x0800c8fd
 800c884:	0800c8fd 	.word	0x0800c8fd
 800c888:	0800c8e5 	.word	0x0800c8e5
 800c88c:	0800c8fd 	.word	0x0800c8fd
 800c890:	0800c8fd 	.word	0x0800c8fd
 800c894:	0800c8fd 	.word	0x0800c8fd
 800c898:	0800c8fd 	.word	0x0800c8fd
 800c89c:	0800c8fd 	.word	0x0800c8fd
 800c8a0:	0800c8fd 	.word	0x0800c8fd
 800c8a4:	0800c8fd 	.word	0x0800c8fd
 800c8a8:	0800c8ed 	.word	0x0800c8ed
 800c8ac:	0800c8fd 	.word	0x0800c8fd
 800c8b0:	0800c8fd 	.word	0x0800c8fd
 800c8b4:	0800c8fd 	.word	0x0800c8fd
 800c8b8:	0800c8fd 	.word	0x0800c8fd
 800c8bc:	0800c8fd 	.word	0x0800c8fd
 800c8c0:	0800c8fd 	.word	0x0800c8fd
 800c8c4:	0800c8fd 	.word	0x0800c8fd
 800c8c8:	0800c8f5 	.word	0x0800c8f5
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c8d2:	e01a      	b.n	800c90a <USART_SetConfig+0x476>
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c8da:	e016      	b.n	800c90a <USART_SetConfig+0x476>
 800c8dc:	2304      	movs	r3, #4
 800c8de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c8e2:	e012      	b.n	800c90a <USART_SetConfig+0x476>
 800c8e4:	2308      	movs	r3, #8
 800c8e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c8ea:	e00e      	b.n	800c90a <USART_SetConfig+0x476>
 800c8ec:	2310      	movs	r3, #16
 800c8ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c8f2:	e00a      	b.n	800c90a <USART_SetConfig+0x476>
 800c8f4:	2320      	movs	r3, #32
 800c8f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c8fa:	e006      	b.n	800c90a <USART_SetConfig+0x476>
 800c8fc:	2340      	movs	r3, #64	@ 0x40
 800c8fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c902:	e002      	b.n	800c90a <USART_SetConfig+0x476>
 800c904:	2340      	movs	r3, #64	@ 0x40
 800c906:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800c90a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c90e:	2b20      	cmp	r3, #32
 800c910:	f200 832f 	bhi.w	800cf72 <USART_SetConfig+0xade>
 800c914:	a201      	add	r2, pc, #4	@ (adr r2, 800c91c <USART_SetConfig+0x488>)
 800c916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91a:	bf00      	nop
 800c91c:	0800c9a1 	.word	0x0800c9a1
 800c920:	0800ca57 	.word	0x0800ca57
 800c924:	0800cb17 	.word	0x0800cb17
 800c928:	0800cf73 	.word	0x0800cf73
 800c92c:	0800cbd1 	.word	0x0800cbd1
 800c930:	0800cf73 	.word	0x0800cf73
 800c934:	0800cf73 	.word	0x0800cf73
 800c938:	0800cf73 	.word	0x0800cf73
 800c93c:	0800cc8b 	.word	0x0800cc8b
 800c940:	0800cf73 	.word	0x0800cf73
 800c944:	0800cf73 	.word	0x0800cf73
 800c948:	0800cf73 	.word	0x0800cf73
 800c94c:	0800cf73 	.word	0x0800cf73
 800c950:	0800cf73 	.word	0x0800cf73
 800c954:	0800cf73 	.word	0x0800cf73
 800c958:	0800cf73 	.word	0x0800cf73
 800c95c:	0800ce03 	.word	0x0800ce03
 800c960:	0800cf73 	.word	0x0800cf73
 800c964:	0800cf73 	.word	0x0800cf73
 800c968:	0800cf73 	.word	0x0800cf73
 800c96c:	0800cf73 	.word	0x0800cf73
 800c970:	0800cf73 	.word	0x0800cf73
 800c974:	0800cf73 	.word	0x0800cf73
 800c978:	0800cf73 	.word	0x0800cf73
 800c97c:	0800cf73 	.word	0x0800cf73
 800c980:	0800cf73 	.word	0x0800cf73
 800c984:	0800cf73 	.word	0x0800cf73
 800c988:	0800cf73 	.word	0x0800cf73
 800c98c:	0800cf73 	.word	0x0800cf73
 800c990:	0800cf73 	.word	0x0800cf73
 800c994:	0800cf73 	.word	0x0800cf73
 800c998:	0800cf73 	.word	0x0800cf73
 800c99c:	0800cec1 	.word	0x0800cec1
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800c9a0:	f7f9 fd50 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 800c9a4:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d044      	beq.n	800ca38 <USART_SetConfig+0x5a4>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d03e      	beq.n	800ca34 <USART_SetConfig+0x5a0>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d038      	beq.n	800ca30 <USART_SetConfig+0x59c>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d032      	beq.n	800ca2c <USART_SetConfig+0x598>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ca:	2b04      	cmp	r3, #4
 800c9cc:	d02c      	beq.n	800ca28 <USART_SetConfig+0x594>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9d2:	2b05      	cmp	r3, #5
 800c9d4:	d026      	beq.n	800ca24 <USART_SetConfig+0x590>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9da:	2b06      	cmp	r3, #6
 800c9dc:	d020      	beq.n	800ca20 <USART_SetConfig+0x58c>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e2:	2b07      	cmp	r3, #7
 800c9e4:	d01a      	beq.n	800ca1c <USART_SetConfig+0x588>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ea:	2b08      	cmp	r3, #8
 800c9ec:	d014      	beq.n	800ca18 <USART_SetConfig+0x584>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9f2:	2b09      	cmp	r3, #9
 800c9f4:	d00e      	beq.n	800ca14 <USART_SetConfig+0x580>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9fa:	2b0a      	cmp	r3, #10
 800c9fc:	d008      	beq.n	800ca10 <USART_SetConfig+0x57c>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca02:	2b0b      	cmp	r3, #11
 800ca04:	d102      	bne.n	800ca0c <USART_SetConfig+0x578>
 800ca06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca0a:	e016      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e014      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca10:	2380      	movs	r3, #128	@ 0x80
 800ca12:	e012      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca14:	2340      	movs	r3, #64	@ 0x40
 800ca16:	e010      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca18:	2320      	movs	r3, #32
 800ca1a:	e00e      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca1c:	2310      	movs	r3, #16
 800ca1e:	e00c      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca20:	230c      	movs	r3, #12
 800ca22:	e00a      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca24:	230a      	movs	r3, #10
 800ca26:	e008      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca28:	2308      	movs	r3, #8
 800ca2a:	e006      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca2c:	2306      	movs	r3, #6
 800ca2e:	e004      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca30:	2304      	movs	r3, #4
 800ca32:	e002      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca34:	2302      	movs	r3, #2
 800ca36:	e000      	b.n	800ca3a <USART_SetConfig+0x5a6>
 800ca38:	2301      	movs	r3, #1
 800ca3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca40:	005a      	lsls	r2, r3, #1
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	085b      	lsrs	r3, r3, #1
 800ca48:	441a      	add	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca52:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ca54:	e291      	b.n	800cf7a <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca56:	f7f9 fd0b 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 800ca5a:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d049      	beq.n	800caf8 <USART_SetConfig+0x664>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d043      	beq.n	800caf4 <USART_SetConfig+0x660>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d03d      	beq.n	800caf0 <USART_SetConfig+0x65c>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca78:	2b03      	cmp	r3, #3
 800ca7a:	d032      	beq.n	800cae2 <USART_SetConfig+0x64e>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca80:	2b04      	cmp	r3, #4
 800ca82:	d02c      	beq.n	800cade <USART_SetConfig+0x64a>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca88:	2b05      	cmp	r3, #5
 800ca8a:	d026      	beq.n	800cada <USART_SetConfig+0x646>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca90:	2b06      	cmp	r3, #6
 800ca92:	d020      	beq.n	800cad6 <USART_SetConfig+0x642>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca98:	2b07      	cmp	r3, #7
 800ca9a:	d01a      	beq.n	800cad2 <USART_SetConfig+0x63e>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa0:	2b08      	cmp	r3, #8
 800caa2:	d014      	beq.n	800cace <USART_SetConfig+0x63a>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa8:	2b09      	cmp	r3, #9
 800caaa:	d00e      	beq.n	800caca <USART_SetConfig+0x636>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab0:	2b0a      	cmp	r3, #10
 800cab2:	d008      	beq.n	800cac6 <USART_SetConfig+0x632>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab8:	2b0b      	cmp	r3, #11
 800caba:	d102      	bne.n	800cac2 <USART_SetConfig+0x62e>
 800cabc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cac0:	e01b      	b.n	800cafa <USART_SetConfig+0x666>
 800cac2:	2301      	movs	r3, #1
 800cac4:	e019      	b.n	800cafa <USART_SetConfig+0x666>
 800cac6:	2380      	movs	r3, #128	@ 0x80
 800cac8:	e017      	b.n	800cafa <USART_SetConfig+0x666>
 800caca:	2340      	movs	r3, #64	@ 0x40
 800cacc:	e015      	b.n	800cafa <USART_SetConfig+0x666>
 800cace:	2320      	movs	r3, #32
 800cad0:	e013      	b.n	800cafa <USART_SetConfig+0x666>
 800cad2:	2310      	movs	r3, #16
 800cad4:	e011      	b.n	800cafa <USART_SetConfig+0x666>
 800cad6:	230c      	movs	r3, #12
 800cad8:	e00f      	b.n	800cafa <USART_SetConfig+0x666>
 800cada:	230a      	movs	r3, #10
 800cadc:	e00d      	b.n	800cafa <USART_SetConfig+0x666>
 800cade:	2308      	movs	r3, #8
 800cae0:	e00b      	b.n	800cafa <USART_SetConfig+0x666>
 800cae2:	2306      	movs	r3, #6
 800cae4:	e009      	b.n	800cafa <USART_SetConfig+0x666>
 800cae6:	bf00      	nop
 800cae8:	40011c00 	.word	0x40011c00
 800caec:	58024400 	.word	0x58024400
 800caf0:	2304      	movs	r3, #4
 800caf2:	e002      	b.n	800cafa <USART_SetConfig+0x666>
 800caf4:	2302      	movs	r3, #2
 800caf6:	e000      	b.n	800cafa <USART_SetConfig+0x666>
 800caf8:	2301      	movs	r3, #1
 800cafa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb00:	005a      	lsls	r2, r3, #1
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	085b      	lsrs	r3, r3, #1
 800cb08:	441a      	add	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb12:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cb14:	e231      	b.n	800cf7a <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb16:	f107 0318 	add.w	r3, r7, #24
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fb fb46 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800cb20:	69fa      	ldr	r2, [r7, #28]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d044      	beq.n	800cbb4 <USART_SetConfig+0x720>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d03e      	beq.n	800cbb0 <USART_SetConfig+0x71c>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d038      	beq.n	800cbac <USART_SetConfig+0x718>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb3e:	2b03      	cmp	r3, #3
 800cb40:	d032      	beq.n	800cba8 <USART_SetConfig+0x714>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb46:	2b04      	cmp	r3, #4
 800cb48:	d02c      	beq.n	800cba4 <USART_SetConfig+0x710>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb4e:	2b05      	cmp	r3, #5
 800cb50:	d026      	beq.n	800cba0 <USART_SetConfig+0x70c>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb56:	2b06      	cmp	r3, #6
 800cb58:	d020      	beq.n	800cb9c <USART_SetConfig+0x708>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb5e:	2b07      	cmp	r3, #7
 800cb60:	d01a      	beq.n	800cb98 <USART_SetConfig+0x704>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb66:	2b08      	cmp	r3, #8
 800cb68:	d014      	beq.n	800cb94 <USART_SetConfig+0x700>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb6e:	2b09      	cmp	r3, #9
 800cb70:	d00e      	beq.n	800cb90 <USART_SetConfig+0x6fc>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb76:	2b0a      	cmp	r3, #10
 800cb78:	d008      	beq.n	800cb8c <USART_SetConfig+0x6f8>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb7e:	2b0b      	cmp	r3, #11
 800cb80:	d102      	bne.n	800cb88 <USART_SetConfig+0x6f4>
 800cb82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb86:	e016      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e014      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cb8c:	2380      	movs	r3, #128	@ 0x80
 800cb8e:	e012      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cb90:	2340      	movs	r3, #64	@ 0x40
 800cb92:	e010      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cb94:	2320      	movs	r3, #32
 800cb96:	e00e      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cb98:	2310      	movs	r3, #16
 800cb9a:	e00c      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cb9c:	230c      	movs	r3, #12
 800cb9e:	e00a      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cba0:	230a      	movs	r3, #10
 800cba2:	e008      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cba4:	2308      	movs	r3, #8
 800cba6:	e006      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cba8:	2306      	movs	r3, #6
 800cbaa:	e004      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cbac:	2304      	movs	r3, #4
 800cbae:	e002      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	e000      	b.n	800cbb6 <USART_SetConfig+0x722>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbba:	005a      	lsls	r2, r3, #1
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	085b      	lsrs	r3, r3, #1
 800cbc2:	441a      	add	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbcc:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800cbce:	e1d4      	b.n	800cf7a <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbd0:	f107 030c 	add.w	r3, r7, #12
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7fb fc3d 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d044      	beq.n	800cc6e <USART_SetConfig+0x7da>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d03e      	beq.n	800cc6a <USART_SetConfig+0x7d6>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d038      	beq.n	800cc66 <USART_SetConfig+0x7d2>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d032      	beq.n	800cc62 <USART_SetConfig+0x7ce>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc00:	2b04      	cmp	r3, #4
 800cc02:	d02c      	beq.n	800cc5e <USART_SetConfig+0x7ca>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc08:	2b05      	cmp	r3, #5
 800cc0a:	d026      	beq.n	800cc5a <USART_SetConfig+0x7c6>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc10:	2b06      	cmp	r3, #6
 800cc12:	d020      	beq.n	800cc56 <USART_SetConfig+0x7c2>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc18:	2b07      	cmp	r3, #7
 800cc1a:	d01a      	beq.n	800cc52 <USART_SetConfig+0x7be>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc20:	2b08      	cmp	r3, #8
 800cc22:	d014      	beq.n	800cc4e <USART_SetConfig+0x7ba>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc28:	2b09      	cmp	r3, #9
 800cc2a:	d00e      	beq.n	800cc4a <USART_SetConfig+0x7b6>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc30:	2b0a      	cmp	r3, #10
 800cc32:	d008      	beq.n	800cc46 <USART_SetConfig+0x7b2>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc38:	2b0b      	cmp	r3, #11
 800cc3a:	d102      	bne.n	800cc42 <USART_SetConfig+0x7ae>
 800cc3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc40:	e016      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc42:	2301      	movs	r3, #1
 800cc44:	e014      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc46:	2380      	movs	r3, #128	@ 0x80
 800cc48:	e012      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc4a:	2340      	movs	r3, #64	@ 0x40
 800cc4c:	e010      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc4e:	2320      	movs	r3, #32
 800cc50:	e00e      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc52:	2310      	movs	r3, #16
 800cc54:	e00c      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc56:	230c      	movs	r3, #12
 800cc58:	e00a      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc5a:	230a      	movs	r3, #10
 800cc5c:	e008      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc5e:	2308      	movs	r3, #8
 800cc60:	e006      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc62:	2306      	movs	r3, #6
 800cc64:	e004      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc66:	2304      	movs	r3, #4
 800cc68:	e002      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc6a:	2302      	movs	r3, #2
 800cc6c:	e000      	b.n	800cc70 <USART_SetConfig+0x7dc>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc74:	005a      	lsls	r2, r3, #1
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	085b      	lsrs	r3, r3, #1
 800cc7c:	441a      	add	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc86:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800cc88:	e177      	b.n	800cf7a <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc8a:	4b8a      	ldr	r3, [pc, #552]	@ (800ceb4 <USART_SetConfig+0xa20>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 0320 	and.w	r3, r3, #32
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d05d      	beq.n	800cd52 <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800cc96:	4b87      	ldr	r3, [pc, #540]	@ (800ceb4 <USART_SetConfig+0xa20>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	08db      	lsrs	r3, r3, #3
 800cc9c:	f003 0303 	and.w	r3, r3, #3
 800cca0:	4a85      	ldr	r2, [pc, #532]	@ (800ceb8 <USART_SetConfig+0xa24>)
 800cca2:	40da      	lsrs	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d044      	beq.n	800cd36 <USART_SetConfig+0x8a2>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d03e      	beq.n	800cd32 <USART_SetConfig+0x89e>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d038      	beq.n	800cd2e <USART_SetConfig+0x89a>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccc0:	2b03      	cmp	r3, #3
 800ccc2:	d032      	beq.n	800cd2a <USART_SetConfig+0x896>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccc8:	2b04      	cmp	r3, #4
 800ccca:	d02c      	beq.n	800cd26 <USART_SetConfig+0x892>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccd0:	2b05      	cmp	r3, #5
 800ccd2:	d026      	beq.n	800cd22 <USART_SetConfig+0x88e>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccd8:	2b06      	cmp	r3, #6
 800ccda:	d020      	beq.n	800cd1e <USART_SetConfig+0x88a>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce0:	2b07      	cmp	r3, #7
 800cce2:	d01a      	beq.n	800cd1a <USART_SetConfig+0x886>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce8:	2b08      	cmp	r3, #8
 800ccea:	d014      	beq.n	800cd16 <USART_SetConfig+0x882>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf0:	2b09      	cmp	r3, #9
 800ccf2:	d00e      	beq.n	800cd12 <USART_SetConfig+0x87e>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf8:	2b0a      	cmp	r3, #10
 800ccfa:	d008      	beq.n	800cd0e <USART_SetConfig+0x87a>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd00:	2b0b      	cmp	r3, #11
 800cd02:	d102      	bne.n	800cd0a <USART_SetConfig+0x876>
 800cd04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd08:	e016      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e014      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd0e:	2380      	movs	r3, #128	@ 0x80
 800cd10:	e012      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd12:	2340      	movs	r3, #64	@ 0x40
 800cd14:	e010      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd16:	2320      	movs	r3, #32
 800cd18:	e00e      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd1a:	2310      	movs	r3, #16
 800cd1c:	e00c      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd1e:	230c      	movs	r3, #12
 800cd20:	e00a      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd22:	230a      	movs	r3, #10
 800cd24:	e008      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd26:	2308      	movs	r3, #8
 800cd28:	e006      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd2a:	2306      	movs	r3, #6
 800cd2c:	e004      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd2e:	2304      	movs	r3, #4
 800cd30:	e002      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd32:	2302      	movs	r3, #2
 800cd34:	e000      	b.n	800cd38 <USART_SetConfig+0x8a4>
 800cd36:	2301      	movs	r3, #1
 800cd38:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd3c:	005a      	lsls	r2, r3, #1
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	085b      	lsrs	r3, r3, #1
 800cd44:	441a      	add	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd4e:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800cd50:	e113      	b.n	800cf7a <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d044      	beq.n	800cde4 <USART_SetConfig+0x950>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d03e      	beq.n	800cde0 <USART_SetConfig+0x94c>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d038      	beq.n	800cddc <USART_SetConfig+0x948>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd6e:	2b03      	cmp	r3, #3
 800cd70:	d032      	beq.n	800cdd8 <USART_SetConfig+0x944>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd76:	2b04      	cmp	r3, #4
 800cd78:	d02c      	beq.n	800cdd4 <USART_SetConfig+0x940>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd7e:	2b05      	cmp	r3, #5
 800cd80:	d026      	beq.n	800cdd0 <USART_SetConfig+0x93c>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd86:	2b06      	cmp	r3, #6
 800cd88:	d020      	beq.n	800cdcc <USART_SetConfig+0x938>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd8e:	2b07      	cmp	r3, #7
 800cd90:	d01a      	beq.n	800cdc8 <USART_SetConfig+0x934>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd96:	2b08      	cmp	r3, #8
 800cd98:	d014      	beq.n	800cdc4 <USART_SetConfig+0x930>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd9e:	2b09      	cmp	r3, #9
 800cda0:	d00e      	beq.n	800cdc0 <USART_SetConfig+0x92c>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cda6:	2b0a      	cmp	r3, #10
 800cda8:	d008      	beq.n	800cdbc <USART_SetConfig+0x928>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdae:	2b0b      	cmp	r3, #11
 800cdb0:	d102      	bne.n	800cdb8 <USART_SetConfig+0x924>
 800cdb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cdb6:	e016      	b.n	800cde6 <USART_SetConfig+0x952>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	e014      	b.n	800cde6 <USART_SetConfig+0x952>
 800cdbc:	2380      	movs	r3, #128	@ 0x80
 800cdbe:	e012      	b.n	800cde6 <USART_SetConfig+0x952>
 800cdc0:	2340      	movs	r3, #64	@ 0x40
 800cdc2:	e010      	b.n	800cde6 <USART_SetConfig+0x952>
 800cdc4:	2320      	movs	r3, #32
 800cdc6:	e00e      	b.n	800cde6 <USART_SetConfig+0x952>
 800cdc8:	2310      	movs	r3, #16
 800cdca:	e00c      	b.n	800cde6 <USART_SetConfig+0x952>
 800cdcc:	230c      	movs	r3, #12
 800cdce:	e00a      	b.n	800cde6 <USART_SetConfig+0x952>
 800cdd0:	230a      	movs	r3, #10
 800cdd2:	e008      	b.n	800cde6 <USART_SetConfig+0x952>
 800cdd4:	2308      	movs	r3, #8
 800cdd6:	e006      	b.n	800cde6 <USART_SetConfig+0x952>
 800cdd8:	2306      	movs	r3, #6
 800cdda:	e004      	b.n	800cde6 <USART_SetConfig+0x952>
 800cddc:	2304      	movs	r3, #4
 800cdde:	e002      	b.n	800cde6 <USART_SetConfig+0x952>
 800cde0:	2302      	movs	r3, #2
 800cde2:	e000      	b.n	800cde6 <USART_SetConfig+0x952>
 800cde4:	2301      	movs	r3, #1
 800cde6:	4a34      	ldr	r2, [pc, #208]	@ (800ceb8 <USART_SetConfig+0xa24>)
 800cde8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdec:	005a      	lsls	r2, r3, #1
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	085b      	lsrs	r3, r3, #1
 800cdf4:	441a      	add	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdfe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ce00:	e0bb      	b.n	800cf7a <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d044      	beq.n	800ce94 <USART_SetConfig+0xa00>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d03e      	beq.n	800ce90 <USART_SetConfig+0x9fc>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d038      	beq.n	800ce8c <USART_SetConfig+0x9f8>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce1e:	2b03      	cmp	r3, #3
 800ce20:	d032      	beq.n	800ce88 <USART_SetConfig+0x9f4>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce26:	2b04      	cmp	r3, #4
 800ce28:	d02c      	beq.n	800ce84 <USART_SetConfig+0x9f0>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce2e:	2b05      	cmp	r3, #5
 800ce30:	d026      	beq.n	800ce80 <USART_SetConfig+0x9ec>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce36:	2b06      	cmp	r3, #6
 800ce38:	d020      	beq.n	800ce7c <USART_SetConfig+0x9e8>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce3e:	2b07      	cmp	r3, #7
 800ce40:	d01a      	beq.n	800ce78 <USART_SetConfig+0x9e4>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce46:	2b08      	cmp	r3, #8
 800ce48:	d014      	beq.n	800ce74 <USART_SetConfig+0x9e0>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce4e:	2b09      	cmp	r3, #9
 800ce50:	d00e      	beq.n	800ce70 <USART_SetConfig+0x9dc>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce56:	2b0a      	cmp	r3, #10
 800ce58:	d008      	beq.n	800ce6c <USART_SetConfig+0x9d8>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce5e:	2b0b      	cmp	r3, #11
 800ce60:	d102      	bne.n	800ce68 <USART_SetConfig+0x9d4>
 800ce62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce66:	e016      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e014      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce6c:	2380      	movs	r3, #128	@ 0x80
 800ce6e:	e012      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce70:	2340      	movs	r3, #64	@ 0x40
 800ce72:	e010      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce74:	2320      	movs	r3, #32
 800ce76:	e00e      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce78:	2310      	movs	r3, #16
 800ce7a:	e00c      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce7c:	230c      	movs	r3, #12
 800ce7e:	e00a      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce80:	230a      	movs	r3, #10
 800ce82:	e008      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce84:	2308      	movs	r3, #8
 800ce86:	e006      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce88:	2306      	movs	r3, #6
 800ce8a:	e004      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce8c:	2304      	movs	r3, #4
 800ce8e:	e002      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce90:	2302      	movs	r3, #2
 800ce92:	e000      	b.n	800ce96 <USART_SetConfig+0xa02>
 800ce94:	2301      	movs	r3, #1
 800ce96:	4a09      	ldr	r2, [pc, #36]	@ (800cebc <USART_SetConfig+0xa28>)
 800ce98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce9c:	005a      	lsls	r2, r3, #1
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	085b      	lsrs	r3, r3, #1
 800cea4:	441a      	add	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ceb0:	e063      	b.n	800cf7a <USART_SetConfig+0xae6>
 800ceb2:	bf00      	nop
 800ceb4:	58024400 	.word	0x58024400
 800ceb8:	03d09000 	.word	0x03d09000
 800cebc:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d044      	beq.n	800cf52 <USART_SetConfig+0xabe>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d03e      	beq.n	800cf4e <USART_SetConfig+0xaba>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d038      	beq.n	800cf4a <USART_SetConfig+0xab6>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cedc:	2b03      	cmp	r3, #3
 800cede:	d032      	beq.n	800cf46 <USART_SetConfig+0xab2>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee4:	2b04      	cmp	r3, #4
 800cee6:	d02c      	beq.n	800cf42 <USART_SetConfig+0xaae>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceec:	2b05      	cmp	r3, #5
 800ceee:	d026      	beq.n	800cf3e <USART_SetConfig+0xaaa>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cef4:	2b06      	cmp	r3, #6
 800cef6:	d020      	beq.n	800cf3a <USART_SetConfig+0xaa6>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cefc:	2b07      	cmp	r3, #7
 800cefe:	d01a      	beq.n	800cf36 <USART_SetConfig+0xaa2>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf04:	2b08      	cmp	r3, #8
 800cf06:	d014      	beq.n	800cf32 <USART_SetConfig+0xa9e>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf0c:	2b09      	cmp	r3, #9
 800cf0e:	d00e      	beq.n	800cf2e <USART_SetConfig+0xa9a>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf14:	2b0a      	cmp	r3, #10
 800cf16:	d008      	beq.n	800cf2a <USART_SetConfig+0xa96>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf1c:	2b0b      	cmp	r3, #11
 800cf1e:	d102      	bne.n	800cf26 <USART_SetConfig+0xa92>
 800cf20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf24:	e016      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf26:	2301      	movs	r3, #1
 800cf28:	e014      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf2a:	2380      	movs	r3, #128	@ 0x80
 800cf2c:	e012      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf2e:	2340      	movs	r3, #64	@ 0x40
 800cf30:	e010      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf32:	2320      	movs	r3, #32
 800cf34:	e00e      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf36:	2310      	movs	r3, #16
 800cf38:	e00c      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf3a:	230c      	movs	r3, #12
 800cf3c:	e00a      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf3e:	230a      	movs	r3, #10
 800cf40:	e008      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf42:	2308      	movs	r3, #8
 800cf44:	e006      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf46:	2306      	movs	r3, #6
 800cf48:	e004      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf4a:	2304      	movs	r3, #4
 800cf4c:	e002      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf4e:	2302      	movs	r3, #2
 800cf50:	e000      	b.n	800cf54 <USART_SetConfig+0xac0>
 800cf52:	2301      	movs	r3, #1
 800cf54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800cf58:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf5c:	005a      	lsls	r2, r3, #1
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	085b      	lsrs	r3, r3, #1
 800cf64:	441a      	add	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf6e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cf70:	e003      	b.n	800cf7a <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800cf78:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7c:	2b0f      	cmp	r3, #15
 800cf7e:	d916      	bls.n	800cfae <USART_SetConfig+0xb1a>
 800cf80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf86:	d212      	bcs.n	800cfae <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	f023 030f 	bic.w	r3, r3, #15
 800cf90:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf94:	085b      	lsrs	r3, r3, #1
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	f003 0307 	and.w	r3, r3, #7
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800cfaa:	60da      	str	r2, [r3, #12]
 800cfac:	e002      	b.n	800cfb4 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800cfcc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3738      	adds	r7, #56	@ 0x38
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b086      	sub	sp, #24
 800cfdc:	af02      	add	r7, sp, #8
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cfe6:	f7f6 fac3 	bl	8003570 <HAL_GetTick>
 800cfea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f003 0308 	and.w	r3, r3, #8
 800cff6:	2b08      	cmp	r3, #8
 800cff8:	d10e      	bne.n	800d018 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800cffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7ff fa0d 	bl	800c428 <USART_WaitOnFlagUntilTimeout>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d014:	2303      	movs	r3, #3
 800d016:	e01e      	b.n	800d056 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 0304 	and.w	r3, r3, #4
 800d022:	2b04      	cmp	r3, #4
 800d024:	d10e      	bne.n	800d044 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800d026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7ff f9f7 	bl	800c428 <USART_WaitOnFlagUntilTimeout>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d040:	2303      	movs	r3, #3
 800d042:	e008      	b.n	800d056 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800d05e:	b480      	push	{r7}
 800d060:	b085      	sub	sp, #20
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d101      	bne.n	800d074 <HAL_USARTEx_EnableSlaveMode+0x16>
 800d070:	2302      	movs	r3, #2
 800d072:	e043      	b.n	800d0fc <HAL_USARTEx_EnableSlaveMode+0x9e>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2201      	movs	r2, #1
 800d078:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2202      	movs	r2, #2
 800d080:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f022 0201 	bic.w	r2, r2, #1
 800d09a:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d0aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	689a      	ldr	r2, [r3, #8]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0ba:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	685a      	ldr	r2, [r3, #4]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f042 0201 	orr.w	r2, r2, #1
 800d0ca:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2201      	movs	r2, #1
 800d0de:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f042 0201 	orr.w	r2, r2, #1
 800d0f0:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d101      	bne.n	800d120 <HAL_USARTEx_ConfigNSS+0x18>
 800d11c:	2302      	movs	r3, #2
 800d11e:	e02a      	b.n	800d176 <HAL_USARTEx_ConfigNSS+0x6e>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2202      	movs	r2, #2
 800d12c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f022 0201 	bic.w	r2, r2, #1
 800d146:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	f023 0108 	bic.w	r1, r3, #8
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	683a      	ldr	r2, [r7, #0]
 800d158:	430a      	orrs	r2, r1
 800d15a:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3714      	adds	r7, #20
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr

0800d182 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800d182:	b480      	push	{r7}
 800d184:	b085      	sub	sp, #20
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d190:	2b01      	cmp	r3, #1
 800d192:	d101      	bne.n	800d198 <HAL_USARTEx_DisableFifoMode+0x16>
 800d194:	2302      	movs	r3, #2
 800d196:	e027      	b.n	800d1e8 <HAL_USARTEx_DisableFifoMode+0x66>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f022 0201 	bic.w	r2, r2, #1
 800d1be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d1c6:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d204:	2b01      	cmp	r3, #1
 800d206:	d101      	bne.n	800d20c <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800d208:	2302      	movs	r3, #2
 800d20a:	e02d      	b.n	800d268 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2201      	movs	r2, #1
 800d210:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2202      	movs	r2, #2
 800d218:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f022 0201 	bic.w	r2, r2, #1
 800d232:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	430a      	orrs	r2, r1
 800d246:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 f84f 	bl	800d2ec <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	68fa      	ldr	r2, [r7, #12]
 800d254:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2201      	movs	r2, #1
 800d25a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d280:	2b01      	cmp	r3, #1
 800d282:	d101      	bne.n	800d288 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800d284:	2302      	movs	r3, #2
 800d286:	e02d      	b.n	800d2e4 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2202      	movs	r2, #2
 800d294:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f022 0201 	bic.w	r2, r2, #1
 800d2ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	430a      	orrs	r2, r1
 800d2c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 f811 	bl	800d2ec <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d106      	bne.n	800d30a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2201      	movs	r2, #1
 800d300:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2201      	movs	r2, #1
 800d306:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d308:	e02f      	b.n	800d36a <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d30a:	2310      	movs	r3, #16
 800d30c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d30e:	2310      	movs	r3, #16
 800d310:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800d318:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	f003 0307 	and.w	r3, r3, #7
 800d320:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800d328:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	f003 0307 	and.w	r3, r3, #7
 800d330:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d332:	7bbb      	ldrb	r3, [r7, #14]
 800d334:	7b3a      	ldrb	r2, [r7, #12]
 800d336:	4910      	ldr	r1, [pc, #64]	@ (800d378 <USARTEx_SetNbDataToProcess+0x8c>)
 800d338:	5c8a      	ldrb	r2, [r1, r2]
 800d33a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800d33e:	7b3a      	ldrb	r2, [r7, #12]
 800d340:	490e      	ldr	r1, [pc, #56]	@ (800d37c <USARTEx_SetNbDataToProcess+0x90>)
 800d342:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d344:	fb93 f3f2 	sdiv	r3, r3, r2
 800d348:	b29a      	uxth	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
 800d350:	7b7a      	ldrb	r2, [r7, #13]
 800d352:	4909      	ldr	r1, [pc, #36]	@ (800d378 <USARTEx_SetNbDataToProcess+0x8c>)
 800d354:	5c8a      	ldrb	r2, [r1, r2]
 800d356:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800d35a:	7b7a      	ldrb	r2, [r7, #13]
 800d35c:	4907      	ldr	r1, [pc, #28]	@ (800d37c <USARTEx_SetNbDataToProcess+0x90>)
 800d35e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d360:	fb93 f3f2 	sdiv	r3, r3, r2
 800d364:	b29a      	uxth	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800d36a:	bf00      	nop
 800d36c:	3714      	adds	r7, #20
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	080122a8 	.word	0x080122a8
 800d37c:	080122b0 	.word	0x080122b0

0800d380 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d380:	b084      	sub	sp, #16
 800d382:	b480      	push	{r7}
 800d384:	b085      	sub	sp, #20
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	f107 001c 	add.w	r0, r7, #28
 800d38e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d392:	2300      	movs	r3, #0
 800d394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d396:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d398:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d39a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d39e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d3a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d3a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	4b07      	ldr	r3, [pc, #28]	@ (800d3d0 <SDMMC_Init+0x50>)
 800d3b4:	4013      	ands	r3, r2
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	431a      	orrs	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3714      	adds	r7, #20
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	b004      	add	sp, #16
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	ffc02c00 	.word	0xffc02c00

0800d3d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	370c      	adds	r7, #12
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b083      	sub	sp, #12
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f043 0203 	orr.w	r2, r3, #3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 0303 	and.w	r3, r3, #3
}
 800d420:	4618      	mov	r0, r3
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d44a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d450:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d456:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	68da      	ldr	r2, [r3, #12]
 800d462:	4b06      	ldr	r3, [pc, #24]	@ (800d47c <SDMMC_SendCommand+0x50>)
 800d464:	4013      	ands	r3, r2
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	431a      	orrs	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr
 800d47c:	fffee0c0 	.word	0xfffee0c0

0800d480 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	b2db      	uxtb	r3, r3
}
 800d48e:	4618      	mov	r0, r3
 800d490:	370c      	adds	r7, #12
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d49a:	b480      	push	{r7}
 800d49c:	b085      	sub	sp, #20
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3314      	adds	r3, #20
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b085      	sub	sp, #20
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	685a      	ldr	r2, [r3, #4]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d4e6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d4ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d4f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	431a      	orrs	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d50a:	2300      	movs	r3, #0

}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b088      	sub	sp, #32
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d526:	2310      	movs	r3, #16
 800d528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d52a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d52e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d530:	2300      	movs	r3, #0
 800d532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d538:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d53a:	f107 0308 	add.w	r3, r7, #8
 800d53e:	4619      	mov	r1, r3
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f7ff ff73 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d54a:	2110      	movs	r1, #16
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f995 	bl	800d87c <SDMMC_GetCmdResp1>
 800d552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d554:	69fb      	ldr	r3, [r7, #28]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3720      	adds	r7, #32
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b088      	sub	sp, #32
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
 800d566:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d56c:	2307      	movs	r3, #7
 800d56e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d576:	2300      	movs	r3, #0
 800d578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d57a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d57e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d580:	f107 0308 	add.w	r3, r7, #8
 800d584:	4619      	mov	r1, r3
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7ff ff50 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d58c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d590:	2107      	movs	r1, #7
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 f972 	bl	800d87c <SDMMC_GetCmdResp1>
 800d598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d59a:	69fb      	ldr	r3, [r7, #28]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3720      	adds	r7, #32
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b088      	sub	sp, #32
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5c2:	f107 0308 	add.w	r3, r7, #8
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7ff ff2f 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fb96 	bl	800dd00 <SDMMC_GetCmdError>
 800d5d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5d6:	69fb      	ldr	r3, [r7, #28]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3720      	adds	r7, #32
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b088      	sub	sp, #32
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d5e8:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d5ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d5ee:	2308      	movs	r3, #8
 800d5f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d600:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d602:	f107 0308 	add.w	r3, r7, #8
 800d606:	4619      	mov	r1, r3
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f7ff ff0f 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 fb28 	bl	800dc64 <SDMMC_GetCmdResp7>
 800d614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d616:	69fb      	ldr	r3, [r7, #28]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3720      	adds	r7, #32
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b088      	sub	sp, #32
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d62e:	2337      	movs	r3, #55	@ 0x37
 800d630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d638:	2300      	movs	r3, #0
 800d63a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d63c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d640:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d642:	f107 0308 	add.w	r3, r7, #8
 800d646:	4619      	mov	r1, r3
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f7ff feef 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d64e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d652:	2137      	movs	r1, #55	@ 0x37
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 f911 	bl	800d87c <SDMMC_GetCmdResp1>
 800d65a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d65c:	69fb      	ldr	r3, [r7, #28]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3720      	adds	r7, #32
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b088      	sub	sp, #32
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d674:	2329      	movs	r3, #41	@ 0x29
 800d676:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d678:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d67c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d67e:	2300      	movs	r3, #0
 800d680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d686:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d688:	f107 0308 	add.w	r3, r7, #8
 800d68c:	4619      	mov	r1, r3
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7ff fecc 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fa2d 	bl	800daf4 <SDMMC_GetCmdResp3>
 800d69a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d69c:	69fb      	ldr	r3, [r7, #28]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3720      	adds	r7, #32
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b088      	sub	sp, #32
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d6b4:	2306      	movs	r3, #6
 800d6b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d6bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6c8:	f107 0308 	add.w	r3, r7, #8
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7ff feac 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d6d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6d8:	2106      	movs	r1, #6
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 f8ce 	bl	800d87c <SDMMC_GetCmdResp1>
 800d6e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6e2:	69fb      	ldr	r3, [r7, #28]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3720      	adds	r7, #32
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b088      	sub	sp, #32
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d6f8:	2333      	movs	r3, #51	@ 0x33
 800d6fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d702:	2300      	movs	r3, #0
 800d704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d70a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d70c:	f107 0308 	add.w	r3, r7, #8
 800d710:	4619      	mov	r1, r3
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f7ff fe8a 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d71c:	2133      	movs	r1, #51	@ 0x33
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f8ac 	bl	800d87c <SDMMC_GetCmdResp1>
 800d724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d726:	69fb      	ldr	r3, [r7, #28]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3720      	adds	r7, #32
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b088      	sub	sp, #32
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d738:	2300      	movs	r3, #0
 800d73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d73c:	2302      	movs	r3, #2
 800d73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d740:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d746:	2300      	movs	r3, #0
 800d748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d74a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d74e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d750:	f107 0308 	add.w	r3, r7, #8
 800d754:	4619      	mov	r1, r3
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7ff fe68 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 f97f 	bl	800da60 <SDMMC_GetCmdResp2>
 800d762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d764:	69fb      	ldr	r3, [r7, #28]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3720      	adds	r7, #32
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b088      	sub	sp, #32
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d77c:	2309      	movs	r3, #9
 800d77e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d780:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d784:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d786:	2300      	movs	r3, #0
 800d788:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d78a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d78e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d790:	f107 0308 	add.w	r3, r7, #8
 800d794:	4619      	mov	r1, r3
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff fe48 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 f95f 	bl	800da60 <SDMMC_GetCmdResp2>
 800d7a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7a4:	69fb      	ldr	r3, [r7, #28]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3720      	adds	r7, #32
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b088      	sub	sp, #32
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d7bc:	2303      	movs	r3, #3
 800d7be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d7c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d7ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7d0:	f107 0308 	add.w	r3, r7, #8
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff fe28 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	2103      	movs	r1, #3
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 f9c7 	bl	800db74 <SDMMC_GetCmdResp6>
 800d7e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7e8:	69fb      	ldr	r3, [r7, #28]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3720      	adds	r7, #32
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b088      	sub	sp, #32
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d800:	230d      	movs	r3, #13
 800d802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d804:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d808:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d80a:	2300      	movs	r3, #0
 800d80c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d80e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d812:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d814:	f107 0308 	add.w	r3, r7, #8
 800d818:	4619      	mov	r1, r3
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7ff fe06 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d820:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d824:	210d      	movs	r1, #13
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f828 	bl	800d87c <SDMMC_GetCmdResp1>
 800d82c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d82e:	69fb      	ldr	r3, [r7, #28]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3720      	adds	r7, #32
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b088      	sub	sp, #32
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d840:	2300      	movs	r3, #0
 800d842:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d844:	230d      	movs	r3, #13
 800d846:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d84c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d84e:	2300      	movs	r3, #0
 800d850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d852:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d856:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d858:	f107 0308 	add.w	r3, r7, #8
 800d85c:	4619      	mov	r1, r3
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7ff fde4 	bl	800d42c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d864:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d868:	210d      	movs	r1, #13
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f806 	bl	800d87c <SDMMC_GetCmdResp1>
 800d870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d872:	69fb      	ldr	r3, [r7, #28]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3720      	adds	r7, #32
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	460b      	mov	r3, r1
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d88a:	4b70      	ldr	r3, [pc, #448]	@ (800da4c <SDMMC_GetCmdResp1+0x1d0>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a70      	ldr	r2, [pc, #448]	@ (800da50 <SDMMC_GetCmdResp1+0x1d4>)
 800d890:	fba2 2303 	umull	r2, r3, r2, r3
 800d894:	0a5a      	lsrs	r2, r3, #9
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	fb02 f303 	mul.w	r3, r2, r3
 800d89c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d89e:	69fb      	ldr	r3, [r7, #28]
 800d8a0:	1e5a      	subs	r2, r3, #1
 800d8a2:	61fa      	str	r2, [r7, #28]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d102      	bne.n	800d8ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8ac:	e0c9      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8b2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d8b4:	69ba      	ldr	r2, [r7, #24]
 800d8b6:	4b67      	ldr	r3, [pc, #412]	@ (800da54 <SDMMC_GetCmdResp1+0x1d8>)
 800d8b8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d0ef      	beq.n	800d89e <SDMMC_GetCmdResp1+0x22>
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1ea      	bne.n	800d89e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8cc:	f003 0304 	and.w	r3, r3, #4
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d004      	beq.n	800d8de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2204      	movs	r2, #4
 800d8d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8da:	2304      	movs	r3, #4
 800d8dc:	e0b1      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8e2:	f003 0301 	and.w	r3, r3, #1
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d004      	beq.n	800d8f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e0a6      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	4a58      	ldr	r2, [pc, #352]	@ (800da58 <SDMMC_GetCmdResp1+0x1dc>)
 800d8f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f7ff fdc0 	bl	800d480 <SDMMC_GetCommandResponse>
 800d900:	4603      	mov	r3, r0
 800d902:	461a      	mov	r2, r3
 800d904:	7afb      	ldrb	r3, [r7, #11]
 800d906:	4293      	cmp	r3, r2
 800d908:	d001      	beq.n	800d90e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d90a:	2301      	movs	r3, #1
 800d90c:	e099      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d90e:	2100      	movs	r1, #0
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f7ff fdc2 	bl	800d49a <SDMMC_GetResponse>
 800d916:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d918:	697a      	ldr	r2, [r7, #20]
 800d91a:	4b50      	ldr	r3, [pc, #320]	@ (800da5c <SDMMC_GetCmdResp1+0x1e0>)
 800d91c:	4013      	ands	r3, r2
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d922:	2300      	movs	r3, #0
 800d924:	e08d      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	da02      	bge.n	800d932 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d92c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d930:	e087      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d93c:	2340      	movs	r3, #64	@ 0x40
 800d93e:	e080      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d94a:	2380      	movs	r3, #128	@ 0x80
 800d94c:	e079      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d954:	2b00      	cmp	r3, #0
 800d956:	d002      	beq.n	800d95e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d958:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d95c:	e071      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d968:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d96c:	e069      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d978:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d97c:	e061      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d988:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d98c:	e059      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d002      	beq.n	800d99e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d99c:	e051      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d9a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d9ac:	e049      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d9b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d9bc:	e041      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d002      	beq.n	800d9ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d9c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9cc:	e039      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d9d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d9dc:	e031      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d002      	beq.n	800d9ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d9e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d9ec:	e029      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d002      	beq.n	800d9fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d9f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d9fc:	e021      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da04:	2b00      	cmp	r3, #0
 800da06:	d002      	beq.n	800da0e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800da08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800da0c:	e019      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da14:	2b00      	cmp	r3, #0
 800da16:	d002      	beq.n	800da1e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800da1c:	e011      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da24:	2b00      	cmp	r3, #0
 800da26:	d002      	beq.n	800da2e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800da28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800da2c:	e009      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	f003 0308 	and.w	r3, r3, #8
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da38:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800da3c:	e001      	b.n	800da42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800da42:	4618      	mov	r0, r3
 800da44:	3720      	adds	r7, #32
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	24000000 	.word	0x24000000
 800da50:	10624dd3 	.word	0x10624dd3
 800da54:	00200045 	.word	0x00200045
 800da58:	002000c5 	.word	0x002000c5
 800da5c:	fdffe008 	.word	0xfdffe008

0800da60 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800da60:	b480      	push	{r7}
 800da62:	b085      	sub	sp, #20
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800da68:	4b1f      	ldr	r3, [pc, #124]	@ (800dae8 <SDMMC_GetCmdResp2+0x88>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a1f      	ldr	r2, [pc, #124]	@ (800daec <SDMMC_GetCmdResp2+0x8c>)
 800da6e:	fba2 2303 	umull	r2, r3, r2, r3
 800da72:	0a5b      	lsrs	r3, r3, #9
 800da74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da78:	fb02 f303 	mul.w	r3, r2, r3
 800da7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	1e5a      	subs	r2, r3, #1
 800da82:	60fa      	str	r2, [r7, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d102      	bne.n	800da8e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da8c:	e026      	b.n	800dadc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da92:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d0ef      	beq.n	800da7e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1ea      	bne.n	800da7e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daac:	f003 0304 	and.w	r3, r3, #4
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d004      	beq.n	800dabe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2204      	movs	r2, #4
 800dab8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daba:	2304      	movs	r3, #4
 800dabc:	e00e      	b.n	800dadc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dac2:	f003 0301 	and.w	r3, r3, #1
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d004      	beq.n	800dad4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2201      	movs	r2, #1
 800dace:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dad0:	2301      	movs	r3, #1
 800dad2:	e003      	b.n	800dadc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a06      	ldr	r2, [pc, #24]	@ (800daf0 <SDMMC_GetCmdResp2+0x90>)
 800dad8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	24000000 	.word	0x24000000
 800daec:	10624dd3 	.word	0x10624dd3
 800daf0:	002000c5 	.word	0x002000c5

0800daf4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dafc:	4b1a      	ldr	r3, [pc, #104]	@ (800db68 <SDMMC_GetCmdResp3+0x74>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a1a      	ldr	r2, [pc, #104]	@ (800db6c <SDMMC_GetCmdResp3+0x78>)
 800db02:	fba2 2303 	umull	r2, r3, r2, r3
 800db06:	0a5b      	lsrs	r3, r3, #9
 800db08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db0c:	fb02 f303 	mul.w	r3, r2, r3
 800db10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	1e5a      	subs	r2, r3, #1
 800db16:	60fa      	str	r2, [r7, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d102      	bne.n	800db22 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db20:	e01b      	b.n	800db5a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db26:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d0ef      	beq.n	800db12 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1ea      	bne.n	800db12 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db40:	f003 0304 	and.w	r3, r3, #4
 800db44:	2b00      	cmp	r3, #0
 800db46:	d004      	beq.n	800db52 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2204      	movs	r2, #4
 800db4c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db4e:	2304      	movs	r3, #4
 800db50:	e003      	b.n	800db5a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4a06      	ldr	r2, [pc, #24]	@ (800db70 <SDMMC_GetCmdResp3+0x7c>)
 800db56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3714      	adds	r7, #20
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop
 800db68:	24000000 	.word	0x24000000
 800db6c:	10624dd3 	.word	0x10624dd3
 800db70:	002000c5 	.word	0x002000c5

0800db74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b088      	sub	sp, #32
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	460b      	mov	r3, r1
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800db82:	4b35      	ldr	r3, [pc, #212]	@ (800dc58 <SDMMC_GetCmdResp6+0xe4>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a35      	ldr	r2, [pc, #212]	@ (800dc5c <SDMMC_GetCmdResp6+0xe8>)
 800db88:	fba2 2303 	umull	r2, r3, r2, r3
 800db8c:	0a5b      	lsrs	r3, r3, #9
 800db8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db92:	fb02 f303 	mul.w	r3, r2, r3
 800db96:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	1e5a      	subs	r2, r3, #1
 800db9c:	61fa      	str	r2, [r7, #28]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d102      	bne.n	800dba8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dba2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dba6:	e052      	b.n	800dc4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbac:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d0ef      	beq.n	800db98 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dbb8:	69bb      	ldr	r3, [r7, #24]
 800dbba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1ea      	bne.n	800db98 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbc6:	f003 0304 	and.w	r3, r3, #4
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d004      	beq.n	800dbd8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2204      	movs	r2, #4
 800dbd2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbd4:	2304      	movs	r3, #4
 800dbd6:	e03a      	b.n	800dc4e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbdc:	f003 0301 	and.w	r3, r3, #1
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d004      	beq.n	800dbee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbea:	2301      	movs	r3, #1
 800dbec:	e02f      	b.n	800dc4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f7ff fc46 	bl	800d480 <SDMMC_GetCommandResponse>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	7afb      	ldrb	r3, [r7, #11]
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d001      	beq.n	800dc02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e025      	b.n	800dc4e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	4a16      	ldr	r2, [pc, #88]	@ (800dc60 <SDMMC_GetCmdResp6+0xec>)
 800dc06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dc08:	2100      	movs	r1, #0
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	f7ff fc45 	bl	800d49a <SDMMC_GetResponse>
 800dc10:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d106      	bne.n	800dc2a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	0c1b      	lsrs	r3, r3, #16
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800dc26:	2300      	movs	r3, #0
 800dc28:	e011      	b.n	800dc4e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d002      	beq.n	800dc3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dc38:	e009      	b.n	800dc4e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc48:	e001      	b.n	800dc4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3720      	adds	r7, #32
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	24000000 	.word	0x24000000
 800dc5c:	10624dd3 	.word	0x10624dd3
 800dc60:	002000c5 	.word	0x002000c5

0800dc64 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dc6c:	4b22      	ldr	r3, [pc, #136]	@ (800dcf8 <SDMMC_GetCmdResp7+0x94>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a22      	ldr	r2, [pc, #136]	@ (800dcfc <SDMMC_GetCmdResp7+0x98>)
 800dc72:	fba2 2303 	umull	r2, r3, r2, r3
 800dc76:	0a5b      	lsrs	r3, r3, #9
 800dc78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc7c:	fb02 f303 	mul.w	r3, r2, r3
 800dc80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	1e5a      	subs	r2, r3, #1
 800dc86:	60fa      	str	r2, [r7, #12]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d102      	bne.n	800dc92 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc90:	e02c      	b.n	800dcec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc96:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d0ef      	beq.n	800dc82 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1ea      	bne.n	800dc82 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcb0:	f003 0304 	and.w	r3, r3, #4
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d004      	beq.n	800dcc2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2204      	movs	r2, #4
 800dcbc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcbe:	2304      	movs	r3, #4
 800dcc0:	e014      	b.n	800dcec <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcc6:	f003 0301 	and.w	r3, r3, #1
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d004      	beq.n	800dcd8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e009      	b.n	800dcec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d002      	beq.n	800dcea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2240      	movs	r2, #64	@ 0x40
 800dce8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dcea:	2300      	movs	r3, #0

}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3714      	adds	r7, #20
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr
 800dcf8:	24000000 	.word	0x24000000
 800dcfc:	10624dd3 	.word	0x10624dd3

0800dd00 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dd08:	4b11      	ldr	r3, [pc, #68]	@ (800dd50 <SDMMC_GetCmdError+0x50>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a11      	ldr	r2, [pc, #68]	@ (800dd54 <SDMMC_GetCmdError+0x54>)
 800dd0e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd12:	0a5b      	lsrs	r3, r3, #9
 800dd14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd18:	fb02 f303 	mul.w	r3, r2, r3
 800dd1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	1e5a      	subs	r2, r3, #1
 800dd22:	60fa      	str	r2, [r7, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d102      	bne.n	800dd2e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd2c:	e009      	b.n	800dd42 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d0f1      	beq.n	800dd1e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a06      	ldr	r2, [pc, #24]	@ (800dd58 <SDMMC_GetCmdError+0x58>)
 800dd3e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	24000000 	.word	0x24000000
 800dd54:	10624dd3 	.word	0x10624dd3
 800dd58:	002000c5 	.word	0x002000c5

0800dd5c <__cvt>:
 800dd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd5e:	ed2d 8b02 	vpush	{d8}
 800dd62:	eeb0 8b40 	vmov.f64	d8, d0
 800dd66:	b085      	sub	sp, #20
 800dd68:	4617      	mov	r7, r2
 800dd6a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800dd6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd6e:	ee18 2a90 	vmov	r2, s17
 800dd72:	f025 0520 	bic.w	r5, r5, #32
 800dd76:	2a00      	cmp	r2, #0
 800dd78:	bfb6      	itet	lt
 800dd7a:	222d      	movlt	r2, #45	@ 0x2d
 800dd7c:	2200      	movge	r2, #0
 800dd7e:	eeb1 8b40 	vneglt.f64	d8, d0
 800dd82:	2d46      	cmp	r5, #70	@ 0x46
 800dd84:	460c      	mov	r4, r1
 800dd86:	701a      	strb	r2, [r3, #0]
 800dd88:	d004      	beq.n	800dd94 <__cvt+0x38>
 800dd8a:	2d45      	cmp	r5, #69	@ 0x45
 800dd8c:	d100      	bne.n	800dd90 <__cvt+0x34>
 800dd8e:	3401      	adds	r4, #1
 800dd90:	2102      	movs	r1, #2
 800dd92:	e000      	b.n	800dd96 <__cvt+0x3a>
 800dd94:	2103      	movs	r1, #3
 800dd96:	ab03      	add	r3, sp, #12
 800dd98:	9301      	str	r3, [sp, #4]
 800dd9a:	ab02      	add	r3, sp, #8
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	4622      	mov	r2, r4
 800dda0:	4633      	mov	r3, r6
 800dda2:	eeb0 0b48 	vmov.f64	d0, d8
 800dda6:	f001 f84f 	bl	800ee48 <_dtoa_r>
 800ddaa:	2d47      	cmp	r5, #71	@ 0x47
 800ddac:	d114      	bne.n	800ddd8 <__cvt+0x7c>
 800ddae:	07fb      	lsls	r3, r7, #31
 800ddb0:	d50a      	bpl.n	800ddc8 <__cvt+0x6c>
 800ddb2:	1902      	adds	r2, r0, r4
 800ddb4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbc:	bf08      	it	eq
 800ddbe:	9203      	streq	r2, [sp, #12]
 800ddc0:	2130      	movs	r1, #48	@ 0x30
 800ddc2:	9b03      	ldr	r3, [sp, #12]
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d319      	bcc.n	800ddfc <__cvt+0xa0>
 800ddc8:	9b03      	ldr	r3, [sp, #12]
 800ddca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddcc:	1a1b      	subs	r3, r3, r0
 800ddce:	6013      	str	r3, [r2, #0]
 800ddd0:	b005      	add	sp, #20
 800ddd2:	ecbd 8b02 	vpop	{d8}
 800ddd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddd8:	2d46      	cmp	r5, #70	@ 0x46
 800ddda:	eb00 0204 	add.w	r2, r0, r4
 800ddde:	d1e9      	bne.n	800ddb4 <__cvt+0x58>
 800dde0:	7803      	ldrb	r3, [r0, #0]
 800dde2:	2b30      	cmp	r3, #48	@ 0x30
 800dde4:	d107      	bne.n	800ddf6 <__cvt+0x9a>
 800dde6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ddea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddee:	bf1c      	itt	ne
 800ddf0:	f1c4 0401 	rsbne	r4, r4, #1
 800ddf4:	6034      	strne	r4, [r6, #0]
 800ddf6:	6833      	ldr	r3, [r6, #0]
 800ddf8:	441a      	add	r2, r3
 800ddfa:	e7db      	b.n	800ddb4 <__cvt+0x58>
 800ddfc:	1c5c      	adds	r4, r3, #1
 800ddfe:	9403      	str	r4, [sp, #12]
 800de00:	7019      	strb	r1, [r3, #0]
 800de02:	e7de      	b.n	800ddc2 <__cvt+0x66>

0800de04 <__exponent>:
 800de04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de06:	2900      	cmp	r1, #0
 800de08:	bfba      	itte	lt
 800de0a:	4249      	neglt	r1, r1
 800de0c:	232d      	movlt	r3, #45	@ 0x2d
 800de0e:	232b      	movge	r3, #43	@ 0x2b
 800de10:	2909      	cmp	r1, #9
 800de12:	7002      	strb	r2, [r0, #0]
 800de14:	7043      	strb	r3, [r0, #1]
 800de16:	dd29      	ble.n	800de6c <__exponent+0x68>
 800de18:	f10d 0307 	add.w	r3, sp, #7
 800de1c:	461d      	mov	r5, r3
 800de1e:	270a      	movs	r7, #10
 800de20:	461a      	mov	r2, r3
 800de22:	fbb1 f6f7 	udiv	r6, r1, r7
 800de26:	fb07 1416 	mls	r4, r7, r6, r1
 800de2a:	3430      	adds	r4, #48	@ 0x30
 800de2c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800de30:	460c      	mov	r4, r1
 800de32:	2c63      	cmp	r4, #99	@ 0x63
 800de34:	f103 33ff 	add.w	r3, r3, #4294967295
 800de38:	4631      	mov	r1, r6
 800de3a:	dcf1      	bgt.n	800de20 <__exponent+0x1c>
 800de3c:	3130      	adds	r1, #48	@ 0x30
 800de3e:	1e94      	subs	r4, r2, #2
 800de40:	f803 1c01 	strb.w	r1, [r3, #-1]
 800de44:	1c41      	adds	r1, r0, #1
 800de46:	4623      	mov	r3, r4
 800de48:	42ab      	cmp	r3, r5
 800de4a:	d30a      	bcc.n	800de62 <__exponent+0x5e>
 800de4c:	f10d 0309 	add.w	r3, sp, #9
 800de50:	1a9b      	subs	r3, r3, r2
 800de52:	42ac      	cmp	r4, r5
 800de54:	bf88      	it	hi
 800de56:	2300      	movhi	r3, #0
 800de58:	3302      	adds	r3, #2
 800de5a:	4403      	add	r3, r0
 800de5c:	1a18      	subs	r0, r3, r0
 800de5e:	b003      	add	sp, #12
 800de60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de62:	f813 6b01 	ldrb.w	r6, [r3], #1
 800de66:	f801 6f01 	strb.w	r6, [r1, #1]!
 800de6a:	e7ed      	b.n	800de48 <__exponent+0x44>
 800de6c:	2330      	movs	r3, #48	@ 0x30
 800de6e:	3130      	adds	r1, #48	@ 0x30
 800de70:	7083      	strb	r3, [r0, #2]
 800de72:	70c1      	strb	r1, [r0, #3]
 800de74:	1d03      	adds	r3, r0, #4
 800de76:	e7f1      	b.n	800de5c <__exponent+0x58>

0800de78 <_printf_float>:
 800de78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7c:	b08d      	sub	sp, #52	@ 0x34
 800de7e:	460c      	mov	r4, r1
 800de80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800de84:	4616      	mov	r6, r2
 800de86:	461f      	mov	r7, r3
 800de88:	4605      	mov	r5, r0
 800de8a:	f000 fed7 	bl	800ec3c <_localeconv_r>
 800de8e:	f8d0 b000 	ldr.w	fp, [r0]
 800de92:	4658      	mov	r0, fp
 800de94:	f7f2 fa8c 	bl	80003b0 <strlen>
 800de98:	2300      	movs	r3, #0
 800de9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800de9c:	f8d8 3000 	ldr.w	r3, [r8]
 800dea0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dea4:	6822      	ldr	r2, [r4, #0]
 800dea6:	9005      	str	r0, [sp, #20]
 800dea8:	3307      	adds	r3, #7
 800deaa:	f023 0307 	bic.w	r3, r3, #7
 800deae:	f103 0108 	add.w	r1, r3, #8
 800deb2:	f8c8 1000 	str.w	r1, [r8]
 800deb6:	ed93 0b00 	vldr	d0, [r3]
 800deba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e118 <_printf_float+0x2a0>
 800debe:	eeb0 7bc0 	vabs.f64	d7, d0
 800dec2:	eeb4 7b46 	vcmp.f64	d7, d6
 800dec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800dece:	dd24      	ble.n	800df1a <_printf_float+0xa2>
 800ded0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ded4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded8:	d502      	bpl.n	800dee0 <_printf_float+0x68>
 800deda:	232d      	movs	r3, #45	@ 0x2d
 800dedc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dee0:	498f      	ldr	r1, [pc, #572]	@ (800e120 <_printf_float+0x2a8>)
 800dee2:	4b90      	ldr	r3, [pc, #576]	@ (800e124 <_printf_float+0x2ac>)
 800dee4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800dee8:	bf94      	ite	ls
 800deea:	4688      	movls	r8, r1
 800deec:	4698      	movhi	r8, r3
 800deee:	f022 0204 	bic.w	r2, r2, #4
 800def2:	2303      	movs	r3, #3
 800def4:	6123      	str	r3, [r4, #16]
 800def6:	6022      	str	r2, [r4, #0]
 800def8:	f04f 0a00 	mov.w	sl, #0
 800defc:	9700      	str	r7, [sp, #0]
 800defe:	4633      	mov	r3, r6
 800df00:	aa0b      	add	r2, sp, #44	@ 0x2c
 800df02:	4621      	mov	r1, r4
 800df04:	4628      	mov	r0, r5
 800df06:	f000 f9d1 	bl	800e2ac <_printf_common>
 800df0a:	3001      	adds	r0, #1
 800df0c:	f040 8089 	bne.w	800e022 <_printf_float+0x1aa>
 800df10:	f04f 30ff 	mov.w	r0, #4294967295
 800df14:	b00d      	add	sp, #52	@ 0x34
 800df16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1a:	eeb4 0b40 	vcmp.f64	d0, d0
 800df1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df22:	d709      	bvc.n	800df38 <_printf_float+0xc0>
 800df24:	ee10 3a90 	vmov	r3, s1
 800df28:	2b00      	cmp	r3, #0
 800df2a:	bfbc      	itt	lt
 800df2c:	232d      	movlt	r3, #45	@ 0x2d
 800df2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800df32:	497d      	ldr	r1, [pc, #500]	@ (800e128 <_printf_float+0x2b0>)
 800df34:	4b7d      	ldr	r3, [pc, #500]	@ (800e12c <_printf_float+0x2b4>)
 800df36:	e7d5      	b.n	800dee4 <_printf_float+0x6c>
 800df38:	6863      	ldr	r3, [r4, #4]
 800df3a:	1c59      	adds	r1, r3, #1
 800df3c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800df40:	d139      	bne.n	800dfb6 <_printf_float+0x13e>
 800df42:	2306      	movs	r3, #6
 800df44:	6063      	str	r3, [r4, #4]
 800df46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800df4a:	2300      	movs	r3, #0
 800df4c:	6022      	str	r2, [r4, #0]
 800df4e:	9303      	str	r3, [sp, #12]
 800df50:	ab0a      	add	r3, sp, #40	@ 0x28
 800df52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800df56:	ab09      	add	r3, sp, #36	@ 0x24
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	6861      	ldr	r1, [r4, #4]
 800df5c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800df60:	4628      	mov	r0, r5
 800df62:	f7ff fefb 	bl	800dd5c <__cvt>
 800df66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800df6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800df6c:	4680      	mov	r8, r0
 800df6e:	d129      	bne.n	800dfc4 <_printf_float+0x14c>
 800df70:	1cc8      	adds	r0, r1, #3
 800df72:	db02      	blt.n	800df7a <_printf_float+0x102>
 800df74:	6863      	ldr	r3, [r4, #4]
 800df76:	4299      	cmp	r1, r3
 800df78:	dd41      	ble.n	800dffe <_printf_float+0x186>
 800df7a:	f1a9 0902 	sub.w	r9, r9, #2
 800df7e:	fa5f f989 	uxtb.w	r9, r9
 800df82:	3901      	subs	r1, #1
 800df84:	464a      	mov	r2, r9
 800df86:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800df8a:	9109      	str	r1, [sp, #36]	@ 0x24
 800df8c:	f7ff ff3a 	bl	800de04 <__exponent>
 800df90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df92:	1813      	adds	r3, r2, r0
 800df94:	2a01      	cmp	r2, #1
 800df96:	4682      	mov	sl, r0
 800df98:	6123      	str	r3, [r4, #16]
 800df9a:	dc02      	bgt.n	800dfa2 <_printf_float+0x12a>
 800df9c:	6822      	ldr	r2, [r4, #0]
 800df9e:	07d2      	lsls	r2, r2, #31
 800dfa0:	d501      	bpl.n	800dfa6 <_printf_float+0x12e>
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	6123      	str	r3, [r4, #16]
 800dfa6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d0a6      	beq.n	800defc <_printf_float+0x84>
 800dfae:	232d      	movs	r3, #45	@ 0x2d
 800dfb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfb4:	e7a2      	b.n	800defc <_printf_float+0x84>
 800dfb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dfba:	d1c4      	bne.n	800df46 <_printf_float+0xce>
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1c2      	bne.n	800df46 <_printf_float+0xce>
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e7bf      	b.n	800df44 <_printf_float+0xcc>
 800dfc4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800dfc8:	d9db      	bls.n	800df82 <_printf_float+0x10a>
 800dfca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800dfce:	d118      	bne.n	800e002 <_printf_float+0x18a>
 800dfd0:	2900      	cmp	r1, #0
 800dfd2:	6863      	ldr	r3, [r4, #4]
 800dfd4:	dd0b      	ble.n	800dfee <_printf_float+0x176>
 800dfd6:	6121      	str	r1, [r4, #16]
 800dfd8:	b913      	cbnz	r3, 800dfe0 <_printf_float+0x168>
 800dfda:	6822      	ldr	r2, [r4, #0]
 800dfdc:	07d0      	lsls	r0, r2, #31
 800dfde:	d502      	bpl.n	800dfe6 <_printf_float+0x16e>
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	440b      	add	r3, r1
 800dfe4:	6123      	str	r3, [r4, #16]
 800dfe6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dfe8:	f04f 0a00 	mov.w	sl, #0
 800dfec:	e7db      	b.n	800dfa6 <_printf_float+0x12e>
 800dfee:	b913      	cbnz	r3, 800dff6 <_printf_float+0x17e>
 800dff0:	6822      	ldr	r2, [r4, #0]
 800dff2:	07d2      	lsls	r2, r2, #31
 800dff4:	d501      	bpl.n	800dffa <_printf_float+0x182>
 800dff6:	3302      	adds	r3, #2
 800dff8:	e7f4      	b.n	800dfe4 <_printf_float+0x16c>
 800dffa:	2301      	movs	r3, #1
 800dffc:	e7f2      	b.n	800dfe4 <_printf_float+0x16c>
 800dffe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e002:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e004:	4299      	cmp	r1, r3
 800e006:	db05      	blt.n	800e014 <_printf_float+0x19c>
 800e008:	6823      	ldr	r3, [r4, #0]
 800e00a:	6121      	str	r1, [r4, #16]
 800e00c:	07d8      	lsls	r0, r3, #31
 800e00e:	d5ea      	bpl.n	800dfe6 <_printf_float+0x16e>
 800e010:	1c4b      	adds	r3, r1, #1
 800e012:	e7e7      	b.n	800dfe4 <_printf_float+0x16c>
 800e014:	2900      	cmp	r1, #0
 800e016:	bfd4      	ite	le
 800e018:	f1c1 0202 	rsble	r2, r1, #2
 800e01c:	2201      	movgt	r2, #1
 800e01e:	4413      	add	r3, r2
 800e020:	e7e0      	b.n	800dfe4 <_printf_float+0x16c>
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	055a      	lsls	r2, r3, #21
 800e026:	d407      	bmi.n	800e038 <_printf_float+0x1c0>
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	4642      	mov	r2, r8
 800e02c:	4631      	mov	r1, r6
 800e02e:	4628      	mov	r0, r5
 800e030:	47b8      	blx	r7
 800e032:	3001      	adds	r0, #1
 800e034:	d12a      	bne.n	800e08c <_printf_float+0x214>
 800e036:	e76b      	b.n	800df10 <_printf_float+0x98>
 800e038:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e03c:	f240 80e0 	bls.w	800e200 <_printf_float+0x388>
 800e040:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e044:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e04c:	d133      	bne.n	800e0b6 <_printf_float+0x23e>
 800e04e:	4a38      	ldr	r2, [pc, #224]	@ (800e130 <_printf_float+0x2b8>)
 800e050:	2301      	movs	r3, #1
 800e052:	4631      	mov	r1, r6
 800e054:	4628      	mov	r0, r5
 800e056:	47b8      	blx	r7
 800e058:	3001      	adds	r0, #1
 800e05a:	f43f af59 	beq.w	800df10 <_printf_float+0x98>
 800e05e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e062:	4543      	cmp	r3, r8
 800e064:	db02      	blt.n	800e06c <_printf_float+0x1f4>
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	07d8      	lsls	r0, r3, #31
 800e06a:	d50f      	bpl.n	800e08c <_printf_float+0x214>
 800e06c:	9b05      	ldr	r3, [sp, #20]
 800e06e:	465a      	mov	r2, fp
 800e070:	4631      	mov	r1, r6
 800e072:	4628      	mov	r0, r5
 800e074:	47b8      	blx	r7
 800e076:	3001      	adds	r0, #1
 800e078:	f43f af4a 	beq.w	800df10 <_printf_float+0x98>
 800e07c:	f04f 0900 	mov.w	r9, #0
 800e080:	f108 38ff 	add.w	r8, r8, #4294967295
 800e084:	f104 0a1a 	add.w	sl, r4, #26
 800e088:	45c8      	cmp	r8, r9
 800e08a:	dc09      	bgt.n	800e0a0 <_printf_float+0x228>
 800e08c:	6823      	ldr	r3, [r4, #0]
 800e08e:	079b      	lsls	r3, r3, #30
 800e090:	f100 8107 	bmi.w	800e2a2 <_printf_float+0x42a>
 800e094:	68e0      	ldr	r0, [r4, #12]
 800e096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e098:	4298      	cmp	r0, r3
 800e09a:	bfb8      	it	lt
 800e09c:	4618      	movlt	r0, r3
 800e09e:	e739      	b.n	800df14 <_printf_float+0x9c>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	4652      	mov	r2, sl
 800e0a4:	4631      	mov	r1, r6
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	47b8      	blx	r7
 800e0aa:	3001      	adds	r0, #1
 800e0ac:	f43f af30 	beq.w	800df10 <_printf_float+0x98>
 800e0b0:	f109 0901 	add.w	r9, r9, #1
 800e0b4:	e7e8      	b.n	800e088 <_printf_float+0x210>
 800e0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	dc3b      	bgt.n	800e134 <_printf_float+0x2bc>
 800e0bc:	4a1c      	ldr	r2, [pc, #112]	@ (800e130 <_printf_float+0x2b8>)
 800e0be:	2301      	movs	r3, #1
 800e0c0:	4631      	mov	r1, r6
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	47b8      	blx	r7
 800e0c6:	3001      	adds	r0, #1
 800e0c8:	f43f af22 	beq.w	800df10 <_printf_float+0x98>
 800e0cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e0d0:	ea59 0303 	orrs.w	r3, r9, r3
 800e0d4:	d102      	bne.n	800e0dc <_printf_float+0x264>
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	07d9      	lsls	r1, r3, #31
 800e0da:	d5d7      	bpl.n	800e08c <_printf_float+0x214>
 800e0dc:	9b05      	ldr	r3, [sp, #20]
 800e0de:	465a      	mov	r2, fp
 800e0e0:	4631      	mov	r1, r6
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	47b8      	blx	r7
 800e0e6:	3001      	adds	r0, #1
 800e0e8:	f43f af12 	beq.w	800df10 <_printf_float+0x98>
 800e0ec:	f04f 0a00 	mov.w	sl, #0
 800e0f0:	f104 0b1a 	add.w	fp, r4, #26
 800e0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f6:	425b      	negs	r3, r3
 800e0f8:	4553      	cmp	r3, sl
 800e0fa:	dc01      	bgt.n	800e100 <_printf_float+0x288>
 800e0fc:	464b      	mov	r3, r9
 800e0fe:	e794      	b.n	800e02a <_printf_float+0x1b2>
 800e100:	2301      	movs	r3, #1
 800e102:	465a      	mov	r2, fp
 800e104:	4631      	mov	r1, r6
 800e106:	4628      	mov	r0, r5
 800e108:	47b8      	blx	r7
 800e10a:	3001      	adds	r0, #1
 800e10c:	f43f af00 	beq.w	800df10 <_printf_float+0x98>
 800e110:	f10a 0a01 	add.w	sl, sl, #1
 800e114:	e7ee      	b.n	800e0f4 <_printf_float+0x27c>
 800e116:	bf00      	nop
 800e118:	ffffffff 	.word	0xffffffff
 800e11c:	7fefffff 	.word	0x7fefffff
 800e120:	080122b8 	.word	0x080122b8
 800e124:	080122bc 	.word	0x080122bc
 800e128:	080122c0 	.word	0x080122c0
 800e12c:	080122c4 	.word	0x080122c4
 800e130:	080122c8 	.word	0x080122c8
 800e134:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e136:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e13a:	4553      	cmp	r3, sl
 800e13c:	bfa8      	it	ge
 800e13e:	4653      	movge	r3, sl
 800e140:	2b00      	cmp	r3, #0
 800e142:	4699      	mov	r9, r3
 800e144:	dc37      	bgt.n	800e1b6 <_printf_float+0x33e>
 800e146:	2300      	movs	r3, #0
 800e148:	9307      	str	r3, [sp, #28]
 800e14a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e14e:	f104 021a 	add.w	r2, r4, #26
 800e152:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e154:	9907      	ldr	r1, [sp, #28]
 800e156:	9306      	str	r3, [sp, #24]
 800e158:	eba3 0309 	sub.w	r3, r3, r9
 800e15c:	428b      	cmp	r3, r1
 800e15e:	dc31      	bgt.n	800e1c4 <_printf_float+0x34c>
 800e160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e162:	459a      	cmp	sl, r3
 800e164:	dc3b      	bgt.n	800e1de <_printf_float+0x366>
 800e166:	6823      	ldr	r3, [r4, #0]
 800e168:	07da      	lsls	r2, r3, #31
 800e16a:	d438      	bmi.n	800e1de <_printf_float+0x366>
 800e16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e16e:	ebaa 0903 	sub.w	r9, sl, r3
 800e172:	9b06      	ldr	r3, [sp, #24]
 800e174:	ebaa 0303 	sub.w	r3, sl, r3
 800e178:	4599      	cmp	r9, r3
 800e17a:	bfa8      	it	ge
 800e17c:	4699      	movge	r9, r3
 800e17e:	f1b9 0f00 	cmp.w	r9, #0
 800e182:	dc34      	bgt.n	800e1ee <_printf_float+0x376>
 800e184:	f04f 0800 	mov.w	r8, #0
 800e188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e18c:	f104 0b1a 	add.w	fp, r4, #26
 800e190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e192:	ebaa 0303 	sub.w	r3, sl, r3
 800e196:	eba3 0309 	sub.w	r3, r3, r9
 800e19a:	4543      	cmp	r3, r8
 800e19c:	f77f af76 	ble.w	800e08c <_printf_float+0x214>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	465a      	mov	r2, fp
 800e1a4:	4631      	mov	r1, r6
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	47b8      	blx	r7
 800e1aa:	3001      	adds	r0, #1
 800e1ac:	f43f aeb0 	beq.w	800df10 <_printf_float+0x98>
 800e1b0:	f108 0801 	add.w	r8, r8, #1
 800e1b4:	e7ec      	b.n	800e190 <_printf_float+0x318>
 800e1b6:	4642      	mov	r2, r8
 800e1b8:	4631      	mov	r1, r6
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	47b8      	blx	r7
 800e1be:	3001      	adds	r0, #1
 800e1c0:	d1c1      	bne.n	800e146 <_printf_float+0x2ce>
 800e1c2:	e6a5      	b.n	800df10 <_printf_float+0x98>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	4631      	mov	r1, r6
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	9206      	str	r2, [sp, #24]
 800e1cc:	47b8      	blx	r7
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	f43f ae9e 	beq.w	800df10 <_printf_float+0x98>
 800e1d4:	9b07      	ldr	r3, [sp, #28]
 800e1d6:	9a06      	ldr	r2, [sp, #24]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	9307      	str	r3, [sp, #28]
 800e1dc:	e7b9      	b.n	800e152 <_printf_float+0x2da>
 800e1de:	9b05      	ldr	r3, [sp, #20]
 800e1e0:	465a      	mov	r2, fp
 800e1e2:	4631      	mov	r1, r6
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	47b8      	blx	r7
 800e1e8:	3001      	adds	r0, #1
 800e1ea:	d1bf      	bne.n	800e16c <_printf_float+0x2f4>
 800e1ec:	e690      	b.n	800df10 <_printf_float+0x98>
 800e1ee:	9a06      	ldr	r2, [sp, #24]
 800e1f0:	464b      	mov	r3, r9
 800e1f2:	4442      	add	r2, r8
 800e1f4:	4631      	mov	r1, r6
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	47b8      	blx	r7
 800e1fa:	3001      	adds	r0, #1
 800e1fc:	d1c2      	bne.n	800e184 <_printf_float+0x30c>
 800e1fe:	e687      	b.n	800df10 <_printf_float+0x98>
 800e200:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e204:	f1b9 0f01 	cmp.w	r9, #1
 800e208:	dc01      	bgt.n	800e20e <_printf_float+0x396>
 800e20a:	07db      	lsls	r3, r3, #31
 800e20c:	d536      	bpl.n	800e27c <_printf_float+0x404>
 800e20e:	2301      	movs	r3, #1
 800e210:	4642      	mov	r2, r8
 800e212:	4631      	mov	r1, r6
 800e214:	4628      	mov	r0, r5
 800e216:	47b8      	blx	r7
 800e218:	3001      	adds	r0, #1
 800e21a:	f43f ae79 	beq.w	800df10 <_printf_float+0x98>
 800e21e:	9b05      	ldr	r3, [sp, #20]
 800e220:	465a      	mov	r2, fp
 800e222:	4631      	mov	r1, r6
 800e224:	4628      	mov	r0, r5
 800e226:	47b8      	blx	r7
 800e228:	3001      	adds	r0, #1
 800e22a:	f43f ae71 	beq.w	800df10 <_printf_float+0x98>
 800e22e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e232:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e23a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e23e:	d018      	beq.n	800e272 <_printf_float+0x3fa>
 800e240:	464b      	mov	r3, r9
 800e242:	f108 0201 	add.w	r2, r8, #1
 800e246:	4631      	mov	r1, r6
 800e248:	4628      	mov	r0, r5
 800e24a:	47b8      	blx	r7
 800e24c:	3001      	adds	r0, #1
 800e24e:	d10c      	bne.n	800e26a <_printf_float+0x3f2>
 800e250:	e65e      	b.n	800df10 <_printf_float+0x98>
 800e252:	2301      	movs	r3, #1
 800e254:	465a      	mov	r2, fp
 800e256:	4631      	mov	r1, r6
 800e258:	4628      	mov	r0, r5
 800e25a:	47b8      	blx	r7
 800e25c:	3001      	adds	r0, #1
 800e25e:	f43f ae57 	beq.w	800df10 <_printf_float+0x98>
 800e262:	f108 0801 	add.w	r8, r8, #1
 800e266:	45c8      	cmp	r8, r9
 800e268:	dbf3      	blt.n	800e252 <_printf_float+0x3da>
 800e26a:	4653      	mov	r3, sl
 800e26c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e270:	e6dc      	b.n	800e02c <_printf_float+0x1b4>
 800e272:	f04f 0800 	mov.w	r8, #0
 800e276:	f104 0b1a 	add.w	fp, r4, #26
 800e27a:	e7f4      	b.n	800e266 <_printf_float+0x3ee>
 800e27c:	2301      	movs	r3, #1
 800e27e:	4642      	mov	r2, r8
 800e280:	e7e1      	b.n	800e246 <_printf_float+0x3ce>
 800e282:	2301      	movs	r3, #1
 800e284:	464a      	mov	r2, r9
 800e286:	4631      	mov	r1, r6
 800e288:	4628      	mov	r0, r5
 800e28a:	47b8      	blx	r7
 800e28c:	3001      	adds	r0, #1
 800e28e:	f43f ae3f 	beq.w	800df10 <_printf_float+0x98>
 800e292:	f108 0801 	add.w	r8, r8, #1
 800e296:	68e3      	ldr	r3, [r4, #12]
 800e298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e29a:	1a5b      	subs	r3, r3, r1
 800e29c:	4543      	cmp	r3, r8
 800e29e:	dcf0      	bgt.n	800e282 <_printf_float+0x40a>
 800e2a0:	e6f8      	b.n	800e094 <_printf_float+0x21c>
 800e2a2:	f04f 0800 	mov.w	r8, #0
 800e2a6:	f104 0919 	add.w	r9, r4, #25
 800e2aa:	e7f4      	b.n	800e296 <_printf_float+0x41e>

0800e2ac <_printf_common>:
 800e2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2b0:	4616      	mov	r6, r2
 800e2b2:	4698      	mov	r8, r3
 800e2b4:	688a      	ldr	r2, [r1, #8]
 800e2b6:	690b      	ldr	r3, [r1, #16]
 800e2b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	bfb8      	it	lt
 800e2c0:	4613      	movlt	r3, r2
 800e2c2:	6033      	str	r3, [r6, #0]
 800e2c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2c8:	4607      	mov	r7, r0
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	b10a      	cbz	r2, 800e2d2 <_printf_common+0x26>
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	6033      	str	r3, [r6, #0]
 800e2d2:	6823      	ldr	r3, [r4, #0]
 800e2d4:	0699      	lsls	r1, r3, #26
 800e2d6:	bf42      	ittt	mi
 800e2d8:	6833      	ldrmi	r3, [r6, #0]
 800e2da:	3302      	addmi	r3, #2
 800e2dc:	6033      	strmi	r3, [r6, #0]
 800e2de:	6825      	ldr	r5, [r4, #0]
 800e2e0:	f015 0506 	ands.w	r5, r5, #6
 800e2e4:	d106      	bne.n	800e2f4 <_printf_common+0x48>
 800e2e6:	f104 0a19 	add.w	sl, r4, #25
 800e2ea:	68e3      	ldr	r3, [r4, #12]
 800e2ec:	6832      	ldr	r2, [r6, #0]
 800e2ee:	1a9b      	subs	r3, r3, r2
 800e2f0:	42ab      	cmp	r3, r5
 800e2f2:	dc26      	bgt.n	800e342 <_printf_common+0x96>
 800e2f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e2f8:	6822      	ldr	r2, [r4, #0]
 800e2fa:	3b00      	subs	r3, #0
 800e2fc:	bf18      	it	ne
 800e2fe:	2301      	movne	r3, #1
 800e300:	0692      	lsls	r2, r2, #26
 800e302:	d42b      	bmi.n	800e35c <_printf_common+0xb0>
 800e304:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e308:	4641      	mov	r1, r8
 800e30a:	4638      	mov	r0, r7
 800e30c:	47c8      	blx	r9
 800e30e:	3001      	adds	r0, #1
 800e310:	d01e      	beq.n	800e350 <_printf_common+0xa4>
 800e312:	6823      	ldr	r3, [r4, #0]
 800e314:	6922      	ldr	r2, [r4, #16]
 800e316:	f003 0306 	and.w	r3, r3, #6
 800e31a:	2b04      	cmp	r3, #4
 800e31c:	bf02      	ittt	eq
 800e31e:	68e5      	ldreq	r5, [r4, #12]
 800e320:	6833      	ldreq	r3, [r6, #0]
 800e322:	1aed      	subeq	r5, r5, r3
 800e324:	68a3      	ldr	r3, [r4, #8]
 800e326:	bf0c      	ite	eq
 800e328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e32c:	2500      	movne	r5, #0
 800e32e:	4293      	cmp	r3, r2
 800e330:	bfc4      	itt	gt
 800e332:	1a9b      	subgt	r3, r3, r2
 800e334:	18ed      	addgt	r5, r5, r3
 800e336:	2600      	movs	r6, #0
 800e338:	341a      	adds	r4, #26
 800e33a:	42b5      	cmp	r5, r6
 800e33c:	d11a      	bne.n	800e374 <_printf_common+0xc8>
 800e33e:	2000      	movs	r0, #0
 800e340:	e008      	b.n	800e354 <_printf_common+0xa8>
 800e342:	2301      	movs	r3, #1
 800e344:	4652      	mov	r2, sl
 800e346:	4641      	mov	r1, r8
 800e348:	4638      	mov	r0, r7
 800e34a:	47c8      	blx	r9
 800e34c:	3001      	adds	r0, #1
 800e34e:	d103      	bne.n	800e358 <_printf_common+0xac>
 800e350:	f04f 30ff 	mov.w	r0, #4294967295
 800e354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e358:	3501      	adds	r5, #1
 800e35a:	e7c6      	b.n	800e2ea <_printf_common+0x3e>
 800e35c:	18e1      	adds	r1, r4, r3
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	2030      	movs	r0, #48	@ 0x30
 800e362:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e366:	4422      	add	r2, r4
 800e368:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e36c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e370:	3302      	adds	r3, #2
 800e372:	e7c7      	b.n	800e304 <_printf_common+0x58>
 800e374:	2301      	movs	r3, #1
 800e376:	4622      	mov	r2, r4
 800e378:	4641      	mov	r1, r8
 800e37a:	4638      	mov	r0, r7
 800e37c:	47c8      	blx	r9
 800e37e:	3001      	adds	r0, #1
 800e380:	d0e6      	beq.n	800e350 <_printf_common+0xa4>
 800e382:	3601      	adds	r6, #1
 800e384:	e7d9      	b.n	800e33a <_printf_common+0x8e>
	...

0800e388 <_printf_i>:
 800e388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e38c:	7e0f      	ldrb	r7, [r1, #24]
 800e38e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e390:	2f78      	cmp	r7, #120	@ 0x78
 800e392:	4691      	mov	r9, r2
 800e394:	4680      	mov	r8, r0
 800e396:	460c      	mov	r4, r1
 800e398:	469a      	mov	sl, r3
 800e39a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e39e:	d807      	bhi.n	800e3b0 <_printf_i+0x28>
 800e3a0:	2f62      	cmp	r7, #98	@ 0x62
 800e3a2:	d80a      	bhi.n	800e3ba <_printf_i+0x32>
 800e3a4:	2f00      	cmp	r7, #0
 800e3a6:	f000 80d2 	beq.w	800e54e <_printf_i+0x1c6>
 800e3aa:	2f58      	cmp	r7, #88	@ 0x58
 800e3ac:	f000 80b9 	beq.w	800e522 <_printf_i+0x19a>
 800e3b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3b8:	e03a      	b.n	800e430 <_printf_i+0xa8>
 800e3ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3be:	2b15      	cmp	r3, #21
 800e3c0:	d8f6      	bhi.n	800e3b0 <_printf_i+0x28>
 800e3c2:	a101      	add	r1, pc, #4	@ (adr r1, 800e3c8 <_printf_i+0x40>)
 800e3c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3c8:	0800e421 	.word	0x0800e421
 800e3cc:	0800e435 	.word	0x0800e435
 800e3d0:	0800e3b1 	.word	0x0800e3b1
 800e3d4:	0800e3b1 	.word	0x0800e3b1
 800e3d8:	0800e3b1 	.word	0x0800e3b1
 800e3dc:	0800e3b1 	.word	0x0800e3b1
 800e3e0:	0800e435 	.word	0x0800e435
 800e3e4:	0800e3b1 	.word	0x0800e3b1
 800e3e8:	0800e3b1 	.word	0x0800e3b1
 800e3ec:	0800e3b1 	.word	0x0800e3b1
 800e3f0:	0800e3b1 	.word	0x0800e3b1
 800e3f4:	0800e535 	.word	0x0800e535
 800e3f8:	0800e45f 	.word	0x0800e45f
 800e3fc:	0800e4ef 	.word	0x0800e4ef
 800e400:	0800e3b1 	.word	0x0800e3b1
 800e404:	0800e3b1 	.word	0x0800e3b1
 800e408:	0800e557 	.word	0x0800e557
 800e40c:	0800e3b1 	.word	0x0800e3b1
 800e410:	0800e45f 	.word	0x0800e45f
 800e414:	0800e3b1 	.word	0x0800e3b1
 800e418:	0800e3b1 	.word	0x0800e3b1
 800e41c:	0800e4f7 	.word	0x0800e4f7
 800e420:	6833      	ldr	r3, [r6, #0]
 800e422:	1d1a      	adds	r2, r3, #4
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	6032      	str	r2, [r6, #0]
 800e428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e42c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e430:	2301      	movs	r3, #1
 800e432:	e09d      	b.n	800e570 <_printf_i+0x1e8>
 800e434:	6833      	ldr	r3, [r6, #0]
 800e436:	6820      	ldr	r0, [r4, #0]
 800e438:	1d19      	adds	r1, r3, #4
 800e43a:	6031      	str	r1, [r6, #0]
 800e43c:	0606      	lsls	r6, r0, #24
 800e43e:	d501      	bpl.n	800e444 <_printf_i+0xbc>
 800e440:	681d      	ldr	r5, [r3, #0]
 800e442:	e003      	b.n	800e44c <_printf_i+0xc4>
 800e444:	0645      	lsls	r5, r0, #25
 800e446:	d5fb      	bpl.n	800e440 <_printf_i+0xb8>
 800e448:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e44c:	2d00      	cmp	r5, #0
 800e44e:	da03      	bge.n	800e458 <_printf_i+0xd0>
 800e450:	232d      	movs	r3, #45	@ 0x2d
 800e452:	426d      	negs	r5, r5
 800e454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e458:	4859      	ldr	r0, [pc, #356]	@ (800e5c0 <_printf_i+0x238>)
 800e45a:	230a      	movs	r3, #10
 800e45c:	e011      	b.n	800e482 <_printf_i+0xfa>
 800e45e:	6821      	ldr	r1, [r4, #0]
 800e460:	6833      	ldr	r3, [r6, #0]
 800e462:	0608      	lsls	r0, r1, #24
 800e464:	f853 5b04 	ldr.w	r5, [r3], #4
 800e468:	d402      	bmi.n	800e470 <_printf_i+0xe8>
 800e46a:	0649      	lsls	r1, r1, #25
 800e46c:	bf48      	it	mi
 800e46e:	b2ad      	uxthmi	r5, r5
 800e470:	2f6f      	cmp	r7, #111	@ 0x6f
 800e472:	4853      	ldr	r0, [pc, #332]	@ (800e5c0 <_printf_i+0x238>)
 800e474:	6033      	str	r3, [r6, #0]
 800e476:	bf14      	ite	ne
 800e478:	230a      	movne	r3, #10
 800e47a:	2308      	moveq	r3, #8
 800e47c:	2100      	movs	r1, #0
 800e47e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e482:	6866      	ldr	r6, [r4, #4]
 800e484:	60a6      	str	r6, [r4, #8]
 800e486:	2e00      	cmp	r6, #0
 800e488:	bfa2      	ittt	ge
 800e48a:	6821      	ldrge	r1, [r4, #0]
 800e48c:	f021 0104 	bicge.w	r1, r1, #4
 800e490:	6021      	strge	r1, [r4, #0]
 800e492:	b90d      	cbnz	r5, 800e498 <_printf_i+0x110>
 800e494:	2e00      	cmp	r6, #0
 800e496:	d04b      	beq.n	800e530 <_printf_i+0x1a8>
 800e498:	4616      	mov	r6, r2
 800e49a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e49e:	fb03 5711 	mls	r7, r3, r1, r5
 800e4a2:	5dc7      	ldrb	r7, [r0, r7]
 800e4a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e4a8:	462f      	mov	r7, r5
 800e4aa:	42bb      	cmp	r3, r7
 800e4ac:	460d      	mov	r5, r1
 800e4ae:	d9f4      	bls.n	800e49a <_printf_i+0x112>
 800e4b0:	2b08      	cmp	r3, #8
 800e4b2:	d10b      	bne.n	800e4cc <_printf_i+0x144>
 800e4b4:	6823      	ldr	r3, [r4, #0]
 800e4b6:	07df      	lsls	r7, r3, #31
 800e4b8:	d508      	bpl.n	800e4cc <_printf_i+0x144>
 800e4ba:	6923      	ldr	r3, [r4, #16]
 800e4bc:	6861      	ldr	r1, [r4, #4]
 800e4be:	4299      	cmp	r1, r3
 800e4c0:	bfde      	ittt	le
 800e4c2:	2330      	movle	r3, #48	@ 0x30
 800e4c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4cc:	1b92      	subs	r2, r2, r6
 800e4ce:	6122      	str	r2, [r4, #16]
 800e4d0:	f8cd a000 	str.w	sl, [sp]
 800e4d4:	464b      	mov	r3, r9
 800e4d6:	aa03      	add	r2, sp, #12
 800e4d8:	4621      	mov	r1, r4
 800e4da:	4640      	mov	r0, r8
 800e4dc:	f7ff fee6 	bl	800e2ac <_printf_common>
 800e4e0:	3001      	adds	r0, #1
 800e4e2:	d14a      	bne.n	800e57a <_printf_i+0x1f2>
 800e4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e8:	b004      	add	sp, #16
 800e4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	f043 0320 	orr.w	r3, r3, #32
 800e4f4:	6023      	str	r3, [r4, #0]
 800e4f6:	4833      	ldr	r0, [pc, #204]	@ (800e5c4 <_printf_i+0x23c>)
 800e4f8:	2778      	movs	r7, #120	@ 0x78
 800e4fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e4fe:	6823      	ldr	r3, [r4, #0]
 800e500:	6831      	ldr	r1, [r6, #0]
 800e502:	061f      	lsls	r7, r3, #24
 800e504:	f851 5b04 	ldr.w	r5, [r1], #4
 800e508:	d402      	bmi.n	800e510 <_printf_i+0x188>
 800e50a:	065f      	lsls	r7, r3, #25
 800e50c:	bf48      	it	mi
 800e50e:	b2ad      	uxthmi	r5, r5
 800e510:	6031      	str	r1, [r6, #0]
 800e512:	07d9      	lsls	r1, r3, #31
 800e514:	bf44      	itt	mi
 800e516:	f043 0320 	orrmi.w	r3, r3, #32
 800e51a:	6023      	strmi	r3, [r4, #0]
 800e51c:	b11d      	cbz	r5, 800e526 <_printf_i+0x19e>
 800e51e:	2310      	movs	r3, #16
 800e520:	e7ac      	b.n	800e47c <_printf_i+0xf4>
 800e522:	4827      	ldr	r0, [pc, #156]	@ (800e5c0 <_printf_i+0x238>)
 800e524:	e7e9      	b.n	800e4fa <_printf_i+0x172>
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	f023 0320 	bic.w	r3, r3, #32
 800e52c:	6023      	str	r3, [r4, #0]
 800e52e:	e7f6      	b.n	800e51e <_printf_i+0x196>
 800e530:	4616      	mov	r6, r2
 800e532:	e7bd      	b.n	800e4b0 <_printf_i+0x128>
 800e534:	6833      	ldr	r3, [r6, #0]
 800e536:	6825      	ldr	r5, [r4, #0]
 800e538:	6961      	ldr	r1, [r4, #20]
 800e53a:	1d18      	adds	r0, r3, #4
 800e53c:	6030      	str	r0, [r6, #0]
 800e53e:	062e      	lsls	r6, r5, #24
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	d501      	bpl.n	800e548 <_printf_i+0x1c0>
 800e544:	6019      	str	r1, [r3, #0]
 800e546:	e002      	b.n	800e54e <_printf_i+0x1c6>
 800e548:	0668      	lsls	r0, r5, #25
 800e54a:	d5fb      	bpl.n	800e544 <_printf_i+0x1bc>
 800e54c:	8019      	strh	r1, [r3, #0]
 800e54e:	2300      	movs	r3, #0
 800e550:	6123      	str	r3, [r4, #16]
 800e552:	4616      	mov	r6, r2
 800e554:	e7bc      	b.n	800e4d0 <_printf_i+0x148>
 800e556:	6833      	ldr	r3, [r6, #0]
 800e558:	1d1a      	adds	r2, r3, #4
 800e55a:	6032      	str	r2, [r6, #0]
 800e55c:	681e      	ldr	r6, [r3, #0]
 800e55e:	6862      	ldr	r2, [r4, #4]
 800e560:	2100      	movs	r1, #0
 800e562:	4630      	mov	r0, r6
 800e564:	f7f1 fed4 	bl	8000310 <memchr>
 800e568:	b108      	cbz	r0, 800e56e <_printf_i+0x1e6>
 800e56a:	1b80      	subs	r0, r0, r6
 800e56c:	6060      	str	r0, [r4, #4]
 800e56e:	6863      	ldr	r3, [r4, #4]
 800e570:	6123      	str	r3, [r4, #16]
 800e572:	2300      	movs	r3, #0
 800e574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e578:	e7aa      	b.n	800e4d0 <_printf_i+0x148>
 800e57a:	6923      	ldr	r3, [r4, #16]
 800e57c:	4632      	mov	r2, r6
 800e57e:	4649      	mov	r1, r9
 800e580:	4640      	mov	r0, r8
 800e582:	47d0      	blx	sl
 800e584:	3001      	adds	r0, #1
 800e586:	d0ad      	beq.n	800e4e4 <_printf_i+0x15c>
 800e588:	6823      	ldr	r3, [r4, #0]
 800e58a:	079b      	lsls	r3, r3, #30
 800e58c:	d413      	bmi.n	800e5b6 <_printf_i+0x22e>
 800e58e:	68e0      	ldr	r0, [r4, #12]
 800e590:	9b03      	ldr	r3, [sp, #12]
 800e592:	4298      	cmp	r0, r3
 800e594:	bfb8      	it	lt
 800e596:	4618      	movlt	r0, r3
 800e598:	e7a6      	b.n	800e4e8 <_printf_i+0x160>
 800e59a:	2301      	movs	r3, #1
 800e59c:	4632      	mov	r2, r6
 800e59e:	4649      	mov	r1, r9
 800e5a0:	4640      	mov	r0, r8
 800e5a2:	47d0      	blx	sl
 800e5a4:	3001      	adds	r0, #1
 800e5a6:	d09d      	beq.n	800e4e4 <_printf_i+0x15c>
 800e5a8:	3501      	adds	r5, #1
 800e5aa:	68e3      	ldr	r3, [r4, #12]
 800e5ac:	9903      	ldr	r1, [sp, #12]
 800e5ae:	1a5b      	subs	r3, r3, r1
 800e5b0:	42ab      	cmp	r3, r5
 800e5b2:	dcf2      	bgt.n	800e59a <_printf_i+0x212>
 800e5b4:	e7eb      	b.n	800e58e <_printf_i+0x206>
 800e5b6:	2500      	movs	r5, #0
 800e5b8:	f104 0619 	add.w	r6, r4, #25
 800e5bc:	e7f5      	b.n	800e5aa <_printf_i+0x222>
 800e5be:	bf00      	nop
 800e5c0:	080122ca 	.word	0x080122ca
 800e5c4:	080122db 	.word	0x080122db

0800e5c8 <_scanf_float>:
 800e5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5cc:	b087      	sub	sp, #28
 800e5ce:	4617      	mov	r7, r2
 800e5d0:	9303      	str	r3, [sp, #12]
 800e5d2:	688b      	ldr	r3, [r1, #8]
 800e5d4:	1e5a      	subs	r2, r3, #1
 800e5d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e5da:	bf81      	itttt	hi
 800e5dc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e5e0:	eb03 0b05 	addhi.w	fp, r3, r5
 800e5e4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e5e8:	608b      	strhi	r3, [r1, #8]
 800e5ea:	680b      	ldr	r3, [r1, #0]
 800e5ec:	460a      	mov	r2, r1
 800e5ee:	f04f 0500 	mov.w	r5, #0
 800e5f2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e5f6:	f842 3b1c 	str.w	r3, [r2], #28
 800e5fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e5fe:	4680      	mov	r8, r0
 800e600:	460c      	mov	r4, r1
 800e602:	bf98      	it	ls
 800e604:	f04f 0b00 	movls.w	fp, #0
 800e608:	9201      	str	r2, [sp, #4]
 800e60a:	4616      	mov	r6, r2
 800e60c:	46aa      	mov	sl, r5
 800e60e:	46a9      	mov	r9, r5
 800e610:	9502      	str	r5, [sp, #8]
 800e612:	68a2      	ldr	r2, [r4, #8]
 800e614:	b152      	cbz	r2, 800e62c <_scanf_float+0x64>
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	2b4e      	cmp	r3, #78	@ 0x4e
 800e61c:	d864      	bhi.n	800e6e8 <_scanf_float+0x120>
 800e61e:	2b40      	cmp	r3, #64	@ 0x40
 800e620:	d83c      	bhi.n	800e69c <_scanf_float+0xd4>
 800e622:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e626:	b2c8      	uxtb	r0, r1
 800e628:	280e      	cmp	r0, #14
 800e62a:	d93a      	bls.n	800e6a2 <_scanf_float+0xda>
 800e62c:	f1b9 0f00 	cmp.w	r9, #0
 800e630:	d003      	beq.n	800e63a <_scanf_float+0x72>
 800e632:	6823      	ldr	r3, [r4, #0]
 800e634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e638:	6023      	str	r3, [r4, #0]
 800e63a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e63e:	f1ba 0f01 	cmp.w	sl, #1
 800e642:	f200 8117 	bhi.w	800e874 <_scanf_float+0x2ac>
 800e646:	9b01      	ldr	r3, [sp, #4]
 800e648:	429e      	cmp	r6, r3
 800e64a:	f200 8108 	bhi.w	800e85e <_scanf_float+0x296>
 800e64e:	2001      	movs	r0, #1
 800e650:	b007      	add	sp, #28
 800e652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e656:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e65a:	2a0d      	cmp	r2, #13
 800e65c:	d8e6      	bhi.n	800e62c <_scanf_float+0x64>
 800e65e:	a101      	add	r1, pc, #4	@ (adr r1, 800e664 <_scanf_float+0x9c>)
 800e660:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e664:	0800e7ab 	.word	0x0800e7ab
 800e668:	0800e62d 	.word	0x0800e62d
 800e66c:	0800e62d 	.word	0x0800e62d
 800e670:	0800e62d 	.word	0x0800e62d
 800e674:	0800e80b 	.word	0x0800e80b
 800e678:	0800e7e3 	.word	0x0800e7e3
 800e67c:	0800e62d 	.word	0x0800e62d
 800e680:	0800e62d 	.word	0x0800e62d
 800e684:	0800e7b9 	.word	0x0800e7b9
 800e688:	0800e62d 	.word	0x0800e62d
 800e68c:	0800e62d 	.word	0x0800e62d
 800e690:	0800e62d 	.word	0x0800e62d
 800e694:	0800e62d 	.word	0x0800e62d
 800e698:	0800e771 	.word	0x0800e771
 800e69c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e6a0:	e7db      	b.n	800e65a <_scanf_float+0x92>
 800e6a2:	290e      	cmp	r1, #14
 800e6a4:	d8c2      	bhi.n	800e62c <_scanf_float+0x64>
 800e6a6:	a001      	add	r0, pc, #4	@ (adr r0, 800e6ac <_scanf_float+0xe4>)
 800e6a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e6ac:	0800e761 	.word	0x0800e761
 800e6b0:	0800e62d 	.word	0x0800e62d
 800e6b4:	0800e761 	.word	0x0800e761
 800e6b8:	0800e7f7 	.word	0x0800e7f7
 800e6bc:	0800e62d 	.word	0x0800e62d
 800e6c0:	0800e709 	.word	0x0800e709
 800e6c4:	0800e747 	.word	0x0800e747
 800e6c8:	0800e747 	.word	0x0800e747
 800e6cc:	0800e747 	.word	0x0800e747
 800e6d0:	0800e747 	.word	0x0800e747
 800e6d4:	0800e747 	.word	0x0800e747
 800e6d8:	0800e747 	.word	0x0800e747
 800e6dc:	0800e747 	.word	0x0800e747
 800e6e0:	0800e747 	.word	0x0800e747
 800e6e4:	0800e747 	.word	0x0800e747
 800e6e8:	2b6e      	cmp	r3, #110	@ 0x6e
 800e6ea:	d809      	bhi.n	800e700 <_scanf_float+0x138>
 800e6ec:	2b60      	cmp	r3, #96	@ 0x60
 800e6ee:	d8b2      	bhi.n	800e656 <_scanf_float+0x8e>
 800e6f0:	2b54      	cmp	r3, #84	@ 0x54
 800e6f2:	d07b      	beq.n	800e7ec <_scanf_float+0x224>
 800e6f4:	2b59      	cmp	r3, #89	@ 0x59
 800e6f6:	d199      	bne.n	800e62c <_scanf_float+0x64>
 800e6f8:	2d07      	cmp	r5, #7
 800e6fa:	d197      	bne.n	800e62c <_scanf_float+0x64>
 800e6fc:	2508      	movs	r5, #8
 800e6fe:	e02c      	b.n	800e75a <_scanf_float+0x192>
 800e700:	2b74      	cmp	r3, #116	@ 0x74
 800e702:	d073      	beq.n	800e7ec <_scanf_float+0x224>
 800e704:	2b79      	cmp	r3, #121	@ 0x79
 800e706:	e7f6      	b.n	800e6f6 <_scanf_float+0x12e>
 800e708:	6821      	ldr	r1, [r4, #0]
 800e70a:	05c8      	lsls	r0, r1, #23
 800e70c:	d51b      	bpl.n	800e746 <_scanf_float+0x17e>
 800e70e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e712:	6021      	str	r1, [r4, #0]
 800e714:	f109 0901 	add.w	r9, r9, #1
 800e718:	f1bb 0f00 	cmp.w	fp, #0
 800e71c:	d003      	beq.n	800e726 <_scanf_float+0x15e>
 800e71e:	3201      	adds	r2, #1
 800e720:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e724:	60a2      	str	r2, [r4, #8]
 800e726:	68a3      	ldr	r3, [r4, #8]
 800e728:	3b01      	subs	r3, #1
 800e72a:	60a3      	str	r3, [r4, #8]
 800e72c:	6923      	ldr	r3, [r4, #16]
 800e72e:	3301      	adds	r3, #1
 800e730:	6123      	str	r3, [r4, #16]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	3b01      	subs	r3, #1
 800e736:	2b00      	cmp	r3, #0
 800e738:	607b      	str	r3, [r7, #4]
 800e73a:	f340 8087 	ble.w	800e84c <_scanf_float+0x284>
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	3301      	adds	r3, #1
 800e742:	603b      	str	r3, [r7, #0]
 800e744:	e765      	b.n	800e612 <_scanf_float+0x4a>
 800e746:	eb1a 0105 	adds.w	r1, sl, r5
 800e74a:	f47f af6f 	bne.w	800e62c <_scanf_float+0x64>
 800e74e:	6822      	ldr	r2, [r4, #0]
 800e750:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e754:	6022      	str	r2, [r4, #0]
 800e756:	460d      	mov	r5, r1
 800e758:	468a      	mov	sl, r1
 800e75a:	f806 3b01 	strb.w	r3, [r6], #1
 800e75e:	e7e2      	b.n	800e726 <_scanf_float+0x15e>
 800e760:	6822      	ldr	r2, [r4, #0]
 800e762:	0610      	lsls	r0, r2, #24
 800e764:	f57f af62 	bpl.w	800e62c <_scanf_float+0x64>
 800e768:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e76c:	6022      	str	r2, [r4, #0]
 800e76e:	e7f4      	b.n	800e75a <_scanf_float+0x192>
 800e770:	f1ba 0f00 	cmp.w	sl, #0
 800e774:	d10e      	bne.n	800e794 <_scanf_float+0x1cc>
 800e776:	f1b9 0f00 	cmp.w	r9, #0
 800e77a:	d10e      	bne.n	800e79a <_scanf_float+0x1d2>
 800e77c:	6822      	ldr	r2, [r4, #0]
 800e77e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e782:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e786:	d108      	bne.n	800e79a <_scanf_float+0x1d2>
 800e788:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e78c:	6022      	str	r2, [r4, #0]
 800e78e:	f04f 0a01 	mov.w	sl, #1
 800e792:	e7e2      	b.n	800e75a <_scanf_float+0x192>
 800e794:	f1ba 0f02 	cmp.w	sl, #2
 800e798:	d055      	beq.n	800e846 <_scanf_float+0x27e>
 800e79a:	2d01      	cmp	r5, #1
 800e79c:	d002      	beq.n	800e7a4 <_scanf_float+0x1dc>
 800e79e:	2d04      	cmp	r5, #4
 800e7a0:	f47f af44 	bne.w	800e62c <_scanf_float+0x64>
 800e7a4:	3501      	adds	r5, #1
 800e7a6:	b2ed      	uxtb	r5, r5
 800e7a8:	e7d7      	b.n	800e75a <_scanf_float+0x192>
 800e7aa:	f1ba 0f01 	cmp.w	sl, #1
 800e7ae:	f47f af3d 	bne.w	800e62c <_scanf_float+0x64>
 800e7b2:	f04f 0a02 	mov.w	sl, #2
 800e7b6:	e7d0      	b.n	800e75a <_scanf_float+0x192>
 800e7b8:	b97d      	cbnz	r5, 800e7da <_scanf_float+0x212>
 800e7ba:	f1b9 0f00 	cmp.w	r9, #0
 800e7be:	f47f af38 	bne.w	800e632 <_scanf_float+0x6a>
 800e7c2:	6822      	ldr	r2, [r4, #0]
 800e7c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e7c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e7cc:	f040 8101 	bne.w	800e9d2 <_scanf_float+0x40a>
 800e7d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e7d4:	6022      	str	r2, [r4, #0]
 800e7d6:	2501      	movs	r5, #1
 800e7d8:	e7bf      	b.n	800e75a <_scanf_float+0x192>
 800e7da:	2d03      	cmp	r5, #3
 800e7dc:	d0e2      	beq.n	800e7a4 <_scanf_float+0x1dc>
 800e7de:	2d05      	cmp	r5, #5
 800e7e0:	e7de      	b.n	800e7a0 <_scanf_float+0x1d8>
 800e7e2:	2d02      	cmp	r5, #2
 800e7e4:	f47f af22 	bne.w	800e62c <_scanf_float+0x64>
 800e7e8:	2503      	movs	r5, #3
 800e7ea:	e7b6      	b.n	800e75a <_scanf_float+0x192>
 800e7ec:	2d06      	cmp	r5, #6
 800e7ee:	f47f af1d 	bne.w	800e62c <_scanf_float+0x64>
 800e7f2:	2507      	movs	r5, #7
 800e7f4:	e7b1      	b.n	800e75a <_scanf_float+0x192>
 800e7f6:	6822      	ldr	r2, [r4, #0]
 800e7f8:	0591      	lsls	r1, r2, #22
 800e7fa:	f57f af17 	bpl.w	800e62c <_scanf_float+0x64>
 800e7fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e802:	6022      	str	r2, [r4, #0]
 800e804:	f8cd 9008 	str.w	r9, [sp, #8]
 800e808:	e7a7      	b.n	800e75a <_scanf_float+0x192>
 800e80a:	6822      	ldr	r2, [r4, #0]
 800e80c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e810:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e814:	d006      	beq.n	800e824 <_scanf_float+0x25c>
 800e816:	0550      	lsls	r0, r2, #21
 800e818:	f57f af08 	bpl.w	800e62c <_scanf_float+0x64>
 800e81c:	f1b9 0f00 	cmp.w	r9, #0
 800e820:	f000 80d7 	beq.w	800e9d2 <_scanf_float+0x40a>
 800e824:	0591      	lsls	r1, r2, #22
 800e826:	bf58      	it	pl
 800e828:	9902      	ldrpl	r1, [sp, #8]
 800e82a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e82e:	bf58      	it	pl
 800e830:	eba9 0101 	subpl.w	r1, r9, r1
 800e834:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e838:	bf58      	it	pl
 800e83a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e83e:	6022      	str	r2, [r4, #0]
 800e840:	f04f 0900 	mov.w	r9, #0
 800e844:	e789      	b.n	800e75a <_scanf_float+0x192>
 800e846:	f04f 0a03 	mov.w	sl, #3
 800e84a:	e786      	b.n	800e75a <_scanf_float+0x192>
 800e84c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e850:	4639      	mov	r1, r7
 800e852:	4640      	mov	r0, r8
 800e854:	4798      	blx	r3
 800e856:	2800      	cmp	r0, #0
 800e858:	f43f aedb 	beq.w	800e612 <_scanf_float+0x4a>
 800e85c:	e6e6      	b.n	800e62c <_scanf_float+0x64>
 800e85e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e866:	463a      	mov	r2, r7
 800e868:	4640      	mov	r0, r8
 800e86a:	4798      	blx	r3
 800e86c:	6923      	ldr	r3, [r4, #16]
 800e86e:	3b01      	subs	r3, #1
 800e870:	6123      	str	r3, [r4, #16]
 800e872:	e6e8      	b.n	800e646 <_scanf_float+0x7e>
 800e874:	1e6b      	subs	r3, r5, #1
 800e876:	2b06      	cmp	r3, #6
 800e878:	d824      	bhi.n	800e8c4 <_scanf_float+0x2fc>
 800e87a:	2d02      	cmp	r5, #2
 800e87c:	d836      	bhi.n	800e8ec <_scanf_float+0x324>
 800e87e:	9b01      	ldr	r3, [sp, #4]
 800e880:	429e      	cmp	r6, r3
 800e882:	f67f aee4 	bls.w	800e64e <_scanf_float+0x86>
 800e886:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e88a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e88e:	463a      	mov	r2, r7
 800e890:	4640      	mov	r0, r8
 800e892:	4798      	blx	r3
 800e894:	6923      	ldr	r3, [r4, #16]
 800e896:	3b01      	subs	r3, #1
 800e898:	6123      	str	r3, [r4, #16]
 800e89a:	e7f0      	b.n	800e87e <_scanf_float+0x2b6>
 800e89c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e8a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e8a4:	463a      	mov	r2, r7
 800e8a6:	4640      	mov	r0, r8
 800e8a8:	4798      	blx	r3
 800e8aa:	6923      	ldr	r3, [r4, #16]
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	6123      	str	r3, [r4, #16]
 800e8b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8b4:	fa5f fa8a 	uxtb.w	sl, sl
 800e8b8:	f1ba 0f02 	cmp.w	sl, #2
 800e8bc:	d1ee      	bne.n	800e89c <_scanf_float+0x2d4>
 800e8be:	3d03      	subs	r5, #3
 800e8c0:	b2ed      	uxtb	r5, r5
 800e8c2:	1b76      	subs	r6, r6, r5
 800e8c4:	6823      	ldr	r3, [r4, #0]
 800e8c6:	05da      	lsls	r2, r3, #23
 800e8c8:	d530      	bpl.n	800e92c <_scanf_float+0x364>
 800e8ca:	055b      	lsls	r3, r3, #21
 800e8cc:	d511      	bpl.n	800e8f2 <_scanf_float+0x32a>
 800e8ce:	9b01      	ldr	r3, [sp, #4]
 800e8d0:	429e      	cmp	r6, r3
 800e8d2:	f67f aebc 	bls.w	800e64e <_scanf_float+0x86>
 800e8d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e8da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e8de:	463a      	mov	r2, r7
 800e8e0:	4640      	mov	r0, r8
 800e8e2:	4798      	blx	r3
 800e8e4:	6923      	ldr	r3, [r4, #16]
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	6123      	str	r3, [r4, #16]
 800e8ea:	e7f0      	b.n	800e8ce <_scanf_float+0x306>
 800e8ec:	46aa      	mov	sl, r5
 800e8ee:	46b3      	mov	fp, r6
 800e8f0:	e7de      	b.n	800e8b0 <_scanf_float+0x2e8>
 800e8f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e8f6:	6923      	ldr	r3, [r4, #16]
 800e8f8:	2965      	cmp	r1, #101	@ 0x65
 800e8fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800e902:	6123      	str	r3, [r4, #16]
 800e904:	d00c      	beq.n	800e920 <_scanf_float+0x358>
 800e906:	2945      	cmp	r1, #69	@ 0x45
 800e908:	d00a      	beq.n	800e920 <_scanf_float+0x358>
 800e90a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e90e:	463a      	mov	r2, r7
 800e910:	4640      	mov	r0, r8
 800e912:	4798      	blx	r3
 800e914:	6923      	ldr	r3, [r4, #16]
 800e916:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e91a:	3b01      	subs	r3, #1
 800e91c:	1eb5      	subs	r5, r6, #2
 800e91e:	6123      	str	r3, [r4, #16]
 800e920:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e924:	463a      	mov	r2, r7
 800e926:	4640      	mov	r0, r8
 800e928:	4798      	blx	r3
 800e92a:	462e      	mov	r6, r5
 800e92c:	6822      	ldr	r2, [r4, #0]
 800e92e:	f012 0210 	ands.w	r2, r2, #16
 800e932:	d001      	beq.n	800e938 <_scanf_float+0x370>
 800e934:	2000      	movs	r0, #0
 800e936:	e68b      	b.n	800e650 <_scanf_float+0x88>
 800e938:	7032      	strb	r2, [r6, #0]
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e944:	d11a      	bne.n	800e97c <_scanf_float+0x3b4>
 800e946:	9b02      	ldr	r3, [sp, #8]
 800e948:	454b      	cmp	r3, r9
 800e94a:	eba3 0209 	sub.w	r2, r3, r9
 800e94e:	d121      	bne.n	800e994 <_scanf_float+0x3cc>
 800e950:	9901      	ldr	r1, [sp, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	4640      	mov	r0, r8
 800e956:	f002 fb2d 	bl	8010fb4 <_strtod_r>
 800e95a:	9b03      	ldr	r3, [sp, #12]
 800e95c:	6821      	ldr	r1, [r4, #0]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f011 0f02 	tst.w	r1, #2
 800e964:	f103 0204 	add.w	r2, r3, #4
 800e968:	d01f      	beq.n	800e9aa <_scanf_float+0x3e2>
 800e96a:	9903      	ldr	r1, [sp, #12]
 800e96c:	600a      	str	r2, [r1, #0]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	ed83 0b00 	vstr	d0, [r3]
 800e974:	68e3      	ldr	r3, [r4, #12]
 800e976:	3301      	adds	r3, #1
 800e978:	60e3      	str	r3, [r4, #12]
 800e97a:	e7db      	b.n	800e934 <_scanf_float+0x36c>
 800e97c:	9b04      	ldr	r3, [sp, #16]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d0e6      	beq.n	800e950 <_scanf_float+0x388>
 800e982:	9905      	ldr	r1, [sp, #20]
 800e984:	230a      	movs	r3, #10
 800e986:	3101      	adds	r1, #1
 800e988:	4640      	mov	r0, r8
 800e98a:	f002 fb93 	bl	80110b4 <_strtol_r>
 800e98e:	9b04      	ldr	r3, [sp, #16]
 800e990:	9e05      	ldr	r6, [sp, #20]
 800e992:	1ac2      	subs	r2, r0, r3
 800e994:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e998:	429e      	cmp	r6, r3
 800e99a:	bf28      	it	cs
 800e99c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e9a0:	490d      	ldr	r1, [pc, #52]	@ (800e9d8 <_scanf_float+0x410>)
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f000 f8de 	bl	800eb64 <siprintf>
 800e9a8:	e7d2      	b.n	800e950 <_scanf_float+0x388>
 800e9aa:	f011 0f04 	tst.w	r1, #4
 800e9ae:	9903      	ldr	r1, [sp, #12]
 800e9b0:	600a      	str	r2, [r1, #0]
 800e9b2:	d1dc      	bne.n	800e96e <_scanf_float+0x3a6>
 800e9b4:	eeb4 0b40 	vcmp.f64	d0, d0
 800e9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9bc:	681d      	ldr	r5, [r3, #0]
 800e9be:	d705      	bvc.n	800e9cc <_scanf_float+0x404>
 800e9c0:	4806      	ldr	r0, [pc, #24]	@ (800e9dc <_scanf_float+0x414>)
 800e9c2:	f000 f9b3 	bl	800ed2c <nanf>
 800e9c6:	ed85 0a00 	vstr	s0, [r5]
 800e9ca:	e7d3      	b.n	800e974 <_scanf_float+0x3ac>
 800e9cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e9d0:	e7f9      	b.n	800e9c6 <_scanf_float+0x3fe>
 800e9d2:	f04f 0900 	mov.w	r9, #0
 800e9d6:	e630      	b.n	800e63a <_scanf_float+0x72>
 800e9d8:	080122ec 	.word	0x080122ec
 800e9dc:	08012685 	.word	0x08012685

0800e9e0 <std>:
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	b510      	push	{r4, lr}
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	e9c0 3300 	strd	r3, r3, [r0]
 800e9ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9ee:	6083      	str	r3, [r0, #8]
 800e9f0:	8181      	strh	r1, [r0, #12]
 800e9f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e9f4:	81c2      	strh	r2, [r0, #14]
 800e9f6:	6183      	str	r3, [r0, #24]
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	2208      	movs	r2, #8
 800e9fc:	305c      	adds	r0, #92	@ 0x5c
 800e9fe:	f000 f914 	bl	800ec2a <memset>
 800ea02:	4b0d      	ldr	r3, [pc, #52]	@ (800ea38 <std+0x58>)
 800ea04:	6263      	str	r3, [r4, #36]	@ 0x24
 800ea06:	4b0d      	ldr	r3, [pc, #52]	@ (800ea3c <std+0x5c>)
 800ea08:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ea0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea40 <std+0x60>)
 800ea0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ea44 <std+0x64>)
 800ea10:	6323      	str	r3, [r4, #48]	@ 0x30
 800ea12:	4b0d      	ldr	r3, [pc, #52]	@ (800ea48 <std+0x68>)
 800ea14:	6224      	str	r4, [r4, #32]
 800ea16:	429c      	cmp	r4, r3
 800ea18:	d006      	beq.n	800ea28 <std+0x48>
 800ea1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ea1e:	4294      	cmp	r4, r2
 800ea20:	d002      	beq.n	800ea28 <std+0x48>
 800ea22:	33d0      	adds	r3, #208	@ 0xd0
 800ea24:	429c      	cmp	r4, r3
 800ea26:	d105      	bne.n	800ea34 <std+0x54>
 800ea28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ea2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea30:	f000 b978 	b.w	800ed24 <__retarget_lock_init_recursive>
 800ea34:	bd10      	pop	{r4, pc}
 800ea36:	bf00      	nop
 800ea38:	0800eba5 	.word	0x0800eba5
 800ea3c:	0800ebc7 	.word	0x0800ebc7
 800ea40:	0800ebff 	.word	0x0800ebff
 800ea44:	0800ec23 	.word	0x0800ec23
 800ea48:	24000bc0 	.word	0x24000bc0

0800ea4c <stdio_exit_handler>:
 800ea4c:	4a02      	ldr	r2, [pc, #8]	@ (800ea58 <stdio_exit_handler+0xc>)
 800ea4e:	4903      	ldr	r1, [pc, #12]	@ (800ea5c <stdio_exit_handler+0x10>)
 800ea50:	4803      	ldr	r0, [pc, #12]	@ (800ea60 <stdio_exit_handler+0x14>)
 800ea52:	f000 b869 	b.w	800eb28 <_fwalk_sglue>
 800ea56:	bf00      	nop
 800ea58:	24000010 	.word	0x24000010
 800ea5c:	08011471 	.word	0x08011471
 800ea60:	24000020 	.word	0x24000020

0800ea64 <cleanup_stdio>:
 800ea64:	6841      	ldr	r1, [r0, #4]
 800ea66:	4b0c      	ldr	r3, [pc, #48]	@ (800ea98 <cleanup_stdio+0x34>)
 800ea68:	4299      	cmp	r1, r3
 800ea6a:	b510      	push	{r4, lr}
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	d001      	beq.n	800ea74 <cleanup_stdio+0x10>
 800ea70:	f002 fcfe 	bl	8011470 <_fflush_r>
 800ea74:	68a1      	ldr	r1, [r4, #8]
 800ea76:	4b09      	ldr	r3, [pc, #36]	@ (800ea9c <cleanup_stdio+0x38>)
 800ea78:	4299      	cmp	r1, r3
 800ea7a:	d002      	beq.n	800ea82 <cleanup_stdio+0x1e>
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	f002 fcf7 	bl	8011470 <_fflush_r>
 800ea82:	68e1      	ldr	r1, [r4, #12]
 800ea84:	4b06      	ldr	r3, [pc, #24]	@ (800eaa0 <cleanup_stdio+0x3c>)
 800ea86:	4299      	cmp	r1, r3
 800ea88:	d004      	beq.n	800ea94 <cleanup_stdio+0x30>
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea90:	f002 bcee 	b.w	8011470 <_fflush_r>
 800ea94:	bd10      	pop	{r4, pc}
 800ea96:	bf00      	nop
 800ea98:	24000bc0 	.word	0x24000bc0
 800ea9c:	24000c28 	.word	0x24000c28
 800eaa0:	24000c90 	.word	0x24000c90

0800eaa4 <global_stdio_init.part.0>:
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	4b0b      	ldr	r3, [pc, #44]	@ (800ead4 <global_stdio_init.part.0+0x30>)
 800eaa8:	4c0b      	ldr	r4, [pc, #44]	@ (800ead8 <global_stdio_init.part.0+0x34>)
 800eaaa:	4a0c      	ldr	r2, [pc, #48]	@ (800eadc <global_stdio_init.part.0+0x38>)
 800eaac:	601a      	str	r2, [r3, #0]
 800eaae:	4620      	mov	r0, r4
 800eab0:	2200      	movs	r2, #0
 800eab2:	2104      	movs	r1, #4
 800eab4:	f7ff ff94 	bl	800e9e0 <std>
 800eab8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eabc:	2201      	movs	r2, #1
 800eabe:	2109      	movs	r1, #9
 800eac0:	f7ff ff8e 	bl	800e9e0 <std>
 800eac4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eac8:	2202      	movs	r2, #2
 800eaca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eace:	2112      	movs	r1, #18
 800ead0:	f7ff bf86 	b.w	800e9e0 <std>
 800ead4:	24000cf8 	.word	0x24000cf8
 800ead8:	24000bc0 	.word	0x24000bc0
 800eadc:	0800ea4d 	.word	0x0800ea4d

0800eae0 <__sfp_lock_acquire>:
 800eae0:	4801      	ldr	r0, [pc, #4]	@ (800eae8 <__sfp_lock_acquire+0x8>)
 800eae2:	f000 b920 	b.w	800ed26 <__retarget_lock_acquire_recursive>
 800eae6:	bf00      	nop
 800eae8:	24000d01 	.word	0x24000d01

0800eaec <__sfp_lock_release>:
 800eaec:	4801      	ldr	r0, [pc, #4]	@ (800eaf4 <__sfp_lock_release+0x8>)
 800eaee:	f000 b91b 	b.w	800ed28 <__retarget_lock_release_recursive>
 800eaf2:	bf00      	nop
 800eaf4:	24000d01 	.word	0x24000d01

0800eaf8 <__sinit>:
 800eaf8:	b510      	push	{r4, lr}
 800eafa:	4604      	mov	r4, r0
 800eafc:	f7ff fff0 	bl	800eae0 <__sfp_lock_acquire>
 800eb00:	6a23      	ldr	r3, [r4, #32]
 800eb02:	b11b      	cbz	r3, 800eb0c <__sinit+0x14>
 800eb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb08:	f7ff bff0 	b.w	800eaec <__sfp_lock_release>
 800eb0c:	4b04      	ldr	r3, [pc, #16]	@ (800eb20 <__sinit+0x28>)
 800eb0e:	6223      	str	r3, [r4, #32]
 800eb10:	4b04      	ldr	r3, [pc, #16]	@ (800eb24 <__sinit+0x2c>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1f5      	bne.n	800eb04 <__sinit+0xc>
 800eb18:	f7ff ffc4 	bl	800eaa4 <global_stdio_init.part.0>
 800eb1c:	e7f2      	b.n	800eb04 <__sinit+0xc>
 800eb1e:	bf00      	nop
 800eb20:	0800ea65 	.word	0x0800ea65
 800eb24:	24000cf8 	.word	0x24000cf8

0800eb28 <_fwalk_sglue>:
 800eb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb2c:	4607      	mov	r7, r0
 800eb2e:	4688      	mov	r8, r1
 800eb30:	4614      	mov	r4, r2
 800eb32:	2600      	movs	r6, #0
 800eb34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb38:	f1b9 0901 	subs.w	r9, r9, #1
 800eb3c:	d505      	bpl.n	800eb4a <_fwalk_sglue+0x22>
 800eb3e:	6824      	ldr	r4, [r4, #0]
 800eb40:	2c00      	cmp	r4, #0
 800eb42:	d1f7      	bne.n	800eb34 <_fwalk_sglue+0xc>
 800eb44:	4630      	mov	r0, r6
 800eb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb4a:	89ab      	ldrh	r3, [r5, #12]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d907      	bls.n	800eb60 <_fwalk_sglue+0x38>
 800eb50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb54:	3301      	adds	r3, #1
 800eb56:	d003      	beq.n	800eb60 <_fwalk_sglue+0x38>
 800eb58:	4629      	mov	r1, r5
 800eb5a:	4638      	mov	r0, r7
 800eb5c:	47c0      	blx	r8
 800eb5e:	4306      	orrs	r6, r0
 800eb60:	3568      	adds	r5, #104	@ 0x68
 800eb62:	e7e9      	b.n	800eb38 <_fwalk_sglue+0x10>

0800eb64 <siprintf>:
 800eb64:	b40e      	push	{r1, r2, r3}
 800eb66:	b500      	push	{lr}
 800eb68:	b09c      	sub	sp, #112	@ 0x70
 800eb6a:	ab1d      	add	r3, sp, #116	@ 0x74
 800eb6c:	9002      	str	r0, [sp, #8]
 800eb6e:	9006      	str	r0, [sp, #24]
 800eb70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb74:	4809      	ldr	r0, [pc, #36]	@ (800eb9c <siprintf+0x38>)
 800eb76:	9107      	str	r1, [sp, #28]
 800eb78:	9104      	str	r1, [sp, #16]
 800eb7a:	4909      	ldr	r1, [pc, #36]	@ (800eba0 <siprintf+0x3c>)
 800eb7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb80:	9105      	str	r1, [sp, #20]
 800eb82:	6800      	ldr	r0, [r0, #0]
 800eb84:	9301      	str	r3, [sp, #4]
 800eb86:	a902      	add	r1, sp, #8
 800eb88:	f002 faf2 	bl	8011170 <_svfiprintf_r>
 800eb8c:	9b02      	ldr	r3, [sp, #8]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	701a      	strb	r2, [r3, #0]
 800eb92:	b01c      	add	sp, #112	@ 0x70
 800eb94:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb98:	b003      	add	sp, #12
 800eb9a:	4770      	bx	lr
 800eb9c:	2400001c 	.word	0x2400001c
 800eba0:	ffff0208 	.word	0xffff0208

0800eba4 <__sread>:
 800eba4:	b510      	push	{r4, lr}
 800eba6:	460c      	mov	r4, r1
 800eba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebac:	f000 f86c 	bl	800ec88 <_read_r>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	bfab      	itete	ge
 800ebb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ebb6:	89a3      	ldrhlt	r3, [r4, #12]
 800ebb8:	181b      	addge	r3, r3, r0
 800ebba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ebbe:	bfac      	ite	ge
 800ebc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ebc2:	81a3      	strhlt	r3, [r4, #12]
 800ebc4:	bd10      	pop	{r4, pc}

0800ebc6 <__swrite>:
 800ebc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebca:	461f      	mov	r7, r3
 800ebcc:	898b      	ldrh	r3, [r1, #12]
 800ebce:	05db      	lsls	r3, r3, #23
 800ebd0:	4605      	mov	r5, r0
 800ebd2:	460c      	mov	r4, r1
 800ebd4:	4616      	mov	r6, r2
 800ebd6:	d505      	bpl.n	800ebe4 <__swrite+0x1e>
 800ebd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebdc:	2302      	movs	r3, #2
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f000 f840 	bl	800ec64 <_lseek_r>
 800ebe4:	89a3      	ldrh	r3, [r4, #12]
 800ebe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ebee:	81a3      	strh	r3, [r4, #12]
 800ebf0:	4632      	mov	r2, r6
 800ebf2:	463b      	mov	r3, r7
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebfa:	f000 b857 	b.w	800ecac <_write_r>

0800ebfe <__sseek>:
 800ebfe:	b510      	push	{r4, lr}
 800ec00:	460c      	mov	r4, r1
 800ec02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec06:	f000 f82d 	bl	800ec64 <_lseek_r>
 800ec0a:	1c43      	adds	r3, r0, #1
 800ec0c:	89a3      	ldrh	r3, [r4, #12]
 800ec0e:	bf15      	itete	ne
 800ec10:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ec12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ec16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ec1a:	81a3      	strheq	r3, [r4, #12]
 800ec1c:	bf18      	it	ne
 800ec1e:	81a3      	strhne	r3, [r4, #12]
 800ec20:	bd10      	pop	{r4, pc}

0800ec22 <__sclose>:
 800ec22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec26:	f000 b80d 	b.w	800ec44 <_close_r>

0800ec2a <memset>:
 800ec2a:	4402      	add	r2, r0
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d100      	bne.n	800ec34 <memset+0xa>
 800ec32:	4770      	bx	lr
 800ec34:	f803 1b01 	strb.w	r1, [r3], #1
 800ec38:	e7f9      	b.n	800ec2e <memset+0x4>
	...

0800ec3c <_localeconv_r>:
 800ec3c:	4800      	ldr	r0, [pc, #0]	@ (800ec40 <_localeconv_r+0x4>)
 800ec3e:	4770      	bx	lr
 800ec40:	2400015c 	.word	0x2400015c

0800ec44 <_close_r>:
 800ec44:	b538      	push	{r3, r4, r5, lr}
 800ec46:	4d06      	ldr	r5, [pc, #24]	@ (800ec60 <_close_r+0x1c>)
 800ec48:	2300      	movs	r3, #0
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	4608      	mov	r0, r1
 800ec4e:	602b      	str	r3, [r5, #0]
 800ec50:	f7f4 fafb 	bl	800324a <_close>
 800ec54:	1c43      	adds	r3, r0, #1
 800ec56:	d102      	bne.n	800ec5e <_close_r+0x1a>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	b103      	cbz	r3, 800ec5e <_close_r+0x1a>
 800ec5c:	6023      	str	r3, [r4, #0]
 800ec5e:	bd38      	pop	{r3, r4, r5, pc}
 800ec60:	24000cfc 	.word	0x24000cfc

0800ec64 <_lseek_r>:
 800ec64:	b538      	push	{r3, r4, r5, lr}
 800ec66:	4d07      	ldr	r5, [pc, #28]	@ (800ec84 <_lseek_r+0x20>)
 800ec68:	4604      	mov	r4, r0
 800ec6a:	4608      	mov	r0, r1
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	2200      	movs	r2, #0
 800ec70:	602a      	str	r2, [r5, #0]
 800ec72:	461a      	mov	r2, r3
 800ec74:	f7f4 fb10 	bl	8003298 <_lseek>
 800ec78:	1c43      	adds	r3, r0, #1
 800ec7a:	d102      	bne.n	800ec82 <_lseek_r+0x1e>
 800ec7c:	682b      	ldr	r3, [r5, #0]
 800ec7e:	b103      	cbz	r3, 800ec82 <_lseek_r+0x1e>
 800ec80:	6023      	str	r3, [r4, #0]
 800ec82:	bd38      	pop	{r3, r4, r5, pc}
 800ec84:	24000cfc 	.word	0x24000cfc

0800ec88 <_read_r>:
 800ec88:	b538      	push	{r3, r4, r5, lr}
 800ec8a:	4d07      	ldr	r5, [pc, #28]	@ (800eca8 <_read_r+0x20>)
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	4608      	mov	r0, r1
 800ec90:	4611      	mov	r1, r2
 800ec92:	2200      	movs	r2, #0
 800ec94:	602a      	str	r2, [r5, #0]
 800ec96:	461a      	mov	r2, r3
 800ec98:	f7f4 fa9e 	bl	80031d8 <_read>
 800ec9c:	1c43      	adds	r3, r0, #1
 800ec9e:	d102      	bne.n	800eca6 <_read_r+0x1e>
 800eca0:	682b      	ldr	r3, [r5, #0]
 800eca2:	b103      	cbz	r3, 800eca6 <_read_r+0x1e>
 800eca4:	6023      	str	r3, [r4, #0]
 800eca6:	bd38      	pop	{r3, r4, r5, pc}
 800eca8:	24000cfc 	.word	0x24000cfc

0800ecac <_write_r>:
 800ecac:	b538      	push	{r3, r4, r5, lr}
 800ecae:	4d07      	ldr	r5, [pc, #28]	@ (800eccc <_write_r+0x20>)
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	4608      	mov	r0, r1
 800ecb4:	4611      	mov	r1, r2
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	602a      	str	r2, [r5, #0]
 800ecba:	461a      	mov	r2, r3
 800ecbc:	f7f4 faa9 	bl	8003212 <_write>
 800ecc0:	1c43      	adds	r3, r0, #1
 800ecc2:	d102      	bne.n	800ecca <_write_r+0x1e>
 800ecc4:	682b      	ldr	r3, [r5, #0]
 800ecc6:	b103      	cbz	r3, 800ecca <_write_r+0x1e>
 800ecc8:	6023      	str	r3, [r4, #0]
 800ecca:	bd38      	pop	{r3, r4, r5, pc}
 800eccc:	24000cfc 	.word	0x24000cfc

0800ecd0 <__errno>:
 800ecd0:	4b01      	ldr	r3, [pc, #4]	@ (800ecd8 <__errno+0x8>)
 800ecd2:	6818      	ldr	r0, [r3, #0]
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	2400001c 	.word	0x2400001c

0800ecdc <__libc_init_array>:
 800ecdc:	b570      	push	{r4, r5, r6, lr}
 800ecde:	4d0d      	ldr	r5, [pc, #52]	@ (800ed14 <__libc_init_array+0x38>)
 800ece0:	4c0d      	ldr	r4, [pc, #52]	@ (800ed18 <__libc_init_array+0x3c>)
 800ece2:	1b64      	subs	r4, r4, r5
 800ece4:	10a4      	asrs	r4, r4, #2
 800ece6:	2600      	movs	r6, #0
 800ece8:	42a6      	cmp	r6, r4
 800ecea:	d109      	bne.n	800ed00 <__libc_init_array+0x24>
 800ecec:	4d0b      	ldr	r5, [pc, #44]	@ (800ed1c <__libc_init_array+0x40>)
 800ecee:	4c0c      	ldr	r4, [pc, #48]	@ (800ed20 <__libc_init_array+0x44>)
 800ecf0:	f003 fab0 	bl	8012254 <_init>
 800ecf4:	1b64      	subs	r4, r4, r5
 800ecf6:	10a4      	asrs	r4, r4, #2
 800ecf8:	2600      	movs	r6, #0
 800ecfa:	42a6      	cmp	r6, r4
 800ecfc:	d105      	bne.n	800ed0a <__libc_init_array+0x2e>
 800ecfe:	bd70      	pop	{r4, r5, r6, pc}
 800ed00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed04:	4798      	blx	r3
 800ed06:	3601      	adds	r6, #1
 800ed08:	e7ee      	b.n	800ece8 <__libc_init_array+0xc>
 800ed0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed0e:	4798      	blx	r3
 800ed10:	3601      	adds	r6, #1
 800ed12:	e7f2      	b.n	800ecfa <__libc_init_array+0x1e>
 800ed14:	080126f0 	.word	0x080126f0
 800ed18:	080126f0 	.word	0x080126f0
 800ed1c:	080126f0 	.word	0x080126f0
 800ed20:	080126f4 	.word	0x080126f4

0800ed24 <__retarget_lock_init_recursive>:
 800ed24:	4770      	bx	lr

0800ed26 <__retarget_lock_acquire_recursive>:
 800ed26:	4770      	bx	lr

0800ed28 <__retarget_lock_release_recursive>:
 800ed28:	4770      	bx	lr
	...

0800ed2c <nanf>:
 800ed2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ed34 <nanf+0x8>
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop
 800ed34:	7fc00000 	.word	0x7fc00000

0800ed38 <quorem>:
 800ed38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed3c:	6903      	ldr	r3, [r0, #16]
 800ed3e:	690c      	ldr	r4, [r1, #16]
 800ed40:	42a3      	cmp	r3, r4
 800ed42:	4607      	mov	r7, r0
 800ed44:	db7e      	blt.n	800ee44 <quorem+0x10c>
 800ed46:	3c01      	subs	r4, #1
 800ed48:	f101 0814 	add.w	r8, r1, #20
 800ed4c:	00a3      	lsls	r3, r4, #2
 800ed4e:	f100 0514 	add.w	r5, r0, #20
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed58:	9301      	str	r3, [sp, #4]
 800ed5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed62:	3301      	adds	r3, #1
 800ed64:	429a      	cmp	r2, r3
 800ed66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed6a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed6e:	d32e      	bcc.n	800edce <quorem+0x96>
 800ed70:	f04f 0a00 	mov.w	sl, #0
 800ed74:	46c4      	mov	ip, r8
 800ed76:	46ae      	mov	lr, r5
 800ed78:	46d3      	mov	fp, sl
 800ed7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed7e:	b298      	uxth	r0, r3
 800ed80:	fb06 a000 	mla	r0, r6, r0, sl
 800ed84:	0c02      	lsrs	r2, r0, #16
 800ed86:	0c1b      	lsrs	r3, r3, #16
 800ed88:	fb06 2303 	mla	r3, r6, r3, r2
 800ed8c:	f8de 2000 	ldr.w	r2, [lr]
 800ed90:	b280      	uxth	r0, r0
 800ed92:	b292      	uxth	r2, r2
 800ed94:	1a12      	subs	r2, r2, r0
 800ed96:	445a      	add	r2, fp
 800ed98:	f8de 0000 	ldr.w	r0, [lr]
 800ed9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eda6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800edaa:	b292      	uxth	r2, r2
 800edac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800edb0:	45e1      	cmp	r9, ip
 800edb2:	f84e 2b04 	str.w	r2, [lr], #4
 800edb6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800edba:	d2de      	bcs.n	800ed7a <quorem+0x42>
 800edbc:	9b00      	ldr	r3, [sp, #0]
 800edbe:	58eb      	ldr	r3, [r5, r3]
 800edc0:	b92b      	cbnz	r3, 800edce <quorem+0x96>
 800edc2:	9b01      	ldr	r3, [sp, #4]
 800edc4:	3b04      	subs	r3, #4
 800edc6:	429d      	cmp	r5, r3
 800edc8:	461a      	mov	r2, r3
 800edca:	d32f      	bcc.n	800ee2c <quorem+0xf4>
 800edcc:	613c      	str	r4, [r7, #16]
 800edce:	4638      	mov	r0, r7
 800edd0:	f001 f954 	bl	801007c <__mcmp>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	db25      	blt.n	800ee24 <quorem+0xec>
 800edd8:	4629      	mov	r1, r5
 800edda:	2000      	movs	r0, #0
 800eddc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ede0:	f8d1 c000 	ldr.w	ip, [r1]
 800ede4:	fa1f fe82 	uxth.w	lr, r2
 800ede8:	fa1f f38c 	uxth.w	r3, ip
 800edec:	eba3 030e 	sub.w	r3, r3, lr
 800edf0:	4403      	add	r3, r0
 800edf2:	0c12      	lsrs	r2, r2, #16
 800edf4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800edf8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee02:	45c1      	cmp	r9, r8
 800ee04:	f841 3b04 	str.w	r3, [r1], #4
 800ee08:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ee0c:	d2e6      	bcs.n	800eddc <quorem+0xa4>
 800ee0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee16:	b922      	cbnz	r2, 800ee22 <quorem+0xea>
 800ee18:	3b04      	subs	r3, #4
 800ee1a:	429d      	cmp	r5, r3
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	d30b      	bcc.n	800ee38 <quorem+0x100>
 800ee20:	613c      	str	r4, [r7, #16]
 800ee22:	3601      	adds	r6, #1
 800ee24:	4630      	mov	r0, r6
 800ee26:	b003      	add	sp, #12
 800ee28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee2c:	6812      	ldr	r2, [r2, #0]
 800ee2e:	3b04      	subs	r3, #4
 800ee30:	2a00      	cmp	r2, #0
 800ee32:	d1cb      	bne.n	800edcc <quorem+0x94>
 800ee34:	3c01      	subs	r4, #1
 800ee36:	e7c6      	b.n	800edc6 <quorem+0x8e>
 800ee38:	6812      	ldr	r2, [r2, #0]
 800ee3a:	3b04      	subs	r3, #4
 800ee3c:	2a00      	cmp	r2, #0
 800ee3e:	d1ef      	bne.n	800ee20 <quorem+0xe8>
 800ee40:	3c01      	subs	r4, #1
 800ee42:	e7ea      	b.n	800ee1a <quorem+0xe2>
 800ee44:	2000      	movs	r0, #0
 800ee46:	e7ee      	b.n	800ee26 <quorem+0xee>

0800ee48 <_dtoa_r>:
 800ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee4c:	ed2d 8b02 	vpush	{d8}
 800ee50:	69c7      	ldr	r7, [r0, #28]
 800ee52:	b091      	sub	sp, #68	@ 0x44
 800ee54:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ee58:	ec55 4b10 	vmov	r4, r5, d0
 800ee5c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ee5e:	9107      	str	r1, [sp, #28]
 800ee60:	4681      	mov	r9, r0
 800ee62:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee64:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee66:	b97f      	cbnz	r7, 800ee88 <_dtoa_r+0x40>
 800ee68:	2010      	movs	r0, #16
 800ee6a:	f000 fd8d 	bl	800f988 <malloc>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	f8c9 001c 	str.w	r0, [r9, #28]
 800ee74:	b920      	cbnz	r0, 800ee80 <_dtoa_r+0x38>
 800ee76:	4ba0      	ldr	r3, [pc, #640]	@ (800f0f8 <_dtoa_r+0x2b0>)
 800ee78:	21ef      	movs	r1, #239	@ 0xef
 800ee7a:	48a0      	ldr	r0, [pc, #640]	@ (800f0fc <_dtoa_r+0x2b4>)
 800ee7c:	f002 fb74 	bl	8011568 <__assert_func>
 800ee80:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ee84:	6007      	str	r7, [r0, #0]
 800ee86:	60c7      	str	r7, [r0, #12]
 800ee88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ee8c:	6819      	ldr	r1, [r3, #0]
 800ee8e:	b159      	cbz	r1, 800eea8 <_dtoa_r+0x60>
 800ee90:	685a      	ldr	r2, [r3, #4]
 800ee92:	604a      	str	r2, [r1, #4]
 800ee94:	2301      	movs	r3, #1
 800ee96:	4093      	lsls	r3, r2
 800ee98:	608b      	str	r3, [r1, #8]
 800ee9a:	4648      	mov	r0, r9
 800ee9c:	f000 fe6a 	bl	800fb74 <_Bfree>
 800eea0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eea4:	2200      	movs	r2, #0
 800eea6:	601a      	str	r2, [r3, #0]
 800eea8:	1e2b      	subs	r3, r5, #0
 800eeaa:	bfbb      	ittet	lt
 800eeac:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800eeb0:	9303      	strlt	r3, [sp, #12]
 800eeb2:	2300      	movge	r3, #0
 800eeb4:	2201      	movlt	r2, #1
 800eeb6:	bfac      	ite	ge
 800eeb8:	6033      	strge	r3, [r6, #0]
 800eeba:	6032      	strlt	r2, [r6, #0]
 800eebc:	4b90      	ldr	r3, [pc, #576]	@ (800f100 <_dtoa_r+0x2b8>)
 800eebe:	9e03      	ldr	r6, [sp, #12]
 800eec0:	43b3      	bics	r3, r6
 800eec2:	d110      	bne.n	800eee6 <_dtoa_r+0x9e>
 800eec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eec6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eeca:	6013      	str	r3, [r2, #0]
 800eecc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800eed0:	4323      	orrs	r3, r4
 800eed2:	f000 84de 	beq.w	800f892 <_dtoa_r+0xa4a>
 800eed6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eed8:	4f8a      	ldr	r7, [pc, #552]	@ (800f104 <_dtoa_r+0x2bc>)
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f000 84e0 	beq.w	800f8a0 <_dtoa_r+0xa58>
 800eee0:	1cfb      	adds	r3, r7, #3
 800eee2:	f000 bcdb 	b.w	800f89c <_dtoa_r+0xa54>
 800eee6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800eeea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eeee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef2:	d10a      	bne.n	800ef0a <_dtoa_r+0xc2>
 800eef4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eef6:	2301      	movs	r3, #1
 800eef8:	6013      	str	r3, [r2, #0]
 800eefa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eefc:	b113      	cbz	r3, 800ef04 <_dtoa_r+0xbc>
 800eefe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ef00:	4b81      	ldr	r3, [pc, #516]	@ (800f108 <_dtoa_r+0x2c0>)
 800ef02:	6013      	str	r3, [r2, #0]
 800ef04:	4f81      	ldr	r7, [pc, #516]	@ (800f10c <_dtoa_r+0x2c4>)
 800ef06:	f000 bccb 	b.w	800f8a0 <_dtoa_r+0xa58>
 800ef0a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef0c:	a90f      	add	r1, sp, #60	@ 0x3c
 800ef0e:	4648      	mov	r0, r9
 800ef10:	eeb0 0b48 	vmov.f64	d0, d8
 800ef14:	f001 f9d2 	bl	80102bc <__d2b>
 800ef18:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ef1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef1e:	9001      	str	r0, [sp, #4]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d045      	beq.n	800efb0 <_dtoa_r+0x168>
 800ef24:	eeb0 7b48 	vmov.f64	d7, d8
 800ef28:	ee18 1a90 	vmov	r1, s17
 800ef2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ef30:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ef34:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ef38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ef3c:	2500      	movs	r5, #0
 800ef3e:	ee07 1a90 	vmov	s15, r1
 800ef42:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ef46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f0e0 <_dtoa_r+0x298>
 800ef4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef4e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f0e8 <_dtoa_r+0x2a0>
 800ef52:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ef56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f0f0 <_dtoa_r+0x2a8>
 800ef5a:	ee07 3a90 	vmov	s15, r3
 800ef5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ef62:	eeb0 7b46 	vmov.f64	d7, d6
 800ef66:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ef6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ef6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ef72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef76:	ee16 8a90 	vmov	r8, s13
 800ef7a:	d508      	bpl.n	800ef8e <_dtoa_r+0x146>
 800ef7c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ef80:	eeb4 6b47 	vcmp.f64	d6, d7
 800ef84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef88:	bf18      	it	ne
 800ef8a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ef8e:	f1b8 0f16 	cmp.w	r8, #22
 800ef92:	d82b      	bhi.n	800efec <_dtoa_r+0x1a4>
 800ef94:	495e      	ldr	r1, [pc, #376]	@ (800f110 <_dtoa_r+0x2c8>)
 800ef96:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ef9a:	ed91 7b00 	vldr	d7, [r1]
 800ef9e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800efa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa6:	d501      	bpl.n	800efac <_dtoa_r+0x164>
 800efa8:	f108 38ff 	add.w	r8, r8, #4294967295
 800efac:	2100      	movs	r1, #0
 800efae:	e01e      	b.n	800efee <_dtoa_r+0x1a6>
 800efb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efb2:	4413      	add	r3, r2
 800efb4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800efb8:	2920      	cmp	r1, #32
 800efba:	bfc1      	itttt	gt
 800efbc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800efc0:	408e      	lslgt	r6, r1
 800efc2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800efc6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800efca:	bfd6      	itet	le
 800efcc:	f1c1 0120 	rsble	r1, r1, #32
 800efd0:	4331      	orrgt	r1, r6
 800efd2:	fa04 f101 	lslle.w	r1, r4, r1
 800efd6:	ee07 1a90 	vmov	s15, r1
 800efda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800efde:	3b01      	subs	r3, #1
 800efe0:	ee17 1a90 	vmov	r1, s15
 800efe4:	2501      	movs	r5, #1
 800efe6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800efea:	e7a8      	b.n	800ef3e <_dtoa_r+0xf6>
 800efec:	2101      	movs	r1, #1
 800efee:	1ad2      	subs	r2, r2, r3
 800eff0:	1e53      	subs	r3, r2, #1
 800eff2:	9306      	str	r3, [sp, #24]
 800eff4:	bf45      	ittet	mi
 800eff6:	f1c2 0301 	rsbmi	r3, r2, #1
 800effa:	9305      	strmi	r3, [sp, #20]
 800effc:	2300      	movpl	r3, #0
 800effe:	2300      	movmi	r3, #0
 800f000:	bf4c      	ite	mi
 800f002:	9306      	strmi	r3, [sp, #24]
 800f004:	9305      	strpl	r3, [sp, #20]
 800f006:	f1b8 0f00 	cmp.w	r8, #0
 800f00a:	910c      	str	r1, [sp, #48]	@ 0x30
 800f00c:	db18      	blt.n	800f040 <_dtoa_r+0x1f8>
 800f00e:	9b06      	ldr	r3, [sp, #24]
 800f010:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f014:	4443      	add	r3, r8
 800f016:	9306      	str	r3, [sp, #24]
 800f018:	2300      	movs	r3, #0
 800f01a:	9a07      	ldr	r2, [sp, #28]
 800f01c:	2a09      	cmp	r2, #9
 800f01e:	d849      	bhi.n	800f0b4 <_dtoa_r+0x26c>
 800f020:	2a05      	cmp	r2, #5
 800f022:	bfc4      	itt	gt
 800f024:	3a04      	subgt	r2, #4
 800f026:	9207      	strgt	r2, [sp, #28]
 800f028:	9a07      	ldr	r2, [sp, #28]
 800f02a:	f1a2 0202 	sub.w	r2, r2, #2
 800f02e:	bfcc      	ite	gt
 800f030:	2400      	movgt	r4, #0
 800f032:	2401      	movle	r4, #1
 800f034:	2a03      	cmp	r2, #3
 800f036:	d848      	bhi.n	800f0ca <_dtoa_r+0x282>
 800f038:	e8df f002 	tbb	[pc, r2]
 800f03c:	3a2c2e0b 	.word	0x3a2c2e0b
 800f040:	9b05      	ldr	r3, [sp, #20]
 800f042:	2200      	movs	r2, #0
 800f044:	eba3 0308 	sub.w	r3, r3, r8
 800f048:	9305      	str	r3, [sp, #20]
 800f04a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f04c:	f1c8 0300 	rsb	r3, r8, #0
 800f050:	e7e3      	b.n	800f01a <_dtoa_r+0x1d2>
 800f052:	2200      	movs	r2, #0
 800f054:	9208      	str	r2, [sp, #32]
 800f056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f058:	2a00      	cmp	r2, #0
 800f05a:	dc39      	bgt.n	800f0d0 <_dtoa_r+0x288>
 800f05c:	f04f 0b01 	mov.w	fp, #1
 800f060:	46da      	mov	sl, fp
 800f062:	465a      	mov	r2, fp
 800f064:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f068:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f06c:	2100      	movs	r1, #0
 800f06e:	2004      	movs	r0, #4
 800f070:	f100 0614 	add.w	r6, r0, #20
 800f074:	4296      	cmp	r6, r2
 800f076:	d930      	bls.n	800f0da <_dtoa_r+0x292>
 800f078:	6079      	str	r1, [r7, #4]
 800f07a:	4648      	mov	r0, r9
 800f07c:	9304      	str	r3, [sp, #16]
 800f07e:	f000 fd39 	bl	800faf4 <_Balloc>
 800f082:	9b04      	ldr	r3, [sp, #16]
 800f084:	4607      	mov	r7, r0
 800f086:	2800      	cmp	r0, #0
 800f088:	d146      	bne.n	800f118 <_dtoa_r+0x2d0>
 800f08a:	4b22      	ldr	r3, [pc, #136]	@ (800f114 <_dtoa_r+0x2cc>)
 800f08c:	4602      	mov	r2, r0
 800f08e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f092:	e6f2      	b.n	800ee7a <_dtoa_r+0x32>
 800f094:	2201      	movs	r2, #1
 800f096:	e7dd      	b.n	800f054 <_dtoa_r+0x20c>
 800f098:	2200      	movs	r2, #0
 800f09a:	9208      	str	r2, [sp, #32]
 800f09c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f09e:	eb08 0b02 	add.w	fp, r8, r2
 800f0a2:	f10b 0a01 	add.w	sl, fp, #1
 800f0a6:	4652      	mov	r2, sl
 800f0a8:	2a01      	cmp	r2, #1
 800f0aa:	bfb8      	it	lt
 800f0ac:	2201      	movlt	r2, #1
 800f0ae:	e7db      	b.n	800f068 <_dtoa_r+0x220>
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	e7f2      	b.n	800f09a <_dtoa_r+0x252>
 800f0b4:	2401      	movs	r4, #1
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f0bc:	f04f 3bff 	mov.w	fp, #4294967295
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	46da      	mov	sl, fp
 800f0c4:	2212      	movs	r2, #18
 800f0c6:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0c8:	e7ce      	b.n	800f068 <_dtoa_r+0x220>
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	9208      	str	r2, [sp, #32]
 800f0ce:	e7f5      	b.n	800f0bc <_dtoa_r+0x274>
 800f0d0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f0d4:	46da      	mov	sl, fp
 800f0d6:	465a      	mov	r2, fp
 800f0d8:	e7c6      	b.n	800f068 <_dtoa_r+0x220>
 800f0da:	3101      	adds	r1, #1
 800f0dc:	0040      	lsls	r0, r0, #1
 800f0de:	e7c7      	b.n	800f070 <_dtoa_r+0x228>
 800f0e0:	636f4361 	.word	0x636f4361
 800f0e4:	3fd287a7 	.word	0x3fd287a7
 800f0e8:	8b60c8b3 	.word	0x8b60c8b3
 800f0ec:	3fc68a28 	.word	0x3fc68a28
 800f0f0:	509f79fb 	.word	0x509f79fb
 800f0f4:	3fd34413 	.word	0x3fd34413
 800f0f8:	080122fe 	.word	0x080122fe
 800f0fc:	08012315 	.word	0x08012315
 800f100:	7ff00000 	.word	0x7ff00000
 800f104:	080122fa 	.word	0x080122fa
 800f108:	080122c9 	.word	0x080122c9
 800f10c:	080122c8 	.word	0x080122c8
 800f110:	08012410 	.word	0x08012410
 800f114:	0801236d 	.word	0x0801236d
 800f118:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f11c:	f1ba 0f0e 	cmp.w	sl, #14
 800f120:	6010      	str	r0, [r2, #0]
 800f122:	d86f      	bhi.n	800f204 <_dtoa_r+0x3bc>
 800f124:	2c00      	cmp	r4, #0
 800f126:	d06d      	beq.n	800f204 <_dtoa_r+0x3bc>
 800f128:	f1b8 0f00 	cmp.w	r8, #0
 800f12c:	f340 80c2 	ble.w	800f2b4 <_dtoa_r+0x46c>
 800f130:	4aca      	ldr	r2, [pc, #808]	@ (800f45c <_dtoa_r+0x614>)
 800f132:	f008 010f 	and.w	r1, r8, #15
 800f136:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f13a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f13e:	ed92 7b00 	vldr	d7, [r2]
 800f142:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f146:	f000 80a9 	beq.w	800f29c <_dtoa_r+0x454>
 800f14a:	4ac5      	ldr	r2, [pc, #788]	@ (800f460 <_dtoa_r+0x618>)
 800f14c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f150:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f154:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f158:	f001 010f 	and.w	r1, r1, #15
 800f15c:	2203      	movs	r2, #3
 800f15e:	48c0      	ldr	r0, [pc, #768]	@ (800f460 <_dtoa_r+0x618>)
 800f160:	2900      	cmp	r1, #0
 800f162:	f040 809d 	bne.w	800f2a0 <_dtoa_r+0x458>
 800f166:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f16a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f16e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f172:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f174:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f178:	2900      	cmp	r1, #0
 800f17a:	f000 80c1 	beq.w	800f300 <_dtoa_r+0x4b8>
 800f17e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f182:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f18a:	f140 80b9 	bpl.w	800f300 <_dtoa_r+0x4b8>
 800f18e:	f1ba 0f00 	cmp.w	sl, #0
 800f192:	f000 80b5 	beq.w	800f300 <_dtoa_r+0x4b8>
 800f196:	f1bb 0f00 	cmp.w	fp, #0
 800f19a:	dd31      	ble.n	800f200 <_dtoa_r+0x3b8>
 800f19c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f1a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f1a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f1a8:	f108 31ff 	add.w	r1, r8, #4294967295
 800f1ac:	9104      	str	r1, [sp, #16]
 800f1ae:	3201      	adds	r2, #1
 800f1b0:	465c      	mov	r4, fp
 800f1b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f1b6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f1ba:	ee07 2a90 	vmov	s15, r2
 800f1be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f1c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f1c6:	ee15 2a90 	vmov	r2, s11
 800f1ca:	ec51 0b15 	vmov	r0, r1, d5
 800f1ce:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f1d2:	2c00      	cmp	r4, #0
 800f1d4:	f040 8098 	bne.w	800f308 <_dtoa_r+0x4c0>
 800f1d8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f1dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f1e0:	ec41 0b17 	vmov	d7, r0, r1
 800f1e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ec:	f300 8261 	bgt.w	800f6b2 <_dtoa_r+0x86a>
 800f1f0:	eeb1 7b47 	vneg.f64	d7, d7
 800f1f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1fc:	f100 80f5 	bmi.w	800f3ea <_dtoa_r+0x5a2>
 800f200:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f204:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f206:	2a00      	cmp	r2, #0
 800f208:	f2c0 812c 	blt.w	800f464 <_dtoa_r+0x61c>
 800f20c:	f1b8 0f0e 	cmp.w	r8, #14
 800f210:	f300 8128 	bgt.w	800f464 <_dtoa_r+0x61c>
 800f214:	4b91      	ldr	r3, [pc, #580]	@ (800f45c <_dtoa_r+0x614>)
 800f216:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f21a:	ed93 6b00 	vldr	d6, [r3]
 800f21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f220:	2b00      	cmp	r3, #0
 800f222:	da03      	bge.n	800f22c <_dtoa_r+0x3e4>
 800f224:	f1ba 0f00 	cmp.w	sl, #0
 800f228:	f340 80d2 	ble.w	800f3d0 <_dtoa_r+0x588>
 800f22c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f230:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f234:	463e      	mov	r6, r7
 800f236:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f23a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f23e:	ee15 3a10 	vmov	r3, s10
 800f242:	3330      	adds	r3, #48	@ 0x30
 800f244:	f806 3b01 	strb.w	r3, [r6], #1
 800f248:	1bf3      	subs	r3, r6, r7
 800f24a:	459a      	cmp	sl, r3
 800f24c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f250:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f254:	f040 80f8 	bne.w	800f448 <_dtoa_r+0x600>
 800f258:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f25c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f264:	f300 80dd 	bgt.w	800f422 <_dtoa_r+0x5da>
 800f268:	eeb4 7b46 	vcmp.f64	d7, d6
 800f26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f270:	d104      	bne.n	800f27c <_dtoa_r+0x434>
 800f272:	ee15 3a10 	vmov	r3, s10
 800f276:	07db      	lsls	r3, r3, #31
 800f278:	f100 80d3 	bmi.w	800f422 <_dtoa_r+0x5da>
 800f27c:	9901      	ldr	r1, [sp, #4]
 800f27e:	4648      	mov	r0, r9
 800f280:	f000 fc78 	bl	800fb74 <_Bfree>
 800f284:	2300      	movs	r3, #0
 800f286:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f288:	7033      	strb	r3, [r6, #0]
 800f28a:	f108 0301 	add.w	r3, r8, #1
 800f28e:	6013      	str	r3, [r2, #0]
 800f290:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 8304 	beq.w	800f8a0 <_dtoa_r+0xa58>
 800f298:	601e      	str	r6, [r3, #0]
 800f29a:	e301      	b.n	800f8a0 <_dtoa_r+0xa58>
 800f29c:	2202      	movs	r2, #2
 800f29e:	e75e      	b.n	800f15e <_dtoa_r+0x316>
 800f2a0:	07cc      	lsls	r4, r1, #31
 800f2a2:	d504      	bpl.n	800f2ae <_dtoa_r+0x466>
 800f2a4:	ed90 6b00 	vldr	d6, [r0]
 800f2a8:	3201      	adds	r2, #1
 800f2aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2ae:	1049      	asrs	r1, r1, #1
 800f2b0:	3008      	adds	r0, #8
 800f2b2:	e755      	b.n	800f160 <_dtoa_r+0x318>
 800f2b4:	d022      	beq.n	800f2fc <_dtoa_r+0x4b4>
 800f2b6:	f1c8 0100 	rsb	r1, r8, #0
 800f2ba:	4a68      	ldr	r2, [pc, #416]	@ (800f45c <_dtoa_r+0x614>)
 800f2bc:	f001 000f 	and.w	r0, r1, #15
 800f2c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f2c4:	ed92 7b00 	vldr	d7, [r2]
 800f2c8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f2cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2d0:	4863      	ldr	r0, [pc, #396]	@ (800f460 <_dtoa_r+0x618>)
 800f2d2:	1109      	asrs	r1, r1, #4
 800f2d4:	2400      	movs	r4, #0
 800f2d6:	2202      	movs	r2, #2
 800f2d8:	b929      	cbnz	r1, 800f2e6 <_dtoa_r+0x49e>
 800f2da:	2c00      	cmp	r4, #0
 800f2dc:	f43f af49 	beq.w	800f172 <_dtoa_r+0x32a>
 800f2e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2e4:	e745      	b.n	800f172 <_dtoa_r+0x32a>
 800f2e6:	07ce      	lsls	r6, r1, #31
 800f2e8:	d505      	bpl.n	800f2f6 <_dtoa_r+0x4ae>
 800f2ea:	ed90 6b00 	vldr	d6, [r0]
 800f2ee:	3201      	adds	r2, #1
 800f2f0:	2401      	movs	r4, #1
 800f2f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2f6:	1049      	asrs	r1, r1, #1
 800f2f8:	3008      	adds	r0, #8
 800f2fa:	e7ed      	b.n	800f2d8 <_dtoa_r+0x490>
 800f2fc:	2202      	movs	r2, #2
 800f2fe:	e738      	b.n	800f172 <_dtoa_r+0x32a>
 800f300:	f8cd 8010 	str.w	r8, [sp, #16]
 800f304:	4654      	mov	r4, sl
 800f306:	e754      	b.n	800f1b2 <_dtoa_r+0x36a>
 800f308:	4a54      	ldr	r2, [pc, #336]	@ (800f45c <_dtoa_r+0x614>)
 800f30a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f30e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f312:	9a08      	ldr	r2, [sp, #32]
 800f314:	ec41 0b17 	vmov	d7, r0, r1
 800f318:	443c      	add	r4, r7
 800f31a:	b34a      	cbz	r2, 800f370 <_dtoa_r+0x528>
 800f31c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f320:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f324:	463e      	mov	r6, r7
 800f326:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f32a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f32e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f332:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f336:	ee14 2a90 	vmov	r2, s9
 800f33a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f33e:	3230      	adds	r2, #48	@ 0x30
 800f340:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f344:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f34c:	f806 2b01 	strb.w	r2, [r6], #1
 800f350:	d438      	bmi.n	800f3c4 <_dtoa_r+0x57c>
 800f352:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f356:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35e:	d462      	bmi.n	800f426 <_dtoa_r+0x5de>
 800f360:	42a6      	cmp	r6, r4
 800f362:	f43f af4d 	beq.w	800f200 <_dtoa_r+0x3b8>
 800f366:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f36a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f36e:	e7e0      	b.n	800f332 <_dtoa_r+0x4ea>
 800f370:	4621      	mov	r1, r4
 800f372:	463e      	mov	r6, r7
 800f374:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f378:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f37c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f380:	ee14 2a90 	vmov	r2, s9
 800f384:	3230      	adds	r2, #48	@ 0x30
 800f386:	f806 2b01 	strb.w	r2, [r6], #1
 800f38a:	42a6      	cmp	r6, r4
 800f38c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f390:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f394:	d119      	bne.n	800f3ca <_dtoa_r+0x582>
 800f396:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f39a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f39e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a6:	dc3e      	bgt.n	800f426 <_dtoa_r+0x5de>
 800f3a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f3ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b4:	f57f af24 	bpl.w	800f200 <_dtoa_r+0x3b8>
 800f3b8:	460e      	mov	r6, r1
 800f3ba:	3901      	subs	r1, #1
 800f3bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f3c0:	2b30      	cmp	r3, #48	@ 0x30
 800f3c2:	d0f9      	beq.n	800f3b8 <_dtoa_r+0x570>
 800f3c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f3c8:	e758      	b.n	800f27c <_dtoa_r+0x434>
 800f3ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f3ce:	e7d5      	b.n	800f37c <_dtoa_r+0x534>
 800f3d0:	d10b      	bne.n	800f3ea <_dtoa_r+0x5a2>
 800f3d2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f3d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f3da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f3de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e6:	f2c0 8161 	blt.w	800f6ac <_dtoa_r+0x864>
 800f3ea:	2400      	movs	r4, #0
 800f3ec:	4625      	mov	r5, r4
 800f3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3f0:	43db      	mvns	r3, r3
 800f3f2:	9304      	str	r3, [sp, #16]
 800f3f4:	463e      	mov	r6, r7
 800f3f6:	f04f 0800 	mov.w	r8, #0
 800f3fa:	4621      	mov	r1, r4
 800f3fc:	4648      	mov	r0, r9
 800f3fe:	f000 fbb9 	bl	800fb74 <_Bfree>
 800f402:	2d00      	cmp	r5, #0
 800f404:	d0de      	beq.n	800f3c4 <_dtoa_r+0x57c>
 800f406:	f1b8 0f00 	cmp.w	r8, #0
 800f40a:	d005      	beq.n	800f418 <_dtoa_r+0x5d0>
 800f40c:	45a8      	cmp	r8, r5
 800f40e:	d003      	beq.n	800f418 <_dtoa_r+0x5d0>
 800f410:	4641      	mov	r1, r8
 800f412:	4648      	mov	r0, r9
 800f414:	f000 fbae 	bl	800fb74 <_Bfree>
 800f418:	4629      	mov	r1, r5
 800f41a:	4648      	mov	r0, r9
 800f41c:	f000 fbaa 	bl	800fb74 <_Bfree>
 800f420:	e7d0      	b.n	800f3c4 <_dtoa_r+0x57c>
 800f422:	f8cd 8010 	str.w	r8, [sp, #16]
 800f426:	4633      	mov	r3, r6
 800f428:	461e      	mov	r6, r3
 800f42a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f42e:	2a39      	cmp	r2, #57	@ 0x39
 800f430:	d106      	bne.n	800f440 <_dtoa_r+0x5f8>
 800f432:	429f      	cmp	r7, r3
 800f434:	d1f8      	bne.n	800f428 <_dtoa_r+0x5e0>
 800f436:	9a04      	ldr	r2, [sp, #16]
 800f438:	3201      	adds	r2, #1
 800f43a:	9204      	str	r2, [sp, #16]
 800f43c:	2230      	movs	r2, #48	@ 0x30
 800f43e:	703a      	strb	r2, [r7, #0]
 800f440:	781a      	ldrb	r2, [r3, #0]
 800f442:	3201      	adds	r2, #1
 800f444:	701a      	strb	r2, [r3, #0]
 800f446:	e7bd      	b.n	800f3c4 <_dtoa_r+0x57c>
 800f448:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f44c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f454:	f47f aeef 	bne.w	800f236 <_dtoa_r+0x3ee>
 800f458:	e710      	b.n	800f27c <_dtoa_r+0x434>
 800f45a:	bf00      	nop
 800f45c:	08012410 	.word	0x08012410
 800f460:	080123e8 	.word	0x080123e8
 800f464:	9908      	ldr	r1, [sp, #32]
 800f466:	2900      	cmp	r1, #0
 800f468:	f000 80e3 	beq.w	800f632 <_dtoa_r+0x7ea>
 800f46c:	9907      	ldr	r1, [sp, #28]
 800f46e:	2901      	cmp	r1, #1
 800f470:	f300 80c8 	bgt.w	800f604 <_dtoa_r+0x7bc>
 800f474:	2d00      	cmp	r5, #0
 800f476:	f000 80c1 	beq.w	800f5fc <_dtoa_r+0x7b4>
 800f47a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f47e:	9e05      	ldr	r6, [sp, #20]
 800f480:	461c      	mov	r4, r3
 800f482:	9304      	str	r3, [sp, #16]
 800f484:	9b05      	ldr	r3, [sp, #20]
 800f486:	4413      	add	r3, r2
 800f488:	9305      	str	r3, [sp, #20]
 800f48a:	9b06      	ldr	r3, [sp, #24]
 800f48c:	2101      	movs	r1, #1
 800f48e:	4413      	add	r3, r2
 800f490:	4648      	mov	r0, r9
 800f492:	9306      	str	r3, [sp, #24]
 800f494:	f000 fc6c 	bl	800fd70 <__i2b>
 800f498:	9b04      	ldr	r3, [sp, #16]
 800f49a:	4605      	mov	r5, r0
 800f49c:	b166      	cbz	r6, 800f4b8 <_dtoa_r+0x670>
 800f49e:	9a06      	ldr	r2, [sp, #24]
 800f4a0:	2a00      	cmp	r2, #0
 800f4a2:	dd09      	ble.n	800f4b8 <_dtoa_r+0x670>
 800f4a4:	42b2      	cmp	r2, r6
 800f4a6:	9905      	ldr	r1, [sp, #20]
 800f4a8:	bfa8      	it	ge
 800f4aa:	4632      	movge	r2, r6
 800f4ac:	1a89      	subs	r1, r1, r2
 800f4ae:	9105      	str	r1, [sp, #20]
 800f4b0:	9906      	ldr	r1, [sp, #24]
 800f4b2:	1ab6      	subs	r6, r6, r2
 800f4b4:	1a8a      	subs	r2, r1, r2
 800f4b6:	9206      	str	r2, [sp, #24]
 800f4b8:	b1fb      	cbz	r3, 800f4fa <_dtoa_r+0x6b2>
 800f4ba:	9a08      	ldr	r2, [sp, #32]
 800f4bc:	2a00      	cmp	r2, #0
 800f4be:	f000 80bc 	beq.w	800f63a <_dtoa_r+0x7f2>
 800f4c2:	b19c      	cbz	r4, 800f4ec <_dtoa_r+0x6a4>
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	4622      	mov	r2, r4
 800f4c8:	4648      	mov	r0, r9
 800f4ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4cc:	f000 fd10 	bl	800fef0 <__pow5mult>
 800f4d0:	9a01      	ldr	r2, [sp, #4]
 800f4d2:	4601      	mov	r1, r0
 800f4d4:	4605      	mov	r5, r0
 800f4d6:	4648      	mov	r0, r9
 800f4d8:	f000 fc60 	bl	800fd9c <__multiply>
 800f4dc:	9901      	ldr	r1, [sp, #4]
 800f4de:	9004      	str	r0, [sp, #16]
 800f4e0:	4648      	mov	r0, r9
 800f4e2:	f000 fb47 	bl	800fb74 <_Bfree>
 800f4e6:	9a04      	ldr	r2, [sp, #16]
 800f4e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4ea:	9201      	str	r2, [sp, #4]
 800f4ec:	1b1a      	subs	r2, r3, r4
 800f4ee:	d004      	beq.n	800f4fa <_dtoa_r+0x6b2>
 800f4f0:	9901      	ldr	r1, [sp, #4]
 800f4f2:	4648      	mov	r0, r9
 800f4f4:	f000 fcfc 	bl	800fef0 <__pow5mult>
 800f4f8:	9001      	str	r0, [sp, #4]
 800f4fa:	2101      	movs	r1, #1
 800f4fc:	4648      	mov	r0, r9
 800f4fe:	f000 fc37 	bl	800fd70 <__i2b>
 800f502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f504:	4604      	mov	r4, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	f000 81d0 	beq.w	800f8ac <_dtoa_r+0xa64>
 800f50c:	461a      	mov	r2, r3
 800f50e:	4601      	mov	r1, r0
 800f510:	4648      	mov	r0, r9
 800f512:	f000 fced 	bl	800fef0 <__pow5mult>
 800f516:	9b07      	ldr	r3, [sp, #28]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	4604      	mov	r4, r0
 800f51c:	f300 8095 	bgt.w	800f64a <_dtoa_r+0x802>
 800f520:	9b02      	ldr	r3, [sp, #8]
 800f522:	2b00      	cmp	r3, #0
 800f524:	f040 808b 	bne.w	800f63e <_dtoa_r+0x7f6>
 800f528:	9b03      	ldr	r3, [sp, #12]
 800f52a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f52e:	2a00      	cmp	r2, #0
 800f530:	f040 8087 	bne.w	800f642 <_dtoa_r+0x7fa>
 800f534:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f538:	0d12      	lsrs	r2, r2, #20
 800f53a:	0512      	lsls	r2, r2, #20
 800f53c:	2a00      	cmp	r2, #0
 800f53e:	f000 8082 	beq.w	800f646 <_dtoa_r+0x7fe>
 800f542:	9b05      	ldr	r3, [sp, #20]
 800f544:	3301      	adds	r3, #1
 800f546:	9305      	str	r3, [sp, #20]
 800f548:	9b06      	ldr	r3, [sp, #24]
 800f54a:	3301      	adds	r3, #1
 800f54c:	9306      	str	r3, [sp, #24]
 800f54e:	2301      	movs	r3, #1
 800f550:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f554:	2b00      	cmp	r3, #0
 800f556:	f000 81af 	beq.w	800f8b8 <_dtoa_r+0xa70>
 800f55a:	6922      	ldr	r2, [r4, #16]
 800f55c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f560:	6910      	ldr	r0, [r2, #16]
 800f562:	f000 fbb9 	bl	800fcd8 <__hi0bits>
 800f566:	f1c0 0020 	rsb	r0, r0, #32
 800f56a:	9b06      	ldr	r3, [sp, #24]
 800f56c:	4418      	add	r0, r3
 800f56e:	f010 001f 	ands.w	r0, r0, #31
 800f572:	d076      	beq.n	800f662 <_dtoa_r+0x81a>
 800f574:	f1c0 0220 	rsb	r2, r0, #32
 800f578:	2a04      	cmp	r2, #4
 800f57a:	dd69      	ble.n	800f650 <_dtoa_r+0x808>
 800f57c:	9b05      	ldr	r3, [sp, #20]
 800f57e:	f1c0 001c 	rsb	r0, r0, #28
 800f582:	4403      	add	r3, r0
 800f584:	9305      	str	r3, [sp, #20]
 800f586:	9b06      	ldr	r3, [sp, #24]
 800f588:	4406      	add	r6, r0
 800f58a:	4403      	add	r3, r0
 800f58c:	9306      	str	r3, [sp, #24]
 800f58e:	9b05      	ldr	r3, [sp, #20]
 800f590:	2b00      	cmp	r3, #0
 800f592:	dd05      	ble.n	800f5a0 <_dtoa_r+0x758>
 800f594:	9901      	ldr	r1, [sp, #4]
 800f596:	461a      	mov	r2, r3
 800f598:	4648      	mov	r0, r9
 800f59a:	f000 fd03 	bl	800ffa4 <__lshift>
 800f59e:	9001      	str	r0, [sp, #4]
 800f5a0:	9b06      	ldr	r3, [sp, #24]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	dd05      	ble.n	800f5b2 <_dtoa_r+0x76a>
 800f5a6:	4621      	mov	r1, r4
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	4648      	mov	r0, r9
 800f5ac:	f000 fcfa 	bl	800ffa4 <__lshift>
 800f5b0:	4604      	mov	r4, r0
 800f5b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d056      	beq.n	800f666 <_dtoa_r+0x81e>
 800f5b8:	9801      	ldr	r0, [sp, #4]
 800f5ba:	4621      	mov	r1, r4
 800f5bc:	f000 fd5e 	bl	801007c <__mcmp>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	da50      	bge.n	800f666 <_dtoa_r+0x81e>
 800f5c4:	f108 33ff 	add.w	r3, r8, #4294967295
 800f5c8:	9304      	str	r3, [sp, #16]
 800f5ca:	9901      	ldr	r1, [sp, #4]
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	220a      	movs	r2, #10
 800f5d0:	4648      	mov	r0, r9
 800f5d2:	f000 faf1 	bl	800fbb8 <__multadd>
 800f5d6:	9b08      	ldr	r3, [sp, #32]
 800f5d8:	9001      	str	r0, [sp, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	f000 816e 	beq.w	800f8bc <_dtoa_r+0xa74>
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	220a      	movs	r2, #10
 800f5e6:	4648      	mov	r0, r9
 800f5e8:	f000 fae6 	bl	800fbb8 <__multadd>
 800f5ec:	f1bb 0f00 	cmp.w	fp, #0
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	dc64      	bgt.n	800f6be <_dtoa_r+0x876>
 800f5f4:	9b07      	ldr	r3, [sp, #28]
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	dc3e      	bgt.n	800f678 <_dtoa_r+0x830>
 800f5fa:	e060      	b.n	800f6be <_dtoa_r+0x876>
 800f5fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f602:	e73c      	b.n	800f47e <_dtoa_r+0x636>
 800f604:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f608:	42a3      	cmp	r3, r4
 800f60a:	bfbf      	itttt	lt
 800f60c:	1ae2      	sublt	r2, r4, r3
 800f60e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f610:	189b      	addlt	r3, r3, r2
 800f612:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f614:	bfae      	itee	ge
 800f616:	1b1c      	subge	r4, r3, r4
 800f618:	4623      	movlt	r3, r4
 800f61a:	2400      	movlt	r4, #0
 800f61c:	f1ba 0f00 	cmp.w	sl, #0
 800f620:	bfb5      	itete	lt
 800f622:	9a05      	ldrlt	r2, [sp, #20]
 800f624:	9e05      	ldrge	r6, [sp, #20]
 800f626:	eba2 060a 	sublt.w	r6, r2, sl
 800f62a:	4652      	movge	r2, sl
 800f62c:	bfb8      	it	lt
 800f62e:	2200      	movlt	r2, #0
 800f630:	e727      	b.n	800f482 <_dtoa_r+0x63a>
 800f632:	9e05      	ldr	r6, [sp, #20]
 800f634:	9d08      	ldr	r5, [sp, #32]
 800f636:	461c      	mov	r4, r3
 800f638:	e730      	b.n	800f49c <_dtoa_r+0x654>
 800f63a:	461a      	mov	r2, r3
 800f63c:	e758      	b.n	800f4f0 <_dtoa_r+0x6a8>
 800f63e:	2300      	movs	r3, #0
 800f640:	e786      	b.n	800f550 <_dtoa_r+0x708>
 800f642:	9b02      	ldr	r3, [sp, #8]
 800f644:	e784      	b.n	800f550 <_dtoa_r+0x708>
 800f646:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f648:	e783      	b.n	800f552 <_dtoa_r+0x70a>
 800f64a:	2300      	movs	r3, #0
 800f64c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f64e:	e784      	b.n	800f55a <_dtoa_r+0x712>
 800f650:	d09d      	beq.n	800f58e <_dtoa_r+0x746>
 800f652:	9b05      	ldr	r3, [sp, #20]
 800f654:	321c      	adds	r2, #28
 800f656:	4413      	add	r3, r2
 800f658:	9305      	str	r3, [sp, #20]
 800f65a:	9b06      	ldr	r3, [sp, #24]
 800f65c:	4416      	add	r6, r2
 800f65e:	4413      	add	r3, r2
 800f660:	e794      	b.n	800f58c <_dtoa_r+0x744>
 800f662:	4602      	mov	r2, r0
 800f664:	e7f5      	b.n	800f652 <_dtoa_r+0x80a>
 800f666:	f1ba 0f00 	cmp.w	sl, #0
 800f66a:	f8cd 8010 	str.w	r8, [sp, #16]
 800f66e:	46d3      	mov	fp, sl
 800f670:	dc21      	bgt.n	800f6b6 <_dtoa_r+0x86e>
 800f672:	9b07      	ldr	r3, [sp, #28]
 800f674:	2b02      	cmp	r3, #2
 800f676:	dd1e      	ble.n	800f6b6 <_dtoa_r+0x86e>
 800f678:	f1bb 0f00 	cmp.w	fp, #0
 800f67c:	f47f aeb7 	bne.w	800f3ee <_dtoa_r+0x5a6>
 800f680:	4621      	mov	r1, r4
 800f682:	465b      	mov	r3, fp
 800f684:	2205      	movs	r2, #5
 800f686:	4648      	mov	r0, r9
 800f688:	f000 fa96 	bl	800fbb8 <__multadd>
 800f68c:	4601      	mov	r1, r0
 800f68e:	4604      	mov	r4, r0
 800f690:	9801      	ldr	r0, [sp, #4]
 800f692:	f000 fcf3 	bl	801007c <__mcmp>
 800f696:	2800      	cmp	r0, #0
 800f698:	f77f aea9 	ble.w	800f3ee <_dtoa_r+0x5a6>
 800f69c:	463e      	mov	r6, r7
 800f69e:	2331      	movs	r3, #49	@ 0x31
 800f6a0:	f806 3b01 	strb.w	r3, [r6], #1
 800f6a4:	9b04      	ldr	r3, [sp, #16]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	9304      	str	r3, [sp, #16]
 800f6aa:	e6a4      	b.n	800f3f6 <_dtoa_r+0x5ae>
 800f6ac:	f8cd 8010 	str.w	r8, [sp, #16]
 800f6b0:	4654      	mov	r4, sl
 800f6b2:	4625      	mov	r5, r4
 800f6b4:	e7f2      	b.n	800f69c <_dtoa_r+0x854>
 800f6b6:	9b08      	ldr	r3, [sp, #32]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 8103 	beq.w	800f8c4 <_dtoa_r+0xa7c>
 800f6be:	2e00      	cmp	r6, #0
 800f6c0:	dd05      	ble.n	800f6ce <_dtoa_r+0x886>
 800f6c2:	4629      	mov	r1, r5
 800f6c4:	4632      	mov	r2, r6
 800f6c6:	4648      	mov	r0, r9
 800f6c8:	f000 fc6c 	bl	800ffa4 <__lshift>
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d058      	beq.n	800f786 <_dtoa_r+0x93e>
 800f6d4:	6869      	ldr	r1, [r5, #4]
 800f6d6:	4648      	mov	r0, r9
 800f6d8:	f000 fa0c 	bl	800faf4 <_Balloc>
 800f6dc:	4606      	mov	r6, r0
 800f6de:	b928      	cbnz	r0, 800f6ec <_dtoa_r+0x8a4>
 800f6e0:	4b82      	ldr	r3, [pc, #520]	@ (800f8ec <_dtoa_r+0xaa4>)
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f6e8:	f7ff bbc7 	b.w	800ee7a <_dtoa_r+0x32>
 800f6ec:	692a      	ldr	r2, [r5, #16]
 800f6ee:	3202      	adds	r2, #2
 800f6f0:	0092      	lsls	r2, r2, #2
 800f6f2:	f105 010c 	add.w	r1, r5, #12
 800f6f6:	300c      	adds	r0, #12
 800f6f8:	f001 ff1e 	bl	8011538 <memcpy>
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	4631      	mov	r1, r6
 800f700:	4648      	mov	r0, r9
 800f702:	f000 fc4f 	bl	800ffa4 <__lshift>
 800f706:	1c7b      	adds	r3, r7, #1
 800f708:	9305      	str	r3, [sp, #20]
 800f70a:	eb07 030b 	add.w	r3, r7, fp
 800f70e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f710:	9b02      	ldr	r3, [sp, #8]
 800f712:	f003 0301 	and.w	r3, r3, #1
 800f716:	46a8      	mov	r8, r5
 800f718:	9308      	str	r3, [sp, #32]
 800f71a:	4605      	mov	r5, r0
 800f71c:	9b05      	ldr	r3, [sp, #20]
 800f71e:	9801      	ldr	r0, [sp, #4]
 800f720:	4621      	mov	r1, r4
 800f722:	f103 3bff 	add.w	fp, r3, #4294967295
 800f726:	f7ff fb07 	bl	800ed38 <quorem>
 800f72a:	4641      	mov	r1, r8
 800f72c:	9002      	str	r0, [sp, #8]
 800f72e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f732:	9801      	ldr	r0, [sp, #4]
 800f734:	f000 fca2 	bl	801007c <__mcmp>
 800f738:	462a      	mov	r2, r5
 800f73a:	9006      	str	r0, [sp, #24]
 800f73c:	4621      	mov	r1, r4
 800f73e:	4648      	mov	r0, r9
 800f740:	f000 fcb8 	bl	80100b4 <__mdiff>
 800f744:	68c2      	ldr	r2, [r0, #12]
 800f746:	4606      	mov	r6, r0
 800f748:	b9fa      	cbnz	r2, 800f78a <_dtoa_r+0x942>
 800f74a:	4601      	mov	r1, r0
 800f74c:	9801      	ldr	r0, [sp, #4]
 800f74e:	f000 fc95 	bl	801007c <__mcmp>
 800f752:	4602      	mov	r2, r0
 800f754:	4631      	mov	r1, r6
 800f756:	4648      	mov	r0, r9
 800f758:	920a      	str	r2, [sp, #40]	@ 0x28
 800f75a:	f000 fa0b 	bl	800fb74 <_Bfree>
 800f75e:	9b07      	ldr	r3, [sp, #28]
 800f760:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f762:	9e05      	ldr	r6, [sp, #20]
 800f764:	ea43 0102 	orr.w	r1, r3, r2
 800f768:	9b08      	ldr	r3, [sp, #32]
 800f76a:	4319      	orrs	r1, r3
 800f76c:	d10f      	bne.n	800f78e <_dtoa_r+0x946>
 800f76e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f772:	d028      	beq.n	800f7c6 <_dtoa_r+0x97e>
 800f774:	9b06      	ldr	r3, [sp, #24]
 800f776:	2b00      	cmp	r3, #0
 800f778:	dd02      	ble.n	800f780 <_dtoa_r+0x938>
 800f77a:	9b02      	ldr	r3, [sp, #8]
 800f77c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f780:	f88b a000 	strb.w	sl, [fp]
 800f784:	e639      	b.n	800f3fa <_dtoa_r+0x5b2>
 800f786:	4628      	mov	r0, r5
 800f788:	e7bd      	b.n	800f706 <_dtoa_r+0x8be>
 800f78a:	2201      	movs	r2, #1
 800f78c:	e7e2      	b.n	800f754 <_dtoa_r+0x90c>
 800f78e:	9b06      	ldr	r3, [sp, #24]
 800f790:	2b00      	cmp	r3, #0
 800f792:	db04      	blt.n	800f79e <_dtoa_r+0x956>
 800f794:	9907      	ldr	r1, [sp, #28]
 800f796:	430b      	orrs	r3, r1
 800f798:	9908      	ldr	r1, [sp, #32]
 800f79a:	430b      	orrs	r3, r1
 800f79c:	d120      	bne.n	800f7e0 <_dtoa_r+0x998>
 800f79e:	2a00      	cmp	r2, #0
 800f7a0:	ddee      	ble.n	800f780 <_dtoa_r+0x938>
 800f7a2:	9901      	ldr	r1, [sp, #4]
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	4648      	mov	r0, r9
 800f7a8:	f000 fbfc 	bl	800ffa4 <__lshift>
 800f7ac:	4621      	mov	r1, r4
 800f7ae:	9001      	str	r0, [sp, #4]
 800f7b0:	f000 fc64 	bl	801007c <__mcmp>
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	dc03      	bgt.n	800f7c0 <_dtoa_r+0x978>
 800f7b8:	d1e2      	bne.n	800f780 <_dtoa_r+0x938>
 800f7ba:	f01a 0f01 	tst.w	sl, #1
 800f7be:	d0df      	beq.n	800f780 <_dtoa_r+0x938>
 800f7c0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f7c4:	d1d9      	bne.n	800f77a <_dtoa_r+0x932>
 800f7c6:	2339      	movs	r3, #57	@ 0x39
 800f7c8:	f88b 3000 	strb.w	r3, [fp]
 800f7cc:	4633      	mov	r3, r6
 800f7ce:	461e      	mov	r6, r3
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f7d6:	2a39      	cmp	r2, #57	@ 0x39
 800f7d8:	d053      	beq.n	800f882 <_dtoa_r+0xa3a>
 800f7da:	3201      	adds	r2, #1
 800f7dc:	701a      	strb	r2, [r3, #0]
 800f7de:	e60c      	b.n	800f3fa <_dtoa_r+0x5b2>
 800f7e0:	2a00      	cmp	r2, #0
 800f7e2:	dd07      	ble.n	800f7f4 <_dtoa_r+0x9ac>
 800f7e4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f7e8:	d0ed      	beq.n	800f7c6 <_dtoa_r+0x97e>
 800f7ea:	f10a 0301 	add.w	r3, sl, #1
 800f7ee:	f88b 3000 	strb.w	r3, [fp]
 800f7f2:	e602      	b.n	800f3fa <_dtoa_r+0x5b2>
 800f7f4:	9b05      	ldr	r3, [sp, #20]
 800f7f6:	9a05      	ldr	r2, [sp, #20]
 800f7f8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d029      	beq.n	800f856 <_dtoa_r+0xa0e>
 800f802:	9901      	ldr	r1, [sp, #4]
 800f804:	2300      	movs	r3, #0
 800f806:	220a      	movs	r2, #10
 800f808:	4648      	mov	r0, r9
 800f80a:	f000 f9d5 	bl	800fbb8 <__multadd>
 800f80e:	45a8      	cmp	r8, r5
 800f810:	9001      	str	r0, [sp, #4]
 800f812:	f04f 0300 	mov.w	r3, #0
 800f816:	f04f 020a 	mov.w	r2, #10
 800f81a:	4641      	mov	r1, r8
 800f81c:	4648      	mov	r0, r9
 800f81e:	d107      	bne.n	800f830 <_dtoa_r+0x9e8>
 800f820:	f000 f9ca 	bl	800fbb8 <__multadd>
 800f824:	4680      	mov	r8, r0
 800f826:	4605      	mov	r5, r0
 800f828:	9b05      	ldr	r3, [sp, #20]
 800f82a:	3301      	adds	r3, #1
 800f82c:	9305      	str	r3, [sp, #20]
 800f82e:	e775      	b.n	800f71c <_dtoa_r+0x8d4>
 800f830:	f000 f9c2 	bl	800fbb8 <__multadd>
 800f834:	4629      	mov	r1, r5
 800f836:	4680      	mov	r8, r0
 800f838:	2300      	movs	r3, #0
 800f83a:	220a      	movs	r2, #10
 800f83c:	4648      	mov	r0, r9
 800f83e:	f000 f9bb 	bl	800fbb8 <__multadd>
 800f842:	4605      	mov	r5, r0
 800f844:	e7f0      	b.n	800f828 <_dtoa_r+0x9e0>
 800f846:	f1bb 0f00 	cmp.w	fp, #0
 800f84a:	bfcc      	ite	gt
 800f84c:	465e      	movgt	r6, fp
 800f84e:	2601      	movle	r6, #1
 800f850:	443e      	add	r6, r7
 800f852:	f04f 0800 	mov.w	r8, #0
 800f856:	9901      	ldr	r1, [sp, #4]
 800f858:	2201      	movs	r2, #1
 800f85a:	4648      	mov	r0, r9
 800f85c:	f000 fba2 	bl	800ffa4 <__lshift>
 800f860:	4621      	mov	r1, r4
 800f862:	9001      	str	r0, [sp, #4]
 800f864:	f000 fc0a 	bl	801007c <__mcmp>
 800f868:	2800      	cmp	r0, #0
 800f86a:	dcaf      	bgt.n	800f7cc <_dtoa_r+0x984>
 800f86c:	d102      	bne.n	800f874 <_dtoa_r+0xa2c>
 800f86e:	f01a 0f01 	tst.w	sl, #1
 800f872:	d1ab      	bne.n	800f7cc <_dtoa_r+0x984>
 800f874:	4633      	mov	r3, r6
 800f876:	461e      	mov	r6, r3
 800f878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f87c:	2a30      	cmp	r2, #48	@ 0x30
 800f87e:	d0fa      	beq.n	800f876 <_dtoa_r+0xa2e>
 800f880:	e5bb      	b.n	800f3fa <_dtoa_r+0x5b2>
 800f882:	429f      	cmp	r7, r3
 800f884:	d1a3      	bne.n	800f7ce <_dtoa_r+0x986>
 800f886:	9b04      	ldr	r3, [sp, #16]
 800f888:	3301      	adds	r3, #1
 800f88a:	9304      	str	r3, [sp, #16]
 800f88c:	2331      	movs	r3, #49	@ 0x31
 800f88e:	703b      	strb	r3, [r7, #0]
 800f890:	e5b3      	b.n	800f3fa <_dtoa_r+0x5b2>
 800f892:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f894:	4f16      	ldr	r7, [pc, #88]	@ (800f8f0 <_dtoa_r+0xaa8>)
 800f896:	b11b      	cbz	r3, 800f8a0 <_dtoa_r+0xa58>
 800f898:	f107 0308 	add.w	r3, r7, #8
 800f89c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f89e:	6013      	str	r3, [r2, #0]
 800f8a0:	4638      	mov	r0, r7
 800f8a2:	b011      	add	sp, #68	@ 0x44
 800f8a4:	ecbd 8b02 	vpop	{d8}
 800f8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ac:	9b07      	ldr	r3, [sp, #28]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	f77f ae36 	ble.w	800f520 <_dtoa_r+0x6d8>
 800f8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f8b8:	2001      	movs	r0, #1
 800f8ba:	e656      	b.n	800f56a <_dtoa_r+0x722>
 800f8bc:	f1bb 0f00 	cmp.w	fp, #0
 800f8c0:	f77f aed7 	ble.w	800f672 <_dtoa_r+0x82a>
 800f8c4:	463e      	mov	r6, r7
 800f8c6:	9801      	ldr	r0, [sp, #4]
 800f8c8:	4621      	mov	r1, r4
 800f8ca:	f7ff fa35 	bl	800ed38 <quorem>
 800f8ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f8d2:	f806 ab01 	strb.w	sl, [r6], #1
 800f8d6:	1bf2      	subs	r2, r6, r7
 800f8d8:	4593      	cmp	fp, r2
 800f8da:	ddb4      	ble.n	800f846 <_dtoa_r+0x9fe>
 800f8dc:	9901      	ldr	r1, [sp, #4]
 800f8de:	2300      	movs	r3, #0
 800f8e0:	220a      	movs	r2, #10
 800f8e2:	4648      	mov	r0, r9
 800f8e4:	f000 f968 	bl	800fbb8 <__multadd>
 800f8e8:	9001      	str	r0, [sp, #4]
 800f8ea:	e7ec      	b.n	800f8c6 <_dtoa_r+0xa7e>
 800f8ec:	0801236d 	.word	0x0801236d
 800f8f0:	080122f1 	.word	0x080122f1

0800f8f4 <_free_r>:
 800f8f4:	b538      	push	{r3, r4, r5, lr}
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	2900      	cmp	r1, #0
 800f8fa:	d041      	beq.n	800f980 <_free_r+0x8c>
 800f8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f900:	1f0c      	subs	r4, r1, #4
 800f902:	2b00      	cmp	r3, #0
 800f904:	bfb8      	it	lt
 800f906:	18e4      	addlt	r4, r4, r3
 800f908:	f000 f8e8 	bl	800fadc <__malloc_lock>
 800f90c:	4a1d      	ldr	r2, [pc, #116]	@ (800f984 <_free_r+0x90>)
 800f90e:	6813      	ldr	r3, [r2, #0]
 800f910:	b933      	cbnz	r3, 800f920 <_free_r+0x2c>
 800f912:	6063      	str	r3, [r4, #4]
 800f914:	6014      	str	r4, [r2, #0]
 800f916:	4628      	mov	r0, r5
 800f918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f91c:	f000 b8e4 	b.w	800fae8 <__malloc_unlock>
 800f920:	42a3      	cmp	r3, r4
 800f922:	d908      	bls.n	800f936 <_free_r+0x42>
 800f924:	6820      	ldr	r0, [r4, #0]
 800f926:	1821      	adds	r1, r4, r0
 800f928:	428b      	cmp	r3, r1
 800f92a:	bf01      	itttt	eq
 800f92c:	6819      	ldreq	r1, [r3, #0]
 800f92e:	685b      	ldreq	r3, [r3, #4]
 800f930:	1809      	addeq	r1, r1, r0
 800f932:	6021      	streq	r1, [r4, #0]
 800f934:	e7ed      	b.n	800f912 <_free_r+0x1e>
 800f936:	461a      	mov	r2, r3
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	b10b      	cbz	r3, 800f940 <_free_r+0x4c>
 800f93c:	42a3      	cmp	r3, r4
 800f93e:	d9fa      	bls.n	800f936 <_free_r+0x42>
 800f940:	6811      	ldr	r1, [r2, #0]
 800f942:	1850      	adds	r0, r2, r1
 800f944:	42a0      	cmp	r0, r4
 800f946:	d10b      	bne.n	800f960 <_free_r+0x6c>
 800f948:	6820      	ldr	r0, [r4, #0]
 800f94a:	4401      	add	r1, r0
 800f94c:	1850      	adds	r0, r2, r1
 800f94e:	4283      	cmp	r3, r0
 800f950:	6011      	str	r1, [r2, #0]
 800f952:	d1e0      	bne.n	800f916 <_free_r+0x22>
 800f954:	6818      	ldr	r0, [r3, #0]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	6053      	str	r3, [r2, #4]
 800f95a:	4408      	add	r0, r1
 800f95c:	6010      	str	r0, [r2, #0]
 800f95e:	e7da      	b.n	800f916 <_free_r+0x22>
 800f960:	d902      	bls.n	800f968 <_free_r+0x74>
 800f962:	230c      	movs	r3, #12
 800f964:	602b      	str	r3, [r5, #0]
 800f966:	e7d6      	b.n	800f916 <_free_r+0x22>
 800f968:	6820      	ldr	r0, [r4, #0]
 800f96a:	1821      	adds	r1, r4, r0
 800f96c:	428b      	cmp	r3, r1
 800f96e:	bf04      	itt	eq
 800f970:	6819      	ldreq	r1, [r3, #0]
 800f972:	685b      	ldreq	r3, [r3, #4]
 800f974:	6063      	str	r3, [r4, #4]
 800f976:	bf04      	itt	eq
 800f978:	1809      	addeq	r1, r1, r0
 800f97a:	6021      	streq	r1, [r4, #0]
 800f97c:	6054      	str	r4, [r2, #4]
 800f97e:	e7ca      	b.n	800f916 <_free_r+0x22>
 800f980:	bd38      	pop	{r3, r4, r5, pc}
 800f982:	bf00      	nop
 800f984:	24000d08 	.word	0x24000d08

0800f988 <malloc>:
 800f988:	4b02      	ldr	r3, [pc, #8]	@ (800f994 <malloc+0xc>)
 800f98a:	4601      	mov	r1, r0
 800f98c:	6818      	ldr	r0, [r3, #0]
 800f98e:	f000 b825 	b.w	800f9dc <_malloc_r>
 800f992:	bf00      	nop
 800f994:	2400001c 	.word	0x2400001c

0800f998 <sbrk_aligned>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	4e0f      	ldr	r6, [pc, #60]	@ (800f9d8 <sbrk_aligned+0x40>)
 800f99c:	460c      	mov	r4, r1
 800f99e:	6831      	ldr	r1, [r6, #0]
 800f9a0:	4605      	mov	r5, r0
 800f9a2:	b911      	cbnz	r1, 800f9aa <sbrk_aligned+0x12>
 800f9a4:	f001 fdb8 	bl	8011518 <_sbrk_r>
 800f9a8:	6030      	str	r0, [r6, #0]
 800f9aa:	4621      	mov	r1, r4
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	f001 fdb3 	bl	8011518 <_sbrk_r>
 800f9b2:	1c43      	adds	r3, r0, #1
 800f9b4:	d103      	bne.n	800f9be <sbrk_aligned+0x26>
 800f9b6:	f04f 34ff 	mov.w	r4, #4294967295
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	bd70      	pop	{r4, r5, r6, pc}
 800f9be:	1cc4      	adds	r4, r0, #3
 800f9c0:	f024 0403 	bic.w	r4, r4, #3
 800f9c4:	42a0      	cmp	r0, r4
 800f9c6:	d0f8      	beq.n	800f9ba <sbrk_aligned+0x22>
 800f9c8:	1a21      	subs	r1, r4, r0
 800f9ca:	4628      	mov	r0, r5
 800f9cc:	f001 fda4 	bl	8011518 <_sbrk_r>
 800f9d0:	3001      	adds	r0, #1
 800f9d2:	d1f2      	bne.n	800f9ba <sbrk_aligned+0x22>
 800f9d4:	e7ef      	b.n	800f9b6 <sbrk_aligned+0x1e>
 800f9d6:	bf00      	nop
 800f9d8:	24000d04 	.word	0x24000d04

0800f9dc <_malloc_r>:
 800f9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9e0:	1ccd      	adds	r5, r1, #3
 800f9e2:	f025 0503 	bic.w	r5, r5, #3
 800f9e6:	3508      	adds	r5, #8
 800f9e8:	2d0c      	cmp	r5, #12
 800f9ea:	bf38      	it	cc
 800f9ec:	250c      	movcc	r5, #12
 800f9ee:	2d00      	cmp	r5, #0
 800f9f0:	4606      	mov	r6, r0
 800f9f2:	db01      	blt.n	800f9f8 <_malloc_r+0x1c>
 800f9f4:	42a9      	cmp	r1, r5
 800f9f6:	d904      	bls.n	800fa02 <_malloc_r+0x26>
 800f9f8:	230c      	movs	r3, #12
 800f9fa:	6033      	str	r3, [r6, #0]
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fad8 <_malloc_r+0xfc>
 800fa06:	f000 f869 	bl	800fadc <__malloc_lock>
 800fa0a:	f8d8 3000 	ldr.w	r3, [r8]
 800fa0e:	461c      	mov	r4, r3
 800fa10:	bb44      	cbnz	r4, 800fa64 <_malloc_r+0x88>
 800fa12:	4629      	mov	r1, r5
 800fa14:	4630      	mov	r0, r6
 800fa16:	f7ff ffbf 	bl	800f998 <sbrk_aligned>
 800fa1a:	1c43      	adds	r3, r0, #1
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	d158      	bne.n	800fad2 <_malloc_r+0xf6>
 800fa20:	f8d8 4000 	ldr.w	r4, [r8]
 800fa24:	4627      	mov	r7, r4
 800fa26:	2f00      	cmp	r7, #0
 800fa28:	d143      	bne.n	800fab2 <_malloc_r+0xd6>
 800fa2a:	2c00      	cmp	r4, #0
 800fa2c:	d04b      	beq.n	800fac6 <_malloc_r+0xea>
 800fa2e:	6823      	ldr	r3, [r4, #0]
 800fa30:	4639      	mov	r1, r7
 800fa32:	4630      	mov	r0, r6
 800fa34:	eb04 0903 	add.w	r9, r4, r3
 800fa38:	f001 fd6e 	bl	8011518 <_sbrk_r>
 800fa3c:	4581      	cmp	r9, r0
 800fa3e:	d142      	bne.n	800fac6 <_malloc_r+0xea>
 800fa40:	6821      	ldr	r1, [r4, #0]
 800fa42:	1a6d      	subs	r5, r5, r1
 800fa44:	4629      	mov	r1, r5
 800fa46:	4630      	mov	r0, r6
 800fa48:	f7ff ffa6 	bl	800f998 <sbrk_aligned>
 800fa4c:	3001      	adds	r0, #1
 800fa4e:	d03a      	beq.n	800fac6 <_malloc_r+0xea>
 800fa50:	6823      	ldr	r3, [r4, #0]
 800fa52:	442b      	add	r3, r5
 800fa54:	6023      	str	r3, [r4, #0]
 800fa56:	f8d8 3000 	ldr.w	r3, [r8]
 800fa5a:	685a      	ldr	r2, [r3, #4]
 800fa5c:	bb62      	cbnz	r2, 800fab8 <_malloc_r+0xdc>
 800fa5e:	f8c8 7000 	str.w	r7, [r8]
 800fa62:	e00f      	b.n	800fa84 <_malloc_r+0xa8>
 800fa64:	6822      	ldr	r2, [r4, #0]
 800fa66:	1b52      	subs	r2, r2, r5
 800fa68:	d420      	bmi.n	800faac <_malloc_r+0xd0>
 800fa6a:	2a0b      	cmp	r2, #11
 800fa6c:	d917      	bls.n	800fa9e <_malloc_r+0xc2>
 800fa6e:	1961      	adds	r1, r4, r5
 800fa70:	42a3      	cmp	r3, r4
 800fa72:	6025      	str	r5, [r4, #0]
 800fa74:	bf18      	it	ne
 800fa76:	6059      	strne	r1, [r3, #4]
 800fa78:	6863      	ldr	r3, [r4, #4]
 800fa7a:	bf08      	it	eq
 800fa7c:	f8c8 1000 	streq.w	r1, [r8]
 800fa80:	5162      	str	r2, [r4, r5]
 800fa82:	604b      	str	r3, [r1, #4]
 800fa84:	4630      	mov	r0, r6
 800fa86:	f000 f82f 	bl	800fae8 <__malloc_unlock>
 800fa8a:	f104 000b 	add.w	r0, r4, #11
 800fa8e:	1d23      	adds	r3, r4, #4
 800fa90:	f020 0007 	bic.w	r0, r0, #7
 800fa94:	1ac2      	subs	r2, r0, r3
 800fa96:	bf1c      	itt	ne
 800fa98:	1a1b      	subne	r3, r3, r0
 800fa9a:	50a3      	strne	r3, [r4, r2]
 800fa9c:	e7af      	b.n	800f9fe <_malloc_r+0x22>
 800fa9e:	6862      	ldr	r2, [r4, #4]
 800faa0:	42a3      	cmp	r3, r4
 800faa2:	bf0c      	ite	eq
 800faa4:	f8c8 2000 	streq.w	r2, [r8]
 800faa8:	605a      	strne	r2, [r3, #4]
 800faaa:	e7eb      	b.n	800fa84 <_malloc_r+0xa8>
 800faac:	4623      	mov	r3, r4
 800faae:	6864      	ldr	r4, [r4, #4]
 800fab0:	e7ae      	b.n	800fa10 <_malloc_r+0x34>
 800fab2:	463c      	mov	r4, r7
 800fab4:	687f      	ldr	r7, [r7, #4]
 800fab6:	e7b6      	b.n	800fa26 <_malloc_r+0x4a>
 800fab8:	461a      	mov	r2, r3
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	42a3      	cmp	r3, r4
 800fabe:	d1fb      	bne.n	800fab8 <_malloc_r+0xdc>
 800fac0:	2300      	movs	r3, #0
 800fac2:	6053      	str	r3, [r2, #4]
 800fac4:	e7de      	b.n	800fa84 <_malloc_r+0xa8>
 800fac6:	230c      	movs	r3, #12
 800fac8:	6033      	str	r3, [r6, #0]
 800faca:	4630      	mov	r0, r6
 800facc:	f000 f80c 	bl	800fae8 <__malloc_unlock>
 800fad0:	e794      	b.n	800f9fc <_malloc_r+0x20>
 800fad2:	6005      	str	r5, [r0, #0]
 800fad4:	e7d6      	b.n	800fa84 <_malloc_r+0xa8>
 800fad6:	bf00      	nop
 800fad8:	24000d08 	.word	0x24000d08

0800fadc <__malloc_lock>:
 800fadc:	4801      	ldr	r0, [pc, #4]	@ (800fae4 <__malloc_lock+0x8>)
 800fade:	f7ff b922 	b.w	800ed26 <__retarget_lock_acquire_recursive>
 800fae2:	bf00      	nop
 800fae4:	24000d00 	.word	0x24000d00

0800fae8 <__malloc_unlock>:
 800fae8:	4801      	ldr	r0, [pc, #4]	@ (800faf0 <__malloc_unlock+0x8>)
 800faea:	f7ff b91d 	b.w	800ed28 <__retarget_lock_release_recursive>
 800faee:	bf00      	nop
 800faf0:	24000d00 	.word	0x24000d00

0800faf4 <_Balloc>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	69c6      	ldr	r6, [r0, #28]
 800faf8:	4604      	mov	r4, r0
 800fafa:	460d      	mov	r5, r1
 800fafc:	b976      	cbnz	r6, 800fb1c <_Balloc+0x28>
 800fafe:	2010      	movs	r0, #16
 800fb00:	f7ff ff42 	bl	800f988 <malloc>
 800fb04:	4602      	mov	r2, r0
 800fb06:	61e0      	str	r0, [r4, #28]
 800fb08:	b920      	cbnz	r0, 800fb14 <_Balloc+0x20>
 800fb0a:	4b18      	ldr	r3, [pc, #96]	@ (800fb6c <_Balloc+0x78>)
 800fb0c:	4818      	ldr	r0, [pc, #96]	@ (800fb70 <_Balloc+0x7c>)
 800fb0e:	216b      	movs	r1, #107	@ 0x6b
 800fb10:	f001 fd2a 	bl	8011568 <__assert_func>
 800fb14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb18:	6006      	str	r6, [r0, #0]
 800fb1a:	60c6      	str	r6, [r0, #12]
 800fb1c:	69e6      	ldr	r6, [r4, #28]
 800fb1e:	68f3      	ldr	r3, [r6, #12]
 800fb20:	b183      	cbz	r3, 800fb44 <_Balloc+0x50>
 800fb22:	69e3      	ldr	r3, [r4, #28]
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb2a:	b9b8      	cbnz	r0, 800fb5c <_Balloc+0x68>
 800fb2c:	2101      	movs	r1, #1
 800fb2e:	fa01 f605 	lsl.w	r6, r1, r5
 800fb32:	1d72      	adds	r2, r6, #5
 800fb34:	0092      	lsls	r2, r2, #2
 800fb36:	4620      	mov	r0, r4
 800fb38:	f001 fd34 	bl	80115a4 <_calloc_r>
 800fb3c:	b160      	cbz	r0, 800fb58 <_Balloc+0x64>
 800fb3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb42:	e00e      	b.n	800fb62 <_Balloc+0x6e>
 800fb44:	2221      	movs	r2, #33	@ 0x21
 800fb46:	2104      	movs	r1, #4
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f001 fd2b 	bl	80115a4 <_calloc_r>
 800fb4e:	69e3      	ldr	r3, [r4, #28]
 800fb50:	60f0      	str	r0, [r6, #12]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d1e4      	bne.n	800fb22 <_Balloc+0x2e>
 800fb58:	2000      	movs	r0, #0
 800fb5a:	bd70      	pop	{r4, r5, r6, pc}
 800fb5c:	6802      	ldr	r2, [r0, #0]
 800fb5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb62:	2300      	movs	r3, #0
 800fb64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb68:	e7f7      	b.n	800fb5a <_Balloc+0x66>
 800fb6a:	bf00      	nop
 800fb6c:	080122fe 	.word	0x080122fe
 800fb70:	0801237e 	.word	0x0801237e

0800fb74 <_Bfree>:
 800fb74:	b570      	push	{r4, r5, r6, lr}
 800fb76:	69c6      	ldr	r6, [r0, #28]
 800fb78:	4605      	mov	r5, r0
 800fb7a:	460c      	mov	r4, r1
 800fb7c:	b976      	cbnz	r6, 800fb9c <_Bfree+0x28>
 800fb7e:	2010      	movs	r0, #16
 800fb80:	f7ff ff02 	bl	800f988 <malloc>
 800fb84:	4602      	mov	r2, r0
 800fb86:	61e8      	str	r0, [r5, #28]
 800fb88:	b920      	cbnz	r0, 800fb94 <_Bfree+0x20>
 800fb8a:	4b09      	ldr	r3, [pc, #36]	@ (800fbb0 <_Bfree+0x3c>)
 800fb8c:	4809      	ldr	r0, [pc, #36]	@ (800fbb4 <_Bfree+0x40>)
 800fb8e:	218f      	movs	r1, #143	@ 0x8f
 800fb90:	f001 fcea 	bl	8011568 <__assert_func>
 800fb94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb98:	6006      	str	r6, [r0, #0]
 800fb9a:	60c6      	str	r6, [r0, #12]
 800fb9c:	b13c      	cbz	r4, 800fbae <_Bfree+0x3a>
 800fb9e:	69eb      	ldr	r3, [r5, #28]
 800fba0:	6862      	ldr	r2, [r4, #4]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fba8:	6021      	str	r1, [r4, #0]
 800fbaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fbae:	bd70      	pop	{r4, r5, r6, pc}
 800fbb0:	080122fe 	.word	0x080122fe
 800fbb4:	0801237e 	.word	0x0801237e

0800fbb8 <__multadd>:
 800fbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbbc:	690d      	ldr	r5, [r1, #16]
 800fbbe:	4607      	mov	r7, r0
 800fbc0:	460c      	mov	r4, r1
 800fbc2:	461e      	mov	r6, r3
 800fbc4:	f101 0c14 	add.w	ip, r1, #20
 800fbc8:	2000      	movs	r0, #0
 800fbca:	f8dc 3000 	ldr.w	r3, [ip]
 800fbce:	b299      	uxth	r1, r3
 800fbd0:	fb02 6101 	mla	r1, r2, r1, r6
 800fbd4:	0c1e      	lsrs	r6, r3, #16
 800fbd6:	0c0b      	lsrs	r3, r1, #16
 800fbd8:	fb02 3306 	mla	r3, r2, r6, r3
 800fbdc:	b289      	uxth	r1, r1
 800fbde:	3001      	adds	r0, #1
 800fbe0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fbe4:	4285      	cmp	r5, r0
 800fbe6:	f84c 1b04 	str.w	r1, [ip], #4
 800fbea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fbee:	dcec      	bgt.n	800fbca <__multadd+0x12>
 800fbf0:	b30e      	cbz	r6, 800fc36 <__multadd+0x7e>
 800fbf2:	68a3      	ldr	r3, [r4, #8]
 800fbf4:	42ab      	cmp	r3, r5
 800fbf6:	dc19      	bgt.n	800fc2c <__multadd+0x74>
 800fbf8:	6861      	ldr	r1, [r4, #4]
 800fbfa:	4638      	mov	r0, r7
 800fbfc:	3101      	adds	r1, #1
 800fbfe:	f7ff ff79 	bl	800faf4 <_Balloc>
 800fc02:	4680      	mov	r8, r0
 800fc04:	b928      	cbnz	r0, 800fc12 <__multadd+0x5a>
 800fc06:	4602      	mov	r2, r0
 800fc08:	4b0c      	ldr	r3, [pc, #48]	@ (800fc3c <__multadd+0x84>)
 800fc0a:	480d      	ldr	r0, [pc, #52]	@ (800fc40 <__multadd+0x88>)
 800fc0c:	21ba      	movs	r1, #186	@ 0xba
 800fc0e:	f001 fcab 	bl	8011568 <__assert_func>
 800fc12:	6922      	ldr	r2, [r4, #16]
 800fc14:	3202      	adds	r2, #2
 800fc16:	f104 010c 	add.w	r1, r4, #12
 800fc1a:	0092      	lsls	r2, r2, #2
 800fc1c:	300c      	adds	r0, #12
 800fc1e:	f001 fc8b 	bl	8011538 <memcpy>
 800fc22:	4621      	mov	r1, r4
 800fc24:	4638      	mov	r0, r7
 800fc26:	f7ff ffa5 	bl	800fb74 <_Bfree>
 800fc2a:	4644      	mov	r4, r8
 800fc2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc30:	3501      	adds	r5, #1
 800fc32:	615e      	str	r6, [r3, #20]
 800fc34:	6125      	str	r5, [r4, #16]
 800fc36:	4620      	mov	r0, r4
 800fc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc3c:	0801236d 	.word	0x0801236d
 800fc40:	0801237e 	.word	0x0801237e

0800fc44 <__s2b>:
 800fc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc48:	460c      	mov	r4, r1
 800fc4a:	4615      	mov	r5, r2
 800fc4c:	461f      	mov	r7, r3
 800fc4e:	2209      	movs	r2, #9
 800fc50:	3308      	adds	r3, #8
 800fc52:	4606      	mov	r6, r0
 800fc54:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc58:	2100      	movs	r1, #0
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	db09      	blt.n	800fc74 <__s2b+0x30>
 800fc60:	4630      	mov	r0, r6
 800fc62:	f7ff ff47 	bl	800faf4 <_Balloc>
 800fc66:	b940      	cbnz	r0, 800fc7a <__s2b+0x36>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	4b19      	ldr	r3, [pc, #100]	@ (800fcd0 <__s2b+0x8c>)
 800fc6c:	4819      	ldr	r0, [pc, #100]	@ (800fcd4 <__s2b+0x90>)
 800fc6e:	21d3      	movs	r1, #211	@ 0xd3
 800fc70:	f001 fc7a 	bl	8011568 <__assert_func>
 800fc74:	0052      	lsls	r2, r2, #1
 800fc76:	3101      	adds	r1, #1
 800fc78:	e7f0      	b.n	800fc5c <__s2b+0x18>
 800fc7a:	9b08      	ldr	r3, [sp, #32]
 800fc7c:	6143      	str	r3, [r0, #20]
 800fc7e:	2d09      	cmp	r5, #9
 800fc80:	f04f 0301 	mov.w	r3, #1
 800fc84:	6103      	str	r3, [r0, #16]
 800fc86:	dd16      	ble.n	800fcb6 <__s2b+0x72>
 800fc88:	f104 0909 	add.w	r9, r4, #9
 800fc8c:	46c8      	mov	r8, r9
 800fc8e:	442c      	add	r4, r5
 800fc90:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc94:	4601      	mov	r1, r0
 800fc96:	3b30      	subs	r3, #48	@ 0x30
 800fc98:	220a      	movs	r2, #10
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	f7ff ff8c 	bl	800fbb8 <__multadd>
 800fca0:	45a0      	cmp	r8, r4
 800fca2:	d1f5      	bne.n	800fc90 <__s2b+0x4c>
 800fca4:	f1a5 0408 	sub.w	r4, r5, #8
 800fca8:	444c      	add	r4, r9
 800fcaa:	1b2d      	subs	r5, r5, r4
 800fcac:	1963      	adds	r3, r4, r5
 800fcae:	42bb      	cmp	r3, r7
 800fcb0:	db04      	blt.n	800fcbc <__s2b+0x78>
 800fcb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcb6:	340a      	adds	r4, #10
 800fcb8:	2509      	movs	r5, #9
 800fcba:	e7f6      	b.n	800fcaa <__s2b+0x66>
 800fcbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fcc0:	4601      	mov	r1, r0
 800fcc2:	3b30      	subs	r3, #48	@ 0x30
 800fcc4:	220a      	movs	r2, #10
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	f7ff ff76 	bl	800fbb8 <__multadd>
 800fccc:	e7ee      	b.n	800fcac <__s2b+0x68>
 800fcce:	bf00      	nop
 800fcd0:	0801236d 	.word	0x0801236d
 800fcd4:	0801237e 	.word	0x0801237e

0800fcd8 <__hi0bits>:
 800fcd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fcdc:	4603      	mov	r3, r0
 800fcde:	bf36      	itet	cc
 800fce0:	0403      	lslcc	r3, r0, #16
 800fce2:	2000      	movcs	r0, #0
 800fce4:	2010      	movcc	r0, #16
 800fce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fcea:	bf3c      	itt	cc
 800fcec:	021b      	lslcc	r3, r3, #8
 800fcee:	3008      	addcc	r0, #8
 800fcf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fcf4:	bf3c      	itt	cc
 800fcf6:	011b      	lslcc	r3, r3, #4
 800fcf8:	3004      	addcc	r0, #4
 800fcfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcfe:	bf3c      	itt	cc
 800fd00:	009b      	lslcc	r3, r3, #2
 800fd02:	3002      	addcc	r0, #2
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	db05      	blt.n	800fd14 <__hi0bits+0x3c>
 800fd08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd0c:	f100 0001 	add.w	r0, r0, #1
 800fd10:	bf08      	it	eq
 800fd12:	2020      	moveq	r0, #32
 800fd14:	4770      	bx	lr

0800fd16 <__lo0bits>:
 800fd16:	6803      	ldr	r3, [r0, #0]
 800fd18:	4602      	mov	r2, r0
 800fd1a:	f013 0007 	ands.w	r0, r3, #7
 800fd1e:	d00b      	beq.n	800fd38 <__lo0bits+0x22>
 800fd20:	07d9      	lsls	r1, r3, #31
 800fd22:	d421      	bmi.n	800fd68 <__lo0bits+0x52>
 800fd24:	0798      	lsls	r0, r3, #30
 800fd26:	bf49      	itett	mi
 800fd28:	085b      	lsrmi	r3, r3, #1
 800fd2a:	089b      	lsrpl	r3, r3, #2
 800fd2c:	2001      	movmi	r0, #1
 800fd2e:	6013      	strmi	r3, [r2, #0]
 800fd30:	bf5c      	itt	pl
 800fd32:	6013      	strpl	r3, [r2, #0]
 800fd34:	2002      	movpl	r0, #2
 800fd36:	4770      	bx	lr
 800fd38:	b299      	uxth	r1, r3
 800fd3a:	b909      	cbnz	r1, 800fd40 <__lo0bits+0x2a>
 800fd3c:	0c1b      	lsrs	r3, r3, #16
 800fd3e:	2010      	movs	r0, #16
 800fd40:	b2d9      	uxtb	r1, r3
 800fd42:	b909      	cbnz	r1, 800fd48 <__lo0bits+0x32>
 800fd44:	3008      	adds	r0, #8
 800fd46:	0a1b      	lsrs	r3, r3, #8
 800fd48:	0719      	lsls	r1, r3, #28
 800fd4a:	bf04      	itt	eq
 800fd4c:	091b      	lsreq	r3, r3, #4
 800fd4e:	3004      	addeq	r0, #4
 800fd50:	0799      	lsls	r1, r3, #30
 800fd52:	bf04      	itt	eq
 800fd54:	089b      	lsreq	r3, r3, #2
 800fd56:	3002      	addeq	r0, #2
 800fd58:	07d9      	lsls	r1, r3, #31
 800fd5a:	d403      	bmi.n	800fd64 <__lo0bits+0x4e>
 800fd5c:	085b      	lsrs	r3, r3, #1
 800fd5e:	f100 0001 	add.w	r0, r0, #1
 800fd62:	d003      	beq.n	800fd6c <__lo0bits+0x56>
 800fd64:	6013      	str	r3, [r2, #0]
 800fd66:	4770      	bx	lr
 800fd68:	2000      	movs	r0, #0
 800fd6a:	4770      	bx	lr
 800fd6c:	2020      	movs	r0, #32
 800fd6e:	4770      	bx	lr

0800fd70 <__i2b>:
 800fd70:	b510      	push	{r4, lr}
 800fd72:	460c      	mov	r4, r1
 800fd74:	2101      	movs	r1, #1
 800fd76:	f7ff febd 	bl	800faf4 <_Balloc>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	b928      	cbnz	r0, 800fd8a <__i2b+0x1a>
 800fd7e:	4b05      	ldr	r3, [pc, #20]	@ (800fd94 <__i2b+0x24>)
 800fd80:	4805      	ldr	r0, [pc, #20]	@ (800fd98 <__i2b+0x28>)
 800fd82:	f240 1145 	movw	r1, #325	@ 0x145
 800fd86:	f001 fbef 	bl	8011568 <__assert_func>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	6144      	str	r4, [r0, #20]
 800fd8e:	6103      	str	r3, [r0, #16]
 800fd90:	bd10      	pop	{r4, pc}
 800fd92:	bf00      	nop
 800fd94:	0801236d 	.word	0x0801236d
 800fd98:	0801237e 	.word	0x0801237e

0800fd9c <__multiply>:
 800fd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda0:	4614      	mov	r4, r2
 800fda2:	690a      	ldr	r2, [r1, #16]
 800fda4:	6923      	ldr	r3, [r4, #16]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	bfa8      	it	ge
 800fdaa:	4623      	movge	r3, r4
 800fdac:	460f      	mov	r7, r1
 800fdae:	bfa4      	itt	ge
 800fdb0:	460c      	movge	r4, r1
 800fdb2:	461f      	movge	r7, r3
 800fdb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fdb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fdbc:	68a3      	ldr	r3, [r4, #8]
 800fdbe:	6861      	ldr	r1, [r4, #4]
 800fdc0:	eb0a 0609 	add.w	r6, sl, r9
 800fdc4:	42b3      	cmp	r3, r6
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	bfb8      	it	lt
 800fdca:	3101      	addlt	r1, #1
 800fdcc:	f7ff fe92 	bl	800faf4 <_Balloc>
 800fdd0:	b930      	cbnz	r0, 800fde0 <__multiply+0x44>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	4b44      	ldr	r3, [pc, #272]	@ (800fee8 <__multiply+0x14c>)
 800fdd6:	4845      	ldr	r0, [pc, #276]	@ (800feec <__multiply+0x150>)
 800fdd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fddc:	f001 fbc4 	bl	8011568 <__assert_func>
 800fde0:	f100 0514 	add.w	r5, r0, #20
 800fde4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fde8:	462b      	mov	r3, r5
 800fdea:	2200      	movs	r2, #0
 800fdec:	4543      	cmp	r3, r8
 800fdee:	d321      	bcc.n	800fe34 <__multiply+0x98>
 800fdf0:	f107 0114 	add.w	r1, r7, #20
 800fdf4:	f104 0214 	add.w	r2, r4, #20
 800fdf8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fdfc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fe00:	9302      	str	r3, [sp, #8]
 800fe02:	1b13      	subs	r3, r2, r4
 800fe04:	3b15      	subs	r3, #21
 800fe06:	f023 0303 	bic.w	r3, r3, #3
 800fe0a:	3304      	adds	r3, #4
 800fe0c:	f104 0715 	add.w	r7, r4, #21
 800fe10:	42ba      	cmp	r2, r7
 800fe12:	bf38      	it	cc
 800fe14:	2304      	movcc	r3, #4
 800fe16:	9301      	str	r3, [sp, #4]
 800fe18:	9b02      	ldr	r3, [sp, #8]
 800fe1a:	9103      	str	r1, [sp, #12]
 800fe1c:	428b      	cmp	r3, r1
 800fe1e:	d80c      	bhi.n	800fe3a <__multiply+0x9e>
 800fe20:	2e00      	cmp	r6, #0
 800fe22:	dd03      	ble.n	800fe2c <__multiply+0x90>
 800fe24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d05b      	beq.n	800fee4 <__multiply+0x148>
 800fe2c:	6106      	str	r6, [r0, #16]
 800fe2e:	b005      	add	sp, #20
 800fe30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe34:	f843 2b04 	str.w	r2, [r3], #4
 800fe38:	e7d8      	b.n	800fdec <__multiply+0x50>
 800fe3a:	f8b1 a000 	ldrh.w	sl, [r1]
 800fe3e:	f1ba 0f00 	cmp.w	sl, #0
 800fe42:	d024      	beq.n	800fe8e <__multiply+0xf2>
 800fe44:	f104 0e14 	add.w	lr, r4, #20
 800fe48:	46a9      	mov	r9, r5
 800fe4a:	f04f 0c00 	mov.w	ip, #0
 800fe4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe52:	f8d9 3000 	ldr.w	r3, [r9]
 800fe56:	fa1f fb87 	uxth.w	fp, r7
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	fb0a 330b 	mla	r3, sl, fp, r3
 800fe60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fe64:	f8d9 7000 	ldr.w	r7, [r9]
 800fe68:	4463      	add	r3, ip
 800fe6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe6e:	fb0a c70b 	mla	r7, sl, fp, ip
 800fe72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe7c:	4572      	cmp	r2, lr
 800fe7e:	f849 3b04 	str.w	r3, [r9], #4
 800fe82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe86:	d8e2      	bhi.n	800fe4e <__multiply+0xb2>
 800fe88:	9b01      	ldr	r3, [sp, #4]
 800fe8a:	f845 c003 	str.w	ip, [r5, r3]
 800fe8e:	9b03      	ldr	r3, [sp, #12]
 800fe90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe94:	3104      	adds	r1, #4
 800fe96:	f1b9 0f00 	cmp.w	r9, #0
 800fe9a:	d021      	beq.n	800fee0 <__multiply+0x144>
 800fe9c:	682b      	ldr	r3, [r5, #0]
 800fe9e:	f104 0c14 	add.w	ip, r4, #20
 800fea2:	46ae      	mov	lr, r5
 800fea4:	f04f 0a00 	mov.w	sl, #0
 800fea8:	f8bc b000 	ldrh.w	fp, [ip]
 800feac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800feb0:	fb09 770b 	mla	r7, r9, fp, r7
 800feb4:	4457      	add	r7, sl
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800febc:	f84e 3b04 	str.w	r3, [lr], #4
 800fec0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fec4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fec8:	f8be 3000 	ldrh.w	r3, [lr]
 800fecc:	fb09 330a 	mla	r3, r9, sl, r3
 800fed0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fed4:	4562      	cmp	r2, ip
 800fed6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800feda:	d8e5      	bhi.n	800fea8 <__multiply+0x10c>
 800fedc:	9f01      	ldr	r7, [sp, #4]
 800fede:	51eb      	str	r3, [r5, r7]
 800fee0:	3504      	adds	r5, #4
 800fee2:	e799      	b.n	800fe18 <__multiply+0x7c>
 800fee4:	3e01      	subs	r6, #1
 800fee6:	e79b      	b.n	800fe20 <__multiply+0x84>
 800fee8:	0801236d 	.word	0x0801236d
 800feec:	0801237e 	.word	0x0801237e

0800fef0 <__pow5mult>:
 800fef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef4:	4615      	mov	r5, r2
 800fef6:	f012 0203 	ands.w	r2, r2, #3
 800fefa:	4607      	mov	r7, r0
 800fefc:	460e      	mov	r6, r1
 800fefe:	d007      	beq.n	800ff10 <__pow5mult+0x20>
 800ff00:	4c25      	ldr	r4, [pc, #148]	@ (800ff98 <__pow5mult+0xa8>)
 800ff02:	3a01      	subs	r2, #1
 800ff04:	2300      	movs	r3, #0
 800ff06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff0a:	f7ff fe55 	bl	800fbb8 <__multadd>
 800ff0e:	4606      	mov	r6, r0
 800ff10:	10ad      	asrs	r5, r5, #2
 800ff12:	d03d      	beq.n	800ff90 <__pow5mult+0xa0>
 800ff14:	69fc      	ldr	r4, [r7, #28]
 800ff16:	b97c      	cbnz	r4, 800ff38 <__pow5mult+0x48>
 800ff18:	2010      	movs	r0, #16
 800ff1a:	f7ff fd35 	bl	800f988 <malloc>
 800ff1e:	4602      	mov	r2, r0
 800ff20:	61f8      	str	r0, [r7, #28]
 800ff22:	b928      	cbnz	r0, 800ff30 <__pow5mult+0x40>
 800ff24:	4b1d      	ldr	r3, [pc, #116]	@ (800ff9c <__pow5mult+0xac>)
 800ff26:	481e      	ldr	r0, [pc, #120]	@ (800ffa0 <__pow5mult+0xb0>)
 800ff28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ff2c:	f001 fb1c 	bl	8011568 <__assert_func>
 800ff30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff34:	6004      	str	r4, [r0, #0]
 800ff36:	60c4      	str	r4, [r0, #12]
 800ff38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ff3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff40:	b94c      	cbnz	r4, 800ff56 <__pow5mult+0x66>
 800ff42:	f240 2171 	movw	r1, #625	@ 0x271
 800ff46:	4638      	mov	r0, r7
 800ff48:	f7ff ff12 	bl	800fd70 <__i2b>
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff52:	4604      	mov	r4, r0
 800ff54:	6003      	str	r3, [r0, #0]
 800ff56:	f04f 0900 	mov.w	r9, #0
 800ff5a:	07eb      	lsls	r3, r5, #31
 800ff5c:	d50a      	bpl.n	800ff74 <__pow5mult+0x84>
 800ff5e:	4631      	mov	r1, r6
 800ff60:	4622      	mov	r2, r4
 800ff62:	4638      	mov	r0, r7
 800ff64:	f7ff ff1a 	bl	800fd9c <__multiply>
 800ff68:	4631      	mov	r1, r6
 800ff6a:	4680      	mov	r8, r0
 800ff6c:	4638      	mov	r0, r7
 800ff6e:	f7ff fe01 	bl	800fb74 <_Bfree>
 800ff72:	4646      	mov	r6, r8
 800ff74:	106d      	asrs	r5, r5, #1
 800ff76:	d00b      	beq.n	800ff90 <__pow5mult+0xa0>
 800ff78:	6820      	ldr	r0, [r4, #0]
 800ff7a:	b938      	cbnz	r0, 800ff8c <__pow5mult+0x9c>
 800ff7c:	4622      	mov	r2, r4
 800ff7e:	4621      	mov	r1, r4
 800ff80:	4638      	mov	r0, r7
 800ff82:	f7ff ff0b 	bl	800fd9c <__multiply>
 800ff86:	6020      	str	r0, [r4, #0]
 800ff88:	f8c0 9000 	str.w	r9, [r0]
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	e7e4      	b.n	800ff5a <__pow5mult+0x6a>
 800ff90:	4630      	mov	r0, r6
 800ff92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff96:	bf00      	nop
 800ff98:	080123d8 	.word	0x080123d8
 800ff9c:	080122fe 	.word	0x080122fe
 800ffa0:	0801237e 	.word	0x0801237e

0800ffa4 <__lshift>:
 800ffa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa8:	460c      	mov	r4, r1
 800ffaa:	6849      	ldr	r1, [r1, #4]
 800ffac:	6923      	ldr	r3, [r4, #16]
 800ffae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ffb2:	68a3      	ldr	r3, [r4, #8]
 800ffb4:	4607      	mov	r7, r0
 800ffb6:	4691      	mov	r9, r2
 800ffb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ffbc:	f108 0601 	add.w	r6, r8, #1
 800ffc0:	42b3      	cmp	r3, r6
 800ffc2:	db0b      	blt.n	800ffdc <__lshift+0x38>
 800ffc4:	4638      	mov	r0, r7
 800ffc6:	f7ff fd95 	bl	800faf4 <_Balloc>
 800ffca:	4605      	mov	r5, r0
 800ffcc:	b948      	cbnz	r0, 800ffe2 <__lshift+0x3e>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	4b28      	ldr	r3, [pc, #160]	@ (8010074 <__lshift+0xd0>)
 800ffd2:	4829      	ldr	r0, [pc, #164]	@ (8010078 <__lshift+0xd4>)
 800ffd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ffd8:	f001 fac6 	bl	8011568 <__assert_func>
 800ffdc:	3101      	adds	r1, #1
 800ffde:	005b      	lsls	r3, r3, #1
 800ffe0:	e7ee      	b.n	800ffc0 <__lshift+0x1c>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	f100 0114 	add.w	r1, r0, #20
 800ffe8:	f100 0210 	add.w	r2, r0, #16
 800ffec:	4618      	mov	r0, r3
 800ffee:	4553      	cmp	r3, sl
 800fff0:	db33      	blt.n	801005a <__lshift+0xb6>
 800fff2:	6920      	ldr	r0, [r4, #16]
 800fff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fff8:	f104 0314 	add.w	r3, r4, #20
 800fffc:	f019 091f 	ands.w	r9, r9, #31
 8010000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010004:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010008:	d02b      	beq.n	8010062 <__lshift+0xbe>
 801000a:	f1c9 0e20 	rsb	lr, r9, #32
 801000e:	468a      	mov	sl, r1
 8010010:	2200      	movs	r2, #0
 8010012:	6818      	ldr	r0, [r3, #0]
 8010014:	fa00 f009 	lsl.w	r0, r0, r9
 8010018:	4310      	orrs	r0, r2
 801001a:	f84a 0b04 	str.w	r0, [sl], #4
 801001e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010022:	459c      	cmp	ip, r3
 8010024:	fa22 f20e 	lsr.w	r2, r2, lr
 8010028:	d8f3      	bhi.n	8010012 <__lshift+0x6e>
 801002a:	ebac 0304 	sub.w	r3, ip, r4
 801002e:	3b15      	subs	r3, #21
 8010030:	f023 0303 	bic.w	r3, r3, #3
 8010034:	3304      	adds	r3, #4
 8010036:	f104 0015 	add.w	r0, r4, #21
 801003a:	4584      	cmp	ip, r0
 801003c:	bf38      	it	cc
 801003e:	2304      	movcc	r3, #4
 8010040:	50ca      	str	r2, [r1, r3]
 8010042:	b10a      	cbz	r2, 8010048 <__lshift+0xa4>
 8010044:	f108 0602 	add.w	r6, r8, #2
 8010048:	3e01      	subs	r6, #1
 801004a:	4638      	mov	r0, r7
 801004c:	612e      	str	r6, [r5, #16]
 801004e:	4621      	mov	r1, r4
 8010050:	f7ff fd90 	bl	800fb74 <_Bfree>
 8010054:	4628      	mov	r0, r5
 8010056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801005a:	f842 0f04 	str.w	r0, [r2, #4]!
 801005e:	3301      	adds	r3, #1
 8010060:	e7c5      	b.n	800ffee <__lshift+0x4a>
 8010062:	3904      	subs	r1, #4
 8010064:	f853 2b04 	ldr.w	r2, [r3], #4
 8010068:	f841 2f04 	str.w	r2, [r1, #4]!
 801006c:	459c      	cmp	ip, r3
 801006e:	d8f9      	bhi.n	8010064 <__lshift+0xc0>
 8010070:	e7ea      	b.n	8010048 <__lshift+0xa4>
 8010072:	bf00      	nop
 8010074:	0801236d 	.word	0x0801236d
 8010078:	0801237e 	.word	0x0801237e

0801007c <__mcmp>:
 801007c:	690a      	ldr	r2, [r1, #16]
 801007e:	4603      	mov	r3, r0
 8010080:	6900      	ldr	r0, [r0, #16]
 8010082:	1a80      	subs	r0, r0, r2
 8010084:	b530      	push	{r4, r5, lr}
 8010086:	d10e      	bne.n	80100a6 <__mcmp+0x2a>
 8010088:	3314      	adds	r3, #20
 801008a:	3114      	adds	r1, #20
 801008c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010090:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010094:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010098:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801009c:	4295      	cmp	r5, r2
 801009e:	d003      	beq.n	80100a8 <__mcmp+0x2c>
 80100a0:	d205      	bcs.n	80100ae <__mcmp+0x32>
 80100a2:	f04f 30ff 	mov.w	r0, #4294967295
 80100a6:	bd30      	pop	{r4, r5, pc}
 80100a8:	42a3      	cmp	r3, r4
 80100aa:	d3f3      	bcc.n	8010094 <__mcmp+0x18>
 80100ac:	e7fb      	b.n	80100a6 <__mcmp+0x2a>
 80100ae:	2001      	movs	r0, #1
 80100b0:	e7f9      	b.n	80100a6 <__mcmp+0x2a>
	...

080100b4 <__mdiff>:
 80100b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b8:	4689      	mov	r9, r1
 80100ba:	4606      	mov	r6, r0
 80100bc:	4611      	mov	r1, r2
 80100be:	4648      	mov	r0, r9
 80100c0:	4614      	mov	r4, r2
 80100c2:	f7ff ffdb 	bl	801007c <__mcmp>
 80100c6:	1e05      	subs	r5, r0, #0
 80100c8:	d112      	bne.n	80100f0 <__mdiff+0x3c>
 80100ca:	4629      	mov	r1, r5
 80100cc:	4630      	mov	r0, r6
 80100ce:	f7ff fd11 	bl	800faf4 <_Balloc>
 80100d2:	4602      	mov	r2, r0
 80100d4:	b928      	cbnz	r0, 80100e2 <__mdiff+0x2e>
 80100d6:	4b3f      	ldr	r3, [pc, #252]	@ (80101d4 <__mdiff+0x120>)
 80100d8:	f240 2137 	movw	r1, #567	@ 0x237
 80100dc:	483e      	ldr	r0, [pc, #248]	@ (80101d8 <__mdiff+0x124>)
 80100de:	f001 fa43 	bl	8011568 <__assert_func>
 80100e2:	2301      	movs	r3, #1
 80100e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80100e8:	4610      	mov	r0, r2
 80100ea:	b003      	add	sp, #12
 80100ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f0:	bfbc      	itt	lt
 80100f2:	464b      	movlt	r3, r9
 80100f4:	46a1      	movlt	r9, r4
 80100f6:	4630      	mov	r0, r6
 80100f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80100fc:	bfba      	itte	lt
 80100fe:	461c      	movlt	r4, r3
 8010100:	2501      	movlt	r5, #1
 8010102:	2500      	movge	r5, #0
 8010104:	f7ff fcf6 	bl	800faf4 <_Balloc>
 8010108:	4602      	mov	r2, r0
 801010a:	b918      	cbnz	r0, 8010114 <__mdiff+0x60>
 801010c:	4b31      	ldr	r3, [pc, #196]	@ (80101d4 <__mdiff+0x120>)
 801010e:	f240 2145 	movw	r1, #581	@ 0x245
 8010112:	e7e3      	b.n	80100dc <__mdiff+0x28>
 8010114:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010118:	6926      	ldr	r6, [r4, #16]
 801011a:	60c5      	str	r5, [r0, #12]
 801011c:	f109 0310 	add.w	r3, r9, #16
 8010120:	f109 0514 	add.w	r5, r9, #20
 8010124:	f104 0e14 	add.w	lr, r4, #20
 8010128:	f100 0b14 	add.w	fp, r0, #20
 801012c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010130:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010134:	9301      	str	r3, [sp, #4]
 8010136:	46d9      	mov	r9, fp
 8010138:	f04f 0c00 	mov.w	ip, #0
 801013c:	9b01      	ldr	r3, [sp, #4]
 801013e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010142:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010146:	9301      	str	r3, [sp, #4]
 8010148:	fa1f f38a 	uxth.w	r3, sl
 801014c:	4619      	mov	r1, r3
 801014e:	b283      	uxth	r3, r0
 8010150:	1acb      	subs	r3, r1, r3
 8010152:	0c00      	lsrs	r0, r0, #16
 8010154:	4463      	add	r3, ip
 8010156:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801015a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801015e:	b29b      	uxth	r3, r3
 8010160:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010164:	4576      	cmp	r6, lr
 8010166:	f849 3b04 	str.w	r3, [r9], #4
 801016a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801016e:	d8e5      	bhi.n	801013c <__mdiff+0x88>
 8010170:	1b33      	subs	r3, r6, r4
 8010172:	3b15      	subs	r3, #21
 8010174:	f023 0303 	bic.w	r3, r3, #3
 8010178:	3415      	adds	r4, #21
 801017a:	3304      	adds	r3, #4
 801017c:	42a6      	cmp	r6, r4
 801017e:	bf38      	it	cc
 8010180:	2304      	movcc	r3, #4
 8010182:	441d      	add	r5, r3
 8010184:	445b      	add	r3, fp
 8010186:	461e      	mov	r6, r3
 8010188:	462c      	mov	r4, r5
 801018a:	4544      	cmp	r4, r8
 801018c:	d30e      	bcc.n	80101ac <__mdiff+0xf8>
 801018e:	f108 0103 	add.w	r1, r8, #3
 8010192:	1b49      	subs	r1, r1, r5
 8010194:	f021 0103 	bic.w	r1, r1, #3
 8010198:	3d03      	subs	r5, #3
 801019a:	45a8      	cmp	r8, r5
 801019c:	bf38      	it	cc
 801019e:	2100      	movcc	r1, #0
 80101a0:	440b      	add	r3, r1
 80101a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101a6:	b191      	cbz	r1, 80101ce <__mdiff+0x11a>
 80101a8:	6117      	str	r7, [r2, #16]
 80101aa:	e79d      	b.n	80100e8 <__mdiff+0x34>
 80101ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80101b0:	46e6      	mov	lr, ip
 80101b2:	0c08      	lsrs	r0, r1, #16
 80101b4:	fa1c fc81 	uxtah	ip, ip, r1
 80101b8:	4471      	add	r1, lr
 80101ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80101be:	b289      	uxth	r1, r1
 80101c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80101c4:	f846 1b04 	str.w	r1, [r6], #4
 80101c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101cc:	e7dd      	b.n	801018a <__mdiff+0xd6>
 80101ce:	3f01      	subs	r7, #1
 80101d0:	e7e7      	b.n	80101a2 <__mdiff+0xee>
 80101d2:	bf00      	nop
 80101d4:	0801236d 	.word	0x0801236d
 80101d8:	0801237e 	.word	0x0801237e

080101dc <__ulp>:
 80101dc:	b082      	sub	sp, #8
 80101de:	ed8d 0b00 	vstr	d0, [sp]
 80101e2:	9a01      	ldr	r2, [sp, #4]
 80101e4:	4b0f      	ldr	r3, [pc, #60]	@ (8010224 <__ulp+0x48>)
 80101e6:	4013      	ands	r3, r2
 80101e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	dc08      	bgt.n	8010202 <__ulp+0x26>
 80101f0:	425b      	negs	r3, r3
 80101f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80101f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80101fa:	da04      	bge.n	8010206 <__ulp+0x2a>
 80101fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010200:	4113      	asrs	r3, r2
 8010202:	2200      	movs	r2, #0
 8010204:	e008      	b.n	8010218 <__ulp+0x3c>
 8010206:	f1a2 0314 	sub.w	r3, r2, #20
 801020a:	2b1e      	cmp	r3, #30
 801020c:	bfda      	itte	le
 801020e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010212:	40da      	lsrle	r2, r3
 8010214:	2201      	movgt	r2, #1
 8010216:	2300      	movs	r3, #0
 8010218:	4619      	mov	r1, r3
 801021a:	4610      	mov	r0, r2
 801021c:	ec41 0b10 	vmov	d0, r0, r1
 8010220:	b002      	add	sp, #8
 8010222:	4770      	bx	lr
 8010224:	7ff00000 	.word	0x7ff00000

08010228 <__b2d>:
 8010228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801022c:	6906      	ldr	r6, [r0, #16]
 801022e:	f100 0814 	add.w	r8, r0, #20
 8010232:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010236:	1f37      	subs	r7, r6, #4
 8010238:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801023c:	4610      	mov	r0, r2
 801023e:	f7ff fd4b 	bl	800fcd8 <__hi0bits>
 8010242:	f1c0 0320 	rsb	r3, r0, #32
 8010246:	280a      	cmp	r0, #10
 8010248:	600b      	str	r3, [r1, #0]
 801024a:	491b      	ldr	r1, [pc, #108]	@ (80102b8 <__b2d+0x90>)
 801024c:	dc15      	bgt.n	801027a <__b2d+0x52>
 801024e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010252:	fa22 f30c 	lsr.w	r3, r2, ip
 8010256:	45b8      	cmp	r8, r7
 8010258:	ea43 0501 	orr.w	r5, r3, r1
 801025c:	bf34      	ite	cc
 801025e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010262:	2300      	movcs	r3, #0
 8010264:	3015      	adds	r0, #21
 8010266:	fa02 f000 	lsl.w	r0, r2, r0
 801026a:	fa23 f30c 	lsr.w	r3, r3, ip
 801026e:	4303      	orrs	r3, r0
 8010270:	461c      	mov	r4, r3
 8010272:	ec45 4b10 	vmov	d0, r4, r5
 8010276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801027a:	45b8      	cmp	r8, r7
 801027c:	bf3a      	itte	cc
 801027e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010282:	f1a6 0708 	subcc.w	r7, r6, #8
 8010286:	2300      	movcs	r3, #0
 8010288:	380b      	subs	r0, #11
 801028a:	d012      	beq.n	80102b2 <__b2d+0x8a>
 801028c:	f1c0 0120 	rsb	r1, r0, #32
 8010290:	fa23 f401 	lsr.w	r4, r3, r1
 8010294:	4082      	lsls	r2, r0
 8010296:	4322      	orrs	r2, r4
 8010298:	4547      	cmp	r7, r8
 801029a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801029e:	bf8c      	ite	hi
 80102a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80102a4:	2200      	movls	r2, #0
 80102a6:	4083      	lsls	r3, r0
 80102a8:	40ca      	lsrs	r2, r1
 80102aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80102ae:	4313      	orrs	r3, r2
 80102b0:	e7de      	b.n	8010270 <__b2d+0x48>
 80102b2:	ea42 0501 	orr.w	r5, r2, r1
 80102b6:	e7db      	b.n	8010270 <__b2d+0x48>
 80102b8:	3ff00000 	.word	0x3ff00000

080102bc <__d2b>:
 80102bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80102c0:	460f      	mov	r7, r1
 80102c2:	2101      	movs	r1, #1
 80102c4:	ec59 8b10 	vmov	r8, r9, d0
 80102c8:	4616      	mov	r6, r2
 80102ca:	f7ff fc13 	bl	800faf4 <_Balloc>
 80102ce:	4604      	mov	r4, r0
 80102d0:	b930      	cbnz	r0, 80102e0 <__d2b+0x24>
 80102d2:	4602      	mov	r2, r0
 80102d4:	4b23      	ldr	r3, [pc, #140]	@ (8010364 <__d2b+0xa8>)
 80102d6:	4824      	ldr	r0, [pc, #144]	@ (8010368 <__d2b+0xac>)
 80102d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80102dc:	f001 f944 	bl	8011568 <__assert_func>
 80102e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80102e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80102e8:	b10d      	cbz	r5, 80102ee <__d2b+0x32>
 80102ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80102ee:	9301      	str	r3, [sp, #4]
 80102f0:	f1b8 0300 	subs.w	r3, r8, #0
 80102f4:	d023      	beq.n	801033e <__d2b+0x82>
 80102f6:	4668      	mov	r0, sp
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	f7ff fd0c 	bl	800fd16 <__lo0bits>
 80102fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010302:	b1d0      	cbz	r0, 801033a <__d2b+0x7e>
 8010304:	f1c0 0320 	rsb	r3, r0, #32
 8010308:	fa02 f303 	lsl.w	r3, r2, r3
 801030c:	430b      	orrs	r3, r1
 801030e:	40c2      	lsrs	r2, r0
 8010310:	6163      	str	r3, [r4, #20]
 8010312:	9201      	str	r2, [sp, #4]
 8010314:	9b01      	ldr	r3, [sp, #4]
 8010316:	61a3      	str	r3, [r4, #24]
 8010318:	2b00      	cmp	r3, #0
 801031a:	bf0c      	ite	eq
 801031c:	2201      	moveq	r2, #1
 801031e:	2202      	movne	r2, #2
 8010320:	6122      	str	r2, [r4, #16]
 8010322:	b1a5      	cbz	r5, 801034e <__d2b+0x92>
 8010324:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010328:	4405      	add	r5, r0
 801032a:	603d      	str	r5, [r7, #0]
 801032c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010330:	6030      	str	r0, [r6, #0]
 8010332:	4620      	mov	r0, r4
 8010334:	b003      	add	sp, #12
 8010336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801033a:	6161      	str	r1, [r4, #20]
 801033c:	e7ea      	b.n	8010314 <__d2b+0x58>
 801033e:	a801      	add	r0, sp, #4
 8010340:	f7ff fce9 	bl	800fd16 <__lo0bits>
 8010344:	9b01      	ldr	r3, [sp, #4]
 8010346:	6163      	str	r3, [r4, #20]
 8010348:	3020      	adds	r0, #32
 801034a:	2201      	movs	r2, #1
 801034c:	e7e8      	b.n	8010320 <__d2b+0x64>
 801034e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010352:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010356:	6038      	str	r0, [r7, #0]
 8010358:	6918      	ldr	r0, [r3, #16]
 801035a:	f7ff fcbd 	bl	800fcd8 <__hi0bits>
 801035e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010362:	e7e5      	b.n	8010330 <__d2b+0x74>
 8010364:	0801236d 	.word	0x0801236d
 8010368:	0801237e 	.word	0x0801237e

0801036c <__ratio>:
 801036c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010370:	4688      	mov	r8, r1
 8010372:	4669      	mov	r1, sp
 8010374:	4681      	mov	r9, r0
 8010376:	f7ff ff57 	bl	8010228 <__b2d>
 801037a:	a901      	add	r1, sp, #4
 801037c:	4640      	mov	r0, r8
 801037e:	ec55 4b10 	vmov	r4, r5, d0
 8010382:	f7ff ff51 	bl	8010228 <__b2d>
 8010386:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801038a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801038e:	1ad2      	subs	r2, r2, r3
 8010390:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010394:	1a5b      	subs	r3, r3, r1
 8010396:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801039a:	ec57 6b10 	vmov	r6, r7, d0
 801039e:	2b00      	cmp	r3, #0
 80103a0:	bfd6      	itet	le
 80103a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80103a6:	462a      	movgt	r2, r5
 80103a8:	463a      	movle	r2, r7
 80103aa:	46ab      	mov	fp, r5
 80103ac:	46a2      	mov	sl, r4
 80103ae:	bfce      	itee	gt
 80103b0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80103b4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80103b8:	ee00 3a90 	vmovle	s1, r3
 80103bc:	ec4b ab17 	vmov	d7, sl, fp
 80103c0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80103c4:	b003      	add	sp, #12
 80103c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103ca <__copybits>:
 80103ca:	3901      	subs	r1, #1
 80103cc:	b570      	push	{r4, r5, r6, lr}
 80103ce:	1149      	asrs	r1, r1, #5
 80103d0:	6914      	ldr	r4, [r2, #16]
 80103d2:	3101      	adds	r1, #1
 80103d4:	f102 0314 	add.w	r3, r2, #20
 80103d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80103dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80103e0:	1f05      	subs	r5, r0, #4
 80103e2:	42a3      	cmp	r3, r4
 80103e4:	d30c      	bcc.n	8010400 <__copybits+0x36>
 80103e6:	1aa3      	subs	r3, r4, r2
 80103e8:	3b11      	subs	r3, #17
 80103ea:	f023 0303 	bic.w	r3, r3, #3
 80103ee:	3211      	adds	r2, #17
 80103f0:	42a2      	cmp	r2, r4
 80103f2:	bf88      	it	hi
 80103f4:	2300      	movhi	r3, #0
 80103f6:	4418      	add	r0, r3
 80103f8:	2300      	movs	r3, #0
 80103fa:	4288      	cmp	r0, r1
 80103fc:	d305      	bcc.n	801040a <__copybits+0x40>
 80103fe:	bd70      	pop	{r4, r5, r6, pc}
 8010400:	f853 6b04 	ldr.w	r6, [r3], #4
 8010404:	f845 6f04 	str.w	r6, [r5, #4]!
 8010408:	e7eb      	b.n	80103e2 <__copybits+0x18>
 801040a:	f840 3b04 	str.w	r3, [r0], #4
 801040e:	e7f4      	b.n	80103fa <__copybits+0x30>

08010410 <__any_on>:
 8010410:	f100 0214 	add.w	r2, r0, #20
 8010414:	6900      	ldr	r0, [r0, #16]
 8010416:	114b      	asrs	r3, r1, #5
 8010418:	4298      	cmp	r0, r3
 801041a:	b510      	push	{r4, lr}
 801041c:	db11      	blt.n	8010442 <__any_on+0x32>
 801041e:	dd0a      	ble.n	8010436 <__any_on+0x26>
 8010420:	f011 011f 	ands.w	r1, r1, #31
 8010424:	d007      	beq.n	8010436 <__any_on+0x26>
 8010426:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801042a:	fa24 f001 	lsr.w	r0, r4, r1
 801042e:	fa00 f101 	lsl.w	r1, r0, r1
 8010432:	428c      	cmp	r4, r1
 8010434:	d10b      	bne.n	801044e <__any_on+0x3e>
 8010436:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801043a:	4293      	cmp	r3, r2
 801043c:	d803      	bhi.n	8010446 <__any_on+0x36>
 801043e:	2000      	movs	r0, #0
 8010440:	bd10      	pop	{r4, pc}
 8010442:	4603      	mov	r3, r0
 8010444:	e7f7      	b.n	8010436 <__any_on+0x26>
 8010446:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801044a:	2900      	cmp	r1, #0
 801044c:	d0f5      	beq.n	801043a <__any_on+0x2a>
 801044e:	2001      	movs	r0, #1
 8010450:	e7f6      	b.n	8010440 <__any_on+0x30>

08010452 <sulp>:
 8010452:	b570      	push	{r4, r5, r6, lr}
 8010454:	4604      	mov	r4, r0
 8010456:	460d      	mov	r5, r1
 8010458:	4616      	mov	r6, r2
 801045a:	ec45 4b10 	vmov	d0, r4, r5
 801045e:	f7ff febd 	bl	80101dc <__ulp>
 8010462:	b17e      	cbz	r6, 8010484 <sulp+0x32>
 8010464:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010468:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801046c:	2b00      	cmp	r3, #0
 801046e:	dd09      	ble.n	8010484 <sulp+0x32>
 8010470:	051b      	lsls	r3, r3, #20
 8010472:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8010476:	2000      	movs	r0, #0
 8010478:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801047c:	ec41 0b17 	vmov	d7, r0, r1
 8010480:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010484:	bd70      	pop	{r4, r5, r6, pc}
	...

08010488 <_strtod_l>:
 8010488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801048c:	ed2d 8b0a 	vpush	{d8-d12}
 8010490:	b097      	sub	sp, #92	@ 0x5c
 8010492:	4688      	mov	r8, r1
 8010494:	920e      	str	r2, [sp, #56]	@ 0x38
 8010496:	2200      	movs	r2, #0
 8010498:	9212      	str	r2, [sp, #72]	@ 0x48
 801049a:	9005      	str	r0, [sp, #20]
 801049c:	f04f 0a00 	mov.w	sl, #0
 80104a0:	f04f 0b00 	mov.w	fp, #0
 80104a4:	460a      	mov	r2, r1
 80104a6:	9211      	str	r2, [sp, #68]	@ 0x44
 80104a8:	7811      	ldrb	r1, [r2, #0]
 80104aa:	292b      	cmp	r1, #43	@ 0x2b
 80104ac:	d04c      	beq.n	8010548 <_strtod_l+0xc0>
 80104ae:	d839      	bhi.n	8010524 <_strtod_l+0x9c>
 80104b0:	290d      	cmp	r1, #13
 80104b2:	d833      	bhi.n	801051c <_strtod_l+0x94>
 80104b4:	2908      	cmp	r1, #8
 80104b6:	d833      	bhi.n	8010520 <_strtod_l+0x98>
 80104b8:	2900      	cmp	r1, #0
 80104ba:	d03c      	beq.n	8010536 <_strtod_l+0xae>
 80104bc:	2200      	movs	r2, #0
 80104be:	9208      	str	r2, [sp, #32]
 80104c0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80104c2:	782a      	ldrb	r2, [r5, #0]
 80104c4:	2a30      	cmp	r2, #48	@ 0x30
 80104c6:	f040 80b5 	bne.w	8010634 <_strtod_l+0x1ac>
 80104ca:	786a      	ldrb	r2, [r5, #1]
 80104cc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80104d0:	2a58      	cmp	r2, #88	@ 0x58
 80104d2:	d170      	bne.n	80105b6 <_strtod_l+0x12e>
 80104d4:	9302      	str	r3, [sp, #8]
 80104d6:	9b08      	ldr	r3, [sp, #32]
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	ab12      	add	r3, sp, #72	@ 0x48
 80104dc:	9300      	str	r3, [sp, #0]
 80104de:	4a8b      	ldr	r2, [pc, #556]	@ (801070c <_strtod_l+0x284>)
 80104e0:	9805      	ldr	r0, [sp, #20]
 80104e2:	ab13      	add	r3, sp, #76	@ 0x4c
 80104e4:	a911      	add	r1, sp, #68	@ 0x44
 80104e6:	f001 f8d9 	bl	801169c <__gethex>
 80104ea:	f010 060f 	ands.w	r6, r0, #15
 80104ee:	4604      	mov	r4, r0
 80104f0:	d005      	beq.n	80104fe <_strtod_l+0x76>
 80104f2:	2e06      	cmp	r6, #6
 80104f4:	d12a      	bne.n	801054c <_strtod_l+0xc4>
 80104f6:	3501      	adds	r5, #1
 80104f8:	2300      	movs	r3, #0
 80104fa:	9511      	str	r5, [sp, #68]	@ 0x44
 80104fc:	9308      	str	r3, [sp, #32]
 80104fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010500:	2b00      	cmp	r3, #0
 8010502:	f040 852f 	bne.w	8010f64 <_strtod_l+0xadc>
 8010506:	9b08      	ldr	r3, [sp, #32]
 8010508:	ec4b ab10 	vmov	d0, sl, fp
 801050c:	b1cb      	cbz	r3, 8010542 <_strtod_l+0xba>
 801050e:	eeb1 0b40 	vneg.f64	d0, d0
 8010512:	b017      	add	sp, #92	@ 0x5c
 8010514:	ecbd 8b0a 	vpop	{d8-d12}
 8010518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801051c:	2920      	cmp	r1, #32
 801051e:	d1cd      	bne.n	80104bc <_strtod_l+0x34>
 8010520:	3201      	adds	r2, #1
 8010522:	e7c0      	b.n	80104a6 <_strtod_l+0x1e>
 8010524:	292d      	cmp	r1, #45	@ 0x2d
 8010526:	d1c9      	bne.n	80104bc <_strtod_l+0x34>
 8010528:	2101      	movs	r1, #1
 801052a:	9108      	str	r1, [sp, #32]
 801052c:	1c51      	adds	r1, r2, #1
 801052e:	9111      	str	r1, [sp, #68]	@ 0x44
 8010530:	7852      	ldrb	r2, [r2, #1]
 8010532:	2a00      	cmp	r2, #0
 8010534:	d1c4      	bne.n	80104c0 <_strtod_l+0x38>
 8010536:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010538:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801053c:	2b00      	cmp	r3, #0
 801053e:	f040 850f 	bne.w	8010f60 <_strtod_l+0xad8>
 8010542:	ec4b ab10 	vmov	d0, sl, fp
 8010546:	e7e4      	b.n	8010512 <_strtod_l+0x8a>
 8010548:	2100      	movs	r1, #0
 801054a:	e7ee      	b.n	801052a <_strtod_l+0xa2>
 801054c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801054e:	b13a      	cbz	r2, 8010560 <_strtod_l+0xd8>
 8010550:	2135      	movs	r1, #53	@ 0x35
 8010552:	a814      	add	r0, sp, #80	@ 0x50
 8010554:	f7ff ff39 	bl	80103ca <__copybits>
 8010558:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801055a:	9805      	ldr	r0, [sp, #20]
 801055c:	f7ff fb0a 	bl	800fb74 <_Bfree>
 8010560:	1e73      	subs	r3, r6, #1
 8010562:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010564:	2b04      	cmp	r3, #4
 8010566:	d806      	bhi.n	8010576 <_strtod_l+0xee>
 8010568:	e8df f003 	tbb	[pc, r3]
 801056c:	201d0314 	.word	0x201d0314
 8010570:	14          	.byte	0x14
 8010571:	00          	.byte	0x00
 8010572:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8010576:	05e3      	lsls	r3, r4, #23
 8010578:	bf48      	it	mi
 801057a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801057e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010582:	0d1b      	lsrs	r3, r3, #20
 8010584:	051b      	lsls	r3, r3, #20
 8010586:	2b00      	cmp	r3, #0
 8010588:	d1b9      	bne.n	80104fe <_strtod_l+0x76>
 801058a:	f7fe fba1 	bl	800ecd0 <__errno>
 801058e:	2322      	movs	r3, #34	@ 0x22
 8010590:	6003      	str	r3, [r0, #0]
 8010592:	e7b4      	b.n	80104fe <_strtod_l+0x76>
 8010594:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8010598:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801059c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80105a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80105a4:	e7e7      	b.n	8010576 <_strtod_l+0xee>
 80105a6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8010714 <_strtod_l+0x28c>
 80105aa:	e7e4      	b.n	8010576 <_strtod_l+0xee>
 80105ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80105b0:	f04f 3aff 	mov.w	sl, #4294967295
 80105b4:	e7df      	b.n	8010576 <_strtod_l+0xee>
 80105b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105b8:	1c5a      	adds	r2, r3, #1
 80105ba:	9211      	str	r2, [sp, #68]	@ 0x44
 80105bc:	785b      	ldrb	r3, [r3, #1]
 80105be:	2b30      	cmp	r3, #48	@ 0x30
 80105c0:	d0f9      	beq.n	80105b6 <_strtod_l+0x12e>
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d09b      	beq.n	80104fe <_strtod_l+0x76>
 80105c6:	2301      	movs	r3, #1
 80105c8:	2600      	movs	r6, #0
 80105ca:	9307      	str	r3, [sp, #28]
 80105cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80105d0:	46b1      	mov	r9, r6
 80105d2:	4635      	mov	r5, r6
 80105d4:	220a      	movs	r2, #10
 80105d6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80105d8:	7804      	ldrb	r4, [r0, #0]
 80105da:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80105de:	b2d9      	uxtb	r1, r3
 80105e0:	2909      	cmp	r1, #9
 80105e2:	d929      	bls.n	8010638 <_strtod_l+0x1b0>
 80105e4:	494a      	ldr	r1, [pc, #296]	@ (8010710 <_strtod_l+0x288>)
 80105e6:	2201      	movs	r2, #1
 80105e8:	f000 ff84 	bl	80114f4 <strncmp>
 80105ec:	b378      	cbz	r0, 801064e <_strtod_l+0x1c6>
 80105ee:	2000      	movs	r0, #0
 80105f0:	4622      	mov	r2, r4
 80105f2:	462b      	mov	r3, r5
 80105f4:	4607      	mov	r7, r0
 80105f6:	9006      	str	r0, [sp, #24]
 80105f8:	2a65      	cmp	r2, #101	@ 0x65
 80105fa:	d001      	beq.n	8010600 <_strtod_l+0x178>
 80105fc:	2a45      	cmp	r2, #69	@ 0x45
 80105fe:	d117      	bne.n	8010630 <_strtod_l+0x1a8>
 8010600:	b91b      	cbnz	r3, 801060a <_strtod_l+0x182>
 8010602:	9b07      	ldr	r3, [sp, #28]
 8010604:	4303      	orrs	r3, r0
 8010606:	d096      	beq.n	8010536 <_strtod_l+0xae>
 8010608:	2300      	movs	r3, #0
 801060a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801060e:	f108 0201 	add.w	r2, r8, #1
 8010612:	9211      	str	r2, [sp, #68]	@ 0x44
 8010614:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010618:	2a2b      	cmp	r2, #43	@ 0x2b
 801061a:	d06b      	beq.n	80106f4 <_strtod_l+0x26c>
 801061c:	2a2d      	cmp	r2, #45	@ 0x2d
 801061e:	d071      	beq.n	8010704 <_strtod_l+0x27c>
 8010620:	f04f 0e00 	mov.w	lr, #0
 8010624:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010628:	2c09      	cmp	r4, #9
 801062a:	d979      	bls.n	8010720 <_strtod_l+0x298>
 801062c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010630:	2400      	movs	r4, #0
 8010632:	e094      	b.n	801075e <_strtod_l+0x2d6>
 8010634:	2300      	movs	r3, #0
 8010636:	e7c7      	b.n	80105c8 <_strtod_l+0x140>
 8010638:	2d08      	cmp	r5, #8
 801063a:	f100 0001 	add.w	r0, r0, #1
 801063e:	bfd4      	ite	le
 8010640:	fb02 3909 	mlale	r9, r2, r9, r3
 8010644:	fb02 3606 	mlagt	r6, r2, r6, r3
 8010648:	3501      	adds	r5, #1
 801064a:	9011      	str	r0, [sp, #68]	@ 0x44
 801064c:	e7c3      	b.n	80105d6 <_strtod_l+0x14e>
 801064e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010650:	1c5a      	adds	r2, r3, #1
 8010652:	9211      	str	r2, [sp, #68]	@ 0x44
 8010654:	785a      	ldrb	r2, [r3, #1]
 8010656:	b375      	cbz	r5, 80106b6 <_strtod_l+0x22e>
 8010658:	4607      	mov	r7, r0
 801065a:	462b      	mov	r3, r5
 801065c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010660:	2909      	cmp	r1, #9
 8010662:	d913      	bls.n	801068c <_strtod_l+0x204>
 8010664:	2101      	movs	r1, #1
 8010666:	9106      	str	r1, [sp, #24]
 8010668:	e7c6      	b.n	80105f8 <_strtod_l+0x170>
 801066a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801066c:	1c5a      	adds	r2, r3, #1
 801066e:	9211      	str	r2, [sp, #68]	@ 0x44
 8010670:	785a      	ldrb	r2, [r3, #1]
 8010672:	3001      	adds	r0, #1
 8010674:	2a30      	cmp	r2, #48	@ 0x30
 8010676:	d0f8      	beq.n	801066a <_strtod_l+0x1e2>
 8010678:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801067c:	2b08      	cmp	r3, #8
 801067e:	f200 8476 	bhi.w	8010f6e <_strtod_l+0xae6>
 8010682:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010684:	930a      	str	r3, [sp, #40]	@ 0x28
 8010686:	4607      	mov	r7, r0
 8010688:	2000      	movs	r0, #0
 801068a:	4603      	mov	r3, r0
 801068c:	3a30      	subs	r2, #48	@ 0x30
 801068e:	f100 0101 	add.w	r1, r0, #1
 8010692:	d023      	beq.n	80106dc <_strtod_l+0x254>
 8010694:	440f      	add	r7, r1
 8010696:	eb00 0c03 	add.w	ip, r0, r3
 801069a:	4619      	mov	r1, r3
 801069c:	240a      	movs	r4, #10
 801069e:	4561      	cmp	r1, ip
 80106a0:	d10b      	bne.n	80106ba <_strtod_l+0x232>
 80106a2:	1c5c      	adds	r4, r3, #1
 80106a4:	4403      	add	r3, r0
 80106a6:	2b08      	cmp	r3, #8
 80106a8:	4404      	add	r4, r0
 80106aa:	dc11      	bgt.n	80106d0 <_strtod_l+0x248>
 80106ac:	230a      	movs	r3, #10
 80106ae:	fb03 2909 	mla	r9, r3, r9, r2
 80106b2:	2100      	movs	r1, #0
 80106b4:	e013      	b.n	80106de <_strtod_l+0x256>
 80106b6:	4628      	mov	r0, r5
 80106b8:	e7dc      	b.n	8010674 <_strtod_l+0x1ec>
 80106ba:	2908      	cmp	r1, #8
 80106bc:	f101 0101 	add.w	r1, r1, #1
 80106c0:	dc02      	bgt.n	80106c8 <_strtod_l+0x240>
 80106c2:	fb04 f909 	mul.w	r9, r4, r9
 80106c6:	e7ea      	b.n	801069e <_strtod_l+0x216>
 80106c8:	2910      	cmp	r1, #16
 80106ca:	bfd8      	it	le
 80106cc:	4366      	mulle	r6, r4
 80106ce:	e7e6      	b.n	801069e <_strtod_l+0x216>
 80106d0:	2b0f      	cmp	r3, #15
 80106d2:	dcee      	bgt.n	80106b2 <_strtod_l+0x22a>
 80106d4:	230a      	movs	r3, #10
 80106d6:	fb03 2606 	mla	r6, r3, r6, r2
 80106da:	e7ea      	b.n	80106b2 <_strtod_l+0x22a>
 80106dc:	461c      	mov	r4, r3
 80106de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80106e0:	1c5a      	adds	r2, r3, #1
 80106e2:	9211      	str	r2, [sp, #68]	@ 0x44
 80106e4:	785a      	ldrb	r2, [r3, #1]
 80106e6:	4608      	mov	r0, r1
 80106e8:	4623      	mov	r3, r4
 80106ea:	e7b7      	b.n	801065c <_strtod_l+0x1d4>
 80106ec:	2301      	movs	r3, #1
 80106ee:	2700      	movs	r7, #0
 80106f0:	9306      	str	r3, [sp, #24]
 80106f2:	e786      	b.n	8010602 <_strtod_l+0x17a>
 80106f4:	f04f 0e00 	mov.w	lr, #0
 80106f8:	f108 0202 	add.w	r2, r8, #2
 80106fc:	9211      	str	r2, [sp, #68]	@ 0x44
 80106fe:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010702:	e78f      	b.n	8010624 <_strtod_l+0x19c>
 8010704:	f04f 0e01 	mov.w	lr, #1
 8010708:	e7f6      	b.n	80106f8 <_strtod_l+0x270>
 801070a:	bf00      	nop
 801070c:	080124f0 	.word	0x080124f0
 8010710:	080124d8 	.word	0x080124d8
 8010714:	7ff00000 	.word	0x7ff00000
 8010718:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801071a:	1c54      	adds	r4, r2, #1
 801071c:	9411      	str	r4, [sp, #68]	@ 0x44
 801071e:	7852      	ldrb	r2, [r2, #1]
 8010720:	2a30      	cmp	r2, #48	@ 0x30
 8010722:	d0f9      	beq.n	8010718 <_strtod_l+0x290>
 8010724:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8010728:	2c08      	cmp	r4, #8
 801072a:	d881      	bhi.n	8010630 <_strtod_l+0x1a8>
 801072c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8010730:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010732:	9209      	str	r2, [sp, #36]	@ 0x24
 8010734:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010736:	1c51      	adds	r1, r2, #1
 8010738:	9111      	str	r1, [sp, #68]	@ 0x44
 801073a:	7852      	ldrb	r2, [r2, #1]
 801073c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010740:	2c09      	cmp	r4, #9
 8010742:	d938      	bls.n	80107b6 <_strtod_l+0x32e>
 8010744:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010746:	1b0c      	subs	r4, r1, r4
 8010748:	2c08      	cmp	r4, #8
 801074a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801074e:	dc02      	bgt.n	8010756 <_strtod_l+0x2ce>
 8010750:	4564      	cmp	r4, ip
 8010752:	bfa8      	it	ge
 8010754:	4664      	movge	r4, ip
 8010756:	f1be 0f00 	cmp.w	lr, #0
 801075a:	d000      	beq.n	801075e <_strtod_l+0x2d6>
 801075c:	4264      	negs	r4, r4
 801075e:	2b00      	cmp	r3, #0
 8010760:	d14e      	bne.n	8010800 <_strtod_l+0x378>
 8010762:	9b07      	ldr	r3, [sp, #28]
 8010764:	4318      	orrs	r0, r3
 8010766:	f47f aeca 	bne.w	80104fe <_strtod_l+0x76>
 801076a:	9b06      	ldr	r3, [sp, #24]
 801076c:	2b00      	cmp	r3, #0
 801076e:	f47f aee2 	bne.w	8010536 <_strtod_l+0xae>
 8010772:	2a69      	cmp	r2, #105	@ 0x69
 8010774:	d027      	beq.n	80107c6 <_strtod_l+0x33e>
 8010776:	dc24      	bgt.n	80107c2 <_strtod_l+0x33a>
 8010778:	2a49      	cmp	r2, #73	@ 0x49
 801077a:	d024      	beq.n	80107c6 <_strtod_l+0x33e>
 801077c:	2a4e      	cmp	r2, #78	@ 0x4e
 801077e:	f47f aeda 	bne.w	8010536 <_strtod_l+0xae>
 8010782:	4997      	ldr	r1, [pc, #604]	@ (80109e0 <_strtod_l+0x558>)
 8010784:	a811      	add	r0, sp, #68	@ 0x44
 8010786:	f001 f9ab 	bl	8011ae0 <__match>
 801078a:	2800      	cmp	r0, #0
 801078c:	f43f aed3 	beq.w	8010536 <_strtod_l+0xae>
 8010790:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	2b28      	cmp	r3, #40	@ 0x28
 8010796:	d12d      	bne.n	80107f4 <_strtod_l+0x36c>
 8010798:	4992      	ldr	r1, [pc, #584]	@ (80109e4 <_strtod_l+0x55c>)
 801079a:	aa14      	add	r2, sp, #80	@ 0x50
 801079c:	a811      	add	r0, sp, #68	@ 0x44
 801079e:	f001 f9b3 	bl	8011b08 <__hexnan>
 80107a2:	2805      	cmp	r0, #5
 80107a4:	d126      	bne.n	80107f4 <_strtod_l+0x36c>
 80107a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80107a8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80107ac:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80107b0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80107b4:	e6a3      	b.n	80104fe <_strtod_l+0x76>
 80107b6:	240a      	movs	r4, #10
 80107b8:	fb04 2c0c 	mla	ip, r4, ip, r2
 80107bc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80107c0:	e7b8      	b.n	8010734 <_strtod_l+0x2ac>
 80107c2:	2a6e      	cmp	r2, #110	@ 0x6e
 80107c4:	e7db      	b.n	801077e <_strtod_l+0x2f6>
 80107c6:	4988      	ldr	r1, [pc, #544]	@ (80109e8 <_strtod_l+0x560>)
 80107c8:	a811      	add	r0, sp, #68	@ 0x44
 80107ca:	f001 f989 	bl	8011ae0 <__match>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	f43f aeb1 	beq.w	8010536 <_strtod_l+0xae>
 80107d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107d6:	4985      	ldr	r1, [pc, #532]	@ (80109ec <_strtod_l+0x564>)
 80107d8:	3b01      	subs	r3, #1
 80107da:	a811      	add	r0, sp, #68	@ 0x44
 80107dc:	9311      	str	r3, [sp, #68]	@ 0x44
 80107de:	f001 f97f 	bl	8011ae0 <__match>
 80107e2:	b910      	cbnz	r0, 80107ea <_strtod_l+0x362>
 80107e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107e6:	3301      	adds	r3, #1
 80107e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80107ea:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8010a00 <_strtod_l+0x578>
 80107ee:	f04f 0a00 	mov.w	sl, #0
 80107f2:	e684      	b.n	80104fe <_strtod_l+0x76>
 80107f4:	487e      	ldr	r0, [pc, #504]	@ (80109f0 <_strtod_l+0x568>)
 80107f6:	f000 feaf 	bl	8011558 <nan>
 80107fa:	ec5b ab10 	vmov	sl, fp, d0
 80107fe:	e67e      	b.n	80104fe <_strtod_l+0x76>
 8010800:	ee07 9a90 	vmov	s15, r9
 8010804:	1be2      	subs	r2, r4, r7
 8010806:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801080a:	2d00      	cmp	r5, #0
 801080c:	bf08      	it	eq
 801080e:	461d      	moveq	r5, r3
 8010810:	2b10      	cmp	r3, #16
 8010812:	9209      	str	r2, [sp, #36]	@ 0x24
 8010814:	461a      	mov	r2, r3
 8010816:	bfa8      	it	ge
 8010818:	2210      	movge	r2, #16
 801081a:	2b09      	cmp	r3, #9
 801081c:	ec5b ab17 	vmov	sl, fp, d7
 8010820:	dc15      	bgt.n	801084e <_strtod_l+0x3c6>
 8010822:	1be1      	subs	r1, r4, r7
 8010824:	2900      	cmp	r1, #0
 8010826:	f43f ae6a 	beq.w	80104fe <_strtod_l+0x76>
 801082a:	eba4 0107 	sub.w	r1, r4, r7
 801082e:	dd72      	ble.n	8010916 <_strtod_l+0x48e>
 8010830:	2916      	cmp	r1, #22
 8010832:	dc59      	bgt.n	80108e8 <_strtod_l+0x460>
 8010834:	4b6f      	ldr	r3, [pc, #444]	@ (80109f4 <_strtod_l+0x56c>)
 8010836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801083c:	ed93 7b00 	vldr	d7, [r3]
 8010840:	ec4b ab16 	vmov	d6, sl, fp
 8010844:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010848:	ec5b ab17 	vmov	sl, fp, d7
 801084c:	e657      	b.n	80104fe <_strtod_l+0x76>
 801084e:	4969      	ldr	r1, [pc, #420]	@ (80109f4 <_strtod_l+0x56c>)
 8010850:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010854:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010858:	ee06 6a90 	vmov	s13, r6
 801085c:	2b0f      	cmp	r3, #15
 801085e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8010862:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010866:	ec5b ab16 	vmov	sl, fp, d6
 801086a:	ddda      	ble.n	8010822 <_strtod_l+0x39a>
 801086c:	1a9a      	subs	r2, r3, r2
 801086e:	1be1      	subs	r1, r4, r7
 8010870:	440a      	add	r2, r1
 8010872:	2a00      	cmp	r2, #0
 8010874:	f340 8094 	ble.w	80109a0 <_strtod_l+0x518>
 8010878:	f012 000f 	ands.w	r0, r2, #15
 801087c:	d00a      	beq.n	8010894 <_strtod_l+0x40c>
 801087e:	495d      	ldr	r1, [pc, #372]	@ (80109f4 <_strtod_l+0x56c>)
 8010880:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010884:	ed91 7b00 	vldr	d7, [r1]
 8010888:	ec4b ab16 	vmov	d6, sl, fp
 801088c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010890:	ec5b ab17 	vmov	sl, fp, d7
 8010894:	f032 020f 	bics.w	r2, r2, #15
 8010898:	d073      	beq.n	8010982 <_strtod_l+0x4fa>
 801089a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801089e:	dd47      	ble.n	8010930 <_strtod_l+0x4a8>
 80108a0:	2400      	movs	r4, #0
 80108a2:	4625      	mov	r5, r4
 80108a4:	9407      	str	r4, [sp, #28]
 80108a6:	4626      	mov	r6, r4
 80108a8:	9a05      	ldr	r2, [sp, #20]
 80108aa:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010a00 <_strtod_l+0x578>
 80108ae:	2322      	movs	r3, #34	@ 0x22
 80108b0:	6013      	str	r3, [r2, #0]
 80108b2:	f04f 0a00 	mov.w	sl, #0
 80108b6:	9b07      	ldr	r3, [sp, #28]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	f43f ae20 	beq.w	80104fe <_strtod_l+0x76>
 80108be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80108c0:	9805      	ldr	r0, [sp, #20]
 80108c2:	f7ff f957 	bl	800fb74 <_Bfree>
 80108c6:	9805      	ldr	r0, [sp, #20]
 80108c8:	4631      	mov	r1, r6
 80108ca:	f7ff f953 	bl	800fb74 <_Bfree>
 80108ce:	9805      	ldr	r0, [sp, #20]
 80108d0:	4629      	mov	r1, r5
 80108d2:	f7ff f94f 	bl	800fb74 <_Bfree>
 80108d6:	9907      	ldr	r1, [sp, #28]
 80108d8:	9805      	ldr	r0, [sp, #20]
 80108da:	f7ff f94b 	bl	800fb74 <_Bfree>
 80108de:	9805      	ldr	r0, [sp, #20]
 80108e0:	4621      	mov	r1, r4
 80108e2:	f7ff f947 	bl	800fb74 <_Bfree>
 80108e6:	e60a      	b.n	80104fe <_strtod_l+0x76>
 80108e8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80108ec:	1be0      	subs	r0, r4, r7
 80108ee:	4281      	cmp	r1, r0
 80108f0:	dbbc      	blt.n	801086c <_strtod_l+0x3e4>
 80108f2:	4a40      	ldr	r2, [pc, #256]	@ (80109f4 <_strtod_l+0x56c>)
 80108f4:	f1c3 030f 	rsb	r3, r3, #15
 80108f8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80108fc:	ed91 7b00 	vldr	d7, [r1]
 8010900:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010902:	ec4b ab16 	vmov	d6, sl, fp
 8010906:	1acb      	subs	r3, r1, r3
 8010908:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801090c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010910:	ed92 6b00 	vldr	d6, [r2]
 8010914:	e796      	b.n	8010844 <_strtod_l+0x3bc>
 8010916:	3116      	adds	r1, #22
 8010918:	dba8      	blt.n	801086c <_strtod_l+0x3e4>
 801091a:	4b36      	ldr	r3, [pc, #216]	@ (80109f4 <_strtod_l+0x56c>)
 801091c:	1b3c      	subs	r4, r7, r4
 801091e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010922:	ed94 7b00 	vldr	d7, [r4]
 8010926:	ec4b ab16 	vmov	d6, sl, fp
 801092a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801092e:	e78b      	b.n	8010848 <_strtod_l+0x3c0>
 8010930:	2000      	movs	r0, #0
 8010932:	ec4b ab17 	vmov	d7, sl, fp
 8010936:	4e30      	ldr	r6, [pc, #192]	@ (80109f8 <_strtod_l+0x570>)
 8010938:	1112      	asrs	r2, r2, #4
 801093a:	4601      	mov	r1, r0
 801093c:	2a01      	cmp	r2, #1
 801093e:	dc23      	bgt.n	8010988 <_strtod_l+0x500>
 8010940:	b108      	cbz	r0, 8010946 <_strtod_l+0x4be>
 8010942:	ec5b ab17 	vmov	sl, fp, d7
 8010946:	4a2c      	ldr	r2, [pc, #176]	@ (80109f8 <_strtod_l+0x570>)
 8010948:	482c      	ldr	r0, [pc, #176]	@ (80109fc <_strtod_l+0x574>)
 801094a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801094e:	ed92 7b00 	vldr	d7, [r2]
 8010952:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010956:	ec4b ab16 	vmov	d6, sl, fp
 801095a:	4a29      	ldr	r2, [pc, #164]	@ (8010a00 <_strtod_l+0x578>)
 801095c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010960:	ee17 1a90 	vmov	r1, s15
 8010964:	400a      	ands	r2, r1
 8010966:	4282      	cmp	r2, r0
 8010968:	ec5b ab17 	vmov	sl, fp, d7
 801096c:	d898      	bhi.n	80108a0 <_strtod_l+0x418>
 801096e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8010972:	4282      	cmp	r2, r0
 8010974:	bf86      	itte	hi
 8010976:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8010a04 <_strtod_l+0x57c>
 801097a:	f04f 3aff 	movhi.w	sl, #4294967295
 801097e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8010982:	2200      	movs	r2, #0
 8010984:	9206      	str	r2, [sp, #24]
 8010986:	e076      	b.n	8010a76 <_strtod_l+0x5ee>
 8010988:	f012 0f01 	tst.w	r2, #1
 801098c:	d004      	beq.n	8010998 <_strtod_l+0x510>
 801098e:	ed96 6b00 	vldr	d6, [r6]
 8010992:	2001      	movs	r0, #1
 8010994:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010998:	3101      	adds	r1, #1
 801099a:	1052      	asrs	r2, r2, #1
 801099c:	3608      	adds	r6, #8
 801099e:	e7cd      	b.n	801093c <_strtod_l+0x4b4>
 80109a0:	d0ef      	beq.n	8010982 <_strtod_l+0x4fa>
 80109a2:	4252      	negs	r2, r2
 80109a4:	f012 000f 	ands.w	r0, r2, #15
 80109a8:	d00a      	beq.n	80109c0 <_strtod_l+0x538>
 80109aa:	4912      	ldr	r1, [pc, #72]	@ (80109f4 <_strtod_l+0x56c>)
 80109ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80109b0:	ed91 7b00 	vldr	d7, [r1]
 80109b4:	ec4b ab16 	vmov	d6, sl, fp
 80109b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80109bc:	ec5b ab17 	vmov	sl, fp, d7
 80109c0:	1112      	asrs	r2, r2, #4
 80109c2:	d0de      	beq.n	8010982 <_strtod_l+0x4fa>
 80109c4:	2a1f      	cmp	r2, #31
 80109c6:	dd1f      	ble.n	8010a08 <_strtod_l+0x580>
 80109c8:	2400      	movs	r4, #0
 80109ca:	4625      	mov	r5, r4
 80109cc:	9407      	str	r4, [sp, #28]
 80109ce:	4626      	mov	r6, r4
 80109d0:	9a05      	ldr	r2, [sp, #20]
 80109d2:	2322      	movs	r3, #34	@ 0x22
 80109d4:	f04f 0a00 	mov.w	sl, #0
 80109d8:	f04f 0b00 	mov.w	fp, #0
 80109dc:	6013      	str	r3, [r2, #0]
 80109de:	e76a      	b.n	80108b6 <_strtod_l+0x42e>
 80109e0:	080122c5 	.word	0x080122c5
 80109e4:	080124dc 	.word	0x080124dc
 80109e8:	080122bd 	.word	0x080122bd
 80109ec:	080122f4 	.word	0x080122f4
 80109f0:	08012685 	.word	0x08012685
 80109f4:	08012410 	.word	0x08012410
 80109f8:	080123e8 	.word	0x080123e8
 80109fc:	7ca00000 	.word	0x7ca00000
 8010a00:	7ff00000 	.word	0x7ff00000
 8010a04:	7fefffff 	.word	0x7fefffff
 8010a08:	f012 0110 	ands.w	r1, r2, #16
 8010a0c:	bf18      	it	ne
 8010a0e:	216a      	movne	r1, #106	@ 0x6a
 8010a10:	9106      	str	r1, [sp, #24]
 8010a12:	ec4b ab17 	vmov	d7, sl, fp
 8010a16:	49b0      	ldr	r1, [pc, #704]	@ (8010cd8 <_strtod_l+0x850>)
 8010a18:	2000      	movs	r0, #0
 8010a1a:	07d6      	lsls	r6, r2, #31
 8010a1c:	d504      	bpl.n	8010a28 <_strtod_l+0x5a0>
 8010a1e:	ed91 6b00 	vldr	d6, [r1]
 8010a22:	2001      	movs	r0, #1
 8010a24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010a28:	1052      	asrs	r2, r2, #1
 8010a2a:	f101 0108 	add.w	r1, r1, #8
 8010a2e:	d1f4      	bne.n	8010a1a <_strtod_l+0x592>
 8010a30:	b108      	cbz	r0, 8010a36 <_strtod_l+0x5ae>
 8010a32:	ec5b ab17 	vmov	sl, fp, d7
 8010a36:	9a06      	ldr	r2, [sp, #24]
 8010a38:	b1b2      	cbz	r2, 8010a68 <_strtod_l+0x5e0>
 8010a3a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8010a3e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8010a42:	2a00      	cmp	r2, #0
 8010a44:	4658      	mov	r0, fp
 8010a46:	dd0f      	ble.n	8010a68 <_strtod_l+0x5e0>
 8010a48:	2a1f      	cmp	r2, #31
 8010a4a:	dd55      	ble.n	8010af8 <_strtod_l+0x670>
 8010a4c:	2a34      	cmp	r2, #52	@ 0x34
 8010a4e:	bfde      	ittt	le
 8010a50:	f04f 32ff 	movle.w	r2, #4294967295
 8010a54:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8010a58:	408a      	lslle	r2, r1
 8010a5a:	f04f 0a00 	mov.w	sl, #0
 8010a5e:	bfcc      	ite	gt
 8010a60:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010a64:	ea02 0b00 	andle.w	fp, r2, r0
 8010a68:	ec4b ab17 	vmov	d7, sl, fp
 8010a6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a74:	d0a8      	beq.n	80109c8 <_strtod_l+0x540>
 8010a76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a78:	9805      	ldr	r0, [sp, #20]
 8010a7a:	f8cd 9000 	str.w	r9, [sp]
 8010a7e:	462a      	mov	r2, r5
 8010a80:	f7ff f8e0 	bl	800fc44 <__s2b>
 8010a84:	9007      	str	r0, [sp, #28]
 8010a86:	2800      	cmp	r0, #0
 8010a88:	f43f af0a 	beq.w	80108a0 <_strtod_l+0x418>
 8010a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a8e:	1b3f      	subs	r7, r7, r4
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	bfb4      	ite	lt
 8010a94:	463b      	movlt	r3, r7
 8010a96:	2300      	movge	r3, #0
 8010a98:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a9c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8010cc8 <_strtod_l+0x840>
 8010aa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010aa4:	2400      	movs	r4, #0
 8010aa6:	930d      	str	r3, [sp, #52]	@ 0x34
 8010aa8:	4625      	mov	r5, r4
 8010aaa:	9b07      	ldr	r3, [sp, #28]
 8010aac:	9805      	ldr	r0, [sp, #20]
 8010aae:	6859      	ldr	r1, [r3, #4]
 8010ab0:	f7ff f820 	bl	800faf4 <_Balloc>
 8010ab4:	4606      	mov	r6, r0
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	f43f aef6 	beq.w	80108a8 <_strtod_l+0x420>
 8010abc:	9b07      	ldr	r3, [sp, #28]
 8010abe:	691a      	ldr	r2, [r3, #16]
 8010ac0:	ec4b ab19 	vmov	d9, sl, fp
 8010ac4:	3202      	adds	r2, #2
 8010ac6:	f103 010c 	add.w	r1, r3, #12
 8010aca:	0092      	lsls	r2, r2, #2
 8010acc:	300c      	adds	r0, #12
 8010ace:	f000 fd33 	bl	8011538 <memcpy>
 8010ad2:	eeb0 0b49 	vmov.f64	d0, d9
 8010ad6:	9805      	ldr	r0, [sp, #20]
 8010ad8:	aa14      	add	r2, sp, #80	@ 0x50
 8010ada:	a913      	add	r1, sp, #76	@ 0x4c
 8010adc:	f7ff fbee 	bl	80102bc <__d2b>
 8010ae0:	9012      	str	r0, [sp, #72]	@ 0x48
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	f43f aee0 	beq.w	80108a8 <_strtod_l+0x420>
 8010ae8:	9805      	ldr	r0, [sp, #20]
 8010aea:	2101      	movs	r1, #1
 8010aec:	f7ff f940 	bl	800fd70 <__i2b>
 8010af0:	4605      	mov	r5, r0
 8010af2:	b940      	cbnz	r0, 8010b06 <_strtod_l+0x67e>
 8010af4:	2500      	movs	r5, #0
 8010af6:	e6d7      	b.n	80108a8 <_strtod_l+0x420>
 8010af8:	f04f 31ff 	mov.w	r1, #4294967295
 8010afc:	fa01 f202 	lsl.w	r2, r1, r2
 8010b00:	ea02 0a0a 	and.w	sl, r2, sl
 8010b04:	e7b0      	b.n	8010a68 <_strtod_l+0x5e0>
 8010b06:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010b08:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010b0a:	2f00      	cmp	r7, #0
 8010b0c:	bfab      	itete	ge
 8010b0e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8010b10:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8010b12:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8010b16:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8010b1a:	bfac      	ite	ge
 8010b1c:	eb07 0903 	addge.w	r9, r7, r3
 8010b20:	eba3 0807 	sublt.w	r8, r3, r7
 8010b24:	9b06      	ldr	r3, [sp, #24]
 8010b26:	1aff      	subs	r7, r7, r3
 8010b28:	4417      	add	r7, r2
 8010b2a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8010b2e:	4a6b      	ldr	r2, [pc, #428]	@ (8010cdc <_strtod_l+0x854>)
 8010b30:	3f01      	subs	r7, #1
 8010b32:	4297      	cmp	r7, r2
 8010b34:	da51      	bge.n	8010bda <_strtod_l+0x752>
 8010b36:	1bd1      	subs	r1, r2, r7
 8010b38:	291f      	cmp	r1, #31
 8010b3a:	eba3 0301 	sub.w	r3, r3, r1
 8010b3e:	f04f 0201 	mov.w	r2, #1
 8010b42:	dc3e      	bgt.n	8010bc2 <_strtod_l+0x73a>
 8010b44:	408a      	lsls	r2, r1
 8010b46:	920c      	str	r2, [sp, #48]	@ 0x30
 8010b48:	2200      	movs	r2, #0
 8010b4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010b4c:	eb09 0703 	add.w	r7, r9, r3
 8010b50:	4498      	add	r8, r3
 8010b52:	9b06      	ldr	r3, [sp, #24]
 8010b54:	45b9      	cmp	r9, r7
 8010b56:	4498      	add	r8, r3
 8010b58:	464b      	mov	r3, r9
 8010b5a:	bfa8      	it	ge
 8010b5c:	463b      	movge	r3, r7
 8010b5e:	4543      	cmp	r3, r8
 8010b60:	bfa8      	it	ge
 8010b62:	4643      	movge	r3, r8
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	bfc2      	ittt	gt
 8010b68:	1aff      	subgt	r7, r7, r3
 8010b6a:	eba8 0803 	subgt.w	r8, r8, r3
 8010b6e:	eba9 0903 	subgt.w	r9, r9, r3
 8010b72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	dd16      	ble.n	8010ba6 <_strtod_l+0x71e>
 8010b78:	4629      	mov	r1, r5
 8010b7a:	9805      	ldr	r0, [sp, #20]
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	f7ff f9b7 	bl	800fef0 <__pow5mult>
 8010b82:	4605      	mov	r5, r0
 8010b84:	2800      	cmp	r0, #0
 8010b86:	d0b5      	beq.n	8010af4 <_strtod_l+0x66c>
 8010b88:	4601      	mov	r1, r0
 8010b8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010b8c:	9805      	ldr	r0, [sp, #20]
 8010b8e:	f7ff f905 	bl	800fd9c <__multiply>
 8010b92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010b94:	2800      	cmp	r0, #0
 8010b96:	f43f ae87 	beq.w	80108a8 <_strtod_l+0x420>
 8010b9a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010b9c:	9805      	ldr	r0, [sp, #20]
 8010b9e:	f7fe ffe9 	bl	800fb74 <_Bfree>
 8010ba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ba4:	9312      	str	r3, [sp, #72]	@ 0x48
 8010ba6:	2f00      	cmp	r7, #0
 8010ba8:	dc1b      	bgt.n	8010be2 <_strtod_l+0x75a>
 8010baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	dd21      	ble.n	8010bf4 <_strtod_l+0x76c>
 8010bb0:	4631      	mov	r1, r6
 8010bb2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010bb4:	9805      	ldr	r0, [sp, #20]
 8010bb6:	f7ff f99b 	bl	800fef0 <__pow5mult>
 8010bba:	4606      	mov	r6, r0
 8010bbc:	b9d0      	cbnz	r0, 8010bf4 <_strtod_l+0x76c>
 8010bbe:	2600      	movs	r6, #0
 8010bc0:	e672      	b.n	80108a8 <_strtod_l+0x420>
 8010bc2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8010bc6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8010bca:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8010bce:	37e2      	adds	r7, #226	@ 0xe2
 8010bd0:	fa02 f107 	lsl.w	r1, r2, r7
 8010bd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010bd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8010bd8:	e7b8      	b.n	8010b4c <_strtod_l+0x6c4>
 8010bda:	2200      	movs	r2, #0
 8010bdc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010bde:	2201      	movs	r2, #1
 8010be0:	e7f9      	b.n	8010bd6 <_strtod_l+0x74e>
 8010be2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010be4:	9805      	ldr	r0, [sp, #20]
 8010be6:	463a      	mov	r2, r7
 8010be8:	f7ff f9dc 	bl	800ffa4 <__lshift>
 8010bec:	9012      	str	r0, [sp, #72]	@ 0x48
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	d1db      	bne.n	8010baa <_strtod_l+0x722>
 8010bf2:	e659      	b.n	80108a8 <_strtod_l+0x420>
 8010bf4:	f1b8 0f00 	cmp.w	r8, #0
 8010bf8:	dd07      	ble.n	8010c0a <_strtod_l+0x782>
 8010bfa:	4631      	mov	r1, r6
 8010bfc:	9805      	ldr	r0, [sp, #20]
 8010bfe:	4642      	mov	r2, r8
 8010c00:	f7ff f9d0 	bl	800ffa4 <__lshift>
 8010c04:	4606      	mov	r6, r0
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d0d9      	beq.n	8010bbe <_strtod_l+0x736>
 8010c0a:	f1b9 0f00 	cmp.w	r9, #0
 8010c0e:	dd08      	ble.n	8010c22 <_strtod_l+0x79a>
 8010c10:	4629      	mov	r1, r5
 8010c12:	9805      	ldr	r0, [sp, #20]
 8010c14:	464a      	mov	r2, r9
 8010c16:	f7ff f9c5 	bl	800ffa4 <__lshift>
 8010c1a:	4605      	mov	r5, r0
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	f43f ae43 	beq.w	80108a8 <_strtod_l+0x420>
 8010c22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010c24:	9805      	ldr	r0, [sp, #20]
 8010c26:	4632      	mov	r2, r6
 8010c28:	f7ff fa44 	bl	80100b4 <__mdiff>
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	f43f ae3a 	beq.w	80108a8 <_strtod_l+0x420>
 8010c34:	2300      	movs	r3, #0
 8010c36:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010c3a:	60c3      	str	r3, [r0, #12]
 8010c3c:	4629      	mov	r1, r5
 8010c3e:	f7ff fa1d 	bl	801007c <__mcmp>
 8010c42:	2800      	cmp	r0, #0
 8010c44:	da4e      	bge.n	8010ce4 <_strtod_l+0x85c>
 8010c46:	ea58 080a 	orrs.w	r8, r8, sl
 8010c4a:	d174      	bne.n	8010d36 <_strtod_l+0x8ae>
 8010c4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d170      	bne.n	8010d36 <_strtod_l+0x8ae>
 8010c54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c58:	0d1b      	lsrs	r3, r3, #20
 8010c5a:	051b      	lsls	r3, r3, #20
 8010c5c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c60:	d969      	bls.n	8010d36 <_strtod_l+0x8ae>
 8010c62:	6963      	ldr	r3, [r4, #20]
 8010c64:	b913      	cbnz	r3, 8010c6c <_strtod_l+0x7e4>
 8010c66:	6923      	ldr	r3, [r4, #16]
 8010c68:	2b01      	cmp	r3, #1
 8010c6a:	dd64      	ble.n	8010d36 <_strtod_l+0x8ae>
 8010c6c:	4621      	mov	r1, r4
 8010c6e:	2201      	movs	r2, #1
 8010c70:	9805      	ldr	r0, [sp, #20]
 8010c72:	f7ff f997 	bl	800ffa4 <__lshift>
 8010c76:	4629      	mov	r1, r5
 8010c78:	4604      	mov	r4, r0
 8010c7a:	f7ff f9ff 	bl	801007c <__mcmp>
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	dd59      	ble.n	8010d36 <_strtod_l+0x8ae>
 8010c82:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c86:	9a06      	ldr	r2, [sp, #24]
 8010c88:	0d1b      	lsrs	r3, r3, #20
 8010c8a:	051b      	lsls	r3, r3, #20
 8010c8c:	2a00      	cmp	r2, #0
 8010c8e:	d070      	beq.n	8010d72 <_strtod_l+0x8ea>
 8010c90:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c94:	d86d      	bhi.n	8010d72 <_strtod_l+0x8ea>
 8010c96:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010c9a:	f67f ae99 	bls.w	80109d0 <_strtod_l+0x548>
 8010c9e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8010cd0 <_strtod_l+0x848>
 8010ca2:	ec4b ab16 	vmov	d6, sl, fp
 8010ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8010ce0 <_strtod_l+0x858>)
 8010ca8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010cac:	ee17 2a90 	vmov	r2, s15
 8010cb0:	4013      	ands	r3, r2
 8010cb2:	ec5b ab17 	vmov	sl, fp, d7
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f47f ae01 	bne.w	80108be <_strtod_l+0x436>
 8010cbc:	9a05      	ldr	r2, [sp, #20]
 8010cbe:	2322      	movs	r3, #34	@ 0x22
 8010cc0:	6013      	str	r3, [r2, #0]
 8010cc2:	e5fc      	b.n	80108be <_strtod_l+0x436>
 8010cc4:	f3af 8000 	nop.w
 8010cc8:	ffc00000 	.word	0xffc00000
 8010ccc:	41dfffff 	.word	0x41dfffff
 8010cd0:	00000000 	.word	0x00000000
 8010cd4:	39500000 	.word	0x39500000
 8010cd8:	08012508 	.word	0x08012508
 8010cdc:	fffffc02 	.word	0xfffffc02
 8010ce0:	7ff00000 	.word	0x7ff00000
 8010ce4:	46d9      	mov	r9, fp
 8010ce6:	d15d      	bne.n	8010da4 <_strtod_l+0x91c>
 8010ce8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cec:	f1b8 0f00 	cmp.w	r8, #0
 8010cf0:	d02a      	beq.n	8010d48 <_strtod_l+0x8c0>
 8010cf2:	4aab      	ldr	r2, [pc, #684]	@ (8010fa0 <_strtod_l+0xb18>)
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d12a      	bne.n	8010d4e <_strtod_l+0x8c6>
 8010cf8:	9b06      	ldr	r3, [sp, #24]
 8010cfa:	4652      	mov	r2, sl
 8010cfc:	b1fb      	cbz	r3, 8010d3e <_strtod_l+0x8b6>
 8010cfe:	4ba9      	ldr	r3, [pc, #676]	@ (8010fa4 <_strtod_l+0xb1c>)
 8010d00:	ea0b 0303 	and.w	r3, fp, r3
 8010d04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010d08:	f04f 31ff 	mov.w	r1, #4294967295
 8010d0c:	d81a      	bhi.n	8010d44 <_strtod_l+0x8bc>
 8010d0e:	0d1b      	lsrs	r3, r3, #20
 8010d10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010d14:	fa01 f303 	lsl.w	r3, r1, r3
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d118      	bne.n	8010d4e <_strtod_l+0x8c6>
 8010d1c:	4ba2      	ldr	r3, [pc, #648]	@ (8010fa8 <_strtod_l+0xb20>)
 8010d1e:	4599      	cmp	r9, r3
 8010d20:	d102      	bne.n	8010d28 <_strtod_l+0x8a0>
 8010d22:	3201      	adds	r2, #1
 8010d24:	f43f adc0 	beq.w	80108a8 <_strtod_l+0x420>
 8010d28:	4b9e      	ldr	r3, [pc, #632]	@ (8010fa4 <_strtod_l+0xb1c>)
 8010d2a:	ea09 0303 	and.w	r3, r9, r3
 8010d2e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8010d32:	f04f 0a00 	mov.w	sl, #0
 8010d36:	9b06      	ldr	r3, [sp, #24]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d1b0      	bne.n	8010c9e <_strtod_l+0x816>
 8010d3c:	e5bf      	b.n	80108be <_strtod_l+0x436>
 8010d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d42:	e7e9      	b.n	8010d18 <_strtod_l+0x890>
 8010d44:	460b      	mov	r3, r1
 8010d46:	e7e7      	b.n	8010d18 <_strtod_l+0x890>
 8010d48:	ea53 030a 	orrs.w	r3, r3, sl
 8010d4c:	d099      	beq.n	8010c82 <_strtod_l+0x7fa>
 8010d4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d50:	b1c3      	cbz	r3, 8010d84 <_strtod_l+0x8fc>
 8010d52:	ea13 0f09 	tst.w	r3, r9
 8010d56:	d0ee      	beq.n	8010d36 <_strtod_l+0x8ae>
 8010d58:	9a06      	ldr	r2, [sp, #24]
 8010d5a:	4650      	mov	r0, sl
 8010d5c:	4659      	mov	r1, fp
 8010d5e:	f1b8 0f00 	cmp.w	r8, #0
 8010d62:	d013      	beq.n	8010d8c <_strtod_l+0x904>
 8010d64:	f7ff fb75 	bl	8010452 <sulp>
 8010d68:	ee39 7b00 	vadd.f64	d7, d9, d0
 8010d6c:	ec5b ab17 	vmov	sl, fp, d7
 8010d70:	e7e1      	b.n	8010d36 <_strtod_l+0x8ae>
 8010d72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010d76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010d7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010d7e:	f04f 3aff 	mov.w	sl, #4294967295
 8010d82:	e7d8      	b.n	8010d36 <_strtod_l+0x8ae>
 8010d84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d86:	ea13 0f0a 	tst.w	r3, sl
 8010d8a:	e7e4      	b.n	8010d56 <_strtod_l+0x8ce>
 8010d8c:	f7ff fb61 	bl	8010452 <sulp>
 8010d90:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010d94:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9c:	ec5b ab10 	vmov	sl, fp, d0
 8010da0:	d1c9      	bne.n	8010d36 <_strtod_l+0x8ae>
 8010da2:	e615      	b.n	80109d0 <_strtod_l+0x548>
 8010da4:	4629      	mov	r1, r5
 8010da6:	4620      	mov	r0, r4
 8010da8:	f7ff fae0 	bl	801036c <__ratio>
 8010dac:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8010db0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db8:	d85d      	bhi.n	8010e76 <_strtod_l+0x9ee>
 8010dba:	f1b8 0f00 	cmp.w	r8, #0
 8010dbe:	d164      	bne.n	8010e8a <_strtod_l+0xa02>
 8010dc0:	f1ba 0f00 	cmp.w	sl, #0
 8010dc4:	d14b      	bne.n	8010e5e <_strtod_l+0x9d6>
 8010dc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010dca:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d160      	bne.n	8010e94 <_strtod_l+0xa0c>
 8010dd2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8010dd6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dde:	d401      	bmi.n	8010de4 <_strtod_l+0x95c>
 8010de0:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010de4:	eeb1 ab48 	vneg.f64	d10, d8
 8010de8:	486e      	ldr	r0, [pc, #440]	@ (8010fa4 <_strtod_l+0xb1c>)
 8010dea:	4970      	ldr	r1, [pc, #448]	@ (8010fac <_strtod_l+0xb24>)
 8010dec:	ea09 0700 	and.w	r7, r9, r0
 8010df0:	428f      	cmp	r7, r1
 8010df2:	ec53 2b1a 	vmov	r2, r3, d10
 8010df6:	d17d      	bne.n	8010ef4 <_strtod_l+0xa6c>
 8010df8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8010dfc:	ec4b ab1c 	vmov	d12, sl, fp
 8010e00:	eeb0 0b4c 	vmov.f64	d0, d12
 8010e04:	f7ff f9ea 	bl	80101dc <__ulp>
 8010e08:	4866      	ldr	r0, [pc, #408]	@ (8010fa4 <_strtod_l+0xb1c>)
 8010e0a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8010e0e:	ee1c 3a90 	vmov	r3, s25
 8010e12:	4a67      	ldr	r2, [pc, #412]	@ (8010fb0 <_strtod_l+0xb28>)
 8010e14:	ea03 0100 	and.w	r1, r3, r0
 8010e18:	4291      	cmp	r1, r2
 8010e1a:	ec5b ab1c 	vmov	sl, fp, d12
 8010e1e:	d93c      	bls.n	8010e9a <_strtod_l+0xa12>
 8010e20:	ee19 2a90 	vmov	r2, s19
 8010e24:	4b60      	ldr	r3, [pc, #384]	@ (8010fa8 <_strtod_l+0xb20>)
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d104      	bne.n	8010e34 <_strtod_l+0x9ac>
 8010e2a:	ee19 3a10 	vmov	r3, s18
 8010e2e:	3301      	adds	r3, #1
 8010e30:	f43f ad3a 	beq.w	80108a8 <_strtod_l+0x420>
 8010e34:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8010fa8 <_strtod_l+0xb20>
 8010e38:	f04f 3aff 	mov.w	sl, #4294967295
 8010e3c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010e3e:	9805      	ldr	r0, [sp, #20]
 8010e40:	f7fe fe98 	bl	800fb74 <_Bfree>
 8010e44:	9805      	ldr	r0, [sp, #20]
 8010e46:	4631      	mov	r1, r6
 8010e48:	f7fe fe94 	bl	800fb74 <_Bfree>
 8010e4c:	9805      	ldr	r0, [sp, #20]
 8010e4e:	4629      	mov	r1, r5
 8010e50:	f7fe fe90 	bl	800fb74 <_Bfree>
 8010e54:	9805      	ldr	r0, [sp, #20]
 8010e56:	4621      	mov	r1, r4
 8010e58:	f7fe fe8c 	bl	800fb74 <_Bfree>
 8010e5c:	e625      	b.n	8010aaa <_strtod_l+0x622>
 8010e5e:	f1ba 0f01 	cmp.w	sl, #1
 8010e62:	d103      	bne.n	8010e6c <_strtod_l+0x9e4>
 8010e64:	f1bb 0f00 	cmp.w	fp, #0
 8010e68:	f43f adb2 	beq.w	80109d0 <_strtod_l+0x548>
 8010e6c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010e70:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010e74:	e7b8      	b.n	8010de8 <_strtod_l+0x960>
 8010e76:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010e7a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010e7e:	f1b8 0f00 	cmp.w	r8, #0
 8010e82:	d0af      	beq.n	8010de4 <_strtod_l+0x95c>
 8010e84:	eeb0 ab48 	vmov.f64	d10, d8
 8010e88:	e7ae      	b.n	8010de8 <_strtod_l+0x960>
 8010e8a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8010e8e:	eeb0 8b4a 	vmov.f64	d8, d10
 8010e92:	e7a9      	b.n	8010de8 <_strtod_l+0x960>
 8010e94:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010e98:	e7a6      	b.n	8010de8 <_strtod_l+0x960>
 8010e9a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010e9e:	9b06      	ldr	r3, [sp, #24]
 8010ea0:	46d9      	mov	r9, fp
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d1ca      	bne.n	8010e3c <_strtod_l+0x9b4>
 8010ea6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010eaa:	0d1b      	lsrs	r3, r3, #20
 8010eac:	051b      	lsls	r3, r3, #20
 8010eae:	429f      	cmp	r7, r3
 8010eb0:	d1c4      	bne.n	8010e3c <_strtod_l+0x9b4>
 8010eb2:	ec51 0b18 	vmov	r0, r1, d8
 8010eb6:	f7ef fc57 	bl	8000768 <__aeabi_d2lz>
 8010eba:	f7ef fc0f 	bl	80006dc <__aeabi_l2d>
 8010ebe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8010ec2:	ec41 0b17 	vmov	d7, r0, r1
 8010ec6:	ea49 090a 	orr.w	r9, r9, sl
 8010eca:	ea59 0908 	orrs.w	r9, r9, r8
 8010ece:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010ed2:	d03c      	beq.n	8010f4e <_strtod_l+0xac6>
 8010ed4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010f88 <_strtod_l+0xb00>
 8010ed8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee0:	f53f aced 	bmi.w	80108be <_strtod_l+0x436>
 8010ee4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010f90 <_strtod_l+0xb08>
 8010ee8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef0:	dda4      	ble.n	8010e3c <_strtod_l+0x9b4>
 8010ef2:	e4e4      	b.n	80108be <_strtod_l+0x436>
 8010ef4:	9906      	ldr	r1, [sp, #24]
 8010ef6:	b1e1      	cbz	r1, 8010f32 <_strtod_l+0xaaa>
 8010ef8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8010efc:	d819      	bhi.n	8010f32 <_strtod_l+0xaaa>
 8010efe:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8010f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f06:	d811      	bhi.n	8010f2c <_strtod_l+0xaa4>
 8010f08:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8010f0c:	ee18 3a10 	vmov	r3, s16
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	bf38      	it	cc
 8010f14:	2301      	movcc	r3, #1
 8010f16:	ee08 3a10 	vmov	s16, r3
 8010f1a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8010f1e:	f1b8 0f00 	cmp.w	r8, #0
 8010f22:	d111      	bne.n	8010f48 <_strtod_l+0xac0>
 8010f24:	eeb1 7b48 	vneg.f64	d7, d8
 8010f28:	ec53 2b17 	vmov	r2, r3, d7
 8010f2c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8010f30:	1bcb      	subs	r3, r1, r7
 8010f32:	eeb0 0b49 	vmov.f64	d0, d9
 8010f36:	ec43 2b1a 	vmov	d10, r2, r3
 8010f3a:	f7ff f94f 	bl	80101dc <__ulp>
 8010f3e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8010f42:	ec5b ab19 	vmov	sl, fp, d9
 8010f46:	e7aa      	b.n	8010e9e <_strtod_l+0xa16>
 8010f48:	eeb0 7b48 	vmov.f64	d7, d8
 8010f4c:	e7ec      	b.n	8010f28 <_strtod_l+0xaa0>
 8010f4e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8010f98 <_strtod_l+0xb10>
 8010f52:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f5a:	f57f af6f 	bpl.w	8010e3c <_strtod_l+0x9b4>
 8010f5e:	e4ae      	b.n	80108be <_strtod_l+0x436>
 8010f60:	2300      	movs	r3, #0
 8010f62:	9308      	str	r3, [sp, #32]
 8010f64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010f68:	6013      	str	r3, [r2, #0]
 8010f6a:	f7ff bacc 	b.w	8010506 <_strtod_l+0x7e>
 8010f6e:	2a65      	cmp	r2, #101	@ 0x65
 8010f70:	f43f abbc 	beq.w	80106ec <_strtod_l+0x264>
 8010f74:	2a45      	cmp	r2, #69	@ 0x45
 8010f76:	f43f abb9 	beq.w	80106ec <_strtod_l+0x264>
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	9306      	str	r3, [sp, #24]
 8010f7e:	f7ff bbf0 	b.w	8010762 <_strtod_l+0x2da>
 8010f82:	bf00      	nop
 8010f84:	f3af 8000 	nop.w
 8010f88:	94a03595 	.word	0x94a03595
 8010f8c:	3fdfffff 	.word	0x3fdfffff
 8010f90:	35afe535 	.word	0x35afe535
 8010f94:	3fe00000 	.word	0x3fe00000
 8010f98:	94a03595 	.word	0x94a03595
 8010f9c:	3fcfffff 	.word	0x3fcfffff
 8010fa0:	000fffff 	.word	0x000fffff
 8010fa4:	7ff00000 	.word	0x7ff00000
 8010fa8:	7fefffff 	.word	0x7fefffff
 8010fac:	7fe00000 	.word	0x7fe00000
 8010fb0:	7c9fffff 	.word	0x7c9fffff

08010fb4 <_strtod_r>:
 8010fb4:	4b01      	ldr	r3, [pc, #4]	@ (8010fbc <_strtod_r+0x8>)
 8010fb6:	f7ff ba67 	b.w	8010488 <_strtod_l>
 8010fba:	bf00      	nop
 8010fbc:	2400006c 	.word	0x2400006c

08010fc0 <_strtol_l.constprop.0>:
 8010fc0:	2b24      	cmp	r3, #36	@ 0x24
 8010fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fc6:	4686      	mov	lr, r0
 8010fc8:	4690      	mov	r8, r2
 8010fca:	d801      	bhi.n	8010fd0 <_strtol_l.constprop.0+0x10>
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d106      	bne.n	8010fde <_strtol_l.constprop.0+0x1e>
 8010fd0:	f7fd fe7e 	bl	800ecd0 <__errno>
 8010fd4:	2316      	movs	r3, #22
 8010fd6:	6003      	str	r3, [r0, #0]
 8010fd8:	2000      	movs	r0, #0
 8010fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fde:	4834      	ldr	r0, [pc, #208]	@ (80110b0 <_strtol_l.constprop.0+0xf0>)
 8010fe0:	460d      	mov	r5, r1
 8010fe2:	462a      	mov	r2, r5
 8010fe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fe8:	5d06      	ldrb	r6, [r0, r4]
 8010fea:	f016 0608 	ands.w	r6, r6, #8
 8010fee:	d1f8      	bne.n	8010fe2 <_strtol_l.constprop.0+0x22>
 8010ff0:	2c2d      	cmp	r4, #45	@ 0x2d
 8010ff2:	d12d      	bne.n	8011050 <_strtol_l.constprop.0+0x90>
 8010ff4:	782c      	ldrb	r4, [r5, #0]
 8010ff6:	2601      	movs	r6, #1
 8010ff8:	1c95      	adds	r5, r2, #2
 8010ffa:	f033 0210 	bics.w	r2, r3, #16
 8010ffe:	d109      	bne.n	8011014 <_strtol_l.constprop.0+0x54>
 8011000:	2c30      	cmp	r4, #48	@ 0x30
 8011002:	d12a      	bne.n	801105a <_strtol_l.constprop.0+0x9a>
 8011004:	782a      	ldrb	r2, [r5, #0]
 8011006:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801100a:	2a58      	cmp	r2, #88	@ 0x58
 801100c:	d125      	bne.n	801105a <_strtol_l.constprop.0+0x9a>
 801100e:	786c      	ldrb	r4, [r5, #1]
 8011010:	2310      	movs	r3, #16
 8011012:	3502      	adds	r5, #2
 8011014:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011018:	f10c 3cff 	add.w	ip, ip, #4294967295
 801101c:	2200      	movs	r2, #0
 801101e:	fbbc f9f3 	udiv	r9, ip, r3
 8011022:	4610      	mov	r0, r2
 8011024:	fb03 ca19 	mls	sl, r3, r9, ip
 8011028:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801102c:	2f09      	cmp	r7, #9
 801102e:	d81b      	bhi.n	8011068 <_strtol_l.constprop.0+0xa8>
 8011030:	463c      	mov	r4, r7
 8011032:	42a3      	cmp	r3, r4
 8011034:	dd27      	ble.n	8011086 <_strtol_l.constprop.0+0xc6>
 8011036:	1c57      	adds	r7, r2, #1
 8011038:	d007      	beq.n	801104a <_strtol_l.constprop.0+0x8a>
 801103a:	4581      	cmp	r9, r0
 801103c:	d320      	bcc.n	8011080 <_strtol_l.constprop.0+0xc0>
 801103e:	d101      	bne.n	8011044 <_strtol_l.constprop.0+0x84>
 8011040:	45a2      	cmp	sl, r4
 8011042:	db1d      	blt.n	8011080 <_strtol_l.constprop.0+0xc0>
 8011044:	fb00 4003 	mla	r0, r0, r3, r4
 8011048:	2201      	movs	r2, #1
 801104a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801104e:	e7eb      	b.n	8011028 <_strtol_l.constprop.0+0x68>
 8011050:	2c2b      	cmp	r4, #43	@ 0x2b
 8011052:	bf04      	itt	eq
 8011054:	782c      	ldrbeq	r4, [r5, #0]
 8011056:	1c95      	addeq	r5, r2, #2
 8011058:	e7cf      	b.n	8010ffa <_strtol_l.constprop.0+0x3a>
 801105a:	2b00      	cmp	r3, #0
 801105c:	d1da      	bne.n	8011014 <_strtol_l.constprop.0+0x54>
 801105e:	2c30      	cmp	r4, #48	@ 0x30
 8011060:	bf0c      	ite	eq
 8011062:	2308      	moveq	r3, #8
 8011064:	230a      	movne	r3, #10
 8011066:	e7d5      	b.n	8011014 <_strtol_l.constprop.0+0x54>
 8011068:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801106c:	2f19      	cmp	r7, #25
 801106e:	d801      	bhi.n	8011074 <_strtol_l.constprop.0+0xb4>
 8011070:	3c37      	subs	r4, #55	@ 0x37
 8011072:	e7de      	b.n	8011032 <_strtol_l.constprop.0+0x72>
 8011074:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011078:	2f19      	cmp	r7, #25
 801107a:	d804      	bhi.n	8011086 <_strtol_l.constprop.0+0xc6>
 801107c:	3c57      	subs	r4, #87	@ 0x57
 801107e:	e7d8      	b.n	8011032 <_strtol_l.constprop.0+0x72>
 8011080:	f04f 32ff 	mov.w	r2, #4294967295
 8011084:	e7e1      	b.n	801104a <_strtol_l.constprop.0+0x8a>
 8011086:	1c53      	adds	r3, r2, #1
 8011088:	d108      	bne.n	801109c <_strtol_l.constprop.0+0xdc>
 801108a:	2322      	movs	r3, #34	@ 0x22
 801108c:	f8ce 3000 	str.w	r3, [lr]
 8011090:	4660      	mov	r0, ip
 8011092:	f1b8 0f00 	cmp.w	r8, #0
 8011096:	d0a0      	beq.n	8010fda <_strtol_l.constprop.0+0x1a>
 8011098:	1e69      	subs	r1, r5, #1
 801109a:	e006      	b.n	80110aa <_strtol_l.constprop.0+0xea>
 801109c:	b106      	cbz	r6, 80110a0 <_strtol_l.constprop.0+0xe0>
 801109e:	4240      	negs	r0, r0
 80110a0:	f1b8 0f00 	cmp.w	r8, #0
 80110a4:	d099      	beq.n	8010fda <_strtol_l.constprop.0+0x1a>
 80110a6:	2a00      	cmp	r2, #0
 80110a8:	d1f6      	bne.n	8011098 <_strtol_l.constprop.0+0xd8>
 80110aa:	f8c8 1000 	str.w	r1, [r8]
 80110ae:	e794      	b.n	8010fda <_strtol_l.constprop.0+0x1a>
 80110b0:	08012531 	.word	0x08012531

080110b4 <_strtol_r>:
 80110b4:	f7ff bf84 	b.w	8010fc0 <_strtol_l.constprop.0>

080110b8 <__ssputs_r>:
 80110b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110bc:	688e      	ldr	r6, [r1, #8]
 80110be:	461f      	mov	r7, r3
 80110c0:	42be      	cmp	r6, r7
 80110c2:	680b      	ldr	r3, [r1, #0]
 80110c4:	4682      	mov	sl, r0
 80110c6:	460c      	mov	r4, r1
 80110c8:	4690      	mov	r8, r2
 80110ca:	d82d      	bhi.n	8011128 <__ssputs_r+0x70>
 80110cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80110d4:	d026      	beq.n	8011124 <__ssputs_r+0x6c>
 80110d6:	6965      	ldr	r5, [r4, #20]
 80110d8:	6909      	ldr	r1, [r1, #16]
 80110da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110de:	eba3 0901 	sub.w	r9, r3, r1
 80110e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110e6:	1c7b      	adds	r3, r7, #1
 80110e8:	444b      	add	r3, r9
 80110ea:	106d      	asrs	r5, r5, #1
 80110ec:	429d      	cmp	r5, r3
 80110ee:	bf38      	it	cc
 80110f0:	461d      	movcc	r5, r3
 80110f2:	0553      	lsls	r3, r2, #21
 80110f4:	d527      	bpl.n	8011146 <__ssputs_r+0x8e>
 80110f6:	4629      	mov	r1, r5
 80110f8:	f7fe fc70 	bl	800f9dc <_malloc_r>
 80110fc:	4606      	mov	r6, r0
 80110fe:	b360      	cbz	r0, 801115a <__ssputs_r+0xa2>
 8011100:	6921      	ldr	r1, [r4, #16]
 8011102:	464a      	mov	r2, r9
 8011104:	f000 fa18 	bl	8011538 <memcpy>
 8011108:	89a3      	ldrh	r3, [r4, #12]
 801110a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801110e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011112:	81a3      	strh	r3, [r4, #12]
 8011114:	6126      	str	r6, [r4, #16]
 8011116:	6165      	str	r5, [r4, #20]
 8011118:	444e      	add	r6, r9
 801111a:	eba5 0509 	sub.w	r5, r5, r9
 801111e:	6026      	str	r6, [r4, #0]
 8011120:	60a5      	str	r5, [r4, #8]
 8011122:	463e      	mov	r6, r7
 8011124:	42be      	cmp	r6, r7
 8011126:	d900      	bls.n	801112a <__ssputs_r+0x72>
 8011128:	463e      	mov	r6, r7
 801112a:	6820      	ldr	r0, [r4, #0]
 801112c:	4632      	mov	r2, r6
 801112e:	4641      	mov	r1, r8
 8011130:	f000 f9c6 	bl	80114c0 <memmove>
 8011134:	68a3      	ldr	r3, [r4, #8]
 8011136:	1b9b      	subs	r3, r3, r6
 8011138:	60a3      	str	r3, [r4, #8]
 801113a:	6823      	ldr	r3, [r4, #0]
 801113c:	4433      	add	r3, r6
 801113e:	6023      	str	r3, [r4, #0]
 8011140:	2000      	movs	r0, #0
 8011142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011146:	462a      	mov	r2, r5
 8011148:	f000 fd8b 	bl	8011c62 <_realloc_r>
 801114c:	4606      	mov	r6, r0
 801114e:	2800      	cmp	r0, #0
 8011150:	d1e0      	bne.n	8011114 <__ssputs_r+0x5c>
 8011152:	6921      	ldr	r1, [r4, #16]
 8011154:	4650      	mov	r0, sl
 8011156:	f7fe fbcd 	bl	800f8f4 <_free_r>
 801115a:	230c      	movs	r3, #12
 801115c:	f8ca 3000 	str.w	r3, [sl]
 8011160:	89a3      	ldrh	r3, [r4, #12]
 8011162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011166:	81a3      	strh	r3, [r4, #12]
 8011168:	f04f 30ff 	mov.w	r0, #4294967295
 801116c:	e7e9      	b.n	8011142 <__ssputs_r+0x8a>
	...

08011170 <_svfiprintf_r>:
 8011170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011174:	4698      	mov	r8, r3
 8011176:	898b      	ldrh	r3, [r1, #12]
 8011178:	061b      	lsls	r3, r3, #24
 801117a:	b09d      	sub	sp, #116	@ 0x74
 801117c:	4607      	mov	r7, r0
 801117e:	460d      	mov	r5, r1
 8011180:	4614      	mov	r4, r2
 8011182:	d510      	bpl.n	80111a6 <_svfiprintf_r+0x36>
 8011184:	690b      	ldr	r3, [r1, #16]
 8011186:	b973      	cbnz	r3, 80111a6 <_svfiprintf_r+0x36>
 8011188:	2140      	movs	r1, #64	@ 0x40
 801118a:	f7fe fc27 	bl	800f9dc <_malloc_r>
 801118e:	6028      	str	r0, [r5, #0]
 8011190:	6128      	str	r0, [r5, #16]
 8011192:	b930      	cbnz	r0, 80111a2 <_svfiprintf_r+0x32>
 8011194:	230c      	movs	r3, #12
 8011196:	603b      	str	r3, [r7, #0]
 8011198:	f04f 30ff 	mov.w	r0, #4294967295
 801119c:	b01d      	add	sp, #116	@ 0x74
 801119e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a2:	2340      	movs	r3, #64	@ 0x40
 80111a4:	616b      	str	r3, [r5, #20]
 80111a6:	2300      	movs	r3, #0
 80111a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80111aa:	2320      	movs	r3, #32
 80111ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80111b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80111b4:	2330      	movs	r3, #48	@ 0x30
 80111b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011354 <_svfiprintf_r+0x1e4>
 80111ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111be:	f04f 0901 	mov.w	r9, #1
 80111c2:	4623      	mov	r3, r4
 80111c4:	469a      	mov	sl, r3
 80111c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111ca:	b10a      	cbz	r2, 80111d0 <_svfiprintf_r+0x60>
 80111cc:	2a25      	cmp	r2, #37	@ 0x25
 80111ce:	d1f9      	bne.n	80111c4 <_svfiprintf_r+0x54>
 80111d0:	ebba 0b04 	subs.w	fp, sl, r4
 80111d4:	d00b      	beq.n	80111ee <_svfiprintf_r+0x7e>
 80111d6:	465b      	mov	r3, fp
 80111d8:	4622      	mov	r2, r4
 80111da:	4629      	mov	r1, r5
 80111dc:	4638      	mov	r0, r7
 80111de:	f7ff ff6b 	bl	80110b8 <__ssputs_r>
 80111e2:	3001      	adds	r0, #1
 80111e4:	f000 80a7 	beq.w	8011336 <_svfiprintf_r+0x1c6>
 80111e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111ea:	445a      	add	r2, fp
 80111ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80111ee:	f89a 3000 	ldrb.w	r3, [sl]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	f000 809f 	beq.w	8011336 <_svfiprintf_r+0x1c6>
 80111f8:	2300      	movs	r3, #0
 80111fa:	f04f 32ff 	mov.w	r2, #4294967295
 80111fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011202:	f10a 0a01 	add.w	sl, sl, #1
 8011206:	9304      	str	r3, [sp, #16]
 8011208:	9307      	str	r3, [sp, #28]
 801120a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801120e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011210:	4654      	mov	r4, sl
 8011212:	2205      	movs	r2, #5
 8011214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011218:	484e      	ldr	r0, [pc, #312]	@ (8011354 <_svfiprintf_r+0x1e4>)
 801121a:	f7ef f879 	bl	8000310 <memchr>
 801121e:	9a04      	ldr	r2, [sp, #16]
 8011220:	b9d8      	cbnz	r0, 801125a <_svfiprintf_r+0xea>
 8011222:	06d0      	lsls	r0, r2, #27
 8011224:	bf44      	itt	mi
 8011226:	2320      	movmi	r3, #32
 8011228:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801122c:	0711      	lsls	r1, r2, #28
 801122e:	bf44      	itt	mi
 8011230:	232b      	movmi	r3, #43	@ 0x2b
 8011232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011236:	f89a 3000 	ldrb.w	r3, [sl]
 801123a:	2b2a      	cmp	r3, #42	@ 0x2a
 801123c:	d015      	beq.n	801126a <_svfiprintf_r+0xfa>
 801123e:	9a07      	ldr	r2, [sp, #28]
 8011240:	4654      	mov	r4, sl
 8011242:	2000      	movs	r0, #0
 8011244:	f04f 0c0a 	mov.w	ip, #10
 8011248:	4621      	mov	r1, r4
 801124a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801124e:	3b30      	subs	r3, #48	@ 0x30
 8011250:	2b09      	cmp	r3, #9
 8011252:	d94b      	bls.n	80112ec <_svfiprintf_r+0x17c>
 8011254:	b1b0      	cbz	r0, 8011284 <_svfiprintf_r+0x114>
 8011256:	9207      	str	r2, [sp, #28]
 8011258:	e014      	b.n	8011284 <_svfiprintf_r+0x114>
 801125a:	eba0 0308 	sub.w	r3, r0, r8
 801125e:	fa09 f303 	lsl.w	r3, r9, r3
 8011262:	4313      	orrs	r3, r2
 8011264:	9304      	str	r3, [sp, #16]
 8011266:	46a2      	mov	sl, r4
 8011268:	e7d2      	b.n	8011210 <_svfiprintf_r+0xa0>
 801126a:	9b03      	ldr	r3, [sp, #12]
 801126c:	1d19      	adds	r1, r3, #4
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	9103      	str	r1, [sp, #12]
 8011272:	2b00      	cmp	r3, #0
 8011274:	bfbb      	ittet	lt
 8011276:	425b      	neglt	r3, r3
 8011278:	f042 0202 	orrlt.w	r2, r2, #2
 801127c:	9307      	strge	r3, [sp, #28]
 801127e:	9307      	strlt	r3, [sp, #28]
 8011280:	bfb8      	it	lt
 8011282:	9204      	strlt	r2, [sp, #16]
 8011284:	7823      	ldrb	r3, [r4, #0]
 8011286:	2b2e      	cmp	r3, #46	@ 0x2e
 8011288:	d10a      	bne.n	80112a0 <_svfiprintf_r+0x130>
 801128a:	7863      	ldrb	r3, [r4, #1]
 801128c:	2b2a      	cmp	r3, #42	@ 0x2a
 801128e:	d132      	bne.n	80112f6 <_svfiprintf_r+0x186>
 8011290:	9b03      	ldr	r3, [sp, #12]
 8011292:	1d1a      	adds	r2, r3, #4
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	9203      	str	r2, [sp, #12]
 8011298:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801129c:	3402      	adds	r4, #2
 801129e:	9305      	str	r3, [sp, #20]
 80112a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011364 <_svfiprintf_r+0x1f4>
 80112a4:	7821      	ldrb	r1, [r4, #0]
 80112a6:	2203      	movs	r2, #3
 80112a8:	4650      	mov	r0, sl
 80112aa:	f7ef f831 	bl	8000310 <memchr>
 80112ae:	b138      	cbz	r0, 80112c0 <_svfiprintf_r+0x150>
 80112b0:	9b04      	ldr	r3, [sp, #16]
 80112b2:	eba0 000a 	sub.w	r0, r0, sl
 80112b6:	2240      	movs	r2, #64	@ 0x40
 80112b8:	4082      	lsls	r2, r0
 80112ba:	4313      	orrs	r3, r2
 80112bc:	3401      	adds	r4, #1
 80112be:	9304      	str	r3, [sp, #16]
 80112c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112c4:	4824      	ldr	r0, [pc, #144]	@ (8011358 <_svfiprintf_r+0x1e8>)
 80112c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112ca:	2206      	movs	r2, #6
 80112cc:	f7ef f820 	bl	8000310 <memchr>
 80112d0:	2800      	cmp	r0, #0
 80112d2:	d036      	beq.n	8011342 <_svfiprintf_r+0x1d2>
 80112d4:	4b21      	ldr	r3, [pc, #132]	@ (801135c <_svfiprintf_r+0x1ec>)
 80112d6:	bb1b      	cbnz	r3, 8011320 <_svfiprintf_r+0x1b0>
 80112d8:	9b03      	ldr	r3, [sp, #12]
 80112da:	3307      	adds	r3, #7
 80112dc:	f023 0307 	bic.w	r3, r3, #7
 80112e0:	3308      	adds	r3, #8
 80112e2:	9303      	str	r3, [sp, #12]
 80112e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112e6:	4433      	add	r3, r6
 80112e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80112ea:	e76a      	b.n	80111c2 <_svfiprintf_r+0x52>
 80112ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80112f0:	460c      	mov	r4, r1
 80112f2:	2001      	movs	r0, #1
 80112f4:	e7a8      	b.n	8011248 <_svfiprintf_r+0xd8>
 80112f6:	2300      	movs	r3, #0
 80112f8:	3401      	adds	r4, #1
 80112fa:	9305      	str	r3, [sp, #20]
 80112fc:	4619      	mov	r1, r3
 80112fe:	f04f 0c0a 	mov.w	ip, #10
 8011302:	4620      	mov	r0, r4
 8011304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011308:	3a30      	subs	r2, #48	@ 0x30
 801130a:	2a09      	cmp	r2, #9
 801130c:	d903      	bls.n	8011316 <_svfiprintf_r+0x1a6>
 801130e:	2b00      	cmp	r3, #0
 8011310:	d0c6      	beq.n	80112a0 <_svfiprintf_r+0x130>
 8011312:	9105      	str	r1, [sp, #20]
 8011314:	e7c4      	b.n	80112a0 <_svfiprintf_r+0x130>
 8011316:	fb0c 2101 	mla	r1, ip, r1, r2
 801131a:	4604      	mov	r4, r0
 801131c:	2301      	movs	r3, #1
 801131e:	e7f0      	b.n	8011302 <_svfiprintf_r+0x192>
 8011320:	ab03      	add	r3, sp, #12
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	462a      	mov	r2, r5
 8011326:	4b0e      	ldr	r3, [pc, #56]	@ (8011360 <_svfiprintf_r+0x1f0>)
 8011328:	a904      	add	r1, sp, #16
 801132a:	4638      	mov	r0, r7
 801132c:	f7fc fda4 	bl	800de78 <_printf_float>
 8011330:	1c42      	adds	r2, r0, #1
 8011332:	4606      	mov	r6, r0
 8011334:	d1d6      	bne.n	80112e4 <_svfiprintf_r+0x174>
 8011336:	89ab      	ldrh	r3, [r5, #12]
 8011338:	065b      	lsls	r3, r3, #25
 801133a:	f53f af2d 	bmi.w	8011198 <_svfiprintf_r+0x28>
 801133e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011340:	e72c      	b.n	801119c <_svfiprintf_r+0x2c>
 8011342:	ab03      	add	r3, sp, #12
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	462a      	mov	r2, r5
 8011348:	4b05      	ldr	r3, [pc, #20]	@ (8011360 <_svfiprintf_r+0x1f0>)
 801134a:	a904      	add	r1, sp, #16
 801134c:	4638      	mov	r0, r7
 801134e:	f7fd f81b 	bl	800e388 <_printf_i>
 8011352:	e7ed      	b.n	8011330 <_svfiprintf_r+0x1c0>
 8011354:	08012631 	.word	0x08012631
 8011358:	0801263b 	.word	0x0801263b
 801135c:	0800de79 	.word	0x0800de79
 8011360:	080110b9 	.word	0x080110b9
 8011364:	08012637 	.word	0x08012637

08011368 <__sflush_r>:
 8011368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801136c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011370:	0716      	lsls	r6, r2, #28
 8011372:	4605      	mov	r5, r0
 8011374:	460c      	mov	r4, r1
 8011376:	d454      	bmi.n	8011422 <__sflush_r+0xba>
 8011378:	684b      	ldr	r3, [r1, #4]
 801137a:	2b00      	cmp	r3, #0
 801137c:	dc02      	bgt.n	8011384 <__sflush_r+0x1c>
 801137e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011380:	2b00      	cmp	r3, #0
 8011382:	dd48      	ble.n	8011416 <__sflush_r+0xae>
 8011384:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011386:	2e00      	cmp	r6, #0
 8011388:	d045      	beq.n	8011416 <__sflush_r+0xae>
 801138a:	2300      	movs	r3, #0
 801138c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011390:	682f      	ldr	r7, [r5, #0]
 8011392:	6a21      	ldr	r1, [r4, #32]
 8011394:	602b      	str	r3, [r5, #0]
 8011396:	d030      	beq.n	80113fa <__sflush_r+0x92>
 8011398:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	0759      	lsls	r1, r3, #29
 801139e:	d505      	bpl.n	80113ac <__sflush_r+0x44>
 80113a0:	6863      	ldr	r3, [r4, #4]
 80113a2:	1ad2      	subs	r2, r2, r3
 80113a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80113a6:	b10b      	cbz	r3, 80113ac <__sflush_r+0x44>
 80113a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80113aa:	1ad2      	subs	r2, r2, r3
 80113ac:	2300      	movs	r3, #0
 80113ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113b0:	6a21      	ldr	r1, [r4, #32]
 80113b2:	4628      	mov	r0, r5
 80113b4:	47b0      	blx	r6
 80113b6:	1c43      	adds	r3, r0, #1
 80113b8:	89a3      	ldrh	r3, [r4, #12]
 80113ba:	d106      	bne.n	80113ca <__sflush_r+0x62>
 80113bc:	6829      	ldr	r1, [r5, #0]
 80113be:	291d      	cmp	r1, #29
 80113c0:	d82b      	bhi.n	801141a <__sflush_r+0xb2>
 80113c2:	4a2a      	ldr	r2, [pc, #168]	@ (801146c <__sflush_r+0x104>)
 80113c4:	410a      	asrs	r2, r1
 80113c6:	07d6      	lsls	r6, r2, #31
 80113c8:	d427      	bmi.n	801141a <__sflush_r+0xb2>
 80113ca:	2200      	movs	r2, #0
 80113cc:	6062      	str	r2, [r4, #4]
 80113ce:	04d9      	lsls	r1, r3, #19
 80113d0:	6922      	ldr	r2, [r4, #16]
 80113d2:	6022      	str	r2, [r4, #0]
 80113d4:	d504      	bpl.n	80113e0 <__sflush_r+0x78>
 80113d6:	1c42      	adds	r2, r0, #1
 80113d8:	d101      	bne.n	80113de <__sflush_r+0x76>
 80113da:	682b      	ldr	r3, [r5, #0]
 80113dc:	b903      	cbnz	r3, 80113e0 <__sflush_r+0x78>
 80113de:	6560      	str	r0, [r4, #84]	@ 0x54
 80113e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80113e2:	602f      	str	r7, [r5, #0]
 80113e4:	b1b9      	cbz	r1, 8011416 <__sflush_r+0xae>
 80113e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113ea:	4299      	cmp	r1, r3
 80113ec:	d002      	beq.n	80113f4 <__sflush_r+0x8c>
 80113ee:	4628      	mov	r0, r5
 80113f0:	f7fe fa80 	bl	800f8f4 <_free_r>
 80113f4:	2300      	movs	r3, #0
 80113f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80113f8:	e00d      	b.n	8011416 <__sflush_r+0xae>
 80113fa:	2301      	movs	r3, #1
 80113fc:	4628      	mov	r0, r5
 80113fe:	47b0      	blx	r6
 8011400:	4602      	mov	r2, r0
 8011402:	1c50      	adds	r0, r2, #1
 8011404:	d1c9      	bne.n	801139a <__sflush_r+0x32>
 8011406:	682b      	ldr	r3, [r5, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d0c6      	beq.n	801139a <__sflush_r+0x32>
 801140c:	2b1d      	cmp	r3, #29
 801140e:	d001      	beq.n	8011414 <__sflush_r+0xac>
 8011410:	2b16      	cmp	r3, #22
 8011412:	d11e      	bne.n	8011452 <__sflush_r+0xea>
 8011414:	602f      	str	r7, [r5, #0]
 8011416:	2000      	movs	r0, #0
 8011418:	e022      	b.n	8011460 <__sflush_r+0xf8>
 801141a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801141e:	b21b      	sxth	r3, r3
 8011420:	e01b      	b.n	801145a <__sflush_r+0xf2>
 8011422:	690f      	ldr	r7, [r1, #16]
 8011424:	2f00      	cmp	r7, #0
 8011426:	d0f6      	beq.n	8011416 <__sflush_r+0xae>
 8011428:	0793      	lsls	r3, r2, #30
 801142a:	680e      	ldr	r6, [r1, #0]
 801142c:	bf08      	it	eq
 801142e:	694b      	ldreq	r3, [r1, #20]
 8011430:	600f      	str	r7, [r1, #0]
 8011432:	bf18      	it	ne
 8011434:	2300      	movne	r3, #0
 8011436:	eba6 0807 	sub.w	r8, r6, r7
 801143a:	608b      	str	r3, [r1, #8]
 801143c:	f1b8 0f00 	cmp.w	r8, #0
 8011440:	dde9      	ble.n	8011416 <__sflush_r+0xae>
 8011442:	6a21      	ldr	r1, [r4, #32]
 8011444:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011446:	4643      	mov	r3, r8
 8011448:	463a      	mov	r2, r7
 801144a:	4628      	mov	r0, r5
 801144c:	47b0      	blx	r6
 801144e:	2800      	cmp	r0, #0
 8011450:	dc08      	bgt.n	8011464 <__sflush_r+0xfc>
 8011452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801145a:	81a3      	strh	r3, [r4, #12]
 801145c:	f04f 30ff 	mov.w	r0, #4294967295
 8011460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011464:	4407      	add	r7, r0
 8011466:	eba8 0800 	sub.w	r8, r8, r0
 801146a:	e7e7      	b.n	801143c <__sflush_r+0xd4>
 801146c:	dfbffffe 	.word	0xdfbffffe

08011470 <_fflush_r>:
 8011470:	b538      	push	{r3, r4, r5, lr}
 8011472:	690b      	ldr	r3, [r1, #16]
 8011474:	4605      	mov	r5, r0
 8011476:	460c      	mov	r4, r1
 8011478:	b913      	cbnz	r3, 8011480 <_fflush_r+0x10>
 801147a:	2500      	movs	r5, #0
 801147c:	4628      	mov	r0, r5
 801147e:	bd38      	pop	{r3, r4, r5, pc}
 8011480:	b118      	cbz	r0, 801148a <_fflush_r+0x1a>
 8011482:	6a03      	ldr	r3, [r0, #32]
 8011484:	b90b      	cbnz	r3, 801148a <_fflush_r+0x1a>
 8011486:	f7fd fb37 	bl	800eaf8 <__sinit>
 801148a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d0f3      	beq.n	801147a <_fflush_r+0xa>
 8011492:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011494:	07d0      	lsls	r0, r2, #31
 8011496:	d404      	bmi.n	80114a2 <_fflush_r+0x32>
 8011498:	0599      	lsls	r1, r3, #22
 801149a:	d402      	bmi.n	80114a2 <_fflush_r+0x32>
 801149c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801149e:	f7fd fc42 	bl	800ed26 <__retarget_lock_acquire_recursive>
 80114a2:	4628      	mov	r0, r5
 80114a4:	4621      	mov	r1, r4
 80114a6:	f7ff ff5f 	bl	8011368 <__sflush_r>
 80114aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80114ac:	07da      	lsls	r2, r3, #31
 80114ae:	4605      	mov	r5, r0
 80114b0:	d4e4      	bmi.n	801147c <_fflush_r+0xc>
 80114b2:	89a3      	ldrh	r3, [r4, #12]
 80114b4:	059b      	lsls	r3, r3, #22
 80114b6:	d4e1      	bmi.n	801147c <_fflush_r+0xc>
 80114b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114ba:	f7fd fc35 	bl	800ed28 <__retarget_lock_release_recursive>
 80114be:	e7dd      	b.n	801147c <_fflush_r+0xc>

080114c0 <memmove>:
 80114c0:	4288      	cmp	r0, r1
 80114c2:	b510      	push	{r4, lr}
 80114c4:	eb01 0402 	add.w	r4, r1, r2
 80114c8:	d902      	bls.n	80114d0 <memmove+0x10>
 80114ca:	4284      	cmp	r4, r0
 80114cc:	4623      	mov	r3, r4
 80114ce:	d807      	bhi.n	80114e0 <memmove+0x20>
 80114d0:	1e43      	subs	r3, r0, #1
 80114d2:	42a1      	cmp	r1, r4
 80114d4:	d008      	beq.n	80114e8 <memmove+0x28>
 80114d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80114de:	e7f8      	b.n	80114d2 <memmove+0x12>
 80114e0:	4402      	add	r2, r0
 80114e2:	4601      	mov	r1, r0
 80114e4:	428a      	cmp	r2, r1
 80114e6:	d100      	bne.n	80114ea <memmove+0x2a>
 80114e8:	bd10      	pop	{r4, pc}
 80114ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80114ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80114f2:	e7f7      	b.n	80114e4 <memmove+0x24>

080114f4 <strncmp>:
 80114f4:	b510      	push	{r4, lr}
 80114f6:	b16a      	cbz	r2, 8011514 <strncmp+0x20>
 80114f8:	3901      	subs	r1, #1
 80114fa:	1884      	adds	r4, r0, r2
 80114fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011500:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011504:	429a      	cmp	r2, r3
 8011506:	d103      	bne.n	8011510 <strncmp+0x1c>
 8011508:	42a0      	cmp	r0, r4
 801150a:	d001      	beq.n	8011510 <strncmp+0x1c>
 801150c:	2a00      	cmp	r2, #0
 801150e:	d1f5      	bne.n	80114fc <strncmp+0x8>
 8011510:	1ad0      	subs	r0, r2, r3
 8011512:	bd10      	pop	{r4, pc}
 8011514:	4610      	mov	r0, r2
 8011516:	e7fc      	b.n	8011512 <strncmp+0x1e>

08011518 <_sbrk_r>:
 8011518:	b538      	push	{r3, r4, r5, lr}
 801151a:	4d06      	ldr	r5, [pc, #24]	@ (8011534 <_sbrk_r+0x1c>)
 801151c:	2300      	movs	r3, #0
 801151e:	4604      	mov	r4, r0
 8011520:	4608      	mov	r0, r1
 8011522:	602b      	str	r3, [r5, #0]
 8011524:	f7f1 fec6 	bl	80032b4 <_sbrk>
 8011528:	1c43      	adds	r3, r0, #1
 801152a:	d102      	bne.n	8011532 <_sbrk_r+0x1a>
 801152c:	682b      	ldr	r3, [r5, #0]
 801152e:	b103      	cbz	r3, 8011532 <_sbrk_r+0x1a>
 8011530:	6023      	str	r3, [r4, #0]
 8011532:	bd38      	pop	{r3, r4, r5, pc}
 8011534:	24000cfc 	.word	0x24000cfc

08011538 <memcpy>:
 8011538:	440a      	add	r2, r1
 801153a:	4291      	cmp	r1, r2
 801153c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011540:	d100      	bne.n	8011544 <memcpy+0xc>
 8011542:	4770      	bx	lr
 8011544:	b510      	push	{r4, lr}
 8011546:	f811 4b01 	ldrb.w	r4, [r1], #1
 801154a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801154e:	4291      	cmp	r1, r2
 8011550:	d1f9      	bne.n	8011546 <memcpy+0xe>
 8011552:	bd10      	pop	{r4, pc}
 8011554:	0000      	movs	r0, r0
	...

08011558 <nan>:
 8011558:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011560 <nan+0x8>
 801155c:	4770      	bx	lr
 801155e:	bf00      	nop
 8011560:	00000000 	.word	0x00000000
 8011564:	7ff80000 	.word	0x7ff80000

08011568 <__assert_func>:
 8011568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801156a:	4614      	mov	r4, r2
 801156c:	461a      	mov	r2, r3
 801156e:	4b09      	ldr	r3, [pc, #36]	@ (8011594 <__assert_func+0x2c>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	4605      	mov	r5, r0
 8011574:	68d8      	ldr	r0, [r3, #12]
 8011576:	b954      	cbnz	r4, 801158e <__assert_func+0x26>
 8011578:	4b07      	ldr	r3, [pc, #28]	@ (8011598 <__assert_func+0x30>)
 801157a:	461c      	mov	r4, r3
 801157c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011580:	9100      	str	r1, [sp, #0]
 8011582:	462b      	mov	r3, r5
 8011584:	4905      	ldr	r1, [pc, #20]	@ (801159c <__assert_func+0x34>)
 8011586:	f000 fba7 	bl	8011cd8 <fiprintf>
 801158a:	f000 fbb7 	bl	8011cfc <abort>
 801158e:	4b04      	ldr	r3, [pc, #16]	@ (80115a0 <__assert_func+0x38>)
 8011590:	e7f4      	b.n	801157c <__assert_func+0x14>
 8011592:	bf00      	nop
 8011594:	2400001c 	.word	0x2400001c
 8011598:	08012685 	.word	0x08012685
 801159c:	08012657 	.word	0x08012657
 80115a0:	0801264a 	.word	0x0801264a

080115a4 <_calloc_r>:
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	fba1 5402 	umull	r5, r4, r1, r2
 80115aa:	b93c      	cbnz	r4, 80115bc <_calloc_r+0x18>
 80115ac:	4629      	mov	r1, r5
 80115ae:	f7fe fa15 	bl	800f9dc <_malloc_r>
 80115b2:	4606      	mov	r6, r0
 80115b4:	b928      	cbnz	r0, 80115c2 <_calloc_r+0x1e>
 80115b6:	2600      	movs	r6, #0
 80115b8:	4630      	mov	r0, r6
 80115ba:	bd70      	pop	{r4, r5, r6, pc}
 80115bc:	220c      	movs	r2, #12
 80115be:	6002      	str	r2, [r0, #0]
 80115c0:	e7f9      	b.n	80115b6 <_calloc_r+0x12>
 80115c2:	462a      	mov	r2, r5
 80115c4:	4621      	mov	r1, r4
 80115c6:	f7fd fb30 	bl	800ec2a <memset>
 80115ca:	e7f5      	b.n	80115b8 <_calloc_r+0x14>

080115cc <rshift>:
 80115cc:	6903      	ldr	r3, [r0, #16]
 80115ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80115d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80115da:	f100 0414 	add.w	r4, r0, #20
 80115de:	dd45      	ble.n	801166c <rshift+0xa0>
 80115e0:	f011 011f 	ands.w	r1, r1, #31
 80115e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80115e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80115ec:	d10c      	bne.n	8011608 <rshift+0x3c>
 80115ee:	f100 0710 	add.w	r7, r0, #16
 80115f2:	4629      	mov	r1, r5
 80115f4:	42b1      	cmp	r1, r6
 80115f6:	d334      	bcc.n	8011662 <rshift+0x96>
 80115f8:	1a9b      	subs	r3, r3, r2
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	1eea      	subs	r2, r5, #3
 80115fe:	4296      	cmp	r6, r2
 8011600:	bf38      	it	cc
 8011602:	2300      	movcc	r3, #0
 8011604:	4423      	add	r3, r4
 8011606:	e015      	b.n	8011634 <rshift+0x68>
 8011608:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801160c:	f1c1 0820 	rsb	r8, r1, #32
 8011610:	40cf      	lsrs	r7, r1
 8011612:	f105 0e04 	add.w	lr, r5, #4
 8011616:	46a1      	mov	r9, r4
 8011618:	4576      	cmp	r6, lr
 801161a:	46f4      	mov	ip, lr
 801161c:	d815      	bhi.n	801164a <rshift+0x7e>
 801161e:	1a9a      	subs	r2, r3, r2
 8011620:	0092      	lsls	r2, r2, #2
 8011622:	3a04      	subs	r2, #4
 8011624:	3501      	adds	r5, #1
 8011626:	42ae      	cmp	r6, r5
 8011628:	bf38      	it	cc
 801162a:	2200      	movcc	r2, #0
 801162c:	18a3      	adds	r3, r4, r2
 801162e:	50a7      	str	r7, [r4, r2]
 8011630:	b107      	cbz	r7, 8011634 <rshift+0x68>
 8011632:	3304      	adds	r3, #4
 8011634:	1b1a      	subs	r2, r3, r4
 8011636:	42a3      	cmp	r3, r4
 8011638:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801163c:	bf08      	it	eq
 801163e:	2300      	moveq	r3, #0
 8011640:	6102      	str	r2, [r0, #16]
 8011642:	bf08      	it	eq
 8011644:	6143      	streq	r3, [r0, #20]
 8011646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801164a:	f8dc c000 	ldr.w	ip, [ip]
 801164e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011652:	ea4c 0707 	orr.w	r7, ip, r7
 8011656:	f849 7b04 	str.w	r7, [r9], #4
 801165a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801165e:	40cf      	lsrs	r7, r1
 8011660:	e7da      	b.n	8011618 <rshift+0x4c>
 8011662:	f851 cb04 	ldr.w	ip, [r1], #4
 8011666:	f847 cf04 	str.w	ip, [r7, #4]!
 801166a:	e7c3      	b.n	80115f4 <rshift+0x28>
 801166c:	4623      	mov	r3, r4
 801166e:	e7e1      	b.n	8011634 <rshift+0x68>

08011670 <__hexdig_fun>:
 8011670:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011674:	2b09      	cmp	r3, #9
 8011676:	d802      	bhi.n	801167e <__hexdig_fun+0xe>
 8011678:	3820      	subs	r0, #32
 801167a:	b2c0      	uxtb	r0, r0
 801167c:	4770      	bx	lr
 801167e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011682:	2b05      	cmp	r3, #5
 8011684:	d801      	bhi.n	801168a <__hexdig_fun+0x1a>
 8011686:	3847      	subs	r0, #71	@ 0x47
 8011688:	e7f7      	b.n	801167a <__hexdig_fun+0xa>
 801168a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801168e:	2b05      	cmp	r3, #5
 8011690:	d801      	bhi.n	8011696 <__hexdig_fun+0x26>
 8011692:	3827      	subs	r0, #39	@ 0x27
 8011694:	e7f1      	b.n	801167a <__hexdig_fun+0xa>
 8011696:	2000      	movs	r0, #0
 8011698:	4770      	bx	lr
	...

0801169c <__gethex>:
 801169c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a0:	b085      	sub	sp, #20
 80116a2:	468a      	mov	sl, r1
 80116a4:	9302      	str	r3, [sp, #8]
 80116a6:	680b      	ldr	r3, [r1, #0]
 80116a8:	9001      	str	r0, [sp, #4]
 80116aa:	4690      	mov	r8, r2
 80116ac:	1c9c      	adds	r4, r3, #2
 80116ae:	46a1      	mov	r9, r4
 80116b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80116b4:	2830      	cmp	r0, #48	@ 0x30
 80116b6:	d0fa      	beq.n	80116ae <__gethex+0x12>
 80116b8:	eba9 0303 	sub.w	r3, r9, r3
 80116bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80116c0:	f7ff ffd6 	bl	8011670 <__hexdig_fun>
 80116c4:	4605      	mov	r5, r0
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d168      	bne.n	801179c <__gethex+0x100>
 80116ca:	49a0      	ldr	r1, [pc, #640]	@ (801194c <__gethex+0x2b0>)
 80116cc:	2201      	movs	r2, #1
 80116ce:	4648      	mov	r0, r9
 80116d0:	f7ff ff10 	bl	80114f4 <strncmp>
 80116d4:	4607      	mov	r7, r0
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d167      	bne.n	80117aa <__gethex+0x10e>
 80116da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80116de:	4626      	mov	r6, r4
 80116e0:	f7ff ffc6 	bl	8011670 <__hexdig_fun>
 80116e4:	2800      	cmp	r0, #0
 80116e6:	d062      	beq.n	80117ae <__gethex+0x112>
 80116e8:	4623      	mov	r3, r4
 80116ea:	7818      	ldrb	r0, [r3, #0]
 80116ec:	2830      	cmp	r0, #48	@ 0x30
 80116ee:	4699      	mov	r9, r3
 80116f0:	f103 0301 	add.w	r3, r3, #1
 80116f4:	d0f9      	beq.n	80116ea <__gethex+0x4e>
 80116f6:	f7ff ffbb 	bl	8011670 <__hexdig_fun>
 80116fa:	fab0 f580 	clz	r5, r0
 80116fe:	096d      	lsrs	r5, r5, #5
 8011700:	f04f 0b01 	mov.w	fp, #1
 8011704:	464a      	mov	r2, r9
 8011706:	4616      	mov	r6, r2
 8011708:	3201      	adds	r2, #1
 801170a:	7830      	ldrb	r0, [r6, #0]
 801170c:	f7ff ffb0 	bl	8011670 <__hexdig_fun>
 8011710:	2800      	cmp	r0, #0
 8011712:	d1f8      	bne.n	8011706 <__gethex+0x6a>
 8011714:	498d      	ldr	r1, [pc, #564]	@ (801194c <__gethex+0x2b0>)
 8011716:	2201      	movs	r2, #1
 8011718:	4630      	mov	r0, r6
 801171a:	f7ff feeb 	bl	80114f4 <strncmp>
 801171e:	2800      	cmp	r0, #0
 8011720:	d13f      	bne.n	80117a2 <__gethex+0x106>
 8011722:	b944      	cbnz	r4, 8011736 <__gethex+0x9a>
 8011724:	1c74      	adds	r4, r6, #1
 8011726:	4622      	mov	r2, r4
 8011728:	4616      	mov	r6, r2
 801172a:	3201      	adds	r2, #1
 801172c:	7830      	ldrb	r0, [r6, #0]
 801172e:	f7ff ff9f 	bl	8011670 <__hexdig_fun>
 8011732:	2800      	cmp	r0, #0
 8011734:	d1f8      	bne.n	8011728 <__gethex+0x8c>
 8011736:	1ba4      	subs	r4, r4, r6
 8011738:	00a7      	lsls	r7, r4, #2
 801173a:	7833      	ldrb	r3, [r6, #0]
 801173c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011740:	2b50      	cmp	r3, #80	@ 0x50
 8011742:	d13e      	bne.n	80117c2 <__gethex+0x126>
 8011744:	7873      	ldrb	r3, [r6, #1]
 8011746:	2b2b      	cmp	r3, #43	@ 0x2b
 8011748:	d033      	beq.n	80117b2 <__gethex+0x116>
 801174a:	2b2d      	cmp	r3, #45	@ 0x2d
 801174c:	d034      	beq.n	80117b8 <__gethex+0x11c>
 801174e:	1c71      	adds	r1, r6, #1
 8011750:	2400      	movs	r4, #0
 8011752:	7808      	ldrb	r0, [r1, #0]
 8011754:	f7ff ff8c 	bl	8011670 <__hexdig_fun>
 8011758:	1e43      	subs	r3, r0, #1
 801175a:	b2db      	uxtb	r3, r3
 801175c:	2b18      	cmp	r3, #24
 801175e:	d830      	bhi.n	80117c2 <__gethex+0x126>
 8011760:	f1a0 0210 	sub.w	r2, r0, #16
 8011764:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011768:	f7ff ff82 	bl	8011670 <__hexdig_fun>
 801176c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011770:	fa5f fc8c 	uxtb.w	ip, ip
 8011774:	f1bc 0f18 	cmp.w	ip, #24
 8011778:	f04f 030a 	mov.w	r3, #10
 801177c:	d91e      	bls.n	80117bc <__gethex+0x120>
 801177e:	b104      	cbz	r4, 8011782 <__gethex+0xe6>
 8011780:	4252      	negs	r2, r2
 8011782:	4417      	add	r7, r2
 8011784:	f8ca 1000 	str.w	r1, [sl]
 8011788:	b1ed      	cbz	r5, 80117c6 <__gethex+0x12a>
 801178a:	f1bb 0f00 	cmp.w	fp, #0
 801178e:	bf0c      	ite	eq
 8011790:	2506      	moveq	r5, #6
 8011792:	2500      	movne	r5, #0
 8011794:	4628      	mov	r0, r5
 8011796:	b005      	add	sp, #20
 8011798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179c:	2500      	movs	r5, #0
 801179e:	462c      	mov	r4, r5
 80117a0:	e7b0      	b.n	8011704 <__gethex+0x68>
 80117a2:	2c00      	cmp	r4, #0
 80117a4:	d1c7      	bne.n	8011736 <__gethex+0x9a>
 80117a6:	4627      	mov	r7, r4
 80117a8:	e7c7      	b.n	801173a <__gethex+0x9e>
 80117aa:	464e      	mov	r6, r9
 80117ac:	462f      	mov	r7, r5
 80117ae:	2501      	movs	r5, #1
 80117b0:	e7c3      	b.n	801173a <__gethex+0x9e>
 80117b2:	2400      	movs	r4, #0
 80117b4:	1cb1      	adds	r1, r6, #2
 80117b6:	e7cc      	b.n	8011752 <__gethex+0xb6>
 80117b8:	2401      	movs	r4, #1
 80117ba:	e7fb      	b.n	80117b4 <__gethex+0x118>
 80117bc:	fb03 0002 	mla	r0, r3, r2, r0
 80117c0:	e7ce      	b.n	8011760 <__gethex+0xc4>
 80117c2:	4631      	mov	r1, r6
 80117c4:	e7de      	b.n	8011784 <__gethex+0xe8>
 80117c6:	eba6 0309 	sub.w	r3, r6, r9
 80117ca:	3b01      	subs	r3, #1
 80117cc:	4629      	mov	r1, r5
 80117ce:	2b07      	cmp	r3, #7
 80117d0:	dc0a      	bgt.n	80117e8 <__gethex+0x14c>
 80117d2:	9801      	ldr	r0, [sp, #4]
 80117d4:	f7fe f98e 	bl	800faf4 <_Balloc>
 80117d8:	4604      	mov	r4, r0
 80117da:	b940      	cbnz	r0, 80117ee <__gethex+0x152>
 80117dc:	4b5c      	ldr	r3, [pc, #368]	@ (8011950 <__gethex+0x2b4>)
 80117de:	4602      	mov	r2, r0
 80117e0:	21e4      	movs	r1, #228	@ 0xe4
 80117e2:	485c      	ldr	r0, [pc, #368]	@ (8011954 <__gethex+0x2b8>)
 80117e4:	f7ff fec0 	bl	8011568 <__assert_func>
 80117e8:	3101      	adds	r1, #1
 80117ea:	105b      	asrs	r3, r3, #1
 80117ec:	e7ef      	b.n	80117ce <__gethex+0x132>
 80117ee:	f100 0a14 	add.w	sl, r0, #20
 80117f2:	2300      	movs	r3, #0
 80117f4:	4655      	mov	r5, sl
 80117f6:	469b      	mov	fp, r3
 80117f8:	45b1      	cmp	r9, r6
 80117fa:	d337      	bcc.n	801186c <__gethex+0x1d0>
 80117fc:	f845 bb04 	str.w	fp, [r5], #4
 8011800:	eba5 050a 	sub.w	r5, r5, sl
 8011804:	10ad      	asrs	r5, r5, #2
 8011806:	6125      	str	r5, [r4, #16]
 8011808:	4658      	mov	r0, fp
 801180a:	f7fe fa65 	bl	800fcd8 <__hi0bits>
 801180e:	016d      	lsls	r5, r5, #5
 8011810:	f8d8 6000 	ldr.w	r6, [r8]
 8011814:	1a2d      	subs	r5, r5, r0
 8011816:	42b5      	cmp	r5, r6
 8011818:	dd54      	ble.n	80118c4 <__gethex+0x228>
 801181a:	1bad      	subs	r5, r5, r6
 801181c:	4629      	mov	r1, r5
 801181e:	4620      	mov	r0, r4
 8011820:	f7fe fdf6 	bl	8010410 <__any_on>
 8011824:	4681      	mov	r9, r0
 8011826:	b178      	cbz	r0, 8011848 <__gethex+0x1ac>
 8011828:	1e6b      	subs	r3, r5, #1
 801182a:	1159      	asrs	r1, r3, #5
 801182c:	f003 021f 	and.w	r2, r3, #31
 8011830:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011834:	f04f 0901 	mov.w	r9, #1
 8011838:	fa09 f202 	lsl.w	r2, r9, r2
 801183c:	420a      	tst	r2, r1
 801183e:	d003      	beq.n	8011848 <__gethex+0x1ac>
 8011840:	454b      	cmp	r3, r9
 8011842:	dc36      	bgt.n	80118b2 <__gethex+0x216>
 8011844:	f04f 0902 	mov.w	r9, #2
 8011848:	4629      	mov	r1, r5
 801184a:	4620      	mov	r0, r4
 801184c:	f7ff febe 	bl	80115cc <rshift>
 8011850:	442f      	add	r7, r5
 8011852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011856:	42bb      	cmp	r3, r7
 8011858:	da42      	bge.n	80118e0 <__gethex+0x244>
 801185a:	9801      	ldr	r0, [sp, #4]
 801185c:	4621      	mov	r1, r4
 801185e:	f7fe f989 	bl	800fb74 <_Bfree>
 8011862:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011864:	2300      	movs	r3, #0
 8011866:	6013      	str	r3, [r2, #0]
 8011868:	25a3      	movs	r5, #163	@ 0xa3
 801186a:	e793      	b.n	8011794 <__gethex+0xf8>
 801186c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011870:	2a2e      	cmp	r2, #46	@ 0x2e
 8011872:	d012      	beq.n	801189a <__gethex+0x1fe>
 8011874:	2b20      	cmp	r3, #32
 8011876:	d104      	bne.n	8011882 <__gethex+0x1e6>
 8011878:	f845 bb04 	str.w	fp, [r5], #4
 801187c:	f04f 0b00 	mov.w	fp, #0
 8011880:	465b      	mov	r3, fp
 8011882:	7830      	ldrb	r0, [r6, #0]
 8011884:	9303      	str	r3, [sp, #12]
 8011886:	f7ff fef3 	bl	8011670 <__hexdig_fun>
 801188a:	9b03      	ldr	r3, [sp, #12]
 801188c:	f000 000f 	and.w	r0, r0, #15
 8011890:	4098      	lsls	r0, r3
 8011892:	ea4b 0b00 	orr.w	fp, fp, r0
 8011896:	3304      	adds	r3, #4
 8011898:	e7ae      	b.n	80117f8 <__gethex+0x15c>
 801189a:	45b1      	cmp	r9, r6
 801189c:	d8ea      	bhi.n	8011874 <__gethex+0x1d8>
 801189e:	492b      	ldr	r1, [pc, #172]	@ (801194c <__gethex+0x2b0>)
 80118a0:	9303      	str	r3, [sp, #12]
 80118a2:	2201      	movs	r2, #1
 80118a4:	4630      	mov	r0, r6
 80118a6:	f7ff fe25 	bl	80114f4 <strncmp>
 80118aa:	9b03      	ldr	r3, [sp, #12]
 80118ac:	2800      	cmp	r0, #0
 80118ae:	d1e1      	bne.n	8011874 <__gethex+0x1d8>
 80118b0:	e7a2      	b.n	80117f8 <__gethex+0x15c>
 80118b2:	1ea9      	subs	r1, r5, #2
 80118b4:	4620      	mov	r0, r4
 80118b6:	f7fe fdab 	bl	8010410 <__any_on>
 80118ba:	2800      	cmp	r0, #0
 80118bc:	d0c2      	beq.n	8011844 <__gethex+0x1a8>
 80118be:	f04f 0903 	mov.w	r9, #3
 80118c2:	e7c1      	b.n	8011848 <__gethex+0x1ac>
 80118c4:	da09      	bge.n	80118da <__gethex+0x23e>
 80118c6:	1b75      	subs	r5, r6, r5
 80118c8:	4621      	mov	r1, r4
 80118ca:	9801      	ldr	r0, [sp, #4]
 80118cc:	462a      	mov	r2, r5
 80118ce:	f7fe fb69 	bl	800ffa4 <__lshift>
 80118d2:	1b7f      	subs	r7, r7, r5
 80118d4:	4604      	mov	r4, r0
 80118d6:	f100 0a14 	add.w	sl, r0, #20
 80118da:	f04f 0900 	mov.w	r9, #0
 80118de:	e7b8      	b.n	8011852 <__gethex+0x1b6>
 80118e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80118e4:	42bd      	cmp	r5, r7
 80118e6:	dd6f      	ble.n	80119c8 <__gethex+0x32c>
 80118e8:	1bed      	subs	r5, r5, r7
 80118ea:	42ae      	cmp	r6, r5
 80118ec:	dc34      	bgt.n	8011958 <__gethex+0x2bc>
 80118ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118f2:	2b02      	cmp	r3, #2
 80118f4:	d022      	beq.n	801193c <__gethex+0x2a0>
 80118f6:	2b03      	cmp	r3, #3
 80118f8:	d024      	beq.n	8011944 <__gethex+0x2a8>
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d115      	bne.n	801192a <__gethex+0x28e>
 80118fe:	42ae      	cmp	r6, r5
 8011900:	d113      	bne.n	801192a <__gethex+0x28e>
 8011902:	2e01      	cmp	r6, #1
 8011904:	d10b      	bne.n	801191e <__gethex+0x282>
 8011906:	9a02      	ldr	r2, [sp, #8]
 8011908:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801190c:	6013      	str	r3, [r2, #0]
 801190e:	2301      	movs	r3, #1
 8011910:	6123      	str	r3, [r4, #16]
 8011912:	f8ca 3000 	str.w	r3, [sl]
 8011916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011918:	2562      	movs	r5, #98	@ 0x62
 801191a:	601c      	str	r4, [r3, #0]
 801191c:	e73a      	b.n	8011794 <__gethex+0xf8>
 801191e:	1e71      	subs	r1, r6, #1
 8011920:	4620      	mov	r0, r4
 8011922:	f7fe fd75 	bl	8010410 <__any_on>
 8011926:	2800      	cmp	r0, #0
 8011928:	d1ed      	bne.n	8011906 <__gethex+0x26a>
 801192a:	9801      	ldr	r0, [sp, #4]
 801192c:	4621      	mov	r1, r4
 801192e:	f7fe f921 	bl	800fb74 <_Bfree>
 8011932:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011934:	2300      	movs	r3, #0
 8011936:	6013      	str	r3, [r2, #0]
 8011938:	2550      	movs	r5, #80	@ 0x50
 801193a:	e72b      	b.n	8011794 <__gethex+0xf8>
 801193c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1f3      	bne.n	801192a <__gethex+0x28e>
 8011942:	e7e0      	b.n	8011906 <__gethex+0x26a>
 8011944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011946:	2b00      	cmp	r3, #0
 8011948:	d1dd      	bne.n	8011906 <__gethex+0x26a>
 801194a:	e7ee      	b.n	801192a <__gethex+0x28e>
 801194c:	080124d8 	.word	0x080124d8
 8011950:	0801236d 	.word	0x0801236d
 8011954:	08012686 	.word	0x08012686
 8011958:	1e6f      	subs	r7, r5, #1
 801195a:	f1b9 0f00 	cmp.w	r9, #0
 801195e:	d130      	bne.n	80119c2 <__gethex+0x326>
 8011960:	b127      	cbz	r7, 801196c <__gethex+0x2d0>
 8011962:	4639      	mov	r1, r7
 8011964:	4620      	mov	r0, r4
 8011966:	f7fe fd53 	bl	8010410 <__any_on>
 801196a:	4681      	mov	r9, r0
 801196c:	117a      	asrs	r2, r7, #5
 801196e:	2301      	movs	r3, #1
 8011970:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011974:	f007 071f 	and.w	r7, r7, #31
 8011978:	40bb      	lsls	r3, r7
 801197a:	4213      	tst	r3, r2
 801197c:	4629      	mov	r1, r5
 801197e:	4620      	mov	r0, r4
 8011980:	bf18      	it	ne
 8011982:	f049 0902 	orrne.w	r9, r9, #2
 8011986:	f7ff fe21 	bl	80115cc <rshift>
 801198a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801198e:	1b76      	subs	r6, r6, r5
 8011990:	2502      	movs	r5, #2
 8011992:	f1b9 0f00 	cmp.w	r9, #0
 8011996:	d047      	beq.n	8011a28 <__gethex+0x38c>
 8011998:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801199c:	2b02      	cmp	r3, #2
 801199e:	d015      	beq.n	80119cc <__gethex+0x330>
 80119a0:	2b03      	cmp	r3, #3
 80119a2:	d017      	beq.n	80119d4 <__gethex+0x338>
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d109      	bne.n	80119bc <__gethex+0x320>
 80119a8:	f019 0f02 	tst.w	r9, #2
 80119ac:	d006      	beq.n	80119bc <__gethex+0x320>
 80119ae:	f8da 3000 	ldr.w	r3, [sl]
 80119b2:	ea49 0903 	orr.w	r9, r9, r3
 80119b6:	f019 0f01 	tst.w	r9, #1
 80119ba:	d10e      	bne.n	80119da <__gethex+0x33e>
 80119bc:	f045 0510 	orr.w	r5, r5, #16
 80119c0:	e032      	b.n	8011a28 <__gethex+0x38c>
 80119c2:	f04f 0901 	mov.w	r9, #1
 80119c6:	e7d1      	b.n	801196c <__gethex+0x2d0>
 80119c8:	2501      	movs	r5, #1
 80119ca:	e7e2      	b.n	8011992 <__gethex+0x2f6>
 80119cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119ce:	f1c3 0301 	rsb	r3, r3, #1
 80119d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80119d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d0f0      	beq.n	80119bc <__gethex+0x320>
 80119da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80119de:	f104 0314 	add.w	r3, r4, #20
 80119e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80119e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80119ea:	f04f 0c00 	mov.w	ip, #0
 80119ee:	4618      	mov	r0, r3
 80119f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80119f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80119f8:	d01b      	beq.n	8011a32 <__gethex+0x396>
 80119fa:	3201      	adds	r2, #1
 80119fc:	6002      	str	r2, [r0, #0]
 80119fe:	2d02      	cmp	r5, #2
 8011a00:	f104 0314 	add.w	r3, r4, #20
 8011a04:	d13c      	bne.n	8011a80 <__gethex+0x3e4>
 8011a06:	f8d8 2000 	ldr.w	r2, [r8]
 8011a0a:	3a01      	subs	r2, #1
 8011a0c:	42b2      	cmp	r2, r6
 8011a0e:	d109      	bne.n	8011a24 <__gethex+0x388>
 8011a10:	1171      	asrs	r1, r6, #5
 8011a12:	2201      	movs	r2, #1
 8011a14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a18:	f006 061f 	and.w	r6, r6, #31
 8011a1c:	fa02 f606 	lsl.w	r6, r2, r6
 8011a20:	421e      	tst	r6, r3
 8011a22:	d13a      	bne.n	8011a9a <__gethex+0x3fe>
 8011a24:	f045 0520 	orr.w	r5, r5, #32
 8011a28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a2a:	601c      	str	r4, [r3, #0]
 8011a2c:	9b02      	ldr	r3, [sp, #8]
 8011a2e:	601f      	str	r7, [r3, #0]
 8011a30:	e6b0      	b.n	8011794 <__gethex+0xf8>
 8011a32:	4299      	cmp	r1, r3
 8011a34:	f843 cc04 	str.w	ip, [r3, #-4]
 8011a38:	d8d9      	bhi.n	80119ee <__gethex+0x352>
 8011a3a:	68a3      	ldr	r3, [r4, #8]
 8011a3c:	459b      	cmp	fp, r3
 8011a3e:	db17      	blt.n	8011a70 <__gethex+0x3d4>
 8011a40:	6861      	ldr	r1, [r4, #4]
 8011a42:	9801      	ldr	r0, [sp, #4]
 8011a44:	3101      	adds	r1, #1
 8011a46:	f7fe f855 	bl	800faf4 <_Balloc>
 8011a4a:	4681      	mov	r9, r0
 8011a4c:	b918      	cbnz	r0, 8011a56 <__gethex+0x3ba>
 8011a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8011ab8 <__gethex+0x41c>)
 8011a50:	4602      	mov	r2, r0
 8011a52:	2184      	movs	r1, #132	@ 0x84
 8011a54:	e6c5      	b.n	80117e2 <__gethex+0x146>
 8011a56:	6922      	ldr	r2, [r4, #16]
 8011a58:	3202      	adds	r2, #2
 8011a5a:	f104 010c 	add.w	r1, r4, #12
 8011a5e:	0092      	lsls	r2, r2, #2
 8011a60:	300c      	adds	r0, #12
 8011a62:	f7ff fd69 	bl	8011538 <memcpy>
 8011a66:	4621      	mov	r1, r4
 8011a68:	9801      	ldr	r0, [sp, #4]
 8011a6a:	f7fe f883 	bl	800fb74 <_Bfree>
 8011a6e:	464c      	mov	r4, r9
 8011a70:	6923      	ldr	r3, [r4, #16]
 8011a72:	1c5a      	adds	r2, r3, #1
 8011a74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a78:	6122      	str	r2, [r4, #16]
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	615a      	str	r2, [r3, #20]
 8011a7e:	e7be      	b.n	80119fe <__gethex+0x362>
 8011a80:	6922      	ldr	r2, [r4, #16]
 8011a82:	455a      	cmp	r2, fp
 8011a84:	dd0b      	ble.n	8011a9e <__gethex+0x402>
 8011a86:	2101      	movs	r1, #1
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f7ff fd9f 	bl	80115cc <rshift>
 8011a8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a92:	3701      	adds	r7, #1
 8011a94:	42bb      	cmp	r3, r7
 8011a96:	f6ff aee0 	blt.w	801185a <__gethex+0x1be>
 8011a9a:	2501      	movs	r5, #1
 8011a9c:	e7c2      	b.n	8011a24 <__gethex+0x388>
 8011a9e:	f016 061f 	ands.w	r6, r6, #31
 8011aa2:	d0fa      	beq.n	8011a9a <__gethex+0x3fe>
 8011aa4:	4453      	add	r3, sl
 8011aa6:	f1c6 0620 	rsb	r6, r6, #32
 8011aaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011aae:	f7fe f913 	bl	800fcd8 <__hi0bits>
 8011ab2:	42b0      	cmp	r0, r6
 8011ab4:	dbe7      	blt.n	8011a86 <__gethex+0x3ea>
 8011ab6:	e7f0      	b.n	8011a9a <__gethex+0x3fe>
 8011ab8:	0801236d 	.word	0x0801236d

08011abc <L_shift>:
 8011abc:	f1c2 0208 	rsb	r2, r2, #8
 8011ac0:	0092      	lsls	r2, r2, #2
 8011ac2:	b570      	push	{r4, r5, r6, lr}
 8011ac4:	f1c2 0620 	rsb	r6, r2, #32
 8011ac8:	6843      	ldr	r3, [r0, #4]
 8011aca:	6804      	ldr	r4, [r0, #0]
 8011acc:	fa03 f506 	lsl.w	r5, r3, r6
 8011ad0:	432c      	orrs	r4, r5
 8011ad2:	40d3      	lsrs	r3, r2
 8011ad4:	6004      	str	r4, [r0, #0]
 8011ad6:	f840 3f04 	str.w	r3, [r0, #4]!
 8011ada:	4288      	cmp	r0, r1
 8011adc:	d3f4      	bcc.n	8011ac8 <L_shift+0xc>
 8011ade:	bd70      	pop	{r4, r5, r6, pc}

08011ae0 <__match>:
 8011ae0:	b530      	push	{r4, r5, lr}
 8011ae2:	6803      	ldr	r3, [r0, #0]
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011aea:	b914      	cbnz	r4, 8011af2 <__match+0x12>
 8011aec:	6003      	str	r3, [r0, #0]
 8011aee:	2001      	movs	r0, #1
 8011af0:	bd30      	pop	{r4, r5, pc}
 8011af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011af6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011afa:	2d19      	cmp	r5, #25
 8011afc:	bf98      	it	ls
 8011afe:	3220      	addls	r2, #32
 8011b00:	42a2      	cmp	r2, r4
 8011b02:	d0f0      	beq.n	8011ae6 <__match+0x6>
 8011b04:	2000      	movs	r0, #0
 8011b06:	e7f3      	b.n	8011af0 <__match+0x10>

08011b08 <__hexnan>:
 8011b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b0c:	680b      	ldr	r3, [r1, #0]
 8011b0e:	6801      	ldr	r1, [r0, #0]
 8011b10:	115e      	asrs	r6, r3, #5
 8011b12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011b16:	f013 031f 	ands.w	r3, r3, #31
 8011b1a:	b087      	sub	sp, #28
 8011b1c:	bf18      	it	ne
 8011b1e:	3604      	addne	r6, #4
 8011b20:	2500      	movs	r5, #0
 8011b22:	1f37      	subs	r7, r6, #4
 8011b24:	4682      	mov	sl, r0
 8011b26:	4690      	mov	r8, r2
 8011b28:	9301      	str	r3, [sp, #4]
 8011b2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011b2e:	46b9      	mov	r9, r7
 8011b30:	463c      	mov	r4, r7
 8011b32:	9502      	str	r5, [sp, #8]
 8011b34:	46ab      	mov	fp, r5
 8011b36:	784a      	ldrb	r2, [r1, #1]
 8011b38:	1c4b      	adds	r3, r1, #1
 8011b3a:	9303      	str	r3, [sp, #12]
 8011b3c:	b342      	cbz	r2, 8011b90 <__hexnan+0x88>
 8011b3e:	4610      	mov	r0, r2
 8011b40:	9105      	str	r1, [sp, #20]
 8011b42:	9204      	str	r2, [sp, #16]
 8011b44:	f7ff fd94 	bl	8011670 <__hexdig_fun>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d151      	bne.n	8011bf0 <__hexnan+0xe8>
 8011b4c:	9a04      	ldr	r2, [sp, #16]
 8011b4e:	9905      	ldr	r1, [sp, #20]
 8011b50:	2a20      	cmp	r2, #32
 8011b52:	d818      	bhi.n	8011b86 <__hexnan+0x7e>
 8011b54:	9b02      	ldr	r3, [sp, #8]
 8011b56:	459b      	cmp	fp, r3
 8011b58:	dd13      	ble.n	8011b82 <__hexnan+0x7a>
 8011b5a:	454c      	cmp	r4, r9
 8011b5c:	d206      	bcs.n	8011b6c <__hexnan+0x64>
 8011b5e:	2d07      	cmp	r5, #7
 8011b60:	dc04      	bgt.n	8011b6c <__hexnan+0x64>
 8011b62:	462a      	mov	r2, r5
 8011b64:	4649      	mov	r1, r9
 8011b66:	4620      	mov	r0, r4
 8011b68:	f7ff ffa8 	bl	8011abc <L_shift>
 8011b6c:	4544      	cmp	r4, r8
 8011b6e:	d952      	bls.n	8011c16 <__hexnan+0x10e>
 8011b70:	2300      	movs	r3, #0
 8011b72:	f1a4 0904 	sub.w	r9, r4, #4
 8011b76:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b7a:	f8cd b008 	str.w	fp, [sp, #8]
 8011b7e:	464c      	mov	r4, r9
 8011b80:	461d      	mov	r5, r3
 8011b82:	9903      	ldr	r1, [sp, #12]
 8011b84:	e7d7      	b.n	8011b36 <__hexnan+0x2e>
 8011b86:	2a29      	cmp	r2, #41	@ 0x29
 8011b88:	d157      	bne.n	8011c3a <__hexnan+0x132>
 8011b8a:	3102      	adds	r1, #2
 8011b8c:	f8ca 1000 	str.w	r1, [sl]
 8011b90:	f1bb 0f00 	cmp.w	fp, #0
 8011b94:	d051      	beq.n	8011c3a <__hexnan+0x132>
 8011b96:	454c      	cmp	r4, r9
 8011b98:	d206      	bcs.n	8011ba8 <__hexnan+0xa0>
 8011b9a:	2d07      	cmp	r5, #7
 8011b9c:	dc04      	bgt.n	8011ba8 <__hexnan+0xa0>
 8011b9e:	462a      	mov	r2, r5
 8011ba0:	4649      	mov	r1, r9
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	f7ff ff8a 	bl	8011abc <L_shift>
 8011ba8:	4544      	cmp	r4, r8
 8011baa:	d936      	bls.n	8011c1a <__hexnan+0x112>
 8011bac:	f1a8 0204 	sub.w	r2, r8, #4
 8011bb0:	4623      	mov	r3, r4
 8011bb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011bb6:	f842 1f04 	str.w	r1, [r2, #4]!
 8011bba:	429f      	cmp	r7, r3
 8011bbc:	d2f9      	bcs.n	8011bb2 <__hexnan+0xaa>
 8011bbe:	1b3b      	subs	r3, r7, r4
 8011bc0:	f023 0303 	bic.w	r3, r3, #3
 8011bc4:	3304      	adds	r3, #4
 8011bc6:	3401      	adds	r4, #1
 8011bc8:	3e03      	subs	r6, #3
 8011bca:	42b4      	cmp	r4, r6
 8011bcc:	bf88      	it	hi
 8011bce:	2304      	movhi	r3, #4
 8011bd0:	4443      	add	r3, r8
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f843 2b04 	str.w	r2, [r3], #4
 8011bd8:	429f      	cmp	r7, r3
 8011bda:	d2fb      	bcs.n	8011bd4 <__hexnan+0xcc>
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	b91b      	cbnz	r3, 8011be8 <__hexnan+0xe0>
 8011be0:	4547      	cmp	r7, r8
 8011be2:	d128      	bne.n	8011c36 <__hexnan+0x12e>
 8011be4:	2301      	movs	r3, #1
 8011be6:	603b      	str	r3, [r7, #0]
 8011be8:	2005      	movs	r0, #5
 8011bea:	b007      	add	sp, #28
 8011bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf0:	3501      	adds	r5, #1
 8011bf2:	2d08      	cmp	r5, #8
 8011bf4:	f10b 0b01 	add.w	fp, fp, #1
 8011bf8:	dd06      	ble.n	8011c08 <__hexnan+0x100>
 8011bfa:	4544      	cmp	r4, r8
 8011bfc:	d9c1      	bls.n	8011b82 <__hexnan+0x7a>
 8011bfe:	2300      	movs	r3, #0
 8011c00:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c04:	2501      	movs	r5, #1
 8011c06:	3c04      	subs	r4, #4
 8011c08:	6822      	ldr	r2, [r4, #0]
 8011c0a:	f000 000f 	and.w	r0, r0, #15
 8011c0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011c12:	6020      	str	r0, [r4, #0]
 8011c14:	e7b5      	b.n	8011b82 <__hexnan+0x7a>
 8011c16:	2508      	movs	r5, #8
 8011c18:	e7b3      	b.n	8011b82 <__hexnan+0x7a>
 8011c1a:	9b01      	ldr	r3, [sp, #4]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d0dd      	beq.n	8011bdc <__hexnan+0xd4>
 8011c20:	f1c3 0320 	rsb	r3, r3, #32
 8011c24:	f04f 32ff 	mov.w	r2, #4294967295
 8011c28:	40da      	lsrs	r2, r3
 8011c2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011c2e:	4013      	ands	r3, r2
 8011c30:	f846 3c04 	str.w	r3, [r6, #-4]
 8011c34:	e7d2      	b.n	8011bdc <__hexnan+0xd4>
 8011c36:	3f04      	subs	r7, #4
 8011c38:	e7d0      	b.n	8011bdc <__hexnan+0xd4>
 8011c3a:	2004      	movs	r0, #4
 8011c3c:	e7d5      	b.n	8011bea <__hexnan+0xe2>

08011c3e <__ascii_mbtowc>:
 8011c3e:	b082      	sub	sp, #8
 8011c40:	b901      	cbnz	r1, 8011c44 <__ascii_mbtowc+0x6>
 8011c42:	a901      	add	r1, sp, #4
 8011c44:	b142      	cbz	r2, 8011c58 <__ascii_mbtowc+0x1a>
 8011c46:	b14b      	cbz	r3, 8011c5c <__ascii_mbtowc+0x1e>
 8011c48:	7813      	ldrb	r3, [r2, #0]
 8011c4a:	600b      	str	r3, [r1, #0]
 8011c4c:	7812      	ldrb	r2, [r2, #0]
 8011c4e:	1e10      	subs	r0, r2, #0
 8011c50:	bf18      	it	ne
 8011c52:	2001      	movne	r0, #1
 8011c54:	b002      	add	sp, #8
 8011c56:	4770      	bx	lr
 8011c58:	4610      	mov	r0, r2
 8011c5a:	e7fb      	b.n	8011c54 <__ascii_mbtowc+0x16>
 8011c5c:	f06f 0001 	mvn.w	r0, #1
 8011c60:	e7f8      	b.n	8011c54 <__ascii_mbtowc+0x16>

08011c62 <_realloc_r>:
 8011c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c66:	4680      	mov	r8, r0
 8011c68:	4615      	mov	r5, r2
 8011c6a:	460c      	mov	r4, r1
 8011c6c:	b921      	cbnz	r1, 8011c78 <_realloc_r+0x16>
 8011c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c72:	4611      	mov	r1, r2
 8011c74:	f7fd beb2 	b.w	800f9dc <_malloc_r>
 8011c78:	b92a      	cbnz	r2, 8011c86 <_realloc_r+0x24>
 8011c7a:	f7fd fe3b 	bl	800f8f4 <_free_r>
 8011c7e:	2400      	movs	r4, #0
 8011c80:	4620      	mov	r0, r4
 8011c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c86:	f000 f840 	bl	8011d0a <_malloc_usable_size_r>
 8011c8a:	4285      	cmp	r5, r0
 8011c8c:	4606      	mov	r6, r0
 8011c8e:	d802      	bhi.n	8011c96 <_realloc_r+0x34>
 8011c90:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011c94:	d8f4      	bhi.n	8011c80 <_realloc_r+0x1e>
 8011c96:	4629      	mov	r1, r5
 8011c98:	4640      	mov	r0, r8
 8011c9a:	f7fd fe9f 	bl	800f9dc <_malloc_r>
 8011c9e:	4607      	mov	r7, r0
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	d0ec      	beq.n	8011c7e <_realloc_r+0x1c>
 8011ca4:	42b5      	cmp	r5, r6
 8011ca6:	462a      	mov	r2, r5
 8011ca8:	4621      	mov	r1, r4
 8011caa:	bf28      	it	cs
 8011cac:	4632      	movcs	r2, r6
 8011cae:	f7ff fc43 	bl	8011538 <memcpy>
 8011cb2:	4621      	mov	r1, r4
 8011cb4:	4640      	mov	r0, r8
 8011cb6:	f7fd fe1d 	bl	800f8f4 <_free_r>
 8011cba:	463c      	mov	r4, r7
 8011cbc:	e7e0      	b.n	8011c80 <_realloc_r+0x1e>

08011cbe <__ascii_wctomb>:
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	4608      	mov	r0, r1
 8011cc2:	b141      	cbz	r1, 8011cd6 <__ascii_wctomb+0x18>
 8011cc4:	2aff      	cmp	r2, #255	@ 0xff
 8011cc6:	d904      	bls.n	8011cd2 <__ascii_wctomb+0x14>
 8011cc8:	228a      	movs	r2, #138	@ 0x8a
 8011cca:	601a      	str	r2, [r3, #0]
 8011ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd0:	4770      	bx	lr
 8011cd2:	700a      	strb	r2, [r1, #0]
 8011cd4:	2001      	movs	r0, #1
 8011cd6:	4770      	bx	lr

08011cd8 <fiprintf>:
 8011cd8:	b40e      	push	{r1, r2, r3}
 8011cda:	b503      	push	{r0, r1, lr}
 8011cdc:	4601      	mov	r1, r0
 8011cde:	ab03      	add	r3, sp, #12
 8011ce0:	4805      	ldr	r0, [pc, #20]	@ (8011cf8 <fiprintf+0x20>)
 8011ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ce6:	6800      	ldr	r0, [r0, #0]
 8011ce8:	9301      	str	r3, [sp, #4]
 8011cea:	f000 f83f 	bl	8011d6c <_vfiprintf_r>
 8011cee:	b002      	add	sp, #8
 8011cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cf4:	b003      	add	sp, #12
 8011cf6:	4770      	bx	lr
 8011cf8:	2400001c 	.word	0x2400001c

08011cfc <abort>:
 8011cfc:	b508      	push	{r3, lr}
 8011cfe:	2006      	movs	r0, #6
 8011d00:	f000 fa08 	bl	8012114 <raise>
 8011d04:	2001      	movs	r0, #1
 8011d06:	f7f1 fa5c 	bl	80031c2 <_exit>

08011d0a <_malloc_usable_size_r>:
 8011d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d0e:	1f18      	subs	r0, r3, #4
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	bfbc      	itt	lt
 8011d14:	580b      	ldrlt	r3, [r1, r0]
 8011d16:	18c0      	addlt	r0, r0, r3
 8011d18:	4770      	bx	lr

08011d1a <__sfputc_r>:
 8011d1a:	6893      	ldr	r3, [r2, #8]
 8011d1c:	3b01      	subs	r3, #1
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	b410      	push	{r4}
 8011d22:	6093      	str	r3, [r2, #8]
 8011d24:	da08      	bge.n	8011d38 <__sfputc_r+0x1e>
 8011d26:	6994      	ldr	r4, [r2, #24]
 8011d28:	42a3      	cmp	r3, r4
 8011d2a:	db01      	blt.n	8011d30 <__sfputc_r+0x16>
 8011d2c:	290a      	cmp	r1, #10
 8011d2e:	d103      	bne.n	8011d38 <__sfputc_r+0x1e>
 8011d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d34:	f000 b932 	b.w	8011f9c <__swbuf_r>
 8011d38:	6813      	ldr	r3, [r2, #0]
 8011d3a:	1c58      	adds	r0, r3, #1
 8011d3c:	6010      	str	r0, [r2, #0]
 8011d3e:	7019      	strb	r1, [r3, #0]
 8011d40:	4608      	mov	r0, r1
 8011d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d46:	4770      	bx	lr

08011d48 <__sfputs_r>:
 8011d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d4a:	4606      	mov	r6, r0
 8011d4c:	460f      	mov	r7, r1
 8011d4e:	4614      	mov	r4, r2
 8011d50:	18d5      	adds	r5, r2, r3
 8011d52:	42ac      	cmp	r4, r5
 8011d54:	d101      	bne.n	8011d5a <__sfputs_r+0x12>
 8011d56:	2000      	movs	r0, #0
 8011d58:	e007      	b.n	8011d6a <__sfputs_r+0x22>
 8011d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d5e:	463a      	mov	r2, r7
 8011d60:	4630      	mov	r0, r6
 8011d62:	f7ff ffda 	bl	8011d1a <__sfputc_r>
 8011d66:	1c43      	adds	r3, r0, #1
 8011d68:	d1f3      	bne.n	8011d52 <__sfputs_r+0xa>
 8011d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011d6c <_vfiprintf_r>:
 8011d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d70:	460d      	mov	r5, r1
 8011d72:	b09d      	sub	sp, #116	@ 0x74
 8011d74:	4614      	mov	r4, r2
 8011d76:	4698      	mov	r8, r3
 8011d78:	4606      	mov	r6, r0
 8011d7a:	b118      	cbz	r0, 8011d84 <_vfiprintf_r+0x18>
 8011d7c:	6a03      	ldr	r3, [r0, #32]
 8011d7e:	b90b      	cbnz	r3, 8011d84 <_vfiprintf_r+0x18>
 8011d80:	f7fc feba 	bl	800eaf8 <__sinit>
 8011d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d86:	07d9      	lsls	r1, r3, #31
 8011d88:	d405      	bmi.n	8011d96 <_vfiprintf_r+0x2a>
 8011d8a:	89ab      	ldrh	r3, [r5, #12]
 8011d8c:	059a      	lsls	r2, r3, #22
 8011d8e:	d402      	bmi.n	8011d96 <_vfiprintf_r+0x2a>
 8011d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d92:	f7fc ffc8 	bl	800ed26 <__retarget_lock_acquire_recursive>
 8011d96:	89ab      	ldrh	r3, [r5, #12]
 8011d98:	071b      	lsls	r3, r3, #28
 8011d9a:	d501      	bpl.n	8011da0 <_vfiprintf_r+0x34>
 8011d9c:	692b      	ldr	r3, [r5, #16]
 8011d9e:	b99b      	cbnz	r3, 8011dc8 <_vfiprintf_r+0x5c>
 8011da0:	4629      	mov	r1, r5
 8011da2:	4630      	mov	r0, r6
 8011da4:	f000 f938 	bl	8012018 <__swsetup_r>
 8011da8:	b170      	cbz	r0, 8011dc8 <_vfiprintf_r+0x5c>
 8011daa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011dac:	07dc      	lsls	r4, r3, #31
 8011dae:	d504      	bpl.n	8011dba <_vfiprintf_r+0x4e>
 8011db0:	f04f 30ff 	mov.w	r0, #4294967295
 8011db4:	b01d      	add	sp, #116	@ 0x74
 8011db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dba:	89ab      	ldrh	r3, [r5, #12]
 8011dbc:	0598      	lsls	r0, r3, #22
 8011dbe:	d4f7      	bmi.n	8011db0 <_vfiprintf_r+0x44>
 8011dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dc2:	f7fc ffb1 	bl	800ed28 <__retarget_lock_release_recursive>
 8011dc6:	e7f3      	b.n	8011db0 <_vfiprintf_r+0x44>
 8011dc8:	2300      	movs	r3, #0
 8011dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dcc:	2320      	movs	r3, #32
 8011dce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dd6:	2330      	movs	r3, #48	@ 0x30
 8011dd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011f88 <_vfiprintf_r+0x21c>
 8011ddc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011de0:	f04f 0901 	mov.w	r9, #1
 8011de4:	4623      	mov	r3, r4
 8011de6:	469a      	mov	sl, r3
 8011de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dec:	b10a      	cbz	r2, 8011df2 <_vfiprintf_r+0x86>
 8011dee:	2a25      	cmp	r2, #37	@ 0x25
 8011df0:	d1f9      	bne.n	8011de6 <_vfiprintf_r+0x7a>
 8011df2:	ebba 0b04 	subs.w	fp, sl, r4
 8011df6:	d00b      	beq.n	8011e10 <_vfiprintf_r+0xa4>
 8011df8:	465b      	mov	r3, fp
 8011dfa:	4622      	mov	r2, r4
 8011dfc:	4629      	mov	r1, r5
 8011dfe:	4630      	mov	r0, r6
 8011e00:	f7ff ffa2 	bl	8011d48 <__sfputs_r>
 8011e04:	3001      	adds	r0, #1
 8011e06:	f000 80a7 	beq.w	8011f58 <_vfiprintf_r+0x1ec>
 8011e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e0c:	445a      	add	r2, fp
 8011e0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e10:	f89a 3000 	ldrb.w	r3, [sl]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	f000 809f 	beq.w	8011f58 <_vfiprintf_r+0x1ec>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e24:	f10a 0a01 	add.w	sl, sl, #1
 8011e28:	9304      	str	r3, [sp, #16]
 8011e2a:	9307      	str	r3, [sp, #28]
 8011e2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e30:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e32:	4654      	mov	r4, sl
 8011e34:	2205      	movs	r2, #5
 8011e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e3a:	4853      	ldr	r0, [pc, #332]	@ (8011f88 <_vfiprintf_r+0x21c>)
 8011e3c:	f7ee fa68 	bl	8000310 <memchr>
 8011e40:	9a04      	ldr	r2, [sp, #16]
 8011e42:	b9d8      	cbnz	r0, 8011e7c <_vfiprintf_r+0x110>
 8011e44:	06d1      	lsls	r1, r2, #27
 8011e46:	bf44      	itt	mi
 8011e48:	2320      	movmi	r3, #32
 8011e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e4e:	0713      	lsls	r3, r2, #28
 8011e50:	bf44      	itt	mi
 8011e52:	232b      	movmi	r3, #43	@ 0x2b
 8011e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e58:	f89a 3000 	ldrb.w	r3, [sl]
 8011e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e5e:	d015      	beq.n	8011e8c <_vfiprintf_r+0x120>
 8011e60:	9a07      	ldr	r2, [sp, #28]
 8011e62:	4654      	mov	r4, sl
 8011e64:	2000      	movs	r0, #0
 8011e66:	f04f 0c0a 	mov.w	ip, #10
 8011e6a:	4621      	mov	r1, r4
 8011e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e70:	3b30      	subs	r3, #48	@ 0x30
 8011e72:	2b09      	cmp	r3, #9
 8011e74:	d94b      	bls.n	8011f0e <_vfiprintf_r+0x1a2>
 8011e76:	b1b0      	cbz	r0, 8011ea6 <_vfiprintf_r+0x13a>
 8011e78:	9207      	str	r2, [sp, #28]
 8011e7a:	e014      	b.n	8011ea6 <_vfiprintf_r+0x13a>
 8011e7c:	eba0 0308 	sub.w	r3, r0, r8
 8011e80:	fa09 f303 	lsl.w	r3, r9, r3
 8011e84:	4313      	orrs	r3, r2
 8011e86:	9304      	str	r3, [sp, #16]
 8011e88:	46a2      	mov	sl, r4
 8011e8a:	e7d2      	b.n	8011e32 <_vfiprintf_r+0xc6>
 8011e8c:	9b03      	ldr	r3, [sp, #12]
 8011e8e:	1d19      	adds	r1, r3, #4
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	9103      	str	r1, [sp, #12]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	bfbb      	ittet	lt
 8011e98:	425b      	neglt	r3, r3
 8011e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8011e9e:	9307      	strge	r3, [sp, #28]
 8011ea0:	9307      	strlt	r3, [sp, #28]
 8011ea2:	bfb8      	it	lt
 8011ea4:	9204      	strlt	r2, [sp, #16]
 8011ea6:	7823      	ldrb	r3, [r4, #0]
 8011ea8:	2b2e      	cmp	r3, #46	@ 0x2e
 8011eaa:	d10a      	bne.n	8011ec2 <_vfiprintf_r+0x156>
 8011eac:	7863      	ldrb	r3, [r4, #1]
 8011eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8011eb0:	d132      	bne.n	8011f18 <_vfiprintf_r+0x1ac>
 8011eb2:	9b03      	ldr	r3, [sp, #12]
 8011eb4:	1d1a      	adds	r2, r3, #4
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	9203      	str	r2, [sp, #12]
 8011eba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ebe:	3402      	adds	r4, #2
 8011ec0:	9305      	str	r3, [sp, #20]
 8011ec2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011f98 <_vfiprintf_r+0x22c>
 8011ec6:	7821      	ldrb	r1, [r4, #0]
 8011ec8:	2203      	movs	r2, #3
 8011eca:	4650      	mov	r0, sl
 8011ecc:	f7ee fa20 	bl	8000310 <memchr>
 8011ed0:	b138      	cbz	r0, 8011ee2 <_vfiprintf_r+0x176>
 8011ed2:	9b04      	ldr	r3, [sp, #16]
 8011ed4:	eba0 000a 	sub.w	r0, r0, sl
 8011ed8:	2240      	movs	r2, #64	@ 0x40
 8011eda:	4082      	lsls	r2, r0
 8011edc:	4313      	orrs	r3, r2
 8011ede:	3401      	adds	r4, #1
 8011ee0:	9304      	str	r3, [sp, #16]
 8011ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ee6:	4829      	ldr	r0, [pc, #164]	@ (8011f8c <_vfiprintf_r+0x220>)
 8011ee8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011eec:	2206      	movs	r2, #6
 8011eee:	f7ee fa0f 	bl	8000310 <memchr>
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	d03f      	beq.n	8011f76 <_vfiprintf_r+0x20a>
 8011ef6:	4b26      	ldr	r3, [pc, #152]	@ (8011f90 <_vfiprintf_r+0x224>)
 8011ef8:	bb1b      	cbnz	r3, 8011f42 <_vfiprintf_r+0x1d6>
 8011efa:	9b03      	ldr	r3, [sp, #12]
 8011efc:	3307      	adds	r3, #7
 8011efe:	f023 0307 	bic.w	r3, r3, #7
 8011f02:	3308      	adds	r3, #8
 8011f04:	9303      	str	r3, [sp, #12]
 8011f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f08:	443b      	add	r3, r7
 8011f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f0c:	e76a      	b.n	8011de4 <_vfiprintf_r+0x78>
 8011f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f12:	460c      	mov	r4, r1
 8011f14:	2001      	movs	r0, #1
 8011f16:	e7a8      	b.n	8011e6a <_vfiprintf_r+0xfe>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	3401      	adds	r4, #1
 8011f1c:	9305      	str	r3, [sp, #20]
 8011f1e:	4619      	mov	r1, r3
 8011f20:	f04f 0c0a 	mov.w	ip, #10
 8011f24:	4620      	mov	r0, r4
 8011f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f2a:	3a30      	subs	r2, #48	@ 0x30
 8011f2c:	2a09      	cmp	r2, #9
 8011f2e:	d903      	bls.n	8011f38 <_vfiprintf_r+0x1cc>
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d0c6      	beq.n	8011ec2 <_vfiprintf_r+0x156>
 8011f34:	9105      	str	r1, [sp, #20]
 8011f36:	e7c4      	b.n	8011ec2 <_vfiprintf_r+0x156>
 8011f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f3c:	4604      	mov	r4, r0
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e7f0      	b.n	8011f24 <_vfiprintf_r+0x1b8>
 8011f42:	ab03      	add	r3, sp, #12
 8011f44:	9300      	str	r3, [sp, #0]
 8011f46:	462a      	mov	r2, r5
 8011f48:	4b12      	ldr	r3, [pc, #72]	@ (8011f94 <_vfiprintf_r+0x228>)
 8011f4a:	a904      	add	r1, sp, #16
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f7fb ff93 	bl	800de78 <_printf_float>
 8011f52:	4607      	mov	r7, r0
 8011f54:	1c78      	adds	r0, r7, #1
 8011f56:	d1d6      	bne.n	8011f06 <_vfiprintf_r+0x19a>
 8011f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f5a:	07d9      	lsls	r1, r3, #31
 8011f5c:	d405      	bmi.n	8011f6a <_vfiprintf_r+0x1fe>
 8011f5e:	89ab      	ldrh	r3, [r5, #12]
 8011f60:	059a      	lsls	r2, r3, #22
 8011f62:	d402      	bmi.n	8011f6a <_vfiprintf_r+0x1fe>
 8011f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f66:	f7fc fedf 	bl	800ed28 <__retarget_lock_release_recursive>
 8011f6a:	89ab      	ldrh	r3, [r5, #12]
 8011f6c:	065b      	lsls	r3, r3, #25
 8011f6e:	f53f af1f 	bmi.w	8011db0 <_vfiprintf_r+0x44>
 8011f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f74:	e71e      	b.n	8011db4 <_vfiprintf_r+0x48>
 8011f76:	ab03      	add	r3, sp, #12
 8011f78:	9300      	str	r3, [sp, #0]
 8011f7a:	462a      	mov	r2, r5
 8011f7c:	4b05      	ldr	r3, [pc, #20]	@ (8011f94 <_vfiprintf_r+0x228>)
 8011f7e:	a904      	add	r1, sp, #16
 8011f80:	4630      	mov	r0, r6
 8011f82:	f7fc fa01 	bl	800e388 <_printf_i>
 8011f86:	e7e4      	b.n	8011f52 <_vfiprintf_r+0x1e6>
 8011f88:	08012631 	.word	0x08012631
 8011f8c:	0801263b 	.word	0x0801263b
 8011f90:	0800de79 	.word	0x0800de79
 8011f94:	08011d49 	.word	0x08011d49
 8011f98:	08012637 	.word	0x08012637

08011f9c <__swbuf_r>:
 8011f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f9e:	460e      	mov	r6, r1
 8011fa0:	4614      	mov	r4, r2
 8011fa2:	4605      	mov	r5, r0
 8011fa4:	b118      	cbz	r0, 8011fae <__swbuf_r+0x12>
 8011fa6:	6a03      	ldr	r3, [r0, #32]
 8011fa8:	b90b      	cbnz	r3, 8011fae <__swbuf_r+0x12>
 8011faa:	f7fc fda5 	bl	800eaf8 <__sinit>
 8011fae:	69a3      	ldr	r3, [r4, #24]
 8011fb0:	60a3      	str	r3, [r4, #8]
 8011fb2:	89a3      	ldrh	r3, [r4, #12]
 8011fb4:	071a      	lsls	r2, r3, #28
 8011fb6:	d501      	bpl.n	8011fbc <__swbuf_r+0x20>
 8011fb8:	6923      	ldr	r3, [r4, #16]
 8011fba:	b943      	cbnz	r3, 8011fce <__swbuf_r+0x32>
 8011fbc:	4621      	mov	r1, r4
 8011fbe:	4628      	mov	r0, r5
 8011fc0:	f000 f82a 	bl	8012018 <__swsetup_r>
 8011fc4:	b118      	cbz	r0, 8011fce <__swbuf_r+0x32>
 8011fc6:	f04f 37ff 	mov.w	r7, #4294967295
 8011fca:	4638      	mov	r0, r7
 8011fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fce:	6823      	ldr	r3, [r4, #0]
 8011fd0:	6922      	ldr	r2, [r4, #16]
 8011fd2:	1a98      	subs	r0, r3, r2
 8011fd4:	6963      	ldr	r3, [r4, #20]
 8011fd6:	b2f6      	uxtb	r6, r6
 8011fd8:	4283      	cmp	r3, r0
 8011fda:	4637      	mov	r7, r6
 8011fdc:	dc05      	bgt.n	8011fea <__swbuf_r+0x4e>
 8011fde:	4621      	mov	r1, r4
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	f7ff fa45 	bl	8011470 <_fflush_r>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	d1ed      	bne.n	8011fc6 <__swbuf_r+0x2a>
 8011fea:	68a3      	ldr	r3, [r4, #8]
 8011fec:	3b01      	subs	r3, #1
 8011fee:	60a3      	str	r3, [r4, #8]
 8011ff0:	6823      	ldr	r3, [r4, #0]
 8011ff2:	1c5a      	adds	r2, r3, #1
 8011ff4:	6022      	str	r2, [r4, #0]
 8011ff6:	701e      	strb	r6, [r3, #0]
 8011ff8:	6962      	ldr	r2, [r4, #20]
 8011ffa:	1c43      	adds	r3, r0, #1
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d004      	beq.n	801200a <__swbuf_r+0x6e>
 8012000:	89a3      	ldrh	r3, [r4, #12]
 8012002:	07db      	lsls	r3, r3, #31
 8012004:	d5e1      	bpl.n	8011fca <__swbuf_r+0x2e>
 8012006:	2e0a      	cmp	r6, #10
 8012008:	d1df      	bne.n	8011fca <__swbuf_r+0x2e>
 801200a:	4621      	mov	r1, r4
 801200c:	4628      	mov	r0, r5
 801200e:	f7ff fa2f 	bl	8011470 <_fflush_r>
 8012012:	2800      	cmp	r0, #0
 8012014:	d0d9      	beq.n	8011fca <__swbuf_r+0x2e>
 8012016:	e7d6      	b.n	8011fc6 <__swbuf_r+0x2a>

08012018 <__swsetup_r>:
 8012018:	b538      	push	{r3, r4, r5, lr}
 801201a:	4b29      	ldr	r3, [pc, #164]	@ (80120c0 <__swsetup_r+0xa8>)
 801201c:	4605      	mov	r5, r0
 801201e:	6818      	ldr	r0, [r3, #0]
 8012020:	460c      	mov	r4, r1
 8012022:	b118      	cbz	r0, 801202c <__swsetup_r+0x14>
 8012024:	6a03      	ldr	r3, [r0, #32]
 8012026:	b90b      	cbnz	r3, 801202c <__swsetup_r+0x14>
 8012028:	f7fc fd66 	bl	800eaf8 <__sinit>
 801202c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012030:	0719      	lsls	r1, r3, #28
 8012032:	d422      	bmi.n	801207a <__swsetup_r+0x62>
 8012034:	06da      	lsls	r2, r3, #27
 8012036:	d407      	bmi.n	8012048 <__swsetup_r+0x30>
 8012038:	2209      	movs	r2, #9
 801203a:	602a      	str	r2, [r5, #0]
 801203c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012040:	81a3      	strh	r3, [r4, #12]
 8012042:	f04f 30ff 	mov.w	r0, #4294967295
 8012046:	e033      	b.n	80120b0 <__swsetup_r+0x98>
 8012048:	0758      	lsls	r0, r3, #29
 801204a:	d512      	bpl.n	8012072 <__swsetup_r+0x5a>
 801204c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801204e:	b141      	cbz	r1, 8012062 <__swsetup_r+0x4a>
 8012050:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012054:	4299      	cmp	r1, r3
 8012056:	d002      	beq.n	801205e <__swsetup_r+0x46>
 8012058:	4628      	mov	r0, r5
 801205a:	f7fd fc4b 	bl	800f8f4 <_free_r>
 801205e:	2300      	movs	r3, #0
 8012060:	6363      	str	r3, [r4, #52]	@ 0x34
 8012062:	89a3      	ldrh	r3, [r4, #12]
 8012064:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012068:	81a3      	strh	r3, [r4, #12]
 801206a:	2300      	movs	r3, #0
 801206c:	6063      	str	r3, [r4, #4]
 801206e:	6923      	ldr	r3, [r4, #16]
 8012070:	6023      	str	r3, [r4, #0]
 8012072:	89a3      	ldrh	r3, [r4, #12]
 8012074:	f043 0308 	orr.w	r3, r3, #8
 8012078:	81a3      	strh	r3, [r4, #12]
 801207a:	6923      	ldr	r3, [r4, #16]
 801207c:	b94b      	cbnz	r3, 8012092 <__swsetup_r+0x7a>
 801207e:	89a3      	ldrh	r3, [r4, #12]
 8012080:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012088:	d003      	beq.n	8012092 <__swsetup_r+0x7a>
 801208a:	4621      	mov	r1, r4
 801208c:	4628      	mov	r0, r5
 801208e:	f000 f883 	bl	8012198 <__smakebuf_r>
 8012092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012096:	f013 0201 	ands.w	r2, r3, #1
 801209a:	d00a      	beq.n	80120b2 <__swsetup_r+0x9a>
 801209c:	2200      	movs	r2, #0
 801209e:	60a2      	str	r2, [r4, #8]
 80120a0:	6962      	ldr	r2, [r4, #20]
 80120a2:	4252      	negs	r2, r2
 80120a4:	61a2      	str	r2, [r4, #24]
 80120a6:	6922      	ldr	r2, [r4, #16]
 80120a8:	b942      	cbnz	r2, 80120bc <__swsetup_r+0xa4>
 80120aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80120ae:	d1c5      	bne.n	801203c <__swsetup_r+0x24>
 80120b0:	bd38      	pop	{r3, r4, r5, pc}
 80120b2:	0799      	lsls	r1, r3, #30
 80120b4:	bf58      	it	pl
 80120b6:	6962      	ldrpl	r2, [r4, #20]
 80120b8:	60a2      	str	r2, [r4, #8]
 80120ba:	e7f4      	b.n	80120a6 <__swsetup_r+0x8e>
 80120bc:	2000      	movs	r0, #0
 80120be:	e7f7      	b.n	80120b0 <__swsetup_r+0x98>
 80120c0:	2400001c 	.word	0x2400001c

080120c4 <_raise_r>:
 80120c4:	291f      	cmp	r1, #31
 80120c6:	b538      	push	{r3, r4, r5, lr}
 80120c8:	4605      	mov	r5, r0
 80120ca:	460c      	mov	r4, r1
 80120cc:	d904      	bls.n	80120d8 <_raise_r+0x14>
 80120ce:	2316      	movs	r3, #22
 80120d0:	6003      	str	r3, [r0, #0]
 80120d2:	f04f 30ff 	mov.w	r0, #4294967295
 80120d6:	bd38      	pop	{r3, r4, r5, pc}
 80120d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80120da:	b112      	cbz	r2, 80120e2 <_raise_r+0x1e>
 80120dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80120e0:	b94b      	cbnz	r3, 80120f6 <_raise_r+0x32>
 80120e2:	4628      	mov	r0, r5
 80120e4:	f000 f830 	bl	8012148 <_getpid_r>
 80120e8:	4622      	mov	r2, r4
 80120ea:	4601      	mov	r1, r0
 80120ec:	4628      	mov	r0, r5
 80120ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120f2:	f000 b817 	b.w	8012124 <_kill_r>
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d00a      	beq.n	8012110 <_raise_r+0x4c>
 80120fa:	1c59      	adds	r1, r3, #1
 80120fc:	d103      	bne.n	8012106 <_raise_r+0x42>
 80120fe:	2316      	movs	r3, #22
 8012100:	6003      	str	r3, [r0, #0]
 8012102:	2001      	movs	r0, #1
 8012104:	e7e7      	b.n	80120d6 <_raise_r+0x12>
 8012106:	2100      	movs	r1, #0
 8012108:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801210c:	4620      	mov	r0, r4
 801210e:	4798      	blx	r3
 8012110:	2000      	movs	r0, #0
 8012112:	e7e0      	b.n	80120d6 <_raise_r+0x12>

08012114 <raise>:
 8012114:	4b02      	ldr	r3, [pc, #8]	@ (8012120 <raise+0xc>)
 8012116:	4601      	mov	r1, r0
 8012118:	6818      	ldr	r0, [r3, #0]
 801211a:	f7ff bfd3 	b.w	80120c4 <_raise_r>
 801211e:	bf00      	nop
 8012120:	2400001c 	.word	0x2400001c

08012124 <_kill_r>:
 8012124:	b538      	push	{r3, r4, r5, lr}
 8012126:	4d07      	ldr	r5, [pc, #28]	@ (8012144 <_kill_r+0x20>)
 8012128:	2300      	movs	r3, #0
 801212a:	4604      	mov	r4, r0
 801212c:	4608      	mov	r0, r1
 801212e:	4611      	mov	r1, r2
 8012130:	602b      	str	r3, [r5, #0]
 8012132:	f7f1 f836 	bl	80031a2 <_kill>
 8012136:	1c43      	adds	r3, r0, #1
 8012138:	d102      	bne.n	8012140 <_kill_r+0x1c>
 801213a:	682b      	ldr	r3, [r5, #0]
 801213c:	b103      	cbz	r3, 8012140 <_kill_r+0x1c>
 801213e:	6023      	str	r3, [r4, #0]
 8012140:	bd38      	pop	{r3, r4, r5, pc}
 8012142:	bf00      	nop
 8012144:	24000cfc 	.word	0x24000cfc

08012148 <_getpid_r>:
 8012148:	f7f1 b823 	b.w	8003192 <_getpid>

0801214c <__swhatbuf_r>:
 801214c:	b570      	push	{r4, r5, r6, lr}
 801214e:	460c      	mov	r4, r1
 8012150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012154:	2900      	cmp	r1, #0
 8012156:	b096      	sub	sp, #88	@ 0x58
 8012158:	4615      	mov	r5, r2
 801215a:	461e      	mov	r6, r3
 801215c:	da0d      	bge.n	801217a <__swhatbuf_r+0x2e>
 801215e:	89a3      	ldrh	r3, [r4, #12]
 8012160:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012164:	f04f 0100 	mov.w	r1, #0
 8012168:	bf14      	ite	ne
 801216a:	2340      	movne	r3, #64	@ 0x40
 801216c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012170:	2000      	movs	r0, #0
 8012172:	6031      	str	r1, [r6, #0]
 8012174:	602b      	str	r3, [r5, #0]
 8012176:	b016      	add	sp, #88	@ 0x58
 8012178:	bd70      	pop	{r4, r5, r6, pc}
 801217a:	466a      	mov	r2, sp
 801217c:	f000 f848 	bl	8012210 <_fstat_r>
 8012180:	2800      	cmp	r0, #0
 8012182:	dbec      	blt.n	801215e <__swhatbuf_r+0x12>
 8012184:	9901      	ldr	r1, [sp, #4]
 8012186:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801218a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801218e:	4259      	negs	r1, r3
 8012190:	4159      	adcs	r1, r3
 8012192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012196:	e7eb      	b.n	8012170 <__swhatbuf_r+0x24>

08012198 <__smakebuf_r>:
 8012198:	898b      	ldrh	r3, [r1, #12]
 801219a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801219c:	079d      	lsls	r5, r3, #30
 801219e:	4606      	mov	r6, r0
 80121a0:	460c      	mov	r4, r1
 80121a2:	d507      	bpl.n	80121b4 <__smakebuf_r+0x1c>
 80121a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80121a8:	6023      	str	r3, [r4, #0]
 80121aa:	6123      	str	r3, [r4, #16]
 80121ac:	2301      	movs	r3, #1
 80121ae:	6163      	str	r3, [r4, #20]
 80121b0:	b003      	add	sp, #12
 80121b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121b4:	ab01      	add	r3, sp, #4
 80121b6:	466a      	mov	r2, sp
 80121b8:	f7ff ffc8 	bl	801214c <__swhatbuf_r>
 80121bc:	9f00      	ldr	r7, [sp, #0]
 80121be:	4605      	mov	r5, r0
 80121c0:	4639      	mov	r1, r7
 80121c2:	4630      	mov	r0, r6
 80121c4:	f7fd fc0a 	bl	800f9dc <_malloc_r>
 80121c8:	b948      	cbnz	r0, 80121de <__smakebuf_r+0x46>
 80121ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121ce:	059a      	lsls	r2, r3, #22
 80121d0:	d4ee      	bmi.n	80121b0 <__smakebuf_r+0x18>
 80121d2:	f023 0303 	bic.w	r3, r3, #3
 80121d6:	f043 0302 	orr.w	r3, r3, #2
 80121da:	81a3      	strh	r3, [r4, #12]
 80121dc:	e7e2      	b.n	80121a4 <__smakebuf_r+0xc>
 80121de:	89a3      	ldrh	r3, [r4, #12]
 80121e0:	6020      	str	r0, [r4, #0]
 80121e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121e6:	81a3      	strh	r3, [r4, #12]
 80121e8:	9b01      	ldr	r3, [sp, #4]
 80121ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80121ee:	b15b      	cbz	r3, 8012208 <__smakebuf_r+0x70>
 80121f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121f4:	4630      	mov	r0, r6
 80121f6:	f000 f81d 	bl	8012234 <_isatty_r>
 80121fa:	b128      	cbz	r0, 8012208 <__smakebuf_r+0x70>
 80121fc:	89a3      	ldrh	r3, [r4, #12]
 80121fe:	f023 0303 	bic.w	r3, r3, #3
 8012202:	f043 0301 	orr.w	r3, r3, #1
 8012206:	81a3      	strh	r3, [r4, #12]
 8012208:	89a3      	ldrh	r3, [r4, #12]
 801220a:	431d      	orrs	r5, r3
 801220c:	81a5      	strh	r5, [r4, #12]
 801220e:	e7cf      	b.n	80121b0 <__smakebuf_r+0x18>

08012210 <_fstat_r>:
 8012210:	b538      	push	{r3, r4, r5, lr}
 8012212:	4d07      	ldr	r5, [pc, #28]	@ (8012230 <_fstat_r+0x20>)
 8012214:	2300      	movs	r3, #0
 8012216:	4604      	mov	r4, r0
 8012218:	4608      	mov	r0, r1
 801221a:	4611      	mov	r1, r2
 801221c:	602b      	str	r3, [r5, #0]
 801221e:	f7f1 f820 	bl	8003262 <_fstat>
 8012222:	1c43      	adds	r3, r0, #1
 8012224:	d102      	bne.n	801222c <_fstat_r+0x1c>
 8012226:	682b      	ldr	r3, [r5, #0]
 8012228:	b103      	cbz	r3, 801222c <_fstat_r+0x1c>
 801222a:	6023      	str	r3, [r4, #0]
 801222c:	bd38      	pop	{r3, r4, r5, pc}
 801222e:	bf00      	nop
 8012230:	24000cfc 	.word	0x24000cfc

08012234 <_isatty_r>:
 8012234:	b538      	push	{r3, r4, r5, lr}
 8012236:	4d06      	ldr	r5, [pc, #24]	@ (8012250 <_isatty_r+0x1c>)
 8012238:	2300      	movs	r3, #0
 801223a:	4604      	mov	r4, r0
 801223c:	4608      	mov	r0, r1
 801223e:	602b      	str	r3, [r5, #0]
 8012240:	f7f1 f81f 	bl	8003282 <_isatty>
 8012244:	1c43      	adds	r3, r0, #1
 8012246:	d102      	bne.n	801224e <_isatty_r+0x1a>
 8012248:	682b      	ldr	r3, [r5, #0]
 801224a:	b103      	cbz	r3, 801224e <_isatty_r+0x1a>
 801224c:	6023      	str	r3, [r4, #0]
 801224e:	bd38      	pop	{r3, r4, r5, pc}
 8012250:	24000cfc 	.word	0x24000cfc

08012254 <_init>:
 8012254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012256:	bf00      	nop
 8012258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801225a:	bc08      	pop	{r3}
 801225c:	469e      	mov	lr, r3
 801225e:	4770      	bx	lr

08012260 <_fini>:
 8012260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012262:	bf00      	nop
 8012264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012266:	bc08      	pop	{r3}
 8012268:	469e      	mov	lr, r3
 801226a:	4770      	bx	lr
