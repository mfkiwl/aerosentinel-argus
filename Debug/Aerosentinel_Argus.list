
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014084  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08014358  08014358  00015358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014828  08014828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014830  08014830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014834  08014834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08014838  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b4c  240001d8  08014a10  000161d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000d24  08014a10  00016d24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000161d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028305  00000000  00000000  00016206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004710  00000000  00000000  0003e50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021c0  00000000  00000000  00042c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a66  00000000  00000000  00044de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007142  00000000  00000000  00046846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f9fd  00000000  00000000  0004d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001744c5  00000000  00000000  0007d385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f184a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a62c  00000000  00000000  001f1890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001fbebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801433c 	.word	0x0801433c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0801433c 	.word	0x0801433c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ab0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ab4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ab8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac0:	e000      	b.n	8000ac4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ac2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ace:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	int i=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffc7 	bl	8000a98 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x16>
	}
	return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b28:	f001 fabe 	bl	80020a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f002 fd00 	bl	8003530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f84c 	bl	8000bcc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b34:	f000 f8ba 	bl	8000cac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f001 f996 	bl	8001e68 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000b3c:	f000 fa8c 	bl	8001058 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8000b40:	f000 f8e4 	bl	8000d0c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b44:	f000 f9c8 	bl	8000ed8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b48:	f000 fa06 	bl	8000f58 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000b4c:	f000 fa44 	bl	8000fd8 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000b50:	f000 faa0 	bl	8001094 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b54:	f000 faf4 	bl	8001140 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000b58:	f000 fb9e 	bl	8001298 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b5c:	f000 fc60 	bl	8001420 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b60:	f000 fcb8 	bl	80014d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b64:	f000 fd10 	bl	8001588 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b68:	f000 fd68 	bl	800163c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000b6c:	f000 fdc0 	bl	80016f0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000b70:	f000 fe4e 	bl	8001810 <MX_TIM12_Init>
  MX_TIM15_Init();
 8000b74:	f000 fea6 	bl	80018c4 <MX_TIM15_Init>
  MX_UART4_Init();
 8000b78:	f000 ff2a 	bl	80019d0 <MX_UART4_Init>
  MX_UART5_Init();
 8000b7c:	f000 ff74 	bl	8001a68 <MX_UART5_Init>
  MX_UART7_Init();
 8000b80:	f000 ffbe 	bl	8001b00 <MX_UART7_Init>
  MX_UART8_Init();
 8000b84:	f001 f808 	bl	8001b98 <MX_UART8_Init>
  MX_USART1_Init();
 8000b88:	f001 f854 	bl	8001c34 <MX_USART1_Init>
  MX_USART2_Init();
 8000b8c:	f001 f8b0 	bl	8001cf0 <MX_USART2_Init>
  MX_USART3_Init();
 8000b90:	f001 f90c 	bl	8001dac <MX_USART3_Init>
  MX_ADC2_Init();
 8000b94:	f000 f936 	bl	8000e04 <MX_ADC2_Init>
  MX_SPI4_Init();
 8000b98:	f000 fb28 	bl	80011ec <MX_SPI4_Init>
  MX_FATFS_Init();
 8000b9c:	f00e ff44 	bl	800fa28 <MX_FATFS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count++; //Increment count variable
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <main+0xa0>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <main+0xa0>)
 8000baa:	701a      	strb	r2, [r3, #0]
	  printf("Hello World from Aerosentinel Argus Navigation Module! Count =%d \n", count); // Hello World Test
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <main+0xa0>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <main+0xa4>)
 8000bb4:	f010 f836 	bl	8010c24 <iprintf>
	  HAL_Delay(250);
 8000bb8:	20fa      	movs	r0, #250	@ 0xfa
 8000bba:	f002 fd4b 	bl	8003654 <HAL_Delay>
	  count++; //Increment count variable
 8000bbe:	bf00      	nop
 8000bc0:	e7ee      	b.n	8000ba0 <main+0x7c>
 8000bc2:	bf00      	nop
 8000bc4:	24000bb4 	.word	0x24000bb4
 8000bc8:	08014358 	.word	0x08014358

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09c      	sub	sp, #112	@ 0x70
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	224c      	movs	r2, #76	@ 0x4c
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f010 f92c 	bl	8010e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2220      	movs	r2, #32
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f010 f926 	bl	8010e38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bec:	2002      	movs	r0, #2
 8000bee:	f005 fac3 	bl	8006178 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <SystemClock_Config+0xdc>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca8 <SystemClock_Config+0xdc>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <SystemClock_Config+0xdc>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c12:	bf00      	nop
 8000c14:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <SystemClock_Config+0xdc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c20:	d1f8      	bne.n	8000c14 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c2a:	2340      	movs	r3, #64	@ 0x40
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c32:	2300      	movs	r3, #0
 8000c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c36:	2304      	movs	r3, #4
 8000c38:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c42:	2303      	movs	r3, #3
 8000c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f005 fac6 	bl	80061ec <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c66:	f001 fa4b 	bl	8002100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	233f      	movs	r3, #63	@ 0x3f
 8000c6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c7e:	2340      	movs	r3, #64	@ 0x40
 8000c80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c88:	2340      	movs	r3, #64	@ 0x40
 8000c8a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	f005 fe85 	bl	80069a0 <HAL_RCC_ClockConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c9c:	f001 fa30 	bl	8002100 <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3770      	adds	r7, #112	@ 0x70
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58024800 	.word	0x58024800

08000cac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0ae      	sub	sp, #184	@ 0xb8
 8000cb0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	22b8      	movs	r2, #184	@ 0xb8
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f010 f8bd 	bl	8010e38 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cbe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cc2:	f04f 0300 	mov.w	r3, #0
 8000cc6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cde:	23c0      	movs	r3, #192	@ 0xc0
 8000ce0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f006 f9e0 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000cfe:	f001 f9ff 	bl	8002100 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	37b8      	adds	r7, #184	@ 0xb8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	@ 0x30
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2224      	movs	r2, #36	@ 0x24
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f010 f887 	bl	8010e38 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d2a:	4b32      	ldr	r3, [pc, #200]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d2c:	4a32      	ldr	r2, [pc, #200]	@ (8000df8 <MX_ADC1_Init+0xec>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000d30:	4b30      	ldr	r3, [pc, #192]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d32:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000d38:	4b2e      	ldr	r3, [pc, #184]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d44:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d46:	2204      	movs	r2, #4
 8000d48:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d50:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d56:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5c:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d64:	4b23      	ldr	r3, [pc, #140]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6a:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d70:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d90:	4818      	ldr	r0, [pc, #96]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000d92:	f002 fec9 	bl	8003b28 <HAL_ADC_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d9c:	f001 f9b0 	bl	8002100 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4812      	ldr	r0, [pc, #72]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000dac:	f003 ff08 	bl	8004bc0 <HAL_ADCEx_MultiModeConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000db6:	f001 f9a3 	bl	8002100 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_ADC1_Init+0xf0>)
 8000dbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_ADC1_Init+0xf4>)
 8000dc8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_ADC1_Init+0xe8>)
 8000dde:	f003 f8ab 	bl	8003f38 <HAL_ADC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000de8:	f001 f98a 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3730      	adds	r7, #48	@ 0x30
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	240001f4 	.word	0x240001f4
 8000df8:	40022000 	.word	0x40022000
 8000dfc:	10c00010 	.word	0x10c00010
 8000e00:	47ff0000 	.word	0x47ff0000

08000e04 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2224      	movs	r2, #36	@ 0x24
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f010 f811 	bl	8010e38 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e16:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e18:	4a2c      	ldr	r2, [pc, #176]	@ (8000ecc <MX_ADC2_Init+0xc8>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e1e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e22:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000e24:	4b28      	ldr	r3, [pc, #160]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e2a:	4b27      	ldr	r3, [pc, #156]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e30:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e36:	4b24      	ldr	r3, [pc, #144]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e7c:	4812      	ldr	r0, [pc, #72]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000e7e:	f002 fe53 	bl	8003b28 <HAL_ADC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000e88:	f001 f93a 	bl	8002100 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <MX_ADC2_Init+0xcc>)
 8000e8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e90:	2306      	movs	r3, #6
 8000e92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <MX_ADC2_Init+0xd0>)
 8000e9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	@ (8000ec8 <MX_ADC2_Init+0xc4>)
 8000eb0:	f003 f842 	bl	8003f38 <HAL_ADC_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000eba:	f001 f921 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	@ 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	24000264 	.word	0x24000264
 8000ecc:	40022100 	.word	0x40022100
 8000ed0:	14f00020 	.word	0x14f00020
 8000ed4:	47ff0000 	.word	0x47ff0000

08000ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000ede:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <MX_I2C1_Init+0x78>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f54 <MX_I2C1_Init+0x7c>)
 8000ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f06:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000f14:	f004 fffc 	bl	8005f10 <HAL_I2C_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f1e:	f001 f8ef 	bl	8002100 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000f26:	f005 f88f 	bl	8006048 <HAL_I2CEx_ConfigAnalogFilter>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f30:	f001 f8e6 	bl	8002100 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <MX_I2C1_Init+0x74>)
 8000f38:	f005 f8d1 	bl	80060de <HAL_I2CEx_ConfigDigitalFilter>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f001 f8dd 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	240002d4 	.word	0x240002d4
 8000f50:	40005400 	.word	0x40005400
 8000f54:	00707cbb 	.word	0x00707cbb

08000f58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd0 <MX_I2C2_Init+0x78>)
 8000f60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000f64:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <MX_I2C2_Init+0x7c>)
 8000f66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f92:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000f94:	f004 ffbc 	bl	8005f10 <HAL_I2C_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f9e:	f001 f8af 	bl	8002100 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000fa6:	f005 f84f 	bl	8006048 <HAL_I2CEx_ConfigAnalogFilter>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fb0:	f001 f8a6 	bl	8002100 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_I2C2_Init+0x74>)
 8000fb8:	f005 f891 	bl	80060de <HAL_I2CEx_ConfigDigitalFilter>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fc2:	f001 f89d 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	24000328 	.word	0x24000328
 8000fd0:	40005800 	.word	0x40005800
 8000fd4:	00707cbb 	.word	0x00707cbb

08000fd8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_I2C4_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <MX_I2C4_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_I2C4_Init+0x74>)
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <MX_I2C4_Init+0x7c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_I2C4_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_I2C4_Init+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_I2C4_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_I2C4_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_I2C4_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_I2C4_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_I2C4_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	@ (800104c <MX_I2C4_Init+0x74>)
 8001014:	f004 ff7c 	bl	8005f10 <HAL_I2C_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800101e:	f001 f86f 	bl	8002100 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <MX_I2C4_Init+0x74>)
 8001026:	f005 f80f 	bl	8006048 <HAL_I2CEx_ConfigAnalogFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001030:	f001 f866 	bl	8002100 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_I2C4_Init+0x74>)
 8001038:	f005 f851 	bl	80060de <HAL_I2CEx_ConfigDigitalFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001042:	f001 f85d 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2400037c 	.word	0x2400037c
 8001050:	58001c00 	.word	0x58001c00
 8001054:	00707cbb 	.word	0x00707cbb

08001058 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_SDMMC1_SD_Init+0x34>)
 800105e:	4a0c      	ldr	r2, [pc, #48]	@ (8001090 <MX_SDMMC1_SD_Init+0x38>)
 8001060:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_SDMMC1_SD_Init+0x34>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_SDMMC1_SD_Init+0x34>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MX_SDMMC1_SD_Init+0x34>)
 8001070:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001074:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <MX_SDMMC1_SD_Init+0x34>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <MX_SDMMC1_SD_Init+0x34>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	240003d0 	.word	0x240003d0
 8001090:	52007000 	.word	0x52007000

08001094 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <MX_SPI1_Init+0xa4>)
 800109a:	4a28      	ldr	r2, [pc, #160]	@ (800113c <MX_SPI1_Init+0xa8>)
 800109c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a6:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010ac:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010ae:	2203      	movs	r2, #3
 80010b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b2:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010be:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d8:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_SPI1_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <MX_SPI1_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_SPI1_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <MX_SPI1_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001110:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_SPI1_Init+0xa4>)
 8001112:	2200      	movs	r2, #0
 8001114:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <MX_SPI1_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_SPI1_Init+0xa4>)
 800111e:	2200      	movs	r2, #0
 8001120:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_SPI1_Init+0xa4>)
 8001124:	f009 ff60 	bl	800afe8 <HAL_SPI_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800112e:	f000 ffe7 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2400044c 	.word	0x2400044c
 800113c:	40013000 	.word	0x40013000

08001140 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 8001146:	4a28      	ldr	r2, [pc, #160]	@ (80011e8 <MX_SPI2_Init+0xa8>)
 8001148:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 800114c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001150:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001152:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001158:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 800115a:	2203      	movs	r2, #3
 800115c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115e:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001164:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 800116c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001170:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001184:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 8001192:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001196:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_SPI2_Init+0xa4>)
 80011d0:	f009 ff0a 	bl	800afe8 <HAL_SPI_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80011da:	f000 ff91 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	240004d4 	.word	0x240004d4
 80011e8:	40003800 	.word	0x40003800

080011ec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <MX_SPI4_Init+0xa4>)
 80011f2:	4a28      	ldr	r2, [pc, #160]	@ (8001294 <MX_SPI4_Init+0xa8>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <MX_SPI4_Init+0xa4>)
 80011f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001204:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001206:	2203      	movs	r2, #3
 8001208:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <MX_SPI4_Init+0xa4>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001218:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800121c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <MX_SPI4_Init+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_SPI4_Init+0xa4>)
 800123e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001242:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_SPI4_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001252:	2200      	movs	r2, #0
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_SPI4_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_SPI4_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_SPI4_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_SPI4_Init+0xa4>)
 800127c:	f009 feb4 	bl	800afe8 <HAL_SPI_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001286:	f000 ff3b 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2400055c 	.word	0x2400055c
 8001294:	40013400 	.word	0x40013400

08001298 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b09c      	sub	sp, #112	@ 0x70
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	615a      	str	r2, [r3, #20]
 80012ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2234      	movs	r2, #52	@ 0x34
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f00f fdb0 	bl	8010e38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001418 <MX_TIM1_Init+0x180>)
 80012da:	4a50      	ldr	r2, [pc, #320]	@ (800141c <MX_TIM1_Init+0x184>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012de:	4b4e      	ldr	r3, [pc, #312]	@ (8001418 <MX_TIM1_Init+0x180>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001418 <MX_TIM1_Init+0x180>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001418 <MX_TIM1_Init+0x180>)
 80012ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b49      	ldr	r3, [pc, #292]	@ (8001418 <MX_TIM1_Init+0x180>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f8:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <MX_TIM1_Init+0x180>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b46      	ldr	r3, [pc, #280]	@ (8001418 <MX_TIM1_Init+0x180>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001304:	4844      	ldr	r0, [pc, #272]	@ (8001418 <MX_TIM1_Init+0x180>)
 8001306:	f009 ffae 	bl	800b266 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001310:	f000 fef6 	bl	8002100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001318:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800131e:	4619      	mov	r1, r3
 8001320:	483d      	ldr	r0, [pc, #244]	@ (8001418 <MX_TIM1_Init+0x180>)
 8001322:	f00a f963 	bl	800b5ec <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800132c:	f000 fee8 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001330:	4839      	ldr	r0, [pc, #228]	@ (8001418 <MX_TIM1_Init+0x180>)
 8001332:	f009 ffef 	bl	800b314 <HAL_TIM_PWM_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800133c:	f000 fee0 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800134c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001350:	4619      	mov	r1, r3
 8001352:	4831      	ldr	r0, [pc, #196]	@ (8001418 <MX_TIM1_Init+0x180>)
 8001354:	f00a fe68 	bl	800c028 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800135e:	f000 fecf 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001362:	2360      	movs	r3, #96	@ 0x60
 8001364:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136a:	2300      	movs	r3, #0
 800136c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800136e:	2300      	movs	r3, #0
 8001370:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	4824      	ldr	r0, [pc, #144]	@ (8001418 <MX_TIM1_Init+0x180>)
 8001388:	f00a f81c 	bl	800b3c4 <HAL_TIM_PWM_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001392:	f000 feb5 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001396:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800139a:	2204      	movs	r2, #4
 800139c:	4619      	mov	r1, r3
 800139e:	481e      	ldr	r0, [pc, #120]	@ (8001418 <MX_TIM1_Init+0x180>)
 80013a0:	f00a f810 	bl	800b3c4 <HAL_TIM_PWM_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80013aa:	f000 fea9 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013b2:	2208      	movs	r2, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	4818      	ldr	r0, [pc, #96]	@ (8001418 <MX_TIM1_Init+0x180>)
 80013b8:	f00a f804 	bl	800b3c4 <HAL_TIM_PWM_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80013c2:	f000 fe9d 	bl	8002100 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4807      	ldr	r0, [pc, #28]	@ (8001418 <MX_TIM1_Init+0x180>)
 80013fc:	f00a feb0 	bl	800c160 <HAL_TIMEx_ConfigBreakDeadTime>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001406:	f000 fe7b 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800140a:	4803      	ldr	r0, [pc, #12]	@ (8001418 <MX_TIM1_Init+0x180>)
 800140c:	f001 fb04 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 8001410:	bf00      	nop
 8001412:	3770      	adds	r7, #112	@ 0x70
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	240005e4 	.word	0x240005e4
 800141c:	40010000 	.word	0x40010000

08001420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001444:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <MX_TIM2_Init+0xb0>)
 8001446:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800144a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800144c:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <MX_TIM2_Init+0xb0>)
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <MX_TIM2_Init+0xb0>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001458:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <MX_TIM2_Init+0xb0>)
 800145a:	f04f 32ff 	mov.w	r2, #4294967295
 800145e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <MX_TIM2_Init+0xb0>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_TIM2_Init+0xb0>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800146c:	4818      	ldr	r0, [pc, #96]	@ (80014d0 <MX_TIM2_Init+0xb0>)
 800146e:	f009 ff51 	bl	800b314 <HAL_TIM_PWM_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001478:	f000 fe42 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	4811      	ldr	r0, [pc, #68]	@ (80014d0 <MX_TIM2_Init+0xb0>)
 800148c:	f00a fdcc 	bl	800c028 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001496:	f000 fe33 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149a:	2360      	movs	r3, #96	@ 0x60
 800149c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	2200      	movs	r2, #0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4807      	ldr	r0, [pc, #28]	@ (80014d0 <MX_TIM2_Init+0xb0>)
 80014b2:	f009 ff87 	bl	800b3c4 <HAL_TIM_PWM_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014bc:	f000 fe20 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c0:	4803      	ldr	r0, [pc, #12]	@ (80014d0 <MX_TIM2_Init+0xb0>)
 80014c2:	f001 faa9 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	@ 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	24000630 	.word	0x24000630

080014d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f8:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <MX_TIM3_Init+0xac>)
 80014fa:	4a22      	ldr	r2, [pc, #136]	@ (8001584 <MX_TIM3_Init+0xb0>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014fe:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <MX_TIM3_Init+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <MX_TIM3_Init+0xac>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800150a:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <MX_TIM3_Init+0xac>)
 800150c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001510:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MX_TIM3_Init+0xac>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <MX_TIM3_Init+0xac>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800151e:	4818      	ldr	r0, [pc, #96]	@ (8001580 <MX_TIM3_Init+0xac>)
 8001520:	f009 fef8 	bl	800b314 <HAL_TIM_PWM_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800152a:	f000 fde9 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4810      	ldr	r0, [pc, #64]	@ (8001580 <MX_TIM3_Init+0xac>)
 800153e:	f00a fd73 	bl	800c028 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001548:	f000 fdda 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154c:	2360      	movs	r3, #96	@ 0x60
 800154e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	4807      	ldr	r0, [pc, #28]	@ (8001580 <MX_TIM3_Init+0xac>)
 8001564:	f009 ff2e 	bl	800b3c4 <HAL_TIM_PWM_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800156e:	f000 fdc7 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001572:	4803      	ldr	r0, [pc, #12]	@ (8001580 <MX_TIM3_Init+0xac>)
 8001574:	f001 fa50 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	@ 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2400067c 	.word	0x2400067c
 8001584:	40000400 	.word	0x40000400

08001588 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015ac:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <MX_TIM4_Init+0xac>)
 80015ae:	4a22      	ldr	r2, [pc, #136]	@ (8001638 <MX_TIM4_Init+0xb0>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <MX_TIM4_Init+0xac>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <MX_TIM4_Init+0xac>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015be:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <MX_TIM4_Init+0xac>)
 80015c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <MX_TIM4_Init+0xac>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <MX_TIM4_Init+0xac>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015d2:	4818      	ldr	r0, [pc, #96]	@ (8001634 <MX_TIM4_Init+0xac>)
 80015d4:	f009 fe9e 	bl	800b314 <HAL_TIM_PWM_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80015de:	f000 fd8f 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4810      	ldr	r0, [pc, #64]	@ (8001634 <MX_TIM4_Init+0xac>)
 80015f2:	f00a fd19 	bl	800c028 <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80015fc:	f000 fd80 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001600:	2360      	movs	r3, #96	@ 0x60
 8001602:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	4619      	mov	r1, r3
 8001616:	4807      	ldr	r0, [pc, #28]	@ (8001634 <MX_TIM4_Init+0xac>)
 8001618:	f009 fed4 	bl	800b3c4 <HAL_TIM_PWM_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001622:	f000 fd6d 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001626:	4803      	ldr	r0, [pc, #12]	@ (8001634 <MX_TIM4_Init+0xac>)
 8001628:	f001 f9f6 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	@ 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	240006c8 	.word	0x240006c8
 8001638:	40000800 	.word	0x40000800

0800163c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	463b      	mov	r3, r7
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001660:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <MX_TIM5_Init+0xac>)
 8001662:	4a22      	ldr	r2, [pc, #136]	@ (80016ec <MX_TIM5_Init+0xb0>)
 8001664:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001666:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <MX_TIM5_Init+0xac>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <MX_TIM5_Init+0xac>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <MX_TIM5_Init+0xac>)
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <MX_TIM5_Init+0xac>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <MX_TIM5_Init+0xac>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001686:	4818      	ldr	r0, [pc, #96]	@ (80016e8 <MX_TIM5_Init+0xac>)
 8001688:	f009 fe44 	bl	800b314 <HAL_TIM_PWM_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001692:	f000 fd35 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <MX_TIM5_Init+0xac>)
 80016a6:	f00a fcbf 	bl	800c028 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80016b0:	f000 fd26 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b4:	2360      	movs	r3, #96	@ 0x60
 80016b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	4619      	mov	r1, r3
 80016ca:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <MX_TIM5_Init+0xac>)
 80016cc:	f009 fe7a 	bl	800b3c4 <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80016d6:	f000 fd13 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016da:	4803      	ldr	r0, [pc, #12]	@ (80016e8 <MX_TIM5_Init+0xac>)
 80016dc:	f001 f99c 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	@ 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	24000714 	.word	0x24000714
 80016ec:	40000c00 	.word	0x40000c00

080016f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b098      	sub	sp, #96	@ 0x60
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001702:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2234      	movs	r2, #52	@ 0x34
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f00f fb8b 	bl	8010e38 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001722:	4b39      	ldr	r3, [pc, #228]	@ (8001808 <MX_TIM8_Init+0x118>)
 8001724:	4a39      	ldr	r2, [pc, #228]	@ (800180c <MX_TIM8_Init+0x11c>)
 8001726:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001728:	4b37      	ldr	r3, [pc, #220]	@ (8001808 <MX_TIM8_Init+0x118>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b36      	ldr	r3, [pc, #216]	@ (8001808 <MX_TIM8_Init+0x118>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <MX_TIM8_Init+0x118>)
 8001736:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800173a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <MX_TIM8_Init+0x118>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001742:	4b31      	ldr	r3, [pc, #196]	@ (8001808 <MX_TIM8_Init+0x118>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001748:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <MX_TIM8_Init+0x118>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800174e:	482e      	ldr	r0, [pc, #184]	@ (8001808 <MX_TIM8_Init+0x118>)
 8001750:	f009 fde0 	bl	800b314 <HAL_TIM_PWM_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800175a:	f000 fcd1 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800176a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800176e:	4619      	mov	r1, r3
 8001770:	4825      	ldr	r0, [pc, #148]	@ (8001808 <MX_TIM8_Init+0x118>)
 8001772:	f00a fc59 	bl	800c028 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800177c:	f000 fcc0 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001780:	2360      	movs	r3, #96	@ 0x60
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001788:	2300      	movs	r3, #0
 800178a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800178c:	2300      	movs	r3, #0
 800178e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4818      	ldr	r0, [pc, #96]	@ (8001808 <MX_TIM8_Init+0x118>)
 80017a6:	f009 fe0d 	bl	800b3c4 <HAL_TIM_PWM_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80017b0:	f000 fca6 	bl	8002100 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4807      	ldr	r0, [pc, #28]	@ (8001808 <MX_TIM8_Init+0x118>)
 80017ea:	f00a fcb9 	bl	800c160 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80017f4:	f000 fc84 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <MX_TIM8_Init+0x118>)
 80017fa:	f001 f90d 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 80017fe:	bf00      	nop
 8001800:	3760      	adds	r7, #96	@ 0x60
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	24000760 	.word	0x24000760
 800180c:	40010400 	.word	0x40010400

08001810 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001822:	463b      	mov	r3, r7
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	615a      	str	r2, [r3, #20]
 8001832:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001834:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <MX_TIM12_Init+0xac>)
 8001836:	4a22      	ldr	r2, [pc, #136]	@ (80018c0 <MX_TIM12_Init+0xb0>)
 8001838:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800183a:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <MX_TIM12_Init+0xac>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <MX_TIM12_Init+0xac>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <MX_TIM12_Init+0xac>)
 8001848:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800184c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <MX_TIM12_Init+0xac>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <MX_TIM12_Init+0xac>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800185a:	4818      	ldr	r0, [pc, #96]	@ (80018bc <MX_TIM12_Init+0xac>)
 800185c:	f009 fd5a 	bl	800b314 <HAL_TIM_PWM_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8001866:	f000 fc4b 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	4810      	ldr	r0, [pc, #64]	@ (80018bc <MX_TIM12_Init+0xac>)
 800187a:	f00a fbd5 	bl	800c028 <HAL_TIMEx_MasterConfigSynchronization>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001884:	f000 fc3c 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001888:	2360      	movs	r3, #96	@ 0x60
 800188a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	4807      	ldr	r0, [pc, #28]	@ (80018bc <MX_TIM12_Init+0xac>)
 80018a0:	f009 fd90 	bl	800b3c4 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 80018aa:	f000 fc29 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80018ae:	4803      	ldr	r0, [pc, #12]	@ (80018bc <MX_TIM12_Init+0xac>)
 80018b0:	f001 f8b2 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	@ 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	240007ac 	.word	0x240007ac
 80018c0:	40001800 	.word	0x40001800

080018c4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b098      	sub	sp, #96	@ 0x60
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2234      	movs	r2, #52	@ 0x34
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00f faa1 	bl	8010e38 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018f6:	4b34      	ldr	r3, [pc, #208]	@ (80019c8 <MX_TIM15_Init+0x104>)
 80018f8:	4a34      	ldr	r2, [pc, #208]	@ (80019cc <MX_TIM15_Init+0x108>)
 80018fa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80018fc:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <MX_TIM15_Init+0x104>)
 80018fe:	2200      	movs	r2, #0
 8001900:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001902:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <MX_TIM15_Init+0x104>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001908:	4b2f      	ldr	r3, [pc, #188]	@ (80019c8 <MX_TIM15_Init+0x104>)
 800190a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800190e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001910:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <MX_TIM15_Init+0x104>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001916:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <MX_TIM15_Init+0x104>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <MX_TIM15_Init+0x104>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001922:	4829      	ldr	r0, [pc, #164]	@ (80019c8 <MX_TIM15_Init+0x104>)
 8001924:	f009 fcf6 	bl	800b314 <HAL_TIM_PWM_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800192e:	f000 fbe7 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800193a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800193e:	4619      	mov	r1, r3
 8001940:	4821      	ldr	r0, [pc, #132]	@ (80019c8 <MX_TIM15_Init+0x104>)
 8001942:	f00a fb71 	bl	800c028 <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800194c:	f000 fbd8 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001950:	2360      	movs	r3, #96	@ 0x60
 8001952:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001958:	2300      	movs	r3, #0
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800195c:	2300      	movs	r3, #0
 800195e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	4814      	ldr	r0, [pc, #80]	@ (80019c8 <MX_TIM15_Init+0x104>)
 8001976:	f009 fd25 	bl	800b3c4 <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001980:	f000 fbbe 	bl	8002100 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001998:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800199c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4807      	ldr	r0, [pc, #28]	@ (80019c8 <MX_TIM15_Init+0x104>)
 80019ac:	f00a fbd8 	bl	800c160 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80019b6:	f000 fba3 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80019ba:	4803      	ldr	r0, [pc, #12]	@ (80019c8 <MX_TIM15_Init+0x104>)
 80019bc:	f001 f82c 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 80019c0:	bf00      	nop
 80019c2:	3760      	adds	r7, #96	@ 0x60
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	240007f8 	.word	0x240007f8
 80019cc:	40014000 	.word	0x40014000

080019d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019d4:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <MX_UART4_Init+0x90>)
 80019d6:	4a23      	ldr	r2, [pc, #140]	@ (8001a64 <MX_UART4_Init+0x94>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <MX_UART4_Init+0x90>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <MX_UART4_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_UART4_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <MX_UART4_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <MX_UART4_Init+0x90>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_UART4_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <MX_UART4_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_UART4_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_UART4_Init+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <MX_UART4_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a18:	4811      	ldr	r0, [pc, #68]	@ (8001a60 <MX_UART4_Init+0x90>)
 8001a1a:	f00a fc2d 	bl	800c278 <HAL_UART_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001a24:	f000 fb6c 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	480d      	ldr	r0, [pc, #52]	@ (8001a60 <MX_UART4_Init+0x90>)
 8001a2c:	f00c f972 	bl	800dd14 <HAL_UARTEx_SetTxFifoThreshold>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a36:	f000 fb63 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4808      	ldr	r0, [pc, #32]	@ (8001a60 <MX_UART4_Init+0x90>)
 8001a3e:	f00c f9a7 	bl	800dd90 <HAL_UARTEx_SetRxFifoThreshold>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a48:	f000 fb5a 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <MX_UART4_Init+0x90>)
 8001a4e:	f00c f928 	bl	800dca2 <HAL_UARTEx_DisableFifoMode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a58:	f000 fb52 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	24000844 	.word	0x24000844
 8001a64:	40004c00 	.word	0x40004c00

08001a68 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001a6e:	4a23      	ldr	r2, [pc, #140]	@ (8001afc <MX_UART5_Init+0x94>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a72:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ab0:	4811      	ldr	r0, [pc, #68]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001ab2:	f00a fbe1 	bl	800c278 <HAL_UART_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001abc:	f000 fb20 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	480d      	ldr	r0, [pc, #52]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001ac4:	f00c f926 	bl	800dd14 <HAL_UARTEx_SetTxFifoThreshold>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001ace:	f000 fb17 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4808      	ldr	r0, [pc, #32]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001ad6:	f00c f95b 	bl	800dd90 <HAL_UARTEx_SetRxFifoThreshold>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001ae0:	f000 fb0e 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	@ (8001af8 <MX_UART5_Init+0x90>)
 8001ae6:	f00c f8dc 	bl	800dca2 <HAL_UARTEx_DisableFifoMode>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001af0:	f000 fb06 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	240008d8 	.word	0x240008d8
 8001afc:	40005000 	.word	0x40005000

08001b00 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b06:	4a23      	ldr	r2, [pc, #140]	@ (8001b94 <MX_UART7_Init+0x94>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001b48:	4811      	ldr	r0, [pc, #68]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b4a:	f00a fb95 	bl	800c278 <HAL_UART_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001b54:	f000 fad4 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b5c:	f00c f8da 	bl	800dd14 <HAL_UARTEx_SetTxFifoThreshold>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001b66:	f000 facb 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4808      	ldr	r0, [pc, #32]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b6e:	f00c f90f 	bl	800dd90 <HAL_UARTEx_SetRxFifoThreshold>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001b78:	f000 fac2 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	@ (8001b90 <MX_UART7_Init+0x90>)
 8001b7e:	f00c f890 	bl	800dca2 <HAL_UARTEx_DisableFifoMode>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001b88:	f000 faba 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2400096c 	.word	0x2400096c
 8001b94:	40007800 	.word	0x40007800

08001b98 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001b9e:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <MX_UART8_Init+0x98>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001ba2:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001bc4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001bc8:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bca:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001be2:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001be4:	f00a fb48 	bl	800c278 <HAL_UART_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8001bee:	f000 fa87 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001bf6:	f00c f88d 	bl	800dd14 <HAL_UARTEx_SetTxFifoThreshold>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8001c00:	f000 fa7e 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c04:	2100      	movs	r1, #0
 8001c06:	4809      	ldr	r0, [pc, #36]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001c08:	f00c f8c2 	bl	800dd90 <HAL_UARTEx_SetRxFifoThreshold>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8001c12:	f000 fa75 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <MX_UART8_Init+0x94>)
 8001c18:	f00c f843 	bl	800dca2 <HAL_UARTEx_DisableFifoMode>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8001c22:	f000 fa6d 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	24000a00 	.word	0x24000a00
 8001c30:	40007c00 	.word	0x40007c00

08001c34 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001c38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cec <MX_USART1_Init+0xb8>)
 8001c3c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c44:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001c46:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001c4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001c52:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001c58:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001c5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001c64:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001c7c:	481a      	ldr	r0, [pc, #104]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c7e:	f00c f913 	bl	800dea8 <HAL_USART_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8001c88:	f000 fa3a 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4816      	ldr	r0, [pc, #88]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001c90:	f00d f83a 	bl	800ed08 <HAL_USARTEx_SetTxFifoThreshold>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001c9a:	f000 fa31 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4811      	ldr	r0, [pc, #68]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001ca2:	f00d f86f 	bl	800ed84 <HAL_USARTEx_SetRxFifoThreshold>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8001cac:	f000 fa28 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001cb4:	f00c ffb2 	bl	800ec1c <HAL_USARTEx_ConfigNSS>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8001cbe:	f000 fa1f 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8001cc2:	4809      	ldr	r0, [pc, #36]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001cc4:	f00c ffe7 	bl	800ec96 <HAL_USARTEx_DisableFifoMode>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 8001cce:	f000 fa17 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <MX_USART1_Init+0xb4>)
 8001cd4:	f00c ff4d 	bl	800eb72 <HAL_USARTEx_EnableSlaveMode>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART1_Init+0xae>
  {
    Error_Handler();
 8001cde:	f000 fa0f 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	24000a94 	.word	0x24000a94
 8001cec:	40011000 	.word	0x40011000

08001cf0 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8001da8 <MX_USART2_Init+0xb8>)
 8001cf8:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001cfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d00:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001d02:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001d08:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001d0e:	4b25      	ldr	r3, [pc, #148]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001d1a:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001d20:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001d26:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001d32:	4b1c      	ldr	r3, [pc, #112]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001d38:	481a      	ldr	r0, [pc, #104]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d3a:	f00c f8b5 	bl	800dea8 <HAL_USART_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8001d44:	f000 f9dc 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4816      	ldr	r0, [pc, #88]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d4c:	f00c ffdc 	bl	800ed08 <HAL_USARTEx_SetTxFifoThreshold>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 8001d56:	f000 f9d3 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4811      	ldr	r0, [pc, #68]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d5e:	f00d f811 	bl	800ed84 <HAL_USARTEx_SetRxFifoThreshold>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8001d68:	f000 f9ca 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart2, USART_NSS_HARD) != HAL_OK)
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d70:	f00c ff54 	bl	800ec1c <HAL_USARTEx_ConfigNSS>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USART2_Init+0x8e>
  {
    Error_Handler();
 8001d7a:	f000 f9c1 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8001d7e:	4809      	ldr	r0, [pc, #36]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d80:	f00c ff89 	bl	800ec96 <HAL_USARTEx_DisableFifoMode>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USART2_Init+0x9e>
  {
    Error_Handler();
 8001d8a:	f000 f9b9 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_USART2_Init+0xb4>)
 8001d90:	f00c feef 	bl	800eb72 <HAL_USARTEx_EnableSlaveMode>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_USART2_Init+0xae>
  {
    Error_Handler();
 8001d9a:	f000 f9b1 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	24000af4 	.word	0x24000af4
 8001da8:	40004400 	.word	0x40004400

08001dac <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001db0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001db2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e64 <MX_USART3_Init+0xb8>)
 8001db4:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001db6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001dbe:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001dc4:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001dca:	4b25      	ldr	r3, [pc, #148]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001dd0:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001dd6:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001ddc:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001de2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001df4:	481a      	ldr	r0, [pc, #104]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001df6:	f00c f857 	bl	800dea8 <HAL_USART_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8001e00:	f000 f97e 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	4816      	ldr	r0, [pc, #88]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001e08:	f00c ff7e 	bl	800ed08 <HAL_USARTEx_SetTxFifoThreshold>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8001e12:	f000 f975 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4811      	ldr	r0, [pc, #68]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001e1a:	f00c ffb3 	bl	800ed84 <HAL_USARTEx_SetRxFifoThreshold>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8001e24:	f000 f96c 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8001e28:	2100      	movs	r1, #0
 8001e2a:	480d      	ldr	r0, [pc, #52]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001e2c:	f00c fef6 	bl	800ec1c <HAL_USARTEx_ConfigNSS>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8001e36:	f000 f963 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001e3a:	4809      	ldr	r0, [pc, #36]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001e3c:	f00c ff2b 	bl	800ec96 <HAL_USARTEx_DisableFifoMode>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8001e46:	f000 f95b 	bl	8002100 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_USART3_Init+0xb4>)
 8001e4c:	f00c fe91 	bl	800eb72 <HAL_USARTEx_EnableSlaveMode>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8001e56:	f000 f953 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	24000b54 	.word	0x24000b54
 8001e64:	40004800 	.word	0x40004800

08001e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	@ 0x30
 8001e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7e:	4b84      	ldr	r3, [pc, #528]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e84:	4a82      	ldr	r2, [pc, #520]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e8e:	4b80      	ldr	r3, [pc, #512]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e9c:	4b7c      	ldr	r3, [pc, #496]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea2:	4a7b      	ldr	r2, [pc, #492]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eac:	4b78      	ldr	r3, [pc, #480]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b75      	ldr	r3, [pc, #468]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec0:	4a73      	ldr	r2, [pc, #460]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eca:	4b71      	ldr	r3, [pc, #452]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b6d      	ldr	r3, [pc, #436]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	4a6c      	ldr	r2, [pc, #432]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee8:	4b69      	ldr	r3, [pc, #420]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	4b66      	ldr	r3, [pc, #408]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	4a64      	ldr	r2, [pc, #400]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001efe:	f043 0308 	orr.w	r3, r3, #8
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f06:	4b62      	ldr	r3, [pc, #392]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f14:	4b5e      	ldr	r3, [pc, #376]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1a:	4a5d      	ldr	r2, [pc, #372]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f24:	4b5a      	ldr	r3, [pc, #360]	@ (8002090 <MX_GPIO_Init+0x228>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2110      	movs	r1, #16
 8001f36:	4857      	ldr	r0, [pc, #348]	@ (8002094 <MX_GPIO_Init+0x22c>)
 8001f38:	f003 ffd0 	bl	8005edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4855      	ldr	r0, [pc, #340]	@ (8002098 <MX_GPIO_Init+0x230>)
 8001f42:	f003 ffcb 	bl	8005edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f4c:	4853      	ldr	r0, [pc, #332]	@ (800209c <MX_GPIO_Init+0x234>)
 8001f4e:	f003 ffc5 	bl	8005edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001f52:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	484c      	ldr	r0, [pc, #304]	@ (8002098 <MX_GPIO_Init+0x230>)
 8001f68:	f003 fdf8 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE10 PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_12;
 8001f6c:	f245 4308 	movw	r3, #21512	@ 0x5408
 8001f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4844      	ldr	r0, [pc, #272]	@ (8002094 <MX_GPIO_Init+0x22c>)
 8001f82:	f003 fdeb 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001f86:	2310      	movs	r3, #16
 8001f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	483d      	ldr	r0, [pc, #244]	@ (8002094 <MX_GPIO_Init+0x22c>)
 8001f9e:	f003 fddd 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fa2:	2310      	movs	r3, #16
 8001fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	483a      	ldr	r0, [pc, #232]	@ (80020a0 <MX_GPIO_Init+0x238>)
 8001fb6:	f003 fdd1 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4834      	ldr	r0, [pc, #208]	@ (80020a0 <MX_GPIO_Init+0x238>)
 8001fce:	f003 fdc5 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	482b      	ldr	r0, [pc, #172]	@ (8002098 <MX_GPIO_Init+0x230>)
 8001fea:	f003 fdb7 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fee:	2308      	movs	r3, #8
 8001ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	4619      	mov	r1, r3
 8002000:	4825      	ldr	r0, [pc, #148]	@ (8002098 <MX_GPIO_Init+0x230>)
 8002002:	f003 fdab 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002006:	2304      	movs	r3, #4
 8002008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002012:	f107 031c 	add.w	r3, r7, #28
 8002016:	4619      	mov	r1, r3
 8002018:	4820      	ldr	r0, [pc, #128]	@ (800209c <MX_GPIO_Init+0x234>)
 800201a:	f003 fd9f 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800201e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002024:	2301      	movs	r3, #1
 8002026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	4619      	mov	r1, r3
 8002036:	4819      	ldr	r0, [pc, #100]	@ (800209c <MX_GPIO_Init+0x234>)
 8002038:	f003 fd90 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800203c:	2302      	movs	r3, #2
 800203e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	4619      	mov	r1, r3
 800204e:	4815      	ldr	r0, [pc, #84]	@ (80020a4 <MX_GPIO_Init+0x23c>)
 8002050:	f003 fd84 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002054:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205a:	2303      	movs	r3, #3
 800205c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4619      	mov	r1, r3
 8002068:	480a      	ldr	r0, [pc, #40]	@ (8002094 <MX_GPIO_Init+0x22c>)
 800206a:	f003 fd77 	bl	8005b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800206e:	2308      	movs	r3, #8
 8002070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002072:	2303      	movs	r3, #3
 8002074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	4808      	ldr	r0, [pc, #32]	@ (80020a4 <MX_GPIO_Init+0x23c>)
 8002082:	f003 fd6b 	bl	8005b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002086:	bf00      	nop
 8002088:	3730      	adds	r7, #48	@ 0x30
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	58024400 	.word	0x58024400
 8002094:	58021000 	.word	0x58021000
 8002098:	58020800 	.word	0x58020800
 800209c:	58020400 	.word	0x58020400
 80020a0:	58020c00 	.word	0x58020c00
 80020a4:	58020000 	.word	0x58020000

080020a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020ae:	463b      	mov	r3, r7
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020ba:	f002 ff73 	bl	8004fa4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020be:	2301      	movs	r3, #1
 80020c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80020ca:	231f      	movs	r3, #31
 80020cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80020ce:	2387      	movs	r3, #135	@ 0x87
 80020d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80020d6:	2300      	movs	r3, #0
 80020d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80020da:	2301      	movs	r3, #1
 80020dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80020de:	2301      	movs	r3, #1
 80020e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80020ea:	463b      	mov	r3, r7
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 ff91 	bl	8005014 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80020f2:	2004      	movs	r0, #4
 80020f4:	f002 ff6e 	bl	8004fd4 <HAL_MPU_Enable>

}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002104:	b672      	cpsid	i
}
 8002106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <Error_Handler+0x8>

0800210c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_MspInit+0x30>)
 8002114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002118:	4a08      	ldr	r2, [pc, #32]	@ (800213c <HAL_MspInit+0x30>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002122:	4b06      	ldr	r3, [pc, #24]	@ (800213c <HAL_MspInit+0x30>)
 8002124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	58024400 	.word	0x58024400

08002140 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	@ 0x30
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a39      	ldr	r2, [pc, #228]	@ (8002244 <HAL_ADC_MspInit+0x104>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d133      	bne.n	80021ca <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002162:	4b39      	ldr	r3, [pc, #228]	@ (8002248 <HAL_ADC_MspInit+0x108>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	4a37      	ldr	r2, [pc, #220]	@ (8002248 <HAL_ADC_MspInit+0x108>)
 800216a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800216c:	4b36      	ldr	r3, [pc, #216]	@ (8002248 <HAL_ADC_MspInit+0x108>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10e      	bne.n	8002192 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002174:	4b35      	ldr	r3, [pc, #212]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 8002176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800217a:	4a34      	ldr	r2, [pc, #208]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 800217c:	f043 0320 	orr.w	r3, r3, #32
 8002180:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002184:	4b31      	ldr	r3, [pc, #196]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 8002186:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002192:	4b2e      	ldr	r3, [pc, #184]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 8002194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002198:	4a2c      	ldr	r2, [pc, #176]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021a2:	4b2a      	ldr	r3, [pc, #168]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021b0:	2330      	movs	r3, #48	@ 0x30
 80021b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b4:	2303      	movs	r3, #3
 80021b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	4823      	ldr	r0, [pc, #140]	@ (8002250 <HAL_ADC_MspInit+0x110>)
 80021c4:	f003 fcca 	bl	8005b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021c8:	e037      	b.n	800223a <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a21      	ldr	r2, [pc, #132]	@ (8002254 <HAL_ADC_MspInit+0x114>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d132      	bne.n	800223a <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <HAL_ADC_MspInit+0x108>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	3301      	adds	r3, #1
 80021da:	4a1b      	ldr	r2, [pc, #108]	@ (8002248 <HAL_ADC_MspInit+0x108>)
 80021dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021de:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <HAL_ADC_MspInit+0x108>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d10e      	bne.n	8002204 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021e6:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 80021e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021ec:	4a17      	ldr	r2, [pc, #92]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 80021ee:	f043 0320 	orr.w	r3, r3, #32
 80021f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 80021f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220a:	4a10      	ldr	r2, [pc, #64]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002214:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_ADC_MspInit+0x10c>)
 8002216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002222:	2303      	movs	r3, #3
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002226:	2303      	movs	r3, #3
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	4619      	mov	r1, r3
 8002234:	4808      	ldr	r0, [pc, #32]	@ (8002258 <HAL_ADC_MspInit+0x118>)
 8002236:	f003 fc91 	bl	8005b5c <HAL_GPIO_Init>
}
 800223a:	bf00      	nop
 800223c:	3730      	adds	r7, #48	@ 0x30
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40022000 	.word	0x40022000
 8002248:	24000bb8 	.word	0x24000bb8
 800224c:	58024400 	.word	0x58024400
 8002250:	58020800 	.word	0x58020800
 8002254:	40022100 	.word	0x40022100
 8002258:	58020400 	.word	0x58020400

0800225c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0bc      	sub	sp, #240	@ 0xf0
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002274:	f107 0320 	add.w	r3, r7, #32
 8002278:	22b8      	movs	r2, #184	@ 0xb8
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f00e fddb 	bl	8010e38 <memset>
  if(hi2c->Instance==I2C1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a74      	ldr	r2, [pc, #464]	@ (8002458 <HAL_I2C_MspInit+0x1fc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d147      	bne.n	800231c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800228c:	f04f 0208 	mov.w	r2, #8
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 ff08 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80022ae:	f7ff ff27 	bl	8002100 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	4b6a      	ldr	r3, [pc, #424]	@ (800245c <HAL_I2C_MspInit+0x200>)
 80022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b8:	4a68      	ldr	r2, [pc, #416]	@ (800245c <HAL_I2C_MspInit+0x200>)
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c2:	4b66      	ldr	r3, [pc, #408]	@ (800245c <HAL_I2C_MspInit+0x200>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80022d0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80022d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d8:	2312      	movs	r3, #18
 80022da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ea:	2304      	movs	r3, #4
 80022ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022f4:	4619      	mov	r1, r3
 80022f6:	485a      	ldr	r0, [pc, #360]	@ (8002460 <HAL_I2C_MspInit+0x204>)
 80022f8:	f003 fc30 	bl	8005b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022fc:	4b57      	ldr	r3, [pc, #348]	@ (800245c <HAL_I2C_MspInit+0x200>)
 80022fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002302:	4a56      	ldr	r2, [pc, #344]	@ (800245c <HAL_I2C_MspInit+0x200>)
 8002304:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002308:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800230c:	4b53      	ldr	r3, [pc, #332]	@ (800245c <HAL_I2C_MspInit+0x200>)
 800230e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800231a:	e098      	b.n	800244e <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a50      	ldr	r2, [pc, #320]	@ (8002464 <HAL_I2C_MspInit+0x208>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d147      	bne.n	80023b6 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002326:	f04f 0208 	mov.w	r2, #8
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	4618      	mov	r0, r3
 800233e:	f004 febb 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8002348:	f7ff feda 	bl	8002100 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234c:	4b43      	ldr	r3, [pc, #268]	@ (800245c <HAL_I2C_MspInit+0x200>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002352:	4a42      	ldr	r2, [pc, #264]	@ (800245c <HAL_I2C_MspInit+0x200>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800235c:	4b3f      	ldr	r3, [pc, #252]	@ (800245c <HAL_I2C_MspInit+0x200>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800236a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800236e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002372:	2312      	movs	r3, #18
 8002374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002384:	2304      	movs	r3, #4
 8002386:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800238e:	4619      	mov	r1, r3
 8002390:	4833      	ldr	r0, [pc, #204]	@ (8002460 <HAL_I2C_MspInit+0x204>)
 8002392:	f003 fbe3 	bl	8005b5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002396:	4b31      	ldr	r3, [pc, #196]	@ (800245c <HAL_I2C_MspInit+0x200>)
 8002398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800239c:	4a2f      	ldr	r2, [pc, #188]	@ (800245c <HAL_I2C_MspInit+0x200>)
 800239e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023a6:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <HAL_I2C_MspInit+0x200>)
 80023a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693b      	ldr	r3, [r7, #16]
}
 80023b4:	e04b      	b.n	800244e <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002468 <HAL_I2C_MspInit+0x20c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d146      	bne.n	800244e <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80023c0:	f04f 0210 	mov.w	r2, #16
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d2:	f107 0320 	add.w	r3, r7, #32
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 fe6e 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 80023e2:	f7ff fe8d 	bl	8002100 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e6:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <HAL_I2C_MspInit+0x200>)
 80023e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ec:	4a1b      	ldr	r2, [pc, #108]	@ (800245c <HAL_I2C_MspInit+0x200>)
 80023ee:	f043 0308 	orr.w	r3, r3, #8
 80023f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023f6:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_I2C_MspInit+0x200>)
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002404:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002408:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800240c:	2312      	movs	r3, #18
 800240e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800241e:	2304      	movs	r3, #4
 8002420:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002424:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002428:	4619      	mov	r1, r3
 800242a:	4810      	ldr	r0, [pc, #64]	@ (800246c <HAL_I2C_MspInit+0x210>)
 800242c:	f003 fb96 	bl	8005b5c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002430:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <HAL_I2C_MspInit+0x200>)
 8002432:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002436:	4a09      	ldr	r2, [pc, #36]	@ (800245c <HAL_I2C_MspInit+0x200>)
 8002438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800243c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_I2C_MspInit+0x200>)
 8002442:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
}
 800244e:	bf00      	nop
 8002450:	37f0      	adds	r7, #240	@ 0xf0
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40005400 	.word	0x40005400
 800245c:	58024400 	.word	0x58024400
 8002460:	58020400 	.word	0x58020400
 8002464:	40005800 	.word	0x40005800
 8002468:	58001c00 	.word	0x58001c00
 800246c:	58020c00 	.word	0x58020c00

08002470 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0ba      	sub	sp, #232	@ 0xe8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002488:	f107 0318 	add.w	r3, r7, #24
 800248c:	22b8      	movs	r2, #184	@ 0xb8
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f00e fcd1 	bl	8010e38 <memset>
  if(hsd->Instance==SDMMC1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a38      	ldr	r2, [pc, #224]	@ (800257c <HAL_SD_MspInit+0x10c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d169      	bne.n	8002574 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80024a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b0:	f107 0318 	add.w	r3, r7, #24
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 fdff 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80024c0:	f7ff fe1e 	bl	8002100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <HAL_SD_MspInit+0x110>)
 80024c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002580 <HAL_SD_MspInit+0x110>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80024d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002580 <HAL_SD_MspInit+0x110>)
 80024d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e2:	4b27      	ldr	r3, [pc, #156]	@ (8002580 <HAL_SD_MspInit+0x110>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e8:	4a25      	ldr	r2, [pc, #148]	@ (8002580 <HAL_SD_MspInit+0x110>)
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f2:	4b23      	ldr	r3, [pc, #140]	@ (8002580 <HAL_SD_MspInit+0x110>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002500:	4b1f      	ldr	r3, [pc, #124]	@ (8002580 <HAL_SD_MspInit+0x110>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002506:	4a1e      	ldr	r2, [pc, #120]	@ (8002580 <HAL_SD_MspInit+0x110>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002510:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <HAL_SD_MspInit+0x110>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800251e:	2304      	movs	r3, #4
 8002520:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002536:	230c      	movs	r3, #12
 8002538:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800253c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002540:	4619      	mov	r1, r3
 8002542:	4810      	ldr	r0, [pc, #64]	@ (8002584 <HAL_SD_MspInit+0x114>)
 8002544:	f003 fb0a 	bl	8005b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8002548:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800254c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002562:	230c      	movs	r3, #12
 8002564:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002568:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800256c:	4619      	mov	r1, r3
 800256e:	4806      	ldr	r0, [pc, #24]	@ (8002588 <HAL_SD_MspInit+0x118>)
 8002570:	f003 faf4 	bl	8005b5c <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002574:	bf00      	nop
 8002576:	37e8      	adds	r7, #232	@ 0xe8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	52007000 	.word	0x52007000
 8002580:	58024400 	.word	0x58024400
 8002584:	58020c00 	.word	0x58020c00
 8002588:	58020800 	.word	0x58020800

0800258c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b0c0      	sub	sp, #256	@ 0x100
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025a8:	22b8      	movs	r2, #184	@ 0xb8
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00e fc43 	bl	8010e38 <memset>
  if(hspi->Instance==SPI1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4aaa      	ldr	r2, [pc, #680]	@ (8002860 <HAL_SPI_MspInit+0x2d4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d16a      	bne.n	8002692 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80025bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025d2:	4618      	mov	r0, r3
 80025d4:	f004 fd70 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80025de:	f7ff fd8f 	bl	8002100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025e2:	4ba0      	ldr	r3, [pc, #640]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80025e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e8:	4a9e      	ldr	r2, [pc, #632]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80025ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025f2:	4b9c      	ldr	r3, [pc, #624]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80025f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002600:	4b98      	ldr	r3, [pc, #608]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002606:	4a97      	ldr	r2, [pc, #604]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002610:	4b94      	ldr	r3, [pc, #592]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800261c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	4b91      	ldr	r3, [pc, #580]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002624:	4a8f      	ldr	r2, [pc, #572]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800262e:	4b8d      	ldr	r3, [pc, #564]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PB4(NJTRST)     ------> SPI1_MISO
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800263c:	2310      	movs	r3, #16
 800263e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002654:	2305      	movs	r3, #5
 8002656:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800265e:	4619      	mov	r1, r3
 8002660:	4881      	ldr	r0, [pc, #516]	@ (8002868 <HAL_SPI_MspInit+0x2dc>)
 8002662:	f003 fa7b 	bl	8005b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002666:	23b0      	movs	r3, #176	@ 0xb0
 8002668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800267e:	2305      	movs	r3, #5
 8002680:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002688:	4619      	mov	r1, r3
 800268a:	4878      	ldr	r0, [pc, #480]	@ (800286c <HAL_SPI_MspInit+0x2e0>)
 800268c:	f003 fa66 	bl	8005b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002690:	e0e1      	b.n	8002856 <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a76      	ldr	r2, [pc, #472]	@ (8002870 <HAL_SPI_MspInit+0x2e4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	f040 8091 	bne.w	80027c0 <HAL_SPI_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800269e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026b4:	4618      	mov	r0, r3
 80026b6:	f004 fcff 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 80026c0:	f7ff fd1e 	bl	8002100 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026c4:	4b67      	ldr	r3, [pc, #412]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80026c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026ca:	4a66      	ldr	r2, [pc, #408]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026d4:	4b63      	ldr	r3, [pc, #396]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80026d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b60      	ldr	r3, [pc, #384]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80026e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80026f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002700:	4b58      	ldr	r3, [pc, #352]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002706:	4a57      	ldr	r2, [pc, #348]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002710:	4b54      	ldr	r3, [pc, #336]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	4b51      	ldr	r3, [pc, #324]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002724:	4a4f      	ldr	r2, [pc, #316]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002726:	f043 0302 	orr.w	r3, r3, #2
 800272a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800272e:	4b4d      	ldr	r3, [pc, #308]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800273c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002740:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002756:	2305      	movs	r3, #5
 8002758:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002760:	4619      	mov	r1, r3
 8002762:	4842      	ldr	r0, [pc, #264]	@ (800286c <HAL_SPI_MspInit+0x2e0>)
 8002764:	f003 f9fa 	bl	8005b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8002768:	2306      	movs	r3, #6
 800276a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002780:	2305      	movs	r3, #5
 8002782:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002786:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800278a:	4619      	mov	r1, r3
 800278c:	4839      	ldr	r0, [pc, #228]	@ (8002874 <HAL_SPI_MspInit+0x2e8>)
 800278e:	f003 f9e5 	bl	8005b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002796:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ac:	2305      	movs	r3, #5
 80027ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80027b6:	4619      	mov	r1, r3
 80027b8:	482b      	ldr	r0, [pc, #172]	@ (8002868 <HAL_SPI_MspInit+0x2dc>)
 80027ba:	f003 f9cf 	bl	8005b5c <HAL_GPIO_Init>
}
 80027be:	e04a      	b.n	8002856 <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002878 <HAL_SPI_MspInit+0x2ec>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d145      	bne.n	8002856 <HAL_SPI_MspInit+0x2ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80027ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 fc69 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_SPI_MspInit+0x264>
      Error_Handler();
 80027ec:	f7ff fc88 	bl	8002100 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80027f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80027f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 80027f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002800:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002814:	4a13      	ldr	r2, [pc, #76]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002816:	f043 0310 	orr.w	r3, r3, #16
 800281a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800281e:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <HAL_SPI_MspInit+0x2d8>)
 8002820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800282c:	2364      	movs	r3, #100	@ 0x64
 800282e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002844:	2305      	movs	r3, #5
 8002846:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800284a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800284e:	4619      	mov	r1, r3
 8002850:	480a      	ldr	r0, [pc, #40]	@ (800287c <HAL_SPI_MspInit+0x2f0>)
 8002852:	f003 f983 	bl	8005b5c <HAL_GPIO_Init>
}
 8002856:	bf00      	nop
 8002858:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40013000 	.word	0x40013000
 8002864:	58024400 	.word	0x58024400
 8002868:	58020400 	.word	0x58020400
 800286c:	58020000 	.word	0x58020000
 8002870:	40003800 	.word	0x40003800
 8002874:	58020800 	.word	0x58020800
 8002878:	40013400 	.word	0x40013400
 800287c:	58021000 	.word	0x58021000

08002880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <HAL_TIM_Base_MspInit+0x3c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_TIM_Base_MspInit+0x40>)
 8002894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002898:	4a09      	ldr	r2, [pc, #36]	@ (80028c0 <HAL_TIM_Base_MspInit+0x40>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028a2:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <HAL_TIM_Base_MspInit+0x40>)
 80028a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40010000 	.word	0x40010000
 80028c0:	58024400 	.word	0x58024400

080028c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b08b      	sub	sp, #44	@ 0x2c
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d4:	d10f      	bne.n	80028f6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d6:	4b49      	ldr	r3, [pc, #292]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 80028d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028dc:	4a47      	ldr	r2, [pc, #284]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e6:	4b45      	ldr	r3, [pc, #276]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 80028e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80028f4:	e07c      	b.n	80029f0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM3)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a41      	ldr	r2, [pc, #260]	@ (8002a00 <HAL_TIM_PWM_MspInit+0x13c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10f      	bne.n	8002920 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002900:	4b3e      	ldr	r3, [pc, #248]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 8002902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002906:	4a3d      	ldr	r2, [pc, #244]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002910:	4b3a      	ldr	r3, [pc, #232]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 8002912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	623b      	str	r3, [r7, #32]
 800291c:	6a3b      	ldr	r3, [r7, #32]
}
 800291e:	e067      	b.n	80029f0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM4)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a37      	ldr	r2, [pc, #220]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x140>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d10f      	bne.n	800294a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800292a:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 800292c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002930:	4a32      	ldr	r2, [pc, #200]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800293a:	4b30      	ldr	r3, [pc, #192]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 800293c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	69fb      	ldr	r3, [r7, #28]
}
 8002948:	e052      	b.n	80029f0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM5)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a08 <HAL_TIM_PWM_MspInit+0x144>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d10f      	bne.n	8002974 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002954:	4b29      	ldr	r3, [pc, #164]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 8002956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800295a:	4a28      	ldr	r2, [pc, #160]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002964:	4b25      	ldr	r3, [pc, #148]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 8002966:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	69bb      	ldr	r3, [r7, #24]
}
 8002972:	e03d      	b.n	80029f0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM8)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a24      	ldr	r2, [pc, #144]	@ (8002a0c <HAL_TIM_PWM_MspInit+0x148>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10f      	bne.n	800299e <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800297e:	4b1f      	ldr	r3, [pc, #124]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 8002980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 8002986:	f043 0302 	orr.w	r3, r3, #2
 800298a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800298e:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 8002990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697b      	ldr	r3, [r7, #20]
}
 800299c:	e028      	b.n	80029f0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM12)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a10 <HAL_TIM_PWM_MspInit+0x14c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10f      	bne.n	80029c8 <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029a8:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 80029aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 80029b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029b8:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 80029ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
}
 80029c6:	e013      	b.n	80029f0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM15)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a11      	ldr	r2, [pc, #68]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x150>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10e      	bne.n	80029f0 <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80029d2:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 80029d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029d8:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_TIM_PWM_MspInit+0x138>)
 80029e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	bf00      	nop
 80029f2:	372c      	adds	r7, #44	@ 0x2c
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	58024400 	.word	0x58024400
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	40000c00 	.word	0x40000c00
 8002a0c:	40010400 	.word	0x40010400
 8002a10:	40001800 	.word	0x40001800
 8002a14:	40014000 	.word	0x40014000

08002a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b090      	sub	sp, #64	@ 0x40
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a95      	ldr	r2, [pc, #596]	@ (8002c8c <HAL_TIM_MspPostInit+0x274>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d120      	bne.n	8002a7c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a3a:	4b95      	ldr	r3, [pc, #596]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a40:	4a93      	ldr	r2, [pc, #588]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002a42:	f043 0310 	orr.w	r3, r3, #16
 8002a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a4a:	4b91      	ldr	r3, [pc, #580]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_13;
 8002a58:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8002a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a72:	4619      	mov	r1, r3
 8002a74:	4887      	ldr	r0, [pc, #540]	@ (8002c94 <HAL_TIM_MspPostInit+0x27c>)
 8002a76:	f003 f871 	bl	8005b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002a7a:	e103      	b.n	8002c84 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a84:	d120      	bne.n	8002ac8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	4b82      	ldr	r3, [pc, #520]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a8c:	4a80      	ldr	r2, [pc, #512]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a96:	4b7e      	ldr	r3, [pc, #504]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002aa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4875      	ldr	r0, [pc, #468]	@ (8002c98 <HAL_TIM_MspPostInit+0x280>)
 8002ac2:	f003 f84b 	bl	8005b5c <HAL_GPIO_Init>
}
 8002ac6:	e0dd      	b.n	8002c84 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a73      	ldr	r2, [pc, #460]	@ (8002c9c <HAL_TIM_MspPostInit+0x284>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d11f      	bne.n	8002b12 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ad8:	4a6d      	ldr	r2, [pc, #436]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ae2:	4b6b      	ldr	r3, [pc, #428]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	623b      	str	r3, [r7, #32]
 8002aee:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002af0:	2340      	movs	r3, #64	@ 0x40
 8002af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afc:	2300      	movs	r3, #0
 8002afe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b00:	2302      	movs	r3, #2
 8002b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4863      	ldr	r0, [pc, #396]	@ (8002c98 <HAL_TIM_MspPostInit+0x280>)
 8002b0c:	f003 f826 	bl	8005b5c <HAL_GPIO_Init>
}
 8002b10:	e0b8      	b.n	8002c84 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM4)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a62      	ldr	r2, [pc, #392]	@ (8002ca0 <HAL_TIM_MspPostInit+0x288>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d11f      	bne.n	8002b5c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b22:	4a5b      	ldr	r2, [pc, #364]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b2c:	4b58      	ldr	r3, [pc, #352]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b3a:	2340      	movs	r3, #64	@ 0x40
 8002b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b52:	4619      	mov	r1, r3
 8002b54:	4853      	ldr	r0, [pc, #332]	@ (8002ca4 <HAL_TIM_MspPostInit+0x28c>)
 8002b56:	f003 f801 	bl	8005b5c <HAL_GPIO_Init>
}
 8002b5a:	e093      	b.n	8002c84 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM5)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a51      	ldr	r2, [pc, #324]	@ (8002ca8 <HAL_TIM_MspPostInit+0x290>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d11f      	bne.n	8002ba6 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b6c:	4a48      	ldr	r2, [pc, #288]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b76:	4b46      	ldr	r3, [pc, #280]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b84:	2301      	movs	r3, #1
 8002b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b94:	2302      	movs	r3, #2
 8002b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	483e      	ldr	r0, [pc, #248]	@ (8002c98 <HAL_TIM_MspPostInit+0x280>)
 8002ba0:	f002 ffdc 	bl	8005b5c <HAL_GPIO_Init>
}
 8002ba4:	e06e      	b.n	8002c84 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a40      	ldr	r2, [pc, #256]	@ (8002cac <HAL_TIM_MspPostInit+0x294>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d11f      	bne.n	8002bf0 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb0:	4b37      	ldr	r3, [pc, #220]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb6:	4a36      	ldr	r2, [pc, #216]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002bb8:	f043 0304 	orr.w	r3, r3, #4
 8002bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bc0:	4b33      	ldr	r3, [pc, #204]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bce:	2340      	movs	r3, #64	@ 0x40
 8002bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bde:	2303      	movs	r3, #3
 8002be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002be6:	4619      	mov	r1, r3
 8002be8:	4831      	ldr	r0, [pc, #196]	@ (8002cb0 <HAL_TIM_MspPostInit+0x298>)
 8002bea:	f002 ffb7 	bl	8005b5c <HAL_GPIO_Init>
}
 8002bee:	e049      	b.n	8002c84 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM12)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8002cb4 <HAL_TIM_MspPostInit+0x29c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d120      	bne.n	8002c3c <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfa:	4b25      	ldr	r3, [pc, #148]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c00:	4a23      	ldr	r2, [pc, #140]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002c02:	f043 0302 	orr.w	r3, r3, #2
 8002c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c0a:	4b21      	ldr	r3, [pc, #132]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c32:	4619      	mov	r1, r3
 8002c34:	481b      	ldr	r0, [pc, #108]	@ (8002ca4 <HAL_TIM_MspPostInit+0x28c>)
 8002c36:	f002 ff91 	bl	8005b5c <HAL_GPIO_Init>
}
 8002c3a:	e023      	b.n	8002c84 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM15)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb8 <HAL_TIM_MspPostInit+0x2a0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d11e      	bne.n	8002c84 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c4c:	4a10      	ldr	r2, [pc, #64]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <HAL_TIM_MspPostInit+0x278>)
 8002c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c64:	2304      	movs	r3, #4
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002c74:	2304      	movs	r3, #4
 8002c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4806      	ldr	r0, [pc, #24]	@ (8002c98 <HAL_TIM_MspPostInit+0x280>)
 8002c80:	f002 ff6c 	bl	8005b5c <HAL_GPIO_Init>
}
 8002c84:	bf00      	nop
 8002c86:	3740      	adds	r7, #64	@ 0x40
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40010000 	.word	0x40010000
 8002c90:	58024400 	.word	0x58024400
 8002c94:	58021000 	.word	0x58021000
 8002c98:	58020000 	.word	0x58020000
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800
 8002ca4:	58020400 	.word	0x58020400
 8002ca8:	40000c00 	.word	0x40000c00
 8002cac:	40010400 	.word	0x40010400
 8002cb0:	58020800 	.word	0x58020800
 8002cb4:	40001800 	.word	0x40001800
 8002cb8:	40014000 	.word	0x40014000

08002cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0c0      	sub	sp, #256	@ 0x100
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cd8:	22b8      	movs	r2, #184	@ 0xb8
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f00e f8ab 	bl	8010e38 <memset>
  if(huart->Instance==UART4)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4ac3      	ldr	r2, [pc, #780]	@ (8002ff4 <HAL_UART_MspInit+0x338>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d16b      	bne.n	8002dc4 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002cec:	f04f 0202 	mov.w	r2, #2
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d02:	4618      	mov	r0, r3
 8002d04:	f004 f9d8 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002d0e:	f7ff f9f7 	bl	8002100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d12:	4bb9      	ldr	r3, [pc, #740]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d18:	4ab7      	ldr	r2, [pc, #732]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002d1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d22:	4bb5      	ldr	r3, [pc, #724]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d30:	4bb1      	ldr	r3, [pc, #708]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d36:	4ab0      	ldr	r2, [pc, #704]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d40:	4bad      	ldr	r3, [pc, #692]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d4e:	4baa      	ldr	r3, [pc, #680]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d54:	4aa8      	ldr	r2, [pc, #672]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002d56:	f043 0308 	orr.w	r3, r3, #8
 8002d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d5e:	4ba6      	ldr	r3, [pc, #664]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PB9     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d86:	2308      	movs	r3, #8
 8002d88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002d90:	4619      	mov	r1, r3
 8002d92:	489a      	ldr	r0, [pc, #616]	@ (8002ffc <HAL_UART_MspInit+0x340>)
 8002d94:	f002 fee2 	bl	8005b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002db0:	2308      	movs	r3, #8
 8002db2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002db6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4890      	ldr	r0, [pc, #576]	@ (8003000 <HAL_UART_MspInit+0x344>)
 8002dbe:	f002 fecd 	bl	8005b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8002dc2:	e111      	b.n	8002fe8 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART5)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a8e      	ldr	r2, [pc, #568]	@ (8003004 <HAL_UART_MspInit+0x348>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d147      	bne.n	8002e5e <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002dce:	f04f 0202 	mov.w	r2, #2
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002de4:	4618      	mov	r0, r3
 8002de6:	f004 f967 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8002df0:	f7ff f986 	bl	8002100 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002df4:	4b80      	ldr	r3, [pc, #512]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dfa:	4a7f      	ldr	r2, [pc, #508]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002dfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e04:	4b7c      	ldr	r3, [pc, #496]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e0e:	623b      	str	r3, [r7, #32]
 8002e10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e12:	4b79      	ldr	r3, [pc, #484]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e18:	4a77      	ldr	r2, [pc, #476]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e22:	4b75      	ldr	r3, [pc, #468]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8002e30:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002e34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002e4a:	230e      	movs	r3, #14
 8002e4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e50:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e54:	4619      	mov	r1, r3
 8002e56:	4869      	ldr	r0, [pc, #420]	@ (8002ffc <HAL_UART_MspInit+0x340>)
 8002e58:	f002 fe80 	bl	8005b5c <HAL_GPIO_Init>
}
 8002e5c:	e0c4      	b.n	8002fe8 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART7)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a69      	ldr	r2, [pc, #420]	@ (8003008 <HAL_UART_MspInit+0x34c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d147      	bne.n	8002ef8 <HAL_UART_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002e68:	f04f 0202 	mov.w	r2, #2
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 f91a 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8002e8a:	f7ff f939 	bl	8002100 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e94:	4a58      	ldr	r2, [pc, #352]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002e96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e9e:	4b56      	ldr	r3, [pc, #344]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ea4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eac:	4b52      	ldr	r3, [pc, #328]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eb2:	4a51      	ldr	r2, [pc, #324]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002eb4:	f043 0310 	orr.w	r3, r3, #16
 8002eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002eca:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ece:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002ee4:	2307      	movs	r3, #7
 8002ee6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eea:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4846      	ldr	r0, [pc, #280]	@ (800300c <HAL_UART_MspInit+0x350>)
 8002ef2:	f002 fe33 	bl	8005b5c <HAL_GPIO_Init>
}
 8002ef6:	e077      	b.n	8002fe8 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART8)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a44      	ldr	r2, [pc, #272]	@ (8003010 <HAL_UART_MspInit+0x354>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d172      	bne.n	8002fe8 <HAL_UART_MspInit+0x32c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002f02:	f04f 0202 	mov.w	r2, #2
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 f8cd 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8002f24:	f7ff f8ec 	bl	8002100 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002f28:	4b33      	ldr	r3, [pc, #204]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f2e:	4a32      	ldr	r2, [pc, #200]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002f30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f38:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f46:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002f4e:	f043 0310 	orr.w	r3, r3, #16
 8002f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f56:	4b28      	ldr	r3, [pc, #160]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f64:	4b24      	ldr	r3, [pc, #144]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f6a:	4a23      	ldr	r2, [pc, #140]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f74:	4b20      	ldr	r3, [pc, #128]	@ (8002ff8 <HAL_UART_MspInit+0x33c>)
 8002f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002f82:	2303      	movs	r3, #3
 8002f84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fa0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4819      	ldr	r0, [pc, #100]	@ (800300c <HAL_UART_MspInit+0x350>)
 8002fa8:	f002 fdd8 	bl	8005b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8002fac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002fb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fcc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	480b      	ldr	r0, [pc, #44]	@ (8003000 <HAL_UART_MspInit+0x344>)
 8002fd4:	f002 fdc2 	bl	8005b5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2053      	movs	r0, #83	@ 0x53
 8002fde:	f001 ffac 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002fe2:	2053      	movs	r0, #83	@ 0x53
 8002fe4:	f001 ffc3 	bl	8004f6e <HAL_NVIC_EnableIRQ>
}
 8002fe8:	bf00      	nop
 8002fea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40004c00 	.word	0x40004c00
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	58020400 	.word	0x58020400
 8003000:	58020c00 	.word	0x58020c00
 8003004:	40005000 	.word	0x40005000
 8003008:	40007800 	.word	0x40007800
 800300c:	58021000 	.word	0x58021000
 8003010:	40007c00 	.word	0x40007c00

08003014 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b0bc      	sub	sp, #240	@ 0xf0
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800302c:	f107 0320 	add.w	r3, r7, #32
 8003030:	22b8      	movs	r2, #184	@ 0xb8
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f00d feff 	bl	8010e38 <memset>
  if(husart->Instance==USART1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a73      	ldr	r2, [pc, #460]	@ (800320c <HAL_USART_MspInit+0x1f8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d147      	bne.n	80030d4 <HAL_USART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003044:	f04f 0201 	mov.w	r2, #1
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003056:	f107 0320 	add.w	r3, r7, #32
 800305a:	4618      	mov	r0, r3
 800305c:	f004 f82c 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8003066:	f7ff f84b 	bl	8002100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800306a:	4b69      	ldr	r3, [pc, #420]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 800306c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003070:	4a67      	ldr	r2, [pc, #412]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 8003072:	f043 0310 	orr.w	r3, r3, #16
 8003076:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800307a:	4b65      	ldr	r3, [pc, #404]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 800307c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003088:	4b61      	ldr	r3, [pc, #388]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 800308a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800308e:	4a60      	ldr	r2, [pc, #384]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003098:	4b5d      	ldr	r3, [pc, #372]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 800309a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	69bb      	ldr	r3, [r7, #24]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 80030a6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80030aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030c0:	2307      	movs	r3, #7
 80030c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030ca:	4619      	mov	r1, r3
 80030cc:	4851      	ldr	r0, [pc, #324]	@ (8003214 <HAL_USART_MspInit+0x200>)
 80030ce:	f002 fd45 	bl	8005b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030d2:	e097      	b.n	8003204 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003218 <HAL_USART_MspInit+0x204>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d146      	bne.n	800316c <HAL_USART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030de:	f04f 0202 	mov.w	r2, #2
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030f0:	f107 0320 	add.w	r3, r7, #32
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 ffdf 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_USART_MspInit+0xf0>
      Error_Handler();
 8003100:	f7fe fffe 	bl	8002100 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003104:	4b42      	ldr	r3, [pc, #264]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 8003106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800310a:	4a41      	ldr	r2, [pc, #260]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 800310c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003110:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003114:	4b3e      	ldr	r3, [pc, #248]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 8003116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800311a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003122:	4b3b      	ldr	r3, [pc, #236]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 8003124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003128:	4a39      	ldr	r2, [pc, #228]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 800312a:	f043 0308 	orr.w	r3, r3, #8
 800312e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003132:	4b37      	ldr	r3, [pc, #220]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 8003134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
 8003140:	23e8      	movs	r3, #232	@ 0xe8
 8003142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003158:	2307      	movs	r3, #7
 800315a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800315e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003162:	4619      	mov	r1, r3
 8003164:	482d      	ldr	r0, [pc, #180]	@ (800321c <HAL_USART_MspInit+0x208>)
 8003166:	f002 fcf9 	bl	8005b5c <HAL_GPIO_Init>
}
 800316a:	e04b      	b.n	8003204 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART3)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2b      	ldr	r2, [pc, #172]	@ (8003220 <HAL_USART_MspInit+0x20c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d146      	bne.n	8003204 <HAL_USART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003176:	f04f 0202 	mov.w	r2, #2
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003188:	f107 0320 	add.w	r3, r7, #32
 800318c:	4618      	mov	r0, r3
 800318e:	f003 ff93 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_USART_MspInit+0x188>
      Error_Handler();
 8003198:	f7fe ffb2 	bl	8002100 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800319c:	4b1c      	ldr	r3, [pc, #112]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 800319e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031ac:	4b18      	ldr	r3, [pc, #96]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 80031ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ba:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031c0:	4a13      	ldr	r2, [pc, #76]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 80031c2:	f043 0308 	orr.w	r3, r3, #8
 80031c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031ca:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <HAL_USART_MspInit+0x1fc>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 80031d8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80031dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031f2:	2307      	movs	r3, #7
 80031f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031fc:	4619      	mov	r1, r3
 80031fe:	4807      	ldr	r0, [pc, #28]	@ (800321c <HAL_USART_MspInit+0x208>)
 8003200:	f002 fcac 	bl	8005b5c <HAL_GPIO_Init>
}
 8003204:	bf00      	nop
 8003206:	37f0      	adds	r7, #240	@ 0xf0
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40011000 	.word	0x40011000
 8003210:	58024400 	.word	0x58024400
 8003214:	58020000 	.word	0x58020000
 8003218:	40004400 	.word	0x40004400
 800321c:	58020c00 	.word	0x58020c00
 8003220:	40004800 	.word	0x40004800

08003224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003228:	bf00      	nop
 800322a:	e7fd      	b.n	8003228 <NMI_Handler+0x4>

0800322c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003230:	bf00      	nop
 8003232:	e7fd      	b.n	8003230 <HardFault_Handler+0x4>

08003234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <MemManage_Handler+0x4>

0800323c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <BusFault_Handler+0x4>

08003244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003248:	bf00      	nop
 800324a:	e7fd      	b.n	8003248 <UsageFault_Handler+0x4>

0800324c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800327a:	f000 f9cb 	bl	8003614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003288:	4802      	ldr	r0, [pc, #8]	@ (8003294 <UART8_IRQHandler+0x10>)
 800328a:	f009 f845 	bl	800c318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	24000a00 	.word	0x24000a00

08003298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return 1;
 800329c:	2301      	movs	r3, #1
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <_kill>:

int _kill(int pid, int sig)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032b2:	f00d fe13 	bl	8010edc <__errno>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2216      	movs	r2, #22
 80032ba:	601a      	str	r2, [r3, #0]
  return -1;
 80032bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <_exit>:

void _exit (int status)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032d0:	f04f 31ff 	mov.w	r1, #4294967295
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ffe7 	bl	80032a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <_exit+0x12>

080032de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	e00a      	b.n	8003306 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032f0:	f3af 8000 	nop.w
 80032f4:	4601      	mov	r1, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	60ba      	str	r2, [r7, #8]
 80032fc:	b2ca      	uxtb	r2, r1
 80032fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3301      	adds	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	dbf0      	blt.n	80032f0 <_read+0x12>
  }

  return len;
 800330e:	687b      	ldr	r3, [r7, #4]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003340:	605a      	str	r2, [r3, #4]
  return 0;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_isatty>:

int _isatty(int file)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003358:	2301      	movs	r3, #1
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003388:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <_sbrk+0x5c>)
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <_sbrk+0x60>)
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003394:	4b13      	ldr	r3, [pc, #76]	@ (80033e4 <_sbrk+0x64>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <_sbrk+0x64>)
 800339e:	4a12      	ldr	r2, [pc, #72]	@ (80033e8 <_sbrk+0x68>)
 80033a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033a2:	4b10      	ldr	r3, [pc, #64]	@ (80033e4 <_sbrk+0x64>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d207      	bcs.n	80033c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033b0:	f00d fd94 	bl	8010edc <__errno>
 80033b4:	4603      	mov	r3, r0
 80033b6:	220c      	movs	r2, #12
 80033b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	e009      	b.n	80033d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033c0:	4b08      	ldr	r3, [pc, #32]	@ (80033e4 <_sbrk+0x64>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033c6:	4b07      	ldr	r3, [pc, #28]	@ (80033e4 <_sbrk+0x64>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	4a05      	ldr	r2, [pc, #20]	@ (80033e4 <_sbrk+0x64>)
 80033d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033d2:	68fb      	ldr	r3, [r7, #12]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	24050000 	.word	0x24050000
 80033e0:	00000400 	.word	0x00000400
 80033e4:	24000bbc 	.word	0x24000bbc
 80033e8:	24000d28 	.word	0x24000d28

080033ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033f0:	4b32      	ldr	r3, [pc, #200]	@ (80034bc <SystemInit+0xd0>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f6:	4a31      	ldr	r2, [pc, #196]	@ (80034bc <SystemInit+0xd0>)
 80033f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003400:	4b2f      	ldr	r3, [pc, #188]	@ (80034c0 <SystemInit+0xd4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	2b06      	cmp	r3, #6
 800340a:	d807      	bhi.n	800341c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800340c:	4b2c      	ldr	r3, [pc, #176]	@ (80034c0 <SystemInit+0xd4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 030f 	bic.w	r3, r3, #15
 8003414:	4a2a      	ldr	r2, [pc, #168]	@ (80034c0 <SystemInit+0xd4>)
 8003416:	f043 0307 	orr.w	r3, r3, #7
 800341a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800341c:	4b29      	ldr	r3, [pc, #164]	@ (80034c4 <SystemInit+0xd8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a28      	ldr	r2, [pc, #160]	@ (80034c4 <SystemInit+0xd8>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003428:	4b26      	ldr	r3, [pc, #152]	@ (80034c4 <SystemInit+0xd8>)
 800342a:	2200      	movs	r2, #0
 800342c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800342e:	4b25      	ldr	r3, [pc, #148]	@ (80034c4 <SystemInit+0xd8>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4924      	ldr	r1, [pc, #144]	@ (80034c4 <SystemInit+0xd8>)
 8003434:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <SystemInit+0xdc>)
 8003436:	4013      	ands	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800343a:	4b21      	ldr	r3, [pc, #132]	@ (80034c0 <SystemInit+0xd4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003446:	4b1e      	ldr	r3, [pc, #120]	@ (80034c0 <SystemInit+0xd4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 030f 	bic.w	r3, r3, #15
 800344e:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <SystemInit+0xd4>)
 8003450:	f043 0307 	orr.w	r3, r3, #7
 8003454:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003456:	4b1b      	ldr	r3, [pc, #108]	@ (80034c4 <SystemInit+0xd8>)
 8003458:	2200      	movs	r2, #0
 800345a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800345c:	4b19      	ldr	r3, [pc, #100]	@ (80034c4 <SystemInit+0xd8>)
 800345e:	2200      	movs	r2, #0
 8003460:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003462:	4b18      	ldr	r3, [pc, #96]	@ (80034c4 <SystemInit+0xd8>)
 8003464:	2200      	movs	r2, #0
 8003466:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003468:	4b16      	ldr	r3, [pc, #88]	@ (80034c4 <SystemInit+0xd8>)
 800346a:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <SystemInit+0xe0>)
 800346c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800346e:	4b15      	ldr	r3, [pc, #84]	@ (80034c4 <SystemInit+0xd8>)
 8003470:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <SystemInit+0xe4>)
 8003472:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003474:	4b13      	ldr	r3, [pc, #76]	@ (80034c4 <SystemInit+0xd8>)
 8003476:	4a17      	ldr	r2, [pc, #92]	@ (80034d4 <SystemInit+0xe8>)
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800347a:	4b12      	ldr	r3, [pc, #72]	@ (80034c4 <SystemInit+0xd8>)
 800347c:	2200      	movs	r2, #0
 800347e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003480:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <SystemInit+0xd8>)
 8003482:	4a14      	ldr	r2, [pc, #80]	@ (80034d4 <SystemInit+0xe8>)
 8003484:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003486:	4b0f      	ldr	r3, [pc, #60]	@ (80034c4 <SystemInit+0xd8>)
 8003488:	2200      	movs	r2, #0
 800348a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800348c:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <SystemInit+0xd8>)
 800348e:	4a11      	ldr	r2, [pc, #68]	@ (80034d4 <SystemInit+0xe8>)
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003492:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <SystemInit+0xd8>)
 8003494:	2200      	movs	r2, #0
 8003496:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003498:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <SystemInit+0xd8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a09      	ldr	r2, [pc, #36]	@ (80034c4 <SystemInit+0xd8>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80034a4:	4b07      	ldr	r3, [pc, #28]	@ (80034c4 <SystemInit+0xd8>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80034aa:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <SystemInit+0xec>)
 80034ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80034b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000ed00 	.word	0xe000ed00
 80034c0:	52002000 	.word	0x52002000
 80034c4:	58024400 	.word	0x58024400
 80034c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80034cc:	02020200 	.word	0x02020200
 80034d0:	01ff0000 	.word	0x01ff0000
 80034d4:	01010280 	.word	0x01010280
 80034d8:	52004000 	.word	0x52004000

080034dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80034dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003514 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80034e0:	f7ff ff84 	bl	80033ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e4:	480c      	ldr	r0, [pc, #48]	@ (8003518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034e6:	490d      	ldr	r1, [pc, #52]	@ (800351c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034ec:	e002      	b.n	80034f4 <LoopCopyDataInit>

080034ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034f2:	3304      	adds	r3, #4

080034f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f8:	d3f9      	bcc.n	80034ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003500:	e001      	b.n	8003506 <LoopFillZerobss>

08003502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003504:	3204      	adds	r2, #4

08003506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003508:	d3fb      	bcc.n	8003502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800350a:	f00d fced 	bl	8010ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800350e:	f7fd fb09 	bl	8000b24 <main>
  bx  lr
 8003512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003514:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003518:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800351c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8003520:	08014838 	.word	0x08014838
  ldr r2, =_sbss
 8003524:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8003528:	24000d24 	.word	0x24000d24

0800352c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800352c:	e7fe      	b.n	800352c <ADC3_IRQHandler>
	...

08003530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003536:	2003      	movs	r0, #3
 8003538:	f001 fcf4 	bl	8004f24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800353c:	f003 fbe6 	bl	8006d0c <HAL_RCC_GetSysClockFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <HAL_Init+0x68>)
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	4913      	ldr	r1, [pc, #76]	@ (800359c <HAL_Init+0x6c>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800355a:	4b0f      	ldr	r3, [pc, #60]	@ (8003598 <HAL_Init+0x68>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	4a0e      	ldr	r2, [pc, #56]	@ (800359c <HAL_Init+0x6c>)
 8003564:	5cd3      	ldrb	r3, [r2, r3]
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
 8003570:	4a0b      	ldr	r2, [pc, #44]	@ (80035a0 <HAL_Init+0x70>)
 8003572:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003574:	4a0b      	ldr	r2, [pc, #44]	@ (80035a4 <HAL_Init+0x74>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800357a:	200f      	movs	r0, #15
 800357c:	f000 f814 	bl	80035a8 <HAL_InitTick>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e002      	b.n	8003590 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800358a:	f7fe fdbf 	bl	800210c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	58024400 	.word	0x58024400
 800359c:	0801439c 	.word	0x0801439c
 80035a0:	24000004 	.word	0x24000004
 80035a4:	24000000 	.word	0x24000000

080035a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80035b0:	4b15      	ldr	r3, [pc, #84]	@ (8003608 <HAL_InitTick+0x60>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e021      	b.n	8003600 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80035bc:	4b13      	ldr	r3, [pc, #76]	@ (800360c <HAL_InitTick+0x64>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <HAL_InitTick+0x60>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	4619      	mov	r1, r3
 80035c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 fcd9 	bl	8004f8a <HAL_SYSTICK_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e00e      	b.n	8003600 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b0f      	cmp	r3, #15
 80035e6:	d80a      	bhi.n	80035fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035e8:	2200      	movs	r2, #0
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	f001 fca3 	bl	8004f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035f4:	4a06      	ldr	r2, [pc, #24]	@ (8003610 <HAL_InitTick+0x68>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e000      	b.n	8003600 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	2400000c 	.word	0x2400000c
 800360c:	24000000 	.word	0x24000000
 8003610:	24000008 	.word	0x24000008

08003614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <HAL_IncTick+0x20>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_IncTick+0x24>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4413      	add	r3, r2
 8003624:	4a04      	ldr	r2, [pc, #16]	@ (8003638 <HAL_IncTick+0x24>)
 8003626:	6013      	str	r3, [r2, #0]
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	2400000c 	.word	0x2400000c
 8003638:	24000bc0 	.word	0x24000bc0

0800363c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return uwTick;
 8003640:	4b03      	ldr	r3, [pc, #12]	@ (8003650 <HAL_GetTick+0x14>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	24000bc0 	.word	0x24000bc0

08003654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800365c:	f7ff ffee 	bl	800363c <HAL_GetTick>
 8003660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d005      	beq.n	800367a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800366e:	4b0a      	ldr	r3, [pc, #40]	@ (8003698 <HAL_Delay+0x44>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800367a:	bf00      	nop
 800367c:	f7ff ffde 	bl	800363c <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	429a      	cmp	r2, r3
 800368a:	d8f7      	bhi.n	800367c <HAL_Delay+0x28>
  {
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	2400000c 	.word	0x2400000c

0800369c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	609a      	str	r2, [r3, #8]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3360      	adds	r3, #96	@ 0x60
 8003716:	461a      	mov	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a10      	ldr	r2, [pc, #64]	@ (8003764 <LL_ADC_SetOffset+0x60>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10b      	bne.n	8003740 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800373e:	e00b      	b.n	8003758 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	430b      	orrs	r3, r1
 8003752:	431a      	orrs	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	601a      	str	r2, [r3, #0]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	58026000 	.word	0x58026000

08003768 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3360      	adds	r3, #96	@ 0x60
 8003776:	461a      	mov	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	611a      	str	r2, [r3, #16]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003808 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00e      	beq.n	80037fa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3360      	adds	r3, #96	@ 0x60
 80037e0:	461a      	mov	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	601a      	str	r2, [r3, #0]
  }
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	58026000 	.word	0x58026000

0800380c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a0c      	ldr	r2, [pc, #48]	@ (800384c <LL_ADC_SetOffsetSaturation+0x40>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10e      	bne.n	800383e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3360      	adds	r3, #96	@ 0x60
 8003824:	461a      	mov	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	431a      	orrs	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	58026000 	.word	0x58026000

08003850 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a0c      	ldr	r2, [pc, #48]	@ (8003890 <LL_ADC_SetOffsetSign+0x40>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d10e      	bne.n	8003882 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3360      	adds	r3, #96	@ 0x60
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	431a      	orrs	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	58026000 	.word	0x58026000

08003894 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3360      	adds	r3, #96	@ 0x60
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a0c      	ldr	r2, [pc, #48]	@ (80038e4 <LL_ADC_SetOffsetState+0x50>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80038c6:	e007      	b.n	80038d8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	601a      	str	r2, [r3, #0]
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	58026000 	.word	0x58026000

080038e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3330      	adds	r3, #48	@ 0x30
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	211f      	movs	r1, #31
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	401a      	ands	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	0e9b      	lsrs	r3, r3, #26
 8003920:	f003 011f 	and.w	r1, r3, #31
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	431a      	orrs	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3314      	adds	r3, #20
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	0e5b      	lsrs	r3, r3, #25
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	4413      	add	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	0d1b      	lsrs	r3, r3, #20
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2107      	movs	r1, #7
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	401a      	ands	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	0d1b      	lsrs	r3, r3, #20
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	431a      	orrs	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a10 <LL_ADC_SetChannelSingleDiff+0x78>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d115      	bne.n	80039d8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039b8:	43db      	mvns	r3, r3
 80039ba:	401a      	ands	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f003 0318 	and.w	r3, r3, #24
 80039c2:	4914      	ldr	r1, [pc, #80]	@ (8003a14 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80039c4:	40d9      	lsrs	r1, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	400b      	ands	r3, r1
 80039ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039ce:	431a      	orrs	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80039d6:	e014      	b.n	8003a02 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e4:	43db      	mvns	r3, r3
 80039e6:	401a      	ands	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0318 	and.w	r3, r3, #24
 80039ee:	4909      	ldr	r1, [pc, #36]	@ (8003a14 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80039f0:	40d9      	lsrs	r1, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	400b      	ands	r3, r1
 80039f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039fa:	431a      	orrs	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003a02:	bf00      	nop
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	58026000 	.word	0x58026000
 8003a14:	000fffff 	.word	0x000fffff

08003a18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6093      	str	r3, [r2, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	5fffffc0 	.word	0x5fffffc0

08003a3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a50:	d101      	bne.n	8003a56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <LL_ADC_EnableInternalRegulator+0x24>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	6fffffc0 	.word	0x6fffffc0

08003a8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aa0:	d101      	bne.n	8003aa6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <LL_ADC_IsEnabled+0x18>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <LL_ADC_IsEnabled+0x1a>
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d101      	bne.n	8003af2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d101      	bne.n	8003b18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b089      	sub	sp, #36	@ 0x24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e1ee      	b.n	8003f20 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7fe faf5 	bl	8002140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff67 	bl	8003a3c <LL_ADC_IsDeepPowerDownEnabled>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff ff4d 	bl	8003a18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ff82 	bl	8003a8c <LL_ADC_IsInternalRegulatorEnabled>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d114      	bne.n	8003bb8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff ff66 	bl	8003a64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b98:	4b8e      	ldr	r3, [pc, #568]	@ (8003dd4 <HAL_ADC_Init+0x2ac>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	4a8e      	ldr	r2, [pc, #568]	@ (8003dd8 <HAL_ADC_Init+0x2b0>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003baa:	e002      	b.n	8003bb2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f9      	bne.n	8003bac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff65 	bl	8003a8c <LL_ADC_IsInternalRegulatorEnabled>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10d      	bne.n	8003be4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bcc:	f043 0210 	orr.w	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bd8:	f043 0201 	orr.w	r2, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff76 	bl	8003ada <LL_ADC_REG_IsConversionOngoing>
 8003bee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 8188 	bne.w	8003f0e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f040 8184 	bne.w	8003f0e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003c0e:	f043 0202 	orr.w	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ff4a 	bl	8003ab4 <LL_ADC_IsEnabled>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d136      	bne.n	8003c94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a6c      	ldr	r2, [pc, #432]	@ (8003ddc <HAL_ADC_Init+0x2b4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_ADC_Init+0x112>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6a      	ldr	r2, [pc, #424]	@ (8003de0 <HAL_ADC_Init+0x2b8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10e      	bne.n	8003c58 <HAL_ADC_Init+0x130>
 8003c3a:	4868      	ldr	r0, [pc, #416]	@ (8003ddc <HAL_ADC_Init+0x2b4>)
 8003c3c:	f7ff ff3a 	bl	8003ab4 <LL_ADC_IsEnabled>
 8003c40:	4604      	mov	r4, r0
 8003c42:	4867      	ldr	r0, [pc, #412]	@ (8003de0 <HAL_ADC_Init+0x2b8>)
 8003c44:	f7ff ff36 	bl	8003ab4 <LL_ADC_IsEnabled>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4323      	orrs	r3, r4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	e008      	b.n	8003c6a <HAL_ADC_Init+0x142>
 8003c58:	4862      	ldr	r0, [pc, #392]	@ (8003de4 <HAL_ADC_Init+0x2bc>)
 8003c5a:	f7ff ff2b 	bl	8003ab4 <LL_ADC_IsEnabled>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d012      	beq.n	8003c94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a5a      	ldr	r2, [pc, #360]	@ (8003ddc <HAL_ADC_Init+0x2b4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_ADC_Init+0x15a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a58      	ldr	r2, [pc, #352]	@ (8003de0 <HAL_ADC_Init+0x2b8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <HAL_ADC_Init+0x15e>
 8003c82:	4a59      	ldr	r2, [pc, #356]	@ (8003de8 <HAL_ADC_Init+0x2c0>)
 8003c84:	e000      	b.n	8003c88 <HAL_ADC_Init+0x160>
 8003c86:	4a59      	ldr	r2, [pc, #356]	@ (8003dec <HAL_ADC_Init+0x2c4>)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7ff fd04 	bl	800369c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a52      	ldr	r2, [pc, #328]	@ (8003de4 <HAL_ADC_Init+0x2bc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d129      	bne.n	8003cf2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	7e5b      	ldrb	r3, [r3, #25]
 8003ca2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ca8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003cae:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d013      	beq.n	8003ce0 <HAL_ADC_Init+0x1b8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d00d      	beq.n	8003cdc <HAL_ADC_Init+0x1b4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b1c      	cmp	r3, #28
 8003cc6:	d007      	beq.n	8003cd8 <HAL_ADC_Init+0x1b0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b18      	cmp	r3, #24
 8003cce:	d101      	bne.n	8003cd4 <HAL_ADC_Init+0x1ac>
 8003cd0:	2318      	movs	r3, #24
 8003cd2:	e006      	b.n	8003ce2 <HAL_ADC_Init+0x1ba>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e004      	b.n	8003ce2 <HAL_ADC_Init+0x1ba>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	e002      	b.n	8003ce2 <HAL_ADC_Init+0x1ba>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	e000      	b.n	8003ce2 <HAL_ADC_Init+0x1ba>
 8003ce0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003ce2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	e00e      	b.n	8003d10 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7e5b      	ldrb	r3, [r3, #25]
 8003cf6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cfc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d02:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d0a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d106      	bne.n	8003d28 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	045b      	lsls	r3, r3, #17
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d34:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a26      	ldr	r2, [pc, #152]	@ (8003de4 <HAL_ADC_Init+0x2bc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d115      	bne.n	8003d7a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	4b26      	ldr	r3, [pc, #152]	@ (8003df0 <HAL_ADC_Init+0x2c8>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	69b9      	ldr	r1, [r7, #24]
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	611a      	str	r2, [r3, #16]
 8003d78:	e009      	b.n	8003d8e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	4b1c      	ldr	r3, [pc, #112]	@ (8003df4 <HAL_ADC_Init+0x2cc>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	69b9      	ldr	r1, [r7, #24]
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fea1 	bl	8003ada <LL_ADC_REG_IsConversionOngoing>
 8003d98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff feae 	bl	8003b00 <LL_ADC_INJ_IsConversionOngoing>
 8003da4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f040 808e 	bne.w	8003eca <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 808a 	bne.w	8003eca <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a0a      	ldr	r2, [pc, #40]	@ (8003de4 <HAL_ADC_Init+0x2bc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d11b      	bne.n	8003df8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	7e1b      	ldrb	r3, [r3, #24]
 8003dc4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003dcc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	e018      	b.n	8003e06 <HAL_ADC_Init+0x2de>
 8003dd4:	24000000 	.word	0x24000000
 8003dd8:	053e2d63 	.word	0x053e2d63
 8003ddc:	40022000 	.word	0x40022000
 8003de0:	40022100 	.word	0x40022100
 8003de4:	58026000 	.word	0x58026000
 8003de8:	40022300 	.word	0x40022300
 8003dec:	58026300 	.word	0x58026300
 8003df0:	fff04007 	.word	0xfff04007
 8003df4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7e1b      	ldrb	r3, [r3, #24]
 8003dfc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	4b46      	ldr	r3, [pc, #280]	@ (8003f28 <HAL_ADC_Init+0x400>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	430b      	orrs	r3, r1
 8003e18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d137      	bne.n	8003e94 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f2c <HAL_ADC_Init+0x404>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d116      	bne.n	8003e62 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f30 <HAL_ADC_Init+0x408>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e46:	4311      	orrs	r1, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e4c:	4311      	orrs	r1, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003e52:	430a      	orrs	r2, r1
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	611a      	str	r2, [r3, #16]
 8003e60:	e020      	b.n	8003ea4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	4b32      	ldr	r3, [pc, #200]	@ (8003f34 <HAL_ADC_Init+0x40c>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0411      	lsls	r1, r2, #16
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e78:	4311      	orrs	r1, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003e84:	430a      	orrs	r2, r1
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	611a      	str	r2, [r3, #16]
 8003e92:	e007      	b.n	8003ea4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f2c <HAL_ADC_Init+0x404>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d002      	beq.n	8003eca <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fd67 	bl	8004998 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10c      	bne.n	8003eec <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	f023 010f 	bic.w	r1, r3, #15
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	1e5a      	subs	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003eea:	e007      	b.n	8003efc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 020f 	bic.w	r2, r2, #15
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f00:	f023 0303 	bic.w	r3, r3, #3
 8003f04:	f043 0201 	orr.w	r2, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	661a      	str	r2, [r3, #96]	@ 0x60
 8003f0c:	e007      	b.n	8003f1e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f12:	f043 0210 	orr.w	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3724      	adds	r7, #36	@ 0x24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd90      	pop	{r4, r7, pc}
 8003f28:	ffffbffc 	.word	0xffffbffc
 8003f2c:	58026000 	.word	0x58026000
 8003f30:	fc00f81f 	.word	0xfc00f81f
 8003f34:	fc00f81e 	.word	0xfc00f81e

08003f38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b0b9      	sub	sp, #228	@ 0xe4
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f52:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4aab      	ldr	r2, [pc, #684]	@ (8004208 <HAL_ADC_ConfigChannel+0x2d0>)
 8003f5a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x34>
 8003f66:	2302      	movs	r3, #2
 8003f68:	f000 bcfe 	b.w	8004968 <HAL_ADC_ConfigChannel+0xa30>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fdae 	bl	8003ada <LL_ADC_REG_IsConversionOngoing>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f040 84e2 	bne.w	800494a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	db38      	blt.n	8004000 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a9e      	ldr	r2, [pc, #632]	@ (800420c <HAL_ADC_ConfigChannel+0x2d4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d033      	beq.n	8004000 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d108      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x7e>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	0e9b      	lsrs	r3, r3, #26
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2201      	movs	r2, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	e01d      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0xba>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003fda:	2320      	movs	r3, #32
 8003fdc:	e004      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2201      	movs	r2, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	69d1      	ldr	r1, [r2, #28]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	f7ff fc6b 	bl	80038e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fd5f 	bl	8003ada <LL_ADC_REG_IsConversionOngoing>
 800401c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fd6b 	bl	8003b00 <LL_ADC_INJ_IsConversionOngoing>
 800402a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800402e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 8270 	bne.w	8004518 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004038:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 826b 	bne.w	8004518 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	461a      	mov	r2, r3
 8004050:	f7ff fc76 	bl	8003940 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6c      	ldr	r2, [pc, #432]	@ (800420c <HAL_ADC_ConfigChannel+0x2d4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10d      	bne.n	800407a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	08db      	lsrs	r3, r3, #3
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004078:	e032      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800407a:	4b65      	ldr	r3, [pc, #404]	@ (8004210 <HAL_ADC_ConfigChannel+0x2d8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004086:	d10b      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x168>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	e01d      	b.n	80040dc <HAL_ADC_ConfigChannel+0x1a4>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10b      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x18e>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	e00a      	b.n	80040dc <HAL_ADC_ConfigChannel+0x1a4>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d048      	beq.n	800417a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	6919      	ldr	r1, [r3, #16]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040f8:	f7ff fb04 	bl	8003704 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a42      	ldr	r2, [pc, #264]	@ (800420c <HAL_ADC_ConfigChannel+0x2d4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d119      	bne.n	800413a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6919      	ldr	r1, [r3, #16]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	461a      	mov	r2, r3
 8004114:	f7ff fb9c 	bl	8003850 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6919      	ldr	r1, [r3, #16]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d102      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x1f8>
 800412a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800412e:	e000      	b.n	8004132 <HAL_ADC_ConfigChannel+0x1fa>
 8004130:	2300      	movs	r3, #0
 8004132:	461a      	mov	r2, r3
 8004134:	f7ff fb6a 	bl	800380c <LL_ADC_SetOffsetSaturation>
 8004138:	e1ee      	b.n	8004518 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6919      	ldr	r1, [r3, #16]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004148:	2b01      	cmp	r3, #1
 800414a:	d102      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x21a>
 800414c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004150:	e000      	b.n	8004154 <HAL_ADC_ConfigChannel+0x21c>
 8004152:	2300      	movs	r3, #0
 8004154:	461a      	mov	r2, r3
 8004156:	f7ff fb37 	bl	80037c8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6919      	ldr	r1, [r3, #16]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	7e1b      	ldrb	r3, [r3, #24]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d102      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x238>
 800416a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800416e:	e000      	b.n	8004172 <HAL_ADC_ConfigChannel+0x23a>
 8004170:	2300      	movs	r3, #0
 8004172:	461a      	mov	r2, r3
 8004174:	f7ff fb0e 	bl	8003794 <LL_ADC_SetDataRightShift>
 8004178:	e1ce      	b.n	8004518 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a23      	ldr	r2, [pc, #140]	@ (800420c <HAL_ADC_ConfigChannel+0x2d4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	f040 8181 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff faeb 	bl	8003768 <LL_ADC_GetOffsetChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x27a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fae0 	bl	8003768 <LL_ADC_GetOffsetChannel>
 80041a8:	4603      	mov	r3, r0
 80041aa:	0e9b      	lsrs	r3, r3, #26
 80041ac:	f003 021f 	and.w	r2, r3, #31
 80041b0:	e01e      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x2b8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fad5 	bl	8003768 <LL_ADC_GetOffsetChannel>
 80041be:	4603      	mov	r3, r0
 80041c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80041d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80041d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e004      	b.n	80041ee <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80041e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x2dc>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	0e9b      	lsrs	r3, r3, #26
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	e01e      	b.n	8004246 <HAL_ADC_ConfigChannel+0x30e>
 8004208:	47ff0000 	.word	0x47ff0000
 800420c:	58026000 	.word	0x58026000
 8004210:	5c001000 	.word	0x5c001000
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800422c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004238:	2320      	movs	r3, #32
 800423a:	e004      	b.n	8004246 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800423c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004240:	fab3 f383 	clz	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	429a      	cmp	r2, r3
 8004248:	d106      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fb1e 	bl	8003894 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fa82 	bl	8003768 <LL_ADC_GetOffsetChannel>
 8004264:	4603      	mov	r3, r0
 8004266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x34c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2101      	movs	r1, #1
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fa77 	bl	8003768 <LL_ADC_GetOffsetChannel>
 800427a:	4603      	mov	r3, r0
 800427c:	0e9b      	lsrs	r3, r3, #26
 800427e:	f003 021f 	and.w	r2, r3, #31
 8004282:	e01e      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x38a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2101      	movs	r1, #1
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fa6c 	bl	8003768 <LL_ADC_GetOffsetChannel>
 8004290:	4603      	mov	r3, r0
 8004292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80042a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80042aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80042b2:	2320      	movs	r3, #32
 80042b4:	e004      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80042b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <HAL_ADC_ConfigChannel+0x3a2>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	0e9b      	lsrs	r3, r3, #26
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	e018      	b.n	800430c <HAL_ADC_ConfigChannel+0x3d4>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80042ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80042f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80042fe:	2320      	movs	r3, #32
 8004300:	e004      	b.n	800430c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8004302:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	429a      	cmp	r2, r3
 800430e:	d106      	bne.n	800431e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2200      	movs	r2, #0
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fabb 	bl	8003894 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2102      	movs	r1, #2
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fa1f 	bl	8003768 <LL_ADC_GetOffsetChannel>
 800432a:	4603      	mov	r3, r0
 800432c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <HAL_ADC_ConfigChannel+0x412>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2102      	movs	r1, #2
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fa14 	bl	8003768 <LL_ADC_GetOffsetChannel>
 8004340:	4603      	mov	r3, r0
 8004342:	0e9b      	lsrs	r3, r3, #26
 8004344:	f003 021f 	and.w	r2, r3, #31
 8004348:	e01e      	b.n	8004388 <HAL_ADC_ConfigChannel+0x450>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2102      	movs	r1, #2
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fa09 	bl	8003768 <LL_ADC_GetOffsetChannel>
 8004356:	4603      	mov	r3, r0
 8004358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800436c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004378:	2320      	movs	r3, #32
 800437a:	e004      	b.n	8004386 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800437c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x468>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0e9b      	lsrs	r3, r3, #26
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	e014      	b.n	80043ca <HAL_ADC_ConfigChannel+0x492>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80043ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80043b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80043bc:	2320      	movs	r3, #32
 80043be:	e004      	b.n	80043ca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80043c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043c4:	fab3 f383 	clz	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d106      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	2102      	movs	r1, #2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fa5c 	bl	8003894 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2103      	movs	r1, #3
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff f9c0 	bl	8003768 <LL_ADC_GetOffsetChannel>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x4d0>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2103      	movs	r1, #3
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff f9b5 	bl	8003768 <LL_ADC_GetOffsetChannel>
 80043fe:	4603      	mov	r3, r0
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	f003 021f 	and.w	r2, r3, #31
 8004406:	e017      	b.n	8004438 <HAL_ADC_ConfigChannel+0x500>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2103      	movs	r1, #3
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff f9aa 	bl	8003768 <LL_ADC_GetOffsetChannel>
 8004414:	4603      	mov	r3, r0
 8004416:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004422:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004424:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800442a:	2320      	movs	r3, #32
 800442c:	e003      	b.n	8004436 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800442e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004430:	fab3 f383 	clz	r3, r3
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x518>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	0e9b      	lsrs	r3, r3, #26
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	e011      	b.n	8004474 <HAL_ADC_ConfigChannel+0x53c>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800445e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004460:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004462:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004468:	2320      	movs	r3, #32
 800446a:	e003      	b.n	8004474 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800446c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	429a      	cmp	r2, r3
 8004476:	d14f      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2200      	movs	r2, #0
 800447e:	2103      	movs	r1, #3
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fa07 	bl	8003894 <LL_ADC_SetOffsetState>
 8004486:	e047      	b.n	8004518 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	069b      	lsls	r3, r3, #26
 8004498:	429a      	cmp	r2, r3
 800449a:	d107      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044aa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	069b      	lsls	r3, r3, #26
 80044bc:	429a      	cmp	r2, r3
 80044be:	d107      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044ce:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	069b      	lsls	r3, r3, #26
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d107      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044f2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	069b      	lsls	r3, r3, #26
 8004504:	429a      	cmp	r2, r3
 8004506:	d107      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004516:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fac9 	bl	8003ab4 <LL_ADC_IsEnabled>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	f040 8219 	bne.w	800495c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6819      	ldr	r1, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	461a      	mov	r2, r3
 8004538:	f7ff fa2e 	bl	8003998 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4aa1      	ldr	r2, [pc, #644]	@ (80047c8 <HAL_ADC_ConfigChannel+0x890>)
 8004542:	4293      	cmp	r3, r2
 8004544:	f040 812e 	bne.w	80047a4 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x638>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	0e9b      	lsrs	r3, r3, #26
 800455e:	3301      	adds	r3, #1
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2b09      	cmp	r3, #9
 8004566:	bf94      	ite	ls
 8004568:	2301      	movls	r3, #1
 800456a:	2300      	movhi	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e019      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x66c>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004578:	fa93 f3a3 	rbit	r3, r3
 800457c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800457e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004580:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004588:	2320      	movs	r3, #32
 800458a:	e003      	b.n	8004594 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800458c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800458e:	fab3 f383 	clz	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	3301      	adds	r3, #1
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	2b09      	cmp	r3, #9
 800459c:	bf94      	ite	ls
 800459e:	2301      	movls	r3, #1
 80045a0:	2300      	movhi	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d079      	beq.n	800469c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d107      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x68c>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0e9b      	lsrs	r3, r3, #26
 80045ba:	3301      	adds	r3, #1
 80045bc:	069b      	lsls	r3, r3, #26
 80045be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045c2:	e015      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x6b8>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045cc:	fa93 f3a3 	rbit	r3, r3
 80045d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80045d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80045d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80045dc:	2320      	movs	r3, #32
 80045de:	e003      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80045e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e2:	fab3 f383 	clz	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	3301      	adds	r3, #1
 80045ea:	069b      	lsls	r3, r3, #26
 80045ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d109      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x6d8>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	3301      	adds	r3, #1
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2101      	movs	r1, #1
 800460a:	fa01 f303 	lsl.w	r3, r1, r3
 800460e:	e017      	b.n	8004640 <HAL_ADC_ConfigChannel+0x708>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004618:	fa93 f3a3 	rbit	r3, r3
 800461c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800461e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004620:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004628:	2320      	movs	r3, #32
 800462a:	e003      	b.n	8004634 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800462c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	3301      	adds	r3, #1
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	2101      	movs	r1, #1
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	ea42 0103 	orr.w	r1, r2, r3
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x72e>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0e9b      	lsrs	r3, r3, #26
 8004656:	3301      	adds	r3, #1
 8004658:	f003 021f 	and.w	r2, r3, #31
 800465c:	4613      	mov	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4413      	add	r3, r2
 8004662:	051b      	lsls	r3, r3, #20
 8004664:	e018      	b.n	8004698 <HAL_ADC_ConfigChannel+0x760>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004676:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800467e:	2320      	movs	r3, #32
 8004680:	e003      	b.n	800468a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8004682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004684:	fab3 f383 	clz	r3, r3
 8004688:	b2db      	uxtb	r3, r3
 800468a:	3301      	adds	r3, #1
 800468c:	f003 021f 	and.w	r2, r3, #31
 8004690:	4613      	mov	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4413      	add	r3, r2
 8004696:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004698:	430b      	orrs	r3, r1
 800469a:	e07e      	b.n	800479a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d107      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x780>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0e9b      	lsrs	r3, r3, #26
 80046ae:	3301      	adds	r3, #1
 80046b0:	069b      	lsls	r3, r3, #26
 80046b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046b6:	e015      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x7ac>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c0:	fa93 f3a3 	rbit	r3, r3
 80046c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80046ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80046d0:	2320      	movs	r3, #32
 80046d2:	e003      	b.n	80046dc <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3301      	adds	r3, #1
 80046de:	069b      	lsls	r3, r3, #26
 80046e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d109      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x7cc>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	0e9b      	lsrs	r3, r3, #26
 80046f6:	3301      	adds	r3, #1
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	2101      	movs	r1, #1
 80046fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004702:	e017      	b.n	8004734 <HAL_ADC_ConfigChannel+0x7fc>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	61bb      	str	r3, [r7, #24]
  return result;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800471c:	2320      	movs	r3, #32
 800471e:	e003      	b.n	8004728 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	3301      	adds	r3, #1
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	2101      	movs	r1, #1
 8004730:	fa01 f303 	lsl.w	r3, r1, r3
 8004734:	ea42 0103 	orr.w	r1, r2, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10d      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x828>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	0e9b      	lsrs	r3, r3, #26
 800474a:	3301      	adds	r3, #1
 800474c:	f003 021f 	and.w	r2, r3, #31
 8004750:	4613      	mov	r3, r2
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4413      	add	r3, r2
 8004756:	3b1e      	subs	r3, #30
 8004758:	051b      	lsls	r3, r3, #20
 800475a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800475e:	e01b      	b.n	8004798 <HAL_ADC_ConfigChannel+0x860>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	fa93 f3a3 	rbit	r3, r3
 800476c:	60fb      	str	r3, [r7, #12]
  return result;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004778:	2320      	movs	r3, #32
 800477a:	e003      	b.n	8004784 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	3301      	adds	r3, #1
 8004786:	f003 021f 	and.w	r2, r3, #31
 800478a:	4613      	mov	r3, r2
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	4413      	add	r3, r2
 8004790:	3b1e      	subs	r3, #30
 8004792:	051b      	lsls	r3, r3, #20
 8004794:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004798:	430b      	orrs	r3, r1
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	6892      	ldr	r2, [r2, #8]
 800479e:	4619      	mov	r1, r3
 80047a0:	f7ff f8ce 	bl	8003940 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f280 80d7 	bge.w	800495c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a06      	ldr	r2, [pc, #24]	@ (80047cc <HAL_ADC_ConfigChannel+0x894>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_ADC_ConfigChannel+0x88a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a04      	ldr	r2, [pc, #16]	@ (80047d0 <HAL_ADC_ConfigChannel+0x898>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10a      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x8a0>
 80047c2:	4b04      	ldr	r3, [pc, #16]	@ (80047d4 <HAL_ADC_ConfigChannel+0x89c>)
 80047c4:	e009      	b.n	80047da <HAL_ADC_ConfigChannel+0x8a2>
 80047c6:	bf00      	nop
 80047c8:	47ff0000 	.word	0x47ff0000
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40022100 	.word	0x40022100
 80047d4:	40022300 	.word	0x40022300
 80047d8:	4b65      	ldr	r3, [pc, #404]	@ (8004970 <HAL_ADC_ConfigChannel+0xa38>)
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe ff84 	bl	80036e8 <LL_ADC_GetCommonPathInternalCh>
 80047e0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a62      	ldr	r2, [pc, #392]	@ (8004974 <HAL_ADC_ConfigChannel+0xa3c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_ADC_ConfigChannel+0x8c0>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a61      	ldr	r2, [pc, #388]	@ (8004978 <HAL_ADC_ConfigChannel+0xa40>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10e      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x8de>
 80047f8:	485e      	ldr	r0, [pc, #376]	@ (8004974 <HAL_ADC_ConfigChannel+0xa3c>)
 80047fa:	f7ff f95b 	bl	8003ab4 <LL_ADC_IsEnabled>
 80047fe:	4604      	mov	r4, r0
 8004800:	485d      	ldr	r0, [pc, #372]	@ (8004978 <HAL_ADC_ConfigChannel+0xa40>)
 8004802:	f7ff f957 	bl	8003ab4 <LL_ADC_IsEnabled>
 8004806:	4603      	mov	r3, r0
 8004808:	4323      	orrs	r3, r4
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e008      	b.n	8004828 <HAL_ADC_ConfigChannel+0x8f0>
 8004816:	4859      	ldr	r0, [pc, #356]	@ (800497c <HAL_ADC_ConfigChannel+0xa44>)
 8004818:	f7ff f94c 	bl	8003ab4 <LL_ADC_IsEnabled>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8084 	beq.w	8004936 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a53      	ldr	r2, [pc, #332]	@ (8004980 <HAL_ADC_ConfigChannel+0xa48>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d132      	bne.n	800489e <HAL_ADC_ConfigChannel+0x966>
 8004838:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800483c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d12c      	bne.n	800489e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a4c      	ldr	r2, [pc, #304]	@ (800497c <HAL_ADC_ConfigChannel+0xa44>)
 800484a:	4293      	cmp	r3, r2
 800484c:	f040 8086 	bne.w	800495c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a47      	ldr	r2, [pc, #284]	@ (8004974 <HAL_ADC_ConfigChannel+0xa3c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_ADC_ConfigChannel+0x92c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a46      	ldr	r2, [pc, #280]	@ (8004978 <HAL_ADC_ConfigChannel+0xa40>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x930>
 8004864:	4a47      	ldr	r2, [pc, #284]	@ (8004984 <HAL_ADC_ConfigChannel+0xa4c>)
 8004866:	e000      	b.n	800486a <HAL_ADC_ConfigChannel+0x932>
 8004868:	4a41      	ldr	r2, [pc, #260]	@ (8004970 <HAL_ADC_ConfigChannel+0xa38>)
 800486a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800486e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7fe ff24 	bl	80036c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800487a:	4b43      	ldr	r3, [pc, #268]	@ (8004988 <HAL_ADC_ConfigChannel+0xa50>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	099b      	lsrs	r3, r3, #6
 8004880:	4a42      	ldr	r2, [pc, #264]	@ (800498c <HAL_ADC_ConfigChannel+0xa54>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	3301      	adds	r3, #1
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800488e:	e002      	b.n	8004896 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	3b01      	subs	r3, #1
 8004894:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f9      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800489c:	e05e      	b.n	800495c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004990 <HAL_ADC_ConfigChannel+0xa58>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d120      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x9b2>
 80048a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11a      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a30      	ldr	r2, [pc, #192]	@ (800497c <HAL_ADC_ConfigChannel+0xa44>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d14e      	bne.n	800495c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004974 <HAL_ADC_ConfigChannel+0xa3c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_ADC_ConfigChannel+0x99a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004978 <HAL_ADC_ConfigChannel+0xa40>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d101      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x99e>
 80048d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004984 <HAL_ADC_ConfigChannel+0xa4c>)
 80048d4:	e000      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x9a0>
 80048d6:	4a26      	ldr	r2, [pc, #152]	@ (8004970 <HAL_ADC_ConfigChannel+0xa38>)
 80048d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f7fe feed 	bl	80036c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048e8:	e038      	b.n	800495c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a29      	ldr	r2, [pc, #164]	@ (8004994 <HAL_ADC_ConfigChannel+0xa5c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d133      	bne.n	800495c <HAL_ADC_ConfigChannel+0xa24>
 80048f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d12d      	bne.n	800495c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1d      	ldr	r2, [pc, #116]	@ (800497c <HAL_ADC_ConfigChannel+0xa44>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d128      	bne.n	800495c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a19      	ldr	r2, [pc, #100]	@ (8004974 <HAL_ADC_ConfigChannel+0xa3c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_ADC_ConfigChannel+0x9e6>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a17      	ldr	r2, [pc, #92]	@ (8004978 <HAL_ADC_ConfigChannel+0xa40>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d101      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x9ea>
 800491e:	4a19      	ldr	r2, [pc, #100]	@ (8004984 <HAL_ADC_ConfigChannel+0xa4c>)
 8004920:	e000      	b.n	8004924 <HAL_ADC_ConfigChannel+0x9ec>
 8004922:	4a13      	ldr	r2, [pc, #76]	@ (8004970 <HAL_ADC_ConfigChannel+0xa38>)
 8004924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004928:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f7fe fec7 	bl	80036c2 <LL_ADC_SetCommonPathInternalCh>
 8004934:	e012      	b.n	800495c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800493a:	f043 0220 	orr.w	r2, r3, #32
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004948:	e008      	b.n	800495c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004964:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004968:	4618      	mov	r0, r3
 800496a:	37e4      	adds	r7, #228	@ 0xe4
 800496c:	46bd      	mov	sp, r7
 800496e:	bd90      	pop	{r4, r7, pc}
 8004970:	58026300 	.word	0x58026300
 8004974:	40022000 	.word	0x40022000
 8004978:	40022100 	.word	0x40022100
 800497c:	58026000 	.word	0x58026000
 8004980:	c7520000 	.word	0xc7520000
 8004984:	40022300 	.word	0x40022300
 8004988:	24000000 	.word	0x24000000
 800498c:	053e2d63 	.word	0x053e2d63
 8004990:	c3210000 	.word	0xc3210000
 8004994:	cb840000 	.word	0xcb840000

08004998 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a6c      	ldr	r2, [pc, #432]	@ (8004b58 <ADC_ConfigureBoostMode+0x1c0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <ADC_ConfigureBoostMode+0x1c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6b      	ldr	r2, [pc, #428]	@ (8004b5c <ADC_ConfigureBoostMode+0x1c4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d109      	bne.n	80049c8 <ADC_ConfigureBoostMode+0x30>
 80049b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004b60 <ADC_ConfigureBoostMode+0x1c8>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e008      	b.n	80049da <ADC_ConfigureBoostMode+0x42>
 80049c8:	4b66      	ldr	r3, [pc, #408]	@ (8004b64 <ADC_ConfigureBoostMode+0x1cc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01c      	beq.n	8004a18 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80049de:	f002 fb0f 	bl	8007000 <HAL_RCC_GetHCLKFreq>
 80049e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049ec:	d010      	beq.n	8004a10 <ADC_ConfigureBoostMode+0x78>
 80049ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049f2:	d873      	bhi.n	8004adc <ADC_ConfigureBoostMode+0x144>
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f8:	d002      	beq.n	8004a00 <ADC_ConfigureBoostMode+0x68>
 80049fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049fe:	d16d      	bne.n	8004adc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	60fb      	str	r3, [r7, #12]
        break;
 8004a0e:	e068      	b.n	8004ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	089b      	lsrs	r3, r3, #2
 8004a14:	60fb      	str	r3, [r7, #12]
        break;
 8004a16:	e064      	b.n	8004ae2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004a18:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	f003 fcea 	bl	80083f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a24:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004a2e:	d051      	beq.n	8004ad4 <ADC_ConfigureBoostMode+0x13c>
 8004a30:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004a34:	d854      	bhi.n	8004ae0 <ADC_ConfigureBoostMode+0x148>
 8004a36:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004a3a:	d047      	beq.n	8004acc <ADC_ConfigureBoostMode+0x134>
 8004a3c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004a40:	d84e      	bhi.n	8004ae0 <ADC_ConfigureBoostMode+0x148>
 8004a42:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a46:	d03d      	beq.n	8004ac4 <ADC_ConfigureBoostMode+0x12c>
 8004a48:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a4c:	d848      	bhi.n	8004ae0 <ADC_ConfigureBoostMode+0x148>
 8004a4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a52:	d033      	beq.n	8004abc <ADC_ConfigureBoostMode+0x124>
 8004a54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a58:	d842      	bhi.n	8004ae0 <ADC_ConfigureBoostMode+0x148>
 8004a5a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a5e:	d029      	beq.n	8004ab4 <ADC_ConfigureBoostMode+0x11c>
 8004a60:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a64:	d83c      	bhi.n	8004ae0 <ADC_ConfigureBoostMode+0x148>
 8004a66:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a6a:	d01a      	beq.n	8004aa2 <ADC_ConfigureBoostMode+0x10a>
 8004a6c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a70:	d836      	bhi.n	8004ae0 <ADC_ConfigureBoostMode+0x148>
 8004a72:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a76:	d014      	beq.n	8004aa2 <ADC_ConfigureBoostMode+0x10a>
 8004a78:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a7c:	d830      	bhi.n	8004ae0 <ADC_ConfigureBoostMode+0x148>
 8004a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a82:	d00e      	beq.n	8004aa2 <ADC_ConfigureBoostMode+0x10a>
 8004a84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a88:	d82a      	bhi.n	8004ae0 <ADC_ConfigureBoostMode+0x148>
 8004a8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a8e:	d008      	beq.n	8004aa2 <ADC_ConfigureBoostMode+0x10a>
 8004a90:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a94:	d824      	bhi.n	8004ae0 <ADC_ConfigureBoostMode+0x148>
 8004a96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a9a:	d002      	beq.n	8004aa2 <ADC_ConfigureBoostMode+0x10a>
 8004a9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004aa0:	d11e      	bne.n	8004ae0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	0c9b      	lsrs	r3, r3, #18
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	60fb      	str	r3, [r7, #12]
        break;
 8004ab2:	e016      	b.n	8004ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	60fb      	str	r3, [r7, #12]
        break;
 8004aba:	e012      	b.n	8004ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	60fb      	str	r3, [r7, #12]
        break;
 8004ac2:	e00e      	b.n	8004ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	099b      	lsrs	r3, r3, #6
 8004ac8:	60fb      	str	r3, [r7, #12]
        break;
 8004aca:	e00a      	b.n	8004ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	09db      	lsrs	r3, r3, #7
 8004ad0:	60fb      	str	r3, [r7, #12]
        break;
 8004ad2:	e006      	b.n	8004ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	60fb      	str	r3, [r7, #12]
        break;
 8004ada:	e002      	b.n	8004ae2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004adc:	bf00      	nop
 8004ade:	e000      	b.n	8004ae2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004ae0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a1f      	ldr	r2, [pc, #124]	@ (8004b68 <ADC_ConfigureBoostMode+0x1d0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d808      	bhi.n	8004b02 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004afe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b00:	e025      	b.n	8004b4e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a19      	ldr	r2, [pc, #100]	@ (8004b6c <ADC_ConfigureBoostMode+0x1d4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d80a      	bhi.n	8004b20 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b1c:	609a      	str	r2, [r3, #8]
}
 8004b1e:	e016      	b.n	8004b4e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a13      	ldr	r2, [pc, #76]	@ (8004b70 <ADC_ConfigureBoostMode+0x1d8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d80a      	bhi.n	8004b3e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	e007      	b.n	8004b4e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004b4c:	609a      	str	r2, [r3, #8]
}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40022000 	.word	0x40022000
 8004b5c:	40022100 	.word	0x40022100
 8004b60:	40022300 	.word	0x40022300
 8004b64:	58026300 	.word	0x58026300
 8004b68:	005f5e10 	.word	0x005f5e10
 8004b6c:	00bebc20 	.word	0x00bebc20
 8004b70:	017d7840 	.word	0x017d7840

08004b74 <LL_ADC_IsEnabled>:
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <LL_ADC_IsEnabled+0x18>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <LL_ADC_IsEnabled+0x1a>
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <LL_ADC_REG_IsConversionOngoing>:
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d101      	bne.n	8004bb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004bc0:	b590      	push	{r4, r7, lr}
 8004bc2:	b0a3      	sub	sp, #140	@ 0x8c
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e0c1      	b.n	8004d62 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004be6:	2300      	movs	r3, #0
 8004be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d102      	bne.n	8004bfe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bf8:	4b5d      	ldr	r3, [pc, #372]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e001      	b.n	8004c02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0a0      	b.n	8004d62 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff ffb9 	bl	8004b9a <LL_ADC_REG_IsConversionOngoing>
 8004c28:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff ffb2 	bl	8004b9a <LL_ADC_REG_IsConversionOngoing>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 8081 	bne.w	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d17c      	bne.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a48      	ldr	r2, [pc, #288]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a46      	ldr	r2, [pc, #280]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d101      	bne.n	8004c5e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004c5a:	4b46      	ldr	r3, [pc, #280]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c5c:	e000      	b.n	8004c60 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004c5e:	4b46      	ldr	r3, [pc, #280]	@ (8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c60:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d039      	beq.n	8004cde <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a3a      	ldr	r2, [pc, #232]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a39      	ldr	r2, [pc, #228]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10e      	bne.n	8004cae <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c90:	4836      	ldr	r0, [pc, #216]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c92:	f7ff ff6f 	bl	8004b74 <LL_ADC_IsEnabled>
 8004c96:	4604      	mov	r4, r0
 8004c98:	4835      	ldr	r0, [pc, #212]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c9a:	f7ff ff6b 	bl	8004b74 <LL_ADC_IsEnabled>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4323      	orrs	r3, r4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	e008      	b.n	8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004cae:	4833      	ldr	r0, [pc, #204]	@ (8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004cb0:	f7ff ff60 	bl	8004b74 <LL_ADC_IsEnabled>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d047      	beq.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8004d80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	6811      	ldr	r1, [r2, #0]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	6892      	ldr	r2, [r2, #8]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cda:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cdc:	e03a      	b.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004cde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ce6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ce8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1f      	ldr	r2, [pc, #124]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d10e      	bne.n	8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004cfe:	481b      	ldr	r0, [pc, #108]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d00:	f7ff ff38 	bl	8004b74 <LL_ADC_IsEnabled>
 8004d04:	4604      	mov	r4, r0
 8004d06:	481a      	ldr	r0, [pc, #104]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d08:	f7ff ff34 	bl	8004b74 <LL_ADC_IsEnabled>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4323      	orrs	r3, r4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e008      	b.n	8004d2e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004d1c:	4817      	ldr	r0, [pc, #92]	@ (8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d1e:	f7ff ff29 	bl	8004b74 <LL_ADC_IsEnabled>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d010      	beq.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004d3c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d3e:	e009      	b.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d44:	f043 0220 	orr.w	r2, r3, #32
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004d52:	e000      	b.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d5e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	378c      	adds	r7, #140	@ 0x8c
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd90      	pop	{r4, r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40022000 	.word	0x40022000
 8004d70:	40022100 	.word	0x40022100
 8004d74:	40022300 	.word	0x40022300
 8004d78:	58026300 	.word	0x58026300
 8004d7c:	58026000 	.word	0x58026000
 8004d80:	fffff0e0 	.word	0xfffff0e0

08004d84 <__NVIC_SetPriorityGrouping>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d94:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004da0:	4013      	ands	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004dac:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004db2:	4a04      	ldr	r2, [pc, #16]	@ (8004dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	60d3      	str	r3, [r2, #12]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000ed00 	.word	0xe000ed00
 8004dc8:	05fa0000 	.word	0x05fa0000

08004dcc <__NVIC_GetPriorityGrouping>:
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dd0:	4b04      	ldr	r3, [pc, #16]	@ (8004de4 <__NVIC_GetPriorityGrouping+0x18>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	0a1b      	lsrs	r3, r3, #8
 8004dd6:	f003 0307 	and.w	r3, r3, #7
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	e000ed00 	.word	0xe000ed00

08004de8 <__NVIC_EnableIRQ>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	db0b      	blt.n	8004e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	f003 021f 	and.w	r2, r3, #31
 8004e00:	4907      	ldr	r1, [pc, #28]	@ (8004e20 <__NVIC_EnableIRQ+0x38>)
 8004e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	2001      	movs	r0, #1
 8004e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	e000e100 	.word	0xe000e100

08004e24 <__NVIC_SetPriority>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	6039      	str	r1, [r7, #0]
 8004e2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	db0a      	blt.n	8004e4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	490c      	ldr	r1, [pc, #48]	@ (8004e70 <__NVIC_SetPriority+0x4c>)
 8004e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e42:	0112      	lsls	r2, r2, #4
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	440b      	add	r3, r1
 8004e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e4c:	e00a      	b.n	8004e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	4908      	ldr	r1, [pc, #32]	@ (8004e74 <__NVIC_SetPriority+0x50>)
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	3b04      	subs	r3, #4
 8004e5c:	0112      	lsls	r2, r2, #4
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	440b      	add	r3, r1
 8004e62:	761a      	strb	r2, [r3, #24]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	e000e100 	.word	0xe000e100
 8004e74:	e000ed00 	.word	0xe000ed00

08004e78 <NVIC_EncodePriority>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	@ 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f1c3 0307 	rsb	r3, r3, #7
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	bf28      	it	cs
 8004e96:	2304      	movcs	r3, #4
 8004e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d902      	bls.n	8004ea8 <NVIC_EncodePriority+0x30>
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	3b03      	subs	r3, #3
 8004ea6:	e000      	b.n	8004eaa <NVIC_EncodePriority+0x32>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eac:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	401a      	ands	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eca:	43d9      	mvns	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed0:	4313      	orrs	r3, r2
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3724      	adds	r7, #36	@ 0x24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <SysTick_Config>:
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ef0:	d301      	bcc.n	8004ef6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e00f      	b.n	8004f16 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f20 <SysTick_Config+0x40>)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004efe:	210f      	movs	r1, #15
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	f7ff ff8e 	bl	8004e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <SysTick_Config+0x40>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f0e:	4b04      	ldr	r3, [pc, #16]	@ (8004f20 <SysTick_Config+0x40>)
 8004f10:	2207      	movs	r2, #7
 8004f12:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000e010 	.word	0xe000e010

08004f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff29 	bl	8004d84 <__NVIC_SetPriorityGrouping>
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	4603      	mov	r3, r0
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f48:	f7ff ff40 	bl	8004dcc <__NVIC_GetPriorityGrouping>
 8004f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	6978      	ldr	r0, [r7, #20]
 8004f54:	f7ff ff90 	bl	8004e78 <NVIC_EncodePriority>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff ff5f 	bl	8004e24 <__NVIC_SetPriority>
}
 8004f66:	bf00      	nop
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	4603      	mov	r3, r0
 8004f76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff ff33 	bl	8004de8 <__NVIC_EnableIRQ>
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff ffa4 	bl	8004ee0 <SysTick_Config>
 8004f98:	4603      	mov	r3, r0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004fa8:	f3bf 8f5f 	dmb	sy
}
 8004fac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004fae:	4b07      	ldr	r3, [pc, #28]	@ (8004fcc <HAL_MPU_Disable+0x28>)
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	4a06      	ldr	r2, [pc, #24]	@ (8004fcc <HAL_MPU_Disable+0x28>)
 8004fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004fba:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <HAL_MPU_Disable+0x2c>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	605a      	str	r2, [r3, #4]
}
 8004fc0:	bf00      	nop
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000ed00 	.word	0xe000ed00
 8004fd0:	e000ed90 	.word	0xe000ed90

08004fd4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800500c <HAL_MPU_Enable+0x38>)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <HAL_MPU_Enable+0x3c>)
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	4a09      	ldr	r2, [pc, #36]	@ (8005010 <HAL_MPU_Enable+0x3c>)
 8004fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004ff2:	f3bf 8f4f 	dsb	sy
}
 8004ff6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ff8:	f3bf 8f6f 	isb	sy
}
 8004ffc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	e000ed90 	.word	0xe000ed90
 8005010:	e000ed00 	.word	0xe000ed00

08005014 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	785a      	ldrb	r2, [r3, #1]
 8005020:	4b1b      	ldr	r3, [pc, #108]	@ (8005090 <HAL_MPU_ConfigRegion+0x7c>)
 8005022:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005024:	4b1a      	ldr	r3, [pc, #104]	@ (8005090 <HAL_MPU_ConfigRegion+0x7c>)
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	4a19      	ldr	r2, [pc, #100]	@ (8005090 <HAL_MPU_ConfigRegion+0x7c>)
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005030:	4a17      	ldr	r2, [pc, #92]	@ (8005090 <HAL_MPU_ConfigRegion+0x7c>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	7b1b      	ldrb	r3, [r3, #12]
 800503c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	7adb      	ldrb	r3, [r3, #11]
 8005042:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005044:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	7a9b      	ldrb	r3, [r3, #10]
 800504a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800504c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	7b5b      	ldrb	r3, [r3, #13]
 8005052:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005054:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	7b9b      	ldrb	r3, [r3, #14]
 800505a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800505c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	7bdb      	ldrb	r3, [r3, #15]
 8005062:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005064:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	7a5b      	ldrb	r3, [r3, #9]
 800506a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800506c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7a1b      	ldrb	r3, [r3, #8]
 8005072:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005074:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800507c:	4a04      	ldr	r2, [pc, #16]	@ (8005090 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800507e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005080:	6113      	str	r3, [r2, #16]
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000ed90 	.word	0xe000ed90

08005094 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800509c:	f7fe face 	bl	800363c <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e2dc      	b.n	8005666 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d008      	beq.n	80050ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2280      	movs	r2, #128	@ 0x80
 80050bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e2cd      	b.n	8005666 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a76      	ldr	r2, [pc, #472]	@ (80052a8 <HAL_DMA_Abort+0x214>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d04a      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a74      	ldr	r2, [pc, #464]	@ (80052ac <HAL_DMA_Abort+0x218>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d045      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a73      	ldr	r2, [pc, #460]	@ (80052b0 <HAL_DMA_Abort+0x21c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d040      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a71      	ldr	r2, [pc, #452]	@ (80052b4 <HAL_DMA_Abort+0x220>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d03b      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a70      	ldr	r2, [pc, #448]	@ (80052b8 <HAL_DMA_Abort+0x224>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d036      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a6e      	ldr	r2, [pc, #440]	@ (80052bc <HAL_DMA_Abort+0x228>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d031      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a6d      	ldr	r2, [pc, #436]	@ (80052c0 <HAL_DMA_Abort+0x22c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d02c      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a6b      	ldr	r2, [pc, #428]	@ (80052c4 <HAL_DMA_Abort+0x230>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d027      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6a      	ldr	r2, [pc, #424]	@ (80052c8 <HAL_DMA_Abort+0x234>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d022      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a68      	ldr	r2, [pc, #416]	@ (80052cc <HAL_DMA_Abort+0x238>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01d      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a67      	ldr	r2, [pc, #412]	@ (80052d0 <HAL_DMA_Abort+0x23c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d018      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a65      	ldr	r2, [pc, #404]	@ (80052d4 <HAL_DMA_Abort+0x240>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a64      	ldr	r2, [pc, #400]	@ (80052d8 <HAL_DMA_Abort+0x244>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00e      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a62      	ldr	r2, [pc, #392]	@ (80052dc <HAL_DMA_Abort+0x248>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d009      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a61      	ldr	r2, [pc, #388]	@ (80052e0 <HAL_DMA_Abort+0x24c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_DMA_Abort+0xd6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a5f      	ldr	r2, [pc, #380]	@ (80052e4 <HAL_DMA_Abort+0x250>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d101      	bne.n	800516e <HAL_DMA_Abort+0xda>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <HAL_DMA_Abort+0xdc>
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 021e 	bic.w	r2, r2, #30
 8005182:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005192:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e00a      	b.n	80051b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 020e 	bic.w	r2, r2, #14
 80051aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a3c      	ldr	r2, [pc, #240]	@ (80052a8 <HAL_DMA_Abort+0x214>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d072      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a3a      	ldr	r2, [pc, #232]	@ (80052ac <HAL_DMA_Abort+0x218>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d06d      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a39      	ldr	r2, [pc, #228]	@ (80052b0 <HAL_DMA_Abort+0x21c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d068      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a37      	ldr	r2, [pc, #220]	@ (80052b4 <HAL_DMA_Abort+0x220>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d063      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a36      	ldr	r2, [pc, #216]	@ (80052b8 <HAL_DMA_Abort+0x224>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d05e      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a34      	ldr	r2, [pc, #208]	@ (80052bc <HAL_DMA_Abort+0x228>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d059      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a33      	ldr	r2, [pc, #204]	@ (80052c0 <HAL_DMA_Abort+0x22c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d054      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a31      	ldr	r2, [pc, #196]	@ (80052c4 <HAL_DMA_Abort+0x230>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d04f      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a30      	ldr	r2, [pc, #192]	@ (80052c8 <HAL_DMA_Abort+0x234>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d04a      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2e      	ldr	r2, [pc, #184]	@ (80052cc <HAL_DMA_Abort+0x238>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d045      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2d      	ldr	r2, [pc, #180]	@ (80052d0 <HAL_DMA_Abort+0x23c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d040      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a2b      	ldr	r2, [pc, #172]	@ (80052d4 <HAL_DMA_Abort+0x240>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d03b      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2a      	ldr	r2, [pc, #168]	@ (80052d8 <HAL_DMA_Abort+0x244>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d036      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a28      	ldr	r2, [pc, #160]	@ (80052dc <HAL_DMA_Abort+0x248>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d031      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a27      	ldr	r2, [pc, #156]	@ (80052e0 <HAL_DMA_Abort+0x24c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d02c      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a25      	ldr	r2, [pc, #148]	@ (80052e4 <HAL_DMA_Abort+0x250>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d027      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a24      	ldr	r2, [pc, #144]	@ (80052e8 <HAL_DMA_Abort+0x254>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d022      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a22      	ldr	r2, [pc, #136]	@ (80052ec <HAL_DMA_Abort+0x258>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01d      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a21      	ldr	r2, [pc, #132]	@ (80052f0 <HAL_DMA_Abort+0x25c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d018      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1f      	ldr	r2, [pc, #124]	@ (80052f4 <HAL_DMA_Abort+0x260>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1e      	ldr	r2, [pc, #120]	@ (80052f8 <HAL_DMA_Abort+0x264>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1c      	ldr	r2, [pc, #112]	@ (80052fc <HAL_DMA_Abort+0x268>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1b      	ldr	r2, [pc, #108]	@ (8005300 <HAL_DMA_Abort+0x26c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_DMA_Abort+0x20e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a19      	ldr	r2, [pc, #100]	@ (8005304 <HAL_DMA_Abort+0x270>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d132      	bne.n	8005308 <HAL_DMA_Abort+0x274>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e031      	b.n	800530a <HAL_DMA_Abort+0x276>
 80052a6:	bf00      	nop
 80052a8:	40020010 	.word	0x40020010
 80052ac:	40020028 	.word	0x40020028
 80052b0:	40020040 	.word	0x40020040
 80052b4:	40020058 	.word	0x40020058
 80052b8:	40020070 	.word	0x40020070
 80052bc:	40020088 	.word	0x40020088
 80052c0:	400200a0 	.word	0x400200a0
 80052c4:	400200b8 	.word	0x400200b8
 80052c8:	40020410 	.word	0x40020410
 80052cc:	40020428 	.word	0x40020428
 80052d0:	40020440 	.word	0x40020440
 80052d4:	40020458 	.word	0x40020458
 80052d8:	40020470 	.word	0x40020470
 80052dc:	40020488 	.word	0x40020488
 80052e0:	400204a0 	.word	0x400204a0
 80052e4:	400204b8 	.word	0x400204b8
 80052e8:	58025408 	.word	0x58025408
 80052ec:	5802541c 	.word	0x5802541c
 80052f0:	58025430 	.word	0x58025430
 80052f4:	58025444 	.word	0x58025444
 80052f8:	58025458 	.word	0x58025458
 80052fc:	5802546c 	.word	0x5802546c
 8005300:	58025480 	.word	0x58025480
 8005304:	58025494 	.word	0x58025494
 8005308:	2300      	movs	r3, #0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005318:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800531c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a6d      	ldr	r2, [pc, #436]	@ (80054d8 <HAL_DMA_Abort+0x444>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d04a      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a6b      	ldr	r2, [pc, #428]	@ (80054dc <HAL_DMA_Abort+0x448>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d045      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a6a      	ldr	r2, [pc, #424]	@ (80054e0 <HAL_DMA_Abort+0x44c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d040      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a68      	ldr	r2, [pc, #416]	@ (80054e4 <HAL_DMA_Abort+0x450>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d03b      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a67      	ldr	r2, [pc, #412]	@ (80054e8 <HAL_DMA_Abort+0x454>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d036      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a65      	ldr	r2, [pc, #404]	@ (80054ec <HAL_DMA_Abort+0x458>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d031      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a64      	ldr	r2, [pc, #400]	@ (80054f0 <HAL_DMA_Abort+0x45c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d02c      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a62      	ldr	r2, [pc, #392]	@ (80054f4 <HAL_DMA_Abort+0x460>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d027      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a61      	ldr	r2, [pc, #388]	@ (80054f8 <HAL_DMA_Abort+0x464>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5f      	ldr	r2, [pc, #380]	@ (80054fc <HAL_DMA_Abort+0x468>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01d      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a5e      	ldr	r2, [pc, #376]	@ (8005500 <HAL_DMA_Abort+0x46c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a5c      	ldr	r2, [pc, #368]	@ (8005504 <HAL_DMA_Abort+0x470>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a5b      	ldr	r2, [pc, #364]	@ (8005508 <HAL_DMA_Abort+0x474>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a59      	ldr	r2, [pc, #356]	@ (800550c <HAL_DMA_Abort+0x478>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a58      	ldr	r2, [pc, #352]	@ (8005510 <HAL_DMA_Abort+0x47c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_DMA_Abort+0x32a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a56      	ldr	r2, [pc, #344]	@ (8005514 <HAL_DMA_Abort+0x480>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d108      	bne.n	80053d0 <HAL_DMA_Abort+0x33c>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0201 	bic.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e007      	b.n	80053e0 <HAL_DMA_Abort+0x34c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80053e0:	e013      	b.n	800540a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053e2:	f7fe f92b 	bl	800363c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b05      	cmp	r3, #5
 80053ee:	d90c      	bls.n	800540a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2203      	movs	r2, #3
 80053fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e12d      	b.n	8005666 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e5      	bne.n	80053e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2f      	ldr	r2, [pc, #188]	@ (80054d8 <HAL_DMA_Abort+0x444>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d04a      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a2d      	ldr	r2, [pc, #180]	@ (80054dc <HAL_DMA_Abort+0x448>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d045      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a2c      	ldr	r2, [pc, #176]	@ (80054e0 <HAL_DMA_Abort+0x44c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d040      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2a      	ldr	r2, [pc, #168]	@ (80054e4 <HAL_DMA_Abort+0x450>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d03b      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a29      	ldr	r2, [pc, #164]	@ (80054e8 <HAL_DMA_Abort+0x454>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d036      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a27      	ldr	r2, [pc, #156]	@ (80054ec <HAL_DMA_Abort+0x458>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d031      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a26      	ldr	r2, [pc, #152]	@ (80054f0 <HAL_DMA_Abort+0x45c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d02c      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a24      	ldr	r2, [pc, #144]	@ (80054f4 <HAL_DMA_Abort+0x460>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d027      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a23      	ldr	r2, [pc, #140]	@ (80054f8 <HAL_DMA_Abort+0x464>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d022      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a21      	ldr	r2, [pc, #132]	@ (80054fc <HAL_DMA_Abort+0x468>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01d      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a20      	ldr	r2, [pc, #128]	@ (8005500 <HAL_DMA_Abort+0x46c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d018      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1e      	ldr	r2, [pc, #120]	@ (8005504 <HAL_DMA_Abort+0x470>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1d      	ldr	r2, [pc, #116]	@ (8005508 <HAL_DMA_Abort+0x474>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1b      	ldr	r2, [pc, #108]	@ (800550c <HAL_DMA_Abort+0x478>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005510 <HAL_DMA_Abort+0x47c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_DMA_Abort+0x422>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a18      	ldr	r2, [pc, #96]	@ (8005514 <HAL_DMA_Abort+0x480>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d101      	bne.n	80054ba <HAL_DMA_Abort+0x426>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <HAL_DMA_Abort+0x428>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d02b      	beq.n	8005518 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	223f      	movs	r2, #63	@ 0x3f
 80054d0:	409a      	lsls	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	609a      	str	r2, [r3, #8]
 80054d6:	e02a      	b.n	800552e <HAL_DMA_Abort+0x49a>
 80054d8:	40020010 	.word	0x40020010
 80054dc:	40020028 	.word	0x40020028
 80054e0:	40020040 	.word	0x40020040
 80054e4:	40020058 	.word	0x40020058
 80054e8:	40020070 	.word	0x40020070
 80054ec:	40020088 	.word	0x40020088
 80054f0:	400200a0 	.word	0x400200a0
 80054f4:	400200b8 	.word	0x400200b8
 80054f8:	40020410 	.word	0x40020410
 80054fc:	40020428 	.word	0x40020428
 8005500:	40020440 	.word	0x40020440
 8005504:	40020458 	.word	0x40020458
 8005508:	40020470 	.word	0x40020470
 800550c:	40020488 	.word	0x40020488
 8005510:	400204a0 	.word	0x400204a0
 8005514:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	2201      	movs	r2, #1
 8005528:	409a      	lsls	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a4f      	ldr	r2, [pc, #316]	@ (8005670 <HAL_DMA_Abort+0x5dc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d072      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a4d      	ldr	r2, [pc, #308]	@ (8005674 <HAL_DMA_Abort+0x5e0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d06d      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a4c      	ldr	r2, [pc, #304]	@ (8005678 <HAL_DMA_Abort+0x5e4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d068      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a4a      	ldr	r2, [pc, #296]	@ (800567c <HAL_DMA_Abort+0x5e8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d063      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a49      	ldr	r2, [pc, #292]	@ (8005680 <HAL_DMA_Abort+0x5ec>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d05e      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a47      	ldr	r2, [pc, #284]	@ (8005684 <HAL_DMA_Abort+0x5f0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d059      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a46      	ldr	r2, [pc, #280]	@ (8005688 <HAL_DMA_Abort+0x5f4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d054      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a44      	ldr	r2, [pc, #272]	@ (800568c <HAL_DMA_Abort+0x5f8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d04f      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a43      	ldr	r2, [pc, #268]	@ (8005690 <HAL_DMA_Abort+0x5fc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d04a      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a41      	ldr	r2, [pc, #260]	@ (8005694 <HAL_DMA_Abort+0x600>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d045      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a40      	ldr	r2, [pc, #256]	@ (8005698 <HAL_DMA_Abort+0x604>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d040      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a3e      	ldr	r2, [pc, #248]	@ (800569c <HAL_DMA_Abort+0x608>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d03b      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a3d      	ldr	r2, [pc, #244]	@ (80056a0 <HAL_DMA_Abort+0x60c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d036      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a3b      	ldr	r2, [pc, #236]	@ (80056a4 <HAL_DMA_Abort+0x610>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d031      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a3a      	ldr	r2, [pc, #232]	@ (80056a8 <HAL_DMA_Abort+0x614>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d02c      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a38      	ldr	r2, [pc, #224]	@ (80056ac <HAL_DMA_Abort+0x618>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d027      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a37      	ldr	r2, [pc, #220]	@ (80056b0 <HAL_DMA_Abort+0x61c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d022      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a35      	ldr	r2, [pc, #212]	@ (80056b4 <HAL_DMA_Abort+0x620>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d01d      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a34      	ldr	r2, [pc, #208]	@ (80056b8 <HAL_DMA_Abort+0x624>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d018      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a32      	ldr	r2, [pc, #200]	@ (80056bc <HAL_DMA_Abort+0x628>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d013      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a31      	ldr	r2, [pc, #196]	@ (80056c0 <HAL_DMA_Abort+0x62c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00e      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2f      	ldr	r2, [pc, #188]	@ (80056c4 <HAL_DMA_Abort+0x630>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d009      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2e      	ldr	r2, [pc, #184]	@ (80056c8 <HAL_DMA_Abort+0x634>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <HAL_DMA_Abort+0x58a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2c      	ldr	r2, [pc, #176]	@ (80056cc <HAL_DMA_Abort+0x638>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d101      	bne.n	8005622 <HAL_DMA_Abort+0x58e>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <HAL_DMA_Abort+0x590>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d015      	beq.n	8005654 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005630:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00c      	beq.n	8005654 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005644:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005648:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005652:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40020010 	.word	0x40020010
 8005674:	40020028 	.word	0x40020028
 8005678:	40020040 	.word	0x40020040
 800567c:	40020058 	.word	0x40020058
 8005680:	40020070 	.word	0x40020070
 8005684:	40020088 	.word	0x40020088
 8005688:	400200a0 	.word	0x400200a0
 800568c:	400200b8 	.word	0x400200b8
 8005690:	40020410 	.word	0x40020410
 8005694:	40020428 	.word	0x40020428
 8005698:	40020440 	.word	0x40020440
 800569c:	40020458 	.word	0x40020458
 80056a0:	40020470 	.word	0x40020470
 80056a4:	40020488 	.word	0x40020488
 80056a8:	400204a0 	.word	0x400204a0
 80056ac:	400204b8 	.word	0x400204b8
 80056b0:	58025408 	.word	0x58025408
 80056b4:	5802541c 	.word	0x5802541c
 80056b8:	58025430 	.word	0x58025430
 80056bc:	58025444 	.word	0x58025444
 80056c0:	58025458 	.word	0x58025458
 80056c4:	5802546c 	.word	0x5802546c
 80056c8:	58025480 	.word	0x58025480
 80056cc:	58025494 	.word	0x58025494

080056d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e237      	b.n	8005b52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d004      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2280      	movs	r2, #128	@ 0x80
 80056f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e22c      	b.n	8005b52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005870 <HAL_DMA_Abort_IT+0x1a0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d04a      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a5b      	ldr	r2, [pc, #364]	@ (8005874 <HAL_DMA_Abort_IT+0x1a4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d045      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a59      	ldr	r2, [pc, #356]	@ (8005878 <HAL_DMA_Abort_IT+0x1a8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d040      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a58      	ldr	r2, [pc, #352]	@ (800587c <HAL_DMA_Abort_IT+0x1ac>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d03b      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a56      	ldr	r2, [pc, #344]	@ (8005880 <HAL_DMA_Abort_IT+0x1b0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d036      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a55      	ldr	r2, [pc, #340]	@ (8005884 <HAL_DMA_Abort_IT+0x1b4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d031      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a53      	ldr	r2, [pc, #332]	@ (8005888 <HAL_DMA_Abort_IT+0x1b8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d02c      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a52      	ldr	r2, [pc, #328]	@ (800588c <HAL_DMA_Abort_IT+0x1bc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d027      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a50      	ldr	r2, [pc, #320]	@ (8005890 <HAL_DMA_Abort_IT+0x1c0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d022      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a4f      	ldr	r2, [pc, #316]	@ (8005894 <HAL_DMA_Abort_IT+0x1c4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d01d      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a4d      	ldr	r2, [pc, #308]	@ (8005898 <HAL_DMA_Abort_IT+0x1c8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d018      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a4c      	ldr	r2, [pc, #304]	@ (800589c <HAL_DMA_Abort_IT+0x1cc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a4a      	ldr	r2, [pc, #296]	@ (80058a0 <HAL_DMA_Abort_IT+0x1d0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a49      	ldr	r2, [pc, #292]	@ (80058a4 <HAL_DMA_Abort_IT+0x1d4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a47      	ldr	r2, [pc, #284]	@ (80058a8 <HAL_DMA_Abort_IT+0x1d8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_DMA_Abort_IT+0xc8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a46      	ldr	r2, [pc, #280]	@ (80058ac <HAL_DMA_Abort_IT+0x1dc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d101      	bne.n	800579c <HAL_DMA_Abort_IT+0xcc>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_DMA_Abort_IT+0xce>
 800579c:	2300      	movs	r3, #0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 8086 	beq.w	80058b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2204      	movs	r2, #4
 80057a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005870 <HAL_DMA_Abort_IT+0x1a0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d04a      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005874 <HAL_DMA_Abort_IT+0x1a4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d045      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005878 <HAL_DMA_Abort_IT+0x1a8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d040      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2b      	ldr	r2, [pc, #172]	@ (800587c <HAL_DMA_Abort_IT+0x1ac>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d03b      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a29      	ldr	r2, [pc, #164]	@ (8005880 <HAL_DMA_Abort_IT+0x1b0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d036      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a28      	ldr	r2, [pc, #160]	@ (8005884 <HAL_DMA_Abort_IT+0x1b4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d031      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a26      	ldr	r2, [pc, #152]	@ (8005888 <HAL_DMA_Abort_IT+0x1b8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d02c      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a25      	ldr	r2, [pc, #148]	@ (800588c <HAL_DMA_Abort_IT+0x1bc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d027      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a23      	ldr	r2, [pc, #140]	@ (8005890 <HAL_DMA_Abort_IT+0x1c0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d022      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a22      	ldr	r2, [pc, #136]	@ (8005894 <HAL_DMA_Abort_IT+0x1c4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d01d      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a20      	ldr	r2, [pc, #128]	@ (8005898 <HAL_DMA_Abort_IT+0x1c8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d018      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1f      	ldr	r2, [pc, #124]	@ (800589c <HAL_DMA_Abort_IT+0x1cc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1d      	ldr	r2, [pc, #116]	@ (80058a0 <HAL_DMA_Abort_IT+0x1d0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00e      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <HAL_DMA_Abort_IT+0x1d4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1a      	ldr	r2, [pc, #104]	@ (80058a8 <HAL_DMA_Abort_IT+0x1d8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_DMA_Abort_IT+0x17c>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a19      	ldr	r2, [pc, #100]	@ (80058ac <HAL_DMA_Abort_IT+0x1dc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d108      	bne.n	800585e <HAL_DMA_Abort_IT+0x18e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	e178      	b.n	8005b50 <HAL_DMA_Abort_IT+0x480>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e16f      	b.n	8005b50 <HAL_DMA_Abort_IT+0x480>
 8005870:	40020010 	.word	0x40020010
 8005874:	40020028 	.word	0x40020028
 8005878:	40020040 	.word	0x40020040
 800587c:	40020058 	.word	0x40020058
 8005880:	40020070 	.word	0x40020070
 8005884:	40020088 	.word	0x40020088
 8005888:	400200a0 	.word	0x400200a0
 800588c:	400200b8 	.word	0x400200b8
 8005890:	40020410 	.word	0x40020410
 8005894:	40020428 	.word	0x40020428
 8005898:	40020440 	.word	0x40020440
 800589c:	40020458 	.word	0x40020458
 80058a0:	40020470 	.word	0x40020470
 80058a4:	40020488 	.word	0x40020488
 80058a8:	400204a0 	.word	0x400204a0
 80058ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 020e 	bic.w	r2, r2, #14
 80058be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a6c      	ldr	r2, [pc, #432]	@ (8005a78 <HAL_DMA_Abort_IT+0x3a8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d04a      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a6b      	ldr	r2, [pc, #428]	@ (8005a7c <HAL_DMA_Abort_IT+0x3ac>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d045      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a69      	ldr	r2, [pc, #420]	@ (8005a80 <HAL_DMA_Abort_IT+0x3b0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d040      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a68      	ldr	r2, [pc, #416]	@ (8005a84 <HAL_DMA_Abort_IT+0x3b4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d03b      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a66      	ldr	r2, [pc, #408]	@ (8005a88 <HAL_DMA_Abort_IT+0x3b8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d036      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a65      	ldr	r2, [pc, #404]	@ (8005a8c <HAL_DMA_Abort_IT+0x3bc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d031      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a63      	ldr	r2, [pc, #396]	@ (8005a90 <HAL_DMA_Abort_IT+0x3c0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d02c      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a62      	ldr	r2, [pc, #392]	@ (8005a94 <HAL_DMA_Abort_IT+0x3c4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d027      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a60      	ldr	r2, [pc, #384]	@ (8005a98 <HAL_DMA_Abort_IT+0x3c8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d022      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a5f      	ldr	r2, [pc, #380]	@ (8005a9c <HAL_DMA_Abort_IT+0x3cc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d01d      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa0 <HAL_DMA_Abort_IT+0x3d0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d018      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a5c      	ldr	r2, [pc, #368]	@ (8005aa4 <HAL_DMA_Abort_IT+0x3d4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a5a      	ldr	r2, [pc, #360]	@ (8005aa8 <HAL_DMA_Abort_IT+0x3d8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00e      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a59      	ldr	r2, [pc, #356]	@ (8005aac <HAL_DMA_Abort_IT+0x3dc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a57      	ldr	r2, [pc, #348]	@ (8005ab0 <HAL_DMA_Abort_IT+0x3e0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_DMA_Abort_IT+0x290>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a56      	ldr	r2, [pc, #344]	@ (8005ab4 <HAL_DMA_Abort_IT+0x3e4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d108      	bne.n	8005972 <HAL_DMA_Abort_IT+0x2a2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	e007      	b.n	8005982 <HAL_DMA_Abort_IT+0x2b2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a3c      	ldr	r2, [pc, #240]	@ (8005a78 <HAL_DMA_Abort_IT+0x3a8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d072      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a3a      	ldr	r2, [pc, #232]	@ (8005a7c <HAL_DMA_Abort_IT+0x3ac>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d06d      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a39      	ldr	r2, [pc, #228]	@ (8005a80 <HAL_DMA_Abort_IT+0x3b0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d068      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a37      	ldr	r2, [pc, #220]	@ (8005a84 <HAL_DMA_Abort_IT+0x3b4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d063      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a36      	ldr	r2, [pc, #216]	@ (8005a88 <HAL_DMA_Abort_IT+0x3b8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d05e      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a34      	ldr	r2, [pc, #208]	@ (8005a8c <HAL_DMA_Abort_IT+0x3bc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d059      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a33      	ldr	r2, [pc, #204]	@ (8005a90 <HAL_DMA_Abort_IT+0x3c0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d054      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a31      	ldr	r2, [pc, #196]	@ (8005a94 <HAL_DMA_Abort_IT+0x3c4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d04f      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a30      	ldr	r2, [pc, #192]	@ (8005a98 <HAL_DMA_Abort_IT+0x3c8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d04a      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a9c <HAL_DMA_Abort_IT+0x3cc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d045      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa0 <HAL_DMA_Abort_IT+0x3d0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d040      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a2b      	ldr	r2, [pc, #172]	@ (8005aa4 <HAL_DMA_Abort_IT+0x3d4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d03b      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa8 <HAL_DMA_Abort_IT+0x3d8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d036      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a28      	ldr	r2, [pc, #160]	@ (8005aac <HAL_DMA_Abort_IT+0x3dc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d031      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a27      	ldr	r2, [pc, #156]	@ (8005ab0 <HAL_DMA_Abort_IT+0x3e0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d02c      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a25      	ldr	r2, [pc, #148]	@ (8005ab4 <HAL_DMA_Abort_IT+0x3e4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d027      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a24      	ldr	r2, [pc, #144]	@ (8005ab8 <HAL_DMA_Abort_IT+0x3e8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d022      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a22      	ldr	r2, [pc, #136]	@ (8005abc <HAL_DMA_Abort_IT+0x3ec>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d01d      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a21      	ldr	r2, [pc, #132]	@ (8005ac0 <HAL_DMA_Abort_IT+0x3f0>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d018      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac4 <HAL_DMA_Abort_IT+0x3f4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac8 <HAL_DMA_Abort_IT+0x3f8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00e      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1c      	ldr	r2, [pc, #112]	@ (8005acc <HAL_DMA_Abort_IT+0x3fc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d009      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad0 <HAL_DMA_Abort_IT+0x400>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x3a2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a19      	ldr	r2, [pc, #100]	@ (8005ad4 <HAL_DMA_Abort_IT+0x404>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d132      	bne.n	8005ad8 <HAL_DMA_Abort_IT+0x408>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e031      	b.n	8005ada <HAL_DMA_Abort_IT+0x40a>
 8005a76:	bf00      	nop
 8005a78:	40020010 	.word	0x40020010
 8005a7c:	40020028 	.word	0x40020028
 8005a80:	40020040 	.word	0x40020040
 8005a84:	40020058 	.word	0x40020058
 8005a88:	40020070 	.word	0x40020070
 8005a8c:	40020088 	.word	0x40020088
 8005a90:	400200a0 	.word	0x400200a0
 8005a94:	400200b8 	.word	0x400200b8
 8005a98:	40020410 	.word	0x40020410
 8005a9c:	40020428 	.word	0x40020428
 8005aa0:	40020440 	.word	0x40020440
 8005aa4:	40020458 	.word	0x40020458
 8005aa8:	40020470 	.word	0x40020470
 8005aac:	40020488 	.word	0x40020488
 8005ab0:	400204a0 	.word	0x400204a0
 8005ab4:	400204b8 	.word	0x400204b8
 8005ab8:	58025408 	.word	0x58025408
 8005abc:	5802541c 	.word	0x5802541c
 8005ac0:	58025430 	.word	0x58025430
 8005ac4:	58025444 	.word	0x58025444
 8005ac8:	58025458 	.word	0x58025458
 8005acc:	5802546c 	.word	0x5802546c
 8005ad0:	58025480 	.word	0x58025480
 8005ad4:	58025494 	.word	0x58025494
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d028      	beq.n	8005b30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005aec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	2201      	movs	r2, #1
 8005afe:	409a      	lsls	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00c      	beq.n	8005b30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop

08005b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b089      	sub	sp, #36	@ 0x24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b6a:	4b86      	ldr	r3, [pc, #536]	@ (8005d84 <HAL_GPIO_Init+0x228>)
 8005b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b6e:	e18c      	b.n	8005e8a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	2101      	movs	r1, #1
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 817e 	beq.w	8005e84 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d005      	beq.n	8005ba0 <HAL_GPIO_Init+0x44>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d130      	bne.n	8005c02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	2203      	movs	r2, #3
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	43db      	mvns	r3, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4013      	ands	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	091b      	lsrs	r3, r3, #4
 8005bec:	f003 0201 	and.w	r2, r3, #1
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d017      	beq.n	8005c3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	2203      	movs	r2, #3
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d123      	bne.n	8005c92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	08da      	lsrs	r2, r3, #3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3208      	adds	r2, #8
 8005c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	220f      	movs	r2, #15
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	08da      	lsrs	r2, r3, #3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3208      	adds	r2, #8
 8005c8c:	69b9      	ldr	r1, [r7, #24]
 8005c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	2203      	movs	r2, #3
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f003 0203 	and.w	r2, r3, #3
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80d8 	beq.w	8005e84 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8005d88 <HAL_GPIO_Init+0x22c>)
 8005cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cda:	4a2b      	ldr	r2, [pc, #172]	@ (8005d88 <HAL_GPIO_Init+0x22c>)
 8005cdc:	f043 0302 	orr.w	r3, r3, #2
 8005ce0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ce4:	4b28      	ldr	r3, [pc, #160]	@ (8005d88 <HAL_GPIO_Init+0x22c>)
 8005ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cf2:	4a26      	ldr	r2, [pc, #152]	@ (8005d8c <HAL_GPIO_Init+0x230>)
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	089b      	lsrs	r3, r3, #2
 8005cf8:	3302      	adds	r3, #2
 8005cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	220f      	movs	r2, #15
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <HAL_GPIO_Init+0x234>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d04a      	beq.n	8005db4 <HAL_GPIO_Init+0x258>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1c      	ldr	r2, [pc, #112]	@ (8005d94 <HAL_GPIO_Init+0x238>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d02b      	beq.n	8005d7e <HAL_GPIO_Init+0x222>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1b      	ldr	r2, [pc, #108]	@ (8005d98 <HAL_GPIO_Init+0x23c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d025      	beq.n	8005d7a <HAL_GPIO_Init+0x21e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1a      	ldr	r2, [pc, #104]	@ (8005d9c <HAL_GPIO_Init+0x240>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01f      	beq.n	8005d76 <HAL_GPIO_Init+0x21a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a19      	ldr	r2, [pc, #100]	@ (8005da0 <HAL_GPIO_Init+0x244>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d019      	beq.n	8005d72 <HAL_GPIO_Init+0x216>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a18      	ldr	r2, [pc, #96]	@ (8005da4 <HAL_GPIO_Init+0x248>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_GPIO_Init+0x212>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a17      	ldr	r2, [pc, #92]	@ (8005da8 <HAL_GPIO_Init+0x24c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00d      	beq.n	8005d6a <HAL_GPIO_Init+0x20e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a16      	ldr	r2, [pc, #88]	@ (8005dac <HAL_GPIO_Init+0x250>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <HAL_GPIO_Init+0x20a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a15      	ldr	r2, [pc, #84]	@ (8005db0 <HAL_GPIO_Init+0x254>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d101      	bne.n	8005d62 <HAL_GPIO_Init+0x206>
 8005d5e:	2309      	movs	r3, #9
 8005d60:	e029      	b.n	8005db6 <HAL_GPIO_Init+0x25a>
 8005d62:	230a      	movs	r3, #10
 8005d64:	e027      	b.n	8005db6 <HAL_GPIO_Init+0x25a>
 8005d66:	2307      	movs	r3, #7
 8005d68:	e025      	b.n	8005db6 <HAL_GPIO_Init+0x25a>
 8005d6a:	2306      	movs	r3, #6
 8005d6c:	e023      	b.n	8005db6 <HAL_GPIO_Init+0x25a>
 8005d6e:	2305      	movs	r3, #5
 8005d70:	e021      	b.n	8005db6 <HAL_GPIO_Init+0x25a>
 8005d72:	2304      	movs	r3, #4
 8005d74:	e01f      	b.n	8005db6 <HAL_GPIO_Init+0x25a>
 8005d76:	2303      	movs	r3, #3
 8005d78:	e01d      	b.n	8005db6 <HAL_GPIO_Init+0x25a>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e01b      	b.n	8005db6 <HAL_GPIO_Init+0x25a>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e019      	b.n	8005db6 <HAL_GPIO_Init+0x25a>
 8005d82:	bf00      	nop
 8005d84:	58000080 	.word	0x58000080
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	58000400 	.word	0x58000400
 8005d90:	58020000 	.word	0x58020000
 8005d94:	58020400 	.word	0x58020400
 8005d98:	58020800 	.word	0x58020800
 8005d9c:	58020c00 	.word	0x58020c00
 8005da0:	58021000 	.word	0x58021000
 8005da4:	58021400 	.word	0x58021400
 8005da8:	58021800 	.word	0x58021800
 8005dac:	58021c00 	.word	0x58021c00
 8005db0:	58022400 	.word	0x58022400
 8005db4:	2300      	movs	r3, #0
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	f002 0203 	and.w	r2, r2, #3
 8005dbc:	0092      	lsls	r2, r2, #2
 8005dbe:	4093      	lsls	r3, r2
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dc6:	4938      	ldr	r1, [pc, #224]	@ (8005ea8 <HAL_GPIO_Init+0x34c>)
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	089b      	lsrs	r3, r3, #2
 8005dcc:	3302      	adds	r3, #2
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005dfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	43db      	mvns	r3, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4013      	ands	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	3301      	adds	r3, #1
 8005e88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f47f ae6b 	bne.w	8005b70 <HAL_GPIO_Init+0x14>
  }
}
 8005e9a:	bf00      	nop
 8005e9c:	bf00      	nop
 8005e9e:	3724      	adds	r7, #36	@ 0x24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	58000400 	.word	0x58000400

08005eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	887b      	ldrh	r3, [r7, #2]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
 8005ec8:	e001      	b.n	8005ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	807b      	strh	r3, [r7, #2]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005eec:	787b      	ldrb	r3, [r7, #1]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ef2:	887a      	ldrh	r2, [r7, #2]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ef8:	e003      	b.n	8005f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005efa:	887b      	ldrh	r3, [r7, #2]
 8005efc:	041a      	lsls	r2, r3, #16
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	619a      	str	r2, [r3, #24]
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e08b      	b.n	800603a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fc f990 	bl	800225c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2224      	movs	r2, #36	@ 0x24
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0201 	bic.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005f60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d107      	bne.n	8005f8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f86:	609a      	str	r2, [r3, #8]
 8005f88:	e006      	b.n	8005f98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005f96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d108      	bne.n	8005fb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fae:	605a      	str	r2, [r3, #4]
 8005fb0:	e007      	b.n	8005fc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6859      	ldr	r1, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006044 <HAL_I2C_Init+0x134>)
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fe0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69d9      	ldr	r1, [r3, #28]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	02008000 	.word	0x02008000

08006048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b20      	cmp	r3, #32
 800605c:	d138      	bne.n	80060d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006068:	2302      	movs	r3, #2
 800606a:	e032      	b.n	80060d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2224      	movs	r2, #36	@ 0x24
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800609a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e000      	b.n	80060d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060d0:	2302      	movs	r3, #2
  }
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d139      	bne.n	8006168 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060fe:	2302      	movs	r3, #2
 8006100:	e033      	b.n	800616a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2224      	movs	r2, #36	@ 0x24
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006130:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006180:	4b19      	ldr	r3, [pc, #100]	@ (80061e8 <HAL_PWREx_ConfigSupply+0x70>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b04      	cmp	r3, #4
 800618a:	d00a      	beq.n	80061a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800618c:	4b16      	ldr	r3, [pc, #88]	@ (80061e8 <HAL_PWREx_ConfigSupply+0x70>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	429a      	cmp	r2, r3
 8006198:	d001      	beq.n	800619e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e01f      	b.n	80061de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	e01d      	b.n	80061de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80061a2:	4b11      	ldr	r3, [pc, #68]	@ (80061e8 <HAL_PWREx_ConfigSupply+0x70>)
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f023 0207 	bic.w	r2, r3, #7
 80061aa:	490f      	ldr	r1, [pc, #60]	@ (80061e8 <HAL_PWREx_ConfigSupply+0x70>)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80061b2:	f7fd fa43 	bl	800363c <HAL_GetTick>
 80061b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061b8:	e009      	b.n	80061ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80061ba:	f7fd fa3f 	bl	800363c <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061c8:	d901      	bls.n	80061ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e007      	b.n	80061de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061ce:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <HAL_PWREx_ConfigSupply+0x70>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061da:	d1ee      	bne.n	80061ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	58024800 	.word	0x58024800

080061ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	@ 0x30
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e3c8      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8087 	beq.w	800631a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800620c:	4b88      	ldr	r3, [pc, #544]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006216:	4b86      	ldr	r3, [pc, #536]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800621c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621e:	2b10      	cmp	r3, #16
 8006220:	d007      	beq.n	8006232 <HAL_RCC_OscConfig+0x46>
 8006222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006224:	2b18      	cmp	r3, #24
 8006226:	d110      	bne.n	800624a <HAL_RCC_OscConfig+0x5e>
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d10b      	bne.n	800624a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006232:	4b7f      	ldr	r3, [pc, #508]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d06c      	beq.n	8006318 <HAL_RCC_OscConfig+0x12c>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d168      	bne.n	8006318 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e3a2      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006252:	d106      	bne.n	8006262 <HAL_RCC_OscConfig+0x76>
 8006254:	4b76      	ldr	r3, [pc, #472]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a75      	ldr	r2, [pc, #468]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 800625a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	e02e      	b.n	80062c0 <HAL_RCC_OscConfig+0xd4>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10c      	bne.n	8006284 <HAL_RCC_OscConfig+0x98>
 800626a:	4b71      	ldr	r3, [pc, #452]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a70      	ldr	r2, [pc, #448]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	4b6e      	ldr	r3, [pc, #440]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a6d      	ldr	r2, [pc, #436]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 800627c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e01d      	b.n	80062c0 <HAL_RCC_OscConfig+0xd4>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800628c:	d10c      	bne.n	80062a8 <HAL_RCC_OscConfig+0xbc>
 800628e:	4b68      	ldr	r3, [pc, #416]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a67      	ldr	r2, [pc, #412]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	4b65      	ldr	r3, [pc, #404]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a64      	ldr	r2, [pc, #400]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80062a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	e00b      	b.n	80062c0 <HAL_RCC_OscConfig+0xd4>
 80062a8:	4b61      	ldr	r3, [pc, #388]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a60      	ldr	r2, [pc, #384]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80062ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	4b5e      	ldr	r3, [pc, #376]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a5d      	ldr	r2, [pc, #372]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80062ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d013      	beq.n	80062f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7fd f9b8 	bl	800363c <HAL_GetTick>
 80062cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d0:	f7fd f9b4 	bl	800363c <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b64      	cmp	r3, #100	@ 0x64
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e356      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062e2:	4b53      	ldr	r3, [pc, #332]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f0      	beq.n	80062d0 <HAL_RCC_OscConfig+0xe4>
 80062ee:	e014      	b.n	800631a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7fd f9a4 	bl	800363c <HAL_GetTick>
 80062f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062f8:	f7fd f9a0 	bl	800363c <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b64      	cmp	r3, #100	@ 0x64
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e342      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800630a:	4b49      	ldr	r3, [pc, #292]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f0      	bne.n	80062f8 <HAL_RCC_OscConfig+0x10c>
 8006316:	e000      	b.n	800631a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 808c 	beq.w	8006440 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006328:	4b41      	ldr	r3, [pc, #260]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006330:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006332:	4b3f      	ldr	r3, [pc, #252]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006336:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <HAL_RCC_OscConfig+0x162>
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	2b18      	cmp	r3, #24
 8006342:	d137      	bne.n	80063b4 <HAL_RCC_OscConfig+0x1c8>
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d132      	bne.n	80063b4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800634e:	4b38      	ldr	r3, [pc, #224]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <HAL_RCC_OscConfig+0x17a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e314      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006366:	4b32      	ldr	r3, [pc, #200]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f023 0219 	bic.w	r2, r3, #25
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	492f      	ldr	r1, [pc, #188]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006374:	4313      	orrs	r3, r2
 8006376:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fd f960 	bl	800363c <HAL_GetTick>
 800637c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006380:	f7fd f95c 	bl	800363c <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e2fe      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006392:	4b27      	ldr	r3, [pc, #156]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639e:	4b24      	ldr	r3, [pc, #144]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	061b      	lsls	r3, r3, #24
 80063ac:	4920      	ldr	r1, [pc, #128]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063b2:	e045      	b.n	8006440 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d026      	beq.n	800640a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f023 0219 	bic.w	r2, r3, #25
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4919      	ldr	r1, [pc, #100]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ce:	f7fd f935 	bl	800363c <HAL_GetTick>
 80063d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063d4:	e008      	b.n	80063e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063d6:	f7fd f931 	bl	800363c <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e2d3      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063e8:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0f0      	beq.n	80063d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	490b      	ldr	r1, [pc, #44]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006404:	4313      	orrs	r3, r2
 8006406:	604b      	str	r3, [r1, #4]
 8006408:	e01a      	b.n	8006440 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800640a:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a08      	ldr	r2, [pc, #32]	@ (8006430 <HAL_RCC_OscConfig+0x244>)
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006416:	f7fd f911 	bl	800363c <HAL_GetTick>
 800641a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800641c:	e00a      	b.n	8006434 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800641e:	f7fd f90d 	bl	800363c <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d903      	bls.n	8006434 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e2af      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
 8006430:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006434:	4b96      	ldr	r3, [pc, #600]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ee      	bne.n	800641e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d06a      	beq.n	8006522 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800644c:	4b90      	ldr	r3, [pc, #576]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006454:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006456:	4b8e      	ldr	r3, [pc, #568]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	2b08      	cmp	r3, #8
 8006460:	d007      	beq.n	8006472 <HAL_RCC_OscConfig+0x286>
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b18      	cmp	r3, #24
 8006466:	d11b      	bne.n	80064a0 <HAL_RCC_OscConfig+0x2b4>
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b01      	cmp	r3, #1
 8006470:	d116      	bne.n	80064a0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006472:	4b87      	ldr	r3, [pc, #540]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d005      	beq.n	800648a <HAL_RCC_OscConfig+0x29e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	2b80      	cmp	r3, #128	@ 0x80
 8006484:	d001      	beq.n	800648a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e282      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800648a:	4b81      	ldr	r3, [pc, #516]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	061b      	lsls	r3, r3, #24
 8006498:	497d      	ldr	r1, [pc, #500]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 800649a:	4313      	orrs	r3, r2
 800649c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800649e:	e040      	b.n	8006522 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d023      	beq.n	80064f0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80064a8:	4b79      	ldr	r3, [pc, #484]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a78      	ldr	r2, [pc, #480]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80064ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fd f8c2 	bl	800363c <HAL_GetTick>
 80064b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064bc:	f7fd f8be 	bl	800363c <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e260      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064ce:	4b70      	ldr	r3, [pc, #448]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0f0      	beq.n	80064bc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064da:	4b6d      	ldr	r3, [pc, #436]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	061b      	lsls	r3, r3, #24
 80064e8:	4969      	ldr	r1, [pc, #420]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60cb      	str	r3, [r1, #12]
 80064ee:	e018      	b.n	8006522 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064f0:	4b67      	ldr	r3, [pc, #412]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a66      	ldr	r2, [pc, #408]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80064f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fd f89e 	bl	800363c <HAL_GetTick>
 8006500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006504:	f7fd f89a 	bl	800363c <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e23c      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006516:	4b5e      	ldr	r3, [pc, #376]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d036      	beq.n	800659c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d019      	beq.n	800656a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006536:	4b56      	ldr	r3, [pc, #344]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800653a:	4a55      	ldr	r2, [pc, #340]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 800653c:	f043 0301 	orr.w	r3, r3, #1
 8006540:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006542:	f7fd f87b 	bl	800363c <HAL_GetTick>
 8006546:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800654a:	f7fd f877 	bl	800363c <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e219      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800655c:	4b4c      	ldr	r3, [pc, #304]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 800655e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0f0      	beq.n	800654a <HAL_RCC_OscConfig+0x35e>
 8006568:	e018      	b.n	800659c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800656a:	4b49      	ldr	r3, [pc, #292]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 800656c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656e:	4a48      	ldr	r2, [pc, #288]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006576:	f7fd f861 	bl	800363c <HAL_GetTick>
 800657a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800657e:	f7fd f85d 	bl	800363c <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e1ff      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006590:	4b3f      	ldr	r3, [pc, #252]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f0      	bne.n	800657e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d036      	beq.n	8006616 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d019      	beq.n	80065e4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065b0:	4b37      	ldr	r3, [pc, #220]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a36      	ldr	r2, [pc, #216]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80065b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80065ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065bc:	f7fd f83e 	bl	800363c <HAL_GetTick>
 80065c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065c4:	f7fd f83a 	bl	800363c <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e1dc      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <HAL_RCC_OscConfig+0x3d8>
 80065e2:	e018      	b.n	8006616 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a29      	ldr	r2, [pc, #164]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 80065ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065f0:	f7fd f824 	bl	800363c <HAL_GetTick>
 80065f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065f8:	f7fd f820 	bl	800363c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e1c2      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800660a:	4b21      	ldr	r3, [pc, #132]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8086 	beq.w	8006730 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006624:	4b1b      	ldr	r3, [pc, #108]	@ (8006694 <HAL_RCC_OscConfig+0x4a8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1a      	ldr	r2, [pc, #104]	@ (8006694 <HAL_RCC_OscConfig+0x4a8>)
 800662a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800662e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006630:	f7fd f804 	bl	800363c <HAL_GetTick>
 8006634:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006638:	f7fd f800 	bl	800363c <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b64      	cmp	r3, #100	@ 0x64
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e1a2      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800664a:	4b12      	ldr	r3, [pc, #72]	@ (8006694 <HAL_RCC_OscConfig+0x4a8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0f0      	beq.n	8006638 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d106      	bne.n	800666c <HAL_RCC_OscConfig+0x480>
 800665e:	4b0c      	ldr	r3, [pc, #48]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006662:	4a0b      	ldr	r2, [pc, #44]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6713      	str	r3, [r2, #112]	@ 0x70
 800666a:	e032      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e6>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d111      	bne.n	8006698 <HAL_RCC_OscConfig+0x4ac>
 8006674:	4b06      	ldr	r3, [pc, #24]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006678:	4a05      	ldr	r2, [pc, #20]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006680:	4b03      	ldr	r3, [pc, #12]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006684:	4a02      	ldr	r2, [pc, #8]	@ (8006690 <HAL_RCC_OscConfig+0x4a4>)
 8006686:	f023 0304 	bic.w	r3, r3, #4
 800668a:	6713      	str	r3, [r2, #112]	@ 0x70
 800668c:	e021      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e6>
 800668e:	bf00      	nop
 8006690:	58024400 	.word	0x58024400
 8006694:	58024800 	.word	0x58024800
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b05      	cmp	r3, #5
 800669e:	d10c      	bne.n	80066ba <HAL_RCC_OscConfig+0x4ce>
 80066a0:	4b83      	ldr	r3, [pc, #524]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a4:	4a82      	ldr	r2, [pc, #520]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80066a6:	f043 0304 	orr.w	r3, r3, #4
 80066aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ac:	4b80      	ldr	r3, [pc, #512]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b0:	4a7f      	ldr	r2, [pc, #508]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80066b2:	f043 0301 	orr.w	r3, r3, #1
 80066b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066b8:	e00b      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e6>
 80066ba:	4b7d      	ldr	r3, [pc, #500]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066be:	4a7c      	ldr	r2, [pc, #496]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c6:	4b7a      	ldr	r3, [pc, #488]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80066c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ca:	4a79      	ldr	r2, [pc, #484]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80066cc:	f023 0304 	bic.w	r3, r3, #4
 80066d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d015      	beq.n	8006706 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066da:	f7fc ffaf 	bl	800363c <HAL_GetTick>
 80066de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e2:	f7fc ffab 	bl	800363c <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e14b      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066f8:	4b6d      	ldr	r3, [pc, #436]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0ee      	beq.n	80066e2 <HAL_RCC_OscConfig+0x4f6>
 8006704:	e014      	b.n	8006730 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006706:	f7fc ff99 	bl	800363c <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800670c:	e00a      	b.n	8006724 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800670e:	f7fc ff95 	bl	800363c <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800671c:	4293      	cmp	r3, r2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e135      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006724:	4b62      	ldr	r3, [pc, #392]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1ee      	bne.n	800670e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 812a 	beq.w	800698e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800673a:	4b5d      	ldr	r3, [pc, #372]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006742:	2b18      	cmp	r3, #24
 8006744:	f000 80ba 	beq.w	80068bc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674c:	2b02      	cmp	r3, #2
 800674e:	f040 8095 	bne.w	800687c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006752:	4b57      	ldr	r3, [pc, #348]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a56      	ldr	r2, [pc, #344]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006758:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800675c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675e:	f7fc ff6d 	bl	800363c <HAL_GetTick>
 8006762:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006766:	f7fc ff69 	bl	800363c <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e10b      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006778:	4b4d      	ldr	r3, [pc, #308]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f0      	bne.n	8006766 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006784:	4b4a      	ldr	r3, [pc, #296]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006786:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006788:	4b4a      	ldr	r3, [pc, #296]	@ (80068b4 <HAL_RCC_OscConfig+0x6c8>)
 800678a:	4013      	ands	r3, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006794:	0112      	lsls	r2, r2, #4
 8006796:	430a      	orrs	r2, r1
 8006798:	4945      	ldr	r1, [pc, #276]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 800679a:	4313      	orrs	r3, r2
 800679c:	628b      	str	r3, [r1, #40]	@ 0x28
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	3b01      	subs	r3, #1
 80067a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ac:	3b01      	subs	r3, #1
 80067ae:	025b      	lsls	r3, r3, #9
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	3b01      	subs	r3, #1
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c6:	3b01      	subs	r3, #1
 80067c8:	061b      	lsls	r3, r3, #24
 80067ca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80067ce:	4938      	ldr	r1, [pc, #224]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80067d4:	4b36      	ldr	r3, [pc, #216]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80067d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d8:	4a35      	ldr	r2, [pc, #212]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067e0:	4b33      	ldr	r3, [pc, #204]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80067e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067e4:	4b34      	ldr	r3, [pc, #208]	@ (80068b8 <HAL_RCC_OscConfig+0x6cc>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067ec:	00d2      	lsls	r2, r2, #3
 80067ee:	4930      	ldr	r1, [pc, #192]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067f4:	4b2e      	ldr	r3, [pc, #184]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	f023 020c 	bic.w	r2, r3, #12
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006800:	492b      	ldr	r1, [pc, #172]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006802:	4313      	orrs	r3, r2
 8006804:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006806:	4b2a      	ldr	r3, [pc, #168]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	f023 0202 	bic.w	r2, r3, #2
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006812:	4927      	ldr	r1, [pc, #156]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006814:	4313      	orrs	r3, r2
 8006816:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006818:	4b25      	ldr	r3, [pc, #148]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 800681a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681c:	4a24      	ldr	r2, [pc, #144]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 800681e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006824:	4b22      	ldr	r3, [pc, #136]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006828:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006830:	4b1f      	ldr	r3, [pc, #124]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006834:	4a1e      	ldr	r2, [pc, #120]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006836:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800683a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800683c:	4b1c      	ldr	r3, [pc, #112]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 800683e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006840:	4a1b      	ldr	r2, [pc, #108]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006848:	4b19      	ldr	r3, [pc, #100]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a18      	ldr	r2, [pc, #96]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 800684e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006854:	f7fc fef2 	bl	800363c <HAL_GetTick>
 8006858:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800685c:	f7fc feee 	bl	800363c <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e090      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800686e:	4b10      	ldr	r3, [pc, #64]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <HAL_RCC_OscConfig+0x670>
 800687a:	e088      	b.n	800698e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800687c:	4b0c      	ldr	r3, [pc, #48]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a0b      	ldr	r2, [pc, #44]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 8006882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fc fed8 	bl	800363c <HAL_GetTick>
 800688c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006890:	f7fc fed4 	bl	800363c <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e076      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068a2:	4b03      	ldr	r3, [pc, #12]	@ (80068b0 <HAL_RCC_OscConfig+0x6c4>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0x6a4>
 80068ae:	e06e      	b.n	800698e <HAL_RCC_OscConfig+0x7a2>
 80068b0:	58024400 	.word	0x58024400
 80068b4:	fffffc0c 	.word	0xfffffc0c
 80068b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068bc:	4b36      	ldr	r3, [pc, #216]	@ (8006998 <HAL_RCC_OscConfig+0x7ac>)
 80068be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068c2:	4b35      	ldr	r3, [pc, #212]	@ (8006998 <HAL_RCC_OscConfig+0x7ac>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d031      	beq.n	8006934 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f003 0203 	and.w	r2, r3, #3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068da:	429a      	cmp	r2, r3
 80068dc:	d12a      	bne.n	8006934 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	091b      	lsrs	r3, r3, #4
 80068e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d122      	bne.n	8006934 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d11a      	bne.n	8006934 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	0a5b      	lsrs	r3, r3, #9
 8006902:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800690c:	429a      	cmp	r2, r3
 800690e:	d111      	bne.n	8006934 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	0c1b      	lsrs	r3, r3, #16
 8006914:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800691e:	429a      	cmp	r2, r3
 8006920:	d108      	bne.n	8006934 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	0e1b      	lsrs	r3, r3, #24
 8006926:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006930:	429a      	cmp	r2, r3
 8006932:	d001      	beq.n	8006938 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e02b      	b.n	8006990 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006938:	4b17      	ldr	r3, [pc, #92]	@ (8006998 <HAL_RCC_OscConfig+0x7ac>)
 800693a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693c:	08db      	lsrs	r3, r3, #3
 800693e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006942:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	429a      	cmp	r2, r3
 800694c:	d01f      	beq.n	800698e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800694e:	4b12      	ldr	r3, [pc, #72]	@ (8006998 <HAL_RCC_OscConfig+0x7ac>)
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	4a11      	ldr	r2, [pc, #68]	@ (8006998 <HAL_RCC_OscConfig+0x7ac>)
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800695a:	f7fc fe6f 	bl	800363c <HAL_GetTick>
 800695e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006960:	bf00      	nop
 8006962:	f7fc fe6b 	bl	800363c <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696a:	4293      	cmp	r3, r2
 800696c:	d0f9      	beq.n	8006962 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800696e:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <HAL_RCC_OscConfig+0x7ac>)
 8006970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006972:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <HAL_RCC_OscConfig+0x7b0>)
 8006974:	4013      	ands	r3, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800697a:	00d2      	lsls	r2, r2, #3
 800697c:	4906      	ldr	r1, [pc, #24]	@ (8006998 <HAL_RCC_OscConfig+0x7ac>)
 800697e:	4313      	orrs	r3, r2
 8006980:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006982:	4b05      	ldr	r3, [pc, #20]	@ (8006998 <HAL_RCC_OscConfig+0x7ac>)
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	4a04      	ldr	r2, [pc, #16]	@ (8006998 <HAL_RCC_OscConfig+0x7ac>)
 8006988:	f043 0301 	orr.w	r3, r3, #1
 800698c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3730      	adds	r7, #48	@ 0x30
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	58024400 	.word	0x58024400
 800699c:	ffff0007 	.word	0xffff0007

080069a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e19c      	b.n	8006cee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069b4:	4b8a      	ldr	r3, [pc, #552]	@ (8006be0 <HAL_RCC_ClockConfig+0x240>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d910      	bls.n	80069e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b87      	ldr	r3, [pc, #540]	@ (8006be0 <HAL_RCC_ClockConfig+0x240>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f023 020f 	bic.w	r2, r3, #15
 80069ca:	4985      	ldr	r1, [pc, #532]	@ (8006be0 <HAL_RCC_ClockConfig+0x240>)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d2:	4b83      	ldr	r3, [pc, #524]	@ (8006be0 <HAL_RCC_ClockConfig+0x240>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d001      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e184      	b.n	8006cee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d010      	beq.n	8006a12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	4b7b      	ldr	r3, [pc, #492]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d908      	bls.n	8006a12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a00:	4b78      	ldr	r3, [pc, #480]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	4975      	ldr	r1, [pc, #468]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d010      	beq.n	8006a40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695a      	ldr	r2, [r3, #20]
 8006a22:	4b70      	ldr	r3, [pc, #448]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d908      	bls.n	8006a40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	496a      	ldr	r1, [pc, #424]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d010      	beq.n	8006a6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	4b64      	ldr	r3, [pc, #400]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d908      	bls.n	8006a6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a5c:	4b61      	ldr	r3, [pc, #388]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	495e      	ldr	r1, [pc, #376]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d010      	beq.n	8006a9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69da      	ldr	r2, [r3, #28]
 8006a7e:	4b59      	ldr	r3, [pc, #356]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d908      	bls.n	8006a9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a8a:	4b56      	ldr	r3, [pc, #344]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	4953      	ldr	r1, [pc, #332]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d010      	beq.n	8006aca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	4b4d      	ldr	r3, [pc, #308]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d908      	bls.n	8006aca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f023 020f 	bic.w	r2, r3, #15
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	4947      	ldr	r1, [pc, #284]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d055      	beq.n	8006b82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ad6:	4b43      	ldr	r3, [pc, #268]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	4940      	ldr	r1, [pc, #256]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d107      	bne.n	8006b00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006af0:	4b3c      	ldr	r3, [pc, #240]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d121      	bne.n	8006b40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0f6      	b.n	8006cee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d107      	bne.n	8006b18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b08:	4b36      	ldr	r3, [pc, #216]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d115      	bne.n	8006b40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e0ea      	b.n	8006cee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d107      	bne.n	8006b30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b20:	4b30      	ldr	r3, [pc, #192]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d109      	bne.n	8006b40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0de      	b.n	8006cee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b30:	4b2c      	ldr	r3, [pc, #176]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0d6      	b.n	8006cee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b40:	4b28      	ldr	r3, [pc, #160]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f023 0207 	bic.w	r2, r3, #7
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	4925      	ldr	r1, [pc, #148]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b52:	f7fc fd73 	bl	800363c <HAL_GetTick>
 8006b56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b58:	e00a      	b.n	8006b70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b5a:	f7fc fd6f 	bl	800363c <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e0be      	b.n	8006cee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b70:	4b1c      	ldr	r3, [pc, #112]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d1eb      	bne.n	8006b5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d010      	beq.n	8006bb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	4b14      	ldr	r3, [pc, #80]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d208      	bcs.n	8006bb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b9e:	4b11      	ldr	r3, [pc, #68]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f023 020f 	bic.w	r2, r3, #15
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	490e      	ldr	r1, [pc, #56]	@ (8006be4 <HAL_RCC_ClockConfig+0x244>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006be0 <HAL_RCC_ClockConfig+0x240>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d214      	bcs.n	8006be8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bbe:	4b08      	ldr	r3, [pc, #32]	@ (8006be0 <HAL_RCC_ClockConfig+0x240>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f023 020f 	bic.w	r2, r3, #15
 8006bc6:	4906      	ldr	r1, [pc, #24]	@ (8006be0 <HAL_RCC_ClockConfig+0x240>)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bce:	4b04      	ldr	r3, [pc, #16]	@ (8006be0 <HAL_RCC_ClockConfig+0x240>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d005      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e086      	b.n	8006cee <HAL_RCC_ClockConfig+0x34e>
 8006be0:	52002000 	.word	0x52002000
 8006be4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d010      	beq.n	8006c16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d208      	bcs.n	8006c16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c04:	4b3c      	ldr	r3, [pc, #240]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	4939      	ldr	r1, [pc, #228]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d010      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	4b34      	ldr	r3, [pc, #208]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d208      	bcs.n	8006c44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c32:	4b31      	ldr	r3, [pc, #196]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	492e      	ldr	r1, [pc, #184]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d010      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699a      	ldr	r2, [r3, #24]
 8006c54:	4b28      	ldr	r3, [pc, #160]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d208      	bcs.n	8006c72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c60:	4b25      	ldr	r3, [pc, #148]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	4922      	ldr	r1, [pc, #136]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d010      	beq.n	8006ca0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	69da      	ldr	r2, [r3, #28]
 8006c82:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d208      	bcs.n	8006ca0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	4917      	ldr	r1, [pc, #92]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ca0:	f000 f834 	bl	8006d0c <HAL_RCC_GetSysClockFreq>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	4b14      	ldr	r3, [pc, #80]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	4912      	ldr	r1, [pc, #72]	@ (8006cfc <HAL_RCC_ClockConfig+0x35c>)
 8006cb2:	5ccb      	ldrb	r3, [r1, r3]
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf8 <HAL_RCC_ClockConfig+0x358>)
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8006cfc <HAL_RCC_ClockConfig+0x35c>)
 8006cc8:	5cd3      	ldrb	r3, [r2, r3]
 8006cca:	f003 031f 	and.w	r3, r3, #31
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8006d00 <HAL_RCC_ClockConfig+0x360>)
 8006cd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8006d04 <HAL_RCC_ClockConfig+0x364>)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006cde:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <HAL_RCC_ClockConfig+0x368>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fc fc60 	bl	80035a8 <HAL_InitTick>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	58024400 	.word	0x58024400
 8006cfc:	0801439c 	.word	0x0801439c
 8006d00:	24000004 	.word	0x24000004
 8006d04:	24000000 	.word	0x24000000
 8006d08:	24000008 	.word	0x24000008

08006d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b089      	sub	sp, #36	@ 0x24
 8006d10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d12:	4bb3      	ldr	r3, [pc, #716]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d1a:	2b18      	cmp	r3, #24
 8006d1c:	f200 8155 	bhi.w	8006fca <HAL_RCC_GetSysClockFreq+0x2be>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d8d 	.word	0x08006d8d
 8006d2c:	08006fcb 	.word	0x08006fcb
 8006d30:	08006fcb 	.word	0x08006fcb
 8006d34:	08006fcb 	.word	0x08006fcb
 8006d38:	08006fcb 	.word	0x08006fcb
 8006d3c:	08006fcb 	.word	0x08006fcb
 8006d40:	08006fcb 	.word	0x08006fcb
 8006d44:	08006fcb 	.word	0x08006fcb
 8006d48:	08006db3 	.word	0x08006db3
 8006d4c:	08006fcb 	.word	0x08006fcb
 8006d50:	08006fcb 	.word	0x08006fcb
 8006d54:	08006fcb 	.word	0x08006fcb
 8006d58:	08006fcb 	.word	0x08006fcb
 8006d5c:	08006fcb 	.word	0x08006fcb
 8006d60:	08006fcb 	.word	0x08006fcb
 8006d64:	08006fcb 	.word	0x08006fcb
 8006d68:	08006db9 	.word	0x08006db9
 8006d6c:	08006fcb 	.word	0x08006fcb
 8006d70:	08006fcb 	.word	0x08006fcb
 8006d74:	08006fcb 	.word	0x08006fcb
 8006d78:	08006fcb 	.word	0x08006fcb
 8006d7c:	08006fcb 	.word	0x08006fcb
 8006d80:	08006fcb 	.word	0x08006fcb
 8006d84:	08006fcb 	.word	0x08006fcb
 8006d88:	08006dbf 	.word	0x08006dbf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d8c:	4b94      	ldr	r3, [pc, #592]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d009      	beq.n	8006dac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d98:	4b91      	ldr	r3, [pc, #580]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	08db      	lsrs	r3, r3, #3
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	4a90      	ldr	r2, [pc, #576]	@ (8006fe4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
 8006da8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006daa:	e111      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006dac:	4b8d      	ldr	r3, [pc, #564]	@ (8006fe4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dae:	61bb      	str	r3, [r7, #24]
      break;
 8006db0:	e10e      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006db2:	4b8d      	ldr	r3, [pc, #564]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006db4:	61bb      	str	r3, [r7, #24]
      break;
 8006db6:	e10b      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006db8:	4b8c      	ldr	r3, [pc, #560]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006dba:	61bb      	str	r3, [r7, #24]
      break;
 8006dbc:	e108      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dbe:	4b88      	ldr	r3, [pc, #544]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006dc8:	4b85      	ldr	r3, [pc, #532]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	091b      	lsrs	r3, r3, #4
 8006dce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dd2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006dd4:	4b82      	ldr	r3, [pc, #520]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006dde:	4b80      	ldr	r3, [pc, #512]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de2:	08db      	lsrs	r3, r3, #3
 8006de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80e1 	beq.w	8006fc4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	f000 8083 	beq.w	8006f10 <HAL_RCC_GetSysClockFreq+0x204>
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	f200 80a1 	bhi.w	8006f54 <HAL_RCC_GetSysClockFreq+0x248>
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_RCC_GetSysClockFreq+0x114>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d056      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e1e:	e099      	b.n	8006f54 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e20:	4b6f      	ldr	r3, [pc, #444]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d02d      	beq.n	8006e88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	08db      	lsrs	r3, r3, #3
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	4a6b      	ldr	r2, [pc, #428]	@ (8006fe4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e38:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e56:	4b62      	ldr	r3, [pc, #392]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e6a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e86:	e087      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006ff4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9a:	4b51      	ldr	r3, [pc, #324]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eca:	e065      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006ff8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ede:	4b40      	ldr	r3, [pc, #256]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ef2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f0e:	e043      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006ffc <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f22:	4b2f      	ldr	r3, [pc, #188]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f36:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f52:	e021      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006ff8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f66:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f7a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f96:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f98:	4b11      	ldr	r3, [pc, #68]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9c:	0a5b      	lsrs	r3, r3, #9
 8006f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	ee07 3a90 	vmov	s15, r3
 8006fac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fbc:	ee17 3a90 	vmov	r3, s15
 8006fc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006fc2:	e005      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61bb      	str	r3, [r7, #24]
      break;
 8006fc8:	e002      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006fca:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fcc:	61bb      	str	r3, [r7, #24]
      break;
 8006fce:	bf00      	nop
  }

  return sysclockfreq;
 8006fd0:	69bb      	ldr	r3, [r7, #24]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3724      	adds	r7, #36	@ 0x24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	03d09000 	.word	0x03d09000
 8006fe8:	003d0900 	.word	0x003d0900
 8006fec:	02dc6c00 	.word	0x02dc6c00
 8006ff0:	46000000 	.word	0x46000000
 8006ff4:	4c742400 	.word	0x4c742400
 8006ff8:	4a742400 	.word	0x4a742400
 8006ffc:	4c371b00 	.word	0x4c371b00

08007000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007006:	f7ff fe81 	bl	8006d0c <HAL_RCC_GetSysClockFreq>
 800700a:	4602      	mov	r2, r0
 800700c:	4b10      	ldr	r3, [pc, #64]	@ (8007050 <HAL_RCC_GetHCLKFreq+0x50>)
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	0a1b      	lsrs	r3, r3, #8
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	490f      	ldr	r1, [pc, #60]	@ (8007054 <HAL_RCC_GetHCLKFreq+0x54>)
 8007018:	5ccb      	ldrb	r3, [r1, r3]
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	fa22 f303 	lsr.w	r3, r2, r3
 8007022:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007024:	4b0a      	ldr	r3, [pc, #40]	@ (8007050 <HAL_RCC_GetHCLKFreq+0x50>)
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	f003 030f 	and.w	r3, r3, #15
 800702c:	4a09      	ldr	r2, [pc, #36]	@ (8007054 <HAL_RCC_GetHCLKFreq+0x54>)
 800702e:	5cd3      	ldrb	r3, [r2, r3]
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	fa22 f303 	lsr.w	r3, r2, r3
 800703a:	4a07      	ldr	r2, [pc, #28]	@ (8007058 <HAL_RCC_GetHCLKFreq+0x58>)
 800703c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800703e:	4a07      	ldr	r2, [pc, #28]	@ (800705c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007044:	4b04      	ldr	r3, [pc, #16]	@ (8007058 <HAL_RCC_GetHCLKFreq+0x58>)
 8007046:	681b      	ldr	r3, [r3, #0]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	58024400 	.word	0x58024400
 8007054:	0801439c 	.word	0x0801439c
 8007058:	24000004 	.word	0x24000004
 800705c:	24000000 	.word	0x24000000

08007060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007064:	f7ff ffcc 	bl	8007000 <HAL_RCC_GetHCLKFreq>
 8007068:	4602      	mov	r2, r0
 800706a:	4b06      	ldr	r3, [pc, #24]	@ (8007084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	091b      	lsrs	r3, r3, #4
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	4904      	ldr	r1, [pc, #16]	@ (8007088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007076:	5ccb      	ldrb	r3, [r1, r3]
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007080:	4618      	mov	r0, r3
 8007082:	bd80      	pop	{r7, pc}
 8007084:	58024400 	.word	0x58024400
 8007088:	0801439c 	.word	0x0801439c

0800708c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007090:	f7ff ffb6 	bl	8007000 <HAL_RCC_GetHCLKFreq>
 8007094:	4602      	mov	r2, r0
 8007096:	4b06      	ldr	r3, [pc, #24]	@ (80070b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	0a1b      	lsrs	r3, r3, #8
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	4904      	ldr	r1, [pc, #16]	@ (80070b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070a2:	5ccb      	ldrb	r3, [r1, r3]
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	58024400 	.word	0x58024400
 80070b4:	0801439c 	.word	0x0801439c

080070b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070bc:	b0c6      	sub	sp, #280	@ 0x118
 80070be:	af00      	add	r7, sp, #0
 80070c0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070c4:	2300      	movs	r3, #0
 80070c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070ca:	2300      	movs	r3, #0
 80070cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80070dc:	2500      	movs	r5, #0
 80070de:	ea54 0305 	orrs.w	r3, r4, r5
 80070e2:	d049      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070ee:	d02f      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80070f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070f4:	d828      	bhi.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070fa:	d01a      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007100:	d822      	bhi.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800710a:	d007      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800710c:	e01c      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800710e:	4bab      	ldr	r3, [pc, #684]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007112:	4aaa      	ldr	r2, [pc, #680]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800711a:	e01a      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007120:	3308      	adds	r3, #8
 8007122:	2102      	movs	r1, #2
 8007124:	4618      	mov	r0, r3
 8007126:	f002 fa49 	bl	80095bc <RCCEx_PLL2_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007130:	e00f      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007136:	3328      	adds	r3, #40	@ 0x28
 8007138:	2102      	movs	r1, #2
 800713a:	4618      	mov	r0, r3
 800713c:	f002 faf0 	bl	8009720 <RCCEx_PLL3_Config>
 8007140:	4603      	mov	r3, r0
 8007142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007146:	e004      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800714e:	e000      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800715a:	4b98      	ldr	r3, [pc, #608]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800715c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800715e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007168:	4a94      	ldr	r2, [pc, #592]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800716a:	430b      	orrs	r3, r1
 800716c:	6513      	str	r3, [r2, #80]	@ 0x50
 800716e:	e003      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007174:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007184:	f04f 0900 	mov.w	r9, #0
 8007188:	ea58 0309 	orrs.w	r3, r8, r9
 800718c:	d047      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007194:	2b04      	cmp	r3, #4
 8007196:	d82a      	bhi.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007198:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071b5 	.word	0x080071b5
 80071a4:	080071c3 	.word	0x080071c3
 80071a8:	080071d9 	.word	0x080071d9
 80071ac:	080071f7 	.word	0x080071f7
 80071b0:	080071f7 	.word	0x080071f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b4:	4b81      	ldr	r3, [pc, #516]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	4a80      	ldr	r2, [pc, #512]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071c0:	e01a      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c6:	3308      	adds	r3, #8
 80071c8:	2100      	movs	r1, #0
 80071ca:	4618      	mov	r0, r3
 80071cc:	f002 f9f6 	bl	80095bc <RCCEx_PLL2_Config>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071d6:	e00f      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071dc:	3328      	adds	r3, #40	@ 0x28
 80071de:	2100      	movs	r1, #0
 80071e0:	4618      	mov	r0, r3
 80071e2:	f002 fa9d 	bl	8009720 <RCCEx_PLL3_Config>
 80071e6:	4603      	mov	r3, r0
 80071e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071ec:	e004      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071f4:	e000      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80071f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007200:	4b6e      	ldr	r3, [pc, #440]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007204:	f023 0107 	bic.w	r1, r3, #7
 8007208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720e:	4a6b      	ldr	r2, [pc, #428]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007210:	430b      	orrs	r3, r1
 8007212:	6513      	str	r3, [r2, #80]	@ 0x50
 8007214:	e003      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800721a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800722a:	f04f 0b00 	mov.w	fp, #0
 800722e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007232:	d05b      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007238:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800723c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007240:	d03b      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007242:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007246:	d834      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007248:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800724c:	d037      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x206>
 800724e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007252:	d82e      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007254:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007258:	d033      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800725a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800725e:	d828      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007264:	d01a      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007266:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800726a:	d822      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007270:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007274:	d007      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007276:	e01c      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007278:	4b50      	ldr	r3, [pc, #320]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800727a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727c:	4a4f      	ldr	r2, [pc, #316]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800727e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007284:	e01e      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728a:	3308      	adds	r3, #8
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f002 f994 	bl	80095bc <RCCEx_PLL2_Config>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800729a:	e013      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800729c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a0:	3328      	adds	r3, #40	@ 0x28
 80072a2:	2100      	movs	r1, #0
 80072a4:	4618      	mov	r0, r3
 80072a6:	f002 fa3b 	bl	8009720 <RCCEx_PLL3_Config>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072b0:	e008      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072b8:	e004      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80072ba:	bf00      	nop
 80072bc:	e002      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80072be:	bf00      	nop
 80072c0:	e000      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80072c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10b      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80072cc:	4b3b      	ldr	r3, [pc, #236]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80072dc:	4a37      	ldr	r2, [pc, #220]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072de:	430b      	orrs	r3, r1
 80072e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80072e2:	e003      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80072f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072fc:	2300      	movs	r3, #0
 80072fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007302:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007306:	460b      	mov	r3, r1
 8007308:	4313      	orrs	r3, r2
 800730a:	d05d      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007310:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007314:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007318:	d03b      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800731a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800731e:	d834      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007320:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007324:	d037      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007326:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800732a:	d82e      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800732c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007330:	d033      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007332:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007336:	d828      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007338:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800733c:	d01a      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800733e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007342:	d822      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800734c:	d007      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800734e:	e01c      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007350:	4b1a      	ldr	r3, [pc, #104]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	4a19      	ldr	r2, [pc, #100]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800735a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800735c:	e01e      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800735e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007362:	3308      	adds	r3, #8
 8007364:	2100      	movs	r1, #0
 8007366:	4618      	mov	r0, r3
 8007368:	f002 f928 	bl	80095bc <RCCEx_PLL2_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007372:	e013      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007378:	3328      	adds	r3, #40	@ 0x28
 800737a:	2100      	movs	r1, #0
 800737c:	4618      	mov	r0, r3
 800737e:	f002 f9cf 	bl	8009720 <RCCEx_PLL3_Config>
 8007382:	4603      	mov	r3, r0
 8007384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007388:	e008      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007390:	e004      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007392:	bf00      	nop
 8007394:	e002      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007396:	bf00      	nop
 8007398:	e000      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800739a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800739c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10d      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80073a4:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80073ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073b4:	4a01      	ldr	r2, [pc, #4]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073b6:	430b      	orrs	r3, r1
 80073b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80073ba:	e005      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80073bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80073d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073d8:	2300      	movs	r3, #0
 80073da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073de:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4313      	orrs	r3, r2
 80073e6:	d03a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ee:	2b30      	cmp	r3, #48	@ 0x30
 80073f0:	d01f      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80073f2:	2b30      	cmp	r3, #48	@ 0x30
 80073f4:	d819      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d00c      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d815      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d019      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007402:	2b10      	cmp	r3, #16
 8007404:	d111      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007406:	4baa      	ldr	r3, [pc, #680]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	4aa9      	ldr	r2, [pc, #676]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800740c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007412:	e011      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007418:	3308      	adds	r3, #8
 800741a:	2102      	movs	r1, #2
 800741c:	4618      	mov	r0, r3
 800741e:	f002 f8cd 	bl	80095bc <RCCEx_PLL2_Config>
 8007422:	4603      	mov	r3, r0
 8007424:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007428:	e006      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007430:	e002      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007432:	bf00      	nop
 8007434:	e000      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007440:	4b9b      	ldr	r3, [pc, #620]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007444:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800744e:	4a98      	ldr	r2, [pc, #608]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007450:	430b      	orrs	r3, r1
 8007452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007454:	e003      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800745a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800746a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800746e:	2300      	movs	r3, #0
 8007470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007474:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007478:	460b      	mov	r3, r1
 800747a:	4313      	orrs	r3, r2
 800747c:	d051      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007488:	d035      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800748a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800748e:	d82e      	bhi.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007490:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007494:	d031      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007496:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800749a:	d828      	bhi.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 800749c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074a0:	d01a      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80074a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074a6:	d822      	bhi.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80074ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b0:	d007      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80074b2:	e01c      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b4:	4b7e      	ldr	r3, [pc, #504]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	4a7d      	ldr	r2, [pc, #500]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80074c0:	e01c      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c6:	3308      	adds	r3, #8
 80074c8:	2100      	movs	r1, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f002 f876 	bl	80095bc <RCCEx_PLL2_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80074d6:	e011      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074dc:	3328      	adds	r3, #40	@ 0x28
 80074de:	2100      	movs	r1, #0
 80074e0:	4618      	mov	r0, r3
 80074e2:	f002 f91d 	bl	8009720 <RCCEx_PLL3_Config>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80074ec:	e006      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074f4:	e002      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80074f6:	bf00      	nop
 80074f8:	e000      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80074fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007504:	4b6a      	ldr	r3, [pc, #424]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007508:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800750c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007512:	4a67      	ldr	r2, [pc, #412]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007514:	430b      	orrs	r3, r1
 8007516:	6513      	str	r3, [r2, #80]	@ 0x50
 8007518:	e003      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800751e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800752e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007532:	2300      	movs	r3, #0
 8007534:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007538:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800753c:	460b      	mov	r3, r1
 800753e:	4313      	orrs	r3, r2
 8007540:	d053      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800754c:	d033      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800754e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007552:	d82c      	bhi.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007554:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007558:	d02f      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x502>
 800755a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800755e:	d826      	bhi.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007560:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007564:	d02b      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007566:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800756a:	d820      	bhi.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800756c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007570:	d012      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007576:	d81a      	bhi.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d022      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800757c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007580:	d115      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007586:	3308      	adds	r3, #8
 8007588:	2101      	movs	r1, #1
 800758a:	4618      	mov	r0, r3
 800758c:	f002 f816 	bl	80095bc <RCCEx_PLL2_Config>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007596:	e015      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759c:	3328      	adds	r3, #40	@ 0x28
 800759e:	2101      	movs	r1, #1
 80075a0:	4618      	mov	r0, r3
 80075a2:	f002 f8bd 	bl	8009720 <RCCEx_PLL3_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075ac:	e00a      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075b4:	e006      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075b6:	bf00      	nop
 80075b8:	e004      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075ba:	bf00      	nop
 80075bc:	e002      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075be:	bf00      	nop
 80075c0:	e000      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10a      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80075cc:	4b38      	ldr	r3, [pc, #224]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075da:	4a35      	ldr	r2, [pc, #212]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075dc:	430b      	orrs	r3, r1
 80075de:	6513      	str	r3, [r2, #80]	@ 0x50
 80075e0:	e003      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80075f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075fa:	2300      	movs	r3, #0
 80075fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007600:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007604:	460b      	mov	r3, r1
 8007606:	4313      	orrs	r3, r2
 8007608:	d058      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007616:	d033      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800761c:	d82c      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800761e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007622:	d02f      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007628:	d826      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800762a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800762e:	d02b      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007630:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007634:	d820      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800763a:	d012      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800763c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007640:	d81a      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007642:	2b00      	cmp	r3, #0
 8007644:	d022      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800764a:	d115      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007650:	3308      	adds	r3, #8
 8007652:	2101      	movs	r1, #1
 8007654:	4618      	mov	r0, r3
 8007656:	f001 ffb1 	bl	80095bc <RCCEx_PLL2_Config>
 800765a:	4603      	mov	r3, r0
 800765c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007660:	e015      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007666:	3328      	adds	r3, #40	@ 0x28
 8007668:	2101      	movs	r1, #1
 800766a:	4618      	mov	r0, r3
 800766c:	f002 f858 	bl	8009720 <RCCEx_PLL3_Config>
 8007670:	4603      	mov	r3, r0
 8007672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007676:	e00a      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800767e:	e006      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007680:	bf00      	nop
 8007682:	e004      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007684:	bf00      	nop
 8007686:	e002      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007688:	bf00      	nop
 800768a:	e000      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800768c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800768e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10e      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007696:	4b06      	ldr	r3, [pc, #24]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800769a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800769e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076a6:	4a02      	ldr	r2, [pc, #8]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076a8:	430b      	orrs	r3, r1
 80076aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80076ac:	e006      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80076ae:	bf00      	nop
 80076b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80076c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076cc:	2300      	movs	r3, #0
 80076ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80076d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4313      	orrs	r3, r2
 80076da:	d037      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e6:	d00e      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80076e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ec:	d816      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d018      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80076f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076f6:	d111      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f8:	4bc4      	ldr	r3, [pc, #784]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	4ac3      	ldr	r2, [pc, #780]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007702:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007704:	e00f      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770a:	3308      	adds	r3, #8
 800770c:	2101      	movs	r1, #1
 800770e:	4618      	mov	r0, r3
 8007710:	f001 ff54 	bl	80095bc <RCCEx_PLL2_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800771a:	e004      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007722:	e000      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10a      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800772e:	4bb7      	ldr	r3, [pc, #732]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007732:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800773c:	4ab3      	ldr	r2, [pc, #716]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800773e:	430b      	orrs	r3, r1
 8007740:	6513      	str	r3, [r2, #80]	@ 0x50
 8007742:	e003      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007748:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800774c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007758:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800775c:	2300      	movs	r3, #0
 800775e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007762:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007766:	460b      	mov	r3, r1
 8007768:	4313      	orrs	r3, r2
 800776a:	d039      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800776c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007772:	2b03      	cmp	r3, #3
 8007774:	d81c      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007776:	a201      	add	r2, pc, #4	@ (adr r2, 800777c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777c:	080077b9 	.word	0x080077b9
 8007780:	0800778d 	.word	0x0800778d
 8007784:	0800779b 	.word	0x0800779b
 8007788:	080077b9 	.word	0x080077b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800778c:	4b9f      	ldr	r3, [pc, #636]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	4a9e      	ldr	r2, [pc, #632]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007798:	e00f      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800779a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779e:	3308      	adds	r3, #8
 80077a0:	2102      	movs	r1, #2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 ff0a 	bl	80095bc <RCCEx_PLL2_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80077ae:	e004      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077b6:	e000      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80077b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80077c2:	4b92      	ldr	r3, [pc, #584]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077c6:	f023 0103 	bic.w	r1, r3, #3
 80077ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077d0:	4a8e      	ldr	r2, [pc, #568]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077d2:	430b      	orrs	r3, r1
 80077d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077d6:	e003      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80077ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077f0:	2300      	movs	r3, #0
 80077f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	f000 8099 	beq.w	8007934 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007802:	4b83      	ldr	r3, [pc, #524]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a82      	ldr	r2, [pc, #520]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800780c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800780e:	f7fb ff15 	bl	800363c <HAL_GetTick>
 8007812:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007816:	e00b      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007818:	f7fb ff10 	bl	800363c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b64      	cmp	r3, #100	@ 0x64
 8007826:	d903      	bls.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800782e:	e005      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007830:	4b77      	ldr	r3, [pc, #476]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0ed      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800783c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007840:	2b00      	cmp	r3, #0
 8007842:	d173      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007844:	4b71      	ldr	r3, [pc, #452]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007846:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007850:	4053      	eors	r3, r2
 8007852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007856:	2b00      	cmp	r3, #0
 8007858:	d015      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800785a:	4b6c      	ldr	r3, [pc, #432]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800785c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007862:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007866:	4b69      	ldr	r3, [pc, #420]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800786a:	4a68      	ldr	r2, [pc, #416]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800786c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007870:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007872:	4b66      	ldr	r3, [pc, #408]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007876:	4a65      	ldr	r2, [pc, #404]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007878:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800787c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800787e:	4a63      	ldr	r2, [pc, #396]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007884:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800788e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007892:	d118      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007894:	f7fb fed2 	bl	800363c <HAL_GetTick>
 8007898:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800789c:	e00d      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800789e:	f7fb fecd 	bl	800363c <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80078a8:	1ad2      	subs	r2, r2, r3
 80078aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d903      	bls.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80078b8:	e005      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078ba:	4b54      	ldr	r3, [pc, #336]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0eb      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80078c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d129      	bne.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078de:	d10e      	bne.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x846>
 80078e0:	4b4a      	ldr	r3, [pc, #296]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078f0:	091a      	lsrs	r2, r3, #4
 80078f2:	4b48      	ldr	r3, [pc, #288]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	4a45      	ldr	r2, [pc, #276]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078f8:	430b      	orrs	r3, r1
 80078fa:	6113      	str	r3, [r2, #16]
 80078fc:	e005      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x852>
 80078fe:	4b43      	ldr	r3, [pc, #268]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	4a42      	ldr	r2, [pc, #264]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007904:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007908:	6113      	str	r3, [r2, #16]
 800790a:	4b40      	ldr	r3, [pc, #256]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800790c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800791a:	4a3c      	ldr	r2, [pc, #240]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800791c:	430b      	orrs	r3, r1
 800791e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007920:	e008      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007922:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007926:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800792a:	e003      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007930:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	f002 0301 	and.w	r3, r2, #1
 8007940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007944:	2300      	movs	r3, #0
 8007946:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800794a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800794e:	460b      	mov	r3, r1
 8007950:	4313      	orrs	r3, r2
 8007952:	f000 808f 	beq.w	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800795c:	2b28      	cmp	r3, #40	@ 0x28
 800795e:	d871      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007960:	a201      	add	r2, pc, #4	@ (adr r2, 8007968 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	08007a4d 	.word	0x08007a4d
 800796c:	08007a45 	.word	0x08007a45
 8007970:	08007a45 	.word	0x08007a45
 8007974:	08007a45 	.word	0x08007a45
 8007978:	08007a45 	.word	0x08007a45
 800797c:	08007a45 	.word	0x08007a45
 8007980:	08007a45 	.word	0x08007a45
 8007984:	08007a45 	.word	0x08007a45
 8007988:	08007a19 	.word	0x08007a19
 800798c:	08007a45 	.word	0x08007a45
 8007990:	08007a45 	.word	0x08007a45
 8007994:	08007a45 	.word	0x08007a45
 8007998:	08007a45 	.word	0x08007a45
 800799c:	08007a45 	.word	0x08007a45
 80079a0:	08007a45 	.word	0x08007a45
 80079a4:	08007a45 	.word	0x08007a45
 80079a8:	08007a2f 	.word	0x08007a2f
 80079ac:	08007a45 	.word	0x08007a45
 80079b0:	08007a45 	.word	0x08007a45
 80079b4:	08007a45 	.word	0x08007a45
 80079b8:	08007a45 	.word	0x08007a45
 80079bc:	08007a45 	.word	0x08007a45
 80079c0:	08007a45 	.word	0x08007a45
 80079c4:	08007a45 	.word	0x08007a45
 80079c8:	08007a4d 	.word	0x08007a4d
 80079cc:	08007a45 	.word	0x08007a45
 80079d0:	08007a45 	.word	0x08007a45
 80079d4:	08007a45 	.word	0x08007a45
 80079d8:	08007a45 	.word	0x08007a45
 80079dc:	08007a45 	.word	0x08007a45
 80079e0:	08007a45 	.word	0x08007a45
 80079e4:	08007a45 	.word	0x08007a45
 80079e8:	08007a4d 	.word	0x08007a4d
 80079ec:	08007a45 	.word	0x08007a45
 80079f0:	08007a45 	.word	0x08007a45
 80079f4:	08007a45 	.word	0x08007a45
 80079f8:	08007a45 	.word	0x08007a45
 80079fc:	08007a45 	.word	0x08007a45
 8007a00:	08007a45 	.word	0x08007a45
 8007a04:	08007a45 	.word	0x08007a45
 8007a08:	08007a4d 	.word	0x08007a4d
 8007a0c:	58024400 	.word	0x58024400
 8007a10:	58024800 	.word	0x58024800
 8007a14:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 fdcb 	bl	80095bc <RCCEx_PLL2_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a2c:	e00f      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a32:	3328      	adds	r3, #40	@ 0x28
 8007a34:	2101      	movs	r1, #1
 8007a36:	4618      	mov	r0, r3
 8007a38:	f001 fe72 	bl	8009720 <RCCEx_PLL3_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a42:	e004      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a4a:	e000      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a56:	4bbf      	ldr	r3, [pc, #764]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a64:	4abb      	ldr	r2, [pc, #748]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a66:	430b      	orrs	r3, r1
 8007a68:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a6a:	e003      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f002 0302 	and.w	r3, r2, #2
 8007a80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a84:	2300      	movs	r3, #0
 8007a86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4313      	orrs	r3, r2
 8007a92:	d041      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a9a:	2b05      	cmp	r3, #5
 8007a9c:	d824      	bhi.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007af1 	.word	0x08007af1
 8007aa8:	08007abd 	.word	0x08007abd
 8007aac:	08007ad3 	.word	0x08007ad3
 8007ab0:	08007af1 	.word	0x08007af1
 8007ab4:	08007af1 	.word	0x08007af1
 8007ab8:	08007af1 	.word	0x08007af1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 fd79 	bl	80095bc <RCCEx_PLL2_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007ad0:	e00f      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad6:	3328      	adds	r3, #40	@ 0x28
 8007ad8:	2101      	movs	r1, #1
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 fe20 	bl	8009720 <RCCEx_PLL3_Config>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007ae6:	e004      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007aee:	e000      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007af2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10a      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007afa:	4b96      	ldr	r3, [pc, #600]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afe:	f023 0107 	bic.w	r1, r3, #7
 8007b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b08:	4a92      	ldr	r2, [pc, #584]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b0a:	430b      	orrs	r3, r1
 8007b0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b0e:	e003      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f002 0304 	and.w	r3, r2, #4
 8007b24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b2e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b32:	460b      	mov	r3, r1
 8007b34:	4313      	orrs	r3, r2
 8007b36:	d044      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b40:	2b05      	cmp	r3, #5
 8007b42:	d825      	bhi.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007b44:	a201      	add	r2, pc, #4	@ (adr r2, 8007b4c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4a:	bf00      	nop
 8007b4c:	08007b99 	.word	0x08007b99
 8007b50:	08007b65 	.word	0x08007b65
 8007b54:	08007b7b 	.word	0x08007b7b
 8007b58:	08007b99 	.word	0x08007b99
 8007b5c:	08007b99 	.word	0x08007b99
 8007b60:	08007b99 	.word	0x08007b99
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b68:	3308      	adds	r3, #8
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 fd25 	bl	80095bc <RCCEx_PLL2_Config>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b78:	e00f      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7e:	3328      	adds	r3, #40	@ 0x28
 8007b80:	2101      	movs	r1, #1
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 fdcc 	bl	8009720 <RCCEx_PLL3_Config>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b8e:	e004      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b96:	e000      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10b      	bne.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ba6:	f023 0107 	bic.w	r1, r3, #7
 8007baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb2:	4a68      	ldr	r2, [pc, #416]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bb8:	e003      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f002 0320 	and.w	r3, r2, #32
 8007bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007bd8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4313      	orrs	r3, r2
 8007be0:	d055      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bee:	d033      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bf4:	d82c      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bfa:	d02f      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c00:	d826      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c06:	d02b      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007c08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c0c:	d820      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c12:	d012      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c18:	d81a      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d022      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c22:	d115      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c28:	3308      	adds	r3, #8
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f001 fcc5 	bl	80095bc <RCCEx_PLL2_Config>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c38:	e015      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3e:	3328      	adds	r3, #40	@ 0x28
 8007c40:	2102      	movs	r1, #2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f001 fd6c 	bl	8009720 <RCCEx_PLL3_Config>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c4e:	e00a      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c56:	e006      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c58:	bf00      	nop
 8007c5a:	e004      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c5c:	bf00      	nop
 8007c5e:	e002      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c60:	bf00      	nop
 8007c62:	e000      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10b      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c6e:	4b39      	ldr	r3, [pc, #228]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c72:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c7e:	4a35      	ldr	r2, [pc, #212]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c80:	430b      	orrs	r3, r1
 8007c82:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c84:	e003      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007c9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ca4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4313      	orrs	r3, r2
 8007cac:	d058      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cb6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007cba:	d033      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007cbc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007cc0:	d82c      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cc6:	d02f      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ccc:	d826      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007cce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cd2:	d02b      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007cd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cd8:	d820      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007cda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cde:	d012      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ce4:	d81a      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d022      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cee:	d115      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 fc5f 	bl	80095bc <RCCEx_PLL2_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d04:	e015      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0a:	3328      	adds	r3, #40	@ 0x28
 8007d0c:	2102      	movs	r1, #2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 fd06 	bl	8009720 <RCCEx_PLL3_Config>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d1a:	e00a      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d22:	e006      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d24:	bf00      	nop
 8007d26:	e004      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d28:	bf00      	nop
 8007d2a:	e002      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d2c:	bf00      	nop
 8007d2e:	e000      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10e      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d3a:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d4a:	4a02      	ldr	r2, [pc, #8]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d50:	e006      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007d52:	bf00      	nop
 8007d54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007d6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d70:	2300      	movs	r3, #0
 8007d72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	d055      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d88:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d8c:	d033      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007d8e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d92:	d82c      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d98:	d02f      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d9e:	d826      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007da0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007da4:	d02b      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007da6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007daa:	d820      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007dac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007db0:	d012      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007db2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007db6:	d81a      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d022      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dc0:	d115      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	2100      	movs	r1, #0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f001 fbf6 	bl	80095bc <RCCEx_PLL2_Config>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007dd6:	e015      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ddc:	3328      	adds	r3, #40	@ 0x28
 8007dde:	2102      	movs	r1, #2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f001 fc9d 	bl	8009720 <RCCEx_PLL3_Config>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007dec:	e00a      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007df4:	e006      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007df6:	bf00      	nop
 8007df8:	e004      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007dfa:	bf00      	nop
 8007dfc:	e002      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007dfe:	bf00      	nop
 8007e00:	e000      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e0c:	4ba0      	ldr	r3, [pc, #640]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e10:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e1c:	4a9c      	ldr	r2, [pc, #624]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e1e:	430b      	orrs	r3, r1
 8007e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e22:	e003      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f002 0308 	and.w	r3, r2, #8
 8007e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e42:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007e46:	460b      	mov	r3, r1
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	d01e      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e58:	d10c      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e5e:	3328      	adds	r3, #40	@ 0x28
 8007e60:	2102      	movs	r1, #2
 8007e62:	4618      	mov	r0, r3
 8007e64:	f001 fc5c 	bl	8009720 <RCCEx_PLL3_Config>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007e74:	4b86      	ldr	r3, [pc, #536]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e78:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e84:	4a82      	ldr	r2, [pc, #520]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e86:	430b      	orrs	r3, r1
 8007e88:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f002 0310 	and.w	r3, r2, #16
 8007e96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ea0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	d01e      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eb6:	d10c      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebc:	3328      	adds	r3, #40	@ 0x28
 8007ebe:	2102      	movs	r1, #2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 fc2d 	bl	8009720 <RCCEx_PLL3_Config>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ee2:	4a6b      	ldr	r2, [pc, #428]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007efa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007efe:	460b      	mov	r3, r1
 8007f00:	4313      	orrs	r3, r2
 8007f02:	d03e      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f10:	d022      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007f12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f16:	d81b      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f20:	d00b      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007f22:	e015      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f28:	3308      	adds	r3, #8
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fb45 	bl	80095bc <RCCEx_PLL2_Config>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f38:	e00f      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f3e:	3328      	adds	r3, #40	@ 0x28
 8007f40:	2102      	movs	r1, #2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 fbec 	bl	8009720 <RCCEx_PLL3_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f4e:	e004      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f56:	e000      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10b      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f62:	4b4b      	ldr	r3, [pc, #300]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f66:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f72:	4a47      	ldr	r2, [pc, #284]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f74:	430b      	orrs	r3, r1
 8007f76:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f78:	e003      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007f8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f90:	2300      	movs	r3, #0
 8007f92:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	d03b      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fa6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007faa:	d01f      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007fac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fb0:	d818      	bhi.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fb6:	d003      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007fb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fbc:	d007      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007fbe:	e011      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc0:	4b33      	ldr	r3, [pc, #204]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc4:	4a32      	ldr	r2, [pc, #200]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007fcc:	e00f      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd2:	3328      	adds	r3, #40	@ 0x28
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f001 fba2 	bl	8009720 <RCCEx_PLL3_Config>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007fe2:	e004      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fea:	e000      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10b      	bne.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ff6:	4b26      	ldr	r3, [pc, #152]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008006:	4a22      	ldr	r2, [pc, #136]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008008:	430b      	orrs	r3, r1
 800800a:	6553      	str	r3, [r2, #84]	@ 0x54
 800800c:	e003      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008012:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008022:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008024:	2300      	movs	r3, #0
 8008026:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008028:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800802c:	460b      	mov	r3, r1
 800802e:	4313      	orrs	r3, r2
 8008030:	d034      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800803c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008040:	d007      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008042:	e011      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008044:	4b12      	ldr	r3, [pc, #72]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008048:	4a11      	ldr	r2, [pc, #68]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800804a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800804e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008050:	e00e      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008056:	3308      	adds	r3, #8
 8008058:	2102      	movs	r1, #2
 800805a:	4618      	mov	r0, r3
 800805c:	f001 faae 	bl	80095bc <RCCEx_PLL2_Config>
 8008060:	4603      	mov	r3, r0
 8008062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008066:	e003      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800806e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10d      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008078:	4b05      	ldr	r3, [pc, #20]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800807a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800807c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008086:	4a02      	ldr	r2, [pc, #8]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008088:	430b      	orrs	r3, r1
 800808a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800808c:	e006      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800808e:	bf00      	nop
 8008090:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008098:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800809c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80080a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80080aa:	2300      	movs	r3, #0
 80080ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80080ae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80080b2:	460b      	mov	r3, r1
 80080b4:	4313      	orrs	r3, r2
 80080b6:	d00c      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080bc:	3328      	adds	r3, #40	@ 0x28
 80080be:	2102      	movs	r1, #2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 fb2d 	bl	8009720 <RCCEx_PLL3_Config>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80080de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080e0:	2300      	movs	r3, #0
 80080e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080e4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80080e8:	460b      	mov	r3, r1
 80080ea:	4313      	orrs	r3, r2
 80080ec:	d036      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80080ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080f8:	d018      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80080fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080fe:	d811      	bhi.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008104:	d014      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800810a:	d80b      	bhi.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d011      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008114:	d106      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008116:	4bb7      	ldr	r3, [pc, #732]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811a:	4ab6      	ldr	r2, [pc, #728]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800811c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008120:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008122:	e008      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800812a:	e004      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800812c:	bf00      	nop
 800812e:	e002      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008130:	bf00      	nop
 8008132:	e000      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008136:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10a      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800813e:	4bad      	ldr	r3, [pc, #692]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008142:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800814c:	4aa9      	ldr	r2, [pc, #676]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800814e:	430b      	orrs	r3, r1
 8008150:	6553      	str	r3, [r2, #84]	@ 0x54
 8008152:	e003      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008158:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800815c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008168:	653b      	str	r3, [r7, #80]	@ 0x50
 800816a:	2300      	movs	r3, #0
 800816c:	657b      	str	r3, [r7, #84]	@ 0x54
 800816e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008172:	460b      	mov	r3, r1
 8008174:	4313      	orrs	r3, r2
 8008176:	d009      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008178:	4b9e      	ldr	r3, [pc, #632]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800817a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800817c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008186:	4a9b      	ldr	r2, [pc, #620]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008188:	430b      	orrs	r3, r1
 800818a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800818c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800819a:	2300      	movs	r3, #0
 800819c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800819e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80081a2:	460b      	mov	r3, r1
 80081a4:	4313      	orrs	r3, r2
 80081a6:	d009      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80081a8:	4b92      	ldr	r3, [pc, #584]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ac:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80081b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081b6:	4a8f      	ldr	r2, [pc, #572]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081b8:	430b      	orrs	r3, r1
 80081ba:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80081c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80081ca:	2300      	movs	r3, #0
 80081cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80081ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80081d2:	460b      	mov	r3, r1
 80081d4:	4313      	orrs	r3, r2
 80081d6:	d00e      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081d8:	4b86      	ldr	r3, [pc, #536]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	4a85      	ldr	r2, [pc, #532]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081e2:	6113      	str	r3, [r2, #16]
 80081e4:	4b83      	ldr	r3, [pc, #524]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081e6:	6919      	ldr	r1, [r3, #16]
 80081e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081f0:	4a80      	ldr	r2, [pc, #512]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081f2:	430b      	orrs	r3, r1
 80081f4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008202:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008204:	2300      	movs	r3, #0
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008208:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800820c:	460b      	mov	r3, r1
 800820e:	4313      	orrs	r3, r2
 8008210:	d009      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008212:	4b78      	ldr	r3, [pc, #480]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008216:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800821a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800821e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008220:	4a74      	ldr	r2, [pc, #464]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008222:	430b      	orrs	r3, r1
 8008224:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008232:	633b      	str	r3, [r7, #48]	@ 0x30
 8008234:	2300      	movs	r3, #0
 8008236:	637b      	str	r3, [r7, #52]	@ 0x34
 8008238:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800823c:	460b      	mov	r3, r1
 800823e:	4313      	orrs	r3, r2
 8008240:	d00a      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008242:	4b6c      	ldr	r3, [pc, #432]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008246:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008252:	4a68      	ldr	r2, [pc, #416]	@ (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008254:	430b      	orrs	r3, r1
 8008256:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	2100      	movs	r1, #0
 8008262:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800826a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800826e:	460b      	mov	r3, r1
 8008270:	4313      	orrs	r3, r2
 8008272:	d011      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008278:	3308      	adds	r3, #8
 800827a:	2100      	movs	r1, #0
 800827c:	4618      	mov	r0, r3
 800827e:	f001 f99d 	bl	80095bc <RCCEx_PLL2_Config>
 8008282:	4603      	mov	r3, r0
 8008284:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008294:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	2100      	movs	r1, #0
 80082a2:	6239      	str	r1, [r7, #32]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80082aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80082ae:	460b      	mov	r3, r1
 80082b0:	4313      	orrs	r3, r2
 80082b2:	d011      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b8:	3308      	adds	r3, #8
 80082ba:	2101      	movs	r1, #1
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 f97d 	bl	80095bc <RCCEx_PLL2_Config>
 80082c2:	4603      	mov	r3, r0
 80082c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80082d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	2100      	movs	r1, #0
 80082e2:	61b9      	str	r1, [r7, #24]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	61fb      	str	r3, [r7, #28]
 80082ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80082ee:	460b      	mov	r3, r1
 80082f0:	4313      	orrs	r3, r2
 80082f2:	d011      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f8:	3308      	adds	r3, #8
 80082fa:	2102      	movs	r1, #2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 f95d 	bl	80095bc <RCCEx_PLL2_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008314:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	2100      	movs	r1, #0
 8008322:	6139      	str	r1, [r7, #16]
 8008324:	f003 0308 	and.w	r3, r3, #8
 8008328:	617b      	str	r3, [r7, #20]
 800832a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800832e:	460b      	mov	r3, r1
 8008330:	4313      	orrs	r3, r2
 8008332:	d011      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008338:	3328      	adds	r3, #40	@ 0x28
 800833a:	2100      	movs	r1, #0
 800833c:	4618      	mov	r0, r3
 800833e:	f001 f9ef 	bl	8009720 <RCCEx_PLL3_Config>
 8008342:	4603      	mov	r3, r0
 8008344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	2100      	movs	r1, #0
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	f003 0310 	and.w	r3, r3, #16
 8008368:	60fb      	str	r3, [r7, #12]
 800836a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800836e:	460b      	mov	r3, r1
 8008370:	4313      	orrs	r3, r2
 8008372:	d011      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008378:	3328      	adds	r3, #40	@ 0x28
 800837a:	2101      	movs	r1, #1
 800837c:	4618      	mov	r0, r3
 800837e:	f001 f9cf 	bl	8009720 <RCCEx_PLL3_Config>
 8008382:	4603      	mov	r3, r0
 8008384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008394:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	2100      	movs	r1, #0
 80083a2:	6039      	str	r1, [r7, #0]
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	607b      	str	r3, [r7, #4]
 80083aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80083ae:	460b      	mov	r3, r1
 80083b0:	4313      	orrs	r3, r2
 80083b2:	d011      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b8:	3328      	adds	r3, #40	@ 0x28
 80083ba:	2102      	movs	r1, #2
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 f9af 	bl	8009720 <RCCEx_PLL3_Config>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80083c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80083d8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	e000      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80083ec:	46bd      	mov	sp, r7
 80083ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083f2:	bf00      	nop
 80083f4:	58024400 	.word	0x58024400

080083f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b090      	sub	sp, #64	@ 0x40
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008406:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800840a:	430b      	orrs	r3, r1
 800840c:	f040 8094 	bne.w	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008410:	4b9b      	ldr	r3, [pc, #620]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008414:	f003 0307 	and.w	r3, r3, #7
 8008418:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	2b04      	cmp	r3, #4
 800841e:	f200 8087 	bhi.w	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008422:	a201      	add	r2, pc, #4	@ (adr r2, 8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	0800843d 	.word	0x0800843d
 800842c:	08008465 	.word	0x08008465
 8008430:	0800848d 	.word	0x0800848d
 8008434:	08008529 	.word	0x08008529
 8008438:	080084b5 	.word	0x080084b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800843c:	4b90      	ldr	r3, [pc, #576]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008444:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008448:	d108      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800844a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800844e:	4618      	mov	r0, r3
 8008450:	f000 ff62 	bl	8009318 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008458:	f000 bc93 	b.w	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008460:	f000 bc8f 	b.w	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008464:	4b86      	ldr	r3, [pc, #536]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800846c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008470:	d108      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008472:	f107 0318 	add.w	r3, r7, #24
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fca6 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008480:	f000 bc7f 	b.w	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008488:	f000 bc7b 	b.w	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800848c:	4b7c      	ldr	r3, [pc, #496]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008498:	d108      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800849a:	f107 030c 	add.w	r3, r7, #12
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 fde6 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084a8:	f000 bc6b 	b.w	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084b0:	f000 bc67 	b.w	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084b4:	4b72      	ldr	r3, [pc, #456]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80084bc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084be:	4b70      	ldr	r3, [pc, #448]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d10c      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80084ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d109      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084d0:	4b6b      	ldr	r3, [pc, #428]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	08db      	lsrs	r3, r3, #3
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	4a6a      	ldr	r2, [pc, #424]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
 80084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084e2:	e01f      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084e4:	4b66      	ldr	r3, [pc, #408]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084f0:	d106      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80084f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084f8:	d102      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084fa:	4b63      	ldr	r3, [pc, #396]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084fe:	e011      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008500:	4b5f      	ldr	r3, [pc, #380]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800850c:	d106      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800850e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008514:	d102      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008516:	4b5d      	ldr	r3, [pc, #372]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008518:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800851a:	e003      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008520:	f000 bc2f 	b.w	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008524:	f000 bc2d 	b.w	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008528:	4b59      	ldr	r3, [pc, #356]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800852a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800852c:	f000 bc29 	b.w	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008534:	f000 bc25 	b.w	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008540:	430b      	orrs	r3, r1
 8008542:	f040 80a7 	bne.w	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008546:	4b4e      	ldr	r3, [pc, #312]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800854a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800854e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008552:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008556:	d054      	beq.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800855e:	f200 808b 	bhi.w	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008568:	f000 8083 	beq.w	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800856c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008572:	f200 8081 	bhi.w	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800857c:	d02f      	beq.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800857e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008580:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008584:	d878      	bhi.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008588:	2b00      	cmp	r3, #0
 800858a:	d004      	beq.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008592:	d012      	beq.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008594:	e070      	b.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008596:	4b3a      	ldr	r3, [pc, #232]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800859e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085a2:	d107      	bne.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 feb5 	bl	8009318 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b2:	e3e6      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b8:	e3e3      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085ba:	4b31      	ldr	r3, [pc, #196]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085c6:	d107      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085c8:	f107 0318 	add.w	r3, r7, #24
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 fbfb 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d6:	e3d4      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085d8:	2300      	movs	r3, #0
 80085da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085dc:	e3d1      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085de:	4b28      	ldr	r3, [pc, #160]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ea:	d107      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ec:	f107 030c 	add.w	r3, r7, #12
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 fd3d 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085fa:	e3c2      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008600:	e3bf      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008602:	4b1f      	ldr	r3, [pc, #124]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008606:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800860a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800860c:	4b1c      	ldr	r3, [pc, #112]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b04      	cmp	r3, #4
 8008616:	d10c      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861a:	2b00      	cmp	r3, #0
 800861c:	d109      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800861e:	4b18      	ldr	r3, [pc, #96]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	08db      	lsrs	r3, r3, #3
 8008624:	f003 0303 	and.w	r3, r3, #3
 8008628:	4a16      	ldr	r2, [pc, #88]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800862a:	fa22 f303 	lsr.w	r3, r2, r3
 800862e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008630:	e01e      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008632:	4b13      	ldr	r3, [pc, #76]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800863a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800863e:	d106      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008646:	d102      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008648:	4b0f      	ldr	r3, [pc, #60]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800864c:	e010      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800864e:	4b0c      	ldr	r3, [pc, #48]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008656:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800865a:	d106      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800865c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008662:	d102      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008664:	4b09      	ldr	r3, [pc, #36]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008668:	e002      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800866e:	e388      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008670:	e387      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008672:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008676:	e384      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867c:	e381      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800867e:	bf00      	nop
 8008680:	58024400 	.word	0x58024400
 8008684:	03d09000 	.word	0x03d09000
 8008688:	003d0900 	.word	0x003d0900
 800868c:	02dc6c00 	.word	0x02dc6c00
 8008690:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008698:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800869c:	430b      	orrs	r3, r1
 800869e:	f040 809c 	bne.w	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80086a2:	4b9e      	ldr	r3, [pc, #632]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086a6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80086aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086b2:	d054      	beq.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80086b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086ba:	f200 808b 	bhi.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80086be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80086c4:	f000 8083 	beq.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80086ce:	f200 8081 	bhi.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086d8:	d02f      	beq.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086e0:	d878      	bhi.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80086e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086ee:	d012      	beq.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80086f0:	e070      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086f2:	4b8a      	ldr	r3, [pc, #552]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086fe:	d107      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008704:	4618      	mov	r0, r3
 8008706:	f000 fe07 	bl	8009318 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800870a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800870e:	e338      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008714:	e335      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008716:	4b81      	ldr	r3, [pc, #516]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800871e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008722:	d107      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008724:	f107 0318 	add.w	r3, r7, #24
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fb4d 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008732:	e326      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008734:	2300      	movs	r3, #0
 8008736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008738:	e323      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800873a:	4b78      	ldr	r3, [pc, #480]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008746:	d107      	bne.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008748:	f107 030c 	add.w	r3, r7, #12
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fc8f 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008756:	e314      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008758:	2300      	movs	r3, #0
 800875a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800875c:	e311      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800875e:	4b6f      	ldr	r3, [pc, #444]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008762:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008766:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008768:	4b6c      	ldr	r3, [pc, #432]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b04      	cmp	r3, #4
 8008772:	d10c      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008776:	2b00      	cmp	r3, #0
 8008778:	d109      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800877a:	4b68      	ldr	r3, [pc, #416]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	08db      	lsrs	r3, r3, #3
 8008780:	f003 0303 	and.w	r3, r3, #3
 8008784:	4a66      	ldr	r2, [pc, #408]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008786:	fa22 f303 	lsr.w	r3, r2, r3
 800878a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800878c:	e01e      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800878e:	4b63      	ldr	r3, [pc, #396]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800879a:	d106      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800879c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087a2:	d102      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087a4:	4b5f      	ldr	r3, [pc, #380]	@ (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80087a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087a8:	e010      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087aa:	4b5c      	ldr	r3, [pc, #368]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087b6:	d106      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80087b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087be:	d102      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087c0:	4b59      	ldr	r3, [pc, #356]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087c4:	e002      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087ca:	e2da      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80087cc:	e2d9      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087ce:	4b57      	ldr	r3, [pc, #348]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80087d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d2:	e2d6      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d8:	e2d3      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80087da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087de:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80087e2:	430b      	orrs	r3, r1
 80087e4:	f040 80a7 	bne.w	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80087e8:	4b4c      	ldr	r3, [pc, #304]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80087f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087f8:	d055      	beq.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80087fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008800:	f200 8096 	bhi.w	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008806:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800880a:	f000 8084 	beq.w	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800880e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008810:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008814:	f200 808c 	bhi.w	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800881e:	d030      	beq.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008826:	f200 8083 	bhi.w	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800882a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008836:	d012      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008838:	e07a      	b.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800883a:	4b38      	ldr	r3, [pc, #224]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008846:	d107      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fd63 	bl	8009318 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008856:	e294      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800885c:	e291      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800885e:	4b2f      	ldr	r3, [pc, #188]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800886a:	d107      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800886c:	f107 0318 	add.w	r3, r7, #24
 8008870:	4618      	mov	r0, r3
 8008872:	f000 faa9 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800887a:	e282      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008880:	e27f      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008882:	4b26      	ldr	r3, [pc, #152]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800888a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800888e:	d107      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008890:	f107 030c 	add.w	r3, r7, #12
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fbeb 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800889e:	e270      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088a4:	e26d      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088a6:	4b1d      	ldr	r3, [pc, #116]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088b0:	4b1a      	ldr	r3, [pc, #104]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	d10c      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80088bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088c2:	4b16      	ldr	r3, [pc, #88]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	08db      	lsrs	r3, r3, #3
 80088c8:	f003 0303 	and.w	r3, r3, #3
 80088cc:	4a14      	ldr	r2, [pc, #80]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80088ce:	fa22 f303 	lsr.w	r3, r2, r3
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d4:	e01e      	b.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088d6:	4b11      	ldr	r3, [pc, #68]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e2:	d106      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80088e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ea:	d102      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80088ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088f0:	e010      	b.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088f2:	4b0a      	ldr	r3, [pc, #40]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088fe:	d106      	bne.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008906:	d102      	bne.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008908:	4b07      	ldr	r3, [pc, #28]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800890a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800890c:	e002      	b.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008912:	e236      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008914:	e235      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008916:	4b05      	ldr	r3, [pc, #20]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891a:	e232      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800891c:	58024400 	.word	0x58024400
 8008920:	03d09000 	.word	0x03d09000
 8008924:	003d0900 	.word	0x003d0900
 8008928:	02dc6c00 	.word	0x02dc6c00
 800892c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008934:	e225      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800893a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800893e:	430b      	orrs	r3, r1
 8008940:	f040 8085 	bne.w	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008944:	4b9c      	ldr	r3, [pc, #624]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008948:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800894c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800894e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008954:	d06b      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008958:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800895c:	d874      	bhi.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800895e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008960:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008964:	d056      	beq.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008968:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800896c:	d86c      	bhi.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800896e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008970:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008974:	d03b      	beq.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008978:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800897c:	d864      	bhi.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800897e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008980:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008984:	d021      	beq.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800898c:	d85c      	bhi.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800898e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008990:	2b00      	cmp	r3, #0
 8008992:	d004      	beq.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800899a:	d004      	beq.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800899c:	e054      	b.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800899e:	f7fe fb5f 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 80089a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089a4:	e1ed      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089a6:	4b84      	ldr	r3, [pc, #528]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089b2:	d107      	bne.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089b4:	f107 0318 	add.w	r3, r7, #24
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 fa05 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089c2:	e1de      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c8:	e1db      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089ca:	4b7b      	ldr	r3, [pc, #492]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089d6:	d107      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089d8:	f107 030c 	add.w	r3, r7, #12
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fb47 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089e6:	e1cc      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ec:	e1c9      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089ee:	4b72      	ldr	r3, [pc, #456]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0304 	and.w	r3, r3, #4
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	d109      	bne.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089fa:	4b6f      	ldr	r3, [pc, #444]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	08db      	lsrs	r3, r3, #3
 8008a00:	f003 0303 	and.w	r3, r3, #3
 8008a04:	4a6d      	ldr	r2, [pc, #436]	@ (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008a06:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a0c:	e1b9      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a12:	e1b6      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a14:	4b68      	ldr	r3, [pc, #416]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a20:	d102      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008a22:	4b67      	ldr	r3, [pc, #412]	@ (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a26:	e1ac      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a2c:	e1a9      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a2e:	4b62      	ldr	r3, [pc, #392]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a3a:	d102      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008a3c:	4b61      	ldr	r3, [pc, #388]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a40:	e19f      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a46:	e19c      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a4c:	e199      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a52:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008a56:	430b      	orrs	r3, r1
 8008a58:	d173      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008a5a:	4b57      	ldr	r3, [pc, #348]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a62:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a6a:	d02f      	beq.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a72:	d863      	bhi.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d004      	beq.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a80:	d012      	beq.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008a82:	e05b      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a84:	4b4c      	ldr	r3, [pc, #304]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a90:	d107      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a92:	f107 0318 	add.w	r3, r7, #24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 f996 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa0:	e16f      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa6:	e16c      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aa8:	4b43      	ldr	r3, [pc, #268]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ab4:	d107      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ab6:	f107 030c 	add.w	r3, r7, #12
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fad8 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac4:	e15d      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aca:	e15a      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008acc:	4b3a      	ldr	r3, [pc, #232]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ad0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ad4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ad6:	4b38      	ldr	r3, [pc, #224]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0304 	and.w	r3, r3, #4
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d10c      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ae8:	4b33      	ldr	r3, [pc, #204]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	08db      	lsrs	r3, r3, #3
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	4a32      	ldr	r2, [pc, #200]	@ (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008af4:	fa22 f303 	lsr.w	r3, r2, r3
 8008af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008afa:	e01e      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008afc:	4b2e      	ldr	r3, [pc, #184]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b08:	d106      	bne.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b10:	d102      	bne.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b12:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b16:	e010      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b18:	4b27      	ldr	r3, [pc, #156]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b24:	d106      	bne.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b2c:	d102      	bne.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b2e:	4b25      	ldr	r3, [pc, #148]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b32:	e002      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b38:	e123      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b3a:	e122      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b40:	e11f      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b46:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008b4a:	430b      	orrs	r3, r1
 8008b4c:	d13c      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b56:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b64:	d012      	beq.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008b66:	e023      	b.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b68:	4b13      	ldr	r3, [pc, #76]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b74:	d107      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fbcc 	bl	8009318 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b84:	e0fd      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b8a:	e0fa      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b98:	d107      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b9a:	f107 0318 	add.w	r3, r7, #24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 f912 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba8:	e0eb      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bae:	e0e8      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bb4:	e0e5      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008bb6:	bf00      	nop
 8008bb8:	58024400 	.word	0x58024400
 8008bbc:	03d09000 	.word	0x03d09000
 8008bc0:	003d0900 	.word	0x003d0900
 8008bc4:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bcc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	f040 8085 	bne.w	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bda:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008bde:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008be6:	d06b      	beq.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bee:	d874      	bhi.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bf6:	d056      	beq.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bfe:	d86c      	bhi.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c06:	d03b      	beq.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c0e:	d864      	bhi.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c16:	d021      	beq.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c1e:	d85c      	bhi.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d004      	beq.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c2c:	d004      	beq.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008c2e:	e054      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008c30:	f000 f8b4 	bl	8008d9c <HAL_RCCEx_GetD3PCLK1Freq>
 8008c34:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c36:	e0a4      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c38:	4b54      	ldr	r3, [pc, #336]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c44:	d107      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c46:	f107 0318 	add.w	r3, r7, #24
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 f8bc 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c54:	e095      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c5a:	e092      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c68:	d107      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c6a:	f107 030c 	add.w	r3, r7, #12
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f9fe 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c78:	e083      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c7e:	e080      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c80:	4b42      	ldr	r3, [pc, #264]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0304 	and.w	r3, r3, #4
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d109      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	08db      	lsrs	r3, r3, #3
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	4a3e      	ldr	r2, [pc, #248]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008c98:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c9e:	e070      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca4:	e06d      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008ca6:	4b39      	ldr	r3, [pc, #228]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cb2:	d102      	bne.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008cb4:	4b37      	ldr	r3, [pc, #220]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb8:	e063      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cbe:	e060      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cc0:	4b32      	ldr	r3, [pc, #200]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ccc:	d102      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008cce:	4b32      	ldr	r3, [pc, #200]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd2:	e056      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd8:	e053      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cde:	e050      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ce4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	d148      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008cec:	4b27      	ldr	r3, [pc, #156]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cf4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cfc:	d02a      	beq.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d04:	d838      	bhi.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d004      	beq.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d12:	d00d      	beq.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008d14:	e030      	b.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d16:	4b1d      	ldr	r3, [pc, #116]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d22:	d102      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008d24:	4b1c      	ldr	r3, [pc, #112]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d28:	e02b      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d2e:	e028      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d30:	4b16      	ldr	r3, [pc, #88]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d3c:	d107      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fae8 	bl	8009318 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d4c:	e019      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d52:	e016      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d54:	4b0d      	ldr	r3, [pc, #52]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d60:	d107      	bne.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d62:	f107 0318 	add.w	r3, r7, #24
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 f82e 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d70:	e007      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d76:	e004      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d7c:	e001      	b.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3740      	adds	r7, #64	@ 0x40
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	03d09000 	.word	0x03d09000
 8008d94:	003d0900 	.word	0x003d0900
 8008d98:	02dc6c00 	.word	0x02dc6c00

08008d9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008da0:	f7fe f92e 	bl	8007000 <HAL_RCC_GetHCLKFreq>
 8008da4:	4602      	mov	r2, r0
 8008da6:	4b06      	ldr	r3, [pc, #24]	@ (8008dc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	091b      	lsrs	r3, r3, #4
 8008dac:	f003 0307 	and.w	r3, r3, #7
 8008db0:	4904      	ldr	r1, [pc, #16]	@ (8008dc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008db2:	5ccb      	ldrb	r3, [r1, r3]
 8008db4:	f003 031f 	and.w	r3, r3, #31
 8008db8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	58024400 	.word	0x58024400
 8008dc4:	0801439c 	.word	0x0801439c

08008dc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b089      	sub	sp, #36	@ 0x24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dd0:	4ba1      	ldr	r3, [pc, #644]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd4:	f003 0303 	and.w	r3, r3, #3
 8008dd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008dda:	4b9f      	ldr	r3, [pc, #636]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dde:	0b1b      	lsrs	r3, r3, #12
 8008de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008de4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008de6:	4b9c      	ldr	r3, [pc, #624]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dea:	091b      	lsrs	r3, r3, #4
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008df2:	4b99      	ldr	r3, [pc, #612]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df6:	08db      	lsrs	r3, r3, #3
 8008df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	fb02 f303 	mul.w	r3, r2, r3
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 8111 	beq.w	8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	f000 8083 	beq.w	8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	f200 80a1 	bhi.w	8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d056      	beq.n	8008ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e32:	e099      	b.n	8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e34:	4b88      	ldr	r3, [pc, #544]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d02d      	beq.n	8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e40:	4b85      	ldr	r3, [pc, #532]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	08db      	lsrs	r3, r3, #3
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	4a84      	ldr	r2, [pc, #528]	@ (800905c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	ee07 3a90 	vmov	s15, r3
 8008e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	ee07 3a90 	vmov	s15, r3
 8008e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e9a:	e087      	b.n	8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eae:	4b6a      	ldr	r3, [pc, #424]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ede:	e065      	b.n	8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef2:	4b59      	ldr	r3, [pc, #356]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f22:	e043      	b.n	8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800906c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f36:	4b48      	ldr	r3, [pc, #288]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f66:	e021      	b.n	8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7a:	4b37      	ldr	r3, [pc, #220]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008faa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008fac:	4b2a      	ldr	r3, [pc, #168]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb0:	0a5b      	lsrs	r3, r3, #9
 8008fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd2:	ee17 2a90 	vmov	r2, s15
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008fda:	4b1f      	ldr	r3, [pc, #124]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fde:	0c1b      	lsrs	r3, r3, #16
 8008fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fe4:	ee07 3a90 	vmov	s15, r3
 8008fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009000:	ee17 2a90 	vmov	r2, s15
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009008:	4b13      	ldr	r3, [pc, #76]	@ (8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800900a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900c:	0e1b      	lsrs	r3, r3, #24
 800900e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800901e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009022:	edd7 6a07 	vldr	s13, [r7, #28]
 8009026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800902a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800902e:	ee17 2a90 	vmov	r2, s15
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009036:	e008      	b.n	800904a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	609a      	str	r2, [r3, #8]
}
 800904a:	bf00      	nop
 800904c:	3724      	adds	r7, #36	@ 0x24
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	58024400 	.word	0x58024400
 800905c:	03d09000 	.word	0x03d09000
 8009060:	46000000 	.word	0x46000000
 8009064:	4c742400 	.word	0x4c742400
 8009068:	4a742400 	.word	0x4a742400
 800906c:	4c371b00 	.word	0x4c371b00

08009070 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009070:	b480      	push	{r7}
 8009072:	b089      	sub	sp, #36	@ 0x24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009078:	4ba1      	ldr	r3, [pc, #644]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800907a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907c:	f003 0303 	and.w	r3, r3, #3
 8009080:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009082:	4b9f      	ldr	r3, [pc, #636]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009086:	0d1b      	lsrs	r3, r3, #20
 8009088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800908c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800908e:	4b9c      	ldr	r3, [pc, #624]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009092:	0a1b      	lsrs	r3, r3, #8
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800909a:	4b99      	ldr	r3, [pc, #612]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800909c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800909e:	08db      	lsrs	r3, r3, #3
 80090a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	fb02 f303 	mul.w	r3, r2, r3
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 8111 	beq.w	80092e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	f000 8083 	beq.w	80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	f200 80a1 	bhi.w	8009210 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d056      	beq.n	8009188 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80090da:	e099      	b.n	8009210 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090dc:	4b88      	ldr	r3, [pc, #544]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0320 	and.w	r3, r3, #32
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d02d      	beq.n	8009144 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090e8:	4b85      	ldr	r3, [pc, #532]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	08db      	lsrs	r3, r3, #3
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	4a84      	ldr	r2, [pc, #528]	@ (8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80090f4:	fa22 f303 	lsr.w	r3, r2, r3
 80090f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	ee07 3a90 	vmov	s15, r3
 8009100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	ee07 3a90 	vmov	s15, r3
 800910a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009112:	4b7b      	ldr	r3, [pc, #492]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009122:	ed97 6a03 	vldr	s12, [r7, #12]
 8009126:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800912a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800913a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009142:	e087      	b.n	8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800930c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009156:	4b6a      	ldr	r3, [pc, #424]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800915a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009166:	ed97 6a03 	vldr	s12, [r7, #12]
 800916a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800916e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800917a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009186:	e065      	b.n	8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009192:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800919a:	4b59      	ldr	r3, [pc, #356]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800919c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ca:	e043      	b.n	8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	ee07 3a90 	vmov	s15, r3
 80091d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80091da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091de:	4b48      	ldr	r3, [pc, #288]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80091f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800920a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800920e:	e021      	b.n	8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800921e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009222:	4b37      	ldr	r3, [pc, #220]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009232:	ed97 6a03 	vldr	s12, [r7, #12]
 8009236:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800923a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800924a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009252:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009254:	4b2a      	ldr	r3, [pc, #168]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009258:	0a5b      	lsrs	r3, r3, #9
 800925a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800926a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800926e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800927a:	ee17 2a90 	vmov	r2, s15
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009282:	4b1f      	ldr	r3, [pc, #124]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009286:	0c1b      	lsrs	r3, r3, #16
 8009288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800928c:	ee07 3a90 	vmov	s15, r3
 8009290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009294:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009298:	ee37 7a87 	vadd.f32	s14, s15, s14
 800929c:	edd7 6a07 	vldr	s13, [r7, #28]
 80092a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a8:	ee17 2a90 	vmov	r2, s15
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80092b0:	4b13      	ldr	r3, [pc, #76]	@ (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b4:	0e1b      	lsrs	r3, r3, #24
 80092b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ba:	ee07 3a90 	vmov	s15, r3
 80092be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d6:	ee17 2a90 	vmov	r2, s15
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80092de:	e008      	b.n	80092f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	609a      	str	r2, [r3, #8]
}
 80092f2:	bf00      	nop
 80092f4:	3724      	adds	r7, #36	@ 0x24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	58024400 	.word	0x58024400
 8009304:	03d09000 	.word	0x03d09000
 8009308:	46000000 	.word	0x46000000
 800930c:	4c742400 	.word	0x4c742400
 8009310:	4a742400 	.word	0x4a742400
 8009314:	4c371b00 	.word	0x4c371b00

08009318 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009318:	b480      	push	{r7}
 800931a:	b089      	sub	sp, #36	@ 0x24
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009320:	4ba0      	ldr	r3, [pc, #640]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009324:	f003 0303 	and.w	r3, r3, #3
 8009328:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800932a:	4b9e      	ldr	r3, [pc, #632]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800932c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932e:	091b      	lsrs	r3, r3, #4
 8009330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009334:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009336:	4b9b      	ldr	r3, [pc, #620]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009340:	4b98      	ldr	r3, [pc, #608]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009344:	08db      	lsrs	r3, r3, #3
 8009346:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	fb02 f303 	mul.w	r3, r2, r3
 8009350:	ee07 3a90 	vmov	s15, r3
 8009354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009358:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 8111 	beq.w	8009586 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	2b02      	cmp	r3, #2
 8009368:	f000 8083 	beq.w	8009472 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	2b02      	cmp	r3, #2
 8009370:	f200 80a1 	bhi.w	80094b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d056      	beq.n	800942e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009380:	e099      	b.n	80094b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009382:	4b88      	ldr	r3, [pc, #544]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	d02d      	beq.n	80093ea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800938e:	4b85      	ldr	r3, [pc, #532]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	08db      	lsrs	r3, r3, #3
 8009394:	f003 0303 	and.w	r3, r3, #3
 8009398:	4a83      	ldr	r2, [pc, #524]	@ (80095a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800939a:	fa22 f303 	lsr.w	r3, r2, r3
 800939e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	ee07 3a90 	vmov	s15, r3
 80093b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b8:	4b7a      	ldr	r3, [pc, #488]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c0:	ee07 3a90 	vmov	s15, r3
 80093c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80093cc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80095ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093e8:	e087      	b.n	80094fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	ee07 3a90 	vmov	s15, r3
 80093f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80095b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fc:	4b69      	ldr	r3, [pc, #420]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009410:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80095ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009428:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800942c:	e065      	b.n	80094fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	ee07 3a90 	vmov	s15, r3
 8009434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009438:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80095b4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800943c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009440:	4b58      	ldr	r3, [pc, #352]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009448:	ee07 3a90 	vmov	s15, r3
 800944c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009450:	ed97 6a03 	vldr	s12, [r7, #12]
 8009454:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80095ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009470:	e043      	b.n	80094fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	ee07 3a90 	vmov	s15, r3
 8009478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80095b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009484:	4b47      	ldr	r3, [pc, #284]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009494:	ed97 6a03 	vldr	s12, [r7, #12]
 8009498:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80095ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800949c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094b4:	e021      	b.n	80094fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	ee07 3a90 	vmov	s15, r3
 80094bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80095b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80094c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c8:	4b36      	ldr	r3, [pc, #216]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d0:	ee07 3a90 	vmov	s15, r3
 80094d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80094dc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80095ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80094fa:	4b2a      	ldr	r3, [pc, #168]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094fe:	0a5b      	lsrs	r3, r3, #9
 8009500:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009504:	ee07 3a90 	vmov	s15, r3
 8009508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800950c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009510:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009514:	edd7 6a07 	vldr	s13, [r7, #28]
 8009518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800951c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009520:	ee17 2a90 	vmov	r2, s15
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009528:	4b1e      	ldr	r3, [pc, #120]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800952a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800952c:	0c1b      	lsrs	r3, r3, #16
 800952e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800953e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009542:	edd7 6a07 	vldr	s13, [r7, #28]
 8009546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800954a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800954e:	ee17 2a90 	vmov	r2, s15
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009556:	4b13      	ldr	r3, [pc, #76]	@ (80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800955a:	0e1b      	lsrs	r3, r3, #24
 800955c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009560:	ee07 3a90 	vmov	s15, r3
 8009564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009568:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800956c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009570:	edd7 6a07 	vldr	s13, [r7, #28]
 8009574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800957c:	ee17 2a90 	vmov	r2, s15
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009584:	e008      	b.n	8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	609a      	str	r2, [r3, #8]
}
 8009598:	bf00      	nop
 800959a:	3724      	adds	r7, #36	@ 0x24
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	58024400 	.word	0x58024400
 80095a8:	03d09000 	.word	0x03d09000
 80095ac:	46000000 	.word	0x46000000
 80095b0:	4c742400 	.word	0x4c742400
 80095b4:	4a742400 	.word	0x4a742400
 80095b8:	4c371b00 	.word	0x4c371b00

080095bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095ca:	4b53      	ldr	r3, [pc, #332]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80095cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ce:	f003 0303 	and.w	r3, r3, #3
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d101      	bne.n	80095da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e099      	b.n	800970e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80095da:	4b4f      	ldr	r3, [pc, #316]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a4e      	ldr	r2, [pc, #312]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80095e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095e6:	f7fa f829 	bl	800363c <HAL_GetTick>
 80095ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095ec:	e008      	b.n	8009600 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80095ee:	f7fa f825 	bl	800363c <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d901      	bls.n	8009600 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e086      	b.n	800970e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009600:	4b45      	ldr	r3, [pc, #276]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1f0      	bne.n	80095ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800960c:	4b42      	ldr	r3, [pc, #264]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 800960e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009610:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	031b      	lsls	r3, r3, #12
 800961a:	493f      	ldr	r1, [pc, #252]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 800961c:	4313      	orrs	r3, r2
 800961e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	3b01      	subs	r3, #1
 8009626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	3b01      	subs	r3, #1
 8009630:	025b      	lsls	r3, r3, #9
 8009632:	b29b      	uxth	r3, r3
 8009634:	431a      	orrs	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	3b01      	subs	r3, #1
 800963c:	041b      	lsls	r3, r3, #16
 800963e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009642:	431a      	orrs	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	3b01      	subs	r3, #1
 800964a:	061b      	lsls	r3, r3, #24
 800964c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009650:	4931      	ldr	r1, [pc, #196]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009652:	4313      	orrs	r3, r2
 8009654:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009656:	4b30      	ldr	r3, [pc, #192]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	492d      	ldr	r1, [pc, #180]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009664:	4313      	orrs	r3, r2
 8009666:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009668:	4b2b      	ldr	r3, [pc, #172]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	f023 0220 	bic.w	r2, r3, #32
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	4928      	ldr	r1, [pc, #160]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009676:	4313      	orrs	r3, r2
 8009678:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800967a:	4b27      	ldr	r3, [pc, #156]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 800967c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967e:	4a26      	ldr	r2, [pc, #152]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009680:	f023 0310 	bic.w	r3, r3, #16
 8009684:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009686:	4b24      	ldr	r3, [pc, #144]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800968a:	4b24      	ldr	r3, [pc, #144]	@ (800971c <RCCEx_PLL2_Config+0x160>)
 800968c:	4013      	ands	r3, r2
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	69d2      	ldr	r2, [r2, #28]
 8009692:	00d2      	lsls	r2, r2, #3
 8009694:	4920      	ldr	r1, [pc, #128]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009696:	4313      	orrs	r3, r2
 8009698:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800969a:	4b1f      	ldr	r3, [pc, #124]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 800969c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969e:	4a1e      	ldr	r2, [pc, #120]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096a0:	f043 0310 	orr.w	r3, r3, #16
 80096a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d106      	bne.n	80096ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b0:	4a19      	ldr	r2, [pc, #100]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096b8:	e00f      	b.n	80096da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d106      	bne.n	80096ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096c0:	4b15      	ldr	r3, [pc, #84]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c4:	4a14      	ldr	r2, [pc, #80]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096cc:	e005      	b.n	80096da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096ce:	4b12      	ldr	r3, [pc, #72]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d2:	4a11      	ldr	r2, [pc, #68]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80096da:	4b0f      	ldr	r3, [pc, #60]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a0e      	ldr	r2, [pc, #56]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80096e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096e6:	f7f9 ffa9 	bl	800363c <HAL_GetTick>
 80096ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096ec:	e008      	b.n	8009700 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096ee:	f7f9 ffa5 	bl	800363c <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d901      	bls.n	8009700 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e006      	b.n	800970e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009700:	4b05      	ldr	r3, [pc, #20]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0f0      	beq.n	80096ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	58024400 	.word	0x58024400
 800971c:	ffff0007 	.word	0xffff0007

08009720 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800972e:	4b53      	ldr	r3, [pc, #332]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b03      	cmp	r3, #3
 8009738:	d101      	bne.n	800973e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e099      	b.n	8009872 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800973e:	4b4f      	ldr	r3, [pc, #316]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a4e      	ldr	r2, [pc, #312]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800974a:	f7f9 ff77 	bl	800363c <HAL_GetTick>
 800974e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009750:	e008      	b.n	8009764 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009752:	f7f9 ff73 	bl	800363c <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	2b02      	cmp	r3, #2
 800975e:	d901      	bls.n	8009764 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e086      	b.n	8009872 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009764:	4b45      	ldr	r3, [pc, #276]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1f0      	bne.n	8009752 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009770:	4b42      	ldr	r3, [pc, #264]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009774:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	051b      	lsls	r3, r3, #20
 800977e:	493f      	ldr	r1, [pc, #252]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009780:	4313      	orrs	r3, r2
 8009782:	628b      	str	r3, [r1, #40]	@ 0x28
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	3b01      	subs	r3, #1
 800978a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	3b01      	subs	r3, #1
 8009794:	025b      	lsls	r3, r3, #9
 8009796:	b29b      	uxth	r3, r3
 8009798:	431a      	orrs	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	3b01      	subs	r3, #1
 80097a0:	041b      	lsls	r3, r3, #16
 80097a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097a6:	431a      	orrs	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	061b      	lsls	r3, r3, #24
 80097b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097b4:	4931      	ldr	r1, [pc, #196]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097ba:	4b30      	ldr	r3, [pc, #192]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	492d      	ldr	r1, [pc, #180]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097cc:	4b2b      	ldr	r3, [pc, #172]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	4928      	ldr	r1, [pc, #160]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80097de:	4b27      	ldr	r3, [pc, #156]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e2:	4a26      	ldr	r2, [pc, #152]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80097ea:	4b24      	ldr	r3, [pc, #144]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ee:	4b24      	ldr	r3, [pc, #144]	@ (8009880 <RCCEx_PLL3_Config+0x160>)
 80097f0:	4013      	ands	r3, r2
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	69d2      	ldr	r2, [r2, #28]
 80097f6:	00d2      	lsls	r2, r2, #3
 80097f8:	4920      	ldr	r1, [pc, #128]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80097fe:	4b1f      	ldr	r3, [pc, #124]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009802:	4a1e      	ldr	r2, [pc, #120]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009810:	4b1a      	ldr	r3, [pc, #104]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009814:	4a19      	ldr	r2, [pc, #100]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009816:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800981a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800981c:	e00f      	b.n	800983e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d106      	bne.n	8009832 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009824:	4b15      	ldr	r3, [pc, #84]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009828:	4a14      	ldr	r2, [pc, #80]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 800982a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800982e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009830:	e005      	b.n	800983e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009832:	4b12      	ldr	r3, [pc, #72]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009836:	4a11      	ldr	r2, [pc, #68]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009838:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800983c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800983e:	4b0f      	ldr	r3, [pc, #60]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a0e      	ldr	r2, [pc, #56]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800984a:	f7f9 fef7 	bl	800363c <HAL_GetTick>
 800984e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009850:	e008      	b.n	8009864 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009852:	f7f9 fef3 	bl	800363c <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	2b02      	cmp	r3, #2
 800985e:	d901      	bls.n	8009864 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e006      	b.n	8009872 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009864:	4b05      	ldr	r3, [pc, #20]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0f0      	beq.n	8009852 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	58024400 	.word	0x58024400
 8009880:	ffff0007 	.word	0xffff0007

08009884 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08a      	sub	sp, #40	@ 0x28
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e075      	b.n	8009982 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d105      	bne.n	80098ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7f8 fde1 	bl	8002470 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2204      	movs	r2, #4
 80098b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f868 	bl	800998c <HAL_SD_InitCard>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e05d      	b.n	8009982 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80098c6:	f107 0308 	add.w	r3, r7, #8
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fdb5 	bl	800a43c <HAL_SD_GetCardStatus>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d001      	beq.n	80098dc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e052      	b.n	8009982 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80098dc:	7e3b      	ldrb	r3, [r7, #24]
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80098e2:	7e7b      	ldrb	r3, [r7, #25]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d10a      	bne.n	8009906 <HAL_SD_Init+0x82>
 80098f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d102      	bne.n	80098fc <HAL_SD_Init+0x78>
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d004      	beq.n	8009906 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009902:	659a      	str	r2, [r3, #88]	@ 0x58
 8009904:	e00b      	b.n	800991e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990a:	2b01      	cmp	r3, #1
 800990c:	d104      	bne.n	8009918 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009914:	659a      	str	r2, [r3, #88]	@ 0x58
 8009916:	e002      	b.n	800991e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fe73 	bl	800a610 <HAL_SD_ConfigWideBusOperation>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e026      	b.n	8009982 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009934:	f7f9 fe82 	bl	800363c <HAL_GetTick>
 8009938:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800993a:	e011      	b.n	8009960 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800993c:	f7f9 fe7e 	bl	800363c <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994a:	d109      	bne.n	8009960 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009952:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e010      	b.n	8009982 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 ff67 	bl	800a834 <HAL_SD_GetCardState>
 8009966:	4603      	mov	r3, r0
 8009968:	2b04      	cmp	r3, #4
 800996a:	d1e7      	bne.n	800993c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3728      	adds	r7, #40	@ 0x28
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b08d      	sub	sp, #52	@ 0x34
 8009990:	af02      	add	r7, sp, #8
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009998:	2300      	movs	r3, #0
 800999a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80099a4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80099a8:	f04f 0100 	mov.w	r1, #0
 80099ac:	f7fe fd24 	bl	80083f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80099b0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d109      	bne.n	80099cc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80099c6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e070      	b.n	8009aae <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80099cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ce:	0a1b      	lsrs	r3, r3, #8
 80099d0:	4a39      	ldr	r2, [pc, #228]	@ (8009ab8 <HAL_SD_InitCard+0x12c>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	091b      	lsrs	r3, r3, #4
 80099d8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681c      	ldr	r4, [r3, #0]
 80099de:	466a      	mov	r2, sp
 80099e0:	f107 0318 	add.w	r3, r7, #24
 80099e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80099ec:	f107 030c 	add.w	r3, r7, #12
 80099f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099f2:	4620      	mov	r0, r4
 80099f4:	f005 fa4e 	bl	800ee94 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f005 fa91 	bl	800ef24 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a12:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d007      	beq.n	8009a2a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009a1a:	4a28      	ldr	r2, [pc, #160]	@ (8009abc <HAL_SD_InitCard+0x130>)
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a22:	3301      	adds	r3, #1
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7f9 fe15 	bl	8003654 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fff0 	bl	800aa10 <SD_PowerON>
 8009a30:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e02e      	b.n	8009aae <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 ff0f 	bl	800a874 <SD_InitCard>
 8009a56:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00b      	beq.n	8009a76 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e01b      	b.n	8009aae <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f005 fae6 	bl	800f050 <SDMMC_CmdBlockLength>
 8009a84:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00f      	beq.n	8009aac <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a0b      	ldr	r2, [pc, #44]	@ (8009ac0 <HAL_SD_InitCard+0x134>)
 8009a92:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e000      	b.n	8009aae <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	372c      	adds	r7, #44	@ 0x2c
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd90      	pop	{r4, r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	014f8b59 	.word	0x014f8b59
 8009abc:	00012110 	.word	0x00012110
 8009ac0:	1fe00fff 	.word	0x1fe00fff

08009ac4 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b092      	sub	sp, #72	@ 0x48
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
 8009ad0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ad2:	f7f9 fdb3 	bl	800363c <HAL_GetTick>
 8009ad6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d107      	bne.n	8009af6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e167      	b.n	8009dc6 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	f040 815a 	bne.w	8009db8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	441a      	add	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d907      	bls.n	8009b28 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b1c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e14e      	b.n	8009dc6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2203      	movs	r2, #3
 8009b2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2200      	movs	r2, #0
 8009b36:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d002      	beq.n	8009b46 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b42:	025b      	lsls	r3, r3, #9
 8009b44:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	025b      	lsls	r3, r3, #9
 8009b50:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009b52:	2390      	movs	r3, #144	@ 0x90
 8009b54:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009b56:	2302      	movs	r3, #2
 8009b58:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f107 0214 	add.w	r2, r7, #20
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f005 fa43 	bl	800eff8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b80:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d90a      	bls.n	8009b9e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b94:	4618      	mov	r0, r3
 8009b96:	f005 faa1 	bl	800f0dc <SDMMC_CmdReadMultiBlock>
 8009b9a:	6478      	str	r0, [r7, #68]	@ 0x44
 8009b9c:	e009      	b.n	8009bb2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009baa:	4618      	mov	r0, r3
 8009bac:	f005 fa73 	bl	800f096 <SDMMC_CmdReadSingleBlock>
 8009bb0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d012      	beq.n	8009bde <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a84      	ldr	r2, [pc, #528]	@ (8009dd0 <HAL_SD_ReadBlocks+0x30c>)
 8009bbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e0f3      	b.n	8009dc6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009be2:	e058      	b.n	8009c96 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d033      	beq.n	8009c5a <HAL_SD_ReadBlocks+0x196>
 8009bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bf4:	2b1f      	cmp	r3, #31
 8009bf6:	d930      	bls.n	8009c5a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bfc:	e027      	b.n	8009c4e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f005 f970 	bl	800eee8 <SDMMC_ReadFIFO>
 8009c08:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c14:	3301      	adds	r3, #1
 8009c16:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1a:	0a1b      	lsrs	r3, r3, #8
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c20:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c24:	3301      	adds	r3, #1
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2a:	0c1b      	lsrs	r3, r3, #16
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c34:	3301      	adds	r3, #1
 8009c36:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3a:	0e1b      	lsrs	r3, r3, #24
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c44:	3301      	adds	r3, #1
 8009c46:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8009c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c50:	2b07      	cmp	r3, #7
 8009c52:	d9d4      	bls.n	8009bfe <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c56:	3b20      	subs	r3, #32
 8009c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009c5a:	f7f9 fcef 	bl	800363c <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d902      	bls.n	8009c70 <HAL_SD_ReadBlocks+0x1ac>
 8009c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d112      	bne.n	8009c96 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a56      	ldr	r2, [pc, #344]	@ (8009dd0 <HAL_SD_ReadBlocks+0x30c>)
 8009c76:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e097      	b.n	8009dc6 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c9c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d09f      	beq.n	8009be4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cb2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d022      	beq.n	8009d08 <HAL_SD_ReadBlocks+0x244>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d91f      	bls.n	8009d08 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d01b      	beq.n	8009d08 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f005 fa6b 	bl	800f1b0 <SDMMC_CmdStopTransfer>
 8009cda:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d012      	beq.n	8009d08 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8009dd0 <HAL_SD_ReadBlocks+0x30c>)
 8009ce8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e05e      	b.n	8009dc6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d0e:	f003 0308 	and.w	r3, r3, #8
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d012      	beq.n	8009d3c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8009dd0 <HAL_SD_ReadBlocks+0x30c>)
 8009d1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d22:	f043 0208 	orr.w	r2, r3, #8
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e044      	b.n	8009dc6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d42:	f003 0302 	and.w	r3, r3, #2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d012      	beq.n	8009d70 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a20      	ldr	r2, [pc, #128]	@ (8009dd0 <HAL_SD_ReadBlocks+0x30c>)
 8009d50:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d56:	f043 0202 	orr.w	r2, r3, #2
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e02a      	b.n	8009dc6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d012      	beq.n	8009da4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a13      	ldr	r2, [pc, #76]	@ (8009dd0 <HAL_SD_ReadBlocks+0x30c>)
 8009d84:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d8a:	f043 0220 	orr.w	r2, r3, #32
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e010      	b.n	8009dc6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a0a      	ldr	r2, [pc, #40]	@ (8009dd4 <HAL_SD_ReadBlocks+0x310>)
 8009daa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	e006      	b.n	8009dc6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dbc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
  }
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3748      	adds	r7, #72	@ 0x48
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	1fe00fff 	.word	0x1fe00fff
 8009dd4:	18000f3a 	.word	0x18000f3a

08009dd8 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b092      	sub	sp, #72	@ 0x48
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
 8009de4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009de6:	f7f9 fc29 	bl	800363c <HAL_GetTick>
 8009dea:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d107      	bne.n	8009e0a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dfe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e16b      	b.n	800a0e2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	f040 815e 	bne.w	800a0d4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	441a      	add	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d907      	bls.n	8009e3c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e30:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e152      	b.n	800a0e2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2203      	movs	r2, #3
 8009e40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d002      	beq.n	8009e5a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e56:	025b      	lsls	r3, r3, #9
 8009e58:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e5e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	025b      	lsls	r3, r3, #9
 8009e64:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009e66:	2390      	movs	r3, #144	@ 0x90
 8009e68:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f107 0218 	add.w	r2, r7, #24
 8009e7e:	4611      	mov	r1, r2
 8009e80:	4618      	mov	r0, r3
 8009e82:	f005 f8b9 	bl	800eff8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e94:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d90a      	bls.n	8009eb2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f005 f95d 	bl	800f168 <SDMMC_CmdWriteMultiBlock>
 8009eae:	6478      	str	r0, [r7, #68]	@ 0x44
 8009eb0:	e009      	b.n	8009ec6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2210      	movs	r2, #16
 8009eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f005 f92f 	bl	800f122 <SDMMC_CmdWriteSingleBlock>
 8009ec4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d012      	beq.n	8009ef2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a86      	ldr	r2, [pc, #536]	@ (800a0ec <HAL_SD_WriteBlocks+0x314>)
 8009ed2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eda:	431a      	orrs	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e0f7      	b.n	800a0e2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009ef6:	e05c      	b.n	8009fb2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d037      	beq.n	8009f76 <HAL_SD_WriteBlocks+0x19e>
 8009f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f08:	2b1f      	cmp	r3, #31
 8009f0a:	d934      	bls.n	8009f76 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f10:	e02b      	b.n	8009f6a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8009f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	021a      	lsls	r2, r3, #8
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	041a      	lsls	r2, r3, #16
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3e:	3301      	adds	r3, #1
 8009f40:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	061a      	lsls	r2, r3, #24
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f50:	3301      	adds	r3, #1
 8009f52:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f107 0214 	add.w	r2, r7, #20
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f004 ffcf 	bl	800ef02 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f66:	3301      	adds	r3, #1
 8009f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f6c:	2b07      	cmp	r3, #7
 8009f6e:	d9d0      	bls.n	8009f12 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f72:	3b20      	subs	r3, #32
 8009f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009f76:	f7f9 fb61 	bl	800363c <HAL_GetTick>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d902      	bls.n	8009f8c <HAL_SD_WriteBlocks+0x1b4>
 8009f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d112      	bne.n	8009fb2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a56      	ldr	r2, [pc, #344]	@ (800a0ec <HAL_SD_WriteBlocks+0x314>)
 8009f92:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e097      	b.n	800a0e2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb8:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d09b      	beq.n	8009ef8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fce:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d022      	beq.n	800a024 <HAL_SD_WriteBlocks+0x24c>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d91f      	bls.n	800a024 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d01b      	beq.n	800a024 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f005 f8dd 	bl	800f1b0 <SDMMC_CmdStopTransfer>
 8009ff6:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d012      	beq.n	800a024 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a3a      	ldr	r2, [pc, #232]	@ (800a0ec <HAL_SD_WriteBlocks+0x314>)
 800a004:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a00a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a00c:	431a      	orrs	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e05e      	b.n	800a0e2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a02a:	f003 0308 	and.w	r3, r3, #8
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d012      	beq.n	800a058 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a2d      	ldr	r2, [pc, #180]	@ (800a0ec <HAL_SD_WriteBlocks+0x314>)
 800a038:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03e:	f043 0208 	orr.w	r2, r3, #8
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e044      	b.n	800a0e2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a05e:	f003 0302 	and.w	r3, r3, #2
 800a062:	2b00      	cmp	r3, #0
 800a064:	d012      	beq.n	800a08c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a20      	ldr	r2, [pc, #128]	@ (800a0ec <HAL_SD_WriteBlocks+0x314>)
 800a06c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a072:	f043 0202 	orr.w	r2, r3, #2
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e02a      	b.n	800a0e2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a092:	f003 0310 	and.w	r3, r3, #16
 800a096:	2b00      	cmp	r3, #0
 800a098:	d012      	beq.n	800a0c0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a13      	ldr	r2, [pc, #76]	@ (800a0ec <HAL_SD_WriteBlocks+0x314>)
 800a0a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0a6:	f043 0210 	orr.w	r2, r3, #16
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e010      	b.n	800a0e2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a0a      	ldr	r2, [pc, #40]	@ (800a0f0 <HAL_SD_WriteBlocks+0x318>)
 800a0c6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	e006      	b.n	800a0e2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
  }
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3748      	adds	r7, #72	@ 0x48
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	1fe00fff 	.word	0x1fe00fff
 800a0f0:	18000f3a 	.word	0x18000f3a

0800a0f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a102:	0f9b      	lsrs	r3, r3, #30
 800a104:	b2da      	uxtb	r2, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a10e:	0e9b      	lsrs	r3, r3, #26
 800a110:	b2db      	uxtb	r3, r3
 800a112:	f003 030f 	and.w	r3, r3, #15
 800a116:	b2da      	uxtb	r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a120:	0e1b      	lsrs	r3, r3, #24
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0303 	and.w	r3, r3, #3
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a132:	0c1b      	lsrs	r3, r3, #16
 800a134:	b2da      	uxtb	r2, r3
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a13e:	0a1b      	lsrs	r3, r3, #8
 800a140:	b2da      	uxtb	r2, r3
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a154:	0d1b      	lsrs	r3, r3, #20
 800a156:	b29a      	uxth	r2, r3
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a160:	0c1b      	lsrs	r3, r3, #16
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f003 030f 	and.w	r3, r3, #15
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a172:	0bdb      	lsrs	r3, r3, #15
 800a174:	b2db      	uxtb	r3, r3
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a184:	0b9b      	lsrs	r3, r3, #14
 800a186:	b2db      	uxtb	r3, r3
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a196:	0b5b      	lsrs	r3, r3, #13
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1a8:	0b1b      	lsrs	r3, r3, #12
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d163      	bne.n	800a28c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1c8:	009a      	lsls	r2, r3, #2
 800a1ca:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a1d4:	0f92      	lsrs	r2, r2, #30
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1e0:	0edb      	lsrs	r3, r3, #27
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1f2:	0e1b      	lsrs	r3, r3, #24
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a204:	0d5b      	lsrs	r3, r3, #21
 800a206:	b2db      	uxtb	r3, r3
 800a208:	f003 0307 	and.w	r3, r3, #7
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a216:	0c9b      	lsrs	r3, r3, #18
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	f003 0307 	and.w	r3, r3, #7
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a228:	0bdb      	lsrs	r3, r3, #15
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 0307 	and.w	r3, r3, #7
 800a230:	b2da      	uxtb	r2, r3
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	7e1b      	ldrb	r3, [r3, #24]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	3302      	adds	r3, #2
 800a24c:	2201      	movs	r2, #1
 800a24e:	fa02 f303 	lsl.w	r3, r2, r3
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a256:	fb03 f202 	mul.w	r2, r3, r2
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	7a1b      	ldrb	r3, [r3, #8]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	f003 030f 	and.w	r3, r3, #15
 800a268:	2201      	movs	r2, #1
 800a26a:	409a      	lsls	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a278:	0a52      	lsrs	r2, r2, #9
 800a27a:	fb03 f202 	mul.w	r2, r3, r2
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a288:	655a      	str	r2, [r3, #84]	@ 0x54
 800a28a:	e031      	b.n	800a2f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a290:	2b01      	cmp	r3, #1
 800a292:	d11d      	bne.n	800a2d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a298:	041b      	lsls	r3, r3, #16
 800a29a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a2:	0c1b      	lsrs	r3, r3, #16
 800a2a4:	431a      	orrs	r2, r3
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	029a      	lsls	r2, r3, #10
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	655a      	str	r2, [r3, #84]	@ 0x54
 800a2ce:	e00f      	b.n	800a2f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a58      	ldr	r2, [pc, #352]	@ (800a438 <HAL_SD_GetCardCSD+0x344>)
 800a2d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e09d      	b.n	800a42c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2f4:	0b9b      	lsrs	r3, r3, #14
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a306:	09db      	lsrs	r3, r3, #7
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a328:	0fdb      	lsrs	r3, r3, #31
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a334:	0f5b      	lsrs	r3, r3, #29
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f003 0303 	and.w	r3, r3, #3
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a346:	0e9b      	lsrs	r3, r3, #26
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a358:	0d9b      	lsrs	r3, r3, #22
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f003 030f 	and.w	r3, r3, #15
 800a360:	b2da      	uxtb	r2, r3
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a36a:	0d5b      	lsrs	r3, r3, #21
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	b2da      	uxtb	r2, r3
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a386:	0c1b      	lsrs	r3, r3, #16
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a39a:	0bdb      	lsrs	r3, r3, #15
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3ae:	0b9b      	lsrs	r3, r3, #14
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3c2:	0b5b      	lsrs	r3, r3, #13
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3d6:	0b1b      	lsrs	r3, r3, #12
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3ea:	0a9b      	lsrs	r3, r3, #10
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	f003 0303 	and.w	r3, r3, #3
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3fe:	0a1b      	lsrs	r3, r3, #8
 800a400:	b2db      	uxtb	r3, r3
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	b2da      	uxtb	r2, r3
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a412:	085b      	lsrs	r3, r3, #1
 800a414:	b2db      	uxtb	r3, r3
 800a416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	1fe00fff 	.word	0x1fe00fff

0800a43c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b094      	sub	sp, #80	@ 0x50
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b03      	cmp	r3, #3
 800a456:	d101      	bne.n	800a45c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e0a7      	b.n	800a5ac <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a45c:	f107 0308 	add.w	r3, r7, #8
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fb62 	bl	800ab2c <SD_SendSDStatus>
 800a468:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a46a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d011      	beq.n	800a494 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a4f      	ldr	r2, [pc, #316]	@ (800a5b4 <HAL_SD_GetCardStatus+0x178>)
 800a476:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a47c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a47e:	431a      	orrs	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a492:	e070      	b.n	800a576 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	099b      	lsrs	r3, r3, #6
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	f003 0303 	and.w	r3, r3, #3
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	095b      	lsrs	r3, r3, #5
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	0a1b      	lsrs	r3, r3, #8
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	0e1b      	lsrs	r3, r3, #24
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	061a      	lsls	r2, r3, #24
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a4da:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	0a1b      	lsrs	r3, r3, #8
 800a4e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a4e4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	0e1b      	lsrs	r3, r3, #24
 800a4ea:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	0a1b      	lsrs	r3, r3, #8
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	0d1b      	lsrs	r3, r3, #20
 800a506:	b2db      	uxtb	r3, r3
 800a508:	f003 030f 	and.w	r3, r3, #15
 800a50c:	b2da      	uxtb	r2, r3
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	0c1b      	lsrs	r3, r3, #16
 800a516:	b29b      	uxth	r3, r3
 800a518:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	b29b      	uxth	r3, r3
 800a522:	b2db      	uxtb	r3, r3
 800a524:	b29b      	uxth	r3, r3
 800a526:	4313      	orrs	r3, r2
 800a528:	b29a      	uxth	r2, r3
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	0a9b      	lsrs	r3, r3, #10
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	0a1b      	lsrs	r3, r3, #8
 800a542:	b2db      	uxtb	r3, r3
 800a544:	f003 0303 	and.w	r3, r3, #3
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	091b      	lsrs	r3, r3, #4
 800a552:	b2db      	uxtb	r3, r3
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	b2db      	uxtb	r3, r3
 800a562:	f003 030f 	and.w	r3, r3, #15
 800a566:	b2da      	uxtb	r2, r3
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	0e1b      	lsrs	r3, r3, #24
 800a570:	b2da      	uxtb	r2, r3
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a57e:	4618      	mov	r0, r3
 800a580:	f004 fd66 	bl	800f050 <SDMMC_CmdBlockLength>
 800a584:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00d      	beq.n	800a5a8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a08      	ldr	r2, [pc, #32]	@ (800a5b4 <HAL_SD_GetCardStatus+0x178>)
 800a592:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a598:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800a5a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3750      	adds	r7, #80	@ 0x50
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	1fe00fff 	.word	0x1fe00fff

0800a5b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a610:	b590      	push	{r4, r7, lr}
 800a612:	b08d      	sub	sp, #52	@ 0x34
 800a614:	af02      	add	r7, sp, #8
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2203      	movs	r2, #3
 800a624:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a62c:	2b03      	cmp	r3, #3
 800a62e:	d02e      	beq.n	800a68e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a636:	d106      	bne.n	800a646 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a63c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	635a      	str	r2, [r3, #52]	@ 0x34
 800a644:	e029      	b.n	800a69a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a64c:	d10a      	bne.n	800a664 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fb64 	bl	800ad1c <SD_WideBus_Enable>
 800a654:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	431a      	orrs	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	635a      	str	r2, [r3, #52]	@ 0x34
 800a662:	e01a      	b.n	800a69a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10a      	bne.n	800a680 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fba1 	bl	800adb2 <SD_WideBus_Disable>
 800a670:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	431a      	orrs	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a67e:	e00c      	b.n	800a69a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a684:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	635a      	str	r2, [r3, #52]	@ 0x34
 800a68c:	e005      	b.n	800a69a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a692:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d007      	beq.n	800a6b2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a5f      	ldr	r2, [pc, #380]	@ (800a824 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a6a8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a6b0:	e096      	b.n	800a7e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a6b2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a6b6:	f04f 0100 	mov.w	r1, #0
 800a6ba:	f7fd fe9d 	bl	80083f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6be:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 8083 	beq.w	800a7ce <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	695a      	ldr	r2, [r3, #20]
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	4950      	ldr	r1, [pc, #320]	@ (800a828 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a6e6:	fba1 1303 	umull	r1, r3, r1, r3
 800a6ea:	0e1b      	lsrs	r3, r3, #24
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d303      	bcc.n	800a6f8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	61bb      	str	r3, [r7, #24]
 800a6f6:	e05a      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a700:	d103      	bne.n	800a70a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	61bb      	str	r3, [r7, #24]
 800a708:	e051      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a70e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a712:	d126      	bne.n	800a762 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10e      	bne.n	800a73a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	4a43      	ldr	r2, [pc, #268]	@ (800a82c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d906      	bls.n	800a732 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	4a40      	ldr	r2, [pc, #256]	@ (800a828 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a728:	fba2 2303 	umull	r2, r3, r2, r3
 800a72c:	0e5b      	lsrs	r3, r3, #25
 800a72e:	61bb      	str	r3, [r7, #24]
 800a730:	e03d      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	61bb      	str	r3, [r7, #24]
 800a738:	e039      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	005b      	lsls	r3, r3, #1
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	fbb2 f3f3 	udiv	r3, r2, r3
 800a746:	4a39      	ldr	r2, [pc, #228]	@ (800a82c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d906      	bls.n	800a75a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	4a36      	ldr	r2, [pc, #216]	@ (800a828 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a750:	fba2 2303 	umull	r2, r3, r2, r3
 800a754:	0e5b      	lsrs	r3, r3, #25
 800a756:	61bb      	str	r3, [r7, #24]
 800a758:	e029      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	61bb      	str	r3, [r7, #24]
 800a760:	e025      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10e      	bne.n	800a788 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	4a30      	ldr	r2, [pc, #192]	@ (800a830 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d906      	bls.n	800a780 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	4a2c      	ldr	r2, [pc, #176]	@ (800a828 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a776:	fba2 2303 	umull	r2, r3, r2, r3
 800a77a:	0e1b      	lsrs	r3, r3, #24
 800a77c:	61bb      	str	r3, [r7, #24]
 800a77e:	e016      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	61bb      	str	r3, [r7, #24]
 800a786:	e012      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	695b      	ldr	r3, [r3, #20]
 800a78c:	005b      	lsls	r3, r3, #1
 800a78e:	69fa      	ldr	r2, [r7, #28]
 800a790:	fbb2 f3f3 	udiv	r3, r2, r3
 800a794:	4a26      	ldr	r2, [pc, #152]	@ (800a830 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d906      	bls.n	800a7a8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	4a22      	ldr	r2, [pc, #136]	@ (800a828 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a79e:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a2:	0e1b      	lsrs	r3, r3, #24
 800a7a4:	61bb      	str	r3, [r7, #24]
 800a7a6:	e002      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681c      	ldr	r4, [r3, #0]
 800a7b2:	466a      	mov	r2, sp
 800a7b4:	f107 0314 	add.w	r3, r7, #20
 800a7b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7bc:	e882 0003 	stmia.w	r2, {r0, r1}
 800a7c0:	f107 0308 	add.w	r3, r7, #8
 800a7c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f004 fb64 	bl	800ee94 <SDMMC_Init>
 800a7cc:	e008      	b.n	800a7e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f004 fc31 	bl	800f050 <SDMMC_CmdBlockLength>
 800a7ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7f0:	6a3b      	ldr	r3, [r7, #32]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00c      	beq.n	800a810 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a0a      	ldr	r2, [pc, #40]	@ (800a824 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a7fc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	431a      	orrs	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800a818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	372c      	adds	r7, #44	@ 0x2c
 800a820:	46bd      	mov	sp, r7
 800a822:	bd90      	pop	{r4, r7, pc}
 800a824:	1fe00fff 	.word	0x1fe00fff
 800a828:	55e63b89 	.word	0x55e63b89
 800a82c:	02faf080 	.word	0x02faf080
 800a830:	017d7840 	.word	0x017d7840

0800a834 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a840:	f107 030c 	add.w	r3, r7, #12
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fa40 	bl	800accc <SD_SendStatus>
 800a84c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d005      	beq.n	800a860 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	431a      	orrs	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	0a5b      	lsrs	r3, r3, #9
 800a864:	f003 030f 	and.w	r3, r3, #15
 800a868:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a86a:	693b      	ldr	r3, [r7, #16]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b090      	sub	sp, #64	@ 0x40
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a880:	f7f8 fedc 	bl	800363c <HAL_GetTick>
 800a884:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f004 fb5b 	bl	800ef46 <SDMMC_GetPowerState>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d102      	bne.n	800a89c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a896:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a89a:	e0b5      	b.n	800aa08 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d02e      	beq.n	800a902 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f004 fda6 	bl	800f3fa <SDMMC_CmdSendCID>
 800a8ae:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <SD_InitCard+0x46>
    {
      return errorstate;
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b8:	e0a6      	b.n	800aa08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2100      	movs	r1, #0
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f004 fb86 	bl	800efd2 <SDMMC_GetResponse>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2104      	movs	r1, #4
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f004 fb7d 	bl	800efd2 <SDMMC_GetResponse>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2108      	movs	r1, #8
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f004 fb74 	bl	800efd2 <SDMMC_GetResponse>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	210c      	movs	r1, #12
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f004 fb6b 	bl	800efd2 <SDMMC_GetResponse>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a906:	2b03      	cmp	r3, #3
 800a908:	d01d      	beq.n	800a946 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a90a:	e019      	b.n	800a940 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f107 020a 	add.w	r2, r7, #10
 800a914:	4611      	mov	r1, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f004 fdae 	bl	800f478 <SDMMC_CmdSetRelAdd>
 800a91c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <SD_InitCard+0xb4>
      {
        return errorstate;
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	e06f      	b.n	800aa08 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a928:	f7f8 fe88 	bl	800363c <HAL_GetTick>
 800a92c:	4602      	mov	r2, r0
 800a92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a936:	4293      	cmp	r3, r2
 800a938:	d902      	bls.n	800a940 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a93a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a93e:	e063      	b.n	800aa08 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a940:	897b      	ldrh	r3, [r7, #10]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d0e2      	beq.n	800a90c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d036      	beq.n	800a9bc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a94e:	897b      	ldrh	r3, [r7, #10]
 800a950:	461a      	mov	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a95e:	041b      	lsls	r3, r3, #16
 800a960:	4619      	mov	r1, r3
 800a962:	4610      	mov	r0, r2
 800a964:	f004 fd68 	bl	800f438 <SDMMC_CmdSendCSD>
 800a968:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <SD_InitCard+0x100>
    {
      return errorstate;
 800a970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a972:	e049      	b.n	800aa08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2100      	movs	r1, #0
 800a97a:	4618      	mov	r0, r3
 800a97c:	f004 fb29 	bl	800efd2 <SDMMC_GetResponse>
 800a980:	4602      	mov	r2, r0
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2104      	movs	r1, #4
 800a98c:	4618      	mov	r0, r3
 800a98e:	f004 fb20 	bl	800efd2 <SDMMC_GetResponse>
 800a992:	4602      	mov	r2, r0
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2108      	movs	r1, #8
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f004 fb17 	bl	800efd2 <SDMMC_GetResponse>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	210c      	movs	r1, #12
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f004 fb0e 	bl	800efd2 <SDMMC_GetResponse>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2104      	movs	r1, #4
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f004 fb05 	bl	800efd2 <SDMMC_GetResponse>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	0d1a      	lsrs	r2, r3, #20
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a9d0:	f107 030c 	add.w	r3, r7, #12
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff fb8c 	bl	800a0f4 <HAL_SD_GetCardCSD>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d002      	beq.n	800a9e8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9e2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a9e6:	e00f      	b.n	800aa08 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9f0:	041b      	lsls	r3, r3, #16
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	f004 fc17 	bl	800f228 <SDMMC_CmdSelDesel>
 800a9fa:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <SD_InitCard+0x192>
  {
    return errorstate;
 800aa02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa04:	e000      	b.n	800aa08 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3740      	adds	r7, #64	@ 0x40
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800aa20:	2300      	movs	r3, #0
 800aa22:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f004 fc20 	bl	800f26e <SDMMC_CmdGoIdleState>
 800aa2e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <SD_PowerON+0x2a>
  {
    return errorstate;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	e072      	b.n	800ab20 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f004 fc33 	bl	800f2aa <SDMMC_CmdOperCond>
 800aa44:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa4c:	d10d      	bne.n	800aa6a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f004 fc08 	bl	800f26e <SDMMC_CmdGoIdleState>
 800aa5e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d004      	beq.n	800aa70 <SD_PowerON+0x60>
    {
      return errorstate;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	e05a      	b.n	800ab20 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d137      	bne.n	800aae8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f004 fc33 	bl	800f2ea <SDMMC_CmdAppCommand>
 800aa84:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d02d      	beq.n	800aae8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa8c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aa90:	e046      	b.n	800ab20 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2100      	movs	r1, #0
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f004 fc26 	bl	800f2ea <SDMMC_CmdAppCommand>
 800aa9e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <SD_PowerON+0x9a>
    {
      return errorstate;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	e03a      	b.n	800ab20 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	491e      	ldr	r1, [pc, #120]	@ (800ab28 <SD_PowerON+0x118>)
 800aab0:	4618      	mov	r0, r3
 800aab2:	f004 fc3d 	bl	800f330 <SDMMC_CmdAppOperCommand>
 800aab6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d002      	beq.n	800aac4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aabe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aac2:	e02d      	b.n	800ab20 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2100      	movs	r1, #0
 800aaca:	4618      	mov	r0, r3
 800aacc:	f004 fa81 	bl	800efd2 <SDMMC_GetResponse>
 800aad0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	0fdb      	lsrs	r3, r3, #31
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d101      	bne.n	800aade <SD_PowerON+0xce>
 800aada:	2301      	movs	r3, #1
 800aadc:	e000      	b.n	800aae0 <SD_PowerON+0xd0>
 800aade:	2300      	movs	r3, #0
 800aae0:	613b      	str	r3, [r7, #16]

    count++;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	3301      	adds	r3, #1
 800aae6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d802      	bhi.n	800aaf8 <SD_PowerON+0xe8>
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0cc      	beq.n	800aa92 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d902      	bls.n	800ab08 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ab02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab06:	e00b      	b.n	800ab20 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	c1100000 	.word	0xc1100000

0800ab2c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08c      	sub	sp, #48	@ 0x30
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab36:	f7f8 fd81 	bl	800363c <HAL_GetTick>
 800ab3a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2100      	movs	r1, #0
 800ab46:	4618      	mov	r0, r3
 800ab48:	f004 fa43 	bl	800efd2 <SDMMC_GetResponse>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab56:	d102      	bne.n	800ab5e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ab58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab5c:	e0b0      	b.n	800acc0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2140      	movs	r1, #64	@ 0x40
 800ab64:	4618      	mov	r0, r3
 800ab66:	f004 fa73 	bl	800f050 <SDMMC_CmdBlockLength>
 800ab6a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d005      	beq.n	800ab7e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	e0a0      	b.n	800acc0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab86:	041b      	lsls	r3, r3, #16
 800ab88:	4619      	mov	r1, r3
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	f004 fbad 	bl	800f2ea <SDMMC_CmdAppCommand>
 800ab90:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d005      	beq.n	800aba4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800aba0:	6a3b      	ldr	r3, [r7, #32]
 800aba2:	e08d      	b.n	800acc0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aba4:	f04f 33ff 	mov.w	r3, #4294967295
 800aba8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800abaa:	2340      	movs	r3, #64	@ 0x40
 800abac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800abae:	2360      	movs	r3, #96	@ 0x60
 800abb0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800abb2:	2302      	movs	r3, #2
 800abb4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800abba:	2301      	movs	r3, #1
 800abbc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f107 0208 	add.w	r2, r7, #8
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f004 fa15 	bl	800eff8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f004 fc95 	bl	800f502 <SDMMC_CmdStatusRegister>
 800abd8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d02b      	beq.n	800ac38 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	e069      	b.n	800acc0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d013      	beq.n	800ac22 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800abfa:	2300      	movs	r3, #0
 800abfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abfe:	e00d      	b.n	800ac1c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f004 f96f 	bl	800eee8 <SDMMC_ReadFIFO>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0e:	601a      	str	r2, [r3, #0]
        pData++;
 800ac10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac12:	3304      	adds	r3, #4
 800ac14:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800ac16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac18:	3301      	adds	r3, #1
 800ac1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1e:	2b07      	cmp	r3, #7
 800ac20:	d9ee      	bls.n	800ac00 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac22:	f7f8 fd0b 	bl	800363c <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac30:	d102      	bne.n	800ac38 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac32:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac36:	e043      	b.n	800acc0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac3e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0d2      	beq.n	800abec <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac4c:	f003 0308 	and.w	r3, r3, #8
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac54:	2308      	movs	r3, #8
 800ac56:	e033      	b.n	800acc0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac5e:	f003 0302 	and.w	r3, r3, #2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac66:	2302      	movs	r3, #2
 800ac68:	e02a      	b.n	800acc0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac70:	f003 0320 	and.w	r3, r3, #32
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d017      	beq.n	800aca8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ac78:	2320      	movs	r3, #32
 800ac7a:	e021      	b.n	800acc0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4618      	mov	r0, r3
 800ac82:	f004 f931 	bl	800eee8 <SDMMC_ReadFIFO>
 800ac86:	4602      	mov	r2, r0
 800ac88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8a:	601a      	str	r2, [r3, #0]
    pData++;
 800ac8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8e:	3304      	adds	r3, #4
 800ac90:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac92:	f7f8 fcd3 	bl	800363c <HAL_GetTick>
 800ac96:	4602      	mov	r2, r0
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca0:	d102      	bne.n	800aca8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aca2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aca6:	e00b      	b.n	800acc0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e2      	bne.n	800ac7c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a03      	ldr	r2, [pc, #12]	@ (800acc8 <SD_SendSDStatus+0x19c>)
 800acbc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3730      	adds	r7, #48	@ 0x30
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	18000f3a 	.word	0x18000f3a

0800accc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800acdc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ace0:	e018      	b.n	800ad14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acea:	041b      	lsls	r3, r3, #16
 800acec:	4619      	mov	r1, r3
 800acee:	4610      	mov	r0, r2
 800acf0:	f004 fbe4 	bl	800f4bc <SDMMC_CmdSendStatus>
 800acf4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <SD_SendStatus+0x34>
  {
    return errorstate;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	e009      	b.n	800ad14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2100      	movs	r1, #0
 800ad06:	4618      	mov	r0, r3
 800ad08:	f004 f963 	bl	800efd2 <SDMMC_GetResponse>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ad24:	2300      	movs	r3, #0
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f004 f94d 	bl	800efd2 <SDMMC_GetResponse>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad42:	d102      	bne.n	800ad4a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ad48:	e02f      	b.n	800adaa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ad4a:	f107 030c 	add.w	r3, r7, #12
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f879 	bl	800ae48 <SD_FindSCR>
 800ad56:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	e023      	b.n	800adaa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d01c      	beq.n	800ada6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad74:	041b      	lsls	r3, r3, #16
 800ad76:	4619      	mov	r1, r3
 800ad78:	4610      	mov	r0, r2
 800ad7a:	f004 fab6 	bl	800f2ea <SDMMC_CmdAppCommand>
 800ad7e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	e00f      	b.n	800adaa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2102      	movs	r1, #2
 800ad90:	4618      	mov	r0, r3
 800ad92:	f004 faed 	bl	800f370 <SDMMC_CmdBusWidth>
 800ad96:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	e003      	b.n	800adaa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ada2:	2300      	movs	r3, #0
 800ada4:	e001      	b.n	800adaa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ada6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3718      	adds	r7, #24
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b086      	sub	sp, #24
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]
 800adbe:	2300      	movs	r3, #0
 800adc0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2100      	movs	r1, #0
 800adc8:	4618      	mov	r0, r3
 800adca:	f004 f902 	bl	800efd2 <SDMMC_GetResponse>
 800adce:	4603      	mov	r3, r0
 800add0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800add4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800add8:	d102      	bne.n	800ade0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800adda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800adde:	e02f      	b.n	800ae40 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ade0:	f107 030c 	add.w	r3, r7, #12
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f82e 	bl	800ae48 <SD_FindSCR>
 800adec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	e023      	b.n	800ae40 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d01c      	beq.n	800ae3c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae0a:	041b      	lsls	r3, r3, #16
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4610      	mov	r0, r2
 800ae10:	f004 fa6b 	bl	800f2ea <SDMMC_CmdAppCommand>
 800ae14:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	e00f      	b.n	800ae40 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2100      	movs	r1, #0
 800ae26:	4618      	mov	r0, r3
 800ae28:	f004 faa2 	bl	800f370 <SDMMC_CmdBusWidth>
 800ae2c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	e003      	b.n	800ae40 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e001      	b.n	800ae40 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae3c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08e      	sub	sp, #56	@ 0x38
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ae52:	f7f8 fbf3 	bl	800363c <HAL_GetTick>
 800ae56:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60bb      	str	r3, [r7, #8]
 800ae60:	2300      	movs	r3, #0
 800ae62:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2108      	movs	r1, #8
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f004 f8ee 	bl	800f050 <SDMMC_CmdBlockLength>
 800ae74:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d001      	beq.n	800ae80 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ae7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7e:	e0ad      	b.n	800afdc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae88:	041b      	lsls	r3, r3, #16
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f004 fa2c 	bl	800f2ea <SDMMC_CmdAppCommand>
 800ae92:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <SD_FindSCR+0x56>
  {
    return errorstate;
 800ae9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9c:	e09e      	b.n	800afdc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aea2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800aea4:	2308      	movs	r3, #8
 800aea6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800aea8:	2330      	movs	r3, #48	@ 0x30
 800aeaa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aeac:	2302      	movs	r3, #2
 800aeae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f107 0210 	add.w	r2, r7, #16
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f004 f898 	bl	800eff8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4618      	mov	r0, r3
 800aece:	f004 fa72 	bl	800f3b6 <SDMMC_CmdSendSCR>
 800aed2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800aed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d027      	beq.n	800af2a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800aeda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aedc:	e07e      	b.n	800afdc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aee4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d113      	bne.n	800af14 <SD_FindSCR+0xcc>
 800aeec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d110      	bne.n	800af14 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f003 fff6 	bl	800eee8 <SDMMC_ReadFIFO>
 800aefc:	4603      	mov	r3, r0
 800aefe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4618      	mov	r0, r3
 800af06:	f003 ffef 	bl	800eee8 <SDMMC_ReadFIFO>
 800af0a:	4603      	mov	r3, r0
 800af0c:	60fb      	str	r3, [r7, #12]
      index++;
 800af0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af10:	3301      	adds	r3, #1
 800af12:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800af14:	f7f8 fb92 	bl	800363c <HAL_GetTick>
 800af18:	4602      	mov	r2, r0
 800af1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af22:	d102      	bne.n	800af2a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af28:	e058      	b.n	800afdc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af30:	f240 532a 	movw	r3, #1322	@ 0x52a
 800af34:	4013      	ands	r3, r2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0d1      	beq.n	800aede <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af40:	f003 0308 	and.w	r3, r3, #8
 800af44:	2b00      	cmp	r3, #0
 800af46:	d005      	beq.n	800af54 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2208      	movs	r2, #8
 800af4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800af50:	2308      	movs	r3, #8
 800af52:	e043      	b.n	800afdc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af5a:	f003 0302 	and.w	r3, r3, #2
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d005      	beq.n	800af6e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2202      	movs	r2, #2
 800af68:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800af6a:	2302      	movs	r3, #2
 800af6c:	e036      	b.n	800afdc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af74:	f003 0320 	and.w	r3, r3, #32
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d005      	beq.n	800af88 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2220      	movs	r2, #32
 800af82:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800af84:	2320      	movs	r3, #32
 800af86:	e029      	b.n	800afdc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a15      	ldr	r2, [pc, #84]	@ (800afe4 <SD_FindSCR+0x19c>)
 800af8e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	061a      	lsls	r2, r3, #24
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	021b      	lsls	r3, r3, #8
 800af98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800af9c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	0a1b      	lsrs	r3, r3, #8
 800afa2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800afa6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	0e1b      	lsrs	r3, r3, #24
 800afac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800afae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb0:	601a      	str	r2, [r3, #0]
    scr++;
 800afb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb4:	3304      	adds	r3, #4
 800afb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	061a      	lsls	r2, r3, #24
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800afc4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	0a1b      	lsrs	r3, r3, #8
 800afca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800afce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	0e1b      	lsrs	r3, r3, #24
 800afd4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800afd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3738      	adds	r7, #56	@ 0x38
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	18000f3a 	.word	0x18000f3a

0800afe8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e10f      	b.n	800b21a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a87      	ldr	r2, [pc, #540]	@ (800b224 <HAL_SPI_Init+0x23c>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d00f      	beq.n	800b02a <HAL_SPI_Init+0x42>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a86      	ldr	r2, [pc, #536]	@ (800b228 <HAL_SPI_Init+0x240>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d00a      	beq.n	800b02a <HAL_SPI_Init+0x42>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a84      	ldr	r2, [pc, #528]	@ (800b22c <HAL_SPI_Init+0x244>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d005      	beq.n	800b02a <HAL_SPI_Init+0x42>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	2b0f      	cmp	r3, #15
 800b024:	d901      	bls.n	800b02a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	e0f7      	b.n	800b21a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f900 	bl	800b230 <SPI_GetPacketSize>
 800b030:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a7b      	ldr	r2, [pc, #492]	@ (800b224 <HAL_SPI_Init+0x23c>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d00c      	beq.n	800b056 <HAL_SPI_Init+0x6e>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a79      	ldr	r2, [pc, #484]	@ (800b228 <HAL_SPI_Init+0x240>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d007      	beq.n	800b056 <HAL_SPI_Init+0x6e>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a78      	ldr	r2, [pc, #480]	@ (800b22c <HAL_SPI_Init+0x244>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d002      	beq.n	800b056 <HAL_SPI_Init+0x6e>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b08      	cmp	r3, #8
 800b054:	d811      	bhi.n	800b07a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b05a:	4a72      	ldr	r2, [pc, #456]	@ (800b224 <HAL_SPI_Init+0x23c>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d009      	beq.n	800b074 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a70      	ldr	r2, [pc, #448]	@ (800b228 <HAL_SPI_Init+0x240>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d004      	beq.n	800b074 <HAL_SPI_Init+0x8c>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a6f      	ldr	r2, [pc, #444]	@ (800b22c <HAL_SPI_Init+0x244>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d104      	bne.n	800b07e <HAL_SPI_Init+0x96>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b10      	cmp	r3, #16
 800b078:	d901      	bls.n	800b07e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e0cd      	b.n	800b21a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b00      	cmp	r3, #0
 800b088:	d106      	bne.n	800b098 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7f7 fa7a 	bl	800258c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2202      	movs	r2, #2
 800b09c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f022 0201 	bic.w	r2, r2, #1
 800b0ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b0ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b0c4:	d119      	bne.n	800b0fa <HAL_SPI_Init+0x112>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b0ce:	d103      	bne.n	800b0d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d008      	beq.n	800b0ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10c      	bne.n	800b0fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b0e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0e8:	d107      	bne.n	800b0fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b0f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00f      	beq.n	800b126 <HAL_SPI_Init+0x13e>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	2b06      	cmp	r3, #6
 800b10c:	d90b      	bls.n	800b126 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	430a      	orrs	r2, r1
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	e007      	b.n	800b136 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b134:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	69da      	ldr	r2, [r3, #28]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b13e:	431a      	orrs	r2, r3
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	431a      	orrs	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b148:	ea42 0103 	orr.w	r1, r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68da      	ldr	r2, [r3, #12]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	430a      	orrs	r2, r1
 800b156:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b160:	431a      	orrs	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b166:	431a      	orrs	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	431a      	orrs	r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	431a      	orrs	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	695b      	ldr	r3, [r3, #20]
 800b178:	431a      	orrs	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	431a      	orrs	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	431a      	orrs	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b18a:	431a      	orrs	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	431a      	orrs	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b196:	ea42 0103 	orr.w	r1, r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	430a      	orrs	r2, r1
 800b1a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d113      	bne.n	800b1d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b1d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f022 0201 	bic.w	r2, r2, #1
 800b1e4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00a      	beq.n	800b208 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	430a      	orrs	r2, r1
 800b206:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40013000 	.word	0x40013000
 800b228:	40003800 	.word	0x40003800
 800b22c:	40003c00 	.word	0x40003c00

0800b230 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b23c:	095b      	lsrs	r3, r3, #5
 800b23e:	3301      	adds	r3, #1
 800b240:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	3301      	adds	r3, #1
 800b248:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	3307      	adds	r3, #7
 800b24e:	08db      	lsrs	r3, r3, #3
 800b250:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	fb02 f303 	mul.w	r3, r2, r3
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e049      	b.n	800b30c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	d106      	bne.n	800b292 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7f7 faf7 	bl	8002880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2202      	movs	r2, #2
 800b296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	f000 fa99 	bl	800b7dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e049      	b.n	800b3ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d106      	bne.n	800b340 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7f7 fac2 	bl	80028c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2202      	movs	r2, #2
 800b344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3304      	adds	r3, #4
 800b350:	4619      	mov	r1, r3
 800b352:	4610      	mov	r0, r2
 800b354:	f000 fa42 	bl	800b7dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
	...

0800b3c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d101      	bne.n	800b3e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3de:	2302      	movs	r3, #2
 800b3e0:	e0ff      	b.n	800b5e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b14      	cmp	r3, #20
 800b3ee:	f200 80f0 	bhi.w	800b5d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f8:	0800b44d 	.word	0x0800b44d
 800b3fc:	0800b5d3 	.word	0x0800b5d3
 800b400:	0800b5d3 	.word	0x0800b5d3
 800b404:	0800b5d3 	.word	0x0800b5d3
 800b408:	0800b48d 	.word	0x0800b48d
 800b40c:	0800b5d3 	.word	0x0800b5d3
 800b410:	0800b5d3 	.word	0x0800b5d3
 800b414:	0800b5d3 	.word	0x0800b5d3
 800b418:	0800b4cf 	.word	0x0800b4cf
 800b41c:	0800b5d3 	.word	0x0800b5d3
 800b420:	0800b5d3 	.word	0x0800b5d3
 800b424:	0800b5d3 	.word	0x0800b5d3
 800b428:	0800b50f 	.word	0x0800b50f
 800b42c:	0800b5d3 	.word	0x0800b5d3
 800b430:	0800b5d3 	.word	0x0800b5d3
 800b434:	0800b5d3 	.word	0x0800b5d3
 800b438:	0800b551 	.word	0x0800b551
 800b43c:	0800b5d3 	.word	0x0800b5d3
 800b440:	0800b5d3 	.word	0x0800b5d3
 800b444:	0800b5d3 	.word	0x0800b5d3
 800b448:	0800b591 	.word	0x0800b591
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68b9      	ldr	r1, [r7, #8]
 800b452:	4618      	mov	r0, r3
 800b454:	f000 fa74 	bl	800b940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	699a      	ldr	r2, [r3, #24]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f042 0208 	orr.w	r2, r2, #8
 800b466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	699a      	ldr	r2, [r3, #24]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f022 0204 	bic.w	r2, r2, #4
 800b476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	6999      	ldr	r1, [r3, #24]
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	691a      	ldr	r2, [r3, #16]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	619a      	str	r2, [r3, #24]
      break;
 800b48a:	e0a5      	b.n	800b5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68b9      	ldr	r1, [r7, #8]
 800b492:	4618      	mov	r0, r3
 800b494:	f000 fae4 	bl	800ba60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	699a      	ldr	r2, [r3, #24]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	699a      	ldr	r2, [r3, #24]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6999      	ldr	r1, [r3, #24]
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	021a      	lsls	r2, r3, #8
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	430a      	orrs	r2, r1
 800b4ca:	619a      	str	r2, [r3, #24]
      break;
 800b4cc:	e084      	b.n	800b5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68b9      	ldr	r1, [r7, #8]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 fb4d 	bl	800bb74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	69da      	ldr	r2, [r3, #28]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f042 0208 	orr.w	r2, r2, #8
 800b4e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	69da      	ldr	r2, [r3, #28]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f022 0204 	bic.w	r2, r2, #4
 800b4f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	69d9      	ldr	r1, [r3, #28]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	691a      	ldr	r2, [r3, #16]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	430a      	orrs	r2, r1
 800b50a:	61da      	str	r2, [r3, #28]
      break;
 800b50c:	e064      	b.n	800b5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68b9      	ldr	r1, [r7, #8]
 800b514:	4618      	mov	r0, r3
 800b516:	f000 fbb5 	bl	800bc84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	69da      	ldr	r2, [r3, #28]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	69da      	ldr	r2, [r3, #28]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	69d9      	ldr	r1, [r3, #28]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	021a      	lsls	r2, r3, #8
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	430a      	orrs	r2, r1
 800b54c:	61da      	str	r2, [r3, #28]
      break;
 800b54e:	e043      	b.n	800b5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68b9      	ldr	r1, [r7, #8]
 800b556:	4618      	mov	r0, r3
 800b558:	f000 fbfe 	bl	800bd58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f042 0208 	orr.w	r2, r2, #8
 800b56a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f022 0204 	bic.w	r2, r2, #4
 800b57a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	691a      	ldr	r2, [r3, #16]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	430a      	orrs	r2, r1
 800b58c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b58e:	e023      	b.n	800b5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	68b9      	ldr	r1, [r7, #8]
 800b596:	4618      	mov	r0, r3
 800b598:	f000 fc42 	bl	800be20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	021a      	lsls	r2, r3, #8
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b5d0:	e002      	b.n	800b5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	75fb      	strb	r3, [r7, #23]
      break;
 800b5d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop

0800b5ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b600:	2b01      	cmp	r3, #1
 800b602:	d101      	bne.n	800b608 <HAL_TIM_ConfigClockSource+0x1c>
 800b604:	2302      	movs	r3, #2
 800b606:	e0dc      	b.n	800b7c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2202      	movs	r2, #2
 800b614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	4b6a      	ldr	r3, [pc, #424]	@ (800b7cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800b624:	4013      	ands	r3, r2
 800b626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b62e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a64      	ldr	r2, [pc, #400]	@ (800b7d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	f000 80a9 	beq.w	800b796 <HAL_TIM_ConfigClockSource+0x1aa>
 800b644:	4a62      	ldr	r2, [pc, #392]	@ (800b7d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b646:	4293      	cmp	r3, r2
 800b648:	f200 80ae 	bhi.w	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b64c:	4a61      	ldr	r2, [pc, #388]	@ (800b7d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	f000 80a1 	beq.w	800b796 <HAL_TIM_ConfigClockSource+0x1aa>
 800b654:	4a5f      	ldr	r2, [pc, #380]	@ (800b7d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b656:	4293      	cmp	r3, r2
 800b658:	f200 80a6 	bhi.w	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b65c:	4a5e      	ldr	r2, [pc, #376]	@ (800b7d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	f000 8099 	beq.w	800b796 <HAL_TIM_ConfigClockSource+0x1aa>
 800b664:	4a5c      	ldr	r2, [pc, #368]	@ (800b7d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b666:	4293      	cmp	r3, r2
 800b668:	f200 809e 	bhi.w	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b66c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b670:	f000 8091 	beq.w	800b796 <HAL_TIM_ConfigClockSource+0x1aa>
 800b674:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b678:	f200 8096 	bhi.w	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b67c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b680:	f000 8089 	beq.w	800b796 <HAL_TIM_ConfigClockSource+0x1aa>
 800b684:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b688:	f200 808e 	bhi.w	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b68c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b690:	d03e      	beq.n	800b710 <HAL_TIM_ConfigClockSource+0x124>
 800b692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b696:	f200 8087 	bhi.w	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b69a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b69e:	f000 8086 	beq.w	800b7ae <HAL_TIM_ConfigClockSource+0x1c2>
 800b6a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6a6:	d87f      	bhi.n	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6a8:	2b70      	cmp	r3, #112	@ 0x70
 800b6aa:	d01a      	beq.n	800b6e2 <HAL_TIM_ConfigClockSource+0xf6>
 800b6ac:	2b70      	cmp	r3, #112	@ 0x70
 800b6ae:	d87b      	bhi.n	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6b0:	2b60      	cmp	r3, #96	@ 0x60
 800b6b2:	d050      	beq.n	800b756 <HAL_TIM_ConfigClockSource+0x16a>
 800b6b4:	2b60      	cmp	r3, #96	@ 0x60
 800b6b6:	d877      	bhi.n	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6b8:	2b50      	cmp	r3, #80	@ 0x50
 800b6ba:	d03c      	beq.n	800b736 <HAL_TIM_ConfigClockSource+0x14a>
 800b6bc:	2b50      	cmp	r3, #80	@ 0x50
 800b6be:	d873      	bhi.n	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6c0:	2b40      	cmp	r3, #64	@ 0x40
 800b6c2:	d058      	beq.n	800b776 <HAL_TIM_ConfigClockSource+0x18a>
 800b6c4:	2b40      	cmp	r3, #64	@ 0x40
 800b6c6:	d86f      	bhi.n	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6c8:	2b30      	cmp	r3, #48	@ 0x30
 800b6ca:	d064      	beq.n	800b796 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6cc:	2b30      	cmp	r3, #48	@ 0x30
 800b6ce:	d86b      	bhi.n	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6d0:	2b20      	cmp	r3, #32
 800b6d2:	d060      	beq.n	800b796 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6d4:	2b20      	cmp	r3, #32
 800b6d6:	d867      	bhi.n	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d05c      	beq.n	800b796 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6dc:	2b10      	cmp	r3, #16
 800b6de:	d05a      	beq.n	800b796 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6e0:	e062      	b.n	800b7a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b6f2:	f000 fc79 	bl	800bfe8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	609a      	str	r2, [r3, #8]
      break;
 800b70e:	e04f      	b.n	800b7b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b720:	f000 fc62 	bl	800bfe8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689a      	ldr	r2, [r3, #8]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b732:	609a      	str	r2, [r3, #8]
      break;
 800b734:	e03c      	b.n	800b7b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b742:	461a      	mov	r2, r3
 800b744:	f000 fbd2 	bl	800beec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2150      	movs	r1, #80	@ 0x50
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 fc2c 	bl	800bfac <TIM_ITRx_SetConfig>
      break;
 800b754:	e02c      	b.n	800b7b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b762:	461a      	mov	r2, r3
 800b764:	f000 fbf1 	bl	800bf4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2160      	movs	r1, #96	@ 0x60
 800b76e:	4618      	mov	r0, r3
 800b770:	f000 fc1c 	bl	800bfac <TIM_ITRx_SetConfig>
      break;
 800b774:	e01c      	b.n	800b7b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b782:	461a      	mov	r2, r3
 800b784:	f000 fbb2 	bl	800beec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2140      	movs	r1, #64	@ 0x40
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fc0c 	bl	800bfac <TIM_ITRx_SetConfig>
      break;
 800b794:	e00c      	b.n	800b7b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	4610      	mov	r0, r2
 800b7a2:	f000 fc03 	bl	800bfac <TIM_ITRx_SetConfig>
      break;
 800b7a6:	e003      	b.n	800b7b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ac:	e000      	b.n	800b7b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b7ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	ffceff88 	.word	0xffceff88
 800b7d0:	00100040 	.word	0x00100040
 800b7d4:	00100030 	.word	0x00100030
 800b7d8:	00100020 	.word	0x00100020

0800b7dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a4a      	ldr	r2, [pc, #296]	@ (800b918 <TIM_Base_SetConfig+0x13c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d013      	beq.n	800b81c <TIM_Base_SetConfig+0x40>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7fa:	d00f      	beq.n	800b81c <TIM_Base_SetConfig+0x40>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a47      	ldr	r2, [pc, #284]	@ (800b91c <TIM_Base_SetConfig+0x140>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d00b      	beq.n	800b81c <TIM_Base_SetConfig+0x40>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a46      	ldr	r2, [pc, #280]	@ (800b920 <TIM_Base_SetConfig+0x144>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d007      	beq.n	800b81c <TIM_Base_SetConfig+0x40>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4a45      	ldr	r2, [pc, #276]	@ (800b924 <TIM_Base_SetConfig+0x148>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d003      	beq.n	800b81c <TIM_Base_SetConfig+0x40>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a44      	ldr	r2, [pc, #272]	@ (800b928 <TIM_Base_SetConfig+0x14c>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d108      	bne.n	800b82e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a39      	ldr	r2, [pc, #228]	@ (800b918 <TIM_Base_SetConfig+0x13c>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d027      	beq.n	800b886 <TIM_Base_SetConfig+0xaa>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b83c:	d023      	beq.n	800b886 <TIM_Base_SetConfig+0xaa>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a36      	ldr	r2, [pc, #216]	@ (800b91c <TIM_Base_SetConfig+0x140>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d01f      	beq.n	800b886 <TIM_Base_SetConfig+0xaa>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a35      	ldr	r2, [pc, #212]	@ (800b920 <TIM_Base_SetConfig+0x144>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d01b      	beq.n	800b886 <TIM_Base_SetConfig+0xaa>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a34      	ldr	r2, [pc, #208]	@ (800b924 <TIM_Base_SetConfig+0x148>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d017      	beq.n	800b886 <TIM_Base_SetConfig+0xaa>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a33      	ldr	r2, [pc, #204]	@ (800b928 <TIM_Base_SetConfig+0x14c>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d013      	beq.n	800b886 <TIM_Base_SetConfig+0xaa>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a32      	ldr	r2, [pc, #200]	@ (800b92c <TIM_Base_SetConfig+0x150>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d00f      	beq.n	800b886 <TIM_Base_SetConfig+0xaa>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a31      	ldr	r2, [pc, #196]	@ (800b930 <TIM_Base_SetConfig+0x154>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d00b      	beq.n	800b886 <TIM_Base_SetConfig+0xaa>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a30      	ldr	r2, [pc, #192]	@ (800b934 <TIM_Base_SetConfig+0x158>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d007      	beq.n	800b886 <TIM_Base_SetConfig+0xaa>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a2f      	ldr	r2, [pc, #188]	@ (800b938 <TIM_Base_SetConfig+0x15c>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d003      	beq.n	800b886 <TIM_Base_SetConfig+0xaa>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a2e      	ldr	r2, [pc, #184]	@ (800b93c <TIM_Base_SetConfig+0x160>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d108      	bne.n	800b898 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b88c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	4313      	orrs	r3, r2
 800b896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	689a      	ldr	r2, [r3, #8]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a16      	ldr	r2, [pc, #88]	@ (800b918 <TIM_Base_SetConfig+0x13c>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d00f      	beq.n	800b8e4 <TIM_Base_SetConfig+0x108>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a18      	ldr	r2, [pc, #96]	@ (800b928 <TIM_Base_SetConfig+0x14c>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00b      	beq.n	800b8e4 <TIM_Base_SetConfig+0x108>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a17      	ldr	r2, [pc, #92]	@ (800b92c <TIM_Base_SetConfig+0x150>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d007      	beq.n	800b8e4 <TIM_Base_SetConfig+0x108>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a16      	ldr	r2, [pc, #88]	@ (800b930 <TIM_Base_SetConfig+0x154>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d003      	beq.n	800b8e4 <TIM_Base_SetConfig+0x108>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a15      	ldr	r2, [pc, #84]	@ (800b934 <TIM_Base_SetConfig+0x158>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d103      	bne.n	800b8ec <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	691a      	ldr	r2, [r3, #16]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d105      	bne.n	800b90a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	f023 0201 	bic.w	r2, r3, #1
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	611a      	str	r2, [r3, #16]
  }
}
 800b90a:	bf00      	nop
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	40010000 	.word	0x40010000
 800b91c:	40000400 	.word	0x40000400
 800b920:	40000800 	.word	0x40000800
 800b924:	40000c00 	.word	0x40000c00
 800b928:	40010400 	.word	0x40010400
 800b92c:	40014000 	.word	0x40014000
 800b930:	40014400 	.word	0x40014400
 800b934:	40014800 	.word	0x40014800
 800b938:	4000e000 	.word	0x4000e000
 800b93c:	4000e400 	.word	0x4000e400

0800b940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	f023 0201 	bic.w	r2, r3, #1
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4b37      	ldr	r3, [pc, #220]	@ (800ba48 <TIM_OC1_SetConfig+0x108>)
 800b96c:	4013      	ands	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f023 0303 	bic.w	r3, r3, #3
 800b976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4313      	orrs	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f023 0302 	bic.w	r3, r3, #2
 800b988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	4313      	orrs	r3, r2
 800b992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a2d      	ldr	r2, [pc, #180]	@ (800ba4c <TIM_OC1_SetConfig+0x10c>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d00f      	beq.n	800b9bc <TIM_OC1_SetConfig+0x7c>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a2c      	ldr	r2, [pc, #176]	@ (800ba50 <TIM_OC1_SetConfig+0x110>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d00b      	beq.n	800b9bc <TIM_OC1_SetConfig+0x7c>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a2b      	ldr	r2, [pc, #172]	@ (800ba54 <TIM_OC1_SetConfig+0x114>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d007      	beq.n	800b9bc <TIM_OC1_SetConfig+0x7c>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a2a      	ldr	r2, [pc, #168]	@ (800ba58 <TIM_OC1_SetConfig+0x118>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d003      	beq.n	800b9bc <TIM_OC1_SetConfig+0x7c>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	4a29      	ldr	r2, [pc, #164]	@ (800ba5c <TIM_OC1_SetConfig+0x11c>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d10c      	bne.n	800b9d6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f023 0308 	bic.w	r3, r3, #8
 800b9c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f023 0304 	bic.w	r3, r3, #4
 800b9d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a1c      	ldr	r2, [pc, #112]	@ (800ba4c <TIM_OC1_SetConfig+0x10c>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00f      	beq.n	800b9fe <TIM_OC1_SetConfig+0xbe>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a1b      	ldr	r2, [pc, #108]	@ (800ba50 <TIM_OC1_SetConfig+0x110>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d00b      	beq.n	800b9fe <TIM_OC1_SetConfig+0xbe>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a1a      	ldr	r2, [pc, #104]	@ (800ba54 <TIM_OC1_SetConfig+0x114>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d007      	beq.n	800b9fe <TIM_OC1_SetConfig+0xbe>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a19      	ldr	r2, [pc, #100]	@ (800ba58 <TIM_OC1_SetConfig+0x118>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d003      	beq.n	800b9fe <TIM_OC1_SetConfig+0xbe>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a18      	ldr	r2, [pc, #96]	@ (800ba5c <TIM_OC1_SetConfig+0x11c>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d111      	bne.n	800ba22 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	693a      	ldr	r2, [r7, #16]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	693a      	ldr	r2, [r7, #16]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	621a      	str	r2, [r3, #32]
}
 800ba3c:	bf00      	nop
 800ba3e:	371c      	adds	r7, #28
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	fffeff8f 	.word	0xfffeff8f
 800ba4c:	40010000 	.word	0x40010000
 800ba50:	40010400 	.word	0x40010400
 800ba54:	40014000 	.word	0x40014000
 800ba58:	40014400 	.word	0x40014400
 800ba5c:	40014800 	.word	0x40014800

0800ba60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b087      	sub	sp, #28
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	f023 0210 	bic.w	r2, r3, #16
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	4b34      	ldr	r3, [pc, #208]	@ (800bb5c <TIM_OC2_SetConfig+0xfc>)
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	021b      	lsls	r3, r3, #8
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f023 0320 	bic.w	r3, r3, #32
 800baaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	011b      	lsls	r3, r3, #4
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a29      	ldr	r2, [pc, #164]	@ (800bb60 <TIM_OC2_SetConfig+0x100>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d003      	beq.n	800bac8 <TIM_OC2_SetConfig+0x68>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a28      	ldr	r2, [pc, #160]	@ (800bb64 <TIM_OC2_SetConfig+0x104>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d10d      	bne.n	800bae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	011b      	lsls	r3, r3, #4
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	4313      	orrs	r3, r2
 800bada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a1e      	ldr	r2, [pc, #120]	@ (800bb60 <TIM_OC2_SetConfig+0x100>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d00f      	beq.n	800bb0c <TIM_OC2_SetConfig+0xac>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a1d      	ldr	r2, [pc, #116]	@ (800bb64 <TIM_OC2_SetConfig+0x104>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d00b      	beq.n	800bb0c <TIM_OC2_SetConfig+0xac>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a1c      	ldr	r2, [pc, #112]	@ (800bb68 <TIM_OC2_SetConfig+0x108>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d007      	beq.n	800bb0c <TIM_OC2_SetConfig+0xac>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a1b      	ldr	r2, [pc, #108]	@ (800bb6c <TIM_OC2_SetConfig+0x10c>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d003      	beq.n	800bb0c <TIM_OC2_SetConfig+0xac>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a1a      	ldr	r2, [pc, #104]	@ (800bb70 <TIM_OC2_SetConfig+0x110>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d113      	bne.n	800bb34 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bb1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	695b      	ldr	r3, [r3, #20]
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	699b      	ldr	r3, [r3, #24]
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	621a      	str	r2, [r3, #32]
}
 800bb4e:	bf00      	nop
 800bb50:	371c      	adds	r7, #28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	feff8fff 	.word	0xfeff8fff
 800bb60:	40010000 	.word	0x40010000
 800bb64:	40010400 	.word	0x40010400
 800bb68:	40014000 	.word	0x40014000
 800bb6c:	40014400 	.word	0x40014400
 800bb70:	40014800 	.word	0x40014800

0800bb74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b087      	sub	sp, #28
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6a1b      	ldr	r3, [r3, #32]
 800bb88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	69db      	ldr	r3, [r3, #28]
 800bb9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	4b33      	ldr	r3, [pc, #204]	@ (800bc6c <TIM_OC3_SetConfig+0xf8>)
 800bba0:	4013      	ands	r3, r2
 800bba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0303 	bic.w	r3, r3, #3
 800bbaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bbbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	021b      	lsls	r3, r3, #8
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a28      	ldr	r2, [pc, #160]	@ (800bc70 <TIM_OC3_SetConfig+0xfc>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d003      	beq.n	800bbda <TIM_OC3_SetConfig+0x66>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4a27      	ldr	r2, [pc, #156]	@ (800bc74 <TIM_OC3_SetConfig+0x100>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d10d      	bne.n	800bbf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bbe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	021b      	lsls	r3, r3, #8
 800bbe8:	697a      	ldr	r2, [r7, #20]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bbf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a1d      	ldr	r2, [pc, #116]	@ (800bc70 <TIM_OC3_SetConfig+0xfc>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d00f      	beq.n	800bc1e <TIM_OC3_SetConfig+0xaa>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a1c      	ldr	r2, [pc, #112]	@ (800bc74 <TIM_OC3_SetConfig+0x100>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d00b      	beq.n	800bc1e <TIM_OC3_SetConfig+0xaa>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a1b      	ldr	r2, [pc, #108]	@ (800bc78 <TIM_OC3_SetConfig+0x104>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d007      	beq.n	800bc1e <TIM_OC3_SetConfig+0xaa>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a1a      	ldr	r2, [pc, #104]	@ (800bc7c <TIM_OC3_SetConfig+0x108>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d003      	beq.n	800bc1e <TIM_OC3_SetConfig+0xaa>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a19      	ldr	r2, [pc, #100]	@ (800bc80 <TIM_OC3_SetConfig+0x10c>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d113      	bne.n	800bc46 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bc2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	011b      	lsls	r3, r3, #4
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	699b      	ldr	r3, [r3, #24]
 800bc3e:	011b      	lsls	r3, r3, #4
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	685a      	ldr	r2, [r3, #4]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	621a      	str	r2, [r3, #32]
}
 800bc60:	bf00      	nop
 800bc62:	371c      	adds	r7, #28
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	fffeff8f 	.word	0xfffeff8f
 800bc70:	40010000 	.word	0x40010000
 800bc74:	40010400 	.word	0x40010400
 800bc78:	40014000 	.word	0x40014000
 800bc7c:	40014400 	.word	0x40014400
 800bc80:	40014800 	.word	0x40014800

0800bc84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a1b      	ldr	r3, [r3, #32]
 800bc98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	69db      	ldr	r3, [r3, #28]
 800bcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	4b24      	ldr	r3, [pc, #144]	@ (800bd40 <TIM_OC4_SetConfig+0xbc>)
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	021b      	lsls	r3, r3, #8
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bcce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	031b      	lsls	r3, r3, #12
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a19      	ldr	r2, [pc, #100]	@ (800bd44 <TIM_OC4_SetConfig+0xc0>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d00f      	beq.n	800bd04 <TIM_OC4_SetConfig+0x80>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a18      	ldr	r2, [pc, #96]	@ (800bd48 <TIM_OC4_SetConfig+0xc4>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d00b      	beq.n	800bd04 <TIM_OC4_SetConfig+0x80>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a17      	ldr	r2, [pc, #92]	@ (800bd4c <TIM_OC4_SetConfig+0xc8>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d007      	beq.n	800bd04 <TIM_OC4_SetConfig+0x80>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a16      	ldr	r2, [pc, #88]	@ (800bd50 <TIM_OC4_SetConfig+0xcc>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d003      	beq.n	800bd04 <TIM_OC4_SetConfig+0x80>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a15      	ldr	r2, [pc, #84]	@ (800bd54 <TIM_OC4_SetConfig+0xd0>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d109      	bne.n	800bd18 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	695b      	ldr	r3, [r3, #20]
 800bd10:	019b      	lsls	r3, r3, #6
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	693a      	ldr	r2, [r7, #16]
 800bd30:	621a      	str	r2, [r3, #32]
}
 800bd32:	bf00      	nop
 800bd34:	371c      	adds	r7, #28
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	feff8fff 	.word	0xfeff8fff
 800bd44:	40010000 	.word	0x40010000
 800bd48:	40010400 	.word	0x40010400
 800bd4c:	40014000 	.word	0x40014000
 800bd50:	40014400 	.word	0x40014400
 800bd54:	40014800 	.word	0x40014800

0800bd58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a1b      	ldr	r3, [r3, #32]
 800bd6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	4b21      	ldr	r3, [pc, #132]	@ (800be08 <TIM_OC5_SetConfig+0xb0>)
 800bd84:	4013      	ands	r3, r2
 800bd86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bd98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	041b      	lsls	r3, r3, #16
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4a18      	ldr	r2, [pc, #96]	@ (800be0c <TIM_OC5_SetConfig+0xb4>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d00f      	beq.n	800bdce <TIM_OC5_SetConfig+0x76>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4a17      	ldr	r2, [pc, #92]	@ (800be10 <TIM_OC5_SetConfig+0xb8>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d00b      	beq.n	800bdce <TIM_OC5_SetConfig+0x76>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a16      	ldr	r2, [pc, #88]	@ (800be14 <TIM_OC5_SetConfig+0xbc>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d007      	beq.n	800bdce <TIM_OC5_SetConfig+0x76>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a15      	ldr	r2, [pc, #84]	@ (800be18 <TIM_OC5_SetConfig+0xc0>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d003      	beq.n	800bdce <TIM_OC5_SetConfig+0x76>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a14      	ldr	r2, [pc, #80]	@ (800be1c <TIM_OC5_SetConfig+0xc4>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d109      	bne.n	800bde2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bdd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	021b      	lsls	r3, r3, #8
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	685a      	ldr	r2, [r3, #4]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	693a      	ldr	r2, [r7, #16]
 800bdfa:	621a      	str	r2, [r3, #32]
}
 800bdfc:	bf00      	nop
 800bdfe:	371c      	adds	r7, #28
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	fffeff8f 	.word	0xfffeff8f
 800be0c:	40010000 	.word	0x40010000
 800be10:	40010400 	.word	0x40010400
 800be14:	40014000 	.word	0x40014000
 800be18:	40014400 	.word	0x40014400
 800be1c:	40014800 	.word	0x40014800

0800be20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be20:	b480      	push	{r7}
 800be22:	b087      	sub	sp, #28
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4b22      	ldr	r3, [pc, #136]	@ (800bed4 <TIM_OC6_SetConfig+0xb4>)
 800be4c:	4013      	ands	r3, r2
 800be4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	021b      	lsls	r3, r3, #8
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	4313      	orrs	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800be62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	051b      	lsls	r3, r3, #20
 800be6a:	693a      	ldr	r2, [r7, #16]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a19      	ldr	r2, [pc, #100]	@ (800bed8 <TIM_OC6_SetConfig+0xb8>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d00f      	beq.n	800be98 <TIM_OC6_SetConfig+0x78>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4a18      	ldr	r2, [pc, #96]	@ (800bedc <TIM_OC6_SetConfig+0xbc>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d00b      	beq.n	800be98 <TIM_OC6_SetConfig+0x78>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a17      	ldr	r2, [pc, #92]	@ (800bee0 <TIM_OC6_SetConfig+0xc0>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d007      	beq.n	800be98 <TIM_OC6_SetConfig+0x78>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a16      	ldr	r2, [pc, #88]	@ (800bee4 <TIM_OC6_SetConfig+0xc4>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d003      	beq.n	800be98 <TIM_OC6_SetConfig+0x78>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4a15      	ldr	r2, [pc, #84]	@ (800bee8 <TIM_OC6_SetConfig+0xc8>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d109      	bne.n	800beac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	029b      	lsls	r3, r3, #10
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	4313      	orrs	r3, r2
 800beaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	685a      	ldr	r2, [r3, #4]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	621a      	str	r2, [r3, #32]
}
 800bec6:	bf00      	nop
 800bec8:	371c      	adds	r7, #28
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	feff8fff 	.word	0xfeff8fff
 800bed8:	40010000 	.word	0x40010000
 800bedc:	40010400 	.word	0x40010400
 800bee0:	40014000 	.word	0x40014000
 800bee4:	40014400 	.word	0x40014400
 800bee8:	40014800 	.word	0x40014800

0800beec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800beec:	b480      	push	{r7}
 800beee:	b087      	sub	sp, #28
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6a1b      	ldr	r3, [r3, #32]
 800befc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	f023 0201 	bic.w	r2, r3, #1
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bf16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	011b      	lsls	r3, r3, #4
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f023 030a 	bic.w	r3, r3, #10
 800bf28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	621a      	str	r2, [r3, #32]
}
 800bf3e:	bf00      	nop
 800bf40:	371c      	adds	r7, #28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b087      	sub	sp, #28
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	60f8      	str	r0, [r7, #12]
 800bf52:	60b9      	str	r1, [r7, #8]
 800bf54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6a1b      	ldr	r3, [r3, #32]
 800bf60:	f023 0210 	bic.w	r2, r3, #16
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	031b      	lsls	r3, r3, #12
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	621a      	str	r2, [r3, #32]
}
 800bf9e:	bf00      	nop
 800bfa0:	371c      	adds	r7, #28
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
	...

0800bfac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	4b09      	ldr	r3, [pc, #36]	@ (800bfe4 <TIM_ITRx_SetConfig+0x38>)
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	f043 0307 	orr.w	r3, r3, #7
 800bfce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	609a      	str	r2, [r3, #8]
}
 800bfd6:	bf00      	nop
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	ffcfff8f 	.word	0xffcfff8f

0800bfe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b087      	sub	sp, #28
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
 800bff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	021a      	lsls	r2, r3, #8
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	431a      	orrs	r2, r3
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	4313      	orrs	r3, r2
 800c010:	697a      	ldr	r2, [r7, #20]
 800c012:	4313      	orrs	r3, r2
 800c014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	697a      	ldr	r2, [r7, #20]
 800c01a:	609a      	str	r2, [r3, #8]
}
 800c01c:	bf00      	nop
 800c01e:	371c      	adds	r7, #28
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d101      	bne.n	800c040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c03c:	2302      	movs	r3, #2
 800c03e:	e077      	b.n	800c130 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2202      	movs	r2, #2
 800c04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a35      	ldr	r2, [pc, #212]	@ (800c13c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d004      	beq.n	800c074 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a34      	ldr	r2, [pc, #208]	@ (800c140 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d108      	bne.n	800c086 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c07a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	4313      	orrs	r3, r2
 800c084:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c08c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	4313      	orrs	r3, r2
 800c096:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a25      	ldr	r2, [pc, #148]	@ (800c13c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d02c      	beq.n	800c104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b2:	d027      	beq.n	800c104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a22      	ldr	r2, [pc, #136]	@ (800c144 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d022      	beq.n	800c104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a21      	ldr	r2, [pc, #132]	@ (800c148 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d01d      	beq.n	800c104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a1f      	ldr	r2, [pc, #124]	@ (800c14c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d018      	beq.n	800c104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a1a      	ldr	r2, [pc, #104]	@ (800c140 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d013      	beq.n	800c104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a1b      	ldr	r2, [pc, #108]	@ (800c150 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d00e      	beq.n	800c104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a1a      	ldr	r2, [pc, #104]	@ (800c154 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d009      	beq.n	800c104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a18      	ldr	r2, [pc, #96]	@ (800c158 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d004      	beq.n	800c104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a17      	ldr	r2, [pc, #92]	@ (800c15c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d10c      	bne.n	800c11e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c10a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	4313      	orrs	r3, r2
 800c114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3714      	adds	r7, #20
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr
 800c13c:	40010000 	.word	0x40010000
 800c140:	40010400 	.word	0x40010400
 800c144:	40000400 	.word	0x40000400
 800c148:	40000800 	.word	0x40000800
 800c14c:	40000c00 	.word	0x40000c00
 800c150:	40001800 	.word	0x40001800
 800c154:	40014000 	.word	0x40014000
 800c158:	4000e000 	.word	0x4000e000
 800c15c:	4000e400 	.word	0x4000e400

0800c160 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c16a:	2300      	movs	r3, #0
 800c16c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c174:	2b01      	cmp	r3, #1
 800c176:	d101      	bne.n	800c17c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c178:	2302      	movs	r3, #2
 800c17a:	e073      	b.n	800c264 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	4313      	orrs	r3, r2
 800c190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	699b      	ldr	r3, [r3, #24]
 800c1f0:	041b      	lsls	r3, r3, #16
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	69db      	ldr	r3, [r3, #28]
 800c200:	4313      	orrs	r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a19      	ldr	r2, [pc, #100]	@ (800c270 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d004      	beq.n	800c218 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a18      	ldr	r2, [pc, #96]	@ (800c274 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d11c      	bne.n	800c252 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c222:	051b      	lsls	r3, r3, #20
 800c224:	4313      	orrs	r3, r2
 800c226:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	4313      	orrs	r3, r2
 800c234:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c240:	4313      	orrs	r3, r2
 800c242:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c24e:	4313      	orrs	r3, r2
 800c250:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3714      	adds	r7, #20
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr
 800c270:	40010000 	.word	0x40010000
 800c274:	40010400 	.word	0x40010400

0800c278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d101      	bne.n	800c28a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c286:	2301      	movs	r3, #1
 800c288:	e042      	b.n	800c310 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c290:	2b00      	cmp	r3, #0
 800c292:	d106      	bne.n	800c2a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7f6 fd0d 	bl	8002cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2224      	movs	r2, #36	@ 0x24
 800c2a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0201 	bic.w	r2, r2, #1
 800c2b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f001 fa6e 	bl	800d7a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fbff 	bl	800cacc <UART_SetConfig>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d101      	bne.n	800c2d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e01b      	b.n	800c310 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	685a      	ldr	r2, [r3, #4]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c2e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	689a      	ldr	r2, [r3, #8]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c2f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f042 0201 	orr.w	r2, r2, #1
 800c306:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f001 faed 	bl	800d8e8 <UART_CheckIdleState>
 800c30e:	4603      	mov	r3, r0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b0ba      	sub	sp, #232	@ 0xe8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	69db      	ldr	r3, [r3, #28]
 800c326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c33e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c342:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c346:	4013      	ands	r3, r2
 800c348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c34c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c350:	2b00      	cmp	r3, #0
 800c352:	d11b      	bne.n	800c38c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c358:	f003 0320 	and.w	r3, r3, #32
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d015      	beq.n	800c38c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c364:	f003 0320 	and.w	r3, r3, #32
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d105      	bne.n	800c378 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c36c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d009      	beq.n	800c38c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f000 8377 	beq.w	800ca70 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	4798      	blx	r3
      }
      return;
 800c38a:	e371      	b.n	800ca70 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c38c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 8123 	beq.w	800c5dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c396:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c39a:	4b8d      	ldr	r3, [pc, #564]	@ (800c5d0 <HAL_UART_IRQHandler+0x2b8>)
 800c39c:	4013      	ands	r3, r2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d106      	bne.n	800c3b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c3a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c3a6:	4b8b      	ldr	r3, [pc, #556]	@ (800c5d4 <HAL_UART_IRQHandler+0x2bc>)
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f000 8116 	beq.w	800c5dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3b4:	f003 0301 	and.w	r3, r3, #1
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d011      	beq.n	800c3e0 <HAL_UART_IRQHandler+0xc8>
 800c3bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00b      	beq.n	800c3e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3d6:	f043 0201 	orr.w	r2, r3, #1
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3e4:	f003 0302 	and.w	r3, r3, #2
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d011      	beq.n	800c410 <HAL_UART_IRQHandler+0xf8>
 800c3ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00b      	beq.n	800c410 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2202      	movs	r2, #2
 800c3fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c406:	f043 0204 	orr.w	r2, r3, #4
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c414:	f003 0304 	and.w	r3, r3, #4
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d011      	beq.n	800c440 <HAL_UART_IRQHandler+0x128>
 800c41c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c420:	f003 0301 	and.w	r3, r3, #1
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00b      	beq.n	800c440 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2204      	movs	r2, #4
 800c42e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c436:	f043 0202 	orr.w	r2, r3, #2
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c444:	f003 0308 	and.w	r3, r3, #8
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d017      	beq.n	800c47c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c450:	f003 0320 	and.w	r3, r3, #32
 800c454:	2b00      	cmp	r3, #0
 800c456:	d105      	bne.n	800c464 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c458:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c45c:	4b5c      	ldr	r3, [pc, #368]	@ (800c5d0 <HAL_UART_IRQHandler+0x2b8>)
 800c45e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00b      	beq.n	800c47c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2208      	movs	r2, #8
 800c46a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c472:	f043 0208 	orr.w	r2, r3, #8
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c484:	2b00      	cmp	r3, #0
 800c486:	d012      	beq.n	800c4ae <HAL_UART_IRQHandler+0x196>
 800c488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c48c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00c      	beq.n	800c4ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c49c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4a4:	f043 0220 	orr.w	r2, r3, #32
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f000 82dd 	beq.w	800ca74 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4be:	f003 0320 	and.w	r3, r3, #32
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d013      	beq.n	800c4ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c4c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4ca:	f003 0320 	and.w	r3, r3, #32
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d105      	bne.n	800c4de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c4d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d007      	beq.n	800c4ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c502:	2b40      	cmp	r3, #64	@ 0x40
 800c504:	d005      	beq.n	800c512 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c50a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d054      	beq.n	800c5bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f001 fb00 	bl	800db18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c522:	2b40      	cmp	r3, #64	@ 0x40
 800c524:	d146      	bne.n	800c5b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3308      	adds	r3, #8
 800c52c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c530:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c534:	e853 3f00 	ldrex	r3, [r3]
 800c538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c53c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3308      	adds	r3, #8
 800c54e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c552:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c55e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c56a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1d9      	bne.n	800c526 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d017      	beq.n	800c5ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c582:	4a15      	ldr	r2, [pc, #84]	@ (800c5d8 <HAL_UART_IRQHandler+0x2c0>)
 800c584:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7f9 f89f 	bl	80056d0 <HAL_DMA_Abort_IT>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d019      	beq.n	800c5cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c59e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5aa:	e00f      	b.n	800c5cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 fa77 	bl	800caa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5b2:	e00b      	b.n	800c5cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fa73 	bl	800caa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5ba:	e007      	b.n	800c5cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fa6f 	bl	800caa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c5ca:	e253      	b.n	800ca74 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5cc:	bf00      	nop
    return;
 800c5ce:	e251      	b.n	800ca74 <HAL_UART_IRQHandler+0x75c>
 800c5d0:	10000001 	.word	0x10000001
 800c5d4:	04000120 	.word	0x04000120
 800c5d8:	0800dbe5 	.word	0x0800dbe5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	f040 81e7 	bne.w	800c9b4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c5e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5ea:	f003 0310 	and.w	r3, r3, #16
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f000 81e0 	beq.w	800c9b4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c5f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5f8:	f003 0310 	and.w	r3, r3, #16
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f000 81d9 	beq.w	800c9b4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2210      	movs	r2, #16
 800c608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c614:	2b40      	cmp	r3, #64	@ 0x40
 800c616:	f040 8151 	bne.w	800c8bc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a96      	ldr	r2, [pc, #600]	@ (800c87c <HAL_UART_IRQHandler+0x564>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d068      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a93      	ldr	r2, [pc, #588]	@ (800c880 <HAL_UART_IRQHandler+0x568>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d061      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a91      	ldr	r2, [pc, #580]	@ (800c884 <HAL_UART_IRQHandler+0x56c>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d05a      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a8e      	ldr	r2, [pc, #568]	@ (800c888 <HAL_UART_IRQHandler+0x570>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d053      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a8c      	ldr	r2, [pc, #560]	@ (800c88c <HAL_UART_IRQHandler+0x574>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d04c      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a89      	ldr	r2, [pc, #548]	@ (800c890 <HAL_UART_IRQHandler+0x578>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d045      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a87      	ldr	r2, [pc, #540]	@ (800c894 <HAL_UART_IRQHandler+0x57c>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d03e      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a84      	ldr	r2, [pc, #528]	@ (800c898 <HAL_UART_IRQHandler+0x580>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d037      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a82      	ldr	r2, [pc, #520]	@ (800c89c <HAL_UART_IRQHandler+0x584>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d030      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a7f      	ldr	r2, [pc, #508]	@ (800c8a0 <HAL_UART_IRQHandler+0x588>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d029      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a7d      	ldr	r2, [pc, #500]	@ (800c8a4 <HAL_UART_IRQHandler+0x58c>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d022      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a7a      	ldr	r2, [pc, #488]	@ (800c8a8 <HAL_UART_IRQHandler+0x590>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d01b      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a78      	ldr	r2, [pc, #480]	@ (800c8ac <HAL_UART_IRQHandler+0x594>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d014      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a75      	ldr	r2, [pc, #468]	@ (800c8b0 <HAL_UART_IRQHandler+0x598>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d00d      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a73      	ldr	r2, [pc, #460]	@ (800c8b4 <HAL_UART_IRQHandler+0x59c>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d006      	beq.n	800c6fa <HAL_UART_IRQHandler+0x3e2>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a70      	ldr	r2, [pc, #448]	@ (800c8b8 <HAL_UART_IRQHandler+0x5a0>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d106      	bne.n	800c708 <HAL_UART_IRQHandler+0x3f0>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	b29b      	uxth	r3, r3
 800c706:	e005      	b.n	800c714 <HAL_UART_IRQHandler+0x3fc>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	b29b      	uxth	r3, r3
 800c714:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 81ab 	beq.w	800ca78 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c72c:	429a      	cmp	r2, r3
 800c72e:	f080 81a3 	bcs.w	800ca78 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c738:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c742:	69db      	ldr	r3, [r3, #28]
 800c744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c748:	f000 8087 	beq.w	800c85a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c758:	e853 3f00 	ldrex	r3, [r3]
 800c75c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c760:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	461a      	mov	r2, r3
 800c772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c77a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c782:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c786:	e841 2300 	strex	r3, r2, [r1]
 800c78a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c78e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1da      	bne.n	800c74c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3308      	adds	r3, #8
 800c79c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7a0:	e853 3f00 	ldrex	r3, [r3]
 800c7a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c7a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c7a8:	f023 0301 	bic.w	r3, r3, #1
 800c7ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3308      	adds	r3, #8
 800c7b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c7ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c7be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c7c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c7c6:	e841 2300 	strex	r3, r2, [r1]
 800c7ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c7cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1e1      	bne.n	800c796 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	3308      	adds	r3, #8
 800c7d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7dc:	e853 3f00 	ldrex	r3, [r3]
 800c7e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c7e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	3308      	adds	r3, #8
 800c7f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c7f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7fe:	e841 2300 	strex	r3, r2, [r1]
 800c802:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1e3      	bne.n	800c7d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2220      	movs	r2, #32
 800c80e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c820:	e853 3f00 	ldrex	r3, [r3]
 800c824:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c828:	f023 0310 	bic.w	r3, r3, #16
 800c82c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	461a      	mov	r2, r3
 800c836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c83a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c83c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c840:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c842:	e841 2300 	strex	r3, r2, [r1]
 800c846:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1e4      	bne.n	800c818 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c854:	4618      	mov	r0, r3
 800c856:	f7f8 fc1d 	bl	8005094 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2202      	movs	r2, #2
 800c85e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	b29b      	uxth	r3, r3
 800c872:	4619      	mov	r1, r3
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 f91d 	bl	800cab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c87a:	e0fd      	b.n	800ca78 <HAL_UART_IRQHandler+0x760>
 800c87c:	40020010 	.word	0x40020010
 800c880:	40020028 	.word	0x40020028
 800c884:	40020040 	.word	0x40020040
 800c888:	40020058 	.word	0x40020058
 800c88c:	40020070 	.word	0x40020070
 800c890:	40020088 	.word	0x40020088
 800c894:	400200a0 	.word	0x400200a0
 800c898:	400200b8 	.word	0x400200b8
 800c89c:	40020410 	.word	0x40020410
 800c8a0:	40020428 	.word	0x40020428
 800c8a4:	40020440 	.word	0x40020440
 800c8a8:	40020458 	.word	0x40020458
 800c8ac:	40020470 	.word	0x40020470
 800c8b0:	40020488 	.word	0x40020488
 800c8b4:	400204a0 	.word	0x400204a0
 800c8b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	1ad3      	subs	r3, r2, r3
 800c8cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f000 80cf 	beq.w	800ca7c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c8de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f000 80ca 	beq.w	800ca7c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f0:	e853 3f00 	ldrex	r3, [r3]
 800c8f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	461a      	mov	r2, r3
 800c906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c90a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c90c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c912:	e841 2300 	strex	r3, r2, [r1]
 800c916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e4      	bne.n	800c8e8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3308      	adds	r3, #8
 800c924:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c928:	e853 3f00 	ldrex	r3, [r3]
 800c92c:	623b      	str	r3, [r7, #32]
   return(result);
 800c92e:	6a3a      	ldr	r2, [r7, #32]
 800c930:	4b55      	ldr	r3, [pc, #340]	@ (800ca88 <HAL_UART_IRQHandler+0x770>)
 800c932:	4013      	ands	r3, r2
 800c934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3308      	adds	r3, #8
 800c93e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c942:	633a      	str	r2, [r7, #48]	@ 0x30
 800c944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c94a:	e841 2300 	strex	r3, r2, [r1]
 800c94e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1e3      	bne.n	800c91e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2220      	movs	r2, #32
 800c95a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	e853 3f00 	ldrex	r3, [r3]
 800c976:	60fb      	str	r3, [r7, #12]
   return(result);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f023 0310 	bic.w	r3, r3, #16
 800c97e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	461a      	mov	r2, r3
 800c988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c98c:	61fb      	str	r3, [r7, #28]
 800c98e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c990:	69b9      	ldr	r1, [r7, #24]
 800c992:	69fa      	ldr	r2, [r7, #28]
 800c994:	e841 2300 	strex	r3, r2, [r1]
 800c998:	617b      	str	r3, [r7, #20]
   return(result);
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1e4      	bne.n	800c96a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2202      	movs	r2, #2
 800c9a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f881 	bl	800cab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9b2:	e063      	b.n	800ca7c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c9b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00e      	beq.n	800c9de <HAL_UART_IRQHandler+0x6c6>
 800c9c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d008      	beq.n	800c9de <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c9d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f001 f945 	bl	800dc66 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9dc:	e051      	b.n	800ca82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c9de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d014      	beq.n	800ca14 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c9ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d105      	bne.n	800ca02 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c9f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d008      	beq.n	800ca14 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d03a      	beq.n	800ca80 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	4798      	blx	r3
    }
    return;
 800ca12:	e035      	b.n	800ca80 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d009      	beq.n	800ca34 <HAL_UART_IRQHandler+0x71c>
 800ca20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f001 f8ef 	bl	800dc10 <UART_EndTransmit_IT>
    return;
 800ca32:	e026      	b.n	800ca82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ca34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d009      	beq.n	800ca54 <HAL_UART_IRQHandler+0x73c>
 800ca40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d003      	beq.n	800ca54 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f001 f91e 	bl	800dc8e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca52:	e016      	b.n	800ca82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ca54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d010      	beq.n	800ca82 <HAL_UART_IRQHandler+0x76a>
 800ca60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	da0c      	bge.n	800ca82 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f001 f906 	bl	800dc7a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca6e:	e008      	b.n	800ca82 <HAL_UART_IRQHandler+0x76a>
      return;
 800ca70:	bf00      	nop
 800ca72:	e006      	b.n	800ca82 <HAL_UART_IRQHandler+0x76a>
    return;
 800ca74:	bf00      	nop
 800ca76:	e004      	b.n	800ca82 <HAL_UART_IRQHandler+0x76a>
      return;
 800ca78:	bf00      	nop
 800ca7a:	e002      	b.n	800ca82 <HAL_UART_IRQHandler+0x76a>
      return;
 800ca7c:	bf00      	nop
 800ca7e:	e000      	b.n	800ca82 <HAL_UART_IRQHandler+0x76a>
    return;
 800ca80:	bf00      	nop
  }
}
 800ca82:	37e8      	adds	r7, #232	@ 0xe8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	effffffe 	.word	0xeffffffe

0800ca8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ca94:	bf00      	nop
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	460b      	mov	r3, r1
 800cabe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cac0:	bf00      	nop
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cacc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cad0:	b092      	sub	sp, #72	@ 0x48
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	689a      	ldr	r2, [r3, #8]
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	431a      	orrs	r2, r3
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	431a      	orrs	r2, r3
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	69db      	ldr	r3, [r3, #28]
 800caf0:	4313      	orrs	r3, r2
 800caf2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	4bbe      	ldr	r3, [pc, #760]	@ (800cdf4 <UART_SetConfig+0x328>)
 800cafc:	4013      	ands	r3, r2
 800cafe:	697a      	ldr	r2, [r7, #20]
 800cb00:	6812      	ldr	r2, [r2, #0]
 800cb02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb04:	430b      	orrs	r3, r1
 800cb06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	68da      	ldr	r2, [r3, #12]
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	430a      	orrs	r2, r1
 800cb1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4ab3      	ldr	r2, [pc, #716]	@ (800cdf8 <UART_SetConfig+0x32c>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d004      	beq.n	800cb38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb34:	4313      	orrs	r3, r2
 800cb36:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	689a      	ldr	r2, [r3, #8]
 800cb3e:	4baf      	ldr	r3, [pc, #700]	@ (800cdfc <UART_SetConfig+0x330>)
 800cb40:	4013      	ands	r3, r2
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	6812      	ldr	r2, [r2, #0]
 800cb46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb48:	430b      	orrs	r3, r1
 800cb4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb52:	f023 010f 	bic.w	r1, r3, #15
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	430a      	orrs	r2, r1
 800cb60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4aa6      	ldr	r2, [pc, #664]	@ (800ce00 <UART_SetConfig+0x334>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d177      	bne.n	800cc5c <UART_SetConfig+0x190>
 800cb6c:	4ba5      	ldr	r3, [pc, #660]	@ (800ce04 <UART_SetConfig+0x338>)
 800cb6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb74:	2b28      	cmp	r3, #40	@ 0x28
 800cb76:	d86d      	bhi.n	800cc54 <UART_SetConfig+0x188>
 800cb78:	a201      	add	r2, pc, #4	@ (adr r2, 800cb80 <UART_SetConfig+0xb4>)
 800cb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7e:	bf00      	nop
 800cb80:	0800cc25 	.word	0x0800cc25
 800cb84:	0800cc55 	.word	0x0800cc55
 800cb88:	0800cc55 	.word	0x0800cc55
 800cb8c:	0800cc55 	.word	0x0800cc55
 800cb90:	0800cc55 	.word	0x0800cc55
 800cb94:	0800cc55 	.word	0x0800cc55
 800cb98:	0800cc55 	.word	0x0800cc55
 800cb9c:	0800cc55 	.word	0x0800cc55
 800cba0:	0800cc2d 	.word	0x0800cc2d
 800cba4:	0800cc55 	.word	0x0800cc55
 800cba8:	0800cc55 	.word	0x0800cc55
 800cbac:	0800cc55 	.word	0x0800cc55
 800cbb0:	0800cc55 	.word	0x0800cc55
 800cbb4:	0800cc55 	.word	0x0800cc55
 800cbb8:	0800cc55 	.word	0x0800cc55
 800cbbc:	0800cc55 	.word	0x0800cc55
 800cbc0:	0800cc35 	.word	0x0800cc35
 800cbc4:	0800cc55 	.word	0x0800cc55
 800cbc8:	0800cc55 	.word	0x0800cc55
 800cbcc:	0800cc55 	.word	0x0800cc55
 800cbd0:	0800cc55 	.word	0x0800cc55
 800cbd4:	0800cc55 	.word	0x0800cc55
 800cbd8:	0800cc55 	.word	0x0800cc55
 800cbdc:	0800cc55 	.word	0x0800cc55
 800cbe0:	0800cc3d 	.word	0x0800cc3d
 800cbe4:	0800cc55 	.word	0x0800cc55
 800cbe8:	0800cc55 	.word	0x0800cc55
 800cbec:	0800cc55 	.word	0x0800cc55
 800cbf0:	0800cc55 	.word	0x0800cc55
 800cbf4:	0800cc55 	.word	0x0800cc55
 800cbf8:	0800cc55 	.word	0x0800cc55
 800cbfc:	0800cc55 	.word	0x0800cc55
 800cc00:	0800cc45 	.word	0x0800cc45
 800cc04:	0800cc55 	.word	0x0800cc55
 800cc08:	0800cc55 	.word	0x0800cc55
 800cc0c:	0800cc55 	.word	0x0800cc55
 800cc10:	0800cc55 	.word	0x0800cc55
 800cc14:	0800cc55 	.word	0x0800cc55
 800cc18:	0800cc55 	.word	0x0800cc55
 800cc1c:	0800cc55 	.word	0x0800cc55
 800cc20:	0800cc4d 	.word	0x0800cc4d
 800cc24:	2301      	movs	r3, #1
 800cc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc2a:	e326      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cc2c:	2304      	movs	r3, #4
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc32:	e322      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cc34:	2308      	movs	r3, #8
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc3a:	e31e      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cc3c:	2310      	movs	r3, #16
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc42:	e31a      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cc44:	2320      	movs	r3, #32
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc4a:	e316      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cc4c:	2340      	movs	r3, #64	@ 0x40
 800cc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc52:	e312      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cc54:	2380      	movs	r3, #128	@ 0x80
 800cc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5a:	e30e      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a69      	ldr	r2, [pc, #420]	@ (800ce08 <UART_SetConfig+0x33c>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d130      	bne.n	800ccc8 <UART_SetConfig+0x1fc>
 800cc66:	4b67      	ldr	r3, [pc, #412]	@ (800ce04 <UART_SetConfig+0x338>)
 800cc68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc6a:	f003 0307 	and.w	r3, r3, #7
 800cc6e:	2b05      	cmp	r3, #5
 800cc70:	d826      	bhi.n	800ccc0 <UART_SetConfig+0x1f4>
 800cc72:	a201      	add	r2, pc, #4	@ (adr r2, 800cc78 <UART_SetConfig+0x1ac>)
 800cc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc78:	0800cc91 	.word	0x0800cc91
 800cc7c:	0800cc99 	.word	0x0800cc99
 800cc80:	0800cca1 	.word	0x0800cca1
 800cc84:	0800cca9 	.word	0x0800cca9
 800cc88:	0800ccb1 	.word	0x0800ccb1
 800cc8c:	0800ccb9 	.word	0x0800ccb9
 800cc90:	2300      	movs	r3, #0
 800cc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc96:	e2f0      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cc98:	2304      	movs	r3, #4
 800cc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc9e:	e2ec      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cca0:	2308      	movs	r3, #8
 800cca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cca6:	e2e8      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cca8:	2310      	movs	r3, #16
 800ccaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccae:	e2e4      	b.n	800d27a <UART_SetConfig+0x7ae>
 800ccb0:	2320      	movs	r3, #32
 800ccb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccb6:	e2e0      	b.n	800d27a <UART_SetConfig+0x7ae>
 800ccb8:	2340      	movs	r3, #64	@ 0x40
 800ccba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccbe:	e2dc      	b.n	800d27a <UART_SetConfig+0x7ae>
 800ccc0:	2380      	movs	r3, #128	@ 0x80
 800ccc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccc6:	e2d8      	b.n	800d27a <UART_SetConfig+0x7ae>
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a4f      	ldr	r2, [pc, #316]	@ (800ce0c <UART_SetConfig+0x340>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d130      	bne.n	800cd34 <UART_SetConfig+0x268>
 800ccd2:	4b4c      	ldr	r3, [pc, #304]	@ (800ce04 <UART_SetConfig+0x338>)
 800ccd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccd6:	f003 0307 	and.w	r3, r3, #7
 800ccda:	2b05      	cmp	r3, #5
 800ccdc:	d826      	bhi.n	800cd2c <UART_SetConfig+0x260>
 800ccde:	a201      	add	r2, pc, #4	@ (adr r2, 800cce4 <UART_SetConfig+0x218>)
 800cce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce4:	0800ccfd 	.word	0x0800ccfd
 800cce8:	0800cd05 	.word	0x0800cd05
 800ccec:	0800cd0d 	.word	0x0800cd0d
 800ccf0:	0800cd15 	.word	0x0800cd15
 800ccf4:	0800cd1d 	.word	0x0800cd1d
 800ccf8:	0800cd25 	.word	0x0800cd25
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd02:	e2ba      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd04:	2304      	movs	r3, #4
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd0a:	e2b6      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd0c:	2308      	movs	r3, #8
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd12:	e2b2      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd14:	2310      	movs	r3, #16
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd1a:	e2ae      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd1c:	2320      	movs	r3, #32
 800cd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd22:	e2aa      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd24:	2340      	movs	r3, #64	@ 0x40
 800cd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2a:	e2a6      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd2c:	2380      	movs	r3, #128	@ 0x80
 800cd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd32:	e2a2      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a35      	ldr	r2, [pc, #212]	@ (800ce10 <UART_SetConfig+0x344>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d130      	bne.n	800cda0 <UART_SetConfig+0x2d4>
 800cd3e:	4b31      	ldr	r3, [pc, #196]	@ (800ce04 <UART_SetConfig+0x338>)
 800cd40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd42:	f003 0307 	and.w	r3, r3, #7
 800cd46:	2b05      	cmp	r3, #5
 800cd48:	d826      	bhi.n	800cd98 <UART_SetConfig+0x2cc>
 800cd4a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd50 <UART_SetConfig+0x284>)
 800cd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd50:	0800cd69 	.word	0x0800cd69
 800cd54:	0800cd71 	.word	0x0800cd71
 800cd58:	0800cd79 	.word	0x0800cd79
 800cd5c:	0800cd81 	.word	0x0800cd81
 800cd60:	0800cd89 	.word	0x0800cd89
 800cd64:	0800cd91 	.word	0x0800cd91
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd6e:	e284      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd70:	2304      	movs	r3, #4
 800cd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd76:	e280      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd78:	2308      	movs	r3, #8
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd7e:	e27c      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd80:	2310      	movs	r3, #16
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd86:	e278      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd88:	2320      	movs	r3, #32
 800cd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd8e:	e274      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd90:	2340      	movs	r3, #64	@ 0x40
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd96:	e270      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cd98:	2380      	movs	r3, #128	@ 0x80
 800cd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9e:	e26c      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a1b      	ldr	r2, [pc, #108]	@ (800ce14 <UART_SetConfig+0x348>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d142      	bne.n	800ce30 <UART_SetConfig+0x364>
 800cdaa:	4b16      	ldr	r3, [pc, #88]	@ (800ce04 <UART_SetConfig+0x338>)
 800cdac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdae:	f003 0307 	and.w	r3, r3, #7
 800cdb2:	2b05      	cmp	r3, #5
 800cdb4:	d838      	bhi.n	800ce28 <UART_SetConfig+0x35c>
 800cdb6:	a201      	add	r2, pc, #4	@ (adr r2, 800cdbc <UART_SetConfig+0x2f0>)
 800cdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdbc:	0800cdd5 	.word	0x0800cdd5
 800cdc0:	0800cddd 	.word	0x0800cddd
 800cdc4:	0800cde5 	.word	0x0800cde5
 800cdc8:	0800cded 	.word	0x0800cded
 800cdcc:	0800ce19 	.word	0x0800ce19
 800cdd0:	0800ce21 	.word	0x0800ce21
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdda:	e24e      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cddc:	2304      	movs	r3, #4
 800cdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cde2:	e24a      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cde4:	2308      	movs	r3, #8
 800cde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdea:	e246      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cdec:	2310      	movs	r3, #16
 800cdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf2:	e242      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cdf4:	cfff69f3 	.word	0xcfff69f3
 800cdf8:	58000c00 	.word	0x58000c00
 800cdfc:	11fff4ff 	.word	0x11fff4ff
 800ce00:	40011000 	.word	0x40011000
 800ce04:	58024400 	.word	0x58024400
 800ce08:	40004400 	.word	0x40004400
 800ce0c:	40004800 	.word	0x40004800
 800ce10:	40004c00 	.word	0x40004c00
 800ce14:	40005000 	.word	0x40005000
 800ce18:	2320      	movs	r3, #32
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce1e:	e22c      	b.n	800d27a <UART_SetConfig+0x7ae>
 800ce20:	2340      	movs	r3, #64	@ 0x40
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce26:	e228      	b.n	800d27a <UART_SetConfig+0x7ae>
 800ce28:	2380      	movs	r3, #128	@ 0x80
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce2e:	e224      	b.n	800d27a <UART_SetConfig+0x7ae>
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4ab1      	ldr	r2, [pc, #708]	@ (800d0fc <UART_SetConfig+0x630>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d176      	bne.n	800cf28 <UART_SetConfig+0x45c>
 800ce3a:	4bb1      	ldr	r3, [pc, #708]	@ (800d100 <UART_SetConfig+0x634>)
 800ce3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce42:	2b28      	cmp	r3, #40	@ 0x28
 800ce44:	d86c      	bhi.n	800cf20 <UART_SetConfig+0x454>
 800ce46:	a201      	add	r2, pc, #4	@ (adr r2, 800ce4c <UART_SetConfig+0x380>)
 800ce48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4c:	0800cef1 	.word	0x0800cef1
 800ce50:	0800cf21 	.word	0x0800cf21
 800ce54:	0800cf21 	.word	0x0800cf21
 800ce58:	0800cf21 	.word	0x0800cf21
 800ce5c:	0800cf21 	.word	0x0800cf21
 800ce60:	0800cf21 	.word	0x0800cf21
 800ce64:	0800cf21 	.word	0x0800cf21
 800ce68:	0800cf21 	.word	0x0800cf21
 800ce6c:	0800cef9 	.word	0x0800cef9
 800ce70:	0800cf21 	.word	0x0800cf21
 800ce74:	0800cf21 	.word	0x0800cf21
 800ce78:	0800cf21 	.word	0x0800cf21
 800ce7c:	0800cf21 	.word	0x0800cf21
 800ce80:	0800cf21 	.word	0x0800cf21
 800ce84:	0800cf21 	.word	0x0800cf21
 800ce88:	0800cf21 	.word	0x0800cf21
 800ce8c:	0800cf01 	.word	0x0800cf01
 800ce90:	0800cf21 	.word	0x0800cf21
 800ce94:	0800cf21 	.word	0x0800cf21
 800ce98:	0800cf21 	.word	0x0800cf21
 800ce9c:	0800cf21 	.word	0x0800cf21
 800cea0:	0800cf21 	.word	0x0800cf21
 800cea4:	0800cf21 	.word	0x0800cf21
 800cea8:	0800cf21 	.word	0x0800cf21
 800ceac:	0800cf09 	.word	0x0800cf09
 800ceb0:	0800cf21 	.word	0x0800cf21
 800ceb4:	0800cf21 	.word	0x0800cf21
 800ceb8:	0800cf21 	.word	0x0800cf21
 800cebc:	0800cf21 	.word	0x0800cf21
 800cec0:	0800cf21 	.word	0x0800cf21
 800cec4:	0800cf21 	.word	0x0800cf21
 800cec8:	0800cf21 	.word	0x0800cf21
 800cecc:	0800cf11 	.word	0x0800cf11
 800ced0:	0800cf21 	.word	0x0800cf21
 800ced4:	0800cf21 	.word	0x0800cf21
 800ced8:	0800cf21 	.word	0x0800cf21
 800cedc:	0800cf21 	.word	0x0800cf21
 800cee0:	0800cf21 	.word	0x0800cf21
 800cee4:	0800cf21 	.word	0x0800cf21
 800cee8:	0800cf21 	.word	0x0800cf21
 800ceec:	0800cf19 	.word	0x0800cf19
 800cef0:	2301      	movs	r3, #1
 800cef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cef6:	e1c0      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cef8:	2304      	movs	r3, #4
 800cefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cefe:	e1bc      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf00:	2308      	movs	r3, #8
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf06:	e1b8      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf08:	2310      	movs	r3, #16
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf0e:	e1b4      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf10:	2320      	movs	r3, #32
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf16:	e1b0      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf18:	2340      	movs	r3, #64	@ 0x40
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1e:	e1ac      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf20:	2380      	movs	r3, #128	@ 0x80
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf26:	e1a8      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a75      	ldr	r2, [pc, #468]	@ (800d104 <UART_SetConfig+0x638>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d130      	bne.n	800cf94 <UART_SetConfig+0x4c8>
 800cf32:	4b73      	ldr	r3, [pc, #460]	@ (800d100 <UART_SetConfig+0x634>)
 800cf34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf36:	f003 0307 	and.w	r3, r3, #7
 800cf3a:	2b05      	cmp	r3, #5
 800cf3c:	d826      	bhi.n	800cf8c <UART_SetConfig+0x4c0>
 800cf3e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf44 <UART_SetConfig+0x478>)
 800cf40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf44:	0800cf5d 	.word	0x0800cf5d
 800cf48:	0800cf65 	.word	0x0800cf65
 800cf4c:	0800cf6d 	.word	0x0800cf6d
 800cf50:	0800cf75 	.word	0x0800cf75
 800cf54:	0800cf7d 	.word	0x0800cf7d
 800cf58:	0800cf85 	.word	0x0800cf85
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf62:	e18a      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf64:	2304      	movs	r3, #4
 800cf66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf6a:	e186      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf6c:	2308      	movs	r3, #8
 800cf6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf72:	e182      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf74:	2310      	movs	r3, #16
 800cf76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf7a:	e17e      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf7c:	2320      	movs	r3, #32
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf82:	e17a      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf84:	2340      	movs	r3, #64	@ 0x40
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8a:	e176      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf8c:	2380      	movs	r3, #128	@ 0x80
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf92:	e172      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a5b      	ldr	r2, [pc, #364]	@ (800d108 <UART_SetConfig+0x63c>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d130      	bne.n	800d000 <UART_SetConfig+0x534>
 800cf9e:	4b58      	ldr	r3, [pc, #352]	@ (800d100 <UART_SetConfig+0x634>)
 800cfa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfa2:	f003 0307 	and.w	r3, r3, #7
 800cfa6:	2b05      	cmp	r3, #5
 800cfa8:	d826      	bhi.n	800cff8 <UART_SetConfig+0x52c>
 800cfaa:	a201      	add	r2, pc, #4	@ (adr r2, 800cfb0 <UART_SetConfig+0x4e4>)
 800cfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb0:	0800cfc9 	.word	0x0800cfc9
 800cfb4:	0800cfd1 	.word	0x0800cfd1
 800cfb8:	0800cfd9 	.word	0x0800cfd9
 800cfbc:	0800cfe1 	.word	0x0800cfe1
 800cfc0:	0800cfe9 	.word	0x0800cfe9
 800cfc4:	0800cff1 	.word	0x0800cff1
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfce:	e154      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cfd0:	2304      	movs	r3, #4
 800cfd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfd6:	e150      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cfd8:	2308      	movs	r3, #8
 800cfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfde:	e14c      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cfe0:	2310      	movs	r3, #16
 800cfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfe6:	e148      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cfe8:	2320      	movs	r3, #32
 800cfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfee:	e144      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cff0:	2340      	movs	r3, #64	@ 0x40
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cff6:	e140      	b.n	800d27a <UART_SetConfig+0x7ae>
 800cff8:	2380      	movs	r3, #128	@ 0x80
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cffe:	e13c      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a41      	ldr	r2, [pc, #260]	@ (800d10c <UART_SetConfig+0x640>)
 800d006:	4293      	cmp	r3, r2
 800d008:	f040 8082 	bne.w	800d110 <UART_SetConfig+0x644>
 800d00c:	4b3c      	ldr	r3, [pc, #240]	@ (800d100 <UART_SetConfig+0x634>)
 800d00e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d010:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d014:	2b28      	cmp	r3, #40	@ 0x28
 800d016:	d86d      	bhi.n	800d0f4 <UART_SetConfig+0x628>
 800d018:	a201      	add	r2, pc, #4	@ (adr r2, 800d020 <UART_SetConfig+0x554>)
 800d01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d01e:	bf00      	nop
 800d020:	0800d0c5 	.word	0x0800d0c5
 800d024:	0800d0f5 	.word	0x0800d0f5
 800d028:	0800d0f5 	.word	0x0800d0f5
 800d02c:	0800d0f5 	.word	0x0800d0f5
 800d030:	0800d0f5 	.word	0x0800d0f5
 800d034:	0800d0f5 	.word	0x0800d0f5
 800d038:	0800d0f5 	.word	0x0800d0f5
 800d03c:	0800d0f5 	.word	0x0800d0f5
 800d040:	0800d0cd 	.word	0x0800d0cd
 800d044:	0800d0f5 	.word	0x0800d0f5
 800d048:	0800d0f5 	.word	0x0800d0f5
 800d04c:	0800d0f5 	.word	0x0800d0f5
 800d050:	0800d0f5 	.word	0x0800d0f5
 800d054:	0800d0f5 	.word	0x0800d0f5
 800d058:	0800d0f5 	.word	0x0800d0f5
 800d05c:	0800d0f5 	.word	0x0800d0f5
 800d060:	0800d0d5 	.word	0x0800d0d5
 800d064:	0800d0f5 	.word	0x0800d0f5
 800d068:	0800d0f5 	.word	0x0800d0f5
 800d06c:	0800d0f5 	.word	0x0800d0f5
 800d070:	0800d0f5 	.word	0x0800d0f5
 800d074:	0800d0f5 	.word	0x0800d0f5
 800d078:	0800d0f5 	.word	0x0800d0f5
 800d07c:	0800d0f5 	.word	0x0800d0f5
 800d080:	0800d0dd 	.word	0x0800d0dd
 800d084:	0800d0f5 	.word	0x0800d0f5
 800d088:	0800d0f5 	.word	0x0800d0f5
 800d08c:	0800d0f5 	.word	0x0800d0f5
 800d090:	0800d0f5 	.word	0x0800d0f5
 800d094:	0800d0f5 	.word	0x0800d0f5
 800d098:	0800d0f5 	.word	0x0800d0f5
 800d09c:	0800d0f5 	.word	0x0800d0f5
 800d0a0:	0800d0e5 	.word	0x0800d0e5
 800d0a4:	0800d0f5 	.word	0x0800d0f5
 800d0a8:	0800d0f5 	.word	0x0800d0f5
 800d0ac:	0800d0f5 	.word	0x0800d0f5
 800d0b0:	0800d0f5 	.word	0x0800d0f5
 800d0b4:	0800d0f5 	.word	0x0800d0f5
 800d0b8:	0800d0f5 	.word	0x0800d0f5
 800d0bc:	0800d0f5 	.word	0x0800d0f5
 800d0c0:	0800d0ed 	.word	0x0800d0ed
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ca:	e0d6      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d0cc:	2304      	movs	r3, #4
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0d2:	e0d2      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d0d4:	2308      	movs	r3, #8
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0da:	e0ce      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d0dc:	2310      	movs	r3, #16
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e0ca      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d0e4:	2320      	movs	r3, #32
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e0c6      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d0ec:	2340      	movs	r3, #64	@ 0x40
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	e0c2      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d0f4:	2380      	movs	r3, #128	@ 0x80
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0fa:	e0be      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d0fc:	40011400 	.word	0x40011400
 800d100:	58024400 	.word	0x58024400
 800d104:	40007800 	.word	0x40007800
 800d108:	40007c00 	.word	0x40007c00
 800d10c:	40011800 	.word	0x40011800
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4aad      	ldr	r2, [pc, #692]	@ (800d3cc <UART_SetConfig+0x900>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d176      	bne.n	800d208 <UART_SetConfig+0x73c>
 800d11a:	4bad      	ldr	r3, [pc, #692]	@ (800d3d0 <UART_SetConfig+0x904>)
 800d11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d11e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d122:	2b28      	cmp	r3, #40	@ 0x28
 800d124:	d86c      	bhi.n	800d200 <UART_SetConfig+0x734>
 800d126:	a201      	add	r2, pc, #4	@ (adr r2, 800d12c <UART_SetConfig+0x660>)
 800d128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d12c:	0800d1d1 	.word	0x0800d1d1
 800d130:	0800d201 	.word	0x0800d201
 800d134:	0800d201 	.word	0x0800d201
 800d138:	0800d201 	.word	0x0800d201
 800d13c:	0800d201 	.word	0x0800d201
 800d140:	0800d201 	.word	0x0800d201
 800d144:	0800d201 	.word	0x0800d201
 800d148:	0800d201 	.word	0x0800d201
 800d14c:	0800d1d9 	.word	0x0800d1d9
 800d150:	0800d201 	.word	0x0800d201
 800d154:	0800d201 	.word	0x0800d201
 800d158:	0800d201 	.word	0x0800d201
 800d15c:	0800d201 	.word	0x0800d201
 800d160:	0800d201 	.word	0x0800d201
 800d164:	0800d201 	.word	0x0800d201
 800d168:	0800d201 	.word	0x0800d201
 800d16c:	0800d1e1 	.word	0x0800d1e1
 800d170:	0800d201 	.word	0x0800d201
 800d174:	0800d201 	.word	0x0800d201
 800d178:	0800d201 	.word	0x0800d201
 800d17c:	0800d201 	.word	0x0800d201
 800d180:	0800d201 	.word	0x0800d201
 800d184:	0800d201 	.word	0x0800d201
 800d188:	0800d201 	.word	0x0800d201
 800d18c:	0800d1e9 	.word	0x0800d1e9
 800d190:	0800d201 	.word	0x0800d201
 800d194:	0800d201 	.word	0x0800d201
 800d198:	0800d201 	.word	0x0800d201
 800d19c:	0800d201 	.word	0x0800d201
 800d1a0:	0800d201 	.word	0x0800d201
 800d1a4:	0800d201 	.word	0x0800d201
 800d1a8:	0800d201 	.word	0x0800d201
 800d1ac:	0800d1f1 	.word	0x0800d1f1
 800d1b0:	0800d201 	.word	0x0800d201
 800d1b4:	0800d201 	.word	0x0800d201
 800d1b8:	0800d201 	.word	0x0800d201
 800d1bc:	0800d201 	.word	0x0800d201
 800d1c0:	0800d201 	.word	0x0800d201
 800d1c4:	0800d201 	.word	0x0800d201
 800d1c8:	0800d201 	.word	0x0800d201
 800d1cc:	0800d1f9 	.word	0x0800d1f9
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1d6:	e050      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d1d8:	2304      	movs	r3, #4
 800d1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1de:	e04c      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d1e0:	2308      	movs	r3, #8
 800d1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1e6:	e048      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d1e8:	2310      	movs	r3, #16
 800d1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ee:	e044      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d1f0:	2320      	movs	r3, #32
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1f6:	e040      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d1f8:	2340      	movs	r3, #64	@ 0x40
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fe:	e03c      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d200:	2380      	movs	r3, #128	@ 0x80
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d206:	e038      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a71      	ldr	r2, [pc, #452]	@ (800d3d4 <UART_SetConfig+0x908>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d130      	bne.n	800d274 <UART_SetConfig+0x7a8>
 800d212:	4b6f      	ldr	r3, [pc, #444]	@ (800d3d0 <UART_SetConfig+0x904>)
 800d214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d216:	f003 0307 	and.w	r3, r3, #7
 800d21a:	2b05      	cmp	r3, #5
 800d21c:	d826      	bhi.n	800d26c <UART_SetConfig+0x7a0>
 800d21e:	a201      	add	r2, pc, #4	@ (adr r2, 800d224 <UART_SetConfig+0x758>)
 800d220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d224:	0800d23d 	.word	0x0800d23d
 800d228:	0800d245 	.word	0x0800d245
 800d22c:	0800d24d 	.word	0x0800d24d
 800d230:	0800d255 	.word	0x0800d255
 800d234:	0800d25d 	.word	0x0800d25d
 800d238:	0800d265 	.word	0x0800d265
 800d23c:	2302      	movs	r3, #2
 800d23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d242:	e01a      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d244:	2304      	movs	r3, #4
 800d246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d24a:	e016      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d24c:	2308      	movs	r3, #8
 800d24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d252:	e012      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d254:	2310      	movs	r3, #16
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d25a:	e00e      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d25c:	2320      	movs	r3, #32
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d262:	e00a      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d264:	2340      	movs	r3, #64	@ 0x40
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26a:	e006      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d26c:	2380      	movs	r3, #128	@ 0x80
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d272:	e002      	b.n	800d27a <UART_SetConfig+0x7ae>
 800d274:	2380      	movs	r3, #128	@ 0x80
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a55      	ldr	r2, [pc, #340]	@ (800d3d4 <UART_SetConfig+0x908>)
 800d280:	4293      	cmp	r3, r2
 800d282:	f040 80f8 	bne.w	800d476 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d286:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d28a:	2b20      	cmp	r3, #32
 800d28c:	dc46      	bgt.n	800d31c <UART_SetConfig+0x850>
 800d28e:	2b02      	cmp	r3, #2
 800d290:	db75      	blt.n	800d37e <UART_SetConfig+0x8b2>
 800d292:	3b02      	subs	r3, #2
 800d294:	2b1e      	cmp	r3, #30
 800d296:	d872      	bhi.n	800d37e <UART_SetConfig+0x8b2>
 800d298:	a201      	add	r2, pc, #4	@ (adr r2, 800d2a0 <UART_SetConfig+0x7d4>)
 800d29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d29e:	bf00      	nop
 800d2a0:	0800d323 	.word	0x0800d323
 800d2a4:	0800d37f 	.word	0x0800d37f
 800d2a8:	0800d32b 	.word	0x0800d32b
 800d2ac:	0800d37f 	.word	0x0800d37f
 800d2b0:	0800d37f 	.word	0x0800d37f
 800d2b4:	0800d37f 	.word	0x0800d37f
 800d2b8:	0800d33b 	.word	0x0800d33b
 800d2bc:	0800d37f 	.word	0x0800d37f
 800d2c0:	0800d37f 	.word	0x0800d37f
 800d2c4:	0800d37f 	.word	0x0800d37f
 800d2c8:	0800d37f 	.word	0x0800d37f
 800d2cc:	0800d37f 	.word	0x0800d37f
 800d2d0:	0800d37f 	.word	0x0800d37f
 800d2d4:	0800d37f 	.word	0x0800d37f
 800d2d8:	0800d34b 	.word	0x0800d34b
 800d2dc:	0800d37f 	.word	0x0800d37f
 800d2e0:	0800d37f 	.word	0x0800d37f
 800d2e4:	0800d37f 	.word	0x0800d37f
 800d2e8:	0800d37f 	.word	0x0800d37f
 800d2ec:	0800d37f 	.word	0x0800d37f
 800d2f0:	0800d37f 	.word	0x0800d37f
 800d2f4:	0800d37f 	.word	0x0800d37f
 800d2f8:	0800d37f 	.word	0x0800d37f
 800d2fc:	0800d37f 	.word	0x0800d37f
 800d300:	0800d37f 	.word	0x0800d37f
 800d304:	0800d37f 	.word	0x0800d37f
 800d308:	0800d37f 	.word	0x0800d37f
 800d30c:	0800d37f 	.word	0x0800d37f
 800d310:	0800d37f 	.word	0x0800d37f
 800d314:	0800d37f 	.word	0x0800d37f
 800d318:	0800d371 	.word	0x0800d371
 800d31c:	2b40      	cmp	r3, #64	@ 0x40
 800d31e:	d02a      	beq.n	800d376 <UART_SetConfig+0x8aa>
 800d320:	e02d      	b.n	800d37e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d322:	f7fb fd3b 	bl	8008d9c <HAL_RCCEx_GetD3PCLK1Freq>
 800d326:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d328:	e02f      	b.n	800d38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d32a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fb fd4a 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d338:	e027      	b.n	800d38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d33a:	f107 0318 	add.w	r3, r7, #24
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fb fe96 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d348:	e01f      	b.n	800d38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d34a:	4b21      	ldr	r3, [pc, #132]	@ (800d3d0 <UART_SetConfig+0x904>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f003 0320 	and.w	r3, r3, #32
 800d352:	2b00      	cmp	r3, #0
 800d354:	d009      	beq.n	800d36a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d356:	4b1e      	ldr	r3, [pc, #120]	@ (800d3d0 <UART_SetConfig+0x904>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	08db      	lsrs	r3, r3, #3
 800d35c:	f003 0303 	and.w	r3, r3, #3
 800d360:	4a1d      	ldr	r2, [pc, #116]	@ (800d3d8 <UART_SetConfig+0x90c>)
 800d362:	fa22 f303 	lsr.w	r3, r2, r3
 800d366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d368:	e00f      	b.n	800d38a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d36a:	4b1b      	ldr	r3, [pc, #108]	@ (800d3d8 <UART_SetConfig+0x90c>)
 800d36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d36e:	e00c      	b.n	800d38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d370:	4b1a      	ldr	r3, [pc, #104]	@ (800d3dc <UART_SetConfig+0x910>)
 800d372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d374:	e009      	b.n	800d38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d37c:	e005      	b.n	800d38a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d37e:	2300      	movs	r3, #0
 800d380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d388:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f000 81ee 	beq.w	800d76e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d396:	4a12      	ldr	r2, [pc, #72]	@ (800d3e0 <UART_SetConfig+0x914>)
 800d398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d39c:	461a      	mov	r2, r3
 800d39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3a4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	685a      	ldr	r2, [r3, #4]
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	005b      	lsls	r3, r3, #1
 800d3ae:	4413      	add	r3, r2
 800d3b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d305      	bcc.n	800d3c2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d910      	bls.n	800d3e4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d3c8:	e1d1      	b.n	800d76e <UART_SetConfig+0xca2>
 800d3ca:	bf00      	nop
 800d3cc:	40011c00 	.word	0x40011c00
 800d3d0:	58024400 	.word	0x58024400
 800d3d4:	58000c00 	.word	0x58000c00
 800d3d8:	03d09000 	.word	0x03d09000
 800d3dc:	003d0900 	.word	0x003d0900
 800d3e0:	080143ac 	.word	0x080143ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	60bb      	str	r3, [r7, #8]
 800d3ea:	60fa      	str	r2, [r7, #12]
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f0:	4ac0      	ldr	r2, [pc, #768]	@ (800d6f4 <UART_SetConfig+0xc28>)
 800d3f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	603b      	str	r3, [r7, #0]
 800d3fc:	607a      	str	r2, [r7, #4]
 800d3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d406:	f7f3 f997 	bl	8000738 <__aeabi_uldivmod>
 800d40a:	4602      	mov	r2, r0
 800d40c:	460b      	mov	r3, r1
 800d40e:	4610      	mov	r0, r2
 800d410:	4619      	mov	r1, r3
 800d412:	f04f 0200 	mov.w	r2, #0
 800d416:	f04f 0300 	mov.w	r3, #0
 800d41a:	020b      	lsls	r3, r1, #8
 800d41c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d420:	0202      	lsls	r2, r0, #8
 800d422:	6979      	ldr	r1, [r7, #20]
 800d424:	6849      	ldr	r1, [r1, #4]
 800d426:	0849      	lsrs	r1, r1, #1
 800d428:	2000      	movs	r0, #0
 800d42a:	460c      	mov	r4, r1
 800d42c:	4605      	mov	r5, r0
 800d42e:	eb12 0804 	adds.w	r8, r2, r4
 800d432:	eb43 0905 	adc.w	r9, r3, r5
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	469a      	mov	sl, r3
 800d43e:	4693      	mov	fp, r2
 800d440:	4652      	mov	r2, sl
 800d442:	465b      	mov	r3, fp
 800d444:	4640      	mov	r0, r8
 800d446:	4649      	mov	r1, r9
 800d448:	f7f3 f976 	bl	8000738 <__aeabi_uldivmod>
 800d44c:	4602      	mov	r2, r0
 800d44e:	460b      	mov	r3, r1
 800d450:	4613      	mov	r3, r2
 800d452:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d45a:	d308      	bcc.n	800d46e <UART_SetConfig+0x9a2>
 800d45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d45e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d462:	d204      	bcs.n	800d46e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d46a:	60da      	str	r2, [r3, #12]
 800d46c:	e17f      	b.n	800d76e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d474:	e17b      	b.n	800d76e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	69db      	ldr	r3, [r3, #28]
 800d47a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d47e:	f040 80bd 	bne.w	800d5fc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d482:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d486:	2b20      	cmp	r3, #32
 800d488:	dc48      	bgt.n	800d51c <UART_SetConfig+0xa50>
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	db7b      	blt.n	800d586 <UART_SetConfig+0xaba>
 800d48e:	2b20      	cmp	r3, #32
 800d490:	d879      	bhi.n	800d586 <UART_SetConfig+0xaba>
 800d492:	a201      	add	r2, pc, #4	@ (adr r2, 800d498 <UART_SetConfig+0x9cc>)
 800d494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d498:	0800d523 	.word	0x0800d523
 800d49c:	0800d52b 	.word	0x0800d52b
 800d4a0:	0800d587 	.word	0x0800d587
 800d4a4:	0800d587 	.word	0x0800d587
 800d4a8:	0800d533 	.word	0x0800d533
 800d4ac:	0800d587 	.word	0x0800d587
 800d4b0:	0800d587 	.word	0x0800d587
 800d4b4:	0800d587 	.word	0x0800d587
 800d4b8:	0800d543 	.word	0x0800d543
 800d4bc:	0800d587 	.word	0x0800d587
 800d4c0:	0800d587 	.word	0x0800d587
 800d4c4:	0800d587 	.word	0x0800d587
 800d4c8:	0800d587 	.word	0x0800d587
 800d4cc:	0800d587 	.word	0x0800d587
 800d4d0:	0800d587 	.word	0x0800d587
 800d4d4:	0800d587 	.word	0x0800d587
 800d4d8:	0800d553 	.word	0x0800d553
 800d4dc:	0800d587 	.word	0x0800d587
 800d4e0:	0800d587 	.word	0x0800d587
 800d4e4:	0800d587 	.word	0x0800d587
 800d4e8:	0800d587 	.word	0x0800d587
 800d4ec:	0800d587 	.word	0x0800d587
 800d4f0:	0800d587 	.word	0x0800d587
 800d4f4:	0800d587 	.word	0x0800d587
 800d4f8:	0800d587 	.word	0x0800d587
 800d4fc:	0800d587 	.word	0x0800d587
 800d500:	0800d587 	.word	0x0800d587
 800d504:	0800d587 	.word	0x0800d587
 800d508:	0800d587 	.word	0x0800d587
 800d50c:	0800d587 	.word	0x0800d587
 800d510:	0800d587 	.word	0x0800d587
 800d514:	0800d587 	.word	0x0800d587
 800d518:	0800d579 	.word	0x0800d579
 800d51c:	2b40      	cmp	r3, #64	@ 0x40
 800d51e:	d02e      	beq.n	800d57e <UART_SetConfig+0xab2>
 800d520:	e031      	b.n	800d586 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d522:	f7f9 fd9d 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 800d526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d528:	e033      	b.n	800d592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d52a:	f7f9 fdaf 	bl	800708c <HAL_RCC_GetPCLK2Freq>
 800d52e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d530:	e02f      	b.n	800d592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d536:	4618      	mov	r0, r3
 800d538:	f7fb fc46 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d540:	e027      	b.n	800d592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d542:	f107 0318 	add.w	r3, r7, #24
 800d546:	4618      	mov	r0, r3
 800d548:	f7fb fd92 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d550:	e01f      	b.n	800d592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d552:	4b69      	ldr	r3, [pc, #420]	@ (800d6f8 <UART_SetConfig+0xc2c>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f003 0320 	and.w	r3, r3, #32
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d009      	beq.n	800d572 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d55e:	4b66      	ldr	r3, [pc, #408]	@ (800d6f8 <UART_SetConfig+0xc2c>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	08db      	lsrs	r3, r3, #3
 800d564:	f003 0303 	and.w	r3, r3, #3
 800d568:	4a64      	ldr	r2, [pc, #400]	@ (800d6fc <UART_SetConfig+0xc30>)
 800d56a:	fa22 f303 	lsr.w	r3, r2, r3
 800d56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d570:	e00f      	b.n	800d592 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d572:	4b62      	ldr	r3, [pc, #392]	@ (800d6fc <UART_SetConfig+0xc30>)
 800d574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d576:	e00c      	b.n	800d592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d578:	4b61      	ldr	r3, [pc, #388]	@ (800d700 <UART_SetConfig+0xc34>)
 800d57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d57c:	e009      	b.n	800d592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d57e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d584:	e005      	b.n	800d592 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d586:	2300      	movs	r3, #0
 800d588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d590:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d594:	2b00      	cmp	r3, #0
 800d596:	f000 80ea 	beq.w	800d76e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d59e:	4a55      	ldr	r2, [pc, #340]	@ (800d6f4 <UART_SetConfig+0xc28>)
 800d5a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5ac:	005a      	lsls	r2, r3, #1
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	085b      	lsrs	r3, r3, #1
 800d5b4:	441a      	add	r2, r3
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c2:	2b0f      	cmp	r3, #15
 800d5c4:	d916      	bls.n	800d5f4 <UART_SetConfig+0xb28>
 800d5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5cc:	d212      	bcs.n	800d5f4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	f023 030f 	bic.w	r3, r3, #15
 800d5d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5da:	085b      	lsrs	r3, r3, #1
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	f003 0307 	and.w	r3, r3, #7
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d5f0:	60da      	str	r2, [r3, #12]
 800d5f2:	e0bc      	b.n	800d76e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d5fa:	e0b8      	b.n	800d76e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d5fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d600:	2b20      	cmp	r3, #32
 800d602:	dc4b      	bgt.n	800d69c <UART_SetConfig+0xbd0>
 800d604:	2b00      	cmp	r3, #0
 800d606:	f2c0 8087 	blt.w	800d718 <UART_SetConfig+0xc4c>
 800d60a:	2b20      	cmp	r3, #32
 800d60c:	f200 8084 	bhi.w	800d718 <UART_SetConfig+0xc4c>
 800d610:	a201      	add	r2, pc, #4	@ (adr r2, 800d618 <UART_SetConfig+0xb4c>)
 800d612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d616:	bf00      	nop
 800d618:	0800d6a3 	.word	0x0800d6a3
 800d61c:	0800d6ab 	.word	0x0800d6ab
 800d620:	0800d719 	.word	0x0800d719
 800d624:	0800d719 	.word	0x0800d719
 800d628:	0800d6b3 	.word	0x0800d6b3
 800d62c:	0800d719 	.word	0x0800d719
 800d630:	0800d719 	.word	0x0800d719
 800d634:	0800d719 	.word	0x0800d719
 800d638:	0800d6c3 	.word	0x0800d6c3
 800d63c:	0800d719 	.word	0x0800d719
 800d640:	0800d719 	.word	0x0800d719
 800d644:	0800d719 	.word	0x0800d719
 800d648:	0800d719 	.word	0x0800d719
 800d64c:	0800d719 	.word	0x0800d719
 800d650:	0800d719 	.word	0x0800d719
 800d654:	0800d719 	.word	0x0800d719
 800d658:	0800d6d3 	.word	0x0800d6d3
 800d65c:	0800d719 	.word	0x0800d719
 800d660:	0800d719 	.word	0x0800d719
 800d664:	0800d719 	.word	0x0800d719
 800d668:	0800d719 	.word	0x0800d719
 800d66c:	0800d719 	.word	0x0800d719
 800d670:	0800d719 	.word	0x0800d719
 800d674:	0800d719 	.word	0x0800d719
 800d678:	0800d719 	.word	0x0800d719
 800d67c:	0800d719 	.word	0x0800d719
 800d680:	0800d719 	.word	0x0800d719
 800d684:	0800d719 	.word	0x0800d719
 800d688:	0800d719 	.word	0x0800d719
 800d68c:	0800d719 	.word	0x0800d719
 800d690:	0800d719 	.word	0x0800d719
 800d694:	0800d719 	.word	0x0800d719
 800d698:	0800d70b 	.word	0x0800d70b
 800d69c:	2b40      	cmp	r3, #64	@ 0x40
 800d69e:	d037      	beq.n	800d710 <UART_SetConfig+0xc44>
 800d6a0:	e03a      	b.n	800d718 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6a2:	f7f9 fcdd 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 800d6a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d6a8:	e03c      	b.n	800d724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6aa:	f7f9 fcef 	bl	800708c <HAL_RCC_GetPCLK2Freq>
 800d6ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d6b0:	e038      	b.n	800d724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7fb fb86 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6c0:	e030      	b.n	800d724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6c2:	f107 0318 	add.w	r3, r7, #24
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fb fcd2 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6d0:	e028      	b.n	800d724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6d2:	4b09      	ldr	r3, [pc, #36]	@ (800d6f8 <UART_SetConfig+0xc2c>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f003 0320 	and.w	r3, r3, #32
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d012      	beq.n	800d704 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d6de:	4b06      	ldr	r3, [pc, #24]	@ (800d6f8 <UART_SetConfig+0xc2c>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	08db      	lsrs	r3, r3, #3
 800d6e4:	f003 0303 	and.w	r3, r3, #3
 800d6e8:	4a04      	ldr	r2, [pc, #16]	@ (800d6fc <UART_SetConfig+0xc30>)
 800d6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d6f0:	e018      	b.n	800d724 <UART_SetConfig+0xc58>
 800d6f2:	bf00      	nop
 800d6f4:	080143ac 	.word	0x080143ac
 800d6f8:	58024400 	.word	0x58024400
 800d6fc:	03d09000 	.word	0x03d09000
 800d700:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d704:	4b24      	ldr	r3, [pc, #144]	@ (800d798 <UART_SetConfig+0xccc>)
 800d706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d708:	e00c      	b.n	800d724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d70a:	4b24      	ldr	r3, [pc, #144]	@ (800d79c <UART_SetConfig+0xcd0>)
 800d70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d70e:	e009      	b.n	800d724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d716:	e005      	b.n	800d724 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d718:	2300      	movs	r3, #0
 800d71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d71c:	2301      	movs	r3, #1
 800d71e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d722:	bf00      	nop
    }

    if (pclk != 0U)
 800d724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d726:	2b00      	cmp	r3, #0
 800d728:	d021      	beq.n	800d76e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d72e:	4a1c      	ldr	r2, [pc, #112]	@ (800d7a0 <UART_SetConfig+0xcd4>)
 800d730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d734:	461a      	mov	r2, r3
 800d736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d738:	fbb3 f2f2 	udiv	r2, r3, r2
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	085b      	lsrs	r3, r3, #1
 800d742:	441a      	add	r2, r3
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	fbb2 f3f3 	udiv	r3, r2, r3
 800d74c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d750:	2b0f      	cmp	r3, #15
 800d752:	d909      	bls.n	800d768 <UART_SetConfig+0xc9c>
 800d754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d75a:	d205      	bcs.n	800d768 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75e:	b29a      	uxth	r2, r3
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	60da      	str	r2, [r3, #12]
 800d766:	e002      	b.n	800d76e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	2201      	movs	r2, #1
 800d772:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	2201      	movs	r2, #1
 800d77a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	2200      	movs	r2, #0
 800d782:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2200      	movs	r2, #0
 800d788:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d78a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3748      	adds	r7, #72	@ 0x48
 800d792:	46bd      	mov	sp, r7
 800d794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d798:	03d09000 	.word	0x03d09000
 800d79c:	003d0900 	.word	0x003d0900
 800d7a0:	080143ac 	.word	0x080143ac

0800d7a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7b0:	f003 0308 	and.w	r3, r3, #8
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00a      	beq.n	800d7ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d2:	f003 0301 	and.w	r3, r3, #1
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00a      	beq.n	800d7f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	430a      	orrs	r2, r1
 800d7ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7f4:	f003 0302 	and.w	r3, r3, #2
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00a      	beq.n	800d812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	430a      	orrs	r2, r1
 800d810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d816:	f003 0304 	and.w	r3, r3, #4
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00a      	beq.n	800d834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	430a      	orrs	r2, r1
 800d832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d838:	f003 0310 	and.w	r3, r3, #16
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00a      	beq.n	800d856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	430a      	orrs	r2, r1
 800d854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d85a:	f003 0320 	and.w	r3, r3, #32
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00a      	beq.n	800d878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	430a      	orrs	r2, r1
 800d876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d87c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d880:	2b00      	cmp	r3, #0
 800d882:	d01a      	beq.n	800d8ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	430a      	orrs	r2, r1
 800d898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d89e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d8a2:	d10a      	bne.n	800d8ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	430a      	orrs	r2, r1
 800d8b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00a      	beq.n	800d8dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	430a      	orrs	r2, r1
 800d8da:	605a      	str	r2, [r3, #4]
  }
}
 800d8dc:	bf00      	nop
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b098      	sub	sp, #96	@ 0x60
 800d8ec:	af02      	add	r7, sp, #8
 800d8ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d8f8:	f7f5 fea0 	bl	800363c <HAL_GetTick>
 800d8fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f003 0308 	and.w	r3, r3, #8
 800d908:	2b08      	cmp	r3, #8
 800d90a:	d12f      	bne.n	800d96c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d90c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d914:	2200      	movs	r2, #0
 800d916:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 f88e 	bl	800da3c <UART_WaitOnFlagUntilTimeout>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d022      	beq.n	800d96c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92e:	e853 3f00 	ldrex	r3, [r3]
 800d932:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d93a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	461a      	mov	r2, r3
 800d942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d944:	647b      	str	r3, [r7, #68]	@ 0x44
 800d946:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d948:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d94a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d94c:	e841 2300 	strex	r3, r2, [r1]
 800d950:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1e6      	bne.n	800d926 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2220      	movs	r2, #32
 800d95c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d968:	2303      	movs	r3, #3
 800d96a:	e063      	b.n	800da34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 0304 	and.w	r3, r3, #4
 800d976:	2b04      	cmp	r3, #4
 800d978:	d149      	bne.n	800da0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d97a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d982:	2200      	movs	r2, #0
 800d984:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 f857 	bl	800da3c <UART_WaitOnFlagUntilTimeout>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d03c      	beq.n	800da0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99c:	e853 3f00 	ldrex	r3, [r3]
 800d9a0:	623b      	str	r3, [r7, #32]
   return(result);
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d9a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d9b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9ba:	e841 2300 	strex	r3, r2, [r1]
 800d9be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1e6      	bne.n	800d994 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	3308      	adds	r3, #8
 800d9cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	e853 3f00 	ldrex	r3, [r3]
 800d9d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f023 0301 	bic.w	r3, r3, #1
 800d9dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	3308      	adds	r3, #8
 800d9e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9e6:	61fa      	str	r2, [r7, #28]
 800d9e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ea:	69b9      	ldr	r1, [r7, #24]
 800d9ec:	69fa      	ldr	r2, [r7, #28]
 800d9ee:	e841 2300 	strex	r3, r2, [r1]
 800d9f2:	617b      	str	r3, [r7, #20]
   return(result);
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d1e5      	bne.n	800d9c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2220      	movs	r2, #32
 800d9fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da0a:	2303      	movs	r3, #3
 800da0c:	e012      	b.n	800da34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2220      	movs	r2, #32
 800da12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2220      	movs	r2, #32
 800da1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2200      	movs	r2, #0
 800da22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	3758      	adds	r7, #88	@ 0x58
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	603b      	str	r3, [r7, #0]
 800da48:	4613      	mov	r3, r2
 800da4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da4c:	e04f      	b.n	800daee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da54:	d04b      	beq.n	800daee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da56:	f7f5 fdf1 	bl	800363c <HAL_GetTick>
 800da5a:	4602      	mov	r2, r0
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	1ad3      	subs	r3, r2, r3
 800da60:	69ba      	ldr	r2, [r7, #24]
 800da62:	429a      	cmp	r2, r3
 800da64:	d302      	bcc.n	800da6c <UART_WaitOnFlagUntilTimeout+0x30>
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800da6c:	2303      	movs	r3, #3
 800da6e:	e04e      	b.n	800db0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f003 0304 	and.w	r3, r3, #4
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d037      	beq.n	800daee <UART_WaitOnFlagUntilTimeout+0xb2>
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2b80      	cmp	r3, #128	@ 0x80
 800da82:	d034      	beq.n	800daee <UART_WaitOnFlagUntilTimeout+0xb2>
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	2b40      	cmp	r3, #64	@ 0x40
 800da88:	d031      	beq.n	800daee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	69db      	ldr	r3, [r3, #28]
 800da90:	f003 0308 	and.w	r3, r3, #8
 800da94:	2b08      	cmp	r3, #8
 800da96:	d110      	bne.n	800daba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2208      	movs	r2, #8
 800da9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f000 f839 	bl	800db18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2208      	movs	r2, #8
 800daaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dab6:	2301      	movs	r3, #1
 800dab8:	e029      	b.n	800db0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	69db      	ldr	r3, [r3, #28]
 800dac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dac8:	d111      	bne.n	800daee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dad2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f000 f81f 	bl	800db18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2220      	movs	r2, #32
 800dade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800daea:	2303      	movs	r3, #3
 800daec:	e00f      	b.n	800db0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	69da      	ldr	r2, [r3, #28]
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	4013      	ands	r3, r2
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	bf0c      	ite	eq
 800dafe:	2301      	moveq	r3, #1
 800db00:	2300      	movne	r3, #0
 800db02:	b2db      	uxtb	r3, r3
 800db04:	461a      	mov	r2, r3
 800db06:	79fb      	ldrb	r3, [r7, #7]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d0a0      	beq.n	800da4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
	...

0800db18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db18:	b480      	push	{r7}
 800db1a:	b095      	sub	sp, #84	@ 0x54
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db28:	e853 3f00 	ldrex	r3, [r3]
 800db2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	461a      	mov	r2, r3
 800db3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800db40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db46:	e841 2300 	strex	r3, r2, [r1]
 800db4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1e6      	bne.n	800db20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	3308      	adds	r3, #8
 800db58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db5a:	6a3b      	ldr	r3, [r7, #32]
 800db5c:	e853 3f00 	ldrex	r3, [r3]
 800db60:	61fb      	str	r3, [r7, #28]
   return(result);
 800db62:	69fa      	ldr	r2, [r7, #28]
 800db64:	4b1e      	ldr	r3, [pc, #120]	@ (800dbe0 <UART_EndRxTransfer+0xc8>)
 800db66:	4013      	ands	r3, r2
 800db68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	3308      	adds	r3, #8
 800db70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800db74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db7a:	e841 2300 	strex	r3, r2, [r1]
 800db7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1e5      	bne.n	800db52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d118      	bne.n	800dbc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	e853 3f00 	ldrex	r3, [r3]
 800db9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	f023 0310 	bic.w	r3, r3, #16
 800dba2:	647b      	str	r3, [r7, #68]	@ 0x44
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	461a      	mov	r2, r3
 800dbaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbac:	61bb      	str	r3, [r7, #24]
 800dbae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb0:	6979      	ldr	r1, [r7, #20]
 800dbb2:	69ba      	ldr	r2, [r7, #24]
 800dbb4:	e841 2300 	strex	r3, r2, [r1]
 800dbb8:	613b      	str	r3, [r7, #16]
   return(result);
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1e6      	bne.n	800db8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2220      	movs	r2, #32
 800dbc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dbd4:	bf00      	nop
 800dbd6:	3754      	adds	r7, #84	@ 0x54
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr
 800dbe0:	effffffe 	.word	0xeffffffe

0800dbe4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	f7fe ff4c 	bl	800caa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc08:	bf00      	nop
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	e853 3f00 	ldrex	r3, [r3]
 800dc24:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc2c:	61fb      	str	r3, [r7, #28]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	461a      	mov	r2, r3
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	61bb      	str	r3, [r7, #24]
 800dc38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	6979      	ldr	r1, [r7, #20]
 800dc3c:	69ba      	ldr	r2, [r7, #24]
 800dc3e:	e841 2300 	strex	r3, r2, [r1]
 800dc42:	613b      	str	r3, [r7, #16]
   return(result);
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1e6      	bne.n	800dc18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7fe ff17 	bl	800ca8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc5e:	bf00      	nop
 800dc60:	3720      	adds	r7, #32
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc66:	b480      	push	{r7}
 800dc68:	b083      	sub	sp, #12
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc6e:	bf00      	nop
 800dc70:	370c      	adds	r7, #12
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b083      	sub	sp, #12
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc82:	bf00      	nop
 800dc84:	370c      	adds	r7, #12
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dc96:	bf00      	nop
 800dc98:	370c      	adds	r7, #12
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr

0800dca2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dca2:	b480      	push	{r7}
 800dca4:	b085      	sub	sp, #20
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d101      	bne.n	800dcb8 <HAL_UARTEx_DisableFifoMode+0x16>
 800dcb4:	2302      	movs	r3, #2
 800dcb6:	e027      	b.n	800dd08 <HAL_UARTEx_DisableFifoMode+0x66>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2224      	movs	r2, #36	@ 0x24
 800dcc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f022 0201 	bic.w	r2, r2, #1
 800dcde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dce6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2220      	movs	r2, #32
 800dcfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3714      	adds	r7, #20
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d101      	bne.n	800dd2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd28:	2302      	movs	r3, #2
 800dd2a:	e02d      	b.n	800dd88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2224      	movs	r2, #36	@ 0x24
 800dd38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f022 0201 	bic.w	r2, r2, #1
 800dd52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	430a      	orrs	r2, r1
 800dd66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 f84f 	bl	800de0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2220      	movs	r2, #32
 800dd7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d101      	bne.n	800dda8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dda4:	2302      	movs	r3, #2
 800dda6:	e02d      	b.n	800de04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2224      	movs	r2, #36	@ 0x24
 800ddb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f022 0201 	bic.w	r2, r2, #1
 800ddce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	430a      	orrs	r2, r1
 800dde2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 f811 	bl	800de0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	68fa      	ldr	r2, [r7, #12]
 800ddf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2220      	movs	r2, #32
 800ddf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3710      	adds	r7, #16
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d108      	bne.n	800de2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2201      	movs	r2, #1
 800de28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de2c:	e031      	b.n	800de92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de2e:	2310      	movs	r3, #16
 800de30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de32:	2310      	movs	r3, #16
 800de34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	0e5b      	lsrs	r3, r3, #25
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	f003 0307 	and.w	r3, r3, #7
 800de44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	0f5b      	lsrs	r3, r3, #29
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	f003 0307 	and.w	r3, r3, #7
 800de54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de56:	7bbb      	ldrb	r3, [r7, #14]
 800de58:	7b3a      	ldrb	r2, [r7, #12]
 800de5a:	4911      	ldr	r1, [pc, #68]	@ (800dea0 <UARTEx_SetNbDataToProcess+0x94>)
 800de5c:	5c8a      	ldrb	r2, [r1, r2]
 800de5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de62:	7b3a      	ldrb	r2, [r7, #12]
 800de64:	490f      	ldr	r1, [pc, #60]	@ (800dea4 <UARTEx_SetNbDataToProcess+0x98>)
 800de66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de68:	fb93 f3f2 	sdiv	r3, r3, r2
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	7b7a      	ldrb	r2, [r7, #13]
 800de78:	4909      	ldr	r1, [pc, #36]	@ (800dea0 <UARTEx_SetNbDataToProcess+0x94>)
 800de7a:	5c8a      	ldrb	r2, [r1, r2]
 800de7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de80:	7b7a      	ldrb	r2, [r7, #13]
 800de82:	4908      	ldr	r1, [pc, #32]	@ (800dea4 <UARTEx_SetNbDataToProcess+0x98>)
 800de84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de86:	fb93 f3f2 	sdiv	r3, r3, r2
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800de92:	bf00      	nop
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	080143c4 	.word	0x080143c4
 800dea4:	080143cc 	.word	0x080143cc

0800dea8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d101      	bne.n	800deba <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e03c      	b.n	800df34 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d106      	bne.n	800ded4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7f5 f8a0 	bl	8003014 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2202      	movs	r2, #2
 800ded8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f022 0201 	bic.w	r2, r2, #1
 800deea:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f85b 	bl	800dfa8 <USART_SetConfig>
 800def2:	4603      	mov	r3, r0
 800def4:	2b01      	cmp	r3, #1
 800def6:	d101      	bne.n	800defc <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800def8:	2301      	movs	r3, #1
 800defa:	e01b      	b.n	800df34 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	685a      	ldr	r2, [r3, #4]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800df0a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	689a      	ldr	r2, [r3, #8]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800df1a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f042 0201 	orr.w	r2, r2, #1
 800df2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 fddd 	bl	800eaec <USART_CheckIdleState>
 800df32:	4603      	mov	r3, r0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3708      	adds	r7, #8
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	603b      	str	r3, [r7, #0]
 800df48:	4613      	mov	r3, r2
 800df4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800df4c:	e018      	b.n	800df80 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df54:	d014      	beq.n	800df80 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df56:	f7f5 fb71 	bl	800363c <HAL_GetTick>
 800df5a:	4602      	mov	r2, r0
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	1ad3      	subs	r3, r2, r3
 800df60:	69ba      	ldr	r2, [r7, #24]
 800df62:	429a      	cmp	r2, r3
 800df64:	d302      	bcc.n	800df6c <USART_WaitOnFlagUntilTimeout+0x30>
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d109      	bne.n	800df80 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2201      	movs	r2, #1
 800df70:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2200      	movs	r2, #0
 800df78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800df7c:	2303      	movs	r3, #3
 800df7e:	e00f      	b.n	800dfa0 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	69da      	ldr	r2, [r3, #28]
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	4013      	ands	r3, r2
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	bf0c      	ite	eq
 800df90:	2301      	moveq	r3, #1
 800df92:	2300      	movne	r3, #0
 800df94:	b2db      	uxtb	r3, r3
 800df96:	461a      	mov	r2, r3
 800df98:	79fb      	ldrb	r3, [r7, #7]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d0d7      	beq.n	800df4e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3710      	adds	r7, #16
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b08e      	sub	sp, #56	@ 0x38
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	689a      	ldr	r2, [r3, #8]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	431a      	orrs	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	695b      	ldr	r3, [r3, #20]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	4bc9      	ldr	r3, [pc, #804]	@ (800e2fc <USART_SetConfig+0x354>)
 800dfd8:	4013      	ands	r3, r2
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	6812      	ldr	r2, [r2, #0]
 800dfde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dfe0:	430b      	orrs	r3, r1
 800dfe2:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800dfe4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dfe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a1b      	ldr	r3, [r3, #32]
 800dfee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dff0:	4313      	orrs	r3, r2
 800dff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	699a      	ldr	r2, [r3, #24]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	69db      	ldr	r3, [r3, #28]
 800dffc:	4313      	orrs	r3, r2
 800dffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e000:	4313      	orrs	r3, r2
 800e002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e00a:	4313      	orrs	r3, r2
 800e00c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	685a      	ldr	r2, [r3, #4]
 800e014:	4bba      	ldr	r3, [pc, #744]	@ (800e300 <USART_SetConfig+0x358>)
 800e016:	4013      	ands	r3, r2
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	6812      	ldr	r2, [r2, #0]
 800e01c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e01e:	430b      	orrs	r3, r1
 800e020:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e028:	f023 010f 	bic.w	r1, r3, #15
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	430a      	orrs	r2, r1
 800e036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4ab1      	ldr	r2, [pc, #708]	@ (800e304 <USART_SetConfig+0x35c>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d176      	bne.n	800e130 <USART_SetConfig+0x188>
 800e042:	4bb1      	ldr	r3, [pc, #708]	@ (800e308 <USART_SetConfig+0x360>)
 800e044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e046:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e04a:	2b28      	cmp	r3, #40	@ 0x28
 800e04c:	d86c      	bhi.n	800e128 <USART_SetConfig+0x180>
 800e04e:	a201      	add	r2, pc, #4	@ (adr r2, 800e054 <USART_SetConfig+0xac>)
 800e050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e054:	0800e0f9 	.word	0x0800e0f9
 800e058:	0800e129 	.word	0x0800e129
 800e05c:	0800e129 	.word	0x0800e129
 800e060:	0800e129 	.word	0x0800e129
 800e064:	0800e129 	.word	0x0800e129
 800e068:	0800e129 	.word	0x0800e129
 800e06c:	0800e129 	.word	0x0800e129
 800e070:	0800e129 	.word	0x0800e129
 800e074:	0800e101 	.word	0x0800e101
 800e078:	0800e129 	.word	0x0800e129
 800e07c:	0800e129 	.word	0x0800e129
 800e080:	0800e129 	.word	0x0800e129
 800e084:	0800e129 	.word	0x0800e129
 800e088:	0800e129 	.word	0x0800e129
 800e08c:	0800e129 	.word	0x0800e129
 800e090:	0800e129 	.word	0x0800e129
 800e094:	0800e109 	.word	0x0800e109
 800e098:	0800e129 	.word	0x0800e129
 800e09c:	0800e129 	.word	0x0800e129
 800e0a0:	0800e129 	.word	0x0800e129
 800e0a4:	0800e129 	.word	0x0800e129
 800e0a8:	0800e129 	.word	0x0800e129
 800e0ac:	0800e129 	.word	0x0800e129
 800e0b0:	0800e129 	.word	0x0800e129
 800e0b4:	0800e111 	.word	0x0800e111
 800e0b8:	0800e129 	.word	0x0800e129
 800e0bc:	0800e129 	.word	0x0800e129
 800e0c0:	0800e129 	.word	0x0800e129
 800e0c4:	0800e129 	.word	0x0800e129
 800e0c8:	0800e129 	.word	0x0800e129
 800e0cc:	0800e129 	.word	0x0800e129
 800e0d0:	0800e129 	.word	0x0800e129
 800e0d4:	0800e119 	.word	0x0800e119
 800e0d8:	0800e129 	.word	0x0800e129
 800e0dc:	0800e129 	.word	0x0800e129
 800e0e0:	0800e129 	.word	0x0800e129
 800e0e4:	0800e129 	.word	0x0800e129
 800e0e8:	0800e129 	.word	0x0800e129
 800e0ec:	0800e129 	.word	0x0800e129
 800e0f0:	0800e129 	.word	0x0800e129
 800e0f4:	0800e121 	.word	0x0800e121
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e0fe:	e18e      	b.n	800e41e <USART_SetConfig+0x476>
 800e100:	2302      	movs	r3, #2
 800e102:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e106:	e18a      	b.n	800e41e <USART_SetConfig+0x476>
 800e108:	2304      	movs	r3, #4
 800e10a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e10e:	e186      	b.n	800e41e <USART_SetConfig+0x476>
 800e110:	2308      	movs	r3, #8
 800e112:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e116:	e182      	b.n	800e41e <USART_SetConfig+0x476>
 800e118:	2310      	movs	r3, #16
 800e11a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e11e:	e17e      	b.n	800e41e <USART_SetConfig+0x476>
 800e120:	2320      	movs	r3, #32
 800e122:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e126:	e17a      	b.n	800e41e <USART_SetConfig+0x476>
 800e128:	2340      	movs	r3, #64	@ 0x40
 800e12a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e12e:	e176      	b.n	800e41e <USART_SetConfig+0x476>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a75      	ldr	r2, [pc, #468]	@ (800e30c <USART_SetConfig+0x364>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d130      	bne.n	800e19c <USART_SetConfig+0x1f4>
 800e13a:	4b73      	ldr	r3, [pc, #460]	@ (800e308 <USART_SetConfig+0x360>)
 800e13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e13e:	f003 0307 	and.w	r3, r3, #7
 800e142:	2b05      	cmp	r3, #5
 800e144:	d826      	bhi.n	800e194 <USART_SetConfig+0x1ec>
 800e146:	a201      	add	r2, pc, #4	@ (adr r2, 800e14c <USART_SetConfig+0x1a4>)
 800e148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e14c:	0800e165 	.word	0x0800e165
 800e150:	0800e16d 	.word	0x0800e16d
 800e154:	0800e175 	.word	0x0800e175
 800e158:	0800e17d 	.word	0x0800e17d
 800e15c:	0800e185 	.word	0x0800e185
 800e160:	0800e18d 	.word	0x0800e18d
 800e164:	2300      	movs	r3, #0
 800e166:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e16a:	e158      	b.n	800e41e <USART_SetConfig+0x476>
 800e16c:	2302      	movs	r3, #2
 800e16e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e172:	e154      	b.n	800e41e <USART_SetConfig+0x476>
 800e174:	2304      	movs	r3, #4
 800e176:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e17a:	e150      	b.n	800e41e <USART_SetConfig+0x476>
 800e17c:	2308      	movs	r3, #8
 800e17e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e182:	e14c      	b.n	800e41e <USART_SetConfig+0x476>
 800e184:	2310      	movs	r3, #16
 800e186:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e18a:	e148      	b.n	800e41e <USART_SetConfig+0x476>
 800e18c:	2320      	movs	r3, #32
 800e18e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e192:	e144      	b.n	800e41e <USART_SetConfig+0x476>
 800e194:	2340      	movs	r3, #64	@ 0x40
 800e196:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e19a:	e140      	b.n	800e41e <USART_SetConfig+0x476>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a5b      	ldr	r2, [pc, #364]	@ (800e310 <USART_SetConfig+0x368>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d130      	bne.n	800e208 <USART_SetConfig+0x260>
 800e1a6:	4b58      	ldr	r3, [pc, #352]	@ (800e308 <USART_SetConfig+0x360>)
 800e1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1aa:	f003 0307 	and.w	r3, r3, #7
 800e1ae:	2b05      	cmp	r3, #5
 800e1b0:	d826      	bhi.n	800e200 <USART_SetConfig+0x258>
 800e1b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e1b8 <USART_SetConfig+0x210>)
 800e1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b8:	0800e1d1 	.word	0x0800e1d1
 800e1bc:	0800e1d9 	.word	0x0800e1d9
 800e1c0:	0800e1e1 	.word	0x0800e1e1
 800e1c4:	0800e1e9 	.word	0x0800e1e9
 800e1c8:	0800e1f1 	.word	0x0800e1f1
 800e1cc:	0800e1f9 	.word	0x0800e1f9
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e1d6:	e122      	b.n	800e41e <USART_SetConfig+0x476>
 800e1d8:	2302      	movs	r3, #2
 800e1da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e1de:	e11e      	b.n	800e41e <USART_SetConfig+0x476>
 800e1e0:	2304      	movs	r3, #4
 800e1e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e1e6:	e11a      	b.n	800e41e <USART_SetConfig+0x476>
 800e1e8:	2308      	movs	r3, #8
 800e1ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e1ee:	e116      	b.n	800e41e <USART_SetConfig+0x476>
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e1f6:	e112      	b.n	800e41e <USART_SetConfig+0x476>
 800e1f8:	2320      	movs	r3, #32
 800e1fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e1fe:	e10e      	b.n	800e41e <USART_SetConfig+0x476>
 800e200:	2340      	movs	r3, #64	@ 0x40
 800e202:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e206:	e10a      	b.n	800e41e <USART_SetConfig+0x476>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a41      	ldr	r2, [pc, #260]	@ (800e314 <USART_SetConfig+0x36c>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	f040 8086 	bne.w	800e320 <USART_SetConfig+0x378>
 800e214:	4b3c      	ldr	r3, [pc, #240]	@ (800e308 <USART_SetConfig+0x360>)
 800e216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e218:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e21c:	2b28      	cmp	r3, #40	@ 0x28
 800e21e:	d87b      	bhi.n	800e318 <USART_SetConfig+0x370>
 800e220:	a201      	add	r2, pc, #4	@ (adr r2, 800e228 <USART_SetConfig+0x280>)
 800e222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e226:	bf00      	nop
 800e228:	0800e2cd 	.word	0x0800e2cd
 800e22c:	0800e319 	.word	0x0800e319
 800e230:	0800e319 	.word	0x0800e319
 800e234:	0800e319 	.word	0x0800e319
 800e238:	0800e319 	.word	0x0800e319
 800e23c:	0800e319 	.word	0x0800e319
 800e240:	0800e319 	.word	0x0800e319
 800e244:	0800e319 	.word	0x0800e319
 800e248:	0800e2d5 	.word	0x0800e2d5
 800e24c:	0800e319 	.word	0x0800e319
 800e250:	0800e319 	.word	0x0800e319
 800e254:	0800e319 	.word	0x0800e319
 800e258:	0800e319 	.word	0x0800e319
 800e25c:	0800e319 	.word	0x0800e319
 800e260:	0800e319 	.word	0x0800e319
 800e264:	0800e319 	.word	0x0800e319
 800e268:	0800e2dd 	.word	0x0800e2dd
 800e26c:	0800e319 	.word	0x0800e319
 800e270:	0800e319 	.word	0x0800e319
 800e274:	0800e319 	.word	0x0800e319
 800e278:	0800e319 	.word	0x0800e319
 800e27c:	0800e319 	.word	0x0800e319
 800e280:	0800e319 	.word	0x0800e319
 800e284:	0800e319 	.word	0x0800e319
 800e288:	0800e2e5 	.word	0x0800e2e5
 800e28c:	0800e319 	.word	0x0800e319
 800e290:	0800e319 	.word	0x0800e319
 800e294:	0800e319 	.word	0x0800e319
 800e298:	0800e319 	.word	0x0800e319
 800e29c:	0800e319 	.word	0x0800e319
 800e2a0:	0800e319 	.word	0x0800e319
 800e2a4:	0800e319 	.word	0x0800e319
 800e2a8:	0800e2ed 	.word	0x0800e2ed
 800e2ac:	0800e319 	.word	0x0800e319
 800e2b0:	0800e319 	.word	0x0800e319
 800e2b4:	0800e319 	.word	0x0800e319
 800e2b8:	0800e319 	.word	0x0800e319
 800e2bc:	0800e319 	.word	0x0800e319
 800e2c0:	0800e319 	.word	0x0800e319
 800e2c4:	0800e319 	.word	0x0800e319
 800e2c8:	0800e2f5 	.word	0x0800e2f5
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e2d2:	e0a4      	b.n	800e41e <USART_SetConfig+0x476>
 800e2d4:	2302      	movs	r3, #2
 800e2d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e2da:	e0a0      	b.n	800e41e <USART_SetConfig+0x476>
 800e2dc:	2304      	movs	r3, #4
 800e2de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e2e2:	e09c      	b.n	800e41e <USART_SetConfig+0x476>
 800e2e4:	2308      	movs	r3, #8
 800e2e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e2ea:	e098      	b.n	800e41e <USART_SetConfig+0x476>
 800e2ec:	2310      	movs	r3, #16
 800e2ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e2f2:	e094      	b.n	800e41e <USART_SetConfig+0x476>
 800e2f4:	2320      	movs	r3, #32
 800e2f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e2fa:	e090      	b.n	800e41e <USART_SetConfig+0x476>
 800e2fc:	cfff69f3 	.word	0xcfff69f3
 800e300:	ffffc0f6 	.word	0xffffc0f6
 800e304:	40011000 	.word	0x40011000
 800e308:	58024400 	.word	0x58024400
 800e30c:	40004400 	.word	0x40004400
 800e310:	40004800 	.word	0x40004800
 800e314:	40011400 	.word	0x40011400
 800e318:	2340      	movs	r3, #64	@ 0x40
 800e31a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e31e:	e07e      	b.n	800e41e <USART_SetConfig+0x476>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4ab5      	ldr	r2, [pc, #724]	@ (800e5fc <USART_SetConfig+0x654>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d176      	bne.n	800e418 <USART_SetConfig+0x470>
 800e32a:	4bb5      	ldr	r3, [pc, #724]	@ (800e600 <USART_SetConfig+0x658>)
 800e32c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e32e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e332:	2b28      	cmp	r3, #40	@ 0x28
 800e334:	d86c      	bhi.n	800e410 <USART_SetConfig+0x468>
 800e336:	a201      	add	r2, pc, #4	@ (adr r2, 800e33c <USART_SetConfig+0x394>)
 800e338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e33c:	0800e3e1 	.word	0x0800e3e1
 800e340:	0800e411 	.word	0x0800e411
 800e344:	0800e411 	.word	0x0800e411
 800e348:	0800e411 	.word	0x0800e411
 800e34c:	0800e411 	.word	0x0800e411
 800e350:	0800e411 	.word	0x0800e411
 800e354:	0800e411 	.word	0x0800e411
 800e358:	0800e411 	.word	0x0800e411
 800e35c:	0800e3e9 	.word	0x0800e3e9
 800e360:	0800e411 	.word	0x0800e411
 800e364:	0800e411 	.word	0x0800e411
 800e368:	0800e411 	.word	0x0800e411
 800e36c:	0800e411 	.word	0x0800e411
 800e370:	0800e411 	.word	0x0800e411
 800e374:	0800e411 	.word	0x0800e411
 800e378:	0800e411 	.word	0x0800e411
 800e37c:	0800e3f1 	.word	0x0800e3f1
 800e380:	0800e411 	.word	0x0800e411
 800e384:	0800e411 	.word	0x0800e411
 800e388:	0800e411 	.word	0x0800e411
 800e38c:	0800e411 	.word	0x0800e411
 800e390:	0800e411 	.word	0x0800e411
 800e394:	0800e411 	.word	0x0800e411
 800e398:	0800e411 	.word	0x0800e411
 800e39c:	0800e3f9 	.word	0x0800e3f9
 800e3a0:	0800e411 	.word	0x0800e411
 800e3a4:	0800e411 	.word	0x0800e411
 800e3a8:	0800e411 	.word	0x0800e411
 800e3ac:	0800e411 	.word	0x0800e411
 800e3b0:	0800e411 	.word	0x0800e411
 800e3b4:	0800e411 	.word	0x0800e411
 800e3b8:	0800e411 	.word	0x0800e411
 800e3bc:	0800e401 	.word	0x0800e401
 800e3c0:	0800e411 	.word	0x0800e411
 800e3c4:	0800e411 	.word	0x0800e411
 800e3c8:	0800e411 	.word	0x0800e411
 800e3cc:	0800e411 	.word	0x0800e411
 800e3d0:	0800e411 	.word	0x0800e411
 800e3d4:	0800e411 	.word	0x0800e411
 800e3d8:	0800e411 	.word	0x0800e411
 800e3dc:	0800e409 	.word	0x0800e409
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e3e6:	e01a      	b.n	800e41e <USART_SetConfig+0x476>
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e3ee:	e016      	b.n	800e41e <USART_SetConfig+0x476>
 800e3f0:	2304      	movs	r3, #4
 800e3f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e3f6:	e012      	b.n	800e41e <USART_SetConfig+0x476>
 800e3f8:	2308      	movs	r3, #8
 800e3fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e3fe:	e00e      	b.n	800e41e <USART_SetConfig+0x476>
 800e400:	2310      	movs	r3, #16
 800e402:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e406:	e00a      	b.n	800e41e <USART_SetConfig+0x476>
 800e408:	2320      	movs	r3, #32
 800e40a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e40e:	e006      	b.n	800e41e <USART_SetConfig+0x476>
 800e410:	2340      	movs	r3, #64	@ 0x40
 800e412:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e416:	e002      	b.n	800e41e <USART_SetConfig+0x476>
 800e418:	2340      	movs	r3, #64	@ 0x40
 800e41a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800e41e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e422:	2b20      	cmp	r3, #32
 800e424:	f200 832f 	bhi.w	800ea86 <USART_SetConfig+0xade>
 800e428:	a201      	add	r2, pc, #4	@ (adr r2, 800e430 <USART_SetConfig+0x488>)
 800e42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42e:	bf00      	nop
 800e430:	0800e4b5 	.word	0x0800e4b5
 800e434:	0800e56b 	.word	0x0800e56b
 800e438:	0800e62b 	.word	0x0800e62b
 800e43c:	0800ea87 	.word	0x0800ea87
 800e440:	0800e6e5 	.word	0x0800e6e5
 800e444:	0800ea87 	.word	0x0800ea87
 800e448:	0800ea87 	.word	0x0800ea87
 800e44c:	0800ea87 	.word	0x0800ea87
 800e450:	0800e79f 	.word	0x0800e79f
 800e454:	0800ea87 	.word	0x0800ea87
 800e458:	0800ea87 	.word	0x0800ea87
 800e45c:	0800ea87 	.word	0x0800ea87
 800e460:	0800ea87 	.word	0x0800ea87
 800e464:	0800ea87 	.word	0x0800ea87
 800e468:	0800ea87 	.word	0x0800ea87
 800e46c:	0800ea87 	.word	0x0800ea87
 800e470:	0800e917 	.word	0x0800e917
 800e474:	0800ea87 	.word	0x0800ea87
 800e478:	0800ea87 	.word	0x0800ea87
 800e47c:	0800ea87 	.word	0x0800ea87
 800e480:	0800ea87 	.word	0x0800ea87
 800e484:	0800ea87 	.word	0x0800ea87
 800e488:	0800ea87 	.word	0x0800ea87
 800e48c:	0800ea87 	.word	0x0800ea87
 800e490:	0800ea87 	.word	0x0800ea87
 800e494:	0800ea87 	.word	0x0800ea87
 800e498:	0800ea87 	.word	0x0800ea87
 800e49c:	0800ea87 	.word	0x0800ea87
 800e4a0:	0800ea87 	.word	0x0800ea87
 800e4a4:	0800ea87 	.word	0x0800ea87
 800e4a8:	0800ea87 	.word	0x0800ea87
 800e4ac:	0800ea87 	.word	0x0800ea87
 800e4b0:	0800e9d5 	.word	0x0800e9d5
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800e4b4:	f7f8 fdd4 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 800e4b8:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d044      	beq.n	800e54c <USART_SetConfig+0x5a4>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d03e      	beq.n	800e548 <USART_SetConfig+0x5a0>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d038      	beq.n	800e544 <USART_SetConfig+0x59c>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d032      	beq.n	800e540 <USART_SetConfig+0x598>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4de:	2b04      	cmp	r3, #4
 800e4e0:	d02c      	beq.n	800e53c <USART_SetConfig+0x594>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4e6:	2b05      	cmp	r3, #5
 800e4e8:	d026      	beq.n	800e538 <USART_SetConfig+0x590>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ee:	2b06      	cmp	r3, #6
 800e4f0:	d020      	beq.n	800e534 <USART_SetConfig+0x58c>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4f6:	2b07      	cmp	r3, #7
 800e4f8:	d01a      	beq.n	800e530 <USART_SetConfig+0x588>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4fe:	2b08      	cmp	r3, #8
 800e500:	d014      	beq.n	800e52c <USART_SetConfig+0x584>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e506:	2b09      	cmp	r3, #9
 800e508:	d00e      	beq.n	800e528 <USART_SetConfig+0x580>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e50e:	2b0a      	cmp	r3, #10
 800e510:	d008      	beq.n	800e524 <USART_SetConfig+0x57c>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e516:	2b0b      	cmp	r3, #11
 800e518:	d102      	bne.n	800e520 <USART_SetConfig+0x578>
 800e51a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e51e:	e016      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e520:	2301      	movs	r3, #1
 800e522:	e014      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e524:	2380      	movs	r3, #128	@ 0x80
 800e526:	e012      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e528:	2340      	movs	r3, #64	@ 0x40
 800e52a:	e010      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e52c:	2320      	movs	r3, #32
 800e52e:	e00e      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e530:	2310      	movs	r3, #16
 800e532:	e00c      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e534:	230c      	movs	r3, #12
 800e536:	e00a      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e538:	230a      	movs	r3, #10
 800e53a:	e008      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e53c:	2308      	movs	r3, #8
 800e53e:	e006      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e540:	2306      	movs	r3, #6
 800e542:	e004      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e544:	2304      	movs	r3, #4
 800e546:	e002      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e548:	2302      	movs	r3, #2
 800e54a:	e000      	b.n	800e54e <USART_SetConfig+0x5a6>
 800e54c:	2301      	movs	r3, #1
 800e54e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e550:	fbb2 f3f3 	udiv	r3, r2, r3
 800e554:	005a      	lsls	r2, r3, #1
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	085b      	lsrs	r3, r3, #1
 800e55c:	441a      	add	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	fbb2 f3f3 	udiv	r3, r2, r3
 800e566:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e568:	e291      	b.n	800ea8e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800e56a:	f7f8 fd8f 	bl	800708c <HAL_RCC_GetPCLK2Freq>
 800e56e:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e574:	2b00      	cmp	r3, #0
 800e576:	d049      	beq.n	800e60c <USART_SetConfig+0x664>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d043      	beq.n	800e608 <USART_SetConfig+0x660>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e584:	2b02      	cmp	r3, #2
 800e586:	d03d      	beq.n	800e604 <USART_SetConfig+0x65c>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e58c:	2b03      	cmp	r3, #3
 800e58e:	d032      	beq.n	800e5f6 <USART_SetConfig+0x64e>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e594:	2b04      	cmp	r3, #4
 800e596:	d02c      	beq.n	800e5f2 <USART_SetConfig+0x64a>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e59c:	2b05      	cmp	r3, #5
 800e59e:	d026      	beq.n	800e5ee <USART_SetConfig+0x646>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5a4:	2b06      	cmp	r3, #6
 800e5a6:	d020      	beq.n	800e5ea <USART_SetConfig+0x642>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5ac:	2b07      	cmp	r3, #7
 800e5ae:	d01a      	beq.n	800e5e6 <USART_SetConfig+0x63e>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5b4:	2b08      	cmp	r3, #8
 800e5b6:	d014      	beq.n	800e5e2 <USART_SetConfig+0x63a>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5bc:	2b09      	cmp	r3, #9
 800e5be:	d00e      	beq.n	800e5de <USART_SetConfig+0x636>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c4:	2b0a      	cmp	r3, #10
 800e5c6:	d008      	beq.n	800e5da <USART_SetConfig+0x632>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5cc:	2b0b      	cmp	r3, #11
 800e5ce:	d102      	bne.n	800e5d6 <USART_SetConfig+0x62e>
 800e5d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5d4:	e01b      	b.n	800e60e <USART_SetConfig+0x666>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e019      	b.n	800e60e <USART_SetConfig+0x666>
 800e5da:	2380      	movs	r3, #128	@ 0x80
 800e5dc:	e017      	b.n	800e60e <USART_SetConfig+0x666>
 800e5de:	2340      	movs	r3, #64	@ 0x40
 800e5e0:	e015      	b.n	800e60e <USART_SetConfig+0x666>
 800e5e2:	2320      	movs	r3, #32
 800e5e4:	e013      	b.n	800e60e <USART_SetConfig+0x666>
 800e5e6:	2310      	movs	r3, #16
 800e5e8:	e011      	b.n	800e60e <USART_SetConfig+0x666>
 800e5ea:	230c      	movs	r3, #12
 800e5ec:	e00f      	b.n	800e60e <USART_SetConfig+0x666>
 800e5ee:	230a      	movs	r3, #10
 800e5f0:	e00d      	b.n	800e60e <USART_SetConfig+0x666>
 800e5f2:	2308      	movs	r3, #8
 800e5f4:	e00b      	b.n	800e60e <USART_SetConfig+0x666>
 800e5f6:	2306      	movs	r3, #6
 800e5f8:	e009      	b.n	800e60e <USART_SetConfig+0x666>
 800e5fa:	bf00      	nop
 800e5fc:	40011c00 	.word	0x40011c00
 800e600:	58024400 	.word	0x58024400
 800e604:	2304      	movs	r3, #4
 800e606:	e002      	b.n	800e60e <USART_SetConfig+0x666>
 800e608:	2302      	movs	r3, #2
 800e60a:	e000      	b.n	800e60e <USART_SetConfig+0x666>
 800e60c:	2301      	movs	r3, #1
 800e60e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e610:	fbb2 f3f3 	udiv	r3, r2, r3
 800e614:	005a      	lsls	r2, r3, #1
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	085b      	lsrs	r3, r3, #1
 800e61c:	441a      	add	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	fbb2 f3f3 	udiv	r3, r2, r3
 800e626:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e628:	e231      	b.n	800ea8e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e62a:	f107 0318 	add.w	r3, r7, #24
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fa fbca 	bl	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800e634:	69fa      	ldr	r2, [r7, #28]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d044      	beq.n	800e6c8 <USART_SetConfig+0x720>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e642:	2b01      	cmp	r3, #1
 800e644:	d03e      	beq.n	800e6c4 <USART_SetConfig+0x71c>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e64a:	2b02      	cmp	r3, #2
 800e64c:	d038      	beq.n	800e6c0 <USART_SetConfig+0x718>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e652:	2b03      	cmp	r3, #3
 800e654:	d032      	beq.n	800e6bc <USART_SetConfig+0x714>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e65a:	2b04      	cmp	r3, #4
 800e65c:	d02c      	beq.n	800e6b8 <USART_SetConfig+0x710>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e662:	2b05      	cmp	r3, #5
 800e664:	d026      	beq.n	800e6b4 <USART_SetConfig+0x70c>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e66a:	2b06      	cmp	r3, #6
 800e66c:	d020      	beq.n	800e6b0 <USART_SetConfig+0x708>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e672:	2b07      	cmp	r3, #7
 800e674:	d01a      	beq.n	800e6ac <USART_SetConfig+0x704>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e67a:	2b08      	cmp	r3, #8
 800e67c:	d014      	beq.n	800e6a8 <USART_SetConfig+0x700>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e682:	2b09      	cmp	r3, #9
 800e684:	d00e      	beq.n	800e6a4 <USART_SetConfig+0x6fc>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e68a:	2b0a      	cmp	r3, #10
 800e68c:	d008      	beq.n	800e6a0 <USART_SetConfig+0x6f8>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e692:	2b0b      	cmp	r3, #11
 800e694:	d102      	bne.n	800e69c <USART_SetConfig+0x6f4>
 800e696:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e69a:	e016      	b.n	800e6ca <USART_SetConfig+0x722>
 800e69c:	2301      	movs	r3, #1
 800e69e:	e014      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6a0:	2380      	movs	r3, #128	@ 0x80
 800e6a2:	e012      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6a4:	2340      	movs	r3, #64	@ 0x40
 800e6a6:	e010      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6a8:	2320      	movs	r3, #32
 800e6aa:	e00e      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6ac:	2310      	movs	r3, #16
 800e6ae:	e00c      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6b0:	230c      	movs	r3, #12
 800e6b2:	e00a      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6b4:	230a      	movs	r3, #10
 800e6b6:	e008      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6b8:	2308      	movs	r3, #8
 800e6ba:	e006      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6bc:	2306      	movs	r3, #6
 800e6be:	e004      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6c0:	2304      	movs	r3, #4
 800e6c2:	e002      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	e000      	b.n	800e6ca <USART_SetConfig+0x722>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ce:	005a      	lsls	r2, r3, #1
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	085b      	lsrs	r3, r3, #1
 800e6d6:	441a      	add	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6e0:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e6e2:	e1d4      	b.n	800ea8e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6e4:	f107 030c 	add.w	r3, r7, #12
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fa fcc1 	bl	8009070 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800e6ee:	693a      	ldr	r2, [r7, #16]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d044      	beq.n	800e782 <USART_SetConfig+0x7da>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d03e      	beq.n	800e77e <USART_SetConfig+0x7d6>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e704:	2b02      	cmp	r3, #2
 800e706:	d038      	beq.n	800e77a <USART_SetConfig+0x7d2>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e70c:	2b03      	cmp	r3, #3
 800e70e:	d032      	beq.n	800e776 <USART_SetConfig+0x7ce>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e714:	2b04      	cmp	r3, #4
 800e716:	d02c      	beq.n	800e772 <USART_SetConfig+0x7ca>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e71c:	2b05      	cmp	r3, #5
 800e71e:	d026      	beq.n	800e76e <USART_SetConfig+0x7c6>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e724:	2b06      	cmp	r3, #6
 800e726:	d020      	beq.n	800e76a <USART_SetConfig+0x7c2>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e72c:	2b07      	cmp	r3, #7
 800e72e:	d01a      	beq.n	800e766 <USART_SetConfig+0x7be>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e734:	2b08      	cmp	r3, #8
 800e736:	d014      	beq.n	800e762 <USART_SetConfig+0x7ba>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e73c:	2b09      	cmp	r3, #9
 800e73e:	d00e      	beq.n	800e75e <USART_SetConfig+0x7b6>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e744:	2b0a      	cmp	r3, #10
 800e746:	d008      	beq.n	800e75a <USART_SetConfig+0x7b2>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e74c:	2b0b      	cmp	r3, #11
 800e74e:	d102      	bne.n	800e756 <USART_SetConfig+0x7ae>
 800e750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e754:	e016      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e756:	2301      	movs	r3, #1
 800e758:	e014      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e75a:	2380      	movs	r3, #128	@ 0x80
 800e75c:	e012      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e75e:	2340      	movs	r3, #64	@ 0x40
 800e760:	e010      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e762:	2320      	movs	r3, #32
 800e764:	e00e      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e766:	2310      	movs	r3, #16
 800e768:	e00c      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e76a:	230c      	movs	r3, #12
 800e76c:	e00a      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e76e:	230a      	movs	r3, #10
 800e770:	e008      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e772:	2308      	movs	r3, #8
 800e774:	e006      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e776:	2306      	movs	r3, #6
 800e778:	e004      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e77a:	2304      	movs	r3, #4
 800e77c:	e002      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e77e:	2302      	movs	r3, #2
 800e780:	e000      	b.n	800e784 <USART_SetConfig+0x7dc>
 800e782:	2301      	movs	r3, #1
 800e784:	fbb2 f3f3 	udiv	r3, r2, r3
 800e788:	005a      	lsls	r2, r3, #1
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	085b      	lsrs	r3, r3, #1
 800e790:	441a      	add	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	fbb2 f3f3 	udiv	r3, r2, r3
 800e79a:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e79c:	e177      	b.n	800ea8e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e79e:	4b8a      	ldr	r3, [pc, #552]	@ (800e9c8 <USART_SetConfig+0xa20>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f003 0320 	and.w	r3, r3, #32
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d05d      	beq.n	800e866 <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800e7aa:	4b87      	ldr	r3, [pc, #540]	@ (800e9c8 <USART_SetConfig+0xa20>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	08db      	lsrs	r3, r3, #3
 800e7b0:	f003 0303 	and.w	r3, r3, #3
 800e7b4:	4a85      	ldr	r2, [pc, #532]	@ (800e9cc <USART_SetConfig+0xa24>)
 800e7b6:	40da      	lsrs	r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d044      	beq.n	800e84a <USART_SetConfig+0x8a2>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d03e      	beq.n	800e846 <USART_SetConfig+0x89e>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7cc:	2b02      	cmp	r3, #2
 800e7ce:	d038      	beq.n	800e842 <USART_SetConfig+0x89a>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7d4:	2b03      	cmp	r3, #3
 800e7d6:	d032      	beq.n	800e83e <USART_SetConfig+0x896>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7dc:	2b04      	cmp	r3, #4
 800e7de:	d02c      	beq.n	800e83a <USART_SetConfig+0x892>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7e4:	2b05      	cmp	r3, #5
 800e7e6:	d026      	beq.n	800e836 <USART_SetConfig+0x88e>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7ec:	2b06      	cmp	r3, #6
 800e7ee:	d020      	beq.n	800e832 <USART_SetConfig+0x88a>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7f4:	2b07      	cmp	r3, #7
 800e7f6:	d01a      	beq.n	800e82e <USART_SetConfig+0x886>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7fc:	2b08      	cmp	r3, #8
 800e7fe:	d014      	beq.n	800e82a <USART_SetConfig+0x882>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e804:	2b09      	cmp	r3, #9
 800e806:	d00e      	beq.n	800e826 <USART_SetConfig+0x87e>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e80c:	2b0a      	cmp	r3, #10
 800e80e:	d008      	beq.n	800e822 <USART_SetConfig+0x87a>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e814:	2b0b      	cmp	r3, #11
 800e816:	d102      	bne.n	800e81e <USART_SetConfig+0x876>
 800e818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e81c:	e016      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e81e:	2301      	movs	r3, #1
 800e820:	e014      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e822:	2380      	movs	r3, #128	@ 0x80
 800e824:	e012      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e826:	2340      	movs	r3, #64	@ 0x40
 800e828:	e010      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e82a:	2320      	movs	r3, #32
 800e82c:	e00e      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e82e:	2310      	movs	r3, #16
 800e830:	e00c      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e832:	230c      	movs	r3, #12
 800e834:	e00a      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e836:	230a      	movs	r3, #10
 800e838:	e008      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e83a:	2308      	movs	r3, #8
 800e83c:	e006      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e83e:	2306      	movs	r3, #6
 800e840:	e004      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e842:	2304      	movs	r3, #4
 800e844:	e002      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e846:	2302      	movs	r3, #2
 800e848:	e000      	b.n	800e84c <USART_SetConfig+0x8a4>
 800e84a:	2301      	movs	r3, #1
 800e84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e850:	005a      	lsls	r2, r3, #1
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	085b      	lsrs	r3, r3, #1
 800e858:	441a      	add	r2, r3
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e862:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800e864:	e113      	b.n	800ea8e <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d044      	beq.n	800e8f8 <USART_SetConfig+0x950>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e872:	2b01      	cmp	r3, #1
 800e874:	d03e      	beq.n	800e8f4 <USART_SetConfig+0x94c>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e87a:	2b02      	cmp	r3, #2
 800e87c:	d038      	beq.n	800e8f0 <USART_SetConfig+0x948>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e882:	2b03      	cmp	r3, #3
 800e884:	d032      	beq.n	800e8ec <USART_SetConfig+0x944>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e88a:	2b04      	cmp	r3, #4
 800e88c:	d02c      	beq.n	800e8e8 <USART_SetConfig+0x940>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e892:	2b05      	cmp	r3, #5
 800e894:	d026      	beq.n	800e8e4 <USART_SetConfig+0x93c>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e89a:	2b06      	cmp	r3, #6
 800e89c:	d020      	beq.n	800e8e0 <USART_SetConfig+0x938>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8a2:	2b07      	cmp	r3, #7
 800e8a4:	d01a      	beq.n	800e8dc <USART_SetConfig+0x934>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8aa:	2b08      	cmp	r3, #8
 800e8ac:	d014      	beq.n	800e8d8 <USART_SetConfig+0x930>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8b2:	2b09      	cmp	r3, #9
 800e8b4:	d00e      	beq.n	800e8d4 <USART_SetConfig+0x92c>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ba:	2b0a      	cmp	r3, #10
 800e8bc:	d008      	beq.n	800e8d0 <USART_SetConfig+0x928>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8c2:	2b0b      	cmp	r3, #11
 800e8c4:	d102      	bne.n	800e8cc <USART_SetConfig+0x924>
 800e8c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8ca:	e016      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	e014      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8d0:	2380      	movs	r3, #128	@ 0x80
 800e8d2:	e012      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8d4:	2340      	movs	r3, #64	@ 0x40
 800e8d6:	e010      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8d8:	2320      	movs	r3, #32
 800e8da:	e00e      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8dc:	2310      	movs	r3, #16
 800e8de:	e00c      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8e0:	230c      	movs	r3, #12
 800e8e2:	e00a      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8e4:	230a      	movs	r3, #10
 800e8e6:	e008      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8e8:	2308      	movs	r3, #8
 800e8ea:	e006      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8ec:	2306      	movs	r3, #6
 800e8ee:	e004      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8f0:	2304      	movs	r3, #4
 800e8f2:	e002      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8f4:	2302      	movs	r3, #2
 800e8f6:	e000      	b.n	800e8fa <USART_SetConfig+0x952>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	4a34      	ldr	r2, [pc, #208]	@ (800e9cc <USART_SetConfig+0xa24>)
 800e8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e900:	005a      	lsls	r2, r3, #1
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	085b      	lsrs	r3, r3, #1
 800e908:	441a      	add	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e912:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e914:	e0bb      	b.n	800ea8e <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d044      	beq.n	800e9a8 <USART_SetConfig+0xa00>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e922:	2b01      	cmp	r3, #1
 800e924:	d03e      	beq.n	800e9a4 <USART_SetConfig+0x9fc>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	d038      	beq.n	800e9a0 <USART_SetConfig+0x9f8>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e932:	2b03      	cmp	r3, #3
 800e934:	d032      	beq.n	800e99c <USART_SetConfig+0x9f4>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e93a:	2b04      	cmp	r3, #4
 800e93c:	d02c      	beq.n	800e998 <USART_SetConfig+0x9f0>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e942:	2b05      	cmp	r3, #5
 800e944:	d026      	beq.n	800e994 <USART_SetConfig+0x9ec>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e94a:	2b06      	cmp	r3, #6
 800e94c:	d020      	beq.n	800e990 <USART_SetConfig+0x9e8>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e952:	2b07      	cmp	r3, #7
 800e954:	d01a      	beq.n	800e98c <USART_SetConfig+0x9e4>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e95a:	2b08      	cmp	r3, #8
 800e95c:	d014      	beq.n	800e988 <USART_SetConfig+0x9e0>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e962:	2b09      	cmp	r3, #9
 800e964:	d00e      	beq.n	800e984 <USART_SetConfig+0x9dc>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e96a:	2b0a      	cmp	r3, #10
 800e96c:	d008      	beq.n	800e980 <USART_SetConfig+0x9d8>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e972:	2b0b      	cmp	r3, #11
 800e974:	d102      	bne.n	800e97c <USART_SetConfig+0x9d4>
 800e976:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e97a:	e016      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e97c:	2301      	movs	r3, #1
 800e97e:	e014      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e980:	2380      	movs	r3, #128	@ 0x80
 800e982:	e012      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e984:	2340      	movs	r3, #64	@ 0x40
 800e986:	e010      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e988:	2320      	movs	r3, #32
 800e98a:	e00e      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e98c:	2310      	movs	r3, #16
 800e98e:	e00c      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e990:	230c      	movs	r3, #12
 800e992:	e00a      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e994:	230a      	movs	r3, #10
 800e996:	e008      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e998:	2308      	movs	r3, #8
 800e99a:	e006      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e99c:	2306      	movs	r3, #6
 800e99e:	e004      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e9a0:	2304      	movs	r3, #4
 800e9a2:	e002      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e9a4:	2302      	movs	r3, #2
 800e9a6:	e000      	b.n	800e9aa <USART_SetConfig+0xa02>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	4a09      	ldr	r2, [pc, #36]	@ (800e9d0 <USART_SetConfig+0xa28>)
 800e9ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9b0:	005a      	lsls	r2, r3, #1
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	085b      	lsrs	r3, r3, #1
 800e9b8:	441a      	add	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9c2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e9c4:	e063      	b.n	800ea8e <USART_SetConfig+0xae6>
 800e9c6:	bf00      	nop
 800e9c8:	58024400 	.word	0x58024400
 800e9cc:	03d09000 	.word	0x03d09000
 800e9d0:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d044      	beq.n	800ea66 <USART_SetConfig+0xabe>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d03e      	beq.n	800ea62 <USART_SetConfig+0xaba>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9e8:	2b02      	cmp	r3, #2
 800e9ea:	d038      	beq.n	800ea5e <USART_SetConfig+0xab6>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9f0:	2b03      	cmp	r3, #3
 800e9f2:	d032      	beq.n	800ea5a <USART_SetConfig+0xab2>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9f8:	2b04      	cmp	r3, #4
 800e9fa:	d02c      	beq.n	800ea56 <USART_SetConfig+0xaae>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea00:	2b05      	cmp	r3, #5
 800ea02:	d026      	beq.n	800ea52 <USART_SetConfig+0xaaa>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea08:	2b06      	cmp	r3, #6
 800ea0a:	d020      	beq.n	800ea4e <USART_SetConfig+0xaa6>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea10:	2b07      	cmp	r3, #7
 800ea12:	d01a      	beq.n	800ea4a <USART_SetConfig+0xaa2>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea18:	2b08      	cmp	r3, #8
 800ea1a:	d014      	beq.n	800ea46 <USART_SetConfig+0xa9e>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea20:	2b09      	cmp	r3, #9
 800ea22:	d00e      	beq.n	800ea42 <USART_SetConfig+0xa9a>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea28:	2b0a      	cmp	r3, #10
 800ea2a:	d008      	beq.n	800ea3e <USART_SetConfig+0xa96>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea30:	2b0b      	cmp	r3, #11
 800ea32:	d102      	bne.n	800ea3a <USART_SetConfig+0xa92>
 800ea34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea38:	e016      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e014      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea3e:	2380      	movs	r3, #128	@ 0x80
 800ea40:	e012      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea42:	2340      	movs	r3, #64	@ 0x40
 800ea44:	e010      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea46:	2320      	movs	r3, #32
 800ea48:	e00e      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea4a:	2310      	movs	r3, #16
 800ea4c:	e00c      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea4e:	230c      	movs	r3, #12
 800ea50:	e00a      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea52:	230a      	movs	r3, #10
 800ea54:	e008      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea56:	2308      	movs	r3, #8
 800ea58:	e006      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea5a:	2306      	movs	r3, #6
 800ea5c:	e004      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea5e:	2304      	movs	r3, #4
 800ea60:	e002      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea62:	2302      	movs	r3, #2
 800ea64:	e000      	b.n	800ea68 <USART_SetConfig+0xac0>
 800ea66:	2301      	movs	r3, #1
 800ea68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800ea6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea70:	005a      	lsls	r2, r3, #1
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	085b      	lsrs	r3, r3, #1
 800ea78:	441a      	add	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea82:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ea84:	e003      	b.n	800ea8e <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800ea86:	2301      	movs	r3, #1
 800ea88:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800ea8c:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800ea8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea90:	2b0f      	cmp	r3, #15
 800ea92:	d916      	bls.n	800eac2 <USART_SetConfig+0xb1a>
 800ea94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea9a:	d212      	bcs.n	800eac2 <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	f023 030f 	bic.w	r3, r3, #15
 800eaa4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa8:	085b      	lsrs	r3, r3, #1
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	f003 0307 	and.w	r3, r3, #7
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eab4:	4313      	orrs	r3, r2
 800eab6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800eabe:	60da      	str	r2, [r3, #12]
 800eac0:	e002      	b.n	800eac8 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800eac2:	2301      	movs	r3, #1
 800eac4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2201      	movs	r2, #1
 800ead2:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2200      	movs	r2, #0
 800ead8:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2200      	movs	r2, #0
 800eade:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800eae0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3738      	adds	r7, #56	@ 0x38
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af02      	add	r7, sp, #8
 800eaf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eafa:	f7f4 fd9f 	bl	800363c <HAL_GetTick>
 800eafe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f003 0308 	and.w	r3, r3, #8
 800eb0a:	2b08      	cmp	r3, #8
 800eb0c:	d10e      	bne.n	800eb2c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800eb0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7ff fa0d 	bl	800df3c <USART_WaitOnFlagUntilTimeout>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d001      	beq.n	800eb2c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb28:	2303      	movs	r3, #3
 800eb2a:	e01e      	b.n	800eb6a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f003 0304 	and.w	r3, r3, #4
 800eb36:	2b04      	cmp	r3, #4
 800eb38:	d10e      	bne.n	800eb58 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800eb3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f7ff f9f7 	bl	800df3c <USART_WaitOnFlagUntilTimeout>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb54:	2303      	movs	r3, #3
 800eb56:	e008      	b.n	800eb6a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800eb68:	2300      	movs	r3, #0
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800eb72:	b480      	push	{r7}
 800eb74:	b085      	sub	sp, #20
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d101      	bne.n	800eb88 <HAL_USARTEx_EnableSlaveMode+0x16>
 800eb84:	2302      	movs	r3, #2
 800eb86:	e043      	b.n	800ec10 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2202      	movs	r2, #2
 800eb94:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f022 0201 	bic.w	r2, r2, #1
 800ebae:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	685a      	ldr	r2, [r3, #4]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ebbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	689a      	ldr	r2, [r3, #8]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ebce:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	685a      	ldr	r2, [r3, #4]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f042 0201 	orr.w	r2, r2, #1
 800ebde:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	68fa      	ldr	r2, [r7, #12]
 800ebe6:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f042 0201 	orr.w	r2, r2, #1
 800ec04:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ec0e:	2300      	movs	r3, #0
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3714      	adds	r7, #20
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b085      	sub	sp, #20
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d101      	bne.n	800ec34 <HAL_USARTEx_ConfigNSS+0x18>
 800ec30:	2302      	movs	r3, #2
 800ec32:	e02a      	b.n	800ec8a <HAL_USARTEx_ConfigNSS+0x6e>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2202      	movs	r2, #2
 800ec40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f022 0201 	bic.w	r2, r2, #1
 800ec5a:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	f023 0108 	bic.w	r1, r3, #8
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	430a      	orrs	r2, r1
 800ec6e:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ec88:	2300      	movs	r3, #0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3714      	adds	r7, #20
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800ec96:	b480      	push	{r7}
 800ec98:	b085      	sub	sp, #20
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d101      	bne.n	800ecac <HAL_USARTEx_DisableFifoMode+0x16>
 800eca8:	2302      	movs	r3, #2
 800ecaa:	e027      	b.n	800ecfc <HAL_USARTEx_DisableFifoMode+0x66>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f022 0201 	bic.w	r2, r2, #1
 800ecd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ecda:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	68fa      	ldr	r2, [r7, #12]
 800ece8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2201      	movs	r2, #1
 800ecee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ecfa:	2300      	movs	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3714      	adds	r7, #20
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d101      	bne.n	800ed20 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	e02d      	b.n	800ed7c <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2201      	movs	r2, #1
 800ed24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2202      	movs	r2, #2
 800ed2c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f022 0201 	bic.w	r2, r2, #1
 800ed46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	683a      	ldr	r2, [r7, #0]
 800ed58:	430a      	orrs	r2, r1
 800ed5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f000 f84f 	bl	800ee00 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d101      	bne.n	800ed9c <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800ed98:	2302      	movs	r3, #2
 800ed9a:	e02d      	b.n	800edf8 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2201      	movs	r2, #1
 800eda0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2202      	movs	r2, #2
 800eda8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f022 0201 	bic.w	r2, r2, #1
 800edc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	683a      	ldr	r2, [r7, #0]
 800edd4:	430a      	orrs	r2, r1
 800edd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f000 f811 	bl	800ee00 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2201      	movs	r2, #1
 800edea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2200      	movs	r2, #0
 800edf2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3710      	adds	r7, #16
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b085      	sub	sp, #20
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d106      	bne.n	800ee1e <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ee1c:	e02f      	b.n	800ee7e <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ee1e:	2310      	movs	r3, #16
 800ee20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ee22:	2310      	movs	r3, #16
 800ee24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800ee2c:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	f003 0307 	and.w	r3, r3, #7
 800ee34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800ee3c:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	f003 0307 	and.w	r3, r3, #7
 800ee44:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee46:	7bbb      	ldrb	r3, [r7, #14]
 800ee48:	7b3a      	ldrb	r2, [r7, #12]
 800ee4a:	4910      	ldr	r1, [pc, #64]	@ (800ee8c <USARTEx_SetNbDataToProcess+0x8c>)
 800ee4c:	5c8a      	ldrb	r2, [r1, r2]
 800ee4e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800ee52:	7b3a      	ldrb	r2, [r7, #12]
 800ee54:	490e      	ldr	r1, [pc, #56]	@ (800ee90 <USARTEx_SetNbDataToProcess+0x90>)
 800ee56:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee62:	7bfb      	ldrb	r3, [r7, #15]
 800ee64:	7b7a      	ldrb	r2, [r7, #13]
 800ee66:	4909      	ldr	r1, [pc, #36]	@ (800ee8c <USARTEx_SetNbDataToProcess+0x8c>)
 800ee68:	5c8a      	ldrb	r2, [r1, r2]
 800ee6a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800ee6e:	7b7a      	ldrb	r2, [r7, #13]
 800ee70:	4907      	ldr	r1, [pc, #28]	@ (800ee90 <USARTEx_SetNbDataToProcess+0x90>)
 800ee72:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee74:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800ee7e:	bf00      	nop
 800ee80:	3714      	adds	r7, #20
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop
 800ee8c:	080143d4 	.word	0x080143d4
 800ee90:	080143dc 	.word	0x080143dc

0800ee94 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ee94:	b084      	sub	sp, #16
 800ee96:	b480      	push	{r7}
 800ee98:	b085      	sub	sp, #20
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
 800ee9e:	f107 001c 	add.w	r0, r7, #28
 800eea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800eea6:	2300      	movs	r3, #0
 800eea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800eeaa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800eeac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800eeae:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800eeb2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800eeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800eeb6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800eeb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800eeba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800eebc:	68fa      	ldr	r2, [r7, #12]
 800eebe:	4313      	orrs	r3, r2
 800eec0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	685a      	ldr	r2, [r3, #4]
 800eec6:	4b07      	ldr	r3, [pc, #28]	@ (800eee4 <SDMMC_Init+0x50>)
 800eec8:	4013      	ands	r3, r2
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	431a      	orrs	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800eed2:	2300      	movs	r3, #0
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3714      	adds	r7, #20
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	b004      	add	sp, #16
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	ffc02c00 	.word	0xffc02c00

0800eee8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	370c      	adds	r7, #12
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr

0800ef02 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ef02:	b480      	push	{r7}
 800ef04:	b083      	sub	sp, #12
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
 800ef0a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ef16:	2300      	movs	r3, #0
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	370c      	adds	r7, #12
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f043 0203 	orr.w	r2, r3, #3
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ef38:	2300      	movs	r3, #0
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	370c      	adds	r7, #12
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr

0800ef46 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ef46:	b480      	push	{r7}
 800ef48:	b083      	sub	sp, #12
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f003 0303 	and.w	r3, r3, #3
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	370c      	adds	r7, #12
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
	...

0800ef64 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b085      	sub	sp, #20
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ef82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ef88:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ef8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	4313      	orrs	r3, r2
 800ef94:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	68da      	ldr	r2, [r3, #12]
 800ef9a:	4b06      	ldr	r3, [pc, #24]	@ (800efb4 <SDMMC_SendCommand+0x50>)
 800ef9c:	4013      	ands	r3, r2
 800ef9e:	68fa      	ldr	r2, [r7, #12]
 800efa0:	431a      	orrs	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800efa6:	2300      	movs	r3, #0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3714      	adds	r7, #20
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr
 800efb4:	fffee0c0 	.word	0xfffee0c0

0800efb8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	691b      	ldr	r3, [r3, #16]
 800efc4:	b2db      	uxtb	r3, r3
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	370c      	adds	r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800efd2:	b480      	push	{r7}
 800efd4:	b085      	sub	sp, #20
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	3314      	adds	r3, #20
 800efe0:	461a      	mov	r2, r3
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	4413      	add	r3, r2
 800efe6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
}
 800efec:	4618      	mov	r0, r3
 800efee:	3714      	adds	r7, #20
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f002:	2300      	movs	r3, #0
 800f004:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f01e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800f024:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800f02a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	4313      	orrs	r3, r2
 800f030:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f036:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	431a      	orrs	r2, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f042:	2300      	movs	r3, #0

}
 800f044:	4618      	mov	r0, r3
 800f046:	3714      	adds	r7, #20
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b088      	sub	sp, #32
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f05e:	2310      	movs	r3, #16
 800f060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f062:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f068:	2300      	movs	r3, #0
 800f06a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f06c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f070:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f072:	f107 0308 	add.w	r3, r7, #8
 800f076:	4619      	mov	r1, r3
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f7ff ff73 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f07e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f082:	2110      	movs	r1, #16
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 fa5f 	bl	800f548 <SDMMC_GetCmdResp1>
 800f08a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f08c:	69fb      	ldr	r3, [r7, #28]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3720      	adds	r7, #32
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b088      	sub	sp, #32
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f0a4:	2311      	movs	r3, #17
 800f0a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f0ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0b8:	f107 0308 	add.w	r3, r7, #8
 800f0bc:	4619      	mov	r1, r3
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7ff ff50 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f0c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0c8:	2111      	movs	r1, #17
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 fa3c 	bl	800f548 <SDMMC_GetCmdResp1>
 800f0d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0d2:	69fb      	ldr	r3, [r7, #28]
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3720      	adds	r7, #32
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f0ea:	2312      	movs	r3, #18
 800f0ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f0f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0fe:	f107 0308 	add.w	r3, r7, #8
 800f102:	4619      	mov	r1, r3
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f7ff ff2d 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f10a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f10e:	2112      	movs	r1, #18
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fa19 	bl	800f548 <SDMMC_GetCmdResp1>
 800f116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f118:	69fb      	ldr	r3, [r7, #28]
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3720      	adds	r7, #32
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f122:	b580      	push	{r7, lr}
 800f124:	b088      	sub	sp, #32
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
 800f12a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f130:	2318      	movs	r3, #24
 800f132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f134:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f13a:	2300      	movs	r3, #0
 800f13c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f13e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f142:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f144:	f107 0308 	add.w	r3, r7, #8
 800f148:	4619      	mov	r1, r3
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f7ff ff0a 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f150:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f154:	2118      	movs	r1, #24
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 f9f6 	bl	800f548 <SDMMC_GetCmdResp1>
 800f15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f15e:	69fb      	ldr	r3, [r7, #28]
}
 800f160:	4618      	mov	r0, r3
 800f162:	3720      	adds	r7, #32
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b088      	sub	sp, #32
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f176:	2319      	movs	r3, #25
 800f178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f17a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f17e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f180:	2300      	movs	r3, #0
 800f182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f18a:	f107 0308 	add.w	r3, r7, #8
 800f18e:	4619      	mov	r1, r3
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7ff fee7 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f19a:	2119      	movs	r1, #25
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 f9d3 	bl	800f548 <SDMMC_GetCmdResp1>
 800f1a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1a4:	69fb      	ldr	r3, [r7, #28]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3720      	adds	r7, #32
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
	...

0800f1b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f1bc:	230c      	movs	r3, #12
 800f1be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f1c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f1ce:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f1e8:	f107 0308 	add.w	r3, r7, #8
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f7ff feb8 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f1f4:	4a0b      	ldr	r2, [pc, #44]	@ (800f224 <SDMMC_CmdStopTransfer+0x74>)
 800f1f6:	210c      	movs	r1, #12
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f000 f9a5 	bl	800f548 <SDMMC_GetCmdResp1>
 800f1fe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f212:	d101      	bne.n	800f218 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800f214:	2300      	movs	r3, #0
 800f216:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800f218:	69fb      	ldr	r3, [r7, #28]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3720      	adds	r7, #32
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	05f5e100 	.word	0x05f5e100

0800f228 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b088      	sub	sp, #32
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f236:	2307      	movs	r3, #7
 800f238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f23a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f23e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f240:	2300      	movs	r3, #0
 800f242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f248:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f24a:	f107 0308 	add.w	r3, r7, #8
 800f24e:	4619      	mov	r1, r3
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f7ff fe87 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f25a:	2107      	movs	r1, #7
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 f973 	bl	800f548 <SDMMC_GetCmdResp1>
 800f262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f264:	69fb      	ldr	r3, [r7, #28]
}
 800f266:	4618      	mov	r0, r3
 800f268:	3720      	adds	r7, #32
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f26e:	b580      	push	{r7, lr}
 800f270:	b088      	sub	sp, #32
 800f272:	af00      	add	r7, sp, #0
 800f274:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f276:	2300      	movs	r3, #0
 800f278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f27a:	2300      	movs	r3, #0
 800f27c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f27e:	2300      	movs	r3, #0
 800f280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f282:	2300      	movs	r3, #0
 800f284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f28a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f28c:	f107 0308 	add.w	r3, r7, #8
 800f290:	4619      	mov	r1, r3
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f7ff fe66 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 fb97 	bl	800f9cc <SDMMC_GetCmdError>
 800f29e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2a0:	69fb      	ldr	r3, [r7, #28]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3720      	adds	r7, #32
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}

0800f2aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f2aa:	b580      	push	{r7, lr}
 800f2ac:	b088      	sub	sp, #32
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f2b2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800f2b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f2b8:	2308      	movs	r3, #8
 800f2ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f2c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f2ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2cc:	f107 0308 	add.w	r3, r7, #8
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f7ff fe46 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f000 fb29 	bl	800f930 <SDMMC_GetCmdResp7>
 800f2de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2e0:	69fb      	ldr	r3, [r7, #28]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3720      	adds	r7, #32
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b088      	sub	sp, #32
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
 800f2f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f2f8:	2337      	movs	r3, #55	@ 0x37
 800f2fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f302:	2300      	movs	r3, #0
 800f304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f30a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f30c:	f107 0308 	add.w	r3, r7, #8
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff fe26 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f31c:	2137      	movs	r1, #55	@ 0x37
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 f912 	bl	800f548 <SDMMC_GetCmdResp1>
 800f324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f326:	69fb      	ldr	r3, [r7, #28]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3720      	adds	r7, #32
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b088      	sub	sp, #32
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f33e:	2329      	movs	r3, #41	@ 0x29
 800f340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f342:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f348:	2300      	movs	r3, #0
 800f34a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f34c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f350:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f352:	f107 0308 	add.w	r3, r7, #8
 800f356:	4619      	mov	r1, r3
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f7ff fe03 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 fa2e 	bl	800f7c0 <SDMMC_GetCmdResp3>
 800f364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f366:	69fb      	ldr	r3, [r7, #28]
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3720      	adds	r7, #32
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b088      	sub	sp, #32
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f37e:	2306      	movs	r3, #6
 800f380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f382:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f388:	2300      	movs	r3, #0
 800f38a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f38c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f390:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f392:	f107 0308 	add.w	r3, r7, #8
 800f396:	4619      	mov	r1, r3
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f7ff fde3 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f39e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3a2:	2106      	movs	r1, #6
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 f8cf 	bl	800f548 <SDMMC_GetCmdResp1>
 800f3aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3ac:	69fb      	ldr	r3, [r7, #28]
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3720      	adds	r7, #32
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}

0800f3b6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f3b6:	b580      	push	{r7, lr}
 800f3b8:	b088      	sub	sp, #32
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f3c2:	2333      	movs	r3, #51	@ 0x33
 800f3c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f3ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f3d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3d6:	f107 0308 	add.w	r3, r7, #8
 800f3da:	4619      	mov	r1, r3
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff fdc1 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f3e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3e6:	2133      	movs	r1, #51	@ 0x33
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 f8ad 	bl	800f548 <SDMMC_GetCmdResp1>
 800f3ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3f0:	69fb      	ldr	r3, [r7, #28]
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3720      	adds	r7, #32
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b088      	sub	sp, #32
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f402:	2300      	movs	r3, #0
 800f404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f406:	2302      	movs	r3, #2
 800f408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f40a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f40e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f410:	2300      	movs	r3, #0
 800f412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f418:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f41a:	f107 0308 	add.w	r3, r7, #8
 800f41e:	4619      	mov	r1, r3
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7ff fd9f 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f000 f980 	bl	800f72c <SDMMC_GetCmdResp2>
 800f42c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f42e:	69fb      	ldr	r3, [r7, #28]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3720      	adds	r7, #32
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b088      	sub	sp, #32
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f446:	2309      	movs	r3, #9
 800f448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f44a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f44e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f450:	2300      	movs	r3, #0
 800f452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f458:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f45a:	f107 0308 	add.w	r3, r7, #8
 800f45e:	4619      	mov	r1, r3
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f7ff fd7f 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 f960 	bl	800f72c <SDMMC_GetCmdResp2>
 800f46c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f46e:	69fb      	ldr	r3, [r7, #28]
}
 800f470:	4618      	mov	r0, r3
 800f472:	3720      	adds	r7, #32
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b088      	sub	sp, #32
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f482:	2300      	movs	r3, #0
 800f484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f486:	2303      	movs	r3, #3
 800f488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f48a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f490:	2300      	movs	r3, #0
 800f492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f498:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f49a:	f107 0308 	add.w	r3, r7, #8
 800f49e:	4619      	mov	r1, r3
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7ff fd5f 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f4a6:	683a      	ldr	r2, [r7, #0]
 800f4a8:	2103      	movs	r1, #3
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f9c8 	bl	800f840 <SDMMC_GetCmdResp6>
 800f4b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4b2:	69fb      	ldr	r3, [r7, #28]
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3720      	adds	r7, #32
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b088      	sub	sp, #32
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f4ca:	230d      	movs	r3, #13
 800f4cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f4d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f4dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4de:	f107 0308 	add.w	r3, r7, #8
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f7ff fd3d 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f4ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4ee:	210d      	movs	r1, #13
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 f829 	bl	800f548 <SDMMC_GetCmdResp1>
 800f4f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4f8:	69fb      	ldr	r3, [r7, #28]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3720      	adds	r7, #32
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b088      	sub	sp, #32
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f50a:	2300      	movs	r3, #0
 800f50c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f50e:	230d      	movs	r3, #13
 800f510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f512:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f518:	2300      	movs	r3, #0
 800f51a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f51c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f520:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f522:	f107 0308 	add.w	r3, r7, #8
 800f526:	4619      	mov	r1, r3
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f7ff fd1b 	bl	800ef64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f52e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f532:	210d      	movs	r1, #13
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 f807 	bl	800f548 <SDMMC_GetCmdResp1>
 800f53a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f53c:	69fb      	ldr	r3, [r7, #28]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3720      	adds	r7, #32
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
	...

0800f548 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b088      	sub	sp, #32
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	460b      	mov	r3, r1
 800f552:	607a      	str	r2, [r7, #4]
 800f554:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f556:	4b70      	ldr	r3, [pc, #448]	@ (800f718 <SDMMC_GetCmdResp1+0x1d0>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4a70      	ldr	r2, [pc, #448]	@ (800f71c <SDMMC_GetCmdResp1+0x1d4>)
 800f55c:	fba2 2303 	umull	r2, r3, r2, r3
 800f560:	0a5a      	lsrs	r2, r3, #9
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	fb02 f303 	mul.w	r3, r2, r3
 800f568:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	1e5a      	subs	r2, r3, #1
 800f56e:	61fa      	str	r2, [r7, #28]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d102      	bne.n	800f57a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f574:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f578:	e0c9      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f57e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f580:	69ba      	ldr	r2, [r7, #24]
 800f582:	4b67      	ldr	r3, [pc, #412]	@ (800f720 <SDMMC_GetCmdResp1+0x1d8>)
 800f584:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f586:	2b00      	cmp	r3, #0
 800f588:	d0ef      	beq.n	800f56a <SDMMC_GetCmdResp1+0x22>
 800f58a:	69bb      	ldr	r3, [r7, #24]
 800f58c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f590:	2b00      	cmp	r3, #0
 800f592:	d1ea      	bne.n	800f56a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f598:	f003 0304 	and.w	r3, r3, #4
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d004      	beq.n	800f5aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2204      	movs	r2, #4
 800f5a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f5a6:	2304      	movs	r3, #4
 800f5a8:	e0b1      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5ae:	f003 0301 	and.w	r3, r3, #1
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d004      	beq.n	800f5c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f5bc:	2301      	movs	r3, #1
 800f5be:	e0a6      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	4a58      	ldr	r2, [pc, #352]	@ (800f724 <SDMMC_GetCmdResp1+0x1dc>)
 800f5c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f7ff fcf6 	bl	800efb8 <SDMMC_GetCommandResponse>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	7afb      	ldrb	r3, [r7, #11]
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d001      	beq.n	800f5da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e099      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f5da:	2100      	movs	r1, #0
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f7ff fcf8 	bl	800efd2 <SDMMC_GetResponse>
 800f5e2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f5e4:	697a      	ldr	r2, [r7, #20]
 800f5e6:	4b50      	ldr	r3, [pc, #320]	@ (800f728 <SDMMC_GetCmdResp1+0x1e0>)
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d101      	bne.n	800f5f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e08d      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	da02      	bge.n	800f5fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f5f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f5fc:	e087      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f604:	2b00      	cmp	r3, #0
 800f606:	d001      	beq.n	800f60c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f608:	2340      	movs	r3, #64	@ 0x40
 800f60a:	e080      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f616:	2380      	movs	r3, #128	@ 0x80
 800f618:	e079      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f620:	2b00      	cmp	r3, #0
 800f622:	d002      	beq.n	800f62a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f628:	e071      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f630:	2b00      	cmp	r3, #0
 800f632:	d002      	beq.n	800f63a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f638:	e069      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f640:	2b00      	cmp	r3, #0
 800f642:	d002      	beq.n	800f64a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f648:	e061      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f650:	2b00      	cmp	r3, #0
 800f652:	d002      	beq.n	800f65a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f654:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f658:	e059      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f660:	2b00      	cmp	r3, #0
 800f662:	d002      	beq.n	800f66a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f668:	e051      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f670:	2b00      	cmp	r3, #0
 800f672:	d002      	beq.n	800f67a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f674:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f678:	e049      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f680:	2b00      	cmp	r3, #0
 800f682:	d002      	beq.n	800f68a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f684:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f688:	e041      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f690:	2b00      	cmp	r3, #0
 800f692:	d002      	beq.n	800f69a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f694:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f698:	e039      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d002      	beq.n	800f6aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f6a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f6a8:	e031      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d002      	beq.n	800f6ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f6b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f6b8:	e029      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d002      	beq.n	800f6ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f6c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f6c8:	e021      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d002      	beq.n	800f6da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f6d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f6d8:	e019      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d002      	beq.n	800f6ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f6e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f6e8:	e011      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d002      	beq.n	800f6fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f6f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f6f8:	e009      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	f003 0308 	and.w	r3, r3, #8
 800f700:	2b00      	cmp	r3, #0
 800f702:	d002      	beq.n	800f70a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f704:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800f708:	e001      	b.n	800f70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f70a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3720      	adds	r7, #32
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	24000000 	.word	0x24000000
 800f71c:	10624dd3 	.word	0x10624dd3
 800f720:	00200045 	.word	0x00200045
 800f724:	002000c5 	.word	0x002000c5
 800f728:	fdffe008 	.word	0xfdffe008

0800f72c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f734:	4b1f      	ldr	r3, [pc, #124]	@ (800f7b4 <SDMMC_GetCmdResp2+0x88>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a1f      	ldr	r2, [pc, #124]	@ (800f7b8 <SDMMC_GetCmdResp2+0x8c>)
 800f73a:	fba2 2303 	umull	r2, r3, r2, r3
 800f73e:	0a5b      	lsrs	r3, r3, #9
 800f740:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f744:	fb02 f303 	mul.w	r3, r2, r3
 800f748:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	1e5a      	subs	r2, r3, #1
 800f74e:	60fa      	str	r2, [r7, #12]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d102      	bne.n	800f75a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f754:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f758:	e026      	b.n	800f7a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f75e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f766:	2b00      	cmp	r3, #0
 800f768:	d0ef      	beq.n	800f74a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f770:	2b00      	cmp	r3, #0
 800f772:	d1ea      	bne.n	800f74a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f778:	f003 0304 	and.w	r3, r3, #4
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d004      	beq.n	800f78a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2204      	movs	r2, #4
 800f784:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f786:	2304      	movs	r3, #4
 800f788:	e00e      	b.n	800f7a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f78e:	f003 0301 	and.w	r3, r3, #1
 800f792:	2b00      	cmp	r3, #0
 800f794:	d004      	beq.n	800f7a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2201      	movs	r2, #1
 800f79a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f79c:	2301      	movs	r3, #1
 800f79e:	e003      	b.n	800f7a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a06      	ldr	r2, [pc, #24]	@ (800f7bc <SDMMC_GetCmdResp2+0x90>)
 800f7a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f7a6:	2300      	movs	r3, #0
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3714      	adds	r7, #20
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr
 800f7b4:	24000000 	.word	0x24000000
 800f7b8:	10624dd3 	.word	0x10624dd3
 800f7bc:	002000c5 	.word	0x002000c5

0800f7c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f7c8:	4b1a      	ldr	r3, [pc, #104]	@ (800f834 <SDMMC_GetCmdResp3+0x74>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a1a      	ldr	r2, [pc, #104]	@ (800f838 <SDMMC_GetCmdResp3+0x78>)
 800f7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800f7d2:	0a5b      	lsrs	r3, r3, #9
 800f7d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f7d8:	fb02 f303 	mul.w	r3, r2, r3
 800f7dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	1e5a      	subs	r2, r3, #1
 800f7e2:	60fa      	str	r2, [r7, #12]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d102      	bne.n	800f7ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f7e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f7ec:	e01b      	b.n	800f826 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d0ef      	beq.n	800f7de <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1ea      	bne.n	800f7de <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f80c:	f003 0304 	and.w	r3, r3, #4
 800f810:	2b00      	cmp	r3, #0
 800f812:	d004      	beq.n	800f81e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2204      	movs	r2, #4
 800f818:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f81a:	2304      	movs	r3, #4
 800f81c:	e003      	b.n	800f826 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4a06      	ldr	r2, [pc, #24]	@ (800f83c <SDMMC_GetCmdResp3+0x7c>)
 800f822:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f824:	2300      	movs	r3, #0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3714      	adds	r7, #20
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop
 800f834:	24000000 	.word	0x24000000
 800f838:	10624dd3 	.word	0x10624dd3
 800f83c:	002000c5 	.word	0x002000c5

0800f840 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b088      	sub	sp, #32
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	460b      	mov	r3, r1
 800f84a:	607a      	str	r2, [r7, #4]
 800f84c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f84e:	4b35      	ldr	r3, [pc, #212]	@ (800f924 <SDMMC_GetCmdResp6+0xe4>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4a35      	ldr	r2, [pc, #212]	@ (800f928 <SDMMC_GetCmdResp6+0xe8>)
 800f854:	fba2 2303 	umull	r2, r3, r2, r3
 800f858:	0a5b      	lsrs	r3, r3, #9
 800f85a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f85e:	fb02 f303 	mul.w	r3, r2, r3
 800f862:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	1e5a      	subs	r2, r3, #1
 800f868:	61fa      	str	r2, [r7, #28]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d102      	bne.n	800f874 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f86e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f872:	e052      	b.n	800f91a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f878:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f87a:	69bb      	ldr	r3, [r7, #24]
 800f87c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f880:	2b00      	cmp	r3, #0
 800f882:	d0ef      	beq.n	800f864 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d1ea      	bne.n	800f864 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f892:	f003 0304 	and.w	r3, r3, #4
 800f896:	2b00      	cmp	r3, #0
 800f898:	d004      	beq.n	800f8a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2204      	movs	r2, #4
 800f89e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f8a0:	2304      	movs	r3, #4
 800f8a2:	e03a      	b.n	800f91a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8a8:	f003 0301 	and.w	r3, r3, #1
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d004      	beq.n	800f8ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e02f      	b.n	800f91a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f7ff fb7c 	bl	800efb8 <SDMMC_GetCommandResponse>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	7afb      	ldrb	r3, [r7, #11]
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d001      	beq.n	800f8ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e025      	b.n	800f91a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	4a16      	ldr	r2, [pc, #88]	@ (800f92c <SDMMC_GetCmdResp6+0xec>)
 800f8d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f7ff fb7b 	bl	800efd2 <SDMMC_GetResponse>
 800f8dc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d106      	bne.n	800f8f6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	0c1b      	lsrs	r3, r3, #16
 800f8ec:	b29a      	uxth	r2, r3
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	e011      	b.n	800f91a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d002      	beq.n	800f906 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f904:	e009      	b.n	800f91a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d002      	beq.n	800f916 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f914:	e001      	b.n	800f91a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f916:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3720      	adds	r7, #32
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	24000000 	.word	0x24000000
 800f928:	10624dd3 	.word	0x10624dd3
 800f92c:	002000c5 	.word	0x002000c5

0800f930 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f930:	b480      	push	{r7}
 800f932:	b085      	sub	sp, #20
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f938:	4b22      	ldr	r3, [pc, #136]	@ (800f9c4 <SDMMC_GetCmdResp7+0x94>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a22      	ldr	r2, [pc, #136]	@ (800f9c8 <SDMMC_GetCmdResp7+0x98>)
 800f93e:	fba2 2303 	umull	r2, r3, r2, r3
 800f942:	0a5b      	lsrs	r3, r3, #9
 800f944:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f948:	fb02 f303 	mul.w	r3, r2, r3
 800f94c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	1e5a      	subs	r2, r3, #1
 800f952:	60fa      	str	r2, [r7, #12]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d102      	bne.n	800f95e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f958:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f95c:	e02c      	b.n	800f9b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f962:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d0ef      	beq.n	800f94e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f974:	2b00      	cmp	r3, #0
 800f976:	d1ea      	bne.n	800f94e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f97c:	f003 0304 	and.w	r3, r3, #4
 800f980:	2b00      	cmp	r3, #0
 800f982:	d004      	beq.n	800f98e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2204      	movs	r2, #4
 800f988:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f98a:	2304      	movs	r3, #4
 800f98c:	e014      	b.n	800f9b8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f992:	f003 0301 	and.w	r3, r3, #1
 800f996:	2b00      	cmp	r3, #0
 800f998:	d004      	beq.n	800f9a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2201      	movs	r2, #1
 800f99e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	e009      	b.n	800f9b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d002      	beq.n	800f9b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2240      	movs	r2, #64	@ 0x40
 800f9b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f9b6:	2300      	movs	r3, #0

}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3714      	adds	r7, #20
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr
 800f9c4:	24000000 	.word	0x24000000
 800f9c8:	10624dd3 	.word	0x10624dd3

0800f9cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b085      	sub	sp, #20
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f9d4:	4b11      	ldr	r3, [pc, #68]	@ (800fa1c <SDMMC_GetCmdError+0x50>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4a11      	ldr	r2, [pc, #68]	@ (800fa20 <SDMMC_GetCmdError+0x54>)
 800f9da:	fba2 2303 	umull	r2, r3, r2, r3
 800f9de:	0a5b      	lsrs	r3, r3, #9
 800f9e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f9e4:	fb02 f303 	mul.w	r3, r2, r3
 800f9e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	1e5a      	subs	r2, r3, #1
 800f9ee:	60fa      	str	r2, [r7, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d102      	bne.n	800f9fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f9f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f9f8:	e009      	b.n	800fa0e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d0f1      	beq.n	800f9ea <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4a06      	ldr	r2, [pc, #24]	@ (800fa24 <SDMMC_GetCmdError+0x58>)
 800fa0a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3714      	adds	r7, #20
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	24000000 	.word	0x24000000
 800fa20:	10624dd3 	.word	0x10624dd3
 800fa24:	002000c5 	.word	0x002000c5

0800fa28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fa2c:	4904      	ldr	r1, [pc, #16]	@ (800fa40 <MX_FATFS_Init+0x18>)
 800fa2e:	4805      	ldr	r0, [pc, #20]	@ (800fa44 <MX_FATFS_Init+0x1c>)
 800fa30:	f000 f9e4 	bl	800fdfc <FATFS_LinkDriver>
 800fa34:	4603      	mov	r3, r0
 800fa36:	461a      	mov	r2, r3
 800fa38:	4b03      	ldr	r3, [pc, #12]	@ (800fa48 <MX_FATFS_Init+0x20>)
 800fa3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fa3c:	bf00      	nop
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	24000bc8 	.word	0x24000bc8
 800fa44:	080143e4 	.word	0x080143e4
 800fa48:	24000bc4 	.word	0x24000bc4

0800fa4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fa52:	2300      	movs	r3, #0
 800fa54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fa56:	f000 f879 	bl	800fb4c <BSP_SD_IsDetected>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d001      	beq.n	800fa64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fa60:	2302      	movs	r3, #2
 800fa62:	e012      	b.n	800fa8a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fa64:	480b      	ldr	r0, [pc, #44]	@ (800fa94 <BSP_SD_Init+0x48>)
 800fa66:	f7f9 ff0d 	bl	8009884 <HAL_SD_Init>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fa6e:	79fb      	ldrb	r3, [r7, #7]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d109      	bne.n	800fa88 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fa74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800fa78:	4806      	ldr	r0, [pc, #24]	@ (800fa94 <BSP_SD_Init+0x48>)
 800fa7a:	f7fa fdc9 	bl	800a610 <HAL_SD_ConfigWideBusOperation>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fa84:	2301      	movs	r3, #1
 800fa86:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fa88:	79fb      	ldrb	r3, [r7, #7]
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3708      	adds	r7, #8
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	240003d0 	.word	0x240003d0

0800fa98 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b088      	sub	sp, #32
 800fa9c:	af02      	add	r7, sp, #8
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	607a      	str	r2, [r7, #4]
 800faa4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800faa6:	2300      	movs	r3, #0
 800faa8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	9300      	str	r3, [sp, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	68f9      	ldr	r1, [r7, #12]
 800fab4:	4806      	ldr	r0, [pc, #24]	@ (800fad0 <BSP_SD_ReadBlocks+0x38>)
 800fab6:	f7fa f805 	bl	8009ac4 <HAL_SD_ReadBlocks>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d001      	beq.n	800fac4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fac0:	2301      	movs	r3, #1
 800fac2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3718      	adds	r7, #24
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	240003d0 	.word	0x240003d0

0800fad4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b088      	sub	sp, #32
 800fad8:	af02      	add	r7, sp, #8
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
 800fae0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fae2:	2300      	movs	r3, #0
 800fae4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	68f9      	ldr	r1, [r7, #12]
 800faf0:	4806      	ldr	r0, [pc, #24]	@ (800fb0c <BSP_SD_WriteBlocks+0x38>)
 800faf2:	f7fa f971 	bl	8009dd8 <HAL_SD_WriteBlocks>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d001      	beq.n	800fb00 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fafc:	2301      	movs	r3, #1
 800fafe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb00:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3718      	adds	r7, #24
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	240003d0 	.word	0x240003d0

0800fb10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fb14:	4805      	ldr	r0, [pc, #20]	@ (800fb2c <BSP_SD_GetCardState+0x1c>)
 800fb16:	f7fa fe8d 	bl	800a834 <HAL_SD_GetCardState>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b04      	cmp	r3, #4
 800fb1e:	bf14      	ite	ne
 800fb20:	2301      	movne	r3, #1
 800fb22:	2300      	moveq	r3, #0
 800fb24:	b2db      	uxtb	r3, r3
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	240003d0 	.word	0x240003d0

0800fb30 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fb38:	6879      	ldr	r1, [r7, #4]
 800fb3a:	4803      	ldr	r0, [pc, #12]	@ (800fb48 <BSP_SD_GetCardInfo+0x18>)
 800fb3c:	f7fa fd3c 	bl	800a5b8 <HAL_SD_GetCardInfo>
}
 800fb40:	bf00      	nop
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	240003d0 	.word	0x240003d0

0800fb4c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fb52:	2301      	movs	r3, #1
 800fb54:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fb56:	f000 f80b 	bl	800fb70 <BSP_PlatformIsDetected>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d101      	bne.n	800fb64 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fb60:	2300      	movs	r3, #0
 800fb62:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fb64:	79fb      	ldrb	r3, [r7, #7]
 800fb66:	b2db      	uxtb	r3, r3
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fb76:	2301      	movs	r3, #1
 800fb78:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fb7a:	2180      	movs	r1, #128	@ 0x80
 800fb7c:	4806      	ldr	r0, [pc, #24]	@ (800fb98 <BSP_PlatformIsDetected+0x28>)
 800fb7e:	f7f6 f995 	bl	8005eac <HAL_GPIO_ReadPin>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d001      	beq.n	800fb8c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	58020800 	.word	0x58020800

0800fb9c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	4603      	mov	r3, r0
 800fba4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fba6:	4b0b      	ldr	r3, [pc, #44]	@ (800fbd4 <SD_CheckStatus+0x38>)
 800fba8:	2201      	movs	r2, #1
 800fbaa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fbac:	f7ff ffb0 	bl	800fb10 <BSP_SD_GetCardState>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d107      	bne.n	800fbc6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fbb6:	4b07      	ldr	r3, [pc, #28]	@ (800fbd4 <SD_CheckStatus+0x38>)
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	f023 0301 	bic.w	r3, r3, #1
 800fbc0:	b2da      	uxtb	r2, r3
 800fbc2:	4b04      	ldr	r3, [pc, #16]	@ (800fbd4 <SD_CheckStatus+0x38>)
 800fbc4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fbc6:	4b03      	ldr	r3, [pc, #12]	@ (800fbd4 <SD_CheckStatus+0x38>)
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	b2db      	uxtb	r3, r3
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3708      	adds	r7, #8
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	2400000d 	.word	0x2400000d

0800fbd8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	4603      	mov	r3, r0
 800fbe0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800fbe2:	4b0b      	ldr	r3, [pc, #44]	@ (800fc10 <SD_initialize+0x38>)
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fbe8:	f7ff ff30 	bl	800fa4c <BSP_SD_Init>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d107      	bne.n	800fc02 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800fbf2:	79fb      	ldrb	r3, [r7, #7]
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7ff ffd1 	bl	800fb9c <SD_CheckStatus>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	4b04      	ldr	r3, [pc, #16]	@ (800fc10 <SD_initialize+0x38>)
 800fc00:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fc02:	4b03      	ldr	r3, [pc, #12]	@ (800fc10 <SD_initialize+0x38>)
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	b2db      	uxtb	r3, r3
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	2400000d 	.word	0x2400000d

0800fc14 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fc1e:	79fb      	ldrb	r3, [r7, #7]
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7ff ffbb 	bl	800fb9c <SD_CheckStatus>
 800fc26:	4603      	mov	r3, r0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b086      	sub	sp, #24
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60b9      	str	r1, [r7, #8]
 800fc38:	607a      	str	r2, [r7, #4]
 800fc3a:	603b      	str	r3, [r7, #0]
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fc40:	2301      	movs	r3, #1
 800fc42:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800fc44:	f04f 33ff 	mov.w	r3, #4294967295
 800fc48:	683a      	ldr	r2, [r7, #0]
 800fc4a:	6879      	ldr	r1, [r7, #4]
 800fc4c:	68b8      	ldr	r0, [r7, #8]
 800fc4e:	f7ff ff23 	bl	800fa98 <BSP_SD_ReadBlocks>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d107      	bne.n	800fc68 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fc58:	bf00      	nop
 800fc5a:	f7ff ff59 	bl	800fb10 <BSP_SD_GetCardState>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d1fa      	bne.n	800fc5a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800fc64:	2300      	movs	r3, #0
 800fc66:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800fc68:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3718      	adds	r7, #24
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}

0800fc72 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fc72:	b580      	push	{r7, lr}
 800fc74:	b086      	sub	sp, #24
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
 800fc7c:	603b      	str	r3, [r7, #0]
 800fc7e:	4603      	mov	r3, r0
 800fc80:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fc82:	2301      	movs	r3, #1
 800fc84:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800fc86:	f04f 33ff 	mov.w	r3, #4294967295
 800fc8a:	683a      	ldr	r2, [r7, #0]
 800fc8c:	6879      	ldr	r1, [r7, #4]
 800fc8e:	68b8      	ldr	r0, [r7, #8]
 800fc90:	f7ff ff20 	bl	800fad4 <BSP_SD_WriteBlocks>
 800fc94:	4603      	mov	r3, r0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d107      	bne.n	800fcaa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800fc9a:	bf00      	nop
 800fc9c:	f7ff ff38 	bl	800fb10 <BSP_SD_GetCardState>
 800fca0:	4603      	mov	r3, r0
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1fa      	bne.n	800fc9c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800fca6:	2300      	movs	r3, #0
 800fca8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800fcaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3718      	adds	r7, #24
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b08c      	sub	sp, #48	@ 0x30
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	4603      	mov	r3, r0
 800fcbc:	603a      	str	r2, [r7, #0]
 800fcbe:	71fb      	strb	r3, [r7, #7]
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fcca:	4b25      	ldr	r3, [pc, #148]	@ (800fd60 <SD_ioctl+0xac>)
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	f003 0301 	and.w	r3, r3, #1
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d001      	beq.n	800fcdc <SD_ioctl+0x28>
 800fcd8:	2303      	movs	r3, #3
 800fcda:	e03c      	b.n	800fd56 <SD_ioctl+0xa2>

  switch (cmd)
 800fcdc:	79bb      	ldrb	r3, [r7, #6]
 800fcde:	2b03      	cmp	r3, #3
 800fce0:	d834      	bhi.n	800fd4c <SD_ioctl+0x98>
 800fce2:	a201      	add	r2, pc, #4	@ (adr r2, 800fce8 <SD_ioctl+0x34>)
 800fce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fce8:	0800fcf9 	.word	0x0800fcf9
 800fcec:	0800fd01 	.word	0x0800fd01
 800fcf0:	0800fd19 	.word	0x0800fd19
 800fcf4:	0800fd33 	.word	0x0800fd33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fcfe:	e028      	b.n	800fd52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd00:	f107 0308 	add.w	r3, r7, #8
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7ff ff13 	bl	800fb30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fd0a:	6a3a      	ldr	r2, [r7, #32]
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd16:	e01c      	b.n	800fd52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd18:	f107 0308 	add.w	r3, r7, #8
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff ff07 	bl	800fb30 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd30:	e00f      	b.n	800fd52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd32:	f107 0308 	add.w	r3, r7, #8
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7ff fefa 	bl	800fb30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3e:	0a5a      	lsrs	r2, r3, #9
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fd44:	2300      	movs	r3, #0
 800fd46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd4a:	e002      	b.n	800fd52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fd4c:	2304      	movs	r3, #4
 800fd4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800fd52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3730      	adds	r7, #48	@ 0x30
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	2400000d 	.word	0x2400000d

0800fd64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b087      	sub	sp, #28
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	4613      	mov	r3, r2
 800fd70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fd72:	2301      	movs	r3, #1
 800fd74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fd76:	2300      	movs	r3, #0
 800fd78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fd7a:	4b1f      	ldr	r3, [pc, #124]	@ (800fdf8 <FATFS_LinkDriverEx+0x94>)
 800fd7c:	7a5b      	ldrb	r3, [r3, #9]
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d131      	bne.n	800fde8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fd84:	4b1c      	ldr	r3, [pc, #112]	@ (800fdf8 <FATFS_LinkDriverEx+0x94>)
 800fd86:	7a5b      	ldrb	r3, [r3, #9]
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	4b1a      	ldr	r3, [pc, #104]	@ (800fdf8 <FATFS_LinkDriverEx+0x94>)
 800fd8e:	2100      	movs	r1, #0
 800fd90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fd92:	4b19      	ldr	r3, [pc, #100]	@ (800fdf8 <FATFS_LinkDriverEx+0x94>)
 800fd94:	7a5b      	ldrb	r3, [r3, #9]
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	4a17      	ldr	r2, [pc, #92]	@ (800fdf8 <FATFS_LinkDriverEx+0x94>)
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	4413      	add	r3, r2
 800fd9e:	68fa      	ldr	r2, [r7, #12]
 800fda0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fda2:	4b15      	ldr	r3, [pc, #84]	@ (800fdf8 <FATFS_LinkDriverEx+0x94>)
 800fda4:	7a5b      	ldrb	r3, [r3, #9]
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	461a      	mov	r2, r3
 800fdaa:	4b13      	ldr	r3, [pc, #76]	@ (800fdf8 <FATFS_LinkDriverEx+0x94>)
 800fdac:	4413      	add	r3, r2
 800fdae:	79fa      	ldrb	r2, [r7, #7]
 800fdb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fdb2:	4b11      	ldr	r3, [pc, #68]	@ (800fdf8 <FATFS_LinkDriverEx+0x94>)
 800fdb4:	7a5b      	ldrb	r3, [r3, #9]
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	1c5a      	adds	r2, r3, #1
 800fdba:	b2d1      	uxtb	r1, r2
 800fdbc:	4a0e      	ldr	r2, [pc, #56]	@ (800fdf8 <FATFS_LinkDriverEx+0x94>)
 800fdbe:	7251      	strb	r1, [r2, #9]
 800fdc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fdc2:	7dbb      	ldrb	r3, [r7, #22]
 800fdc4:	3330      	adds	r3, #48	@ 0x30
 800fdc6:	b2da      	uxtb	r2, r3
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	3301      	adds	r3, #1
 800fdd0:	223a      	movs	r2, #58	@ 0x3a
 800fdd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	3302      	adds	r3, #2
 800fdd8:	222f      	movs	r2, #47	@ 0x2f
 800fdda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	3303      	adds	r3, #3
 800fde0:	2200      	movs	r2, #0
 800fde2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fde4:	2300      	movs	r3, #0
 800fde6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fde8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	371c      	adds	r7, #28
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr
 800fdf6:	bf00      	nop
 800fdf8:	24000bcc 	.word	0x24000bcc

0800fdfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fe06:	2200      	movs	r2, #0
 800fe08:	6839      	ldr	r1, [r7, #0]
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f7ff ffaa 	bl	800fd64 <FATFS_LinkDriverEx>
 800fe10:	4603      	mov	r3, r0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <__cvt>:
 800fe1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe1c:	ed2d 8b02 	vpush	{d8}
 800fe20:	eeb0 8b40 	vmov.f64	d8, d0
 800fe24:	b085      	sub	sp, #20
 800fe26:	4617      	mov	r7, r2
 800fe28:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800fe2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe2c:	ee18 2a90 	vmov	r2, s17
 800fe30:	f025 0520 	bic.w	r5, r5, #32
 800fe34:	2a00      	cmp	r2, #0
 800fe36:	bfb6      	itet	lt
 800fe38:	222d      	movlt	r2, #45	@ 0x2d
 800fe3a:	2200      	movge	r2, #0
 800fe3c:	eeb1 8b40 	vneglt.f64	d8, d0
 800fe40:	2d46      	cmp	r5, #70	@ 0x46
 800fe42:	460c      	mov	r4, r1
 800fe44:	701a      	strb	r2, [r3, #0]
 800fe46:	d004      	beq.n	800fe52 <__cvt+0x38>
 800fe48:	2d45      	cmp	r5, #69	@ 0x45
 800fe4a:	d100      	bne.n	800fe4e <__cvt+0x34>
 800fe4c:	3401      	adds	r4, #1
 800fe4e:	2102      	movs	r1, #2
 800fe50:	e000      	b.n	800fe54 <__cvt+0x3a>
 800fe52:	2103      	movs	r1, #3
 800fe54:	ab03      	add	r3, sp, #12
 800fe56:	9301      	str	r3, [sp, #4]
 800fe58:	ab02      	add	r3, sp, #8
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	4622      	mov	r2, r4
 800fe5e:	4633      	mov	r3, r6
 800fe60:	eeb0 0b48 	vmov.f64	d0, d8
 800fe64:	f001 f904 	bl	8011070 <_dtoa_r>
 800fe68:	2d47      	cmp	r5, #71	@ 0x47
 800fe6a:	d114      	bne.n	800fe96 <__cvt+0x7c>
 800fe6c:	07fb      	lsls	r3, r7, #31
 800fe6e:	d50a      	bpl.n	800fe86 <__cvt+0x6c>
 800fe70:	1902      	adds	r2, r0, r4
 800fe72:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fe76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe7a:	bf08      	it	eq
 800fe7c:	9203      	streq	r2, [sp, #12]
 800fe7e:	2130      	movs	r1, #48	@ 0x30
 800fe80:	9b03      	ldr	r3, [sp, #12]
 800fe82:	4293      	cmp	r3, r2
 800fe84:	d319      	bcc.n	800feba <__cvt+0xa0>
 800fe86:	9b03      	ldr	r3, [sp, #12]
 800fe88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe8a:	1a1b      	subs	r3, r3, r0
 800fe8c:	6013      	str	r3, [r2, #0]
 800fe8e:	b005      	add	sp, #20
 800fe90:	ecbd 8b02 	vpop	{d8}
 800fe94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe96:	2d46      	cmp	r5, #70	@ 0x46
 800fe98:	eb00 0204 	add.w	r2, r0, r4
 800fe9c:	d1e9      	bne.n	800fe72 <__cvt+0x58>
 800fe9e:	7803      	ldrb	r3, [r0, #0]
 800fea0:	2b30      	cmp	r3, #48	@ 0x30
 800fea2:	d107      	bne.n	800feb4 <__cvt+0x9a>
 800fea4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feac:	bf1c      	itt	ne
 800feae:	f1c4 0401 	rsbne	r4, r4, #1
 800feb2:	6034      	strne	r4, [r6, #0]
 800feb4:	6833      	ldr	r3, [r6, #0]
 800feb6:	441a      	add	r2, r3
 800feb8:	e7db      	b.n	800fe72 <__cvt+0x58>
 800feba:	1c5c      	adds	r4, r3, #1
 800febc:	9403      	str	r4, [sp, #12]
 800febe:	7019      	strb	r1, [r3, #0]
 800fec0:	e7de      	b.n	800fe80 <__cvt+0x66>

0800fec2 <__exponent>:
 800fec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fec4:	2900      	cmp	r1, #0
 800fec6:	bfba      	itte	lt
 800fec8:	4249      	neglt	r1, r1
 800feca:	232d      	movlt	r3, #45	@ 0x2d
 800fecc:	232b      	movge	r3, #43	@ 0x2b
 800fece:	2909      	cmp	r1, #9
 800fed0:	7002      	strb	r2, [r0, #0]
 800fed2:	7043      	strb	r3, [r0, #1]
 800fed4:	dd29      	ble.n	800ff2a <__exponent+0x68>
 800fed6:	f10d 0307 	add.w	r3, sp, #7
 800feda:	461d      	mov	r5, r3
 800fedc:	270a      	movs	r7, #10
 800fede:	461a      	mov	r2, r3
 800fee0:	fbb1 f6f7 	udiv	r6, r1, r7
 800fee4:	fb07 1416 	mls	r4, r7, r6, r1
 800fee8:	3430      	adds	r4, #48	@ 0x30
 800feea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800feee:	460c      	mov	r4, r1
 800fef0:	2c63      	cmp	r4, #99	@ 0x63
 800fef2:	f103 33ff 	add.w	r3, r3, #4294967295
 800fef6:	4631      	mov	r1, r6
 800fef8:	dcf1      	bgt.n	800fede <__exponent+0x1c>
 800fefa:	3130      	adds	r1, #48	@ 0x30
 800fefc:	1e94      	subs	r4, r2, #2
 800fefe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ff02:	1c41      	adds	r1, r0, #1
 800ff04:	4623      	mov	r3, r4
 800ff06:	42ab      	cmp	r3, r5
 800ff08:	d30a      	bcc.n	800ff20 <__exponent+0x5e>
 800ff0a:	f10d 0309 	add.w	r3, sp, #9
 800ff0e:	1a9b      	subs	r3, r3, r2
 800ff10:	42ac      	cmp	r4, r5
 800ff12:	bf88      	it	hi
 800ff14:	2300      	movhi	r3, #0
 800ff16:	3302      	adds	r3, #2
 800ff18:	4403      	add	r3, r0
 800ff1a:	1a18      	subs	r0, r3, r0
 800ff1c:	b003      	add	sp, #12
 800ff1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff20:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ff24:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ff28:	e7ed      	b.n	800ff06 <__exponent+0x44>
 800ff2a:	2330      	movs	r3, #48	@ 0x30
 800ff2c:	3130      	adds	r1, #48	@ 0x30
 800ff2e:	7083      	strb	r3, [r0, #2]
 800ff30:	70c1      	strb	r1, [r0, #3]
 800ff32:	1d03      	adds	r3, r0, #4
 800ff34:	e7f1      	b.n	800ff1a <__exponent+0x58>
	...

0800ff38 <_printf_float>:
 800ff38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff3c:	b08d      	sub	sp, #52	@ 0x34
 800ff3e:	460c      	mov	r4, r1
 800ff40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ff44:	4616      	mov	r6, r2
 800ff46:	461f      	mov	r7, r3
 800ff48:	4605      	mov	r5, r0
 800ff4a:	f000 ff7d 	bl	8010e48 <_localeconv_r>
 800ff4e:	f8d0 b000 	ldr.w	fp, [r0]
 800ff52:	4658      	mov	r0, fp
 800ff54:	f7f0 fa2c 	bl	80003b0 <strlen>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ff60:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ff64:	6822      	ldr	r2, [r4, #0]
 800ff66:	9005      	str	r0, [sp, #20]
 800ff68:	3307      	adds	r3, #7
 800ff6a:	f023 0307 	bic.w	r3, r3, #7
 800ff6e:	f103 0108 	add.w	r1, r3, #8
 800ff72:	f8c8 1000 	str.w	r1, [r8]
 800ff76:	ed93 0b00 	vldr	d0, [r3]
 800ff7a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80101d8 <_printf_float+0x2a0>
 800ff7e:	eeb0 7bc0 	vabs.f64	d7, d0
 800ff82:	eeb4 7b46 	vcmp.f64	d7, d6
 800ff86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff8a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ff8e:	dd24      	ble.n	800ffda <_printf_float+0xa2>
 800ff90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ff94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff98:	d502      	bpl.n	800ffa0 <_printf_float+0x68>
 800ff9a:	232d      	movs	r3, #45	@ 0x2d
 800ff9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffa0:	498f      	ldr	r1, [pc, #572]	@ (80101e0 <_printf_float+0x2a8>)
 800ffa2:	4b90      	ldr	r3, [pc, #576]	@ (80101e4 <_printf_float+0x2ac>)
 800ffa4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ffa8:	bf94      	ite	ls
 800ffaa:	4688      	movls	r8, r1
 800ffac:	4698      	movhi	r8, r3
 800ffae:	f022 0204 	bic.w	r2, r2, #4
 800ffb2:	2303      	movs	r3, #3
 800ffb4:	6123      	str	r3, [r4, #16]
 800ffb6:	6022      	str	r2, [r4, #0]
 800ffb8:	f04f 0a00 	mov.w	sl, #0
 800ffbc:	9700      	str	r7, [sp, #0]
 800ffbe:	4633      	mov	r3, r6
 800ffc0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ffc2:	4621      	mov	r1, r4
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	f000 f9d1 	bl	801036c <_printf_common>
 800ffca:	3001      	adds	r0, #1
 800ffcc:	f040 8089 	bne.w	80100e2 <_printf_float+0x1aa>
 800ffd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd4:	b00d      	add	sp, #52	@ 0x34
 800ffd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffda:	eeb4 0b40 	vcmp.f64	d0, d0
 800ffde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe2:	d709      	bvc.n	800fff8 <_printf_float+0xc0>
 800ffe4:	ee10 3a90 	vmov	r3, s1
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	bfbc      	itt	lt
 800ffec:	232d      	movlt	r3, #45	@ 0x2d
 800ffee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fff2:	497d      	ldr	r1, [pc, #500]	@ (80101e8 <_printf_float+0x2b0>)
 800fff4:	4b7d      	ldr	r3, [pc, #500]	@ (80101ec <_printf_float+0x2b4>)
 800fff6:	e7d5      	b.n	800ffa4 <_printf_float+0x6c>
 800fff8:	6863      	ldr	r3, [r4, #4]
 800fffa:	1c59      	adds	r1, r3, #1
 800fffc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010000:	d139      	bne.n	8010076 <_printf_float+0x13e>
 8010002:	2306      	movs	r3, #6
 8010004:	6063      	str	r3, [r4, #4]
 8010006:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801000a:	2300      	movs	r3, #0
 801000c:	6022      	str	r2, [r4, #0]
 801000e:	9303      	str	r3, [sp, #12]
 8010010:	ab0a      	add	r3, sp, #40	@ 0x28
 8010012:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010016:	ab09      	add	r3, sp, #36	@ 0x24
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	6861      	ldr	r1, [r4, #4]
 801001c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010020:	4628      	mov	r0, r5
 8010022:	f7ff fefa 	bl	800fe1a <__cvt>
 8010026:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801002a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801002c:	4680      	mov	r8, r0
 801002e:	d129      	bne.n	8010084 <_printf_float+0x14c>
 8010030:	1cc8      	adds	r0, r1, #3
 8010032:	db02      	blt.n	801003a <_printf_float+0x102>
 8010034:	6863      	ldr	r3, [r4, #4]
 8010036:	4299      	cmp	r1, r3
 8010038:	dd41      	ble.n	80100be <_printf_float+0x186>
 801003a:	f1a9 0902 	sub.w	r9, r9, #2
 801003e:	fa5f f989 	uxtb.w	r9, r9
 8010042:	3901      	subs	r1, #1
 8010044:	464a      	mov	r2, r9
 8010046:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801004a:	9109      	str	r1, [sp, #36]	@ 0x24
 801004c:	f7ff ff39 	bl	800fec2 <__exponent>
 8010050:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010052:	1813      	adds	r3, r2, r0
 8010054:	2a01      	cmp	r2, #1
 8010056:	4682      	mov	sl, r0
 8010058:	6123      	str	r3, [r4, #16]
 801005a:	dc02      	bgt.n	8010062 <_printf_float+0x12a>
 801005c:	6822      	ldr	r2, [r4, #0]
 801005e:	07d2      	lsls	r2, r2, #31
 8010060:	d501      	bpl.n	8010066 <_printf_float+0x12e>
 8010062:	3301      	adds	r3, #1
 8010064:	6123      	str	r3, [r4, #16]
 8010066:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801006a:	2b00      	cmp	r3, #0
 801006c:	d0a6      	beq.n	800ffbc <_printf_float+0x84>
 801006e:	232d      	movs	r3, #45	@ 0x2d
 8010070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010074:	e7a2      	b.n	800ffbc <_printf_float+0x84>
 8010076:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801007a:	d1c4      	bne.n	8010006 <_printf_float+0xce>
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1c2      	bne.n	8010006 <_printf_float+0xce>
 8010080:	2301      	movs	r3, #1
 8010082:	e7bf      	b.n	8010004 <_printf_float+0xcc>
 8010084:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010088:	d9db      	bls.n	8010042 <_printf_float+0x10a>
 801008a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801008e:	d118      	bne.n	80100c2 <_printf_float+0x18a>
 8010090:	2900      	cmp	r1, #0
 8010092:	6863      	ldr	r3, [r4, #4]
 8010094:	dd0b      	ble.n	80100ae <_printf_float+0x176>
 8010096:	6121      	str	r1, [r4, #16]
 8010098:	b913      	cbnz	r3, 80100a0 <_printf_float+0x168>
 801009a:	6822      	ldr	r2, [r4, #0]
 801009c:	07d0      	lsls	r0, r2, #31
 801009e:	d502      	bpl.n	80100a6 <_printf_float+0x16e>
 80100a0:	3301      	adds	r3, #1
 80100a2:	440b      	add	r3, r1
 80100a4:	6123      	str	r3, [r4, #16]
 80100a6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80100a8:	f04f 0a00 	mov.w	sl, #0
 80100ac:	e7db      	b.n	8010066 <_printf_float+0x12e>
 80100ae:	b913      	cbnz	r3, 80100b6 <_printf_float+0x17e>
 80100b0:	6822      	ldr	r2, [r4, #0]
 80100b2:	07d2      	lsls	r2, r2, #31
 80100b4:	d501      	bpl.n	80100ba <_printf_float+0x182>
 80100b6:	3302      	adds	r3, #2
 80100b8:	e7f4      	b.n	80100a4 <_printf_float+0x16c>
 80100ba:	2301      	movs	r3, #1
 80100bc:	e7f2      	b.n	80100a4 <_printf_float+0x16c>
 80100be:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80100c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100c4:	4299      	cmp	r1, r3
 80100c6:	db05      	blt.n	80100d4 <_printf_float+0x19c>
 80100c8:	6823      	ldr	r3, [r4, #0]
 80100ca:	6121      	str	r1, [r4, #16]
 80100cc:	07d8      	lsls	r0, r3, #31
 80100ce:	d5ea      	bpl.n	80100a6 <_printf_float+0x16e>
 80100d0:	1c4b      	adds	r3, r1, #1
 80100d2:	e7e7      	b.n	80100a4 <_printf_float+0x16c>
 80100d4:	2900      	cmp	r1, #0
 80100d6:	bfd4      	ite	le
 80100d8:	f1c1 0202 	rsble	r2, r1, #2
 80100dc:	2201      	movgt	r2, #1
 80100de:	4413      	add	r3, r2
 80100e0:	e7e0      	b.n	80100a4 <_printf_float+0x16c>
 80100e2:	6823      	ldr	r3, [r4, #0]
 80100e4:	055a      	lsls	r2, r3, #21
 80100e6:	d407      	bmi.n	80100f8 <_printf_float+0x1c0>
 80100e8:	6923      	ldr	r3, [r4, #16]
 80100ea:	4642      	mov	r2, r8
 80100ec:	4631      	mov	r1, r6
 80100ee:	4628      	mov	r0, r5
 80100f0:	47b8      	blx	r7
 80100f2:	3001      	adds	r0, #1
 80100f4:	d12a      	bne.n	801014c <_printf_float+0x214>
 80100f6:	e76b      	b.n	800ffd0 <_printf_float+0x98>
 80100f8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80100fc:	f240 80e0 	bls.w	80102c0 <_printf_float+0x388>
 8010100:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010104:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801010c:	d133      	bne.n	8010176 <_printf_float+0x23e>
 801010e:	4a38      	ldr	r2, [pc, #224]	@ (80101f0 <_printf_float+0x2b8>)
 8010110:	2301      	movs	r3, #1
 8010112:	4631      	mov	r1, r6
 8010114:	4628      	mov	r0, r5
 8010116:	47b8      	blx	r7
 8010118:	3001      	adds	r0, #1
 801011a:	f43f af59 	beq.w	800ffd0 <_printf_float+0x98>
 801011e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010122:	4543      	cmp	r3, r8
 8010124:	db02      	blt.n	801012c <_printf_float+0x1f4>
 8010126:	6823      	ldr	r3, [r4, #0]
 8010128:	07d8      	lsls	r0, r3, #31
 801012a:	d50f      	bpl.n	801014c <_printf_float+0x214>
 801012c:	9b05      	ldr	r3, [sp, #20]
 801012e:	465a      	mov	r2, fp
 8010130:	4631      	mov	r1, r6
 8010132:	4628      	mov	r0, r5
 8010134:	47b8      	blx	r7
 8010136:	3001      	adds	r0, #1
 8010138:	f43f af4a 	beq.w	800ffd0 <_printf_float+0x98>
 801013c:	f04f 0900 	mov.w	r9, #0
 8010140:	f108 38ff 	add.w	r8, r8, #4294967295
 8010144:	f104 0a1a 	add.w	sl, r4, #26
 8010148:	45c8      	cmp	r8, r9
 801014a:	dc09      	bgt.n	8010160 <_printf_float+0x228>
 801014c:	6823      	ldr	r3, [r4, #0]
 801014e:	079b      	lsls	r3, r3, #30
 8010150:	f100 8107 	bmi.w	8010362 <_printf_float+0x42a>
 8010154:	68e0      	ldr	r0, [r4, #12]
 8010156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010158:	4298      	cmp	r0, r3
 801015a:	bfb8      	it	lt
 801015c:	4618      	movlt	r0, r3
 801015e:	e739      	b.n	800ffd4 <_printf_float+0x9c>
 8010160:	2301      	movs	r3, #1
 8010162:	4652      	mov	r2, sl
 8010164:	4631      	mov	r1, r6
 8010166:	4628      	mov	r0, r5
 8010168:	47b8      	blx	r7
 801016a:	3001      	adds	r0, #1
 801016c:	f43f af30 	beq.w	800ffd0 <_printf_float+0x98>
 8010170:	f109 0901 	add.w	r9, r9, #1
 8010174:	e7e8      	b.n	8010148 <_printf_float+0x210>
 8010176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010178:	2b00      	cmp	r3, #0
 801017a:	dc3b      	bgt.n	80101f4 <_printf_float+0x2bc>
 801017c:	4a1c      	ldr	r2, [pc, #112]	@ (80101f0 <_printf_float+0x2b8>)
 801017e:	2301      	movs	r3, #1
 8010180:	4631      	mov	r1, r6
 8010182:	4628      	mov	r0, r5
 8010184:	47b8      	blx	r7
 8010186:	3001      	adds	r0, #1
 8010188:	f43f af22 	beq.w	800ffd0 <_printf_float+0x98>
 801018c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010190:	ea59 0303 	orrs.w	r3, r9, r3
 8010194:	d102      	bne.n	801019c <_printf_float+0x264>
 8010196:	6823      	ldr	r3, [r4, #0]
 8010198:	07d9      	lsls	r1, r3, #31
 801019a:	d5d7      	bpl.n	801014c <_printf_float+0x214>
 801019c:	9b05      	ldr	r3, [sp, #20]
 801019e:	465a      	mov	r2, fp
 80101a0:	4631      	mov	r1, r6
 80101a2:	4628      	mov	r0, r5
 80101a4:	47b8      	blx	r7
 80101a6:	3001      	adds	r0, #1
 80101a8:	f43f af12 	beq.w	800ffd0 <_printf_float+0x98>
 80101ac:	f04f 0a00 	mov.w	sl, #0
 80101b0:	f104 0b1a 	add.w	fp, r4, #26
 80101b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101b6:	425b      	negs	r3, r3
 80101b8:	4553      	cmp	r3, sl
 80101ba:	dc01      	bgt.n	80101c0 <_printf_float+0x288>
 80101bc:	464b      	mov	r3, r9
 80101be:	e794      	b.n	80100ea <_printf_float+0x1b2>
 80101c0:	2301      	movs	r3, #1
 80101c2:	465a      	mov	r2, fp
 80101c4:	4631      	mov	r1, r6
 80101c6:	4628      	mov	r0, r5
 80101c8:	47b8      	blx	r7
 80101ca:	3001      	adds	r0, #1
 80101cc:	f43f af00 	beq.w	800ffd0 <_printf_float+0x98>
 80101d0:	f10a 0a01 	add.w	sl, sl, #1
 80101d4:	e7ee      	b.n	80101b4 <_printf_float+0x27c>
 80101d6:	bf00      	nop
 80101d8:	ffffffff 	.word	0xffffffff
 80101dc:	7fefffff 	.word	0x7fefffff
 80101e0:	080143f8 	.word	0x080143f8
 80101e4:	080143fc 	.word	0x080143fc
 80101e8:	08014400 	.word	0x08014400
 80101ec:	08014404 	.word	0x08014404
 80101f0:	08014408 	.word	0x08014408
 80101f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80101f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80101fa:	4553      	cmp	r3, sl
 80101fc:	bfa8      	it	ge
 80101fe:	4653      	movge	r3, sl
 8010200:	2b00      	cmp	r3, #0
 8010202:	4699      	mov	r9, r3
 8010204:	dc37      	bgt.n	8010276 <_printf_float+0x33e>
 8010206:	2300      	movs	r3, #0
 8010208:	9307      	str	r3, [sp, #28]
 801020a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801020e:	f104 021a 	add.w	r2, r4, #26
 8010212:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010214:	9907      	ldr	r1, [sp, #28]
 8010216:	9306      	str	r3, [sp, #24]
 8010218:	eba3 0309 	sub.w	r3, r3, r9
 801021c:	428b      	cmp	r3, r1
 801021e:	dc31      	bgt.n	8010284 <_printf_float+0x34c>
 8010220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010222:	459a      	cmp	sl, r3
 8010224:	dc3b      	bgt.n	801029e <_printf_float+0x366>
 8010226:	6823      	ldr	r3, [r4, #0]
 8010228:	07da      	lsls	r2, r3, #31
 801022a:	d438      	bmi.n	801029e <_printf_float+0x366>
 801022c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801022e:	ebaa 0903 	sub.w	r9, sl, r3
 8010232:	9b06      	ldr	r3, [sp, #24]
 8010234:	ebaa 0303 	sub.w	r3, sl, r3
 8010238:	4599      	cmp	r9, r3
 801023a:	bfa8      	it	ge
 801023c:	4699      	movge	r9, r3
 801023e:	f1b9 0f00 	cmp.w	r9, #0
 8010242:	dc34      	bgt.n	80102ae <_printf_float+0x376>
 8010244:	f04f 0800 	mov.w	r8, #0
 8010248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801024c:	f104 0b1a 	add.w	fp, r4, #26
 8010250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010252:	ebaa 0303 	sub.w	r3, sl, r3
 8010256:	eba3 0309 	sub.w	r3, r3, r9
 801025a:	4543      	cmp	r3, r8
 801025c:	f77f af76 	ble.w	801014c <_printf_float+0x214>
 8010260:	2301      	movs	r3, #1
 8010262:	465a      	mov	r2, fp
 8010264:	4631      	mov	r1, r6
 8010266:	4628      	mov	r0, r5
 8010268:	47b8      	blx	r7
 801026a:	3001      	adds	r0, #1
 801026c:	f43f aeb0 	beq.w	800ffd0 <_printf_float+0x98>
 8010270:	f108 0801 	add.w	r8, r8, #1
 8010274:	e7ec      	b.n	8010250 <_printf_float+0x318>
 8010276:	4642      	mov	r2, r8
 8010278:	4631      	mov	r1, r6
 801027a:	4628      	mov	r0, r5
 801027c:	47b8      	blx	r7
 801027e:	3001      	adds	r0, #1
 8010280:	d1c1      	bne.n	8010206 <_printf_float+0x2ce>
 8010282:	e6a5      	b.n	800ffd0 <_printf_float+0x98>
 8010284:	2301      	movs	r3, #1
 8010286:	4631      	mov	r1, r6
 8010288:	4628      	mov	r0, r5
 801028a:	9206      	str	r2, [sp, #24]
 801028c:	47b8      	blx	r7
 801028e:	3001      	adds	r0, #1
 8010290:	f43f ae9e 	beq.w	800ffd0 <_printf_float+0x98>
 8010294:	9b07      	ldr	r3, [sp, #28]
 8010296:	9a06      	ldr	r2, [sp, #24]
 8010298:	3301      	adds	r3, #1
 801029a:	9307      	str	r3, [sp, #28]
 801029c:	e7b9      	b.n	8010212 <_printf_float+0x2da>
 801029e:	9b05      	ldr	r3, [sp, #20]
 80102a0:	465a      	mov	r2, fp
 80102a2:	4631      	mov	r1, r6
 80102a4:	4628      	mov	r0, r5
 80102a6:	47b8      	blx	r7
 80102a8:	3001      	adds	r0, #1
 80102aa:	d1bf      	bne.n	801022c <_printf_float+0x2f4>
 80102ac:	e690      	b.n	800ffd0 <_printf_float+0x98>
 80102ae:	9a06      	ldr	r2, [sp, #24]
 80102b0:	464b      	mov	r3, r9
 80102b2:	4442      	add	r2, r8
 80102b4:	4631      	mov	r1, r6
 80102b6:	4628      	mov	r0, r5
 80102b8:	47b8      	blx	r7
 80102ba:	3001      	adds	r0, #1
 80102bc:	d1c2      	bne.n	8010244 <_printf_float+0x30c>
 80102be:	e687      	b.n	800ffd0 <_printf_float+0x98>
 80102c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80102c4:	f1b9 0f01 	cmp.w	r9, #1
 80102c8:	dc01      	bgt.n	80102ce <_printf_float+0x396>
 80102ca:	07db      	lsls	r3, r3, #31
 80102cc:	d536      	bpl.n	801033c <_printf_float+0x404>
 80102ce:	2301      	movs	r3, #1
 80102d0:	4642      	mov	r2, r8
 80102d2:	4631      	mov	r1, r6
 80102d4:	4628      	mov	r0, r5
 80102d6:	47b8      	blx	r7
 80102d8:	3001      	adds	r0, #1
 80102da:	f43f ae79 	beq.w	800ffd0 <_printf_float+0x98>
 80102de:	9b05      	ldr	r3, [sp, #20]
 80102e0:	465a      	mov	r2, fp
 80102e2:	4631      	mov	r1, r6
 80102e4:	4628      	mov	r0, r5
 80102e6:	47b8      	blx	r7
 80102e8:	3001      	adds	r0, #1
 80102ea:	f43f ae71 	beq.w	800ffd0 <_printf_float+0x98>
 80102ee:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80102f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80102f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80102fe:	d018      	beq.n	8010332 <_printf_float+0x3fa>
 8010300:	464b      	mov	r3, r9
 8010302:	f108 0201 	add.w	r2, r8, #1
 8010306:	4631      	mov	r1, r6
 8010308:	4628      	mov	r0, r5
 801030a:	47b8      	blx	r7
 801030c:	3001      	adds	r0, #1
 801030e:	d10c      	bne.n	801032a <_printf_float+0x3f2>
 8010310:	e65e      	b.n	800ffd0 <_printf_float+0x98>
 8010312:	2301      	movs	r3, #1
 8010314:	465a      	mov	r2, fp
 8010316:	4631      	mov	r1, r6
 8010318:	4628      	mov	r0, r5
 801031a:	47b8      	blx	r7
 801031c:	3001      	adds	r0, #1
 801031e:	f43f ae57 	beq.w	800ffd0 <_printf_float+0x98>
 8010322:	f108 0801 	add.w	r8, r8, #1
 8010326:	45c8      	cmp	r8, r9
 8010328:	dbf3      	blt.n	8010312 <_printf_float+0x3da>
 801032a:	4653      	mov	r3, sl
 801032c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010330:	e6dc      	b.n	80100ec <_printf_float+0x1b4>
 8010332:	f04f 0800 	mov.w	r8, #0
 8010336:	f104 0b1a 	add.w	fp, r4, #26
 801033a:	e7f4      	b.n	8010326 <_printf_float+0x3ee>
 801033c:	2301      	movs	r3, #1
 801033e:	4642      	mov	r2, r8
 8010340:	e7e1      	b.n	8010306 <_printf_float+0x3ce>
 8010342:	2301      	movs	r3, #1
 8010344:	464a      	mov	r2, r9
 8010346:	4631      	mov	r1, r6
 8010348:	4628      	mov	r0, r5
 801034a:	47b8      	blx	r7
 801034c:	3001      	adds	r0, #1
 801034e:	f43f ae3f 	beq.w	800ffd0 <_printf_float+0x98>
 8010352:	f108 0801 	add.w	r8, r8, #1
 8010356:	68e3      	ldr	r3, [r4, #12]
 8010358:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801035a:	1a5b      	subs	r3, r3, r1
 801035c:	4543      	cmp	r3, r8
 801035e:	dcf0      	bgt.n	8010342 <_printf_float+0x40a>
 8010360:	e6f8      	b.n	8010154 <_printf_float+0x21c>
 8010362:	f04f 0800 	mov.w	r8, #0
 8010366:	f104 0919 	add.w	r9, r4, #25
 801036a:	e7f4      	b.n	8010356 <_printf_float+0x41e>

0801036c <_printf_common>:
 801036c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010370:	4616      	mov	r6, r2
 8010372:	4698      	mov	r8, r3
 8010374:	688a      	ldr	r2, [r1, #8]
 8010376:	690b      	ldr	r3, [r1, #16]
 8010378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801037c:	4293      	cmp	r3, r2
 801037e:	bfb8      	it	lt
 8010380:	4613      	movlt	r3, r2
 8010382:	6033      	str	r3, [r6, #0]
 8010384:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010388:	4607      	mov	r7, r0
 801038a:	460c      	mov	r4, r1
 801038c:	b10a      	cbz	r2, 8010392 <_printf_common+0x26>
 801038e:	3301      	adds	r3, #1
 8010390:	6033      	str	r3, [r6, #0]
 8010392:	6823      	ldr	r3, [r4, #0]
 8010394:	0699      	lsls	r1, r3, #26
 8010396:	bf42      	ittt	mi
 8010398:	6833      	ldrmi	r3, [r6, #0]
 801039a:	3302      	addmi	r3, #2
 801039c:	6033      	strmi	r3, [r6, #0]
 801039e:	6825      	ldr	r5, [r4, #0]
 80103a0:	f015 0506 	ands.w	r5, r5, #6
 80103a4:	d106      	bne.n	80103b4 <_printf_common+0x48>
 80103a6:	f104 0a19 	add.w	sl, r4, #25
 80103aa:	68e3      	ldr	r3, [r4, #12]
 80103ac:	6832      	ldr	r2, [r6, #0]
 80103ae:	1a9b      	subs	r3, r3, r2
 80103b0:	42ab      	cmp	r3, r5
 80103b2:	dc26      	bgt.n	8010402 <_printf_common+0x96>
 80103b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80103b8:	6822      	ldr	r2, [r4, #0]
 80103ba:	3b00      	subs	r3, #0
 80103bc:	bf18      	it	ne
 80103be:	2301      	movne	r3, #1
 80103c0:	0692      	lsls	r2, r2, #26
 80103c2:	d42b      	bmi.n	801041c <_printf_common+0xb0>
 80103c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80103c8:	4641      	mov	r1, r8
 80103ca:	4638      	mov	r0, r7
 80103cc:	47c8      	blx	r9
 80103ce:	3001      	adds	r0, #1
 80103d0:	d01e      	beq.n	8010410 <_printf_common+0xa4>
 80103d2:	6823      	ldr	r3, [r4, #0]
 80103d4:	6922      	ldr	r2, [r4, #16]
 80103d6:	f003 0306 	and.w	r3, r3, #6
 80103da:	2b04      	cmp	r3, #4
 80103dc:	bf02      	ittt	eq
 80103de:	68e5      	ldreq	r5, [r4, #12]
 80103e0:	6833      	ldreq	r3, [r6, #0]
 80103e2:	1aed      	subeq	r5, r5, r3
 80103e4:	68a3      	ldr	r3, [r4, #8]
 80103e6:	bf0c      	ite	eq
 80103e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103ec:	2500      	movne	r5, #0
 80103ee:	4293      	cmp	r3, r2
 80103f0:	bfc4      	itt	gt
 80103f2:	1a9b      	subgt	r3, r3, r2
 80103f4:	18ed      	addgt	r5, r5, r3
 80103f6:	2600      	movs	r6, #0
 80103f8:	341a      	adds	r4, #26
 80103fa:	42b5      	cmp	r5, r6
 80103fc:	d11a      	bne.n	8010434 <_printf_common+0xc8>
 80103fe:	2000      	movs	r0, #0
 8010400:	e008      	b.n	8010414 <_printf_common+0xa8>
 8010402:	2301      	movs	r3, #1
 8010404:	4652      	mov	r2, sl
 8010406:	4641      	mov	r1, r8
 8010408:	4638      	mov	r0, r7
 801040a:	47c8      	blx	r9
 801040c:	3001      	adds	r0, #1
 801040e:	d103      	bne.n	8010418 <_printf_common+0xac>
 8010410:	f04f 30ff 	mov.w	r0, #4294967295
 8010414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010418:	3501      	adds	r5, #1
 801041a:	e7c6      	b.n	80103aa <_printf_common+0x3e>
 801041c:	18e1      	adds	r1, r4, r3
 801041e:	1c5a      	adds	r2, r3, #1
 8010420:	2030      	movs	r0, #48	@ 0x30
 8010422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010426:	4422      	add	r2, r4
 8010428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801042c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010430:	3302      	adds	r3, #2
 8010432:	e7c7      	b.n	80103c4 <_printf_common+0x58>
 8010434:	2301      	movs	r3, #1
 8010436:	4622      	mov	r2, r4
 8010438:	4641      	mov	r1, r8
 801043a:	4638      	mov	r0, r7
 801043c:	47c8      	blx	r9
 801043e:	3001      	adds	r0, #1
 8010440:	d0e6      	beq.n	8010410 <_printf_common+0xa4>
 8010442:	3601      	adds	r6, #1
 8010444:	e7d9      	b.n	80103fa <_printf_common+0x8e>
	...

08010448 <_printf_i>:
 8010448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801044c:	7e0f      	ldrb	r7, [r1, #24]
 801044e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010450:	2f78      	cmp	r7, #120	@ 0x78
 8010452:	4691      	mov	r9, r2
 8010454:	4680      	mov	r8, r0
 8010456:	460c      	mov	r4, r1
 8010458:	469a      	mov	sl, r3
 801045a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801045e:	d807      	bhi.n	8010470 <_printf_i+0x28>
 8010460:	2f62      	cmp	r7, #98	@ 0x62
 8010462:	d80a      	bhi.n	801047a <_printf_i+0x32>
 8010464:	2f00      	cmp	r7, #0
 8010466:	f000 80d2 	beq.w	801060e <_printf_i+0x1c6>
 801046a:	2f58      	cmp	r7, #88	@ 0x58
 801046c:	f000 80b9 	beq.w	80105e2 <_printf_i+0x19a>
 8010470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010478:	e03a      	b.n	80104f0 <_printf_i+0xa8>
 801047a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801047e:	2b15      	cmp	r3, #21
 8010480:	d8f6      	bhi.n	8010470 <_printf_i+0x28>
 8010482:	a101      	add	r1, pc, #4	@ (adr r1, 8010488 <_printf_i+0x40>)
 8010484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010488:	080104e1 	.word	0x080104e1
 801048c:	080104f5 	.word	0x080104f5
 8010490:	08010471 	.word	0x08010471
 8010494:	08010471 	.word	0x08010471
 8010498:	08010471 	.word	0x08010471
 801049c:	08010471 	.word	0x08010471
 80104a0:	080104f5 	.word	0x080104f5
 80104a4:	08010471 	.word	0x08010471
 80104a8:	08010471 	.word	0x08010471
 80104ac:	08010471 	.word	0x08010471
 80104b0:	08010471 	.word	0x08010471
 80104b4:	080105f5 	.word	0x080105f5
 80104b8:	0801051f 	.word	0x0801051f
 80104bc:	080105af 	.word	0x080105af
 80104c0:	08010471 	.word	0x08010471
 80104c4:	08010471 	.word	0x08010471
 80104c8:	08010617 	.word	0x08010617
 80104cc:	08010471 	.word	0x08010471
 80104d0:	0801051f 	.word	0x0801051f
 80104d4:	08010471 	.word	0x08010471
 80104d8:	08010471 	.word	0x08010471
 80104dc:	080105b7 	.word	0x080105b7
 80104e0:	6833      	ldr	r3, [r6, #0]
 80104e2:	1d1a      	adds	r2, r3, #4
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	6032      	str	r2, [r6, #0]
 80104e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80104ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80104f0:	2301      	movs	r3, #1
 80104f2:	e09d      	b.n	8010630 <_printf_i+0x1e8>
 80104f4:	6833      	ldr	r3, [r6, #0]
 80104f6:	6820      	ldr	r0, [r4, #0]
 80104f8:	1d19      	adds	r1, r3, #4
 80104fa:	6031      	str	r1, [r6, #0]
 80104fc:	0606      	lsls	r6, r0, #24
 80104fe:	d501      	bpl.n	8010504 <_printf_i+0xbc>
 8010500:	681d      	ldr	r5, [r3, #0]
 8010502:	e003      	b.n	801050c <_printf_i+0xc4>
 8010504:	0645      	lsls	r5, r0, #25
 8010506:	d5fb      	bpl.n	8010500 <_printf_i+0xb8>
 8010508:	f9b3 5000 	ldrsh.w	r5, [r3]
 801050c:	2d00      	cmp	r5, #0
 801050e:	da03      	bge.n	8010518 <_printf_i+0xd0>
 8010510:	232d      	movs	r3, #45	@ 0x2d
 8010512:	426d      	negs	r5, r5
 8010514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010518:	4859      	ldr	r0, [pc, #356]	@ (8010680 <_printf_i+0x238>)
 801051a:	230a      	movs	r3, #10
 801051c:	e011      	b.n	8010542 <_printf_i+0xfa>
 801051e:	6821      	ldr	r1, [r4, #0]
 8010520:	6833      	ldr	r3, [r6, #0]
 8010522:	0608      	lsls	r0, r1, #24
 8010524:	f853 5b04 	ldr.w	r5, [r3], #4
 8010528:	d402      	bmi.n	8010530 <_printf_i+0xe8>
 801052a:	0649      	lsls	r1, r1, #25
 801052c:	bf48      	it	mi
 801052e:	b2ad      	uxthmi	r5, r5
 8010530:	2f6f      	cmp	r7, #111	@ 0x6f
 8010532:	4853      	ldr	r0, [pc, #332]	@ (8010680 <_printf_i+0x238>)
 8010534:	6033      	str	r3, [r6, #0]
 8010536:	bf14      	ite	ne
 8010538:	230a      	movne	r3, #10
 801053a:	2308      	moveq	r3, #8
 801053c:	2100      	movs	r1, #0
 801053e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010542:	6866      	ldr	r6, [r4, #4]
 8010544:	60a6      	str	r6, [r4, #8]
 8010546:	2e00      	cmp	r6, #0
 8010548:	bfa2      	ittt	ge
 801054a:	6821      	ldrge	r1, [r4, #0]
 801054c:	f021 0104 	bicge.w	r1, r1, #4
 8010550:	6021      	strge	r1, [r4, #0]
 8010552:	b90d      	cbnz	r5, 8010558 <_printf_i+0x110>
 8010554:	2e00      	cmp	r6, #0
 8010556:	d04b      	beq.n	80105f0 <_printf_i+0x1a8>
 8010558:	4616      	mov	r6, r2
 801055a:	fbb5 f1f3 	udiv	r1, r5, r3
 801055e:	fb03 5711 	mls	r7, r3, r1, r5
 8010562:	5dc7      	ldrb	r7, [r0, r7]
 8010564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010568:	462f      	mov	r7, r5
 801056a:	42bb      	cmp	r3, r7
 801056c:	460d      	mov	r5, r1
 801056e:	d9f4      	bls.n	801055a <_printf_i+0x112>
 8010570:	2b08      	cmp	r3, #8
 8010572:	d10b      	bne.n	801058c <_printf_i+0x144>
 8010574:	6823      	ldr	r3, [r4, #0]
 8010576:	07df      	lsls	r7, r3, #31
 8010578:	d508      	bpl.n	801058c <_printf_i+0x144>
 801057a:	6923      	ldr	r3, [r4, #16]
 801057c:	6861      	ldr	r1, [r4, #4]
 801057e:	4299      	cmp	r1, r3
 8010580:	bfde      	ittt	le
 8010582:	2330      	movle	r3, #48	@ 0x30
 8010584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010588:	f106 36ff 	addle.w	r6, r6, #4294967295
 801058c:	1b92      	subs	r2, r2, r6
 801058e:	6122      	str	r2, [r4, #16]
 8010590:	f8cd a000 	str.w	sl, [sp]
 8010594:	464b      	mov	r3, r9
 8010596:	aa03      	add	r2, sp, #12
 8010598:	4621      	mov	r1, r4
 801059a:	4640      	mov	r0, r8
 801059c:	f7ff fee6 	bl	801036c <_printf_common>
 80105a0:	3001      	adds	r0, #1
 80105a2:	d14a      	bne.n	801063a <_printf_i+0x1f2>
 80105a4:	f04f 30ff 	mov.w	r0, #4294967295
 80105a8:	b004      	add	sp, #16
 80105aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105ae:	6823      	ldr	r3, [r4, #0]
 80105b0:	f043 0320 	orr.w	r3, r3, #32
 80105b4:	6023      	str	r3, [r4, #0]
 80105b6:	4833      	ldr	r0, [pc, #204]	@ (8010684 <_printf_i+0x23c>)
 80105b8:	2778      	movs	r7, #120	@ 0x78
 80105ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80105be:	6823      	ldr	r3, [r4, #0]
 80105c0:	6831      	ldr	r1, [r6, #0]
 80105c2:	061f      	lsls	r7, r3, #24
 80105c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80105c8:	d402      	bmi.n	80105d0 <_printf_i+0x188>
 80105ca:	065f      	lsls	r7, r3, #25
 80105cc:	bf48      	it	mi
 80105ce:	b2ad      	uxthmi	r5, r5
 80105d0:	6031      	str	r1, [r6, #0]
 80105d2:	07d9      	lsls	r1, r3, #31
 80105d4:	bf44      	itt	mi
 80105d6:	f043 0320 	orrmi.w	r3, r3, #32
 80105da:	6023      	strmi	r3, [r4, #0]
 80105dc:	b11d      	cbz	r5, 80105e6 <_printf_i+0x19e>
 80105de:	2310      	movs	r3, #16
 80105e0:	e7ac      	b.n	801053c <_printf_i+0xf4>
 80105e2:	4827      	ldr	r0, [pc, #156]	@ (8010680 <_printf_i+0x238>)
 80105e4:	e7e9      	b.n	80105ba <_printf_i+0x172>
 80105e6:	6823      	ldr	r3, [r4, #0]
 80105e8:	f023 0320 	bic.w	r3, r3, #32
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	e7f6      	b.n	80105de <_printf_i+0x196>
 80105f0:	4616      	mov	r6, r2
 80105f2:	e7bd      	b.n	8010570 <_printf_i+0x128>
 80105f4:	6833      	ldr	r3, [r6, #0]
 80105f6:	6825      	ldr	r5, [r4, #0]
 80105f8:	6961      	ldr	r1, [r4, #20]
 80105fa:	1d18      	adds	r0, r3, #4
 80105fc:	6030      	str	r0, [r6, #0]
 80105fe:	062e      	lsls	r6, r5, #24
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	d501      	bpl.n	8010608 <_printf_i+0x1c0>
 8010604:	6019      	str	r1, [r3, #0]
 8010606:	e002      	b.n	801060e <_printf_i+0x1c6>
 8010608:	0668      	lsls	r0, r5, #25
 801060a:	d5fb      	bpl.n	8010604 <_printf_i+0x1bc>
 801060c:	8019      	strh	r1, [r3, #0]
 801060e:	2300      	movs	r3, #0
 8010610:	6123      	str	r3, [r4, #16]
 8010612:	4616      	mov	r6, r2
 8010614:	e7bc      	b.n	8010590 <_printf_i+0x148>
 8010616:	6833      	ldr	r3, [r6, #0]
 8010618:	1d1a      	adds	r2, r3, #4
 801061a:	6032      	str	r2, [r6, #0]
 801061c:	681e      	ldr	r6, [r3, #0]
 801061e:	6862      	ldr	r2, [r4, #4]
 8010620:	2100      	movs	r1, #0
 8010622:	4630      	mov	r0, r6
 8010624:	f7ef fe74 	bl	8000310 <memchr>
 8010628:	b108      	cbz	r0, 801062e <_printf_i+0x1e6>
 801062a:	1b80      	subs	r0, r0, r6
 801062c:	6060      	str	r0, [r4, #4]
 801062e:	6863      	ldr	r3, [r4, #4]
 8010630:	6123      	str	r3, [r4, #16]
 8010632:	2300      	movs	r3, #0
 8010634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010638:	e7aa      	b.n	8010590 <_printf_i+0x148>
 801063a:	6923      	ldr	r3, [r4, #16]
 801063c:	4632      	mov	r2, r6
 801063e:	4649      	mov	r1, r9
 8010640:	4640      	mov	r0, r8
 8010642:	47d0      	blx	sl
 8010644:	3001      	adds	r0, #1
 8010646:	d0ad      	beq.n	80105a4 <_printf_i+0x15c>
 8010648:	6823      	ldr	r3, [r4, #0]
 801064a:	079b      	lsls	r3, r3, #30
 801064c:	d413      	bmi.n	8010676 <_printf_i+0x22e>
 801064e:	68e0      	ldr	r0, [r4, #12]
 8010650:	9b03      	ldr	r3, [sp, #12]
 8010652:	4298      	cmp	r0, r3
 8010654:	bfb8      	it	lt
 8010656:	4618      	movlt	r0, r3
 8010658:	e7a6      	b.n	80105a8 <_printf_i+0x160>
 801065a:	2301      	movs	r3, #1
 801065c:	4632      	mov	r2, r6
 801065e:	4649      	mov	r1, r9
 8010660:	4640      	mov	r0, r8
 8010662:	47d0      	blx	sl
 8010664:	3001      	adds	r0, #1
 8010666:	d09d      	beq.n	80105a4 <_printf_i+0x15c>
 8010668:	3501      	adds	r5, #1
 801066a:	68e3      	ldr	r3, [r4, #12]
 801066c:	9903      	ldr	r1, [sp, #12]
 801066e:	1a5b      	subs	r3, r3, r1
 8010670:	42ab      	cmp	r3, r5
 8010672:	dcf2      	bgt.n	801065a <_printf_i+0x212>
 8010674:	e7eb      	b.n	801064e <_printf_i+0x206>
 8010676:	2500      	movs	r5, #0
 8010678:	f104 0619 	add.w	r6, r4, #25
 801067c:	e7f5      	b.n	801066a <_printf_i+0x222>
 801067e:	bf00      	nop
 8010680:	0801440a 	.word	0x0801440a
 8010684:	0801441b 	.word	0x0801441b

08010688 <_scanf_float>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	b087      	sub	sp, #28
 801068e:	4617      	mov	r7, r2
 8010690:	9303      	str	r3, [sp, #12]
 8010692:	688b      	ldr	r3, [r1, #8]
 8010694:	1e5a      	subs	r2, r3, #1
 8010696:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801069a:	bf81      	itttt	hi
 801069c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80106a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80106a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80106a8:	608b      	strhi	r3, [r1, #8]
 80106aa:	680b      	ldr	r3, [r1, #0]
 80106ac:	460a      	mov	r2, r1
 80106ae:	f04f 0500 	mov.w	r5, #0
 80106b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80106b6:	f842 3b1c 	str.w	r3, [r2], #28
 80106ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80106be:	4680      	mov	r8, r0
 80106c0:	460c      	mov	r4, r1
 80106c2:	bf98      	it	ls
 80106c4:	f04f 0b00 	movls.w	fp, #0
 80106c8:	9201      	str	r2, [sp, #4]
 80106ca:	4616      	mov	r6, r2
 80106cc:	46aa      	mov	sl, r5
 80106ce:	46a9      	mov	r9, r5
 80106d0:	9502      	str	r5, [sp, #8]
 80106d2:	68a2      	ldr	r2, [r4, #8]
 80106d4:	b152      	cbz	r2, 80106ec <_scanf_float+0x64>
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	2b4e      	cmp	r3, #78	@ 0x4e
 80106dc:	d864      	bhi.n	80107a8 <_scanf_float+0x120>
 80106de:	2b40      	cmp	r3, #64	@ 0x40
 80106e0:	d83c      	bhi.n	801075c <_scanf_float+0xd4>
 80106e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80106e6:	b2c8      	uxtb	r0, r1
 80106e8:	280e      	cmp	r0, #14
 80106ea:	d93a      	bls.n	8010762 <_scanf_float+0xda>
 80106ec:	f1b9 0f00 	cmp.w	r9, #0
 80106f0:	d003      	beq.n	80106fa <_scanf_float+0x72>
 80106f2:	6823      	ldr	r3, [r4, #0]
 80106f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80106f8:	6023      	str	r3, [r4, #0]
 80106fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80106fe:	f1ba 0f01 	cmp.w	sl, #1
 8010702:	f200 8117 	bhi.w	8010934 <_scanf_float+0x2ac>
 8010706:	9b01      	ldr	r3, [sp, #4]
 8010708:	429e      	cmp	r6, r3
 801070a:	f200 8108 	bhi.w	801091e <_scanf_float+0x296>
 801070e:	2001      	movs	r0, #1
 8010710:	b007      	add	sp, #28
 8010712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010716:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801071a:	2a0d      	cmp	r2, #13
 801071c:	d8e6      	bhi.n	80106ec <_scanf_float+0x64>
 801071e:	a101      	add	r1, pc, #4	@ (adr r1, 8010724 <_scanf_float+0x9c>)
 8010720:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010724:	0801086b 	.word	0x0801086b
 8010728:	080106ed 	.word	0x080106ed
 801072c:	080106ed 	.word	0x080106ed
 8010730:	080106ed 	.word	0x080106ed
 8010734:	080108cb 	.word	0x080108cb
 8010738:	080108a3 	.word	0x080108a3
 801073c:	080106ed 	.word	0x080106ed
 8010740:	080106ed 	.word	0x080106ed
 8010744:	08010879 	.word	0x08010879
 8010748:	080106ed 	.word	0x080106ed
 801074c:	080106ed 	.word	0x080106ed
 8010750:	080106ed 	.word	0x080106ed
 8010754:	080106ed 	.word	0x080106ed
 8010758:	08010831 	.word	0x08010831
 801075c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010760:	e7db      	b.n	801071a <_scanf_float+0x92>
 8010762:	290e      	cmp	r1, #14
 8010764:	d8c2      	bhi.n	80106ec <_scanf_float+0x64>
 8010766:	a001      	add	r0, pc, #4	@ (adr r0, 801076c <_scanf_float+0xe4>)
 8010768:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801076c:	08010821 	.word	0x08010821
 8010770:	080106ed 	.word	0x080106ed
 8010774:	08010821 	.word	0x08010821
 8010778:	080108b7 	.word	0x080108b7
 801077c:	080106ed 	.word	0x080106ed
 8010780:	080107c9 	.word	0x080107c9
 8010784:	08010807 	.word	0x08010807
 8010788:	08010807 	.word	0x08010807
 801078c:	08010807 	.word	0x08010807
 8010790:	08010807 	.word	0x08010807
 8010794:	08010807 	.word	0x08010807
 8010798:	08010807 	.word	0x08010807
 801079c:	08010807 	.word	0x08010807
 80107a0:	08010807 	.word	0x08010807
 80107a4:	08010807 	.word	0x08010807
 80107a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80107aa:	d809      	bhi.n	80107c0 <_scanf_float+0x138>
 80107ac:	2b60      	cmp	r3, #96	@ 0x60
 80107ae:	d8b2      	bhi.n	8010716 <_scanf_float+0x8e>
 80107b0:	2b54      	cmp	r3, #84	@ 0x54
 80107b2:	d07b      	beq.n	80108ac <_scanf_float+0x224>
 80107b4:	2b59      	cmp	r3, #89	@ 0x59
 80107b6:	d199      	bne.n	80106ec <_scanf_float+0x64>
 80107b8:	2d07      	cmp	r5, #7
 80107ba:	d197      	bne.n	80106ec <_scanf_float+0x64>
 80107bc:	2508      	movs	r5, #8
 80107be:	e02c      	b.n	801081a <_scanf_float+0x192>
 80107c0:	2b74      	cmp	r3, #116	@ 0x74
 80107c2:	d073      	beq.n	80108ac <_scanf_float+0x224>
 80107c4:	2b79      	cmp	r3, #121	@ 0x79
 80107c6:	e7f6      	b.n	80107b6 <_scanf_float+0x12e>
 80107c8:	6821      	ldr	r1, [r4, #0]
 80107ca:	05c8      	lsls	r0, r1, #23
 80107cc:	d51b      	bpl.n	8010806 <_scanf_float+0x17e>
 80107ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80107d2:	6021      	str	r1, [r4, #0]
 80107d4:	f109 0901 	add.w	r9, r9, #1
 80107d8:	f1bb 0f00 	cmp.w	fp, #0
 80107dc:	d003      	beq.n	80107e6 <_scanf_float+0x15e>
 80107de:	3201      	adds	r2, #1
 80107e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80107e4:	60a2      	str	r2, [r4, #8]
 80107e6:	68a3      	ldr	r3, [r4, #8]
 80107e8:	3b01      	subs	r3, #1
 80107ea:	60a3      	str	r3, [r4, #8]
 80107ec:	6923      	ldr	r3, [r4, #16]
 80107ee:	3301      	adds	r3, #1
 80107f0:	6123      	str	r3, [r4, #16]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	3b01      	subs	r3, #1
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	607b      	str	r3, [r7, #4]
 80107fa:	f340 8087 	ble.w	801090c <_scanf_float+0x284>
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	3301      	adds	r3, #1
 8010802:	603b      	str	r3, [r7, #0]
 8010804:	e765      	b.n	80106d2 <_scanf_float+0x4a>
 8010806:	eb1a 0105 	adds.w	r1, sl, r5
 801080a:	f47f af6f 	bne.w	80106ec <_scanf_float+0x64>
 801080e:	6822      	ldr	r2, [r4, #0]
 8010810:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010814:	6022      	str	r2, [r4, #0]
 8010816:	460d      	mov	r5, r1
 8010818:	468a      	mov	sl, r1
 801081a:	f806 3b01 	strb.w	r3, [r6], #1
 801081e:	e7e2      	b.n	80107e6 <_scanf_float+0x15e>
 8010820:	6822      	ldr	r2, [r4, #0]
 8010822:	0610      	lsls	r0, r2, #24
 8010824:	f57f af62 	bpl.w	80106ec <_scanf_float+0x64>
 8010828:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801082c:	6022      	str	r2, [r4, #0]
 801082e:	e7f4      	b.n	801081a <_scanf_float+0x192>
 8010830:	f1ba 0f00 	cmp.w	sl, #0
 8010834:	d10e      	bne.n	8010854 <_scanf_float+0x1cc>
 8010836:	f1b9 0f00 	cmp.w	r9, #0
 801083a:	d10e      	bne.n	801085a <_scanf_float+0x1d2>
 801083c:	6822      	ldr	r2, [r4, #0]
 801083e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010842:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010846:	d108      	bne.n	801085a <_scanf_float+0x1d2>
 8010848:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801084c:	6022      	str	r2, [r4, #0]
 801084e:	f04f 0a01 	mov.w	sl, #1
 8010852:	e7e2      	b.n	801081a <_scanf_float+0x192>
 8010854:	f1ba 0f02 	cmp.w	sl, #2
 8010858:	d055      	beq.n	8010906 <_scanf_float+0x27e>
 801085a:	2d01      	cmp	r5, #1
 801085c:	d002      	beq.n	8010864 <_scanf_float+0x1dc>
 801085e:	2d04      	cmp	r5, #4
 8010860:	f47f af44 	bne.w	80106ec <_scanf_float+0x64>
 8010864:	3501      	adds	r5, #1
 8010866:	b2ed      	uxtb	r5, r5
 8010868:	e7d7      	b.n	801081a <_scanf_float+0x192>
 801086a:	f1ba 0f01 	cmp.w	sl, #1
 801086e:	f47f af3d 	bne.w	80106ec <_scanf_float+0x64>
 8010872:	f04f 0a02 	mov.w	sl, #2
 8010876:	e7d0      	b.n	801081a <_scanf_float+0x192>
 8010878:	b97d      	cbnz	r5, 801089a <_scanf_float+0x212>
 801087a:	f1b9 0f00 	cmp.w	r9, #0
 801087e:	f47f af38 	bne.w	80106f2 <_scanf_float+0x6a>
 8010882:	6822      	ldr	r2, [r4, #0]
 8010884:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010888:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801088c:	f040 8101 	bne.w	8010a92 <_scanf_float+0x40a>
 8010890:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010894:	6022      	str	r2, [r4, #0]
 8010896:	2501      	movs	r5, #1
 8010898:	e7bf      	b.n	801081a <_scanf_float+0x192>
 801089a:	2d03      	cmp	r5, #3
 801089c:	d0e2      	beq.n	8010864 <_scanf_float+0x1dc>
 801089e:	2d05      	cmp	r5, #5
 80108a0:	e7de      	b.n	8010860 <_scanf_float+0x1d8>
 80108a2:	2d02      	cmp	r5, #2
 80108a4:	f47f af22 	bne.w	80106ec <_scanf_float+0x64>
 80108a8:	2503      	movs	r5, #3
 80108aa:	e7b6      	b.n	801081a <_scanf_float+0x192>
 80108ac:	2d06      	cmp	r5, #6
 80108ae:	f47f af1d 	bne.w	80106ec <_scanf_float+0x64>
 80108b2:	2507      	movs	r5, #7
 80108b4:	e7b1      	b.n	801081a <_scanf_float+0x192>
 80108b6:	6822      	ldr	r2, [r4, #0]
 80108b8:	0591      	lsls	r1, r2, #22
 80108ba:	f57f af17 	bpl.w	80106ec <_scanf_float+0x64>
 80108be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80108c2:	6022      	str	r2, [r4, #0]
 80108c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80108c8:	e7a7      	b.n	801081a <_scanf_float+0x192>
 80108ca:	6822      	ldr	r2, [r4, #0]
 80108cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80108d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80108d4:	d006      	beq.n	80108e4 <_scanf_float+0x25c>
 80108d6:	0550      	lsls	r0, r2, #21
 80108d8:	f57f af08 	bpl.w	80106ec <_scanf_float+0x64>
 80108dc:	f1b9 0f00 	cmp.w	r9, #0
 80108e0:	f000 80d7 	beq.w	8010a92 <_scanf_float+0x40a>
 80108e4:	0591      	lsls	r1, r2, #22
 80108e6:	bf58      	it	pl
 80108e8:	9902      	ldrpl	r1, [sp, #8]
 80108ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80108ee:	bf58      	it	pl
 80108f0:	eba9 0101 	subpl.w	r1, r9, r1
 80108f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80108f8:	bf58      	it	pl
 80108fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80108fe:	6022      	str	r2, [r4, #0]
 8010900:	f04f 0900 	mov.w	r9, #0
 8010904:	e789      	b.n	801081a <_scanf_float+0x192>
 8010906:	f04f 0a03 	mov.w	sl, #3
 801090a:	e786      	b.n	801081a <_scanf_float+0x192>
 801090c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010910:	4639      	mov	r1, r7
 8010912:	4640      	mov	r0, r8
 8010914:	4798      	blx	r3
 8010916:	2800      	cmp	r0, #0
 8010918:	f43f aedb 	beq.w	80106d2 <_scanf_float+0x4a>
 801091c:	e6e6      	b.n	80106ec <_scanf_float+0x64>
 801091e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010926:	463a      	mov	r2, r7
 8010928:	4640      	mov	r0, r8
 801092a:	4798      	blx	r3
 801092c:	6923      	ldr	r3, [r4, #16]
 801092e:	3b01      	subs	r3, #1
 8010930:	6123      	str	r3, [r4, #16]
 8010932:	e6e8      	b.n	8010706 <_scanf_float+0x7e>
 8010934:	1e6b      	subs	r3, r5, #1
 8010936:	2b06      	cmp	r3, #6
 8010938:	d824      	bhi.n	8010984 <_scanf_float+0x2fc>
 801093a:	2d02      	cmp	r5, #2
 801093c:	d836      	bhi.n	80109ac <_scanf_float+0x324>
 801093e:	9b01      	ldr	r3, [sp, #4]
 8010940:	429e      	cmp	r6, r3
 8010942:	f67f aee4 	bls.w	801070e <_scanf_float+0x86>
 8010946:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801094a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801094e:	463a      	mov	r2, r7
 8010950:	4640      	mov	r0, r8
 8010952:	4798      	blx	r3
 8010954:	6923      	ldr	r3, [r4, #16]
 8010956:	3b01      	subs	r3, #1
 8010958:	6123      	str	r3, [r4, #16]
 801095a:	e7f0      	b.n	801093e <_scanf_float+0x2b6>
 801095c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010960:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010964:	463a      	mov	r2, r7
 8010966:	4640      	mov	r0, r8
 8010968:	4798      	blx	r3
 801096a:	6923      	ldr	r3, [r4, #16]
 801096c:	3b01      	subs	r3, #1
 801096e:	6123      	str	r3, [r4, #16]
 8010970:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010974:	fa5f fa8a 	uxtb.w	sl, sl
 8010978:	f1ba 0f02 	cmp.w	sl, #2
 801097c:	d1ee      	bne.n	801095c <_scanf_float+0x2d4>
 801097e:	3d03      	subs	r5, #3
 8010980:	b2ed      	uxtb	r5, r5
 8010982:	1b76      	subs	r6, r6, r5
 8010984:	6823      	ldr	r3, [r4, #0]
 8010986:	05da      	lsls	r2, r3, #23
 8010988:	d530      	bpl.n	80109ec <_scanf_float+0x364>
 801098a:	055b      	lsls	r3, r3, #21
 801098c:	d511      	bpl.n	80109b2 <_scanf_float+0x32a>
 801098e:	9b01      	ldr	r3, [sp, #4]
 8010990:	429e      	cmp	r6, r3
 8010992:	f67f aebc 	bls.w	801070e <_scanf_float+0x86>
 8010996:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801099a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801099e:	463a      	mov	r2, r7
 80109a0:	4640      	mov	r0, r8
 80109a2:	4798      	blx	r3
 80109a4:	6923      	ldr	r3, [r4, #16]
 80109a6:	3b01      	subs	r3, #1
 80109a8:	6123      	str	r3, [r4, #16]
 80109aa:	e7f0      	b.n	801098e <_scanf_float+0x306>
 80109ac:	46aa      	mov	sl, r5
 80109ae:	46b3      	mov	fp, r6
 80109b0:	e7de      	b.n	8010970 <_scanf_float+0x2e8>
 80109b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80109b6:	6923      	ldr	r3, [r4, #16]
 80109b8:	2965      	cmp	r1, #101	@ 0x65
 80109ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80109be:	f106 35ff 	add.w	r5, r6, #4294967295
 80109c2:	6123      	str	r3, [r4, #16]
 80109c4:	d00c      	beq.n	80109e0 <_scanf_float+0x358>
 80109c6:	2945      	cmp	r1, #69	@ 0x45
 80109c8:	d00a      	beq.n	80109e0 <_scanf_float+0x358>
 80109ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80109ce:	463a      	mov	r2, r7
 80109d0:	4640      	mov	r0, r8
 80109d2:	4798      	blx	r3
 80109d4:	6923      	ldr	r3, [r4, #16]
 80109d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80109da:	3b01      	subs	r3, #1
 80109dc:	1eb5      	subs	r5, r6, #2
 80109de:	6123      	str	r3, [r4, #16]
 80109e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80109e4:	463a      	mov	r2, r7
 80109e6:	4640      	mov	r0, r8
 80109e8:	4798      	blx	r3
 80109ea:	462e      	mov	r6, r5
 80109ec:	6822      	ldr	r2, [r4, #0]
 80109ee:	f012 0210 	ands.w	r2, r2, #16
 80109f2:	d001      	beq.n	80109f8 <_scanf_float+0x370>
 80109f4:	2000      	movs	r0, #0
 80109f6:	e68b      	b.n	8010710 <_scanf_float+0x88>
 80109f8:	7032      	strb	r2, [r6, #0]
 80109fa:	6823      	ldr	r3, [r4, #0]
 80109fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010a04:	d11a      	bne.n	8010a3c <_scanf_float+0x3b4>
 8010a06:	9b02      	ldr	r3, [sp, #8]
 8010a08:	454b      	cmp	r3, r9
 8010a0a:	eba3 0209 	sub.w	r2, r3, r9
 8010a0e:	d121      	bne.n	8010a54 <_scanf_float+0x3cc>
 8010a10:	9901      	ldr	r1, [sp, #4]
 8010a12:	2200      	movs	r2, #0
 8010a14:	4640      	mov	r0, r8
 8010a16:	f002 fbe1 	bl	80131dc <_strtod_r>
 8010a1a:	9b03      	ldr	r3, [sp, #12]
 8010a1c:	6821      	ldr	r1, [r4, #0]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f011 0f02 	tst.w	r1, #2
 8010a24:	f103 0204 	add.w	r2, r3, #4
 8010a28:	d01f      	beq.n	8010a6a <_scanf_float+0x3e2>
 8010a2a:	9903      	ldr	r1, [sp, #12]
 8010a2c:	600a      	str	r2, [r1, #0]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	ed83 0b00 	vstr	d0, [r3]
 8010a34:	68e3      	ldr	r3, [r4, #12]
 8010a36:	3301      	adds	r3, #1
 8010a38:	60e3      	str	r3, [r4, #12]
 8010a3a:	e7db      	b.n	80109f4 <_scanf_float+0x36c>
 8010a3c:	9b04      	ldr	r3, [sp, #16]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d0e6      	beq.n	8010a10 <_scanf_float+0x388>
 8010a42:	9905      	ldr	r1, [sp, #20]
 8010a44:	230a      	movs	r3, #10
 8010a46:	3101      	adds	r1, #1
 8010a48:	4640      	mov	r0, r8
 8010a4a:	f002 fc47 	bl	80132dc <_strtol_r>
 8010a4e:	9b04      	ldr	r3, [sp, #16]
 8010a50:	9e05      	ldr	r6, [sp, #20]
 8010a52:	1ac2      	subs	r2, r0, r3
 8010a54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010a58:	429e      	cmp	r6, r3
 8010a5a:	bf28      	it	cs
 8010a5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010a60:	490d      	ldr	r1, [pc, #52]	@ (8010a98 <_scanf_float+0x410>)
 8010a62:	4630      	mov	r0, r6
 8010a64:	f000 f8f0 	bl	8010c48 <siprintf>
 8010a68:	e7d2      	b.n	8010a10 <_scanf_float+0x388>
 8010a6a:	f011 0f04 	tst.w	r1, #4
 8010a6e:	9903      	ldr	r1, [sp, #12]
 8010a70:	600a      	str	r2, [r1, #0]
 8010a72:	d1dc      	bne.n	8010a2e <_scanf_float+0x3a6>
 8010a74:	eeb4 0b40 	vcmp.f64	d0, d0
 8010a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a7c:	681d      	ldr	r5, [r3, #0]
 8010a7e:	d705      	bvc.n	8010a8c <_scanf_float+0x404>
 8010a80:	4806      	ldr	r0, [pc, #24]	@ (8010a9c <_scanf_float+0x414>)
 8010a82:	f000 fa67 	bl	8010f54 <nanf>
 8010a86:	ed85 0a00 	vstr	s0, [r5]
 8010a8a:	e7d3      	b.n	8010a34 <_scanf_float+0x3ac>
 8010a8c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010a90:	e7f9      	b.n	8010a86 <_scanf_float+0x3fe>
 8010a92:	f04f 0900 	mov.w	r9, #0
 8010a96:	e630      	b.n	80106fa <_scanf_float+0x72>
 8010a98:	0801442c 	.word	0x0801442c
 8010a9c:	080147c5 	.word	0x080147c5

08010aa0 <std>:
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	b510      	push	{r4, lr}
 8010aa4:	4604      	mov	r4, r0
 8010aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8010aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010aae:	6083      	str	r3, [r0, #8]
 8010ab0:	8181      	strh	r1, [r0, #12]
 8010ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8010ab4:	81c2      	strh	r2, [r0, #14]
 8010ab6:	6183      	str	r3, [r0, #24]
 8010ab8:	4619      	mov	r1, r3
 8010aba:	2208      	movs	r2, #8
 8010abc:	305c      	adds	r0, #92	@ 0x5c
 8010abe:	f000 f9bb 	bl	8010e38 <memset>
 8010ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8010af8 <std+0x58>)
 8010ac4:	6263      	str	r3, [r4, #36]	@ 0x24
 8010ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8010afc <std+0x5c>)
 8010ac8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010aca:	4b0d      	ldr	r3, [pc, #52]	@ (8010b00 <std+0x60>)
 8010acc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010ace:	4b0d      	ldr	r3, [pc, #52]	@ (8010b04 <std+0x64>)
 8010ad0:	6323      	str	r3, [r4, #48]	@ 0x30
 8010ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8010b08 <std+0x68>)
 8010ad4:	6224      	str	r4, [r4, #32]
 8010ad6:	429c      	cmp	r4, r3
 8010ad8:	d006      	beq.n	8010ae8 <std+0x48>
 8010ada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010ade:	4294      	cmp	r4, r2
 8010ae0:	d002      	beq.n	8010ae8 <std+0x48>
 8010ae2:	33d0      	adds	r3, #208	@ 0xd0
 8010ae4:	429c      	cmp	r4, r3
 8010ae6:	d105      	bne.n	8010af4 <std+0x54>
 8010ae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010af0:	f000 ba1e 	b.w	8010f30 <__retarget_lock_init_recursive>
 8010af4:	bd10      	pop	{r4, pc}
 8010af6:	bf00      	nop
 8010af8:	08010c89 	.word	0x08010c89
 8010afc:	08010cab 	.word	0x08010cab
 8010b00:	08010ce3 	.word	0x08010ce3
 8010b04:	08010d07 	.word	0x08010d07
 8010b08:	24000bd8 	.word	0x24000bd8

08010b0c <stdio_exit_handler>:
 8010b0c:	4a02      	ldr	r2, [pc, #8]	@ (8010b18 <stdio_exit_handler+0xc>)
 8010b0e:	4903      	ldr	r1, [pc, #12]	@ (8010b1c <stdio_exit_handler+0x10>)
 8010b10:	4803      	ldr	r0, [pc, #12]	@ (8010b20 <stdio_exit_handler+0x14>)
 8010b12:	f000 b869 	b.w	8010be8 <_fwalk_sglue>
 8010b16:	bf00      	nop
 8010b18:	24000010 	.word	0x24000010
 8010b1c:	0801391d 	.word	0x0801391d
 8010b20:	24000020 	.word	0x24000020

08010b24 <cleanup_stdio>:
 8010b24:	6841      	ldr	r1, [r0, #4]
 8010b26:	4b0c      	ldr	r3, [pc, #48]	@ (8010b58 <cleanup_stdio+0x34>)
 8010b28:	4299      	cmp	r1, r3
 8010b2a:	b510      	push	{r4, lr}
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	d001      	beq.n	8010b34 <cleanup_stdio+0x10>
 8010b30:	f002 fef4 	bl	801391c <_fflush_r>
 8010b34:	68a1      	ldr	r1, [r4, #8]
 8010b36:	4b09      	ldr	r3, [pc, #36]	@ (8010b5c <cleanup_stdio+0x38>)
 8010b38:	4299      	cmp	r1, r3
 8010b3a:	d002      	beq.n	8010b42 <cleanup_stdio+0x1e>
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f002 feed 	bl	801391c <_fflush_r>
 8010b42:	68e1      	ldr	r1, [r4, #12]
 8010b44:	4b06      	ldr	r3, [pc, #24]	@ (8010b60 <cleanup_stdio+0x3c>)
 8010b46:	4299      	cmp	r1, r3
 8010b48:	d004      	beq.n	8010b54 <cleanup_stdio+0x30>
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b50:	f002 bee4 	b.w	801391c <_fflush_r>
 8010b54:	bd10      	pop	{r4, pc}
 8010b56:	bf00      	nop
 8010b58:	24000bd8 	.word	0x24000bd8
 8010b5c:	24000c40 	.word	0x24000c40
 8010b60:	24000ca8 	.word	0x24000ca8

08010b64 <global_stdio_init.part.0>:
 8010b64:	b510      	push	{r4, lr}
 8010b66:	4b0b      	ldr	r3, [pc, #44]	@ (8010b94 <global_stdio_init.part.0+0x30>)
 8010b68:	4c0b      	ldr	r4, [pc, #44]	@ (8010b98 <global_stdio_init.part.0+0x34>)
 8010b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8010b9c <global_stdio_init.part.0+0x38>)
 8010b6c:	601a      	str	r2, [r3, #0]
 8010b6e:	4620      	mov	r0, r4
 8010b70:	2200      	movs	r2, #0
 8010b72:	2104      	movs	r1, #4
 8010b74:	f7ff ff94 	bl	8010aa0 <std>
 8010b78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	2109      	movs	r1, #9
 8010b80:	f7ff ff8e 	bl	8010aa0 <std>
 8010b84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010b88:	2202      	movs	r2, #2
 8010b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b8e:	2112      	movs	r1, #18
 8010b90:	f7ff bf86 	b.w	8010aa0 <std>
 8010b94:	24000d10 	.word	0x24000d10
 8010b98:	24000bd8 	.word	0x24000bd8
 8010b9c:	08010b0d 	.word	0x08010b0d

08010ba0 <__sfp_lock_acquire>:
 8010ba0:	4801      	ldr	r0, [pc, #4]	@ (8010ba8 <__sfp_lock_acquire+0x8>)
 8010ba2:	f000 b9c6 	b.w	8010f32 <__retarget_lock_acquire_recursive>
 8010ba6:	bf00      	nop
 8010ba8:	24000d19 	.word	0x24000d19

08010bac <__sfp_lock_release>:
 8010bac:	4801      	ldr	r0, [pc, #4]	@ (8010bb4 <__sfp_lock_release+0x8>)
 8010bae:	f000 b9c1 	b.w	8010f34 <__retarget_lock_release_recursive>
 8010bb2:	bf00      	nop
 8010bb4:	24000d19 	.word	0x24000d19

08010bb8 <__sinit>:
 8010bb8:	b510      	push	{r4, lr}
 8010bba:	4604      	mov	r4, r0
 8010bbc:	f7ff fff0 	bl	8010ba0 <__sfp_lock_acquire>
 8010bc0:	6a23      	ldr	r3, [r4, #32]
 8010bc2:	b11b      	cbz	r3, 8010bcc <__sinit+0x14>
 8010bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bc8:	f7ff bff0 	b.w	8010bac <__sfp_lock_release>
 8010bcc:	4b04      	ldr	r3, [pc, #16]	@ (8010be0 <__sinit+0x28>)
 8010bce:	6223      	str	r3, [r4, #32]
 8010bd0:	4b04      	ldr	r3, [pc, #16]	@ (8010be4 <__sinit+0x2c>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d1f5      	bne.n	8010bc4 <__sinit+0xc>
 8010bd8:	f7ff ffc4 	bl	8010b64 <global_stdio_init.part.0>
 8010bdc:	e7f2      	b.n	8010bc4 <__sinit+0xc>
 8010bde:	bf00      	nop
 8010be0:	08010b25 	.word	0x08010b25
 8010be4:	24000d10 	.word	0x24000d10

08010be8 <_fwalk_sglue>:
 8010be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bec:	4607      	mov	r7, r0
 8010bee:	4688      	mov	r8, r1
 8010bf0:	4614      	mov	r4, r2
 8010bf2:	2600      	movs	r6, #0
 8010bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8010bfc:	d505      	bpl.n	8010c0a <_fwalk_sglue+0x22>
 8010bfe:	6824      	ldr	r4, [r4, #0]
 8010c00:	2c00      	cmp	r4, #0
 8010c02:	d1f7      	bne.n	8010bf4 <_fwalk_sglue+0xc>
 8010c04:	4630      	mov	r0, r6
 8010c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c0a:	89ab      	ldrh	r3, [r5, #12]
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d907      	bls.n	8010c20 <_fwalk_sglue+0x38>
 8010c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c14:	3301      	adds	r3, #1
 8010c16:	d003      	beq.n	8010c20 <_fwalk_sglue+0x38>
 8010c18:	4629      	mov	r1, r5
 8010c1a:	4638      	mov	r0, r7
 8010c1c:	47c0      	blx	r8
 8010c1e:	4306      	orrs	r6, r0
 8010c20:	3568      	adds	r5, #104	@ 0x68
 8010c22:	e7e9      	b.n	8010bf8 <_fwalk_sglue+0x10>

08010c24 <iprintf>:
 8010c24:	b40f      	push	{r0, r1, r2, r3}
 8010c26:	b507      	push	{r0, r1, r2, lr}
 8010c28:	4906      	ldr	r1, [pc, #24]	@ (8010c44 <iprintf+0x20>)
 8010c2a:	ab04      	add	r3, sp, #16
 8010c2c:	6808      	ldr	r0, [r1, #0]
 8010c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c32:	6881      	ldr	r1, [r0, #8]
 8010c34:	9301      	str	r3, [sp, #4]
 8010c36:	f002 fcd5 	bl	80135e4 <_vfiprintf_r>
 8010c3a:	b003      	add	sp, #12
 8010c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c40:	b004      	add	sp, #16
 8010c42:	4770      	bx	lr
 8010c44:	2400001c 	.word	0x2400001c

08010c48 <siprintf>:
 8010c48:	b40e      	push	{r1, r2, r3}
 8010c4a:	b500      	push	{lr}
 8010c4c:	b09c      	sub	sp, #112	@ 0x70
 8010c4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010c50:	9002      	str	r0, [sp, #8]
 8010c52:	9006      	str	r0, [sp, #24]
 8010c54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010c58:	4809      	ldr	r0, [pc, #36]	@ (8010c80 <siprintf+0x38>)
 8010c5a:	9107      	str	r1, [sp, #28]
 8010c5c:	9104      	str	r1, [sp, #16]
 8010c5e:	4909      	ldr	r1, [pc, #36]	@ (8010c84 <siprintf+0x3c>)
 8010c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c64:	9105      	str	r1, [sp, #20]
 8010c66:	6800      	ldr	r0, [r0, #0]
 8010c68:	9301      	str	r3, [sp, #4]
 8010c6a:	a902      	add	r1, sp, #8
 8010c6c:	f002 fb94 	bl	8013398 <_svfiprintf_r>
 8010c70:	9b02      	ldr	r3, [sp, #8]
 8010c72:	2200      	movs	r2, #0
 8010c74:	701a      	strb	r2, [r3, #0]
 8010c76:	b01c      	add	sp, #112	@ 0x70
 8010c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c7c:	b003      	add	sp, #12
 8010c7e:	4770      	bx	lr
 8010c80:	2400001c 	.word	0x2400001c
 8010c84:	ffff0208 	.word	0xffff0208

08010c88 <__sread>:
 8010c88:	b510      	push	{r4, lr}
 8010c8a:	460c      	mov	r4, r1
 8010c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c90:	f000 f900 	bl	8010e94 <_read_r>
 8010c94:	2800      	cmp	r0, #0
 8010c96:	bfab      	itete	ge
 8010c98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8010c9c:	181b      	addge	r3, r3, r0
 8010c9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010ca2:	bfac      	ite	ge
 8010ca4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010ca6:	81a3      	strhlt	r3, [r4, #12]
 8010ca8:	bd10      	pop	{r4, pc}

08010caa <__swrite>:
 8010caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cae:	461f      	mov	r7, r3
 8010cb0:	898b      	ldrh	r3, [r1, #12]
 8010cb2:	05db      	lsls	r3, r3, #23
 8010cb4:	4605      	mov	r5, r0
 8010cb6:	460c      	mov	r4, r1
 8010cb8:	4616      	mov	r6, r2
 8010cba:	d505      	bpl.n	8010cc8 <__swrite+0x1e>
 8010cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cc0:	2302      	movs	r3, #2
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f000 f8d4 	bl	8010e70 <_lseek_r>
 8010cc8:	89a3      	ldrh	r3, [r4, #12]
 8010cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010cd2:	81a3      	strh	r3, [r4, #12]
 8010cd4:	4632      	mov	r2, r6
 8010cd6:	463b      	mov	r3, r7
 8010cd8:	4628      	mov	r0, r5
 8010cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cde:	f000 b8eb 	b.w	8010eb8 <_write_r>

08010ce2 <__sseek>:
 8010ce2:	b510      	push	{r4, lr}
 8010ce4:	460c      	mov	r4, r1
 8010ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cea:	f000 f8c1 	bl	8010e70 <_lseek_r>
 8010cee:	1c43      	adds	r3, r0, #1
 8010cf0:	89a3      	ldrh	r3, [r4, #12]
 8010cf2:	bf15      	itete	ne
 8010cf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010cf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010cfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010cfe:	81a3      	strheq	r3, [r4, #12]
 8010d00:	bf18      	it	ne
 8010d02:	81a3      	strhne	r3, [r4, #12]
 8010d04:	bd10      	pop	{r4, pc}

08010d06 <__sclose>:
 8010d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d0a:	f000 b8a1 	b.w	8010e50 <_close_r>

08010d0e <__swbuf_r>:
 8010d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d10:	460e      	mov	r6, r1
 8010d12:	4614      	mov	r4, r2
 8010d14:	4605      	mov	r5, r0
 8010d16:	b118      	cbz	r0, 8010d20 <__swbuf_r+0x12>
 8010d18:	6a03      	ldr	r3, [r0, #32]
 8010d1a:	b90b      	cbnz	r3, 8010d20 <__swbuf_r+0x12>
 8010d1c:	f7ff ff4c 	bl	8010bb8 <__sinit>
 8010d20:	69a3      	ldr	r3, [r4, #24]
 8010d22:	60a3      	str	r3, [r4, #8]
 8010d24:	89a3      	ldrh	r3, [r4, #12]
 8010d26:	071a      	lsls	r2, r3, #28
 8010d28:	d501      	bpl.n	8010d2e <__swbuf_r+0x20>
 8010d2a:	6923      	ldr	r3, [r4, #16]
 8010d2c:	b943      	cbnz	r3, 8010d40 <__swbuf_r+0x32>
 8010d2e:	4621      	mov	r1, r4
 8010d30:	4628      	mov	r0, r5
 8010d32:	f000 f82b 	bl	8010d8c <__swsetup_r>
 8010d36:	b118      	cbz	r0, 8010d40 <__swbuf_r+0x32>
 8010d38:	f04f 37ff 	mov.w	r7, #4294967295
 8010d3c:	4638      	mov	r0, r7
 8010d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	6922      	ldr	r2, [r4, #16]
 8010d44:	1a98      	subs	r0, r3, r2
 8010d46:	6963      	ldr	r3, [r4, #20]
 8010d48:	b2f6      	uxtb	r6, r6
 8010d4a:	4283      	cmp	r3, r0
 8010d4c:	4637      	mov	r7, r6
 8010d4e:	dc05      	bgt.n	8010d5c <__swbuf_r+0x4e>
 8010d50:	4621      	mov	r1, r4
 8010d52:	4628      	mov	r0, r5
 8010d54:	f002 fde2 	bl	801391c <_fflush_r>
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	d1ed      	bne.n	8010d38 <__swbuf_r+0x2a>
 8010d5c:	68a3      	ldr	r3, [r4, #8]
 8010d5e:	3b01      	subs	r3, #1
 8010d60:	60a3      	str	r3, [r4, #8]
 8010d62:	6823      	ldr	r3, [r4, #0]
 8010d64:	1c5a      	adds	r2, r3, #1
 8010d66:	6022      	str	r2, [r4, #0]
 8010d68:	701e      	strb	r6, [r3, #0]
 8010d6a:	6962      	ldr	r2, [r4, #20]
 8010d6c:	1c43      	adds	r3, r0, #1
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d004      	beq.n	8010d7c <__swbuf_r+0x6e>
 8010d72:	89a3      	ldrh	r3, [r4, #12]
 8010d74:	07db      	lsls	r3, r3, #31
 8010d76:	d5e1      	bpl.n	8010d3c <__swbuf_r+0x2e>
 8010d78:	2e0a      	cmp	r6, #10
 8010d7a:	d1df      	bne.n	8010d3c <__swbuf_r+0x2e>
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f002 fdcc 	bl	801391c <_fflush_r>
 8010d84:	2800      	cmp	r0, #0
 8010d86:	d0d9      	beq.n	8010d3c <__swbuf_r+0x2e>
 8010d88:	e7d6      	b.n	8010d38 <__swbuf_r+0x2a>
	...

08010d8c <__swsetup_r>:
 8010d8c:	b538      	push	{r3, r4, r5, lr}
 8010d8e:	4b29      	ldr	r3, [pc, #164]	@ (8010e34 <__swsetup_r+0xa8>)
 8010d90:	4605      	mov	r5, r0
 8010d92:	6818      	ldr	r0, [r3, #0]
 8010d94:	460c      	mov	r4, r1
 8010d96:	b118      	cbz	r0, 8010da0 <__swsetup_r+0x14>
 8010d98:	6a03      	ldr	r3, [r0, #32]
 8010d9a:	b90b      	cbnz	r3, 8010da0 <__swsetup_r+0x14>
 8010d9c:	f7ff ff0c 	bl	8010bb8 <__sinit>
 8010da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010da4:	0719      	lsls	r1, r3, #28
 8010da6:	d422      	bmi.n	8010dee <__swsetup_r+0x62>
 8010da8:	06da      	lsls	r2, r3, #27
 8010daa:	d407      	bmi.n	8010dbc <__swsetup_r+0x30>
 8010dac:	2209      	movs	r2, #9
 8010dae:	602a      	str	r2, [r5, #0]
 8010db0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010db4:	81a3      	strh	r3, [r4, #12]
 8010db6:	f04f 30ff 	mov.w	r0, #4294967295
 8010dba:	e033      	b.n	8010e24 <__swsetup_r+0x98>
 8010dbc:	0758      	lsls	r0, r3, #29
 8010dbe:	d512      	bpl.n	8010de6 <__swsetup_r+0x5a>
 8010dc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010dc2:	b141      	cbz	r1, 8010dd6 <__swsetup_r+0x4a>
 8010dc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010dc8:	4299      	cmp	r1, r3
 8010dca:	d002      	beq.n	8010dd2 <__swsetup_r+0x46>
 8010dcc:	4628      	mov	r0, r5
 8010dce:	f000 fea5 	bl	8011b1c <_free_r>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8010dd6:	89a3      	ldrh	r3, [r4, #12]
 8010dd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010ddc:	81a3      	strh	r3, [r4, #12]
 8010dde:	2300      	movs	r3, #0
 8010de0:	6063      	str	r3, [r4, #4]
 8010de2:	6923      	ldr	r3, [r4, #16]
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	89a3      	ldrh	r3, [r4, #12]
 8010de8:	f043 0308 	orr.w	r3, r3, #8
 8010dec:	81a3      	strh	r3, [r4, #12]
 8010dee:	6923      	ldr	r3, [r4, #16]
 8010df0:	b94b      	cbnz	r3, 8010e06 <__swsetup_r+0x7a>
 8010df2:	89a3      	ldrh	r3, [r4, #12]
 8010df4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010dfc:	d003      	beq.n	8010e06 <__swsetup_r+0x7a>
 8010dfe:	4621      	mov	r1, r4
 8010e00:	4628      	mov	r0, r5
 8010e02:	f002 fdd9 	bl	80139b8 <__smakebuf_r>
 8010e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e0a:	f013 0201 	ands.w	r2, r3, #1
 8010e0e:	d00a      	beq.n	8010e26 <__swsetup_r+0x9a>
 8010e10:	2200      	movs	r2, #0
 8010e12:	60a2      	str	r2, [r4, #8]
 8010e14:	6962      	ldr	r2, [r4, #20]
 8010e16:	4252      	negs	r2, r2
 8010e18:	61a2      	str	r2, [r4, #24]
 8010e1a:	6922      	ldr	r2, [r4, #16]
 8010e1c:	b942      	cbnz	r2, 8010e30 <__swsetup_r+0xa4>
 8010e1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010e22:	d1c5      	bne.n	8010db0 <__swsetup_r+0x24>
 8010e24:	bd38      	pop	{r3, r4, r5, pc}
 8010e26:	0799      	lsls	r1, r3, #30
 8010e28:	bf58      	it	pl
 8010e2a:	6962      	ldrpl	r2, [r4, #20]
 8010e2c:	60a2      	str	r2, [r4, #8]
 8010e2e:	e7f4      	b.n	8010e1a <__swsetup_r+0x8e>
 8010e30:	2000      	movs	r0, #0
 8010e32:	e7f7      	b.n	8010e24 <__swsetup_r+0x98>
 8010e34:	2400001c 	.word	0x2400001c

08010e38 <memset>:
 8010e38:	4402      	add	r2, r0
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d100      	bne.n	8010e42 <memset+0xa>
 8010e40:	4770      	bx	lr
 8010e42:	f803 1b01 	strb.w	r1, [r3], #1
 8010e46:	e7f9      	b.n	8010e3c <memset+0x4>

08010e48 <_localeconv_r>:
 8010e48:	4800      	ldr	r0, [pc, #0]	@ (8010e4c <_localeconv_r+0x4>)
 8010e4a:	4770      	bx	lr
 8010e4c:	2400015c 	.word	0x2400015c

08010e50 <_close_r>:
 8010e50:	b538      	push	{r3, r4, r5, lr}
 8010e52:	4d06      	ldr	r5, [pc, #24]	@ (8010e6c <_close_r+0x1c>)
 8010e54:	2300      	movs	r3, #0
 8010e56:	4604      	mov	r4, r0
 8010e58:	4608      	mov	r0, r1
 8010e5a:	602b      	str	r3, [r5, #0]
 8010e5c:	f7f2 fa5c 	bl	8003318 <_close>
 8010e60:	1c43      	adds	r3, r0, #1
 8010e62:	d102      	bne.n	8010e6a <_close_r+0x1a>
 8010e64:	682b      	ldr	r3, [r5, #0]
 8010e66:	b103      	cbz	r3, 8010e6a <_close_r+0x1a>
 8010e68:	6023      	str	r3, [r4, #0]
 8010e6a:	bd38      	pop	{r3, r4, r5, pc}
 8010e6c:	24000d14 	.word	0x24000d14

08010e70 <_lseek_r>:
 8010e70:	b538      	push	{r3, r4, r5, lr}
 8010e72:	4d07      	ldr	r5, [pc, #28]	@ (8010e90 <_lseek_r+0x20>)
 8010e74:	4604      	mov	r4, r0
 8010e76:	4608      	mov	r0, r1
 8010e78:	4611      	mov	r1, r2
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	602a      	str	r2, [r5, #0]
 8010e7e:	461a      	mov	r2, r3
 8010e80:	f7f2 fa71 	bl	8003366 <_lseek>
 8010e84:	1c43      	adds	r3, r0, #1
 8010e86:	d102      	bne.n	8010e8e <_lseek_r+0x1e>
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	b103      	cbz	r3, 8010e8e <_lseek_r+0x1e>
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	bd38      	pop	{r3, r4, r5, pc}
 8010e90:	24000d14 	.word	0x24000d14

08010e94 <_read_r>:
 8010e94:	b538      	push	{r3, r4, r5, lr}
 8010e96:	4d07      	ldr	r5, [pc, #28]	@ (8010eb4 <_read_r+0x20>)
 8010e98:	4604      	mov	r4, r0
 8010e9a:	4608      	mov	r0, r1
 8010e9c:	4611      	mov	r1, r2
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	602a      	str	r2, [r5, #0]
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	f7f2 fa1b 	bl	80032de <_read>
 8010ea8:	1c43      	adds	r3, r0, #1
 8010eaa:	d102      	bne.n	8010eb2 <_read_r+0x1e>
 8010eac:	682b      	ldr	r3, [r5, #0]
 8010eae:	b103      	cbz	r3, 8010eb2 <_read_r+0x1e>
 8010eb0:	6023      	str	r3, [r4, #0]
 8010eb2:	bd38      	pop	{r3, r4, r5, pc}
 8010eb4:	24000d14 	.word	0x24000d14

08010eb8 <_write_r>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	4d07      	ldr	r5, [pc, #28]	@ (8010ed8 <_write_r+0x20>)
 8010ebc:	4604      	mov	r4, r0
 8010ebe:	4608      	mov	r0, r1
 8010ec0:	4611      	mov	r1, r2
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	602a      	str	r2, [r5, #0]
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	f7ef fe0d 	bl	8000ae6 <_write>
 8010ecc:	1c43      	adds	r3, r0, #1
 8010ece:	d102      	bne.n	8010ed6 <_write_r+0x1e>
 8010ed0:	682b      	ldr	r3, [r5, #0]
 8010ed2:	b103      	cbz	r3, 8010ed6 <_write_r+0x1e>
 8010ed4:	6023      	str	r3, [r4, #0]
 8010ed6:	bd38      	pop	{r3, r4, r5, pc}
 8010ed8:	24000d14 	.word	0x24000d14

08010edc <__errno>:
 8010edc:	4b01      	ldr	r3, [pc, #4]	@ (8010ee4 <__errno+0x8>)
 8010ede:	6818      	ldr	r0, [r3, #0]
 8010ee0:	4770      	bx	lr
 8010ee2:	bf00      	nop
 8010ee4:	2400001c 	.word	0x2400001c

08010ee8 <__libc_init_array>:
 8010ee8:	b570      	push	{r4, r5, r6, lr}
 8010eea:	4d0d      	ldr	r5, [pc, #52]	@ (8010f20 <__libc_init_array+0x38>)
 8010eec:	4c0d      	ldr	r4, [pc, #52]	@ (8010f24 <__libc_init_array+0x3c>)
 8010eee:	1b64      	subs	r4, r4, r5
 8010ef0:	10a4      	asrs	r4, r4, #2
 8010ef2:	2600      	movs	r6, #0
 8010ef4:	42a6      	cmp	r6, r4
 8010ef6:	d109      	bne.n	8010f0c <__libc_init_array+0x24>
 8010ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8010f28 <__libc_init_array+0x40>)
 8010efa:	4c0c      	ldr	r4, [pc, #48]	@ (8010f2c <__libc_init_array+0x44>)
 8010efc:	f003 fa1e 	bl	801433c <_init>
 8010f00:	1b64      	subs	r4, r4, r5
 8010f02:	10a4      	asrs	r4, r4, #2
 8010f04:	2600      	movs	r6, #0
 8010f06:	42a6      	cmp	r6, r4
 8010f08:	d105      	bne.n	8010f16 <__libc_init_array+0x2e>
 8010f0a:	bd70      	pop	{r4, r5, r6, pc}
 8010f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f10:	4798      	blx	r3
 8010f12:	3601      	adds	r6, #1
 8010f14:	e7ee      	b.n	8010ef4 <__libc_init_array+0xc>
 8010f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f1a:	4798      	blx	r3
 8010f1c:	3601      	adds	r6, #1
 8010f1e:	e7f2      	b.n	8010f06 <__libc_init_array+0x1e>
 8010f20:	08014830 	.word	0x08014830
 8010f24:	08014830 	.word	0x08014830
 8010f28:	08014830 	.word	0x08014830
 8010f2c:	08014834 	.word	0x08014834

08010f30 <__retarget_lock_init_recursive>:
 8010f30:	4770      	bx	lr

08010f32 <__retarget_lock_acquire_recursive>:
 8010f32:	4770      	bx	lr

08010f34 <__retarget_lock_release_recursive>:
 8010f34:	4770      	bx	lr

08010f36 <memcpy>:
 8010f36:	440a      	add	r2, r1
 8010f38:	4291      	cmp	r1, r2
 8010f3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f3e:	d100      	bne.n	8010f42 <memcpy+0xc>
 8010f40:	4770      	bx	lr
 8010f42:	b510      	push	{r4, lr}
 8010f44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f4c:	4291      	cmp	r1, r2
 8010f4e:	d1f9      	bne.n	8010f44 <memcpy+0xe>
 8010f50:	bd10      	pop	{r4, pc}
	...

08010f54 <nanf>:
 8010f54:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010f5c <nanf+0x8>
 8010f58:	4770      	bx	lr
 8010f5a:	bf00      	nop
 8010f5c:	7fc00000 	.word	0x7fc00000

08010f60 <quorem>:
 8010f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f64:	6903      	ldr	r3, [r0, #16]
 8010f66:	690c      	ldr	r4, [r1, #16]
 8010f68:	42a3      	cmp	r3, r4
 8010f6a:	4607      	mov	r7, r0
 8010f6c:	db7e      	blt.n	801106c <quorem+0x10c>
 8010f6e:	3c01      	subs	r4, #1
 8010f70:	f101 0814 	add.w	r8, r1, #20
 8010f74:	00a3      	lsls	r3, r4, #2
 8010f76:	f100 0514 	add.w	r5, r0, #20
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f80:	9301      	str	r3, [sp, #4]
 8010f82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010f86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010f92:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f96:	d32e      	bcc.n	8010ff6 <quorem+0x96>
 8010f98:	f04f 0a00 	mov.w	sl, #0
 8010f9c:	46c4      	mov	ip, r8
 8010f9e:	46ae      	mov	lr, r5
 8010fa0:	46d3      	mov	fp, sl
 8010fa2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010fa6:	b298      	uxth	r0, r3
 8010fa8:	fb06 a000 	mla	r0, r6, r0, sl
 8010fac:	0c02      	lsrs	r2, r0, #16
 8010fae:	0c1b      	lsrs	r3, r3, #16
 8010fb0:	fb06 2303 	mla	r3, r6, r3, r2
 8010fb4:	f8de 2000 	ldr.w	r2, [lr]
 8010fb8:	b280      	uxth	r0, r0
 8010fba:	b292      	uxth	r2, r2
 8010fbc:	1a12      	subs	r2, r2, r0
 8010fbe:	445a      	add	r2, fp
 8010fc0:	f8de 0000 	ldr.w	r0, [lr]
 8010fc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010fc8:	b29b      	uxth	r3, r3
 8010fca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010fce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010fd2:	b292      	uxth	r2, r2
 8010fd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010fd8:	45e1      	cmp	r9, ip
 8010fda:	f84e 2b04 	str.w	r2, [lr], #4
 8010fde:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010fe2:	d2de      	bcs.n	8010fa2 <quorem+0x42>
 8010fe4:	9b00      	ldr	r3, [sp, #0]
 8010fe6:	58eb      	ldr	r3, [r5, r3]
 8010fe8:	b92b      	cbnz	r3, 8010ff6 <quorem+0x96>
 8010fea:	9b01      	ldr	r3, [sp, #4]
 8010fec:	3b04      	subs	r3, #4
 8010fee:	429d      	cmp	r5, r3
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	d32f      	bcc.n	8011054 <quorem+0xf4>
 8010ff4:	613c      	str	r4, [r7, #16]
 8010ff6:	4638      	mov	r0, r7
 8010ff8:	f001 f954 	bl	80122a4 <__mcmp>
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	db25      	blt.n	801104c <quorem+0xec>
 8011000:	4629      	mov	r1, r5
 8011002:	2000      	movs	r0, #0
 8011004:	f858 2b04 	ldr.w	r2, [r8], #4
 8011008:	f8d1 c000 	ldr.w	ip, [r1]
 801100c:	fa1f fe82 	uxth.w	lr, r2
 8011010:	fa1f f38c 	uxth.w	r3, ip
 8011014:	eba3 030e 	sub.w	r3, r3, lr
 8011018:	4403      	add	r3, r0
 801101a:	0c12      	lsrs	r2, r2, #16
 801101c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011020:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011024:	b29b      	uxth	r3, r3
 8011026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801102a:	45c1      	cmp	r9, r8
 801102c:	f841 3b04 	str.w	r3, [r1], #4
 8011030:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011034:	d2e6      	bcs.n	8011004 <quorem+0xa4>
 8011036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801103a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801103e:	b922      	cbnz	r2, 801104a <quorem+0xea>
 8011040:	3b04      	subs	r3, #4
 8011042:	429d      	cmp	r5, r3
 8011044:	461a      	mov	r2, r3
 8011046:	d30b      	bcc.n	8011060 <quorem+0x100>
 8011048:	613c      	str	r4, [r7, #16]
 801104a:	3601      	adds	r6, #1
 801104c:	4630      	mov	r0, r6
 801104e:	b003      	add	sp, #12
 8011050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011054:	6812      	ldr	r2, [r2, #0]
 8011056:	3b04      	subs	r3, #4
 8011058:	2a00      	cmp	r2, #0
 801105a:	d1cb      	bne.n	8010ff4 <quorem+0x94>
 801105c:	3c01      	subs	r4, #1
 801105e:	e7c6      	b.n	8010fee <quorem+0x8e>
 8011060:	6812      	ldr	r2, [r2, #0]
 8011062:	3b04      	subs	r3, #4
 8011064:	2a00      	cmp	r2, #0
 8011066:	d1ef      	bne.n	8011048 <quorem+0xe8>
 8011068:	3c01      	subs	r4, #1
 801106a:	e7ea      	b.n	8011042 <quorem+0xe2>
 801106c:	2000      	movs	r0, #0
 801106e:	e7ee      	b.n	801104e <quorem+0xee>

08011070 <_dtoa_r>:
 8011070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011074:	ed2d 8b02 	vpush	{d8}
 8011078:	69c7      	ldr	r7, [r0, #28]
 801107a:	b091      	sub	sp, #68	@ 0x44
 801107c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011080:	ec55 4b10 	vmov	r4, r5, d0
 8011084:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011086:	9107      	str	r1, [sp, #28]
 8011088:	4681      	mov	r9, r0
 801108a:	9209      	str	r2, [sp, #36]	@ 0x24
 801108c:	930d      	str	r3, [sp, #52]	@ 0x34
 801108e:	b97f      	cbnz	r7, 80110b0 <_dtoa_r+0x40>
 8011090:	2010      	movs	r0, #16
 8011092:	f000 fd8d 	bl	8011bb0 <malloc>
 8011096:	4602      	mov	r2, r0
 8011098:	f8c9 001c 	str.w	r0, [r9, #28]
 801109c:	b920      	cbnz	r0, 80110a8 <_dtoa_r+0x38>
 801109e:	4ba0      	ldr	r3, [pc, #640]	@ (8011320 <_dtoa_r+0x2b0>)
 80110a0:	21ef      	movs	r1, #239	@ 0xef
 80110a2:	48a0      	ldr	r0, [pc, #640]	@ (8011324 <_dtoa_r+0x2b4>)
 80110a4:	f002 fd2c 	bl	8013b00 <__assert_func>
 80110a8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80110ac:	6007      	str	r7, [r0, #0]
 80110ae:	60c7      	str	r7, [r0, #12]
 80110b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80110b4:	6819      	ldr	r1, [r3, #0]
 80110b6:	b159      	cbz	r1, 80110d0 <_dtoa_r+0x60>
 80110b8:	685a      	ldr	r2, [r3, #4]
 80110ba:	604a      	str	r2, [r1, #4]
 80110bc:	2301      	movs	r3, #1
 80110be:	4093      	lsls	r3, r2
 80110c0:	608b      	str	r3, [r1, #8]
 80110c2:	4648      	mov	r0, r9
 80110c4:	f000 fe6a 	bl	8011d9c <_Bfree>
 80110c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80110cc:	2200      	movs	r2, #0
 80110ce:	601a      	str	r2, [r3, #0]
 80110d0:	1e2b      	subs	r3, r5, #0
 80110d2:	bfbb      	ittet	lt
 80110d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80110d8:	9303      	strlt	r3, [sp, #12]
 80110da:	2300      	movge	r3, #0
 80110dc:	2201      	movlt	r2, #1
 80110de:	bfac      	ite	ge
 80110e0:	6033      	strge	r3, [r6, #0]
 80110e2:	6032      	strlt	r2, [r6, #0]
 80110e4:	4b90      	ldr	r3, [pc, #576]	@ (8011328 <_dtoa_r+0x2b8>)
 80110e6:	9e03      	ldr	r6, [sp, #12]
 80110e8:	43b3      	bics	r3, r6
 80110ea:	d110      	bne.n	801110e <_dtoa_r+0x9e>
 80110ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80110ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 80110f2:	6013      	str	r3, [r2, #0]
 80110f4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80110f8:	4323      	orrs	r3, r4
 80110fa:	f000 84de 	beq.w	8011aba <_dtoa_r+0xa4a>
 80110fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011100:	4f8a      	ldr	r7, [pc, #552]	@ (801132c <_dtoa_r+0x2bc>)
 8011102:	2b00      	cmp	r3, #0
 8011104:	f000 84e0 	beq.w	8011ac8 <_dtoa_r+0xa58>
 8011108:	1cfb      	adds	r3, r7, #3
 801110a:	f000 bcdb 	b.w	8011ac4 <_dtoa_r+0xa54>
 801110e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011112:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801111a:	d10a      	bne.n	8011132 <_dtoa_r+0xc2>
 801111c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801111e:	2301      	movs	r3, #1
 8011120:	6013      	str	r3, [r2, #0]
 8011122:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011124:	b113      	cbz	r3, 801112c <_dtoa_r+0xbc>
 8011126:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011128:	4b81      	ldr	r3, [pc, #516]	@ (8011330 <_dtoa_r+0x2c0>)
 801112a:	6013      	str	r3, [r2, #0]
 801112c:	4f81      	ldr	r7, [pc, #516]	@ (8011334 <_dtoa_r+0x2c4>)
 801112e:	f000 bccb 	b.w	8011ac8 <_dtoa_r+0xa58>
 8011132:	aa0e      	add	r2, sp, #56	@ 0x38
 8011134:	a90f      	add	r1, sp, #60	@ 0x3c
 8011136:	4648      	mov	r0, r9
 8011138:	eeb0 0b48 	vmov.f64	d0, d8
 801113c:	f001 f9d2 	bl	80124e4 <__d2b>
 8011140:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011146:	9001      	str	r0, [sp, #4]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d045      	beq.n	80111d8 <_dtoa_r+0x168>
 801114c:	eeb0 7b48 	vmov.f64	d7, d8
 8011150:	ee18 1a90 	vmov	r1, s17
 8011154:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011158:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801115c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011160:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011164:	2500      	movs	r5, #0
 8011166:	ee07 1a90 	vmov	s15, r1
 801116a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801116e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011308 <_dtoa_r+0x298>
 8011172:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011176:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011310 <_dtoa_r+0x2a0>
 801117a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801117e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011318 <_dtoa_r+0x2a8>
 8011182:	ee07 3a90 	vmov	s15, r3
 8011186:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801118a:	eeb0 7b46 	vmov.f64	d7, d6
 801118e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011192:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011196:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801119e:	ee16 8a90 	vmov	r8, s13
 80111a2:	d508      	bpl.n	80111b6 <_dtoa_r+0x146>
 80111a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80111a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80111ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b0:	bf18      	it	ne
 80111b2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80111b6:	f1b8 0f16 	cmp.w	r8, #22
 80111ba:	d82b      	bhi.n	8011214 <_dtoa_r+0x1a4>
 80111bc:	495e      	ldr	r1, [pc, #376]	@ (8011338 <_dtoa_r+0x2c8>)
 80111be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80111c2:	ed91 7b00 	vldr	d7, [r1]
 80111c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80111ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ce:	d501      	bpl.n	80111d4 <_dtoa_r+0x164>
 80111d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80111d4:	2100      	movs	r1, #0
 80111d6:	e01e      	b.n	8011216 <_dtoa_r+0x1a6>
 80111d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111da:	4413      	add	r3, r2
 80111dc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80111e0:	2920      	cmp	r1, #32
 80111e2:	bfc1      	itttt	gt
 80111e4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80111e8:	408e      	lslgt	r6, r1
 80111ea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80111ee:	fa24 f101 	lsrgt.w	r1, r4, r1
 80111f2:	bfd6      	itet	le
 80111f4:	f1c1 0120 	rsble	r1, r1, #32
 80111f8:	4331      	orrgt	r1, r6
 80111fa:	fa04 f101 	lslle.w	r1, r4, r1
 80111fe:	ee07 1a90 	vmov	s15, r1
 8011202:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011206:	3b01      	subs	r3, #1
 8011208:	ee17 1a90 	vmov	r1, s15
 801120c:	2501      	movs	r5, #1
 801120e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8011212:	e7a8      	b.n	8011166 <_dtoa_r+0xf6>
 8011214:	2101      	movs	r1, #1
 8011216:	1ad2      	subs	r2, r2, r3
 8011218:	1e53      	subs	r3, r2, #1
 801121a:	9306      	str	r3, [sp, #24]
 801121c:	bf45      	ittet	mi
 801121e:	f1c2 0301 	rsbmi	r3, r2, #1
 8011222:	9305      	strmi	r3, [sp, #20]
 8011224:	2300      	movpl	r3, #0
 8011226:	2300      	movmi	r3, #0
 8011228:	bf4c      	ite	mi
 801122a:	9306      	strmi	r3, [sp, #24]
 801122c:	9305      	strpl	r3, [sp, #20]
 801122e:	f1b8 0f00 	cmp.w	r8, #0
 8011232:	910c      	str	r1, [sp, #48]	@ 0x30
 8011234:	db18      	blt.n	8011268 <_dtoa_r+0x1f8>
 8011236:	9b06      	ldr	r3, [sp, #24]
 8011238:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801123c:	4443      	add	r3, r8
 801123e:	9306      	str	r3, [sp, #24]
 8011240:	2300      	movs	r3, #0
 8011242:	9a07      	ldr	r2, [sp, #28]
 8011244:	2a09      	cmp	r2, #9
 8011246:	d849      	bhi.n	80112dc <_dtoa_r+0x26c>
 8011248:	2a05      	cmp	r2, #5
 801124a:	bfc4      	itt	gt
 801124c:	3a04      	subgt	r2, #4
 801124e:	9207      	strgt	r2, [sp, #28]
 8011250:	9a07      	ldr	r2, [sp, #28]
 8011252:	f1a2 0202 	sub.w	r2, r2, #2
 8011256:	bfcc      	ite	gt
 8011258:	2400      	movgt	r4, #0
 801125a:	2401      	movle	r4, #1
 801125c:	2a03      	cmp	r2, #3
 801125e:	d848      	bhi.n	80112f2 <_dtoa_r+0x282>
 8011260:	e8df f002 	tbb	[pc, r2]
 8011264:	3a2c2e0b 	.word	0x3a2c2e0b
 8011268:	9b05      	ldr	r3, [sp, #20]
 801126a:	2200      	movs	r2, #0
 801126c:	eba3 0308 	sub.w	r3, r3, r8
 8011270:	9305      	str	r3, [sp, #20]
 8011272:	920a      	str	r2, [sp, #40]	@ 0x28
 8011274:	f1c8 0300 	rsb	r3, r8, #0
 8011278:	e7e3      	b.n	8011242 <_dtoa_r+0x1d2>
 801127a:	2200      	movs	r2, #0
 801127c:	9208      	str	r2, [sp, #32]
 801127e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011280:	2a00      	cmp	r2, #0
 8011282:	dc39      	bgt.n	80112f8 <_dtoa_r+0x288>
 8011284:	f04f 0b01 	mov.w	fp, #1
 8011288:	46da      	mov	sl, fp
 801128a:	465a      	mov	r2, fp
 801128c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011290:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8011294:	2100      	movs	r1, #0
 8011296:	2004      	movs	r0, #4
 8011298:	f100 0614 	add.w	r6, r0, #20
 801129c:	4296      	cmp	r6, r2
 801129e:	d930      	bls.n	8011302 <_dtoa_r+0x292>
 80112a0:	6079      	str	r1, [r7, #4]
 80112a2:	4648      	mov	r0, r9
 80112a4:	9304      	str	r3, [sp, #16]
 80112a6:	f000 fd39 	bl	8011d1c <_Balloc>
 80112aa:	9b04      	ldr	r3, [sp, #16]
 80112ac:	4607      	mov	r7, r0
 80112ae:	2800      	cmp	r0, #0
 80112b0:	d146      	bne.n	8011340 <_dtoa_r+0x2d0>
 80112b2:	4b22      	ldr	r3, [pc, #136]	@ (801133c <_dtoa_r+0x2cc>)
 80112b4:	4602      	mov	r2, r0
 80112b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80112ba:	e6f2      	b.n	80110a2 <_dtoa_r+0x32>
 80112bc:	2201      	movs	r2, #1
 80112be:	e7dd      	b.n	801127c <_dtoa_r+0x20c>
 80112c0:	2200      	movs	r2, #0
 80112c2:	9208      	str	r2, [sp, #32]
 80112c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112c6:	eb08 0b02 	add.w	fp, r8, r2
 80112ca:	f10b 0a01 	add.w	sl, fp, #1
 80112ce:	4652      	mov	r2, sl
 80112d0:	2a01      	cmp	r2, #1
 80112d2:	bfb8      	it	lt
 80112d4:	2201      	movlt	r2, #1
 80112d6:	e7db      	b.n	8011290 <_dtoa_r+0x220>
 80112d8:	2201      	movs	r2, #1
 80112da:	e7f2      	b.n	80112c2 <_dtoa_r+0x252>
 80112dc:	2401      	movs	r4, #1
 80112de:	2200      	movs	r2, #0
 80112e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80112e4:	f04f 3bff 	mov.w	fp, #4294967295
 80112e8:	2100      	movs	r1, #0
 80112ea:	46da      	mov	sl, fp
 80112ec:	2212      	movs	r2, #18
 80112ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80112f0:	e7ce      	b.n	8011290 <_dtoa_r+0x220>
 80112f2:	2201      	movs	r2, #1
 80112f4:	9208      	str	r2, [sp, #32]
 80112f6:	e7f5      	b.n	80112e4 <_dtoa_r+0x274>
 80112f8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80112fc:	46da      	mov	sl, fp
 80112fe:	465a      	mov	r2, fp
 8011300:	e7c6      	b.n	8011290 <_dtoa_r+0x220>
 8011302:	3101      	adds	r1, #1
 8011304:	0040      	lsls	r0, r0, #1
 8011306:	e7c7      	b.n	8011298 <_dtoa_r+0x228>
 8011308:	636f4361 	.word	0x636f4361
 801130c:	3fd287a7 	.word	0x3fd287a7
 8011310:	8b60c8b3 	.word	0x8b60c8b3
 8011314:	3fc68a28 	.word	0x3fc68a28
 8011318:	509f79fb 	.word	0x509f79fb
 801131c:	3fd34413 	.word	0x3fd34413
 8011320:	0801443e 	.word	0x0801443e
 8011324:	08014455 	.word	0x08014455
 8011328:	7ff00000 	.word	0x7ff00000
 801132c:	0801443a 	.word	0x0801443a
 8011330:	08014409 	.word	0x08014409
 8011334:	08014408 	.word	0x08014408
 8011338:	08014550 	.word	0x08014550
 801133c:	080144ad 	.word	0x080144ad
 8011340:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8011344:	f1ba 0f0e 	cmp.w	sl, #14
 8011348:	6010      	str	r0, [r2, #0]
 801134a:	d86f      	bhi.n	801142c <_dtoa_r+0x3bc>
 801134c:	2c00      	cmp	r4, #0
 801134e:	d06d      	beq.n	801142c <_dtoa_r+0x3bc>
 8011350:	f1b8 0f00 	cmp.w	r8, #0
 8011354:	f340 80c2 	ble.w	80114dc <_dtoa_r+0x46c>
 8011358:	4aca      	ldr	r2, [pc, #808]	@ (8011684 <_dtoa_r+0x614>)
 801135a:	f008 010f 	and.w	r1, r8, #15
 801135e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011362:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8011366:	ed92 7b00 	vldr	d7, [r2]
 801136a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801136e:	f000 80a9 	beq.w	80114c4 <_dtoa_r+0x454>
 8011372:	4ac5      	ldr	r2, [pc, #788]	@ (8011688 <_dtoa_r+0x618>)
 8011374:	ed92 6b08 	vldr	d6, [r2, #32]
 8011378:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801137c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011380:	f001 010f 	and.w	r1, r1, #15
 8011384:	2203      	movs	r2, #3
 8011386:	48c0      	ldr	r0, [pc, #768]	@ (8011688 <_dtoa_r+0x618>)
 8011388:	2900      	cmp	r1, #0
 801138a:	f040 809d 	bne.w	80114c8 <_dtoa_r+0x458>
 801138e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011392:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011396:	ed8d 7b02 	vstr	d7, [sp, #8]
 801139a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801139c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113a0:	2900      	cmp	r1, #0
 80113a2:	f000 80c1 	beq.w	8011528 <_dtoa_r+0x4b8>
 80113a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80113aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80113ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b2:	f140 80b9 	bpl.w	8011528 <_dtoa_r+0x4b8>
 80113b6:	f1ba 0f00 	cmp.w	sl, #0
 80113ba:	f000 80b5 	beq.w	8011528 <_dtoa_r+0x4b8>
 80113be:	f1bb 0f00 	cmp.w	fp, #0
 80113c2:	dd31      	ble.n	8011428 <_dtoa_r+0x3b8>
 80113c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80113c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80113cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80113d0:	f108 31ff 	add.w	r1, r8, #4294967295
 80113d4:	9104      	str	r1, [sp, #16]
 80113d6:	3201      	adds	r2, #1
 80113d8:	465c      	mov	r4, fp
 80113da:	ed9d 6b02 	vldr	d6, [sp, #8]
 80113de:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80113e2:	ee07 2a90 	vmov	s15, r2
 80113e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80113ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 80113ee:	ee15 2a90 	vmov	r2, s11
 80113f2:	ec51 0b15 	vmov	r0, r1, d5
 80113f6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80113fa:	2c00      	cmp	r4, #0
 80113fc:	f040 8098 	bne.w	8011530 <_dtoa_r+0x4c0>
 8011400:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011404:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011408:	ec41 0b17 	vmov	d7, r0, r1
 801140c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011414:	f300 8261 	bgt.w	80118da <_dtoa_r+0x86a>
 8011418:	eeb1 7b47 	vneg.f64	d7, d7
 801141c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011424:	f100 80f5 	bmi.w	8011612 <_dtoa_r+0x5a2>
 8011428:	ed8d 8b02 	vstr	d8, [sp, #8]
 801142c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801142e:	2a00      	cmp	r2, #0
 8011430:	f2c0 812c 	blt.w	801168c <_dtoa_r+0x61c>
 8011434:	f1b8 0f0e 	cmp.w	r8, #14
 8011438:	f300 8128 	bgt.w	801168c <_dtoa_r+0x61c>
 801143c:	4b91      	ldr	r3, [pc, #580]	@ (8011684 <_dtoa_r+0x614>)
 801143e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011442:	ed93 6b00 	vldr	d6, [r3]
 8011446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011448:	2b00      	cmp	r3, #0
 801144a:	da03      	bge.n	8011454 <_dtoa_r+0x3e4>
 801144c:	f1ba 0f00 	cmp.w	sl, #0
 8011450:	f340 80d2 	ble.w	80115f8 <_dtoa_r+0x588>
 8011454:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011458:	ed9d 7b02 	vldr	d7, [sp, #8]
 801145c:	463e      	mov	r6, r7
 801145e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011462:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011466:	ee15 3a10 	vmov	r3, s10
 801146a:	3330      	adds	r3, #48	@ 0x30
 801146c:	f806 3b01 	strb.w	r3, [r6], #1
 8011470:	1bf3      	subs	r3, r6, r7
 8011472:	459a      	cmp	sl, r3
 8011474:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011478:	eea3 7b46 	vfms.f64	d7, d3, d6
 801147c:	f040 80f8 	bne.w	8011670 <_dtoa_r+0x600>
 8011480:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011484:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801148c:	f300 80dd 	bgt.w	801164a <_dtoa_r+0x5da>
 8011490:	eeb4 7b46 	vcmp.f64	d7, d6
 8011494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011498:	d104      	bne.n	80114a4 <_dtoa_r+0x434>
 801149a:	ee15 3a10 	vmov	r3, s10
 801149e:	07db      	lsls	r3, r3, #31
 80114a0:	f100 80d3 	bmi.w	801164a <_dtoa_r+0x5da>
 80114a4:	9901      	ldr	r1, [sp, #4]
 80114a6:	4648      	mov	r0, r9
 80114a8:	f000 fc78 	bl	8011d9c <_Bfree>
 80114ac:	2300      	movs	r3, #0
 80114ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80114b0:	7033      	strb	r3, [r6, #0]
 80114b2:	f108 0301 	add.w	r3, r8, #1
 80114b6:	6013      	str	r3, [r2, #0]
 80114b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f000 8304 	beq.w	8011ac8 <_dtoa_r+0xa58>
 80114c0:	601e      	str	r6, [r3, #0]
 80114c2:	e301      	b.n	8011ac8 <_dtoa_r+0xa58>
 80114c4:	2202      	movs	r2, #2
 80114c6:	e75e      	b.n	8011386 <_dtoa_r+0x316>
 80114c8:	07cc      	lsls	r4, r1, #31
 80114ca:	d504      	bpl.n	80114d6 <_dtoa_r+0x466>
 80114cc:	ed90 6b00 	vldr	d6, [r0]
 80114d0:	3201      	adds	r2, #1
 80114d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114d6:	1049      	asrs	r1, r1, #1
 80114d8:	3008      	adds	r0, #8
 80114da:	e755      	b.n	8011388 <_dtoa_r+0x318>
 80114dc:	d022      	beq.n	8011524 <_dtoa_r+0x4b4>
 80114de:	f1c8 0100 	rsb	r1, r8, #0
 80114e2:	4a68      	ldr	r2, [pc, #416]	@ (8011684 <_dtoa_r+0x614>)
 80114e4:	f001 000f 	and.w	r0, r1, #15
 80114e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80114ec:	ed92 7b00 	vldr	d7, [r2]
 80114f0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80114f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80114f8:	4863      	ldr	r0, [pc, #396]	@ (8011688 <_dtoa_r+0x618>)
 80114fa:	1109      	asrs	r1, r1, #4
 80114fc:	2400      	movs	r4, #0
 80114fe:	2202      	movs	r2, #2
 8011500:	b929      	cbnz	r1, 801150e <_dtoa_r+0x49e>
 8011502:	2c00      	cmp	r4, #0
 8011504:	f43f af49 	beq.w	801139a <_dtoa_r+0x32a>
 8011508:	ed8d 7b02 	vstr	d7, [sp, #8]
 801150c:	e745      	b.n	801139a <_dtoa_r+0x32a>
 801150e:	07ce      	lsls	r6, r1, #31
 8011510:	d505      	bpl.n	801151e <_dtoa_r+0x4ae>
 8011512:	ed90 6b00 	vldr	d6, [r0]
 8011516:	3201      	adds	r2, #1
 8011518:	2401      	movs	r4, #1
 801151a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801151e:	1049      	asrs	r1, r1, #1
 8011520:	3008      	adds	r0, #8
 8011522:	e7ed      	b.n	8011500 <_dtoa_r+0x490>
 8011524:	2202      	movs	r2, #2
 8011526:	e738      	b.n	801139a <_dtoa_r+0x32a>
 8011528:	f8cd 8010 	str.w	r8, [sp, #16]
 801152c:	4654      	mov	r4, sl
 801152e:	e754      	b.n	80113da <_dtoa_r+0x36a>
 8011530:	4a54      	ldr	r2, [pc, #336]	@ (8011684 <_dtoa_r+0x614>)
 8011532:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8011536:	ed12 4b02 	vldr	d4, [r2, #-8]
 801153a:	9a08      	ldr	r2, [sp, #32]
 801153c:	ec41 0b17 	vmov	d7, r0, r1
 8011540:	443c      	add	r4, r7
 8011542:	b34a      	cbz	r2, 8011598 <_dtoa_r+0x528>
 8011544:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8011548:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801154c:	463e      	mov	r6, r7
 801154e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011552:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011556:	ee35 7b47 	vsub.f64	d7, d5, d7
 801155a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801155e:	ee14 2a90 	vmov	r2, s9
 8011562:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011566:	3230      	adds	r2, #48	@ 0x30
 8011568:	ee36 6b45 	vsub.f64	d6, d6, d5
 801156c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011574:	f806 2b01 	strb.w	r2, [r6], #1
 8011578:	d438      	bmi.n	80115ec <_dtoa_r+0x57c>
 801157a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801157e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011586:	d462      	bmi.n	801164e <_dtoa_r+0x5de>
 8011588:	42a6      	cmp	r6, r4
 801158a:	f43f af4d 	beq.w	8011428 <_dtoa_r+0x3b8>
 801158e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011592:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011596:	e7e0      	b.n	801155a <_dtoa_r+0x4ea>
 8011598:	4621      	mov	r1, r4
 801159a:	463e      	mov	r6, r7
 801159c:	ee27 7b04 	vmul.f64	d7, d7, d4
 80115a0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80115a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80115a8:	ee14 2a90 	vmov	r2, s9
 80115ac:	3230      	adds	r2, #48	@ 0x30
 80115ae:	f806 2b01 	strb.w	r2, [r6], #1
 80115b2:	42a6      	cmp	r6, r4
 80115b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80115b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80115bc:	d119      	bne.n	80115f2 <_dtoa_r+0x582>
 80115be:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80115c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80115c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80115ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ce:	dc3e      	bgt.n	801164e <_dtoa_r+0x5de>
 80115d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80115d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80115d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115dc:	f57f af24 	bpl.w	8011428 <_dtoa_r+0x3b8>
 80115e0:	460e      	mov	r6, r1
 80115e2:	3901      	subs	r1, #1
 80115e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80115e8:	2b30      	cmp	r3, #48	@ 0x30
 80115ea:	d0f9      	beq.n	80115e0 <_dtoa_r+0x570>
 80115ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80115f0:	e758      	b.n	80114a4 <_dtoa_r+0x434>
 80115f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80115f6:	e7d5      	b.n	80115a4 <_dtoa_r+0x534>
 80115f8:	d10b      	bne.n	8011612 <_dtoa_r+0x5a2>
 80115fa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80115fe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011602:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011606:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801160e:	f2c0 8161 	blt.w	80118d4 <_dtoa_r+0x864>
 8011612:	2400      	movs	r4, #0
 8011614:	4625      	mov	r5, r4
 8011616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011618:	43db      	mvns	r3, r3
 801161a:	9304      	str	r3, [sp, #16]
 801161c:	463e      	mov	r6, r7
 801161e:	f04f 0800 	mov.w	r8, #0
 8011622:	4621      	mov	r1, r4
 8011624:	4648      	mov	r0, r9
 8011626:	f000 fbb9 	bl	8011d9c <_Bfree>
 801162a:	2d00      	cmp	r5, #0
 801162c:	d0de      	beq.n	80115ec <_dtoa_r+0x57c>
 801162e:	f1b8 0f00 	cmp.w	r8, #0
 8011632:	d005      	beq.n	8011640 <_dtoa_r+0x5d0>
 8011634:	45a8      	cmp	r8, r5
 8011636:	d003      	beq.n	8011640 <_dtoa_r+0x5d0>
 8011638:	4641      	mov	r1, r8
 801163a:	4648      	mov	r0, r9
 801163c:	f000 fbae 	bl	8011d9c <_Bfree>
 8011640:	4629      	mov	r1, r5
 8011642:	4648      	mov	r0, r9
 8011644:	f000 fbaa 	bl	8011d9c <_Bfree>
 8011648:	e7d0      	b.n	80115ec <_dtoa_r+0x57c>
 801164a:	f8cd 8010 	str.w	r8, [sp, #16]
 801164e:	4633      	mov	r3, r6
 8011650:	461e      	mov	r6, r3
 8011652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011656:	2a39      	cmp	r2, #57	@ 0x39
 8011658:	d106      	bne.n	8011668 <_dtoa_r+0x5f8>
 801165a:	429f      	cmp	r7, r3
 801165c:	d1f8      	bne.n	8011650 <_dtoa_r+0x5e0>
 801165e:	9a04      	ldr	r2, [sp, #16]
 8011660:	3201      	adds	r2, #1
 8011662:	9204      	str	r2, [sp, #16]
 8011664:	2230      	movs	r2, #48	@ 0x30
 8011666:	703a      	strb	r2, [r7, #0]
 8011668:	781a      	ldrb	r2, [r3, #0]
 801166a:	3201      	adds	r2, #1
 801166c:	701a      	strb	r2, [r3, #0]
 801166e:	e7bd      	b.n	80115ec <_dtoa_r+0x57c>
 8011670:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011674:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801167c:	f47f aeef 	bne.w	801145e <_dtoa_r+0x3ee>
 8011680:	e710      	b.n	80114a4 <_dtoa_r+0x434>
 8011682:	bf00      	nop
 8011684:	08014550 	.word	0x08014550
 8011688:	08014528 	.word	0x08014528
 801168c:	9908      	ldr	r1, [sp, #32]
 801168e:	2900      	cmp	r1, #0
 8011690:	f000 80e3 	beq.w	801185a <_dtoa_r+0x7ea>
 8011694:	9907      	ldr	r1, [sp, #28]
 8011696:	2901      	cmp	r1, #1
 8011698:	f300 80c8 	bgt.w	801182c <_dtoa_r+0x7bc>
 801169c:	2d00      	cmp	r5, #0
 801169e:	f000 80c1 	beq.w	8011824 <_dtoa_r+0x7b4>
 80116a2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80116a6:	9e05      	ldr	r6, [sp, #20]
 80116a8:	461c      	mov	r4, r3
 80116aa:	9304      	str	r3, [sp, #16]
 80116ac:	9b05      	ldr	r3, [sp, #20]
 80116ae:	4413      	add	r3, r2
 80116b0:	9305      	str	r3, [sp, #20]
 80116b2:	9b06      	ldr	r3, [sp, #24]
 80116b4:	2101      	movs	r1, #1
 80116b6:	4413      	add	r3, r2
 80116b8:	4648      	mov	r0, r9
 80116ba:	9306      	str	r3, [sp, #24]
 80116bc:	f000 fc6c 	bl	8011f98 <__i2b>
 80116c0:	9b04      	ldr	r3, [sp, #16]
 80116c2:	4605      	mov	r5, r0
 80116c4:	b166      	cbz	r6, 80116e0 <_dtoa_r+0x670>
 80116c6:	9a06      	ldr	r2, [sp, #24]
 80116c8:	2a00      	cmp	r2, #0
 80116ca:	dd09      	ble.n	80116e0 <_dtoa_r+0x670>
 80116cc:	42b2      	cmp	r2, r6
 80116ce:	9905      	ldr	r1, [sp, #20]
 80116d0:	bfa8      	it	ge
 80116d2:	4632      	movge	r2, r6
 80116d4:	1a89      	subs	r1, r1, r2
 80116d6:	9105      	str	r1, [sp, #20]
 80116d8:	9906      	ldr	r1, [sp, #24]
 80116da:	1ab6      	subs	r6, r6, r2
 80116dc:	1a8a      	subs	r2, r1, r2
 80116de:	9206      	str	r2, [sp, #24]
 80116e0:	b1fb      	cbz	r3, 8011722 <_dtoa_r+0x6b2>
 80116e2:	9a08      	ldr	r2, [sp, #32]
 80116e4:	2a00      	cmp	r2, #0
 80116e6:	f000 80bc 	beq.w	8011862 <_dtoa_r+0x7f2>
 80116ea:	b19c      	cbz	r4, 8011714 <_dtoa_r+0x6a4>
 80116ec:	4629      	mov	r1, r5
 80116ee:	4622      	mov	r2, r4
 80116f0:	4648      	mov	r0, r9
 80116f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80116f4:	f000 fd10 	bl	8012118 <__pow5mult>
 80116f8:	9a01      	ldr	r2, [sp, #4]
 80116fa:	4601      	mov	r1, r0
 80116fc:	4605      	mov	r5, r0
 80116fe:	4648      	mov	r0, r9
 8011700:	f000 fc60 	bl	8011fc4 <__multiply>
 8011704:	9901      	ldr	r1, [sp, #4]
 8011706:	9004      	str	r0, [sp, #16]
 8011708:	4648      	mov	r0, r9
 801170a:	f000 fb47 	bl	8011d9c <_Bfree>
 801170e:	9a04      	ldr	r2, [sp, #16]
 8011710:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011712:	9201      	str	r2, [sp, #4]
 8011714:	1b1a      	subs	r2, r3, r4
 8011716:	d004      	beq.n	8011722 <_dtoa_r+0x6b2>
 8011718:	9901      	ldr	r1, [sp, #4]
 801171a:	4648      	mov	r0, r9
 801171c:	f000 fcfc 	bl	8012118 <__pow5mult>
 8011720:	9001      	str	r0, [sp, #4]
 8011722:	2101      	movs	r1, #1
 8011724:	4648      	mov	r0, r9
 8011726:	f000 fc37 	bl	8011f98 <__i2b>
 801172a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801172c:	4604      	mov	r4, r0
 801172e:	2b00      	cmp	r3, #0
 8011730:	f000 81d0 	beq.w	8011ad4 <_dtoa_r+0xa64>
 8011734:	461a      	mov	r2, r3
 8011736:	4601      	mov	r1, r0
 8011738:	4648      	mov	r0, r9
 801173a:	f000 fced 	bl	8012118 <__pow5mult>
 801173e:	9b07      	ldr	r3, [sp, #28]
 8011740:	2b01      	cmp	r3, #1
 8011742:	4604      	mov	r4, r0
 8011744:	f300 8095 	bgt.w	8011872 <_dtoa_r+0x802>
 8011748:	9b02      	ldr	r3, [sp, #8]
 801174a:	2b00      	cmp	r3, #0
 801174c:	f040 808b 	bne.w	8011866 <_dtoa_r+0x7f6>
 8011750:	9b03      	ldr	r3, [sp, #12]
 8011752:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011756:	2a00      	cmp	r2, #0
 8011758:	f040 8087 	bne.w	801186a <_dtoa_r+0x7fa>
 801175c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011760:	0d12      	lsrs	r2, r2, #20
 8011762:	0512      	lsls	r2, r2, #20
 8011764:	2a00      	cmp	r2, #0
 8011766:	f000 8082 	beq.w	801186e <_dtoa_r+0x7fe>
 801176a:	9b05      	ldr	r3, [sp, #20]
 801176c:	3301      	adds	r3, #1
 801176e:	9305      	str	r3, [sp, #20]
 8011770:	9b06      	ldr	r3, [sp, #24]
 8011772:	3301      	adds	r3, #1
 8011774:	9306      	str	r3, [sp, #24]
 8011776:	2301      	movs	r3, #1
 8011778:	930b      	str	r3, [sp, #44]	@ 0x2c
 801177a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801177c:	2b00      	cmp	r3, #0
 801177e:	f000 81af 	beq.w	8011ae0 <_dtoa_r+0xa70>
 8011782:	6922      	ldr	r2, [r4, #16]
 8011784:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011788:	6910      	ldr	r0, [r2, #16]
 801178a:	f000 fbb9 	bl	8011f00 <__hi0bits>
 801178e:	f1c0 0020 	rsb	r0, r0, #32
 8011792:	9b06      	ldr	r3, [sp, #24]
 8011794:	4418      	add	r0, r3
 8011796:	f010 001f 	ands.w	r0, r0, #31
 801179a:	d076      	beq.n	801188a <_dtoa_r+0x81a>
 801179c:	f1c0 0220 	rsb	r2, r0, #32
 80117a0:	2a04      	cmp	r2, #4
 80117a2:	dd69      	ble.n	8011878 <_dtoa_r+0x808>
 80117a4:	9b05      	ldr	r3, [sp, #20]
 80117a6:	f1c0 001c 	rsb	r0, r0, #28
 80117aa:	4403      	add	r3, r0
 80117ac:	9305      	str	r3, [sp, #20]
 80117ae:	9b06      	ldr	r3, [sp, #24]
 80117b0:	4406      	add	r6, r0
 80117b2:	4403      	add	r3, r0
 80117b4:	9306      	str	r3, [sp, #24]
 80117b6:	9b05      	ldr	r3, [sp, #20]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	dd05      	ble.n	80117c8 <_dtoa_r+0x758>
 80117bc:	9901      	ldr	r1, [sp, #4]
 80117be:	461a      	mov	r2, r3
 80117c0:	4648      	mov	r0, r9
 80117c2:	f000 fd03 	bl	80121cc <__lshift>
 80117c6:	9001      	str	r0, [sp, #4]
 80117c8:	9b06      	ldr	r3, [sp, #24]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	dd05      	ble.n	80117da <_dtoa_r+0x76a>
 80117ce:	4621      	mov	r1, r4
 80117d0:	461a      	mov	r2, r3
 80117d2:	4648      	mov	r0, r9
 80117d4:	f000 fcfa 	bl	80121cc <__lshift>
 80117d8:	4604      	mov	r4, r0
 80117da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d056      	beq.n	801188e <_dtoa_r+0x81e>
 80117e0:	9801      	ldr	r0, [sp, #4]
 80117e2:	4621      	mov	r1, r4
 80117e4:	f000 fd5e 	bl	80122a4 <__mcmp>
 80117e8:	2800      	cmp	r0, #0
 80117ea:	da50      	bge.n	801188e <_dtoa_r+0x81e>
 80117ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80117f0:	9304      	str	r3, [sp, #16]
 80117f2:	9901      	ldr	r1, [sp, #4]
 80117f4:	2300      	movs	r3, #0
 80117f6:	220a      	movs	r2, #10
 80117f8:	4648      	mov	r0, r9
 80117fa:	f000 faf1 	bl	8011de0 <__multadd>
 80117fe:	9b08      	ldr	r3, [sp, #32]
 8011800:	9001      	str	r0, [sp, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	f000 816e 	beq.w	8011ae4 <_dtoa_r+0xa74>
 8011808:	4629      	mov	r1, r5
 801180a:	2300      	movs	r3, #0
 801180c:	220a      	movs	r2, #10
 801180e:	4648      	mov	r0, r9
 8011810:	f000 fae6 	bl	8011de0 <__multadd>
 8011814:	f1bb 0f00 	cmp.w	fp, #0
 8011818:	4605      	mov	r5, r0
 801181a:	dc64      	bgt.n	80118e6 <_dtoa_r+0x876>
 801181c:	9b07      	ldr	r3, [sp, #28]
 801181e:	2b02      	cmp	r3, #2
 8011820:	dc3e      	bgt.n	80118a0 <_dtoa_r+0x830>
 8011822:	e060      	b.n	80118e6 <_dtoa_r+0x876>
 8011824:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011826:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801182a:	e73c      	b.n	80116a6 <_dtoa_r+0x636>
 801182c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8011830:	42a3      	cmp	r3, r4
 8011832:	bfbf      	itttt	lt
 8011834:	1ae2      	sublt	r2, r4, r3
 8011836:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011838:	189b      	addlt	r3, r3, r2
 801183a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801183c:	bfae      	itee	ge
 801183e:	1b1c      	subge	r4, r3, r4
 8011840:	4623      	movlt	r3, r4
 8011842:	2400      	movlt	r4, #0
 8011844:	f1ba 0f00 	cmp.w	sl, #0
 8011848:	bfb5      	itete	lt
 801184a:	9a05      	ldrlt	r2, [sp, #20]
 801184c:	9e05      	ldrge	r6, [sp, #20]
 801184e:	eba2 060a 	sublt.w	r6, r2, sl
 8011852:	4652      	movge	r2, sl
 8011854:	bfb8      	it	lt
 8011856:	2200      	movlt	r2, #0
 8011858:	e727      	b.n	80116aa <_dtoa_r+0x63a>
 801185a:	9e05      	ldr	r6, [sp, #20]
 801185c:	9d08      	ldr	r5, [sp, #32]
 801185e:	461c      	mov	r4, r3
 8011860:	e730      	b.n	80116c4 <_dtoa_r+0x654>
 8011862:	461a      	mov	r2, r3
 8011864:	e758      	b.n	8011718 <_dtoa_r+0x6a8>
 8011866:	2300      	movs	r3, #0
 8011868:	e786      	b.n	8011778 <_dtoa_r+0x708>
 801186a:	9b02      	ldr	r3, [sp, #8]
 801186c:	e784      	b.n	8011778 <_dtoa_r+0x708>
 801186e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011870:	e783      	b.n	801177a <_dtoa_r+0x70a>
 8011872:	2300      	movs	r3, #0
 8011874:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011876:	e784      	b.n	8011782 <_dtoa_r+0x712>
 8011878:	d09d      	beq.n	80117b6 <_dtoa_r+0x746>
 801187a:	9b05      	ldr	r3, [sp, #20]
 801187c:	321c      	adds	r2, #28
 801187e:	4413      	add	r3, r2
 8011880:	9305      	str	r3, [sp, #20]
 8011882:	9b06      	ldr	r3, [sp, #24]
 8011884:	4416      	add	r6, r2
 8011886:	4413      	add	r3, r2
 8011888:	e794      	b.n	80117b4 <_dtoa_r+0x744>
 801188a:	4602      	mov	r2, r0
 801188c:	e7f5      	b.n	801187a <_dtoa_r+0x80a>
 801188e:	f1ba 0f00 	cmp.w	sl, #0
 8011892:	f8cd 8010 	str.w	r8, [sp, #16]
 8011896:	46d3      	mov	fp, sl
 8011898:	dc21      	bgt.n	80118de <_dtoa_r+0x86e>
 801189a:	9b07      	ldr	r3, [sp, #28]
 801189c:	2b02      	cmp	r3, #2
 801189e:	dd1e      	ble.n	80118de <_dtoa_r+0x86e>
 80118a0:	f1bb 0f00 	cmp.w	fp, #0
 80118a4:	f47f aeb7 	bne.w	8011616 <_dtoa_r+0x5a6>
 80118a8:	4621      	mov	r1, r4
 80118aa:	465b      	mov	r3, fp
 80118ac:	2205      	movs	r2, #5
 80118ae:	4648      	mov	r0, r9
 80118b0:	f000 fa96 	bl	8011de0 <__multadd>
 80118b4:	4601      	mov	r1, r0
 80118b6:	4604      	mov	r4, r0
 80118b8:	9801      	ldr	r0, [sp, #4]
 80118ba:	f000 fcf3 	bl	80122a4 <__mcmp>
 80118be:	2800      	cmp	r0, #0
 80118c0:	f77f aea9 	ble.w	8011616 <_dtoa_r+0x5a6>
 80118c4:	463e      	mov	r6, r7
 80118c6:	2331      	movs	r3, #49	@ 0x31
 80118c8:	f806 3b01 	strb.w	r3, [r6], #1
 80118cc:	9b04      	ldr	r3, [sp, #16]
 80118ce:	3301      	adds	r3, #1
 80118d0:	9304      	str	r3, [sp, #16]
 80118d2:	e6a4      	b.n	801161e <_dtoa_r+0x5ae>
 80118d4:	f8cd 8010 	str.w	r8, [sp, #16]
 80118d8:	4654      	mov	r4, sl
 80118da:	4625      	mov	r5, r4
 80118dc:	e7f2      	b.n	80118c4 <_dtoa_r+0x854>
 80118de:	9b08      	ldr	r3, [sp, #32]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	f000 8103 	beq.w	8011aec <_dtoa_r+0xa7c>
 80118e6:	2e00      	cmp	r6, #0
 80118e8:	dd05      	ble.n	80118f6 <_dtoa_r+0x886>
 80118ea:	4629      	mov	r1, r5
 80118ec:	4632      	mov	r2, r6
 80118ee:	4648      	mov	r0, r9
 80118f0:	f000 fc6c 	bl	80121cc <__lshift>
 80118f4:	4605      	mov	r5, r0
 80118f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d058      	beq.n	80119ae <_dtoa_r+0x93e>
 80118fc:	6869      	ldr	r1, [r5, #4]
 80118fe:	4648      	mov	r0, r9
 8011900:	f000 fa0c 	bl	8011d1c <_Balloc>
 8011904:	4606      	mov	r6, r0
 8011906:	b928      	cbnz	r0, 8011914 <_dtoa_r+0x8a4>
 8011908:	4b82      	ldr	r3, [pc, #520]	@ (8011b14 <_dtoa_r+0xaa4>)
 801190a:	4602      	mov	r2, r0
 801190c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011910:	f7ff bbc7 	b.w	80110a2 <_dtoa_r+0x32>
 8011914:	692a      	ldr	r2, [r5, #16]
 8011916:	3202      	adds	r2, #2
 8011918:	0092      	lsls	r2, r2, #2
 801191a:	f105 010c 	add.w	r1, r5, #12
 801191e:	300c      	adds	r0, #12
 8011920:	f7ff fb09 	bl	8010f36 <memcpy>
 8011924:	2201      	movs	r2, #1
 8011926:	4631      	mov	r1, r6
 8011928:	4648      	mov	r0, r9
 801192a:	f000 fc4f 	bl	80121cc <__lshift>
 801192e:	1c7b      	adds	r3, r7, #1
 8011930:	9305      	str	r3, [sp, #20]
 8011932:	eb07 030b 	add.w	r3, r7, fp
 8011936:	9309      	str	r3, [sp, #36]	@ 0x24
 8011938:	9b02      	ldr	r3, [sp, #8]
 801193a:	f003 0301 	and.w	r3, r3, #1
 801193e:	46a8      	mov	r8, r5
 8011940:	9308      	str	r3, [sp, #32]
 8011942:	4605      	mov	r5, r0
 8011944:	9b05      	ldr	r3, [sp, #20]
 8011946:	9801      	ldr	r0, [sp, #4]
 8011948:	4621      	mov	r1, r4
 801194a:	f103 3bff 	add.w	fp, r3, #4294967295
 801194e:	f7ff fb07 	bl	8010f60 <quorem>
 8011952:	4641      	mov	r1, r8
 8011954:	9002      	str	r0, [sp, #8]
 8011956:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801195a:	9801      	ldr	r0, [sp, #4]
 801195c:	f000 fca2 	bl	80122a4 <__mcmp>
 8011960:	462a      	mov	r2, r5
 8011962:	9006      	str	r0, [sp, #24]
 8011964:	4621      	mov	r1, r4
 8011966:	4648      	mov	r0, r9
 8011968:	f000 fcb8 	bl	80122dc <__mdiff>
 801196c:	68c2      	ldr	r2, [r0, #12]
 801196e:	4606      	mov	r6, r0
 8011970:	b9fa      	cbnz	r2, 80119b2 <_dtoa_r+0x942>
 8011972:	4601      	mov	r1, r0
 8011974:	9801      	ldr	r0, [sp, #4]
 8011976:	f000 fc95 	bl	80122a4 <__mcmp>
 801197a:	4602      	mov	r2, r0
 801197c:	4631      	mov	r1, r6
 801197e:	4648      	mov	r0, r9
 8011980:	920a      	str	r2, [sp, #40]	@ 0x28
 8011982:	f000 fa0b 	bl	8011d9c <_Bfree>
 8011986:	9b07      	ldr	r3, [sp, #28]
 8011988:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801198a:	9e05      	ldr	r6, [sp, #20]
 801198c:	ea43 0102 	orr.w	r1, r3, r2
 8011990:	9b08      	ldr	r3, [sp, #32]
 8011992:	4319      	orrs	r1, r3
 8011994:	d10f      	bne.n	80119b6 <_dtoa_r+0x946>
 8011996:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801199a:	d028      	beq.n	80119ee <_dtoa_r+0x97e>
 801199c:	9b06      	ldr	r3, [sp, #24]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	dd02      	ble.n	80119a8 <_dtoa_r+0x938>
 80119a2:	9b02      	ldr	r3, [sp, #8]
 80119a4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80119a8:	f88b a000 	strb.w	sl, [fp]
 80119ac:	e639      	b.n	8011622 <_dtoa_r+0x5b2>
 80119ae:	4628      	mov	r0, r5
 80119b0:	e7bd      	b.n	801192e <_dtoa_r+0x8be>
 80119b2:	2201      	movs	r2, #1
 80119b4:	e7e2      	b.n	801197c <_dtoa_r+0x90c>
 80119b6:	9b06      	ldr	r3, [sp, #24]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	db04      	blt.n	80119c6 <_dtoa_r+0x956>
 80119bc:	9907      	ldr	r1, [sp, #28]
 80119be:	430b      	orrs	r3, r1
 80119c0:	9908      	ldr	r1, [sp, #32]
 80119c2:	430b      	orrs	r3, r1
 80119c4:	d120      	bne.n	8011a08 <_dtoa_r+0x998>
 80119c6:	2a00      	cmp	r2, #0
 80119c8:	ddee      	ble.n	80119a8 <_dtoa_r+0x938>
 80119ca:	9901      	ldr	r1, [sp, #4]
 80119cc:	2201      	movs	r2, #1
 80119ce:	4648      	mov	r0, r9
 80119d0:	f000 fbfc 	bl	80121cc <__lshift>
 80119d4:	4621      	mov	r1, r4
 80119d6:	9001      	str	r0, [sp, #4]
 80119d8:	f000 fc64 	bl	80122a4 <__mcmp>
 80119dc:	2800      	cmp	r0, #0
 80119de:	dc03      	bgt.n	80119e8 <_dtoa_r+0x978>
 80119e0:	d1e2      	bne.n	80119a8 <_dtoa_r+0x938>
 80119e2:	f01a 0f01 	tst.w	sl, #1
 80119e6:	d0df      	beq.n	80119a8 <_dtoa_r+0x938>
 80119e8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80119ec:	d1d9      	bne.n	80119a2 <_dtoa_r+0x932>
 80119ee:	2339      	movs	r3, #57	@ 0x39
 80119f0:	f88b 3000 	strb.w	r3, [fp]
 80119f4:	4633      	mov	r3, r6
 80119f6:	461e      	mov	r6, r3
 80119f8:	3b01      	subs	r3, #1
 80119fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80119fe:	2a39      	cmp	r2, #57	@ 0x39
 8011a00:	d053      	beq.n	8011aaa <_dtoa_r+0xa3a>
 8011a02:	3201      	adds	r2, #1
 8011a04:	701a      	strb	r2, [r3, #0]
 8011a06:	e60c      	b.n	8011622 <_dtoa_r+0x5b2>
 8011a08:	2a00      	cmp	r2, #0
 8011a0a:	dd07      	ble.n	8011a1c <_dtoa_r+0x9ac>
 8011a0c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011a10:	d0ed      	beq.n	80119ee <_dtoa_r+0x97e>
 8011a12:	f10a 0301 	add.w	r3, sl, #1
 8011a16:	f88b 3000 	strb.w	r3, [fp]
 8011a1a:	e602      	b.n	8011622 <_dtoa_r+0x5b2>
 8011a1c:	9b05      	ldr	r3, [sp, #20]
 8011a1e:	9a05      	ldr	r2, [sp, #20]
 8011a20:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a26:	4293      	cmp	r3, r2
 8011a28:	d029      	beq.n	8011a7e <_dtoa_r+0xa0e>
 8011a2a:	9901      	ldr	r1, [sp, #4]
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	220a      	movs	r2, #10
 8011a30:	4648      	mov	r0, r9
 8011a32:	f000 f9d5 	bl	8011de0 <__multadd>
 8011a36:	45a8      	cmp	r8, r5
 8011a38:	9001      	str	r0, [sp, #4]
 8011a3a:	f04f 0300 	mov.w	r3, #0
 8011a3e:	f04f 020a 	mov.w	r2, #10
 8011a42:	4641      	mov	r1, r8
 8011a44:	4648      	mov	r0, r9
 8011a46:	d107      	bne.n	8011a58 <_dtoa_r+0x9e8>
 8011a48:	f000 f9ca 	bl	8011de0 <__multadd>
 8011a4c:	4680      	mov	r8, r0
 8011a4e:	4605      	mov	r5, r0
 8011a50:	9b05      	ldr	r3, [sp, #20]
 8011a52:	3301      	adds	r3, #1
 8011a54:	9305      	str	r3, [sp, #20]
 8011a56:	e775      	b.n	8011944 <_dtoa_r+0x8d4>
 8011a58:	f000 f9c2 	bl	8011de0 <__multadd>
 8011a5c:	4629      	mov	r1, r5
 8011a5e:	4680      	mov	r8, r0
 8011a60:	2300      	movs	r3, #0
 8011a62:	220a      	movs	r2, #10
 8011a64:	4648      	mov	r0, r9
 8011a66:	f000 f9bb 	bl	8011de0 <__multadd>
 8011a6a:	4605      	mov	r5, r0
 8011a6c:	e7f0      	b.n	8011a50 <_dtoa_r+0x9e0>
 8011a6e:	f1bb 0f00 	cmp.w	fp, #0
 8011a72:	bfcc      	ite	gt
 8011a74:	465e      	movgt	r6, fp
 8011a76:	2601      	movle	r6, #1
 8011a78:	443e      	add	r6, r7
 8011a7a:	f04f 0800 	mov.w	r8, #0
 8011a7e:	9901      	ldr	r1, [sp, #4]
 8011a80:	2201      	movs	r2, #1
 8011a82:	4648      	mov	r0, r9
 8011a84:	f000 fba2 	bl	80121cc <__lshift>
 8011a88:	4621      	mov	r1, r4
 8011a8a:	9001      	str	r0, [sp, #4]
 8011a8c:	f000 fc0a 	bl	80122a4 <__mcmp>
 8011a90:	2800      	cmp	r0, #0
 8011a92:	dcaf      	bgt.n	80119f4 <_dtoa_r+0x984>
 8011a94:	d102      	bne.n	8011a9c <_dtoa_r+0xa2c>
 8011a96:	f01a 0f01 	tst.w	sl, #1
 8011a9a:	d1ab      	bne.n	80119f4 <_dtoa_r+0x984>
 8011a9c:	4633      	mov	r3, r6
 8011a9e:	461e      	mov	r6, r3
 8011aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011aa4:	2a30      	cmp	r2, #48	@ 0x30
 8011aa6:	d0fa      	beq.n	8011a9e <_dtoa_r+0xa2e>
 8011aa8:	e5bb      	b.n	8011622 <_dtoa_r+0x5b2>
 8011aaa:	429f      	cmp	r7, r3
 8011aac:	d1a3      	bne.n	80119f6 <_dtoa_r+0x986>
 8011aae:	9b04      	ldr	r3, [sp, #16]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	9304      	str	r3, [sp, #16]
 8011ab4:	2331      	movs	r3, #49	@ 0x31
 8011ab6:	703b      	strb	r3, [r7, #0]
 8011ab8:	e5b3      	b.n	8011622 <_dtoa_r+0x5b2>
 8011aba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011abc:	4f16      	ldr	r7, [pc, #88]	@ (8011b18 <_dtoa_r+0xaa8>)
 8011abe:	b11b      	cbz	r3, 8011ac8 <_dtoa_r+0xa58>
 8011ac0:	f107 0308 	add.w	r3, r7, #8
 8011ac4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011ac6:	6013      	str	r3, [r2, #0]
 8011ac8:	4638      	mov	r0, r7
 8011aca:	b011      	add	sp, #68	@ 0x44
 8011acc:	ecbd 8b02 	vpop	{d8}
 8011ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad4:	9b07      	ldr	r3, [sp, #28]
 8011ad6:	2b01      	cmp	r3, #1
 8011ad8:	f77f ae36 	ble.w	8011748 <_dtoa_r+0x6d8>
 8011adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ade:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ae0:	2001      	movs	r0, #1
 8011ae2:	e656      	b.n	8011792 <_dtoa_r+0x722>
 8011ae4:	f1bb 0f00 	cmp.w	fp, #0
 8011ae8:	f77f aed7 	ble.w	801189a <_dtoa_r+0x82a>
 8011aec:	463e      	mov	r6, r7
 8011aee:	9801      	ldr	r0, [sp, #4]
 8011af0:	4621      	mov	r1, r4
 8011af2:	f7ff fa35 	bl	8010f60 <quorem>
 8011af6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011afa:	f806 ab01 	strb.w	sl, [r6], #1
 8011afe:	1bf2      	subs	r2, r6, r7
 8011b00:	4593      	cmp	fp, r2
 8011b02:	ddb4      	ble.n	8011a6e <_dtoa_r+0x9fe>
 8011b04:	9901      	ldr	r1, [sp, #4]
 8011b06:	2300      	movs	r3, #0
 8011b08:	220a      	movs	r2, #10
 8011b0a:	4648      	mov	r0, r9
 8011b0c:	f000 f968 	bl	8011de0 <__multadd>
 8011b10:	9001      	str	r0, [sp, #4]
 8011b12:	e7ec      	b.n	8011aee <_dtoa_r+0xa7e>
 8011b14:	080144ad 	.word	0x080144ad
 8011b18:	08014431 	.word	0x08014431

08011b1c <_free_r>:
 8011b1c:	b538      	push	{r3, r4, r5, lr}
 8011b1e:	4605      	mov	r5, r0
 8011b20:	2900      	cmp	r1, #0
 8011b22:	d041      	beq.n	8011ba8 <_free_r+0x8c>
 8011b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b28:	1f0c      	subs	r4, r1, #4
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	bfb8      	it	lt
 8011b2e:	18e4      	addlt	r4, r4, r3
 8011b30:	f000 f8e8 	bl	8011d04 <__malloc_lock>
 8011b34:	4a1d      	ldr	r2, [pc, #116]	@ (8011bac <_free_r+0x90>)
 8011b36:	6813      	ldr	r3, [r2, #0]
 8011b38:	b933      	cbnz	r3, 8011b48 <_free_r+0x2c>
 8011b3a:	6063      	str	r3, [r4, #4]
 8011b3c:	6014      	str	r4, [r2, #0]
 8011b3e:	4628      	mov	r0, r5
 8011b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b44:	f000 b8e4 	b.w	8011d10 <__malloc_unlock>
 8011b48:	42a3      	cmp	r3, r4
 8011b4a:	d908      	bls.n	8011b5e <_free_r+0x42>
 8011b4c:	6820      	ldr	r0, [r4, #0]
 8011b4e:	1821      	adds	r1, r4, r0
 8011b50:	428b      	cmp	r3, r1
 8011b52:	bf01      	itttt	eq
 8011b54:	6819      	ldreq	r1, [r3, #0]
 8011b56:	685b      	ldreq	r3, [r3, #4]
 8011b58:	1809      	addeq	r1, r1, r0
 8011b5a:	6021      	streq	r1, [r4, #0]
 8011b5c:	e7ed      	b.n	8011b3a <_free_r+0x1e>
 8011b5e:	461a      	mov	r2, r3
 8011b60:	685b      	ldr	r3, [r3, #4]
 8011b62:	b10b      	cbz	r3, 8011b68 <_free_r+0x4c>
 8011b64:	42a3      	cmp	r3, r4
 8011b66:	d9fa      	bls.n	8011b5e <_free_r+0x42>
 8011b68:	6811      	ldr	r1, [r2, #0]
 8011b6a:	1850      	adds	r0, r2, r1
 8011b6c:	42a0      	cmp	r0, r4
 8011b6e:	d10b      	bne.n	8011b88 <_free_r+0x6c>
 8011b70:	6820      	ldr	r0, [r4, #0]
 8011b72:	4401      	add	r1, r0
 8011b74:	1850      	adds	r0, r2, r1
 8011b76:	4283      	cmp	r3, r0
 8011b78:	6011      	str	r1, [r2, #0]
 8011b7a:	d1e0      	bne.n	8011b3e <_free_r+0x22>
 8011b7c:	6818      	ldr	r0, [r3, #0]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	6053      	str	r3, [r2, #4]
 8011b82:	4408      	add	r0, r1
 8011b84:	6010      	str	r0, [r2, #0]
 8011b86:	e7da      	b.n	8011b3e <_free_r+0x22>
 8011b88:	d902      	bls.n	8011b90 <_free_r+0x74>
 8011b8a:	230c      	movs	r3, #12
 8011b8c:	602b      	str	r3, [r5, #0]
 8011b8e:	e7d6      	b.n	8011b3e <_free_r+0x22>
 8011b90:	6820      	ldr	r0, [r4, #0]
 8011b92:	1821      	adds	r1, r4, r0
 8011b94:	428b      	cmp	r3, r1
 8011b96:	bf04      	itt	eq
 8011b98:	6819      	ldreq	r1, [r3, #0]
 8011b9a:	685b      	ldreq	r3, [r3, #4]
 8011b9c:	6063      	str	r3, [r4, #4]
 8011b9e:	bf04      	itt	eq
 8011ba0:	1809      	addeq	r1, r1, r0
 8011ba2:	6021      	streq	r1, [r4, #0]
 8011ba4:	6054      	str	r4, [r2, #4]
 8011ba6:	e7ca      	b.n	8011b3e <_free_r+0x22>
 8011ba8:	bd38      	pop	{r3, r4, r5, pc}
 8011baa:	bf00      	nop
 8011bac:	24000d20 	.word	0x24000d20

08011bb0 <malloc>:
 8011bb0:	4b02      	ldr	r3, [pc, #8]	@ (8011bbc <malloc+0xc>)
 8011bb2:	4601      	mov	r1, r0
 8011bb4:	6818      	ldr	r0, [r3, #0]
 8011bb6:	f000 b825 	b.w	8011c04 <_malloc_r>
 8011bba:	bf00      	nop
 8011bbc:	2400001c 	.word	0x2400001c

08011bc0 <sbrk_aligned>:
 8011bc0:	b570      	push	{r4, r5, r6, lr}
 8011bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8011c00 <sbrk_aligned+0x40>)
 8011bc4:	460c      	mov	r4, r1
 8011bc6:	6831      	ldr	r1, [r6, #0]
 8011bc8:	4605      	mov	r5, r0
 8011bca:	b911      	cbnz	r1, 8011bd2 <sbrk_aligned+0x12>
 8011bcc:	f001 ff7e 	bl	8013acc <_sbrk_r>
 8011bd0:	6030      	str	r0, [r6, #0]
 8011bd2:	4621      	mov	r1, r4
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	f001 ff79 	bl	8013acc <_sbrk_r>
 8011bda:	1c43      	adds	r3, r0, #1
 8011bdc:	d103      	bne.n	8011be6 <sbrk_aligned+0x26>
 8011bde:	f04f 34ff 	mov.w	r4, #4294967295
 8011be2:	4620      	mov	r0, r4
 8011be4:	bd70      	pop	{r4, r5, r6, pc}
 8011be6:	1cc4      	adds	r4, r0, #3
 8011be8:	f024 0403 	bic.w	r4, r4, #3
 8011bec:	42a0      	cmp	r0, r4
 8011bee:	d0f8      	beq.n	8011be2 <sbrk_aligned+0x22>
 8011bf0:	1a21      	subs	r1, r4, r0
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	f001 ff6a 	bl	8013acc <_sbrk_r>
 8011bf8:	3001      	adds	r0, #1
 8011bfa:	d1f2      	bne.n	8011be2 <sbrk_aligned+0x22>
 8011bfc:	e7ef      	b.n	8011bde <sbrk_aligned+0x1e>
 8011bfe:	bf00      	nop
 8011c00:	24000d1c 	.word	0x24000d1c

08011c04 <_malloc_r>:
 8011c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c08:	1ccd      	adds	r5, r1, #3
 8011c0a:	f025 0503 	bic.w	r5, r5, #3
 8011c0e:	3508      	adds	r5, #8
 8011c10:	2d0c      	cmp	r5, #12
 8011c12:	bf38      	it	cc
 8011c14:	250c      	movcc	r5, #12
 8011c16:	2d00      	cmp	r5, #0
 8011c18:	4606      	mov	r6, r0
 8011c1a:	db01      	blt.n	8011c20 <_malloc_r+0x1c>
 8011c1c:	42a9      	cmp	r1, r5
 8011c1e:	d904      	bls.n	8011c2a <_malloc_r+0x26>
 8011c20:	230c      	movs	r3, #12
 8011c22:	6033      	str	r3, [r6, #0]
 8011c24:	2000      	movs	r0, #0
 8011c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011d00 <_malloc_r+0xfc>
 8011c2e:	f000 f869 	bl	8011d04 <__malloc_lock>
 8011c32:	f8d8 3000 	ldr.w	r3, [r8]
 8011c36:	461c      	mov	r4, r3
 8011c38:	bb44      	cbnz	r4, 8011c8c <_malloc_r+0x88>
 8011c3a:	4629      	mov	r1, r5
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	f7ff ffbf 	bl	8011bc0 <sbrk_aligned>
 8011c42:	1c43      	adds	r3, r0, #1
 8011c44:	4604      	mov	r4, r0
 8011c46:	d158      	bne.n	8011cfa <_malloc_r+0xf6>
 8011c48:	f8d8 4000 	ldr.w	r4, [r8]
 8011c4c:	4627      	mov	r7, r4
 8011c4e:	2f00      	cmp	r7, #0
 8011c50:	d143      	bne.n	8011cda <_malloc_r+0xd6>
 8011c52:	2c00      	cmp	r4, #0
 8011c54:	d04b      	beq.n	8011cee <_malloc_r+0xea>
 8011c56:	6823      	ldr	r3, [r4, #0]
 8011c58:	4639      	mov	r1, r7
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	eb04 0903 	add.w	r9, r4, r3
 8011c60:	f001 ff34 	bl	8013acc <_sbrk_r>
 8011c64:	4581      	cmp	r9, r0
 8011c66:	d142      	bne.n	8011cee <_malloc_r+0xea>
 8011c68:	6821      	ldr	r1, [r4, #0]
 8011c6a:	1a6d      	subs	r5, r5, r1
 8011c6c:	4629      	mov	r1, r5
 8011c6e:	4630      	mov	r0, r6
 8011c70:	f7ff ffa6 	bl	8011bc0 <sbrk_aligned>
 8011c74:	3001      	adds	r0, #1
 8011c76:	d03a      	beq.n	8011cee <_malloc_r+0xea>
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	442b      	add	r3, r5
 8011c7c:	6023      	str	r3, [r4, #0]
 8011c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8011c82:	685a      	ldr	r2, [r3, #4]
 8011c84:	bb62      	cbnz	r2, 8011ce0 <_malloc_r+0xdc>
 8011c86:	f8c8 7000 	str.w	r7, [r8]
 8011c8a:	e00f      	b.n	8011cac <_malloc_r+0xa8>
 8011c8c:	6822      	ldr	r2, [r4, #0]
 8011c8e:	1b52      	subs	r2, r2, r5
 8011c90:	d420      	bmi.n	8011cd4 <_malloc_r+0xd0>
 8011c92:	2a0b      	cmp	r2, #11
 8011c94:	d917      	bls.n	8011cc6 <_malloc_r+0xc2>
 8011c96:	1961      	adds	r1, r4, r5
 8011c98:	42a3      	cmp	r3, r4
 8011c9a:	6025      	str	r5, [r4, #0]
 8011c9c:	bf18      	it	ne
 8011c9e:	6059      	strne	r1, [r3, #4]
 8011ca0:	6863      	ldr	r3, [r4, #4]
 8011ca2:	bf08      	it	eq
 8011ca4:	f8c8 1000 	streq.w	r1, [r8]
 8011ca8:	5162      	str	r2, [r4, r5]
 8011caa:	604b      	str	r3, [r1, #4]
 8011cac:	4630      	mov	r0, r6
 8011cae:	f000 f82f 	bl	8011d10 <__malloc_unlock>
 8011cb2:	f104 000b 	add.w	r0, r4, #11
 8011cb6:	1d23      	adds	r3, r4, #4
 8011cb8:	f020 0007 	bic.w	r0, r0, #7
 8011cbc:	1ac2      	subs	r2, r0, r3
 8011cbe:	bf1c      	itt	ne
 8011cc0:	1a1b      	subne	r3, r3, r0
 8011cc2:	50a3      	strne	r3, [r4, r2]
 8011cc4:	e7af      	b.n	8011c26 <_malloc_r+0x22>
 8011cc6:	6862      	ldr	r2, [r4, #4]
 8011cc8:	42a3      	cmp	r3, r4
 8011cca:	bf0c      	ite	eq
 8011ccc:	f8c8 2000 	streq.w	r2, [r8]
 8011cd0:	605a      	strne	r2, [r3, #4]
 8011cd2:	e7eb      	b.n	8011cac <_malloc_r+0xa8>
 8011cd4:	4623      	mov	r3, r4
 8011cd6:	6864      	ldr	r4, [r4, #4]
 8011cd8:	e7ae      	b.n	8011c38 <_malloc_r+0x34>
 8011cda:	463c      	mov	r4, r7
 8011cdc:	687f      	ldr	r7, [r7, #4]
 8011cde:	e7b6      	b.n	8011c4e <_malloc_r+0x4a>
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	42a3      	cmp	r3, r4
 8011ce6:	d1fb      	bne.n	8011ce0 <_malloc_r+0xdc>
 8011ce8:	2300      	movs	r3, #0
 8011cea:	6053      	str	r3, [r2, #4]
 8011cec:	e7de      	b.n	8011cac <_malloc_r+0xa8>
 8011cee:	230c      	movs	r3, #12
 8011cf0:	6033      	str	r3, [r6, #0]
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	f000 f80c 	bl	8011d10 <__malloc_unlock>
 8011cf8:	e794      	b.n	8011c24 <_malloc_r+0x20>
 8011cfa:	6005      	str	r5, [r0, #0]
 8011cfc:	e7d6      	b.n	8011cac <_malloc_r+0xa8>
 8011cfe:	bf00      	nop
 8011d00:	24000d20 	.word	0x24000d20

08011d04 <__malloc_lock>:
 8011d04:	4801      	ldr	r0, [pc, #4]	@ (8011d0c <__malloc_lock+0x8>)
 8011d06:	f7ff b914 	b.w	8010f32 <__retarget_lock_acquire_recursive>
 8011d0a:	bf00      	nop
 8011d0c:	24000d18 	.word	0x24000d18

08011d10 <__malloc_unlock>:
 8011d10:	4801      	ldr	r0, [pc, #4]	@ (8011d18 <__malloc_unlock+0x8>)
 8011d12:	f7ff b90f 	b.w	8010f34 <__retarget_lock_release_recursive>
 8011d16:	bf00      	nop
 8011d18:	24000d18 	.word	0x24000d18

08011d1c <_Balloc>:
 8011d1c:	b570      	push	{r4, r5, r6, lr}
 8011d1e:	69c6      	ldr	r6, [r0, #28]
 8011d20:	4604      	mov	r4, r0
 8011d22:	460d      	mov	r5, r1
 8011d24:	b976      	cbnz	r6, 8011d44 <_Balloc+0x28>
 8011d26:	2010      	movs	r0, #16
 8011d28:	f7ff ff42 	bl	8011bb0 <malloc>
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	61e0      	str	r0, [r4, #28]
 8011d30:	b920      	cbnz	r0, 8011d3c <_Balloc+0x20>
 8011d32:	4b18      	ldr	r3, [pc, #96]	@ (8011d94 <_Balloc+0x78>)
 8011d34:	4818      	ldr	r0, [pc, #96]	@ (8011d98 <_Balloc+0x7c>)
 8011d36:	216b      	movs	r1, #107	@ 0x6b
 8011d38:	f001 fee2 	bl	8013b00 <__assert_func>
 8011d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d40:	6006      	str	r6, [r0, #0]
 8011d42:	60c6      	str	r6, [r0, #12]
 8011d44:	69e6      	ldr	r6, [r4, #28]
 8011d46:	68f3      	ldr	r3, [r6, #12]
 8011d48:	b183      	cbz	r3, 8011d6c <_Balloc+0x50>
 8011d4a:	69e3      	ldr	r3, [r4, #28]
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011d52:	b9b8      	cbnz	r0, 8011d84 <_Balloc+0x68>
 8011d54:	2101      	movs	r1, #1
 8011d56:	fa01 f605 	lsl.w	r6, r1, r5
 8011d5a:	1d72      	adds	r2, r6, #5
 8011d5c:	0092      	lsls	r2, r2, #2
 8011d5e:	4620      	mov	r0, r4
 8011d60:	f001 feec 	bl	8013b3c <_calloc_r>
 8011d64:	b160      	cbz	r0, 8011d80 <_Balloc+0x64>
 8011d66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d6a:	e00e      	b.n	8011d8a <_Balloc+0x6e>
 8011d6c:	2221      	movs	r2, #33	@ 0x21
 8011d6e:	2104      	movs	r1, #4
 8011d70:	4620      	mov	r0, r4
 8011d72:	f001 fee3 	bl	8013b3c <_calloc_r>
 8011d76:	69e3      	ldr	r3, [r4, #28]
 8011d78:	60f0      	str	r0, [r6, #12]
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d1e4      	bne.n	8011d4a <_Balloc+0x2e>
 8011d80:	2000      	movs	r0, #0
 8011d82:	bd70      	pop	{r4, r5, r6, pc}
 8011d84:	6802      	ldr	r2, [r0, #0]
 8011d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d90:	e7f7      	b.n	8011d82 <_Balloc+0x66>
 8011d92:	bf00      	nop
 8011d94:	0801443e 	.word	0x0801443e
 8011d98:	080144be 	.word	0x080144be

08011d9c <_Bfree>:
 8011d9c:	b570      	push	{r4, r5, r6, lr}
 8011d9e:	69c6      	ldr	r6, [r0, #28]
 8011da0:	4605      	mov	r5, r0
 8011da2:	460c      	mov	r4, r1
 8011da4:	b976      	cbnz	r6, 8011dc4 <_Bfree+0x28>
 8011da6:	2010      	movs	r0, #16
 8011da8:	f7ff ff02 	bl	8011bb0 <malloc>
 8011dac:	4602      	mov	r2, r0
 8011dae:	61e8      	str	r0, [r5, #28]
 8011db0:	b920      	cbnz	r0, 8011dbc <_Bfree+0x20>
 8011db2:	4b09      	ldr	r3, [pc, #36]	@ (8011dd8 <_Bfree+0x3c>)
 8011db4:	4809      	ldr	r0, [pc, #36]	@ (8011ddc <_Bfree+0x40>)
 8011db6:	218f      	movs	r1, #143	@ 0x8f
 8011db8:	f001 fea2 	bl	8013b00 <__assert_func>
 8011dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011dc0:	6006      	str	r6, [r0, #0]
 8011dc2:	60c6      	str	r6, [r0, #12]
 8011dc4:	b13c      	cbz	r4, 8011dd6 <_Bfree+0x3a>
 8011dc6:	69eb      	ldr	r3, [r5, #28]
 8011dc8:	6862      	ldr	r2, [r4, #4]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011dd0:	6021      	str	r1, [r4, #0]
 8011dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011dd6:	bd70      	pop	{r4, r5, r6, pc}
 8011dd8:	0801443e 	.word	0x0801443e
 8011ddc:	080144be 	.word	0x080144be

08011de0 <__multadd>:
 8011de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de4:	690d      	ldr	r5, [r1, #16]
 8011de6:	4607      	mov	r7, r0
 8011de8:	460c      	mov	r4, r1
 8011dea:	461e      	mov	r6, r3
 8011dec:	f101 0c14 	add.w	ip, r1, #20
 8011df0:	2000      	movs	r0, #0
 8011df2:	f8dc 3000 	ldr.w	r3, [ip]
 8011df6:	b299      	uxth	r1, r3
 8011df8:	fb02 6101 	mla	r1, r2, r1, r6
 8011dfc:	0c1e      	lsrs	r6, r3, #16
 8011dfe:	0c0b      	lsrs	r3, r1, #16
 8011e00:	fb02 3306 	mla	r3, r2, r6, r3
 8011e04:	b289      	uxth	r1, r1
 8011e06:	3001      	adds	r0, #1
 8011e08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011e0c:	4285      	cmp	r5, r0
 8011e0e:	f84c 1b04 	str.w	r1, [ip], #4
 8011e12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011e16:	dcec      	bgt.n	8011df2 <__multadd+0x12>
 8011e18:	b30e      	cbz	r6, 8011e5e <__multadd+0x7e>
 8011e1a:	68a3      	ldr	r3, [r4, #8]
 8011e1c:	42ab      	cmp	r3, r5
 8011e1e:	dc19      	bgt.n	8011e54 <__multadd+0x74>
 8011e20:	6861      	ldr	r1, [r4, #4]
 8011e22:	4638      	mov	r0, r7
 8011e24:	3101      	adds	r1, #1
 8011e26:	f7ff ff79 	bl	8011d1c <_Balloc>
 8011e2a:	4680      	mov	r8, r0
 8011e2c:	b928      	cbnz	r0, 8011e3a <__multadd+0x5a>
 8011e2e:	4602      	mov	r2, r0
 8011e30:	4b0c      	ldr	r3, [pc, #48]	@ (8011e64 <__multadd+0x84>)
 8011e32:	480d      	ldr	r0, [pc, #52]	@ (8011e68 <__multadd+0x88>)
 8011e34:	21ba      	movs	r1, #186	@ 0xba
 8011e36:	f001 fe63 	bl	8013b00 <__assert_func>
 8011e3a:	6922      	ldr	r2, [r4, #16]
 8011e3c:	3202      	adds	r2, #2
 8011e3e:	f104 010c 	add.w	r1, r4, #12
 8011e42:	0092      	lsls	r2, r2, #2
 8011e44:	300c      	adds	r0, #12
 8011e46:	f7ff f876 	bl	8010f36 <memcpy>
 8011e4a:	4621      	mov	r1, r4
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	f7ff ffa5 	bl	8011d9c <_Bfree>
 8011e52:	4644      	mov	r4, r8
 8011e54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e58:	3501      	adds	r5, #1
 8011e5a:	615e      	str	r6, [r3, #20]
 8011e5c:	6125      	str	r5, [r4, #16]
 8011e5e:	4620      	mov	r0, r4
 8011e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e64:	080144ad 	.word	0x080144ad
 8011e68:	080144be 	.word	0x080144be

08011e6c <__s2b>:
 8011e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e70:	460c      	mov	r4, r1
 8011e72:	4615      	mov	r5, r2
 8011e74:	461f      	mov	r7, r3
 8011e76:	2209      	movs	r2, #9
 8011e78:	3308      	adds	r3, #8
 8011e7a:	4606      	mov	r6, r0
 8011e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e80:	2100      	movs	r1, #0
 8011e82:	2201      	movs	r2, #1
 8011e84:	429a      	cmp	r2, r3
 8011e86:	db09      	blt.n	8011e9c <__s2b+0x30>
 8011e88:	4630      	mov	r0, r6
 8011e8a:	f7ff ff47 	bl	8011d1c <_Balloc>
 8011e8e:	b940      	cbnz	r0, 8011ea2 <__s2b+0x36>
 8011e90:	4602      	mov	r2, r0
 8011e92:	4b19      	ldr	r3, [pc, #100]	@ (8011ef8 <__s2b+0x8c>)
 8011e94:	4819      	ldr	r0, [pc, #100]	@ (8011efc <__s2b+0x90>)
 8011e96:	21d3      	movs	r1, #211	@ 0xd3
 8011e98:	f001 fe32 	bl	8013b00 <__assert_func>
 8011e9c:	0052      	lsls	r2, r2, #1
 8011e9e:	3101      	adds	r1, #1
 8011ea0:	e7f0      	b.n	8011e84 <__s2b+0x18>
 8011ea2:	9b08      	ldr	r3, [sp, #32]
 8011ea4:	6143      	str	r3, [r0, #20]
 8011ea6:	2d09      	cmp	r5, #9
 8011ea8:	f04f 0301 	mov.w	r3, #1
 8011eac:	6103      	str	r3, [r0, #16]
 8011eae:	dd16      	ble.n	8011ede <__s2b+0x72>
 8011eb0:	f104 0909 	add.w	r9, r4, #9
 8011eb4:	46c8      	mov	r8, r9
 8011eb6:	442c      	add	r4, r5
 8011eb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011ebc:	4601      	mov	r1, r0
 8011ebe:	3b30      	subs	r3, #48	@ 0x30
 8011ec0:	220a      	movs	r2, #10
 8011ec2:	4630      	mov	r0, r6
 8011ec4:	f7ff ff8c 	bl	8011de0 <__multadd>
 8011ec8:	45a0      	cmp	r8, r4
 8011eca:	d1f5      	bne.n	8011eb8 <__s2b+0x4c>
 8011ecc:	f1a5 0408 	sub.w	r4, r5, #8
 8011ed0:	444c      	add	r4, r9
 8011ed2:	1b2d      	subs	r5, r5, r4
 8011ed4:	1963      	adds	r3, r4, r5
 8011ed6:	42bb      	cmp	r3, r7
 8011ed8:	db04      	blt.n	8011ee4 <__s2b+0x78>
 8011eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ede:	340a      	adds	r4, #10
 8011ee0:	2509      	movs	r5, #9
 8011ee2:	e7f6      	b.n	8011ed2 <__s2b+0x66>
 8011ee4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011ee8:	4601      	mov	r1, r0
 8011eea:	3b30      	subs	r3, #48	@ 0x30
 8011eec:	220a      	movs	r2, #10
 8011eee:	4630      	mov	r0, r6
 8011ef0:	f7ff ff76 	bl	8011de0 <__multadd>
 8011ef4:	e7ee      	b.n	8011ed4 <__s2b+0x68>
 8011ef6:	bf00      	nop
 8011ef8:	080144ad 	.word	0x080144ad
 8011efc:	080144be 	.word	0x080144be

08011f00 <__hi0bits>:
 8011f00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011f04:	4603      	mov	r3, r0
 8011f06:	bf36      	itet	cc
 8011f08:	0403      	lslcc	r3, r0, #16
 8011f0a:	2000      	movcs	r0, #0
 8011f0c:	2010      	movcc	r0, #16
 8011f0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011f12:	bf3c      	itt	cc
 8011f14:	021b      	lslcc	r3, r3, #8
 8011f16:	3008      	addcc	r0, #8
 8011f18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011f1c:	bf3c      	itt	cc
 8011f1e:	011b      	lslcc	r3, r3, #4
 8011f20:	3004      	addcc	r0, #4
 8011f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f26:	bf3c      	itt	cc
 8011f28:	009b      	lslcc	r3, r3, #2
 8011f2a:	3002      	addcc	r0, #2
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	db05      	blt.n	8011f3c <__hi0bits+0x3c>
 8011f30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011f34:	f100 0001 	add.w	r0, r0, #1
 8011f38:	bf08      	it	eq
 8011f3a:	2020      	moveq	r0, #32
 8011f3c:	4770      	bx	lr

08011f3e <__lo0bits>:
 8011f3e:	6803      	ldr	r3, [r0, #0]
 8011f40:	4602      	mov	r2, r0
 8011f42:	f013 0007 	ands.w	r0, r3, #7
 8011f46:	d00b      	beq.n	8011f60 <__lo0bits+0x22>
 8011f48:	07d9      	lsls	r1, r3, #31
 8011f4a:	d421      	bmi.n	8011f90 <__lo0bits+0x52>
 8011f4c:	0798      	lsls	r0, r3, #30
 8011f4e:	bf49      	itett	mi
 8011f50:	085b      	lsrmi	r3, r3, #1
 8011f52:	089b      	lsrpl	r3, r3, #2
 8011f54:	2001      	movmi	r0, #1
 8011f56:	6013      	strmi	r3, [r2, #0]
 8011f58:	bf5c      	itt	pl
 8011f5a:	6013      	strpl	r3, [r2, #0]
 8011f5c:	2002      	movpl	r0, #2
 8011f5e:	4770      	bx	lr
 8011f60:	b299      	uxth	r1, r3
 8011f62:	b909      	cbnz	r1, 8011f68 <__lo0bits+0x2a>
 8011f64:	0c1b      	lsrs	r3, r3, #16
 8011f66:	2010      	movs	r0, #16
 8011f68:	b2d9      	uxtb	r1, r3
 8011f6a:	b909      	cbnz	r1, 8011f70 <__lo0bits+0x32>
 8011f6c:	3008      	adds	r0, #8
 8011f6e:	0a1b      	lsrs	r3, r3, #8
 8011f70:	0719      	lsls	r1, r3, #28
 8011f72:	bf04      	itt	eq
 8011f74:	091b      	lsreq	r3, r3, #4
 8011f76:	3004      	addeq	r0, #4
 8011f78:	0799      	lsls	r1, r3, #30
 8011f7a:	bf04      	itt	eq
 8011f7c:	089b      	lsreq	r3, r3, #2
 8011f7e:	3002      	addeq	r0, #2
 8011f80:	07d9      	lsls	r1, r3, #31
 8011f82:	d403      	bmi.n	8011f8c <__lo0bits+0x4e>
 8011f84:	085b      	lsrs	r3, r3, #1
 8011f86:	f100 0001 	add.w	r0, r0, #1
 8011f8a:	d003      	beq.n	8011f94 <__lo0bits+0x56>
 8011f8c:	6013      	str	r3, [r2, #0]
 8011f8e:	4770      	bx	lr
 8011f90:	2000      	movs	r0, #0
 8011f92:	4770      	bx	lr
 8011f94:	2020      	movs	r0, #32
 8011f96:	4770      	bx	lr

08011f98 <__i2b>:
 8011f98:	b510      	push	{r4, lr}
 8011f9a:	460c      	mov	r4, r1
 8011f9c:	2101      	movs	r1, #1
 8011f9e:	f7ff febd 	bl	8011d1c <_Balloc>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	b928      	cbnz	r0, 8011fb2 <__i2b+0x1a>
 8011fa6:	4b05      	ldr	r3, [pc, #20]	@ (8011fbc <__i2b+0x24>)
 8011fa8:	4805      	ldr	r0, [pc, #20]	@ (8011fc0 <__i2b+0x28>)
 8011faa:	f240 1145 	movw	r1, #325	@ 0x145
 8011fae:	f001 fda7 	bl	8013b00 <__assert_func>
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	6144      	str	r4, [r0, #20]
 8011fb6:	6103      	str	r3, [r0, #16]
 8011fb8:	bd10      	pop	{r4, pc}
 8011fba:	bf00      	nop
 8011fbc:	080144ad 	.word	0x080144ad
 8011fc0:	080144be 	.word	0x080144be

08011fc4 <__multiply>:
 8011fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc8:	4614      	mov	r4, r2
 8011fca:	690a      	ldr	r2, [r1, #16]
 8011fcc:	6923      	ldr	r3, [r4, #16]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	bfa8      	it	ge
 8011fd2:	4623      	movge	r3, r4
 8011fd4:	460f      	mov	r7, r1
 8011fd6:	bfa4      	itt	ge
 8011fd8:	460c      	movge	r4, r1
 8011fda:	461f      	movge	r7, r3
 8011fdc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011fe0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011fe4:	68a3      	ldr	r3, [r4, #8]
 8011fe6:	6861      	ldr	r1, [r4, #4]
 8011fe8:	eb0a 0609 	add.w	r6, sl, r9
 8011fec:	42b3      	cmp	r3, r6
 8011fee:	b085      	sub	sp, #20
 8011ff0:	bfb8      	it	lt
 8011ff2:	3101      	addlt	r1, #1
 8011ff4:	f7ff fe92 	bl	8011d1c <_Balloc>
 8011ff8:	b930      	cbnz	r0, 8012008 <__multiply+0x44>
 8011ffa:	4602      	mov	r2, r0
 8011ffc:	4b44      	ldr	r3, [pc, #272]	@ (8012110 <__multiply+0x14c>)
 8011ffe:	4845      	ldr	r0, [pc, #276]	@ (8012114 <__multiply+0x150>)
 8012000:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012004:	f001 fd7c 	bl	8013b00 <__assert_func>
 8012008:	f100 0514 	add.w	r5, r0, #20
 801200c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012010:	462b      	mov	r3, r5
 8012012:	2200      	movs	r2, #0
 8012014:	4543      	cmp	r3, r8
 8012016:	d321      	bcc.n	801205c <__multiply+0x98>
 8012018:	f107 0114 	add.w	r1, r7, #20
 801201c:	f104 0214 	add.w	r2, r4, #20
 8012020:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012024:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012028:	9302      	str	r3, [sp, #8]
 801202a:	1b13      	subs	r3, r2, r4
 801202c:	3b15      	subs	r3, #21
 801202e:	f023 0303 	bic.w	r3, r3, #3
 8012032:	3304      	adds	r3, #4
 8012034:	f104 0715 	add.w	r7, r4, #21
 8012038:	42ba      	cmp	r2, r7
 801203a:	bf38      	it	cc
 801203c:	2304      	movcc	r3, #4
 801203e:	9301      	str	r3, [sp, #4]
 8012040:	9b02      	ldr	r3, [sp, #8]
 8012042:	9103      	str	r1, [sp, #12]
 8012044:	428b      	cmp	r3, r1
 8012046:	d80c      	bhi.n	8012062 <__multiply+0x9e>
 8012048:	2e00      	cmp	r6, #0
 801204a:	dd03      	ble.n	8012054 <__multiply+0x90>
 801204c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012050:	2b00      	cmp	r3, #0
 8012052:	d05b      	beq.n	801210c <__multiply+0x148>
 8012054:	6106      	str	r6, [r0, #16]
 8012056:	b005      	add	sp, #20
 8012058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801205c:	f843 2b04 	str.w	r2, [r3], #4
 8012060:	e7d8      	b.n	8012014 <__multiply+0x50>
 8012062:	f8b1 a000 	ldrh.w	sl, [r1]
 8012066:	f1ba 0f00 	cmp.w	sl, #0
 801206a:	d024      	beq.n	80120b6 <__multiply+0xf2>
 801206c:	f104 0e14 	add.w	lr, r4, #20
 8012070:	46a9      	mov	r9, r5
 8012072:	f04f 0c00 	mov.w	ip, #0
 8012076:	f85e 7b04 	ldr.w	r7, [lr], #4
 801207a:	f8d9 3000 	ldr.w	r3, [r9]
 801207e:	fa1f fb87 	uxth.w	fp, r7
 8012082:	b29b      	uxth	r3, r3
 8012084:	fb0a 330b 	mla	r3, sl, fp, r3
 8012088:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801208c:	f8d9 7000 	ldr.w	r7, [r9]
 8012090:	4463      	add	r3, ip
 8012092:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012096:	fb0a c70b 	mla	r7, sl, fp, ip
 801209a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801209e:	b29b      	uxth	r3, r3
 80120a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80120a4:	4572      	cmp	r2, lr
 80120a6:	f849 3b04 	str.w	r3, [r9], #4
 80120aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80120ae:	d8e2      	bhi.n	8012076 <__multiply+0xb2>
 80120b0:	9b01      	ldr	r3, [sp, #4]
 80120b2:	f845 c003 	str.w	ip, [r5, r3]
 80120b6:	9b03      	ldr	r3, [sp, #12]
 80120b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80120bc:	3104      	adds	r1, #4
 80120be:	f1b9 0f00 	cmp.w	r9, #0
 80120c2:	d021      	beq.n	8012108 <__multiply+0x144>
 80120c4:	682b      	ldr	r3, [r5, #0]
 80120c6:	f104 0c14 	add.w	ip, r4, #20
 80120ca:	46ae      	mov	lr, r5
 80120cc:	f04f 0a00 	mov.w	sl, #0
 80120d0:	f8bc b000 	ldrh.w	fp, [ip]
 80120d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80120d8:	fb09 770b 	mla	r7, r9, fp, r7
 80120dc:	4457      	add	r7, sl
 80120de:	b29b      	uxth	r3, r3
 80120e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80120e4:	f84e 3b04 	str.w	r3, [lr], #4
 80120e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80120ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80120f0:	f8be 3000 	ldrh.w	r3, [lr]
 80120f4:	fb09 330a 	mla	r3, r9, sl, r3
 80120f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80120fc:	4562      	cmp	r2, ip
 80120fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012102:	d8e5      	bhi.n	80120d0 <__multiply+0x10c>
 8012104:	9f01      	ldr	r7, [sp, #4]
 8012106:	51eb      	str	r3, [r5, r7]
 8012108:	3504      	adds	r5, #4
 801210a:	e799      	b.n	8012040 <__multiply+0x7c>
 801210c:	3e01      	subs	r6, #1
 801210e:	e79b      	b.n	8012048 <__multiply+0x84>
 8012110:	080144ad 	.word	0x080144ad
 8012114:	080144be 	.word	0x080144be

08012118 <__pow5mult>:
 8012118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801211c:	4615      	mov	r5, r2
 801211e:	f012 0203 	ands.w	r2, r2, #3
 8012122:	4607      	mov	r7, r0
 8012124:	460e      	mov	r6, r1
 8012126:	d007      	beq.n	8012138 <__pow5mult+0x20>
 8012128:	4c25      	ldr	r4, [pc, #148]	@ (80121c0 <__pow5mult+0xa8>)
 801212a:	3a01      	subs	r2, #1
 801212c:	2300      	movs	r3, #0
 801212e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012132:	f7ff fe55 	bl	8011de0 <__multadd>
 8012136:	4606      	mov	r6, r0
 8012138:	10ad      	asrs	r5, r5, #2
 801213a:	d03d      	beq.n	80121b8 <__pow5mult+0xa0>
 801213c:	69fc      	ldr	r4, [r7, #28]
 801213e:	b97c      	cbnz	r4, 8012160 <__pow5mult+0x48>
 8012140:	2010      	movs	r0, #16
 8012142:	f7ff fd35 	bl	8011bb0 <malloc>
 8012146:	4602      	mov	r2, r0
 8012148:	61f8      	str	r0, [r7, #28]
 801214a:	b928      	cbnz	r0, 8012158 <__pow5mult+0x40>
 801214c:	4b1d      	ldr	r3, [pc, #116]	@ (80121c4 <__pow5mult+0xac>)
 801214e:	481e      	ldr	r0, [pc, #120]	@ (80121c8 <__pow5mult+0xb0>)
 8012150:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012154:	f001 fcd4 	bl	8013b00 <__assert_func>
 8012158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801215c:	6004      	str	r4, [r0, #0]
 801215e:	60c4      	str	r4, [r0, #12]
 8012160:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012168:	b94c      	cbnz	r4, 801217e <__pow5mult+0x66>
 801216a:	f240 2171 	movw	r1, #625	@ 0x271
 801216e:	4638      	mov	r0, r7
 8012170:	f7ff ff12 	bl	8011f98 <__i2b>
 8012174:	2300      	movs	r3, #0
 8012176:	f8c8 0008 	str.w	r0, [r8, #8]
 801217a:	4604      	mov	r4, r0
 801217c:	6003      	str	r3, [r0, #0]
 801217e:	f04f 0900 	mov.w	r9, #0
 8012182:	07eb      	lsls	r3, r5, #31
 8012184:	d50a      	bpl.n	801219c <__pow5mult+0x84>
 8012186:	4631      	mov	r1, r6
 8012188:	4622      	mov	r2, r4
 801218a:	4638      	mov	r0, r7
 801218c:	f7ff ff1a 	bl	8011fc4 <__multiply>
 8012190:	4631      	mov	r1, r6
 8012192:	4680      	mov	r8, r0
 8012194:	4638      	mov	r0, r7
 8012196:	f7ff fe01 	bl	8011d9c <_Bfree>
 801219a:	4646      	mov	r6, r8
 801219c:	106d      	asrs	r5, r5, #1
 801219e:	d00b      	beq.n	80121b8 <__pow5mult+0xa0>
 80121a0:	6820      	ldr	r0, [r4, #0]
 80121a2:	b938      	cbnz	r0, 80121b4 <__pow5mult+0x9c>
 80121a4:	4622      	mov	r2, r4
 80121a6:	4621      	mov	r1, r4
 80121a8:	4638      	mov	r0, r7
 80121aa:	f7ff ff0b 	bl	8011fc4 <__multiply>
 80121ae:	6020      	str	r0, [r4, #0]
 80121b0:	f8c0 9000 	str.w	r9, [r0]
 80121b4:	4604      	mov	r4, r0
 80121b6:	e7e4      	b.n	8012182 <__pow5mult+0x6a>
 80121b8:	4630      	mov	r0, r6
 80121ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121be:	bf00      	nop
 80121c0:	08014518 	.word	0x08014518
 80121c4:	0801443e 	.word	0x0801443e
 80121c8:	080144be 	.word	0x080144be

080121cc <__lshift>:
 80121cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121d0:	460c      	mov	r4, r1
 80121d2:	6849      	ldr	r1, [r1, #4]
 80121d4:	6923      	ldr	r3, [r4, #16]
 80121d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80121da:	68a3      	ldr	r3, [r4, #8]
 80121dc:	4607      	mov	r7, r0
 80121de:	4691      	mov	r9, r2
 80121e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80121e4:	f108 0601 	add.w	r6, r8, #1
 80121e8:	42b3      	cmp	r3, r6
 80121ea:	db0b      	blt.n	8012204 <__lshift+0x38>
 80121ec:	4638      	mov	r0, r7
 80121ee:	f7ff fd95 	bl	8011d1c <_Balloc>
 80121f2:	4605      	mov	r5, r0
 80121f4:	b948      	cbnz	r0, 801220a <__lshift+0x3e>
 80121f6:	4602      	mov	r2, r0
 80121f8:	4b28      	ldr	r3, [pc, #160]	@ (801229c <__lshift+0xd0>)
 80121fa:	4829      	ldr	r0, [pc, #164]	@ (80122a0 <__lshift+0xd4>)
 80121fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012200:	f001 fc7e 	bl	8013b00 <__assert_func>
 8012204:	3101      	adds	r1, #1
 8012206:	005b      	lsls	r3, r3, #1
 8012208:	e7ee      	b.n	80121e8 <__lshift+0x1c>
 801220a:	2300      	movs	r3, #0
 801220c:	f100 0114 	add.w	r1, r0, #20
 8012210:	f100 0210 	add.w	r2, r0, #16
 8012214:	4618      	mov	r0, r3
 8012216:	4553      	cmp	r3, sl
 8012218:	db33      	blt.n	8012282 <__lshift+0xb6>
 801221a:	6920      	ldr	r0, [r4, #16]
 801221c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012220:	f104 0314 	add.w	r3, r4, #20
 8012224:	f019 091f 	ands.w	r9, r9, #31
 8012228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801222c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012230:	d02b      	beq.n	801228a <__lshift+0xbe>
 8012232:	f1c9 0e20 	rsb	lr, r9, #32
 8012236:	468a      	mov	sl, r1
 8012238:	2200      	movs	r2, #0
 801223a:	6818      	ldr	r0, [r3, #0]
 801223c:	fa00 f009 	lsl.w	r0, r0, r9
 8012240:	4310      	orrs	r0, r2
 8012242:	f84a 0b04 	str.w	r0, [sl], #4
 8012246:	f853 2b04 	ldr.w	r2, [r3], #4
 801224a:	459c      	cmp	ip, r3
 801224c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012250:	d8f3      	bhi.n	801223a <__lshift+0x6e>
 8012252:	ebac 0304 	sub.w	r3, ip, r4
 8012256:	3b15      	subs	r3, #21
 8012258:	f023 0303 	bic.w	r3, r3, #3
 801225c:	3304      	adds	r3, #4
 801225e:	f104 0015 	add.w	r0, r4, #21
 8012262:	4584      	cmp	ip, r0
 8012264:	bf38      	it	cc
 8012266:	2304      	movcc	r3, #4
 8012268:	50ca      	str	r2, [r1, r3]
 801226a:	b10a      	cbz	r2, 8012270 <__lshift+0xa4>
 801226c:	f108 0602 	add.w	r6, r8, #2
 8012270:	3e01      	subs	r6, #1
 8012272:	4638      	mov	r0, r7
 8012274:	612e      	str	r6, [r5, #16]
 8012276:	4621      	mov	r1, r4
 8012278:	f7ff fd90 	bl	8011d9c <_Bfree>
 801227c:	4628      	mov	r0, r5
 801227e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012282:	f842 0f04 	str.w	r0, [r2, #4]!
 8012286:	3301      	adds	r3, #1
 8012288:	e7c5      	b.n	8012216 <__lshift+0x4a>
 801228a:	3904      	subs	r1, #4
 801228c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012290:	f841 2f04 	str.w	r2, [r1, #4]!
 8012294:	459c      	cmp	ip, r3
 8012296:	d8f9      	bhi.n	801228c <__lshift+0xc0>
 8012298:	e7ea      	b.n	8012270 <__lshift+0xa4>
 801229a:	bf00      	nop
 801229c:	080144ad 	.word	0x080144ad
 80122a0:	080144be 	.word	0x080144be

080122a4 <__mcmp>:
 80122a4:	690a      	ldr	r2, [r1, #16]
 80122a6:	4603      	mov	r3, r0
 80122a8:	6900      	ldr	r0, [r0, #16]
 80122aa:	1a80      	subs	r0, r0, r2
 80122ac:	b530      	push	{r4, r5, lr}
 80122ae:	d10e      	bne.n	80122ce <__mcmp+0x2a>
 80122b0:	3314      	adds	r3, #20
 80122b2:	3114      	adds	r1, #20
 80122b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80122b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80122bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80122c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80122c4:	4295      	cmp	r5, r2
 80122c6:	d003      	beq.n	80122d0 <__mcmp+0x2c>
 80122c8:	d205      	bcs.n	80122d6 <__mcmp+0x32>
 80122ca:	f04f 30ff 	mov.w	r0, #4294967295
 80122ce:	bd30      	pop	{r4, r5, pc}
 80122d0:	42a3      	cmp	r3, r4
 80122d2:	d3f3      	bcc.n	80122bc <__mcmp+0x18>
 80122d4:	e7fb      	b.n	80122ce <__mcmp+0x2a>
 80122d6:	2001      	movs	r0, #1
 80122d8:	e7f9      	b.n	80122ce <__mcmp+0x2a>
	...

080122dc <__mdiff>:
 80122dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e0:	4689      	mov	r9, r1
 80122e2:	4606      	mov	r6, r0
 80122e4:	4611      	mov	r1, r2
 80122e6:	4648      	mov	r0, r9
 80122e8:	4614      	mov	r4, r2
 80122ea:	f7ff ffdb 	bl	80122a4 <__mcmp>
 80122ee:	1e05      	subs	r5, r0, #0
 80122f0:	d112      	bne.n	8012318 <__mdiff+0x3c>
 80122f2:	4629      	mov	r1, r5
 80122f4:	4630      	mov	r0, r6
 80122f6:	f7ff fd11 	bl	8011d1c <_Balloc>
 80122fa:	4602      	mov	r2, r0
 80122fc:	b928      	cbnz	r0, 801230a <__mdiff+0x2e>
 80122fe:	4b3f      	ldr	r3, [pc, #252]	@ (80123fc <__mdiff+0x120>)
 8012300:	f240 2137 	movw	r1, #567	@ 0x237
 8012304:	483e      	ldr	r0, [pc, #248]	@ (8012400 <__mdiff+0x124>)
 8012306:	f001 fbfb 	bl	8013b00 <__assert_func>
 801230a:	2301      	movs	r3, #1
 801230c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012310:	4610      	mov	r0, r2
 8012312:	b003      	add	sp, #12
 8012314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012318:	bfbc      	itt	lt
 801231a:	464b      	movlt	r3, r9
 801231c:	46a1      	movlt	r9, r4
 801231e:	4630      	mov	r0, r6
 8012320:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012324:	bfba      	itte	lt
 8012326:	461c      	movlt	r4, r3
 8012328:	2501      	movlt	r5, #1
 801232a:	2500      	movge	r5, #0
 801232c:	f7ff fcf6 	bl	8011d1c <_Balloc>
 8012330:	4602      	mov	r2, r0
 8012332:	b918      	cbnz	r0, 801233c <__mdiff+0x60>
 8012334:	4b31      	ldr	r3, [pc, #196]	@ (80123fc <__mdiff+0x120>)
 8012336:	f240 2145 	movw	r1, #581	@ 0x245
 801233a:	e7e3      	b.n	8012304 <__mdiff+0x28>
 801233c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012340:	6926      	ldr	r6, [r4, #16]
 8012342:	60c5      	str	r5, [r0, #12]
 8012344:	f109 0310 	add.w	r3, r9, #16
 8012348:	f109 0514 	add.w	r5, r9, #20
 801234c:	f104 0e14 	add.w	lr, r4, #20
 8012350:	f100 0b14 	add.w	fp, r0, #20
 8012354:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012358:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801235c:	9301      	str	r3, [sp, #4]
 801235e:	46d9      	mov	r9, fp
 8012360:	f04f 0c00 	mov.w	ip, #0
 8012364:	9b01      	ldr	r3, [sp, #4]
 8012366:	f85e 0b04 	ldr.w	r0, [lr], #4
 801236a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801236e:	9301      	str	r3, [sp, #4]
 8012370:	fa1f f38a 	uxth.w	r3, sl
 8012374:	4619      	mov	r1, r3
 8012376:	b283      	uxth	r3, r0
 8012378:	1acb      	subs	r3, r1, r3
 801237a:	0c00      	lsrs	r0, r0, #16
 801237c:	4463      	add	r3, ip
 801237e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012382:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012386:	b29b      	uxth	r3, r3
 8012388:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801238c:	4576      	cmp	r6, lr
 801238e:	f849 3b04 	str.w	r3, [r9], #4
 8012392:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012396:	d8e5      	bhi.n	8012364 <__mdiff+0x88>
 8012398:	1b33      	subs	r3, r6, r4
 801239a:	3b15      	subs	r3, #21
 801239c:	f023 0303 	bic.w	r3, r3, #3
 80123a0:	3415      	adds	r4, #21
 80123a2:	3304      	adds	r3, #4
 80123a4:	42a6      	cmp	r6, r4
 80123a6:	bf38      	it	cc
 80123a8:	2304      	movcc	r3, #4
 80123aa:	441d      	add	r5, r3
 80123ac:	445b      	add	r3, fp
 80123ae:	461e      	mov	r6, r3
 80123b0:	462c      	mov	r4, r5
 80123b2:	4544      	cmp	r4, r8
 80123b4:	d30e      	bcc.n	80123d4 <__mdiff+0xf8>
 80123b6:	f108 0103 	add.w	r1, r8, #3
 80123ba:	1b49      	subs	r1, r1, r5
 80123bc:	f021 0103 	bic.w	r1, r1, #3
 80123c0:	3d03      	subs	r5, #3
 80123c2:	45a8      	cmp	r8, r5
 80123c4:	bf38      	it	cc
 80123c6:	2100      	movcc	r1, #0
 80123c8:	440b      	add	r3, r1
 80123ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80123ce:	b191      	cbz	r1, 80123f6 <__mdiff+0x11a>
 80123d0:	6117      	str	r7, [r2, #16]
 80123d2:	e79d      	b.n	8012310 <__mdiff+0x34>
 80123d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80123d8:	46e6      	mov	lr, ip
 80123da:	0c08      	lsrs	r0, r1, #16
 80123dc:	fa1c fc81 	uxtah	ip, ip, r1
 80123e0:	4471      	add	r1, lr
 80123e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80123e6:	b289      	uxth	r1, r1
 80123e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80123ec:	f846 1b04 	str.w	r1, [r6], #4
 80123f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80123f4:	e7dd      	b.n	80123b2 <__mdiff+0xd6>
 80123f6:	3f01      	subs	r7, #1
 80123f8:	e7e7      	b.n	80123ca <__mdiff+0xee>
 80123fa:	bf00      	nop
 80123fc:	080144ad 	.word	0x080144ad
 8012400:	080144be 	.word	0x080144be

08012404 <__ulp>:
 8012404:	b082      	sub	sp, #8
 8012406:	ed8d 0b00 	vstr	d0, [sp]
 801240a:	9a01      	ldr	r2, [sp, #4]
 801240c:	4b0f      	ldr	r3, [pc, #60]	@ (801244c <__ulp+0x48>)
 801240e:	4013      	ands	r3, r2
 8012410:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012414:	2b00      	cmp	r3, #0
 8012416:	dc08      	bgt.n	801242a <__ulp+0x26>
 8012418:	425b      	negs	r3, r3
 801241a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801241e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012422:	da04      	bge.n	801242e <__ulp+0x2a>
 8012424:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012428:	4113      	asrs	r3, r2
 801242a:	2200      	movs	r2, #0
 801242c:	e008      	b.n	8012440 <__ulp+0x3c>
 801242e:	f1a2 0314 	sub.w	r3, r2, #20
 8012432:	2b1e      	cmp	r3, #30
 8012434:	bfda      	itte	le
 8012436:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801243a:	40da      	lsrle	r2, r3
 801243c:	2201      	movgt	r2, #1
 801243e:	2300      	movs	r3, #0
 8012440:	4619      	mov	r1, r3
 8012442:	4610      	mov	r0, r2
 8012444:	ec41 0b10 	vmov	d0, r0, r1
 8012448:	b002      	add	sp, #8
 801244a:	4770      	bx	lr
 801244c:	7ff00000 	.word	0x7ff00000

08012450 <__b2d>:
 8012450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012454:	6906      	ldr	r6, [r0, #16]
 8012456:	f100 0814 	add.w	r8, r0, #20
 801245a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801245e:	1f37      	subs	r7, r6, #4
 8012460:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012464:	4610      	mov	r0, r2
 8012466:	f7ff fd4b 	bl	8011f00 <__hi0bits>
 801246a:	f1c0 0320 	rsb	r3, r0, #32
 801246e:	280a      	cmp	r0, #10
 8012470:	600b      	str	r3, [r1, #0]
 8012472:	491b      	ldr	r1, [pc, #108]	@ (80124e0 <__b2d+0x90>)
 8012474:	dc15      	bgt.n	80124a2 <__b2d+0x52>
 8012476:	f1c0 0c0b 	rsb	ip, r0, #11
 801247a:	fa22 f30c 	lsr.w	r3, r2, ip
 801247e:	45b8      	cmp	r8, r7
 8012480:	ea43 0501 	orr.w	r5, r3, r1
 8012484:	bf34      	ite	cc
 8012486:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801248a:	2300      	movcs	r3, #0
 801248c:	3015      	adds	r0, #21
 801248e:	fa02 f000 	lsl.w	r0, r2, r0
 8012492:	fa23 f30c 	lsr.w	r3, r3, ip
 8012496:	4303      	orrs	r3, r0
 8012498:	461c      	mov	r4, r3
 801249a:	ec45 4b10 	vmov	d0, r4, r5
 801249e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124a2:	45b8      	cmp	r8, r7
 80124a4:	bf3a      	itte	cc
 80124a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80124aa:	f1a6 0708 	subcc.w	r7, r6, #8
 80124ae:	2300      	movcs	r3, #0
 80124b0:	380b      	subs	r0, #11
 80124b2:	d012      	beq.n	80124da <__b2d+0x8a>
 80124b4:	f1c0 0120 	rsb	r1, r0, #32
 80124b8:	fa23 f401 	lsr.w	r4, r3, r1
 80124bc:	4082      	lsls	r2, r0
 80124be:	4322      	orrs	r2, r4
 80124c0:	4547      	cmp	r7, r8
 80124c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80124c6:	bf8c      	ite	hi
 80124c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80124cc:	2200      	movls	r2, #0
 80124ce:	4083      	lsls	r3, r0
 80124d0:	40ca      	lsrs	r2, r1
 80124d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80124d6:	4313      	orrs	r3, r2
 80124d8:	e7de      	b.n	8012498 <__b2d+0x48>
 80124da:	ea42 0501 	orr.w	r5, r2, r1
 80124de:	e7db      	b.n	8012498 <__b2d+0x48>
 80124e0:	3ff00000 	.word	0x3ff00000

080124e4 <__d2b>:
 80124e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80124e8:	460f      	mov	r7, r1
 80124ea:	2101      	movs	r1, #1
 80124ec:	ec59 8b10 	vmov	r8, r9, d0
 80124f0:	4616      	mov	r6, r2
 80124f2:	f7ff fc13 	bl	8011d1c <_Balloc>
 80124f6:	4604      	mov	r4, r0
 80124f8:	b930      	cbnz	r0, 8012508 <__d2b+0x24>
 80124fa:	4602      	mov	r2, r0
 80124fc:	4b23      	ldr	r3, [pc, #140]	@ (801258c <__d2b+0xa8>)
 80124fe:	4824      	ldr	r0, [pc, #144]	@ (8012590 <__d2b+0xac>)
 8012500:	f240 310f 	movw	r1, #783	@ 0x30f
 8012504:	f001 fafc 	bl	8013b00 <__assert_func>
 8012508:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801250c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012510:	b10d      	cbz	r5, 8012516 <__d2b+0x32>
 8012512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012516:	9301      	str	r3, [sp, #4]
 8012518:	f1b8 0300 	subs.w	r3, r8, #0
 801251c:	d023      	beq.n	8012566 <__d2b+0x82>
 801251e:	4668      	mov	r0, sp
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	f7ff fd0c 	bl	8011f3e <__lo0bits>
 8012526:	e9dd 1200 	ldrd	r1, r2, [sp]
 801252a:	b1d0      	cbz	r0, 8012562 <__d2b+0x7e>
 801252c:	f1c0 0320 	rsb	r3, r0, #32
 8012530:	fa02 f303 	lsl.w	r3, r2, r3
 8012534:	430b      	orrs	r3, r1
 8012536:	40c2      	lsrs	r2, r0
 8012538:	6163      	str	r3, [r4, #20]
 801253a:	9201      	str	r2, [sp, #4]
 801253c:	9b01      	ldr	r3, [sp, #4]
 801253e:	61a3      	str	r3, [r4, #24]
 8012540:	2b00      	cmp	r3, #0
 8012542:	bf0c      	ite	eq
 8012544:	2201      	moveq	r2, #1
 8012546:	2202      	movne	r2, #2
 8012548:	6122      	str	r2, [r4, #16]
 801254a:	b1a5      	cbz	r5, 8012576 <__d2b+0x92>
 801254c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012550:	4405      	add	r5, r0
 8012552:	603d      	str	r5, [r7, #0]
 8012554:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012558:	6030      	str	r0, [r6, #0]
 801255a:	4620      	mov	r0, r4
 801255c:	b003      	add	sp, #12
 801255e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012562:	6161      	str	r1, [r4, #20]
 8012564:	e7ea      	b.n	801253c <__d2b+0x58>
 8012566:	a801      	add	r0, sp, #4
 8012568:	f7ff fce9 	bl	8011f3e <__lo0bits>
 801256c:	9b01      	ldr	r3, [sp, #4]
 801256e:	6163      	str	r3, [r4, #20]
 8012570:	3020      	adds	r0, #32
 8012572:	2201      	movs	r2, #1
 8012574:	e7e8      	b.n	8012548 <__d2b+0x64>
 8012576:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801257a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801257e:	6038      	str	r0, [r7, #0]
 8012580:	6918      	ldr	r0, [r3, #16]
 8012582:	f7ff fcbd 	bl	8011f00 <__hi0bits>
 8012586:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801258a:	e7e5      	b.n	8012558 <__d2b+0x74>
 801258c:	080144ad 	.word	0x080144ad
 8012590:	080144be 	.word	0x080144be

08012594 <__ratio>:
 8012594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012598:	4688      	mov	r8, r1
 801259a:	4669      	mov	r1, sp
 801259c:	4681      	mov	r9, r0
 801259e:	f7ff ff57 	bl	8012450 <__b2d>
 80125a2:	a901      	add	r1, sp, #4
 80125a4:	4640      	mov	r0, r8
 80125a6:	ec55 4b10 	vmov	r4, r5, d0
 80125aa:	f7ff ff51 	bl	8012450 <__b2d>
 80125ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80125b2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80125b6:	1ad2      	subs	r2, r2, r3
 80125b8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80125bc:	1a5b      	subs	r3, r3, r1
 80125be:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80125c2:	ec57 6b10 	vmov	r6, r7, d0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	bfd6      	itet	le
 80125ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80125ce:	462a      	movgt	r2, r5
 80125d0:	463a      	movle	r2, r7
 80125d2:	46ab      	mov	fp, r5
 80125d4:	46a2      	mov	sl, r4
 80125d6:	bfce      	itee	gt
 80125d8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80125dc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80125e0:	ee00 3a90 	vmovle	s1, r3
 80125e4:	ec4b ab17 	vmov	d7, sl, fp
 80125e8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80125ec:	b003      	add	sp, #12
 80125ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080125f2 <__copybits>:
 80125f2:	3901      	subs	r1, #1
 80125f4:	b570      	push	{r4, r5, r6, lr}
 80125f6:	1149      	asrs	r1, r1, #5
 80125f8:	6914      	ldr	r4, [r2, #16]
 80125fa:	3101      	adds	r1, #1
 80125fc:	f102 0314 	add.w	r3, r2, #20
 8012600:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012604:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012608:	1f05      	subs	r5, r0, #4
 801260a:	42a3      	cmp	r3, r4
 801260c:	d30c      	bcc.n	8012628 <__copybits+0x36>
 801260e:	1aa3      	subs	r3, r4, r2
 8012610:	3b11      	subs	r3, #17
 8012612:	f023 0303 	bic.w	r3, r3, #3
 8012616:	3211      	adds	r2, #17
 8012618:	42a2      	cmp	r2, r4
 801261a:	bf88      	it	hi
 801261c:	2300      	movhi	r3, #0
 801261e:	4418      	add	r0, r3
 8012620:	2300      	movs	r3, #0
 8012622:	4288      	cmp	r0, r1
 8012624:	d305      	bcc.n	8012632 <__copybits+0x40>
 8012626:	bd70      	pop	{r4, r5, r6, pc}
 8012628:	f853 6b04 	ldr.w	r6, [r3], #4
 801262c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012630:	e7eb      	b.n	801260a <__copybits+0x18>
 8012632:	f840 3b04 	str.w	r3, [r0], #4
 8012636:	e7f4      	b.n	8012622 <__copybits+0x30>

08012638 <__any_on>:
 8012638:	f100 0214 	add.w	r2, r0, #20
 801263c:	6900      	ldr	r0, [r0, #16]
 801263e:	114b      	asrs	r3, r1, #5
 8012640:	4298      	cmp	r0, r3
 8012642:	b510      	push	{r4, lr}
 8012644:	db11      	blt.n	801266a <__any_on+0x32>
 8012646:	dd0a      	ble.n	801265e <__any_on+0x26>
 8012648:	f011 011f 	ands.w	r1, r1, #31
 801264c:	d007      	beq.n	801265e <__any_on+0x26>
 801264e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012652:	fa24 f001 	lsr.w	r0, r4, r1
 8012656:	fa00 f101 	lsl.w	r1, r0, r1
 801265a:	428c      	cmp	r4, r1
 801265c:	d10b      	bne.n	8012676 <__any_on+0x3e>
 801265e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012662:	4293      	cmp	r3, r2
 8012664:	d803      	bhi.n	801266e <__any_on+0x36>
 8012666:	2000      	movs	r0, #0
 8012668:	bd10      	pop	{r4, pc}
 801266a:	4603      	mov	r3, r0
 801266c:	e7f7      	b.n	801265e <__any_on+0x26>
 801266e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012672:	2900      	cmp	r1, #0
 8012674:	d0f5      	beq.n	8012662 <__any_on+0x2a>
 8012676:	2001      	movs	r0, #1
 8012678:	e7f6      	b.n	8012668 <__any_on+0x30>

0801267a <sulp>:
 801267a:	b570      	push	{r4, r5, r6, lr}
 801267c:	4604      	mov	r4, r0
 801267e:	460d      	mov	r5, r1
 8012680:	4616      	mov	r6, r2
 8012682:	ec45 4b10 	vmov	d0, r4, r5
 8012686:	f7ff febd 	bl	8012404 <__ulp>
 801268a:	b17e      	cbz	r6, 80126ac <sulp+0x32>
 801268c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012690:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012694:	2b00      	cmp	r3, #0
 8012696:	dd09      	ble.n	80126ac <sulp+0x32>
 8012698:	051b      	lsls	r3, r3, #20
 801269a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801269e:	2000      	movs	r0, #0
 80126a0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80126a4:	ec41 0b17 	vmov	d7, r0, r1
 80126a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80126ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080126b0 <_strtod_l>:
 80126b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b4:	ed2d 8b0a 	vpush	{d8-d12}
 80126b8:	b097      	sub	sp, #92	@ 0x5c
 80126ba:	4688      	mov	r8, r1
 80126bc:	920e      	str	r2, [sp, #56]	@ 0x38
 80126be:	2200      	movs	r2, #0
 80126c0:	9212      	str	r2, [sp, #72]	@ 0x48
 80126c2:	9005      	str	r0, [sp, #20]
 80126c4:	f04f 0a00 	mov.w	sl, #0
 80126c8:	f04f 0b00 	mov.w	fp, #0
 80126cc:	460a      	mov	r2, r1
 80126ce:	9211      	str	r2, [sp, #68]	@ 0x44
 80126d0:	7811      	ldrb	r1, [r2, #0]
 80126d2:	292b      	cmp	r1, #43	@ 0x2b
 80126d4:	d04c      	beq.n	8012770 <_strtod_l+0xc0>
 80126d6:	d839      	bhi.n	801274c <_strtod_l+0x9c>
 80126d8:	290d      	cmp	r1, #13
 80126da:	d833      	bhi.n	8012744 <_strtod_l+0x94>
 80126dc:	2908      	cmp	r1, #8
 80126de:	d833      	bhi.n	8012748 <_strtod_l+0x98>
 80126e0:	2900      	cmp	r1, #0
 80126e2:	d03c      	beq.n	801275e <_strtod_l+0xae>
 80126e4:	2200      	movs	r2, #0
 80126e6:	9208      	str	r2, [sp, #32]
 80126e8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80126ea:	782a      	ldrb	r2, [r5, #0]
 80126ec:	2a30      	cmp	r2, #48	@ 0x30
 80126ee:	f040 80b5 	bne.w	801285c <_strtod_l+0x1ac>
 80126f2:	786a      	ldrb	r2, [r5, #1]
 80126f4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80126f8:	2a58      	cmp	r2, #88	@ 0x58
 80126fa:	d170      	bne.n	80127de <_strtod_l+0x12e>
 80126fc:	9302      	str	r3, [sp, #8]
 80126fe:	9b08      	ldr	r3, [sp, #32]
 8012700:	9301      	str	r3, [sp, #4]
 8012702:	ab12      	add	r3, sp, #72	@ 0x48
 8012704:	9300      	str	r3, [sp, #0]
 8012706:	4a8b      	ldr	r2, [pc, #556]	@ (8012934 <_strtod_l+0x284>)
 8012708:	9805      	ldr	r0, [sp, #20]
 801270a:	ab13      	add	r3, sp, #76	@ 0x4c
 801270c:	a911      	add	r1, sp, #68	@ 0x44
 801270e:	f001 fa91 	bl	8013c34 <__gethex>
 8012712:	f010 060f 	ands.w	r6, r0, #15
 8012716:	4604      	mov	r4, r0
 8012718:	d005      	beq.n	8012726 <_strtod_l+0x76>
 801271a:	2e06      	cmp	r6, #6
 801271c:	d12a      	bne.n	8012774 <_strtod_l+0xc4>
 801271e:	3501      	adds	r5, #1
 8012720:	2300      	movs	r3, #0
 8012722:	9511      	str	r5, [sp, #68]	@ 0x44
 8012724:	9308      	str	r3, [sp, #32]
 8012726:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012728:	2b00      	cmp	r3, #0
 801272a:	f040 852f 	bne.w	801318c <_strtod_l+0xadc>
 801272e:	9b08      	ldr	r3, [sp, #32]
 8012730:	ec4b ab10 	vmov	d0, sl, fp
 8012734:	b1cb      	cbz	r3, 801276a <_strtod_l+0xba>
 8012736:	eeb1 0b40 	vneg.f64	d0, d0
 801273a:	b017      	add	sp, #92	@ 0x5c
 801273c:	ecbd 8b0a 	vpop	{d8-d12}
 8012740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012744:	2920      	cmp	r1, #32
 8012746:	d1cd      	bne.n	80126e4 <_strtod_l+0x34>
 8012748:	3201      	adds	r2, #1
 801274a:	e7c0      	b.n	80126ce <_strtod_l+0x1e>
 801274c:	292d      	cmp	r1, #45	@ 0x2d
 801274e:	d1c9      	bne.n	80126e4 <_strtod_l+0x34>
 8012750:	2101      	movs	r1, #1
 8012752:	9108      	str	r1, [sp, #32]
 8012754:	1c51      	adds	r1, r2, #1
 8012756:	9111      	str	r1, [sp, #68]	@ 0x44
 8012758:	7852      	ldrb	r2, [r2, #1]
 801275a:	2a00      	cmp	r2, #0
 801275c:	d1c4      	bne.n	80126e8 <_strtod_l+0x38>
 801275e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012760:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012764:	2b00      	cmp	r3, #0
 8012766:	f040 850f 	bne.w	8013188 <_strtod_l+0xad8>
 801276a:	ec4b ab10 	vmov	d0, sl, fp
 801276e:	e7e4      	b.n	801273a <_strtod_l+0x8a>
 8012770:	2100      	movs	r1, #0
 8012772:	e7ee      	b.n	8012752 <_strtod_l+0xa2>
 8012774:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012776:	b13a      	cbz	r2, 8012788 <_strtod_l+0xd8>
 8012778:	2135      	movs	r1, #53	@ 0x35
 801277a:	a814      	add	r0, sp, #80	@ 0x50
 801277c:	f7ff ff39 	bl	80125f2 <__copybits>
 8012780:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012782:	9805      	ldr	r0, [sp, #20]
 8012784:	f7ff fb0a 	bl	8011d9c <_Bfree>
 8012788:	1e73      	subs	r3, r6, #1
 801278a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801278c:	2b04      	cmp	r3, #4
 801278e:	d806      	bhi.n	801279e <_strtod_l+0xee>
 8012790:	e8df f003 	tbb	[pc, r3]
 8012794:	201d0314 	.word	0x201d0314
 8012798:	14          	.byte	0x14
 8012799:	00          	.byte	0x00
 801279a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801279e:	05e3      	lsls	r3, r4, #23
 80127a0:	bf48      	it	mi
 80127a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80127a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80127aa:	0d1b      	lsrs	r3, r3, #20
 80127ac:	051b      	lsls	r3, r3, #20
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d1b9      	bne.n	8012726 <_strtod_l+0x76>
 80127b2:	f7fe fb93 	bl	8010edc <__errno>
 80127b6:	2322      	movs	r3, #34	@ 0x22
 80127b8:	6003      	str	r3, [r0, #0]
 80127ba:	e7b4      	b.n	8012726 <_strtod_l+0x76>
 80127bc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80127c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80127c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80127c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80127cc:	e7e7      	b.n	801279e <_strtod_l+0xee>
 80127ce:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801293c <_strtod_l+0x28c>
 80127d2:	e7e4      	b.n	801279e <_strtod_l+0xee>
 80127d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80127d8:	f04f 3aff 	mov.w	sl, #4294967295
 80127dc:	e7df      	b.n	801279e <_strtod_l+0xee>
 80127de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80127e0:	1c5a      	adds	r2, r3, #1
 80127e2:	9211      	str	r2, [sp, #68]	@ 0x44
 80127e4:	785b      	ldrb	r3, [r3, #1]
 80127e6:	2b30      	cmp	r3, #48	@ 0x30
 80127e8:	d0f9      	beq.n	80127de <_strtod_l+0x12e>
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d09b      	beq.n	8012726 <_strtod_l+0x76>
 80127ee:	2301      	movs	r3, #1
 80127f0:	2600      	movs	r6, #0
 80127f2:	9307      	str	r3, [sp, #28]
 80127f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80127f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80127f8:	46b1      	mov	r9, r6
 80127fa:	4635      	mov	r5, r6
 80127fc:	220a      	movs	r2, #10
 80127fe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012800:	7804      	ldrb	r4, [r0, #0]
 8012802:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8012806:	b2d9      	uxtb	r1, r3
 8012808:	2909      	cmp	r1, #9
 801280a:	d929      	bls.n	8012860 <_strtod_l+0x1b0>
 801280c:	494a      	ldr	r1, [pc, #296]	@ (8012938 <_strtod_l+0x288>)
 801280e:	2201      	movs	r2, #1
 8012810:	f001 f928 	bl	8013a64 <strncmp>
 8012814:	b378      	cbz	r0, 8012876 <_strtod_l+0x1c6>
 8012816:	2000      	movs	r0, #0
 8012818:	4622      	mov	r2, r4
 801281a:	462b      	mov	r3, r5
 801281c:	4607      	mov	r7, r0
 801281e:	9006      	str	r0, [sp, #24]
 8012820:	2a65      	cmp	r2, #101	@ 0x65
 8012822:	d001      	beq.n	8012828 <_strtod_l+0x178>
 8012824:	2a45      	cmp	r2, #69	@ 0x45
 8012826:	d117      	bne.n	8012858 <_strtod_l+0x1a8>
 8012828:	b91b      	cbnz	r3, 8012832 <_strtod_l+0x182>
 801282a:	9b07      	ldr	r3, [sp, #28]
 801282c:	4303      	orrs	r3, r0
 801282e:	d096      	beq.n	801275e <_strtod_l+0xae>
 8012830:	2300      	movs	r3, #0
 8012832:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8012836:	f108 0201 	add.w	r2, r8, #1
 801283a:	9211      	str	r2, [sp, #68]	@ 0x44
 801283c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012840:	2a2b      	cmp	r2, #43	@ 0x2b
 8012842:	d06b      	beq.n	801291c <_strtod_l+0x26c>
 8012844:	2a2d      	cmp	r2, #45	@ 0x2d
 8012846:	d071      	beq.n	801292c <_strtod_l+0x27c>
 8012848:	f04f 0e00 	mov.w	lr, #0
 801284c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012850:	2c09      	cmp	r4, #9
 8012852:	d979      	bls.n	8012948 <_strtod_l+0x298>
 8012854:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012858:	2400      	movs	r4, #0
 801285a:	e094      	b.n	8012986 <_strtod_l+0x2d6>
 801285c:	2300      	movs	r3, #0
 801285e:	e7c7      	b.n	80127f0 <_strtod_l+0x140>
 8012860:	2d08      	cmp	r5, #8
 8012862:	f100 0001 	add.w	r0, r0, #1
 8012866:	bfd4      	ite	le
 8012868:	fb02 3909 	mlale	r9, r2, r9, r3
 801286c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8012870:	3501      	adds	r5, #1
 8012872:	9011      	str	r0, [sp, #68]	@ 0x44
 8012874:	e7c3      	b.n	80127fe <_strtod_l+0x14e>
 8012876:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012878:	1c5a      	adds	r2, r3, #1
 801287a:	9211      	str	r2, [sp, #68]	@ 0x44
 801287c:	785a      	ldrb	r2, [r3, #1]
 801287e:	b375      	cbz	r5, 80128de <_strtod_l+0x22e>
 8012880:	4607      	mov	r7, r0
 8012882:	462b      	mov	r3, r5
 8012884:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012888:	2909      	cmp	r1, #9
 801288a:	d913      	bls.n	80128b4 <_strtod_l+0x204>
 801288c:	2101      	movs	r1, #1
 801288e:	9106      	str	r1, [sp, #24]
 8012890:	e7c6      	b.n	8012820 <_strtod_l+0x170>
 8012892:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012894:	1c5a      	adds	r2, r3, #1
 8012896:	9211      	str	r2, [sp, #68]	@ 0x44
 8012898:	785a      	ldrb	r2, [r3, #1]
 801289a:	3001      	adds	r0, #1
 801289c:	2a30      	cmp	r2, #48	@ 0x30
 801289e:	d0f8      	beq.n	8012892 <_strtod_l+0x1e2>
 80128a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80128a4:	2b08      	cmp	r3, #8
 80128a6:	f200 8476 	bhi.w	8013196 <_strtod_l+0xae6>
 80128aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80128ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80128ae:	4607      	mov	r7, r0
 80128b0:	2000      	movs	r0, #0
 80128b2:	4603      	mov	r3, r0
 80128b4:	3a30      	subs	r2, #48	@ 0x30
 80128b6:	f100 0101 	add.w	r1, r0, #1
 80128ba:	d023      	beq.n	8012904 <_strtod_l+0x254>
 80128bc:	440f      	add	r7, r1
 80128be:	eb00 0c03 	add.w	ip, r0, r3
 80128c2:	4619      	mov	r1, r3
 80128c4:	240a      	movs	r4, #10
 80128c6:	4561      	cmp	r1, ip
 80128c8:	d10b      	bne.n	80128e2 <_strtod_l+0x232>
 80128ca:	1c5c      	adds	r4, r3, #1
 80128cc:	4403      	add	r3, r0
 80128ce:	2b08      	cmp	r3, #8
 80128d0:	4404      	add	r4, r0
 80128d2:	dc11      	bgt.n	80128f8 <_strtod_l+0x248>
 80128d4:	230a      	movs	r3, #10
 80128d6:	fb03 2909 	mla	r9, r3, r9, r2
 80128da:	2100      	movs	r1, #0
 80128dc:	e013      	b.n	8012906 <_strtod_l+0x256>
 80128de:	4628      	mov	r0, r5
 80128e0:	e7dc      	b.n	801289c <_strtod_l+0x1ec>
 80128e2:	2908      	cmp	r1, #8
 80128e4:	f101 0101 	add.w	r1, r1, #1
 80128e8:	dc02      	bgt.n	80128f0 <_strtod_l+0x240>
 80128ea:	fb04 f909 	mul.w	r9, r4, r9
 80128ee:	e7ea      	b.n	80128c6 <_strtod_l+0x216>
 80128f0:	2910      	cmp	r1, #16
 80128f2:	bfd8      	it	le
 80128f4:	4366      	mulle	r6, r4
 80128f6:	e7e6      	b.n	80128c6 <_strtod_l+0x216>
 80128f8:	2b0f      	cmp	r3, #15
 80128fa:	dcee      	bgt.n	80128da <_strtod_l+0x22a>
 80128fc:	230a      	movs	r3, #10
 80128fe:	fb03 2606 	mla	r6, r3, r6, r2
 8012902:	e7ea      	b.n	80128da <_strtod_l+0x22a>
 8012904:	461c      	mov	r4, r3
 8012906:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012908:	1c5a      	adds	r2, r3, #1
 801290a:	9211      	str	r2, [sp, #68]	@ 0x44
 801290c:	785a      	ldrb	r2, [r3, #1]
 801290e:	4608      	mov	r0, r1
 8012910:	4623      	mov	r3, r4
 8012912:	e7b7      	b.n	8012884 <_strtod_l+0x1d4>
 8012914:	2301      	movs	r3, #1
 8012916:	2700      	movs	r7, #0
 8012918:	9306      	str	r3, [sp, #24]
 801291a:	e786      	b.n	801282a <_strtod_l+0x17a>
 801291c:	f04f 0e00 	mov.w	lr, #0
 8012920:	f108 0202 	add.w	r2, r8, #2
 8012924:	9211      	str	r2, [sp, #68]	@ 0x44
 8012926:	f898 2002 	ldrb.w	r2, [r8, #2]
 801292a:	e78f      	b.n	801284c <_strtod_l+0x19c>
 801292c:	f04f 0e01 	mov.w	lr, #1
 8012930:	e7f6      	b.n	8012920 <_strtod_l+0x270>
 8012932:	bf00      	nop
 8012934:	08014630 	.word	0x08014630
 8012938:	08014618 	.word	0x08014618
 801293c:	7ff00000 	.word	0x7ff00000
 8012940:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012942:	1c54      	adds	r4, r2, #1
 8012944:	9411      	str	r4, [sp, #68]	@ 0x44
 8012946:	7852      	ldrb	r2, [r2, #1]
 8012948:	2a30      	cmp	r2, #48	@ 0x30
 801294a:	d0f9      	beq.n	8012940 <_strtod_l+0x290>
 801294c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8012950:	2c08      	cmp	r4, #8
 8012952:	d881      	bhi.n	8012858 <_strtod_l+0x1a8>
 8012954:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8012958:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801295a:	9209      	str	r2, [sp, #36]	@ 0x24
 801295c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801295e:	1c51      	adds	r1, r2, #1
 8012960:	9111      	str	r1, [sp, #68]	@ 0x44
 8012962:	7852      	ldrb	r2, [r2, #1]
 8012964:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012968:	2c09      	cmp	r4, #9
 801296a:	d938      	bls.n	80129de <_strtod_l+0x32e>
 801296c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801296e:	1b0c      	subs	r4, r1, r4
 8012970:	2c08      	cmp	r4, #8
 8012972:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8012976:	dc02      	bgt.n	801297e <_strtod_l+0x2ce>
 8012978:	4564      	cmp	r4, ip
 801297a:	bfa8      	it	ge
 801297c:	4664      	movge	r4, ip
 801297e:	f1be 0f00 	cmp.w	lr, #0
 8012982:	d000      	beq.n	8012986 <_strtod_l+0x2d6>
 8012984:	4264      	negs	r4, r4
 8012986:	2b00      	cmp	r3, #0
 8012988:	d14e      	bne.n	8012a28 <_strtod_l+0x378>
 801298a:	9b07      	ldr	r3, [sp, #28]
 801298c:	4318      	orrs	r0, r3
 801298e:	f47f aeca 	bne.w	8012726 <_strtod_l+0x76>
 8012992:	9b06      	ldr	r3, [sp, #24]
 8012994:	2b00      	cmp	r3, #0
 8012996:	f47f aee2 	bne.w	801275e <_strtod_l+0xae>
 801299a:	2a69      	cmp	r2, #105	@ 0x69
 801299c:	d027      	beq.n	80129ee <_strtod_l+0x33e>
 801299e:	dc24      	bgt.n	80129ea <_strtod_l+0x33a>
 80129a0:	2a49      	cmp	r2, #73	@ 0x49
 80129a2:	d024      	beq.n	80129ee <_strtod_l+0x33e>
 80129a4:	2a4e      	cmp	r2, #78	@ 0x4e
 80129a6:	f47f aeda 	bne.w	801275e <_strtod_l+0xae>
 80129aa:	4997      	ldr	r1, [pc, #604]	@ (8012c08 <_strtod_l+0x558>)
 80129ac:	a811      	add	r0, sp, #68	@ 0x44
 80129ae:	f001 fb63 	bl	8014078 <__match>
 80129b2:	2800      	cmp	r0, #0
 80129b4:	f43f aed3 	beq.w	801275e <_strtod_l+0xae>
 80129b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	2b28      	cmp	r3, #40	@ 0x28
 80129be:	d12d      	bne.n	8012a1c <_strtod_l+0x36c>
 80129c0:	4992      	ldr	r1, [pc, #584]	@ (8012c0c <_strtod_l+0x55c>)
 80129c2:	aa14      	add	r2, sp, #80	@ 0x50
 80129c4:	a811      	add	r0, sp, #68	@ 0x44
 80129c6:	f001 fb6b 	bl	80140a0 <__hexnan>
 80129ca:	2805      	cmp	r0, #5
 80129cc:	d126      	bne.n	8012a1c <_strtod_l+0x36c>
 80129ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80129d0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80129d4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80129d8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80129dc:	e6a3      	b.n	8012726 <_strtod_l+0x76>
 80129de:	240a      	movs	r4, #10
 80129e0:	fb04 2c0c 	mla	ip, r4, ip, r2
 80129e4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80129e8:	e7b8      	b.n	801295c <_strtod_l+0x2ac>
 80129ea:	2a6e      	cmp	r2, #110	@ 0x6e
 80129ec:	e7db      	b.n	80129a6 <_strtod_l+0x2f6>
 80129ee:	4988      	ldr	r1, [pc, #544]	@ (8012c10 <_strtod_l+0x560>)
 80129f0:	a811      	add	r0, sp, #68	@ 0x44
 80129f2:	f001 fb41 	bl	8014078 <__match>
 80129f6:	2800      	cmp	r0, #0
 80129f8:	f43f aeb1 	beq.w	801275e <_strtod_l+0xae>
 80129fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80129fe:	4985      	ldr	r1, [pc, #532]	@ (8012c14 <_strtod_l+0x564>)
 8012a00:	3b01      	subs	r3, #1
 8012a02:	a811      	add	r0, sp, #68	@ 0x44
 8012a04:	9311      	str	r3, [sp, #68]	@ 0x44
 8012a06:	f001 fb37 	bl	8014078 <__match>
 8012a0a:	b910      	cbnz	r0, 8012a12 <_strtod_l+0x362>
 8012a0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012a0e:	3301      	adds	r3, #1
 8012a10:	9311      	str	r3, [sp, #68]	@ 0x44
 8012a12:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8012c28 <_strtod_l+0x578>
 8012a16:	f04f 0a00 	mov.w	sl, #0
 8012a1a:	e684      	b.n	8012726 <_strtod_l+0x76>
 8012a1c:	487e      	ldr	r0, [pc, #504]	@ (8012c18 <_strtod_l+0x568>)
 8012a1e:	f001 f867 	bl	8013af0 <nan>
 8012a22:	ec5b ab10 	vmov	sl, fp, d0
 8012a26:	e67e      	b.n	8012726 <_strtod_l+0x76>
 8012a28:	ee07 9a90 	vmov	s15, r9
 8012a2c:	1be2      	subs	r2, r4, r7
 8012a2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012a32:	2d00      	cmp	r5, #0
 8012a34:	bf08      	it	eq
 8012a36:	461d      	moveq	r5, r3
 8012a38:	2b10      	cmp	r3, #16
 8012a3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a3c:	461a      	mov	r2, r3
 8012a3e:	bfa8      	it	ge
 8012a40:	2210      	movge	r2, #16
 8012a42:	2b09      	cmp	r3, #9
 8012a44:	ec5b ab17 	vmov	sl, fp, d7
 8012a48:	dc15      	bgt.n	8012a76 <_strtod_l+0x3c6>
 8012a4a:	1be1      	subs	r1, r4, r7
 8012a4c:	2900      	cmp	r1, #0
 8012a4e:	f43f ae6a 	beq.w	8012726 <_strtod_l+0x76>
 8012a52:	eba4 0107 	sub.w	r1, r4, r7
 8012a56:	dd72      	ble.n	8012b3e <_strtod_l+0x48e>
 8012a58:	2916      	cmp	r1, #22
 8012a5a:	dc59      	bgt.n	8012b10 <_strtod_l+0x460>
 8012a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8012c1c <_strtod_l+0x56c>)
 8012a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a64:	ed93 7b00 	vldr	d7, [r3]
 8012a68:	ec4b ab16 	vmov	d6, sl, fp
 8012a6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a70:	ec5b ab17 	vmov	sl, fp, d7
 8012a74:	e657      	b.n	8012726 <_strtod_l+0x76>
 8012a76:	4969      	ldr	r1, [pc, #420]	@ (8012c1c <_strtod_l+0x56c>)
 8012a78:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012a7c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8012a80:	ee06 6a90 	vmov	s13, r6
 8012a84:	2b0f      	cmp	r3, #15
 8012a86:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8012a8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012a8e:	ec5b ab16 	vmov	sl, fp, d6
 8012a92:	ddda      	ble.n	8012a4a <_strtod_l+0x39a>
 8012a94:	1a9a      	subs	r2, r3, r2
 8012a96:	1be1      	subs	r1, r4, r7
 8012a98:	440a      	add	r2, r1
 8012a9a:	2a00      	cmp	r2, #0
 8012a9c:	f340 8094 	ble.w	8012bc8 <_strtod_l+0x518>
 8012aa0:	f012 000f 	ands.w	r0, r2, #15
 8012aa4:	d00a      	beq.n	8012abc <_strtod_l+0x40c>
 8012aa6:	495d      	ldr	r1, [pc, #372]	@ (8012c1c <_strtod_l+0x56c>)
 8012aa8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012aac:	ed91 7b00 	vldr	d7, [r1]
 8012ab0:	ec4b ab16 	vmov	d6, sl, fp
 8012ab4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012ab8:	ec5b ab17 	vmov	sl, fp, d7
 8012abc:	f032 020f 	bics.w	r2, r2, #15
 8012ac0:	d073      	beq.n	8012baa <_strtod_l+0x4fa>
 8012ac2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8012ac6:	dd47      	ble.n	8012b58 <_strtod_l+0x4a8>
 8012ac8:	2400      	movs	r4, #0
 8012aca:	4625      	mov	r5, r4
 8012acc:	9407      	str	r4, [sp, #28]
 8012ace:	4626      	mov	r6, r4
 8012ad0:	9a05      	ldr	r2, [sp, #20]
 8012ad2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012c28 <_strtod_l+0x578>
 8012ad6:	2322      	movs	r3, #34	@ 0x22
 8012ad8:	6013      	str	r3, [r2, #0]
 8012ada:	f04f 0a00 	mov.w	sl, #0
 8012ade:	9b07      	ldr	r3, [sp, #28]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	f43f ae20 	beq.w	8012726 <_strtod_l+0x76>
 8012ae6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012ae8:	9805      	ldr	r0, [sp, #20]
 8012aea:	f7ff f957 	bl	8011d9c <_Bfree>
 8012aee:	9805      	ldr	r0, [sp, #20]
 8012af0:	4631      	mov	r1, r6
 8012af2:	f7ff f953 	bl	8011d9c <_Bfree>
 8012af6:	9805      	ldr	r0, [sp, #20]
 8012af8:	4629      	mov	r1, r5
 8012afa:	f7ff f94f 	bl	8011d9c <_Bfree>
 8012afe:	9907      	ldr	r1, [sp, #28]
 8012b00:	9805      	ldr	r0, [sp, #20]
 8012b02:	f7ff f94b 	bl	8011d9c <_Bfree>
 8012b06:	9805      	ldr	r0, [sp, #20]
 8012b08:	4621      	mov	r1, r4
 8012b0a:	f7ff f947 	bl	8011d9c <_Bfree>
 8012b0e:	e60a      	b.n	8012726 <_strtod_l+0x76>
 8012b10:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8012b14:	1be0      	subs	r0, r4, r7
 8012b16:	4281      	cmp	r1, r0
 8012b18:	dbbc      	blt.n	8012a94 <_strtod_l+0x3e4>
 8012b1a:	4a40      	ldr	r2, [pc, #256]	@ (8012c1c <_strtod_l+0x56c>)
 8012b1c:	f1c3 030f 	rsb	r3, r3, #15
 8012b20:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8012b24:	ed91 7b00 	vldr	d7, [r1]
 8012b28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b2a:	ec4b ab16 	vmov	d6, sl, fp
 8012b2e:	1acb      	subs	r3, r1, r3
 8012b30:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012b34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012b38:	ed92 6b00 	vldr	d6, [r2]
 8012b3c:	e796      	b.n	8012a6c <_strtod_l+0x3bc>
 8012b3e:	3116      	adds	r1, #22
 8012b40:	dba8      	blt.n	8012a94 <_strtod_l+0x3e4>
 8012b42:	4b36      	ldr	r3, [pc, #216]	@ (8012c1c <_strtod_l+0x56c>)
 8012b44:	1b3c      	subs	r4, r7, r4
 8012b46:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012b4a:	ed94 7b00 	vldr	d7, [r4]
 8012b4e:	ec4b ab16 	vmov	d6, sl, fp
 8012b52:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012b56:	e78b      	b.n	8012a70 <_strtod_l+0x3c0>
 8012b58:	2000      	movs	r0, #0
 8012b5a:	ec4b ab17 	vmov	d7, sl, fp
 8012b5e:	4e30      	ldr	r6, [pc, #192]	@ (8012c20 <_strtod_l+0x570>)
 8012b60:	1112      	asrs	r2, r2, #4
 8012b62:	4601      	mov	r1, r0
 8012b64:	2a01      	cmp	r2, #1
 8012b66:	dc23      	bgt.n	8012bb0 <_strtod_l+0x500>
 8012b68:	b108      	cbz	r0, 8012b6e <_strtod_l+0x4be>
 8012b6a:	ec5b ab17 	vmov	sl, fp, d7
 8012b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8012c20 <_strtod_l+0x570>)
 8012b70:	482c      	ldr	r0, [pc, #176]	@ (8012c24 <_strtod_l+0x574>)
 8012b72:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012b76:	ed92 7b00 	vldr	d7, [r2]
 8012b7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012b7e:	ec4b ab16 	vmov	d6, sl, fp
 8012b82:	4a29      	ldr	r2, [pc, #164]	@ (8012c28 <_strtod_l+0x578>)
 8012b84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012b88:	ee17 1a90 	vmov	r1, s15
 8012b8c:	400a      	ands	r2, r1
 8012b8e:	4282      	cmp	r2, r0
 8012b90:	ec5b ab17 	vmov	sl, fp, d7
 8012b94:	d898      	bhi.n	8012ac8 <_strtod_l+0x418>
 8012b96:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8012b9a:	4282      	cmp	r2, r0
 8012b9c:	bf86      	itte	hi
 8012b9e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8012c2c <_strtod_l+0x57c>
 8012ba2:	f04f 3aff 	movhi.w	sl, #4294967295
 8012ba6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8012baa:	2200      	movs	r2, #0
 8012bac:	9206      	str	r2, [sp, #24]
 8012bae:	e076      	b.n	8012c9e <_strtod_l+0x5ee>
 8012bb0:	f012 0f01 	tst.w	r2, #1
 8012bb4:	d004      	beq.n	8012bc0 <_strtod_l+0x510>
 8012bb6:	ed96 6b00 	vldr	d6, [r6]
 8012bba:	2001      	movs	r0, #1
 8012bbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012bc0:	3101      	adds	r1, #1
 8012bc2:	1052      	asrs	r2, r2, #1
 8012bc4:	3608      	adds	r6, #8
 8012bc6:	e7cd      	b.n	8012b64 <_strtod_l+0x4b4>
 8012bc8:	d0ef      	beq.n	8012baa <_strtod_l+0x4fa>
 8012bca:	4252      	negs	r2, r2
 8012bcc:	f012 000f 	ands.w	r0, r2, #15
 8012bd0:	d00a      	beq.n	8012be8 <_strtod_l+0x538>
 8012bd2:	4912      	ldr	r1, [pc, #72]	@ (8012c1c <_strtod_l+0x56c>)
 8012bd4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012bd8:	ed91 7b00 	vldr	d7, [r1]
 8012bdc:	ec4b ab16 	vmov	d6, sl, fp
 8012be0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012be4:	ec5b ab17 	vmov	sl, fp, d7
 8012be8:	1112      	asrs	r2, r2, #4
 8012bea:	d0de      	beq.n	8012baa <_strtod_l+0x4fa>
 8012bec:	2a1f      	cmp	r2, #31
 8012bee:	dd1f      	ble.n	8012c30 <_strtod_l+0x580>
 8012bf0:	2400      	movs	r4, #0
 8012bf2:	4625      	mov	r5, r4
 8012bf4:	9407      	str	r4, [sp, #28]
 8012bf6:	4626      	mov	r6, r4
 8012bf8:	9a05      	ldr	r2, [sp, #20]
 8012bfa:	2322      	movs	r3, #34	@ 0x22
 8012bfc:	f04f 0a00 	mov.w	sl, #0
 8012c00:	f04f 0b00 	mov.w	fp, #0
 8012c04:	6013      	str	r3, [r2, #0]
 8012c06:	e76a      	b.n	8012ade <_strtod_l+0x42e>
 8012c08:	08014405 	.word	0x08014405
 8012c0c:	0801461c 	.word	0x0801461c
 8012c10:	080143fd 	.word	0x080143fd
 8012c14:	08014434 	.word	0x08014434
 8012c18:	080147c5 	.word	0x080147c5
 8012c1c:	08014550 	.word	0x08014550
 8012c20:	08014528 	.word	0x08014528
 8012c24:	7ca00000 	.word	0x7ca00000
 8012c28:	7ff00000 	.word	0x7ff00000
 8012c2c:	7fefffff 	.word	0x7fefffff
 8012c30:	f012 0110 	ands.w	r1, r2, #16
 8012c34:	bf18      	it	ne
 8012c36:	216a      	movne	r1, #106	@ 0x6a
 8012c38:	9106      	str	r1, [sp, #24]
 8012c3a:	ec4b ab17 	vmov	d7, sl, fp
 8012c3e:	49b0      	ldr	r1, [pc, #704]	@ (8012f00 <_strtod_l+0x850>)
 8012c40:	2000      	movs	r0, #0
 8012c42:	07d6      	lsls	r6, r2, #31
 8012c44:	d504      	bpl.n	8012c50 <_strtod_l+0x5a0>
 8012c46:	ed91 6b00 	vldr	d6, [r1]
 8012c4a:	2001      	movs	r0, #1
 8012c4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c50:	1052      	asrs	r2, r2, #1
 8012c52:	f101 0108 	add.w	r1, r1, #8
 8012c56:	d1f4      	bne.n	8012c42 <_strtod_l+0x592>
 8012c58:	b108      	cbz	r0, 8012c5e <_strtod_l+0x5ae>
 8012c5a:	ec5b ab17 	vmov	sl, fp, d7
 8012c5e:	9a06      	ldr	r2, [sp, #24]
 8012c60:	b1b2      	cbz	r2, 8012c90 <_strtod_l+0x5e0>
 8012c62:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8012c66:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8012c6a:	2a00      	cmp	r2, #0
 8012c6c:	4658      	mov	r0, fp
 8012c6e:	dd0f      	ble.n	8012c90 <_strtod_l+0x5e0>
 8012c70:	2a1f      	cmp	r2, #31
 8012c72:	dd55      	ble.n	8012d20 <_strtod_l+0x670>
 8012c74:	2a34      	cmp	r2, #52	@ 0x34
 8012c76:	bfde      	ittt	le
 8012c78:	f04f 32ff 	movle.w	r2, #4294967295
 8012c7c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8012c80:	408a      	lslle	r2, r1
 8012c82:	f04f 0a00 	mov.w	sl, #0
 8012c86:	bfcc      	ite	gt
 8012c88:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012c8c:	ea02 0b00 	andle.w	fp, r2, r0
 8012c90:	ec4b ab17 	vmov	d7, sl, fp
 8012c94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9c:	d0a8      	beq.n	8012bf0 <_strtod_l+0x540>
 8012c9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012ca0:	9805      	ldr	r0, [sp, #20]
 8012ca2:	f8cd 9000 	str.w	r9, [sp]
 8012ca6:	462a      	mov	r2, r5
 8012ca8:	f7ff f8e0 	bl	8011e6c <__s2b>
 8012cac:	9007      	str	r0, [sp, #28]
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	f43f af0a 	beq.w	8012ac8 <_strtod_l+0x418>
 8012cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cb6:	1b3f      	subs	r7, r7, r4
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	bfb4      	ite	lt
 8012cbc:	463b      	movlt	r3, r7
 8012cbe:	2300      	movge	r3, #0
 8012cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8012cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cc4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8012ef0 <_strtod_l+0x840>
 8012cc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012ccc:	2400      	movs	r4, #0
 8012cce:	930d      	str	r3, [sp, #52]	@ 0x34
 8012cd0:	4625      	mov	r5, r4
 8012cd2:	9b07      	ldr	r3, [sp, #28]
 8012cd4:	9805      	ldr	r0, [sp, #20]
 8012cd6:	6859      	ldr	r1, [r3, #4]
 8012cd8:	f7ff f820 	bl	8011d1c <_Balloc>
 8012cdc:	4606      	mov	r6, r0
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	f43f aef6 	beq.w	8012ad0 <_strtod_l+0x420>
 8012ce4:	9b07      	ldr	r3, [sp, #28]
 8012ce6:	691a      	ldr	r2, [r3, #16]
 8012ce8:	ec4b ab19 	vmov	d9, sl, fp
 8012cec:	3202      	adds	r2, #2
 8012cee:	f103 010c 	add.w	r1, r3, #12
 8012cf2:	0092      	lsls	r2, r2, #2
 8012cf4:	300c      	adds	r0, #12
 8012cf6:	f7fe f91e 	bl	8010f36 <memcpy>
 8012cfa:	eeb0 0b49 	vmov.f64	d0, d9
 8012cfe:	9805      	ldr	r0, [sp, #20]
 8012d00:	aa14      	add	r2, sp, #80	@ 0x50
 8012d02:	a913      	add	r1, sp, #76	@ 0x4c
 8012d04:	f7ff fbee 	bl	80124e4 <__d2b>
 8012d08:	9012      	str	r0, [sp, #72]	@ 0x48
 8012d0a:	2800      	cmp	r0, #0
 8012d0c:	f43f aee0 	beq.w	8012ad0 <_strtod_l+0x420>
 8012d10:	9805      	ldr	r0, [sp, #20]
 8012d12:	2101      	movs	r1, #1
 8012d14:	f7ff f940 	bl	8011f98 <__i2b>
 8012d18:	4605      	mov	r5, r0
 8012d1a:	b940      	cbnz	r0, 8012d2e <_strtod_l+0x67e>
 8012d1c:	2500      	movs	r5, #0
 8012d1e:	e6d7      	b.n	8012ad0 <_strtod_l+0x420>
 8012d20:	f04f 31ff 	mov.w	r1, #4294967295
 8012d24:	fa01 f202 	lsl.w	r2, r1, r2
 8012d28:	ea02 0a0a 	and.w	sl, r2, sl
 8012d2c:	e7b0      	b.n	8012c90 <_strtod_l+0x5e0>
 8012d2e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8012d30:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012d32:	2f00      	cmp	r7, #0
 8012d34:	bfab      	itete	ge
 8012d36:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8012d38:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8012d3a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8012d3e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8012d42:	bfac      	ite	ge
 8012d44:	eb07 0903 	addge.w	r9, r7, r3
 8012d48:	eba3 0807 	sublt.w	r8, r3, r7
 8012d4c:	9b06      	ldr	r3, [sp, #24]
 8012d4e:	1aff      	subs	r7, r7, r3
 8012d50:	4417      	add	r7, r2
 8012d52:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8012d56:	4a6b      	ldr	r2, [pc, #428]	@ (8012f04 <_strtod_l+0x854>)
 8012d58:	3f01      	subs	r7, #1
 8012d5a:	4297      	cmp	r7, r2
 8012d5c:	da51      	bge.n	8012e02 <_strtod_l+0x752>
 8012d5e:	1bd1      	subs	r1, r2, r7
 8012d60:	291f      	cmp	r1, #31
 8012d62:	eba3 0301 	sub.w	r3, r3, r1
 8012d66:	f04f 0201 	mov.w	r2, #1
 8012d6a:	dc3e      	bgt.n	8012dea <_strtod_l+0x73a>
 8012d6c:	408a      	lsls	r2, r1
 8012d6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012d70:	2200      	movs	r2, #0
 8012d72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012d74:	eb09 0703 	add.w	r7, r9, r3
 8012d78:	4498      	add	r8, r3
 8012d7a:	9b06      	ldr	r3, [sp, #24]
 8012d7c:	45b9      	cmp	r9, r7
 8012d7e:	4498      	add	r8, r3
 8012d80:	464b      	mov	r3, r9
 8012d82:	bfa8      	it	ge
 8012d84:	463b      	movge	r3, r7
 8012d86:	4543      	cmp	r3, r8
 8012d88:	bfa8      	it	ge
 8012d8a:	4643      	movge	r3, r8
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	bfc2      	ittt	gt
 8012d90:	1aff      	subgt	r7, r7, r3
 8012d92:	eba8 0803 	subgt.w	r8, r8, r3
 8012d96:	eba9 0903 	subgt.w	r9, r9, r3
 8012d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	dd16      	ble.n	8012dce <_strtod_l+0x71e>
 8012da0:	4629      	mov	r1, r5
 8012da2:	9805      	ldr	r0, [sp, #20]
 8012da4:	461a      	mov	r2, r3
 8012da6:	f7ff f9b7 	bl	8012118 <__pow5mult>
 8012daa:	4605      	mov	r5, r0
 8012dac:	2800      	cmp	r0, #0
 8012dae:	d0b5      	beq.n	8012d1c <_strtod_l+0x66c>
 8012db0:	4601      	mov	r1, r0
 8012db2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012db4:	9805      	ldr	r0, [sp, #20]
 8012db6:	f7ff f905 	bl	8011fc4 <__multiply>
 8012dba:	900f      	str	r0, [sp, #60]	@ 0x3c
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	f43f ae87 	beq.w	8012ad0 <_strtod_l+0x420>
 8012dc2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012dc4:	9805      	ldr	r0, [sp, #20]
 8012dc6:	f7fe ffe9 	bl	8011d9c <_Bfree>
 8012dca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dcc:	9312      	str	r3, [sp, #72]	@ 0x48
 8012dce:	2f00      	cmp	r7, #0
 8012dd0:	dc1b      	bgt.n	8012e0a <_strtod_l+0x75a>
 8012dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	dd21      	ble.n	8012e1c <_strtod_l+0x76c>
 8012dd8:	4631      	mov	r1, r6
 8012dda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ddc:	9805      	ldr	r0, [sp, #20]
 8012dde:	f7ff f99b 	bl	8012118 <__pow5mult>
 8012de2:	4606      	mov	r6, r0
 8012de4:	b9d0      	cbnz	r0, 8012e1c <_strtod_l+0x76c>
 8012de6:	2600      	movs	r6, #0
 8012de8:	e672      	b.n	8012ad0 <_strtod_l+0x420>
 8012dea:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8012dee:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8012df2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8012df6:	37e2      	adds	r7, #226	@ 0xe2
 8012df8:	fa02 f107 	lsl.w	r1, r2, r7
 8012dfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012dfe:	920c      	str	r2, [sp, #48]	@ 0x30
 8012e00:	e7b8      	b.n	8012d74 <_strtod_l+0x6c4>
 8012e02:	2200      	movs	r2, #0
 8012e04:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012e06:	2201      	movs	r2, #1
 8012e08:	e7f9      	b.n	8012dfe <_strtod_l+0x74e>
 8012e0a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012e0c:	9805      	ldr	r0, [sp, #20]
 8012e0e:	463a      	mov	r2, r7
 8012e10:	f7ff f9dc 	bl	80121cc <__lshift>
 8012e14:	9012      	str	r0, [sp, #72]	@ 0x48
 8012e16:	2800      	cmp	r0, #0
 8012e18:	d1db      	bne.n	8012dd2 <_strtod_l+0x722>
 8012e1a:	e659      	b.n	8012ad0 <_strtod_l+0x420>
 8012e1c:	f1b8 0f00 	cmp.w	r8, #0
 8012e20:	dd07      	ble.n	8012e32 <_strtod_l+0x782>
 8012e22:	4631      	mov	r1, r6
 8012e24:	9805      	ldr	r0, [sp, #20]
 8012e26:	4642      	mov	r2, r8
 8012e28:	f7ff f9d0 	bl	80121cc <__lshift>
 8012e2c:	4606      	mov	r6, r0
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d0d9      	beq.n	8012de6 <_strtod_l+0x736>
 8012e32:	f1b9 0f00 	cmp.w	r9, #0
 8012e36:	dd08      	ble.n	8012e4a <_strtod_l+0x79a>
 8012e38:	4629      	mov	r1, r5
 8012e3a:	9805      	ldr	r0, [sp, #20]
 8012e3c:	464a      	mov	r2, r9
 8012e3e:	f7ff f9c5 	bl	80121cc <__lshift>
 8012e42:	4605      	mov	r5, r0
 8012e44:	2800      	cmp	r0, #0
 8012e46:	f43f ae43 	beq.w	8012ad0 <_strtod_l+0x420>
 8012e4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012e4c:	9805      	ldr	r0, [sp, #20]
 8012e4e:	4632      	mov	r2, r6
 8012e50:	f7ff fa44 	bl	80122dc <__mdiff>
 8012e54:	4604      	mov	r4, r0
 8012e56:	2800      	cmp	r0, #0
 8012e58:	f43f ae3a 	beq.w	8012ad0 <_strtod_l+0x420>
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8012e62:	60c3      	str	r3, [r0, #12]
 8012e64:	4629      	mov	r1, r5
 8012e66:	f7ff fa1d 	bl	80122a4 <__mcmp>
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	da4e      	bge.n	8012f0c <_strtod_l+0x85c>
 8012e6e:	ea58 080a 	orrs.w	r8, r8, sl
 8012e72:	d174      	bne.n	8012f5e <_strtod_l+0x8ae>
 8012e74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d170      	bne.n	8012f5e <_strtod_l+0x8ae>
 8012e7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012e80:	0d1b      	lsrs	r3, r3, #20
 8012e82:	051b      	lsls	r3, r3, #20
 8012e84:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012e88:	d969      	bls.n	8012f5e <_strtod_l+0x8ae>
 8012e8a:	6963      	ldr	r3, [r4, #20]
 8012e8c:	b913      	cbnz	r3, 8012e94 <_strtod_l+0x7e4>
 8012e8e:	6923      	ldr	r3, [r4, #16]
 8012e90:	2b01      	cmp	r3, #1
 8012e92:	dd64      	ble.n	8012f5e <_strtod_l+0x8ae>
 8012e94:	4621      	mov	r1, r4
 8012e96:	2201      	movs	r2, #1
 8012e98:	9805      	ldr	r0, [sp, #20]
 8012e9a:	f7ff f997 	bl	80121cc <__lshift>
 8012e9e:	4629      	mov	r1, r5
 8012ea0:	4604      	mov	r4, r0
 8012ea2:	f7ff f9ff 	bl	80122a4 <__mcmp>
 8012ea6:	2800      	cmp	r0, #0
 8012ea8:	dd59      	ble.n	8012f5e <_strtod_l+0x8ae>
 8012eaa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012eae:	9a06      	ldr	r2, [sp, #24]
 8012eb0:	0d1b      	lsrs	r3, r3, #20
 8012eb2:	051b      	lsls	r3, r3, #20
 8012eb4:	2a00      	cmp	r2, #0
 8012eb6:	d070      	beq.n	8012f9a <_strtod_l+0x8ea>
 8012eb8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012ebc:	d86d      	bhi.n	8012f9a <_strtod_l+0x8ea>
 8012ebe:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012ec2:	f67f ae99 	bls.w	8012bf8 <_strtod_l+0x548>
 8012ec6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8012ef8 <_strtod_l+0x848>
 8012eca:	ec4b ab16 	vmov	d6, sl, fp
 8012ece:	4b0e      	ldr	r3, [pc, #56]	@ (8012f08 <_strtod_l+0x858>)
 8012ed0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012ed4:	ee17 2a90 	vmov	r2, s15
 8012ed8:	4013      	ands	r3, r2
 8012eda:	ec5b ab17 	vmov	sl, fp, d7
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	f47f ae01 	bne.w	8012ae6 <_strtod_l+0x436>
 8012ee4:	9a05      	ldr	r2, [sp, #20]
 8012ee6:	2322      	movs	r3, #34	@ 0x22
 8012ee8:	6013      	str	r3, [r2, #0]
 8012eea:	e5fc      	b.n	8012ae6 <_strtod_l+0x436>
 8012eec:	f3af 8000 	nop.w
 8012ef0:	ffc00000 	.word	0xffc00000
 8012ef4:	41dfffff 	.word	0x41dfffff
 8012ef8:	00000000 	.word	0x00000000
 8012efc:	39500000 	.word	0x39500000
 8012f00:	08014648 	.word	0x08014648
 8012f04:	fffffc02 	.word	0xfffffc02
 8012f08:	7ff00000 	.word	0x7ff00000
 8012f0c:	46d9      	mov	r9, fp
 8012f0e:	d15d      	bne.n	8012fcc <_strtod_l+0x91c>
 8012f10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012f14:	f1b8 0f00 	cmp.w	r8, #0
 8012f18:	d02a      	beq.n	8012f70 <_strtod_l+0x8c0>
 8012f1a:	4aab      	ldr	r2, [pc, #684]	@ (80131c8 <_strtod_l+0xb18>)
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d12a      	bne.n	8012f76 <_strtod_l+0x8c6>
 8012f20:	9b06      	ldr	r3, [sp, #24]
 8012f22:	4652      	mov	r2, sl
 8012f24:	b1fb      	cbz	r3, 8012f66 <_strtod_l+0x8b6>
 8012f26:	4ba9      	ldr	r3, [pc, #676]	@ (80131cc <_strtod_l+0xb1c>)
 8012f28:	ea0b 0303 	and.w	r3, fp, r3
 8012f2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012f30:	f04f 31ff 	mov.w	r1, #4294967295
 8012f34:	d81a      	bhi.n	8012f6c <_strtod_l+0x8bc>
 8012f36:	0d1b      	lsrs	r3, r3, #20
 8012f38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d118      	bne.n	8012f76 <_strtod_l+0x8c6>
 8012f44:	4ba2      	ldr	r3, [pc, #648]	@ (80131d0 <_strtod_l+0xb20>)
 8012f46:	4599      	cmp	r9, r3
 8012f48:	d102      	bne.n	8012f50 <_strtod_l+0x8a0>
 8012f4a:	3201      	adds	r2, #1
 8012f4c:	f43f adc0 	beq.w	8012ad0 <_strtod_l+0x420>
 8012f50:	4b9e      	ldr	r3, [pc, #632]	@ (80131cc <_strtod_l+0xb1c>)
 8012f52:	ea09 0303 	and.w	r3, r9, r3
 8012f56:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8012f5a:	f04f 0a00 	mov.w	sl, #0
 8012f5e:	9b06      	ldr	r3, [sp, #24]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d1b0      	bne.n	8012ec6 <_strtod_l+0x816>
 8012f64:	e5bf      	b.n	8012ae6 <_strtod_l+0x436>
 8012f66:	f04f 33ff 	mov.w	r3, #4294967295
 8012f6a:	e7e9      	b.n	8012f40 <_strtod_l+0x890>
 8012f6c:	460b      	mov	r3, r1
 8012f6e:	e7e7      	b.n	8012f40 <_strtod_l+0x890>
 8012f70:	ea53 030a 	orrs.w	r3, r3, sl
 8012f74:	d099      	beq.n	8012eaa <_strtod_l+0x7fa>
 8012f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f78:	b1c3      	cbz	r3, 8012fac <_strtod_l+0x8fc>
 8012f7a:	ea13 0f09 	tst.w	r3, r9
 8012f7e:	d0ee      	beq.n	8012f5e <_strtod_l+0x8ae>
 8012f80:	9a06      	ldr	r2, [sp, #24]
 8012f82:	4650      	mov	r0, sl
 8012f84:	4659      	mov	r1, fp
 8012f86:	f1b8 0f00 	cmp.w	r8, #0
 8012f8a:	d013      	beq.n	8012fb4 <_strtod_l+0x904>
 8012f8c:	f7ff fb75 	bl	801267a <sulp>
 8012f90:	ee39 7b00 	vadd.f64	d7, d9, d0
 8012f94:	ec5b ab17 	vmov	sl, fp, d7
 8012f98:	e7e1      	b.n	8012f5e <_strtod_l+0x8ae>
 8012f9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012f9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012fa2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012fa6:	f04f 3aff 	mov.w	sl, #4294967295
 8012faa:	e7d8      	b.n	8012f5e <_strtod_l+0x8ae>
 8012fac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012fae:	ea13 0f0a 	tst.w	r3, sl
 8012fb2:	e7e4      	b.n	8012f7e <_strtod_l+0x8ce>
 8012fb4:	f7ff fb61 	bl	801267a <sulp>
 8012fb8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8012fbc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc4:	ec5b ab10 	vmov	sl, fp, d0
 8012fc8:	d1c9      	bne.n	8012f5e <_strtod_l+0x8ae>
 8012fca:	e615      	b.n	8012bf8 <_strtod_l+0x548>
 8012fcc:	4629      	mov	r1, r5
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f7ff fae0 	bl	8012594 <__ratio>
 8012fd4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8012fd8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fe0:	d85d      	bhi.n	801309e <_strtod_l+0x9ee>
 8012fe2:	f1b8 0f00 	cmp.w	r8, #0
 8012fe6:	d164      	bne.n	80130b2 <_strtod_l+0xa02>
 8012fe8:	f1ba 0f00 	cmp.w	sl, #0
 8012fec:	d14b      	bne.n	8013086 <_strtod_l+0x9d6>
 8012fee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ff2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d160      	bne.n	80130bc <_strtod_l+0xa0c>
 8012ffa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8012ffe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013006:	d401      	bmi.n	801300c <_strtod_l+0x95c>
 8013008:	ee20 8b08 	vmul.f64	d8, d0, d8
 801300c:	eeb1 ab48 	vneg.f64	d10, d8
 8013010:	486e      	ldr	r0, [pc, #440]	@ (80131cc <_strtod_l+0xb1c>)
 8013012:	4970      	ldr	r1, [pc, #448]	@ (80131d4 <_strtod_l+0xb24>)
 8013014:	ea09 0700 	and.w	r7, r9, r0
 8013018:	428f      	cmp	r7, r1
 801301a:	ec53 2b1a 	vmov	r2, r3, d10
 801301e:	d17d      	bne.n	801311c <_strtod_l+0xa6c>
 8013020:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8013024:	ec4b ab1c 	vmov	d12, sl, fp
 8013028:	eeb0 0b4c 	vmov.f64	d0, d12
 801302c:	f7ff f9ea 	bl	8012404 <__ulp>
 8013030:	4866      	ldr	r0, [pc, #408]	@ (80131cc <_strtod_l+0xb1c>)
 8013032:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8013036:	ee1c 3a90 	vmov	r3, s25
 801303a:	4a67      	ldr	r2, [pc, #412]	@ (80131d8 <_strtod_l+0xb28>)
 801303c:	ea03 0100 	and.w	r1, r3, r0
 8013040:	4291      	cmp	r1, r2
 8013042:	ec5b ab1c 	vmov	sl, fp, d12
 8013046:	d93c      	bls.n	80130c2 <_strtod_l+0xa12>
 8013048:	ee19 2a90 	vmov	r2, s19
 801304c:	4b60      	ldr	r3, [pc, #384]	@ (80131d0 <_strtod_l+0xb20>)
 801304e:	429a      	cmp	r2, r3
 8013050:	d104      	bne.n	801305c <_strtod_l+0x9ac>
 8013052:	ee19 3a10 	vmov	r3, s18
 8013056:	3301      	adds	r3, #1
 8013058:	f43f ad3a 	beq.w	8012ad0 <_strtod_l+0x420>
 801305c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80131d0 <_strtod_l+0xb20>
 8013060:	f04f 3aff 	mov.w	sl, #4294967295
 8013064:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013066:	9805      	ldr	r0, [sp, #20]
 8013068:	f7fe fe98 	bl	8011d9c <_Bfree>
 801306c:	9805      	ldr	r0, [sp, #20]
 801306e:	4631      	mov	r1, r6
 8013070:	f7fe fe94 	bl	8011d9c <_Bfree>
 8013074:	9805      	ldr	r0, [sp, #20]
 8013076:	4629      	mov	r1, r5
 8013078:	f7fe fe90 	bl	8011d9c <_Bfree>
 801307c:	9805      	ldr	r0, [sp, #20]
 801307e:	4621      	mov	r1, r4
 8013080:	f7fe fe8c 	bl	8011d9c <_Bfree>
 8013084:	e625      	b.n	8012cd2 <_strtod_l+0x622>
 8013086:	f1ba 0f01 	cmp.w	sl, #1
 801308a:	d103      	bne.n	8013094 <_strtod_l+0x9e4>
 801308c:	f1bb 0f00 	cmp.w	fp, #0
 8013090:	f43f adb2 	beq.w	8012bf8 <_strtod_l+0x548>
 8013094:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013098:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801309c:	e7b8      	b.n	8013010 <_strtod_l+0x960>
 801309e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80130a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80130a6:	f1b8 0f00 	cmp.w	r8, #0
 80130aa:	d0af      	beq.n	801300c <_strtod_l+0x95c>
 80130ac:	eeb0 ab48 	vmov.f64	d10, d8
 80130b0:	e7ae      	b.n	8013010 <_strtod_l+0x960>
 80130b2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80130b6:	eeb0 8b4a 	vmov.f64	d8, d10
 80130ba:	e7a9      	b.n	8013010 <_strtod_l+0x960>
 80130bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80130c0:	e7a6      	b.n	8013010 <_strtod_l+0x960>
 80130c2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80130c6:	9b06      	ldr	r3, [sp, #24]
 80130c8:	46d9      	mov	r9, fp
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d1ca      	bne.n	8013064 <_strtod_l+0x9b4>
 80130ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80130d2:	0d1b      	lsrs	r3, r3, #20
 80130d4:	051b      	lsls	r3, r3, #20
 80130d6:	429f      	cmp	r7, r3
 80130d8:	d1c4      	bne.n	8013064 <_strtod_l+0x9b4>
 80130da:	ec51 0b18 	vmov	r0, r1, d8
 80130de:	f7ed fb43 	bl	8000768 <__aeabi_d2lz>
 80130e2:	f7ed fafb 	bl	80006dc <__aeabi_l2d>
 80130e6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80130ea:	ec41 0b17 	vmov	d7, r0, r1
 80130ee:	ea49 090a 	orr.w	r9, r9, sl
 80130f2:	ea59 0908 	orrs.w	r9, r9, r8
 80130f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80130fa:	d03c      	beq.n	8013176 <_strtod_l+0xac6>
 80130fc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80131b0 <_strtod_l+0xb00>
 8013100:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013108:	f53f aced 	bmi.w	8012ae6 <_strtod_l+0x436>
 801310c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80131b8 <_strtod_l+0xb08>
 8013110:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013118:	dda4      	ble.n	8013064 <_strtod_l+0x9b4>
 801311a:	e4e4      	b.n	8012ae6 <_strtod_l+0x436>
 801311c:	9906      	ldr	r1, [sp, #24]
 801311e:	b1e1      	cbz	r1, 801315a <_strtod_l+0xaaa>
 8013120:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8013124:	d819      	bhi.n	801315a <_strtod_l+0xaaa>
 8013126:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312e:	d811      	bhi.n	8013154 <_strtod_l+0xaa4>
 8013130:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8013134:	ee18 3a10 	vmov	r3, s16
 8013138:	2b01      	cmp	r3, #1
 801313a:	bf38      	it	cc
 801313c:	2301      	movcc	r3, #1
 801313e:	ee08 3a10 	vmov	s16, r3
 8013142:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8013146:	f1b8 0f00 	cmp.w	r8, #0
 801314a:	d111      	bne.n	8013170 <_strtod_l+0xac0>
 801314c:	eeb1 7b48 	vneg.f64	d7, d8
 8013150:	ec53 2b17 	vmov	r2, r3, d7
 8013154:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8013158:	1bcb      	subs	r3, r1, r7
 801315a:	eeb0 0b49 	vmov.f64	d0, d9
 801315e:	ec43 2b1a 	vmov	d10, r2, r3
 8013162:	f7ff f94f 	bl	8012404 <__ulp>
 8013166:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801316a:	ec5b ab19 	vmov	sl, fp, d9
 801316e:	e7aa      	b.n	80130c6 <_strtod_l+0xa16>
 8013170:	eeb0 7b48 	vmov.f64	d7, d8
 8013174:	e7ec      	b.n	8013150 <_strtod_l+0xaa0>
 8013176:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80131c0 <_strtod_l+0xb10>
 801317a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801317e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013182:	f57f af6f 	bpl.w	8013064 <_strtod_l+0x9b4>
 8013186:	e4ae      	b.n	8012ae6 <_strtod_l+0x436>
 8013188:	2300      	movs	r3, #0
 801318a:	9308      	str	r3, [sp, #32]
 801318c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801318e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013190:	6013      	str	r3, [r2, #0]
 8013192:	f7ff bacc 	b.w	801272e <_strtod_l+0x7e>
 8013196:	2a65      	cmp	r2, #101	@ 0x65
 8013198:	f43f abbc 	beq.w	8012914 <_strtod_l+0x264>
 801319c:	2a45      	cmp	r2, #69	@ 0x45
 801319e:	f43f abb9 	beq.w	8012914 <_strtod_l+0x264>
 80131a2:	2301      	movs	r3, #1
 80131a4:	9306      	str	r3, [sp, #24]
 80131a6:	f7ff bbf0 	b.w	801298a <_strtod_l+0x2da>
 80131aa:	bf00      	nop
 80131ac:	f3af 8000 	nop.w
 80131b0:	94a03595 	.word	0x94a03595
 80131b4:	3fdfffff 	.word	0x3fdfffff
 80131b8:	35afe535 	.word	0x35afe535
 80131bc:	3fe00000 	.word	0x3fe00000
 80131c0:	94a03595 	.word	0x94a03595
 80131c4:	3fcfffff 	.word	0x3fcfffff
 80131c8:	000fffff 	.word	0x000fffff
 80131cc:	7ff00000 	.word	0x7ff00000
 80131d0:	7fefffff 	.word	0x7fefffff
 80131d4:	7fe00000 	.word	0x7fe00000
 80131d8:	7c9fffff 	.word	0x7c9fffff

080131dc <_strtod_r>:
 80131dc:	4b01      	ldr	r3, [pc, #4]	@ (80131e4 <_strtod_r+0x8>)
 80131de:	f7ff ba67 	b.w	80126b0 <_strtod_l>
 80131e2:	bf00      	nop
 80131e4:	2400006c 	.word	0x2400006c

080131e8 <_strtol_l.constprop.0>:
 80131e8:	2b24      	cmp	r3, #36	@ 0x24
 80131ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131ee:	4686      	mov	lr, r0
 80131f0:	4690      	mov	r8, r2
 80131f2:	d801      	bhi.n	80131f8 <_strtol_l.constprop.0+0x10>
 80131f4:	2b01      	cmp	r3, #1
 80131f6:	d106      	bne.n	8013206 <_strtol_l.constprop.0+0x1e>
 80131f8:	f7fd fe70 	bl	8010edc <__errno>
 80131fc:	2316      	movs	r3, #22
 80131fe:	6003      	str	r3, [r0, #0]
 8013200:	2000      	movs	r0, #0
 8013202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013206:	4834      	ldr	r0, [pc, #208]	@ (80132d8 <_strtol_l.constprop.0+0xf0>)
 8013208:	460d      	mov	r5, r1
 801320a:	462a      	mov	r2, r5
 801320c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013210:	5d06      	ldrb	r6, [r0, r4]
 8013212:	f016 0608 	ands.w	r6, r6, #8
 8013216:	d1f8      	bne.n	801320a <_strtol_l.constprop.0+0x22>
 8013218:	2c2d      	cmp	r4, #45	@ 0x2d
 801321a:	d12d      	bne.n	8013278 <_strtol_l.constprop.0+0x90>
 801321c:	782c      	ldrb	r4, [r5, #0]
 801321e:	2601      	movs	r6, #1
 8013220:	1c95      	adds	r5, r2, #2
 8013222:	f033 0210 	bics.w	r2, r3, #16
 8013226:	d109      	bne.n	801323c <_strtol_l.constprop.0+0x54>
 8013228:	2c30      	cmp	r4, #48	@ 0x30
 801322a:	d12a      	bne.n	8013282 <_strtol_l.constprop.0+0x9a>
 801322c:	782a      	ldrb	r2, [r5, #0]
 801322e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013232:	2a58      	cmp	r2, #88	@ 0x58
 8013234:	d125      	bne.n	8013282 <_strtol_l.constprop.0+0x9a>
 8013236:	786c      	ldrb	r4, [r5, #1]
 8013238:	2310      	movs	r3, #16
 801323a:	3502      	adds	r5, #2
 801323c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013240:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013244:	2200      	movs	r2, #0
 8013246:	fbbc f9f3 	udiv	r9, ip, r3
 801324a:	4610      	mov	r0, r2
 801324c:	fb03 ca19 	mls	sl, r3, r9, ip
 8013250:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013254:	2f09      	cmp	r7, #9
 8013256:	d81b      	bhi.n	8013290 <_strtol_l.constprop.0+0xa8>
 8013258:	463c      	mov	r4, r7
 801325a:	42a3      	cmp	r3, r4
 801325c:	dd27      	ble.n	80132ae <_strtol_l.constprop.0+0xc6>
 801325e:	1c57      	adds	r7, r2, #1
 8013260:	d007      	beq.n	8013272 <_strtol_l.constprop.0+0x8a>
 8013262:	4581      	cmp	r9, r0
 8013264:	d320      	bcc.n	80132a8 <_strtol_l.constprop.0+0xc0>
 8013266:	d101      	bne.n	801326c <_strtol_l.constprop.0+0x84>
 8013268:	45a2      	cmp	sl, r4
 801326a:	db1d      	blt.n	80132a8 <_strtol_l.constprop.0+0xc0>
 801326c:	fb00 4003 	mla	r0, r0, r3, r4
 8013270:	2201      	movs	r2, #1
 8013272:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013276:	e7eb      	b.n	8013250 <_strtol_l.constprop.0+0x68>
 8013278:	2c2b      	cmp	r4, #43	@ 0x2b
 801327a:	bf04      	itt	eq
 801327c:	782c      	ldrbeq	r4, [r5, #0]
 801327e:	1c95      	addeq	r5, r2, #2
 8013280:	e7cf      	b.n	8013222 <_strtol_l.constprop.0+0x3a>
 8013282:	2b00      	cmp	r3, #0
 8013284:	d1da      	bne.n	801323c <_strtol_l.constprop.0+0x54>
 8013286:	2c30      	cmp	r4, #48	@ 0x30
 8013288:	bf0c      	ite	eq
 801328a:	2308      	moveq	r3, #8
 801328c:	230a      	movne	r3, #10
 801328e:	e7d5      	b.n	801323c <_strtol_l.constprop.0+0x54>
 8013290:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013294:	2f19      	cmp	r7, #25
 8013296:	d801      	bhi.n	801329c <_strtol_l.constprop.0+0xb4>
 8013298:	3c37      	subs	r4, #55	@ 0x37
 801329a:	e7de      	b.n	801325a <_strtol_l.constprop.0+0x72>
 801329c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80132a0:	2f19      	cmp	r7, #25
 80132a2:	d804      	bhi.n	80132ae <_strtol_l.constprop.0+0xc6>
 80132a4:	3c57      	subs	r4, #87	@ 0x57
 80132a6:	e7d8      	b.n	801325a <_strtol_l.constprop.0+0x72>
 80132a8:	f04f 32ff 	mov.w	r2, #4294967295
 80132ac:	e7e1      	b.n	8013272 <_strtol_l.constprop.0+0x8a>
 80132ae:	1c53      	adds	r3, r2, #1
 80132b0:	d108      	bne.n	80132c4 <_strtol_l.constprop.0+0xdc>
 80132b2:	2322      	movs	r3, #34	@ 0x22
 80132b4:	f8ce 3000 	str.w	r3, [lr]
 80132b8:	4660      	mov	r0, ip
 80132ba:	f1b8 0f00 	cmp.w	r8, #0
 80132be:	d0a0      	beq.n	8013202 <_strtol_l.constprop.0+0x1a>
 80132c0:	1e69      	subs	r1, r5, #1
 80132c2:	e006      	b.n	80132d2 <_strtol_l.constprop.0+0xea>
 80132c4:	b106      	cbz	r6, 80132c8 <_strtol_l.constprop.0+0xe0>
 80132c6:	4240      	negs	r0, r0
 80132c8:	f1b8 0f00 	cmp.w	r8, #0
 80132cc:	d099      	beq.n	8013202 <_strtol_l.constprop.0+0x1a>
 80132ce:	2a00      	cmp	r2, #0
 80132d0:	d1f6      	bne.n	80132c0 <_strtol_l.constprop.0+0xd8>
 80132d2:	f8c8 1000 	str.w	r1, [r8]
 80132d6:	e794      	b.n	8013202 <_strtol_l.constprop.0+0x1a>
 80132d8:	08014671 	.word	0x08014671

080132dc <_strtol_r>:
 80132dc:	f7ff bf84 	b.w	80131e8 <_strtol_l.constprop.0>

080132e0 <__ssputs_r>:
 80132e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132e4:	688e      	ldr	r6, [r1, #8]
 80132e6:	461f      	mov	r7, r3
 80132e8:	42be      	cmp	r6, r7
 80132ea:	680b      	ldr	r3, [r1, #0]
 80132ec:	4682      	mov	sl, r0
 80132ee:	460c      	mov	r4, r1
 80132f0:	4690      	mov	r8, r2
 80132f2:	d82d      	bhi.n	8013350 <__ssputs_r+0x70>
 80132f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80132f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80132fc:	d026      	beq.n	801334c <__ssputs_r+0x6c>
 80132fe:	6965      	ldr	r5, [r4, #20]
 8013300:	6909      	ldr	r1, [r1, #16]
 8013302:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013306:	eba3 0901 	sub.w	r9, r3, r1
 801330a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801330e:	1c7b      	adds	r3, r7, #1
 8013310:	444b      	add	r3, r9
 8013312:	106d      	asrs	r5, r5, #1
 8013314:	429d      	cmp	r5, r3
 8013316:	bf38      	it	cc
 8013318:	461d      	movcc	r5, r3
 801331a:	0553      	lsls	r3, r2, #21
 801331c:	d527      	bpl.n	801336e <__ssputs_r+0x8e>
 801331e:	4629      	mov	r1, r5
 8013320:	f7fe fc70 	bl	8011c04 <_malloc_r>
 8013324:	4606      	mov	r6, r0
 8013326:	b360      	cbz	r0, 8013382 <__ssputs_r+0xa2>
 8013328:	6921      	ldr	r1, [r4, #16]
 801332a:	464a      	mov	r2, r9
 801332c:	f7fd fe03 	bl	8010f36 <memcpy>
 8013330:	89a3      	ldrh	r3, [r4, #12]
 8013332:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801333a:	81a3      	strh	r3, [r4, #12]
 801333c:	6126      	str	r6, [r4, #16]
 801333e:	6165      	str	r5, [r4, #20]
 8013340:	444e      	add	r6, r9
 8013342:	eba5 0509 	sub.w	r5, r5, r9
 8013346:	6026      	str	r6, [r4, #0]
 8013348:	60a5      	str	r5, [r4, #8]
 801334a:	463e      	mov	r6, r7
 801334c:	42be      	cmp	r6, r7
 801334e:	d900      	bls.n	8013352 <__ssputs_r+0x72>
 8013350:	463e      	mov	r6, r7
 8013352:	6820      	ldr	r0, [r4, #0]
 8013354:	4632      	mov	r2, r6
 8013356:	4641      	mov	r1, r8
 8013358:	f000 fb6a 	bl	8013a30 <memmove>
 801335c:	68a3      	ldr	r3, [r4, #8]
 801335e:	1b9b      	subs	r3, r3, r6
 8013360:	60a3      	str	r3, [r4, #8]
 8013362:	6823      	ldr	r3, [r4, #0]
 8013364:	4433      	add	r3, r6
 8013366:	6023      	str	r3, [r4, #0]
 8013368:	2000      	movs	r0, #0
 801336a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801336e:	462a      	mov	r2, r5
 8013370:	f000 ff43 	bl	80141fa <_realloc_r>
 8013374:	4606      	mov	r6, r0
 8013376:	2800      	cmp	r0, #0
 8013378:	d1e0      	bne.n	801333c <__ssputs_r+0x5c>
 801337a:	6921      	ldr	r1, [r4, #16]
 801337c:	4650      	mov	r0, sl
 801337e:	f7fe fbcd 	bl	8011b1c <_free_r>
 8013382:	230c      	movs	r3, #12
 8013384:	f8ca 3000 	str.w	r3, [sl]
 8013388:	89a3      	ldrh	r3, [r4, #12]
 801338a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801338e:	81a3      	strh	r3, [r4, #12]
 8013390:	f04f 30ff 	mov.w	r0, #4294967295
 8013394:	e7e9      	b.n	801336a <__ssputs_r+0x8a>
	...

08013398 <_svfiprintf_r>:
 8013398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801339c:	4698      	mov	r8, r3
 801339e:	898b      	ldrh	r3, [r1, #12]
 80133a0:	061b      	lsls	r3, r3, #24
 80133a2:	b09d      	sub	sp, #116	@ 0x74
 80133a4:	4607      	mov	r7, r0
 80133a6:	460d      	mov	r5, r1
 80133a8:	4614      	mov	r4, r2
 80133aa:	d510      	bpl.n	80133ce <_svfiprintf_r+0x36>
 80133ac:	690b      	ldr	r3, [r1, #16]
 80133ae:	b973      	cbnz	r3, 80133ce <_svfiprintf_r+0x36>
 80133b0:	2140      	movs	r1, #64	@ 0x40
 80133b2:	f7fe fc27 	bl	8011c04 <_malloc_r>
 80133b6:	6028      	str	r0, [r5, #0]
 80133b8:	6128      	str	r0, [r5, #16]
 80133ba:	b930      	cbnz	r0, 80133ca <_svfiprintf_r+0x32>
 80133bc:	230c      	movs	r3, #12
 80133be:	603b      	str	r3, [r7, #0]
 80133c0:	f04f 30ff 	mov.w	r0, #4294967295
 80133c4:	b01d      	add	sp, #116	@ 0x74
 80133c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ca:	2340      	movs	r3, #64	@ 0x40
 80133cc:	616b      	str	r3, [r5, #20]
 80133ce:	2300      	movs	r3, #0
 80133d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80133d2:	2320      	movs	r3, #32
 80133d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80133d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80133dc:	2330      	movs	r3, #48	@ 0x30
 80133de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801357c <_svfiprintf_r+0x1e4>
 80133e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80133e6:	f04f 0901 	mov.w	r9, #1
 80133ea:	4623      	mov	r3, r4
 80133ec:	469a      	mov	sl, r3
 80133ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133f2:	b10a      	cbz	r2, 80133f8 <_svfiprintf_r+0x60>
 80133f4:	2a25      	cmp	r2, #37	@ 0x25
 80133f6:	d1f9      	bne.n	80133ec <_svfiprintf_r+0x54>
 80133f8:	ebba 0b04 	subs.w	fp, sl, r4
 80133fc:	d00b      	beq.n	8013416 <_svfiprintf_r+0x7e>
 80133fe:	465b      	mov	r3, fp
 8013400:	4622      	mov	r2, r4
 8013402:	4629      	mov	r1, r5
 8013404:	4638      	mov	r0, r7
 8013406:	f7ff ff6b 	bl	80132e0 <__ssputs_r>
 801340a:	3001      	adds	r0, #1
 801340c:	f000 80a7 	beq.w	801355e <_svfiprintf_r+0x1c6>
 8013410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013412:	445a      	add	r2, fp
 8013414:	9209      	str	r2, [sp, #36]	@ 0x24
 8013416:	f89a 3000 	ldrb.w	r3, [sl]
 801341a:	2b00      	cmp	r3, #0
 801341c:	f000 809f 	beq.w	801355e <_svfiprintf_r+0x1c6>
 8013420:	2300      	movs	r3, #0
 8013422:	f04f 32ff 	mov.w	r2, #4294967295
 8013426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801342a:	f10a 0a01 	add.w	sl, sl, #1
 801342e:	9304      	str	r3, [sp, #16]
 8013430:	9307      	str	r3, [sp, #28]
 8013432:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013436:	931a      	str	r3, [sp, #104]	@ 0x68
 8013438:	4654      	mov	r4, sl
 801343a:	2205      	movs	r2, #5
 801343c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013440:	484e      	ldr	r0, [pc, #312]	@ (801357c <_svfiprintf_r+0x1e4>)
 8013442:	f7ec ff65 	bl	8000310 <memchr>
 8013446:	9a04      	ldr	r2, [sp, #16]
 8013448:	b9d8      	cbnz	r0, 8013482 <_svfiprintf_r+0xea>
 801344a:	06d0      	lsls	r0, r2, #27
 801344c:	bf44      	itt	mi
 801344e:	2320      	movmi	r3, #32
 8013450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013454:	0711      	lsls	r1, r2, #28
 8013456:	bf44      	itt	mi
 8013458:	232b      	movmi	r3, #43	@ 0x2b
 801345a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801345e:	f89a 3000 	ldrb.w	r3, [sl]
 8013462:	2b2a      	cmp	r3, #42	@ 0x2a
 8013464:	d015      	beq.n	8013492 <_svfiprintf_r+0xfa>
 8013466:	9a07      	ldr	r2, [sp, #28]
 8013468:	4654      	mov	r4, sl
 801346a:	2000      	movs	r0, #0
 801346c:	f04f 0c0a 	mov.w	ip, #10
 8013470:	4621      	mov	r1, r4
 8013472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013476:	3b30      	subs	r3, #48	@ 0x30
 8013478:	2b09      	cmp	r3, #9
 801347a:	d94b      	bls.n	8013514 <_svfiprintf_r+0x17c>
 801347c:	b1b0      	cbz	r0, 80134ac <_svfiprintf_r+0x114>
 801347e:	9207      	str	r2, [sp, #28]
 8013480:	e014      	b.n	80134ac <_svfiprintf_r+0x114>
 8013482:	eba0 0308 	sub.w	r3, r0, r8
 8013486:	fa09 f303 	lsl.w	r3, r9, r3
 801348a:	4313      	orrs	r3, r2
 801348c:	9304      	str	r3, [sp, #16]
 801348e:	46a2      	mov	sl, r4
 8013490:	e7d2      	b.n	8013438 <_svfiprintf_r+0xa0>
 8013492:	9b03      	ldr	r3, [sp, #12]
 8013494:	1d19      	adds	r1, r3, #4
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	9103      	str	r1, [sp, #12]
 801349a:	2b00      	cmp	r3, #0
 801349c:	bfbb      	ittet	lt
 801349e:	425b      	neglt	r3, r3
 80134a0:	f042 0202 	orrlt.w	r2, r2, #2
 80134a4:	9307      	strge	r3, [sp, #28]
 80134a6:	9307      	strlt	r3, [sp, #28]
 80134a8:	bfb8      	it	lt
 80134aa:	9204      	strlt	r2, [sp, #16]
 80134ac:	7823      	ldrb	r3, [r4, #0]
 80134ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80134b0:	d10a      	bne.n	80134c8 <_svfiprintf_r+0x130>
 80134b2:	7863      	ldrb	r3, [r4, #1]
 80134b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80134b6:	d132      	bne.n	801351e <_svfiprintf_r+0x186>
 80134b8:	9b03      	ldr	r3, [sp, #12]
 80134ba:	1d1a      	adds	r2, r3, #4
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	9203      	str	r2, [sp, #12]
 80134c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80134c4:	3402      	adds	r4, #2
 80134c6:	9305      	str	r3, [sp, #20]
 80134c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801358c <_svfiprintf_r+0x1f4>
 80134cc:	7821      	ldrb	r1, [r4, #0]
 80134ce:	2203      	movs	r2, #3
 80134d0:	4650      	mov	r0, sl
 80134d2:	f7ec ff1d 	bl	8000310 <memchr>
 80134d6:	b138      	cbz	r0, 80134e8 <_svfiprintf_r+0x150>
 80134d8:	9b04      	ldr	r3, [sp, #16]
 80134da:	eba0 000a 	sub.w	r0, r0, sl
 80134de:	2240      	movs	r2, #64	@ 0x40
 80134e0:	4082      	lsls	r2, r0
 80134e2:	4313      	orrs	r3, r2
 80134e4:	3401      	adds	r4, #1
 80134e6:	9304      	str	r3, [sp, #16]
 80134e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134ec:	4824      	ldr	r0, [pc, #144]	@ (8013580 <_svfiprintf_r+0x1e8>)
 80134ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80134f2:	2206      	movs	r2, #6
 80134f4:	f7ec ff0c 	bl	8000310 <memchr>
 80134f8:	2800      	cmp	r0, #0
 80134fa:	d036      	beq.n	801356a <_svfiprintf_r+0x1d2>
 80134fc:	4b21      	ldr	r3, [pc, #132]	@ (8013584 <_svfiprintf_r+0x1ec>)
 80134fe:	bb1b      	cbnz	r3, 8013548 <_svfiprintf_r+0x1b0>
 8013500:	9b03      	ldr	r3, [sp, #12]
 8013502:	3307      	adds	r3, #7
 8013504:	f023 0307 	bic.w	r3, r3, #7
 8013508:	3308      	adds	r3, #8
 801350a:	9303      	str	r3, [sp, #12]
 801350c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801350e:	4433      	add	r3, r6
 8013510:	9309      	str	r3, [sp, #36]	@ 0x24
 8013512:	e76a      	b.n	80133ea <_svfiprintf_r+0x52>
 8013514:	fb0c 3202 	mla	r2, ip, r2, r3
 8013518:	460c      	mov	r4, r1
 801351a:	2001      	movs	r0, #1
 801351c:	e7a8      	b.n	8013470 <_svfiprintf_r+0xd8>
 801351e:	2300      	movs	r3, #0
 8013520:	3401      	adds	r4, #1
 8013522:	9305      	str	r3, [sp, #20]
 8013524:	4619      	mov	r1, r3
 8013526:	f04f 0c0a 	mov.w	ip, #10
 801352a:	4620      	mov	r0, r4
 801352c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013530:	3a30      	subs	r2, #48	@ 0x30
 8013532:	2a09      	cmp	r2, #9
 8013534:	d903      	bls.n	801353e <_svfiprintf_r+0x1a6>
 8013536:	2b00      	cmp	r3, #0
 8013538:	d0c6      	beq.n	80134c8 <_svfiprintf_r+0x130>
 801353a:	9105      	str	r1, [sp, #20]
 801353c:	e7c4      	b.n	80134c8 <_svfiprintf_r+0x130>
 801353e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013542:	4604      	mov	r4, r0
 8013544:	2301      	movs	r3, #1
 8013546:	e7f0      	b.n	801352a <_svfiprintf_r+0x192>
 8013548:	ab03      	add	r3, sp, #12
 801354a:	9300      	str	r3, [sp, #0]
 801354c:	462a      	mov	r2, r5
 801354e:	4b0e      	ldr	r3, [pc, #56]	@ (8013588 <_svfiprintf_r+0x1f0>)
 8013550:	a904      	add	r1, sp, #16
 8013552:	4638      	mov	r0, r7
 8013554:	f7fc fcf0 	bl	800ff38 <_printf_float>
 8013558:	1c42      	adds	r2, r0, #1
 801355a:	4606      	mov	r6, r0
 801355c:	d1d6      	bne.n	801350c <_svfiprintf_r+0x174>
 801355e:	89ab      	ldrh	r3, [r5, #12]
 8013560:	065b      	lsls	r3, r3, #25
 8013562:	f53f af2d 	bmi.w	80133c0 <_svfiprintf_r+0x28>
 8013566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013568:	e72c      	b.n	80133c4 <_svfiprintf_r+0x2c>
 801356a:	ab03      	add	r3, sp, #12
 801356c:	9300      	str	r3, [sp, #0]
 801356e:	462a      	mov	r2, r5
 8013570:	4b05      	ldr	r3, [pc, #20]	@ (8013588 <_svfiprintf_r+0x1f0>)
 8013572:	a904      	add	r1, sp, #16
 8013574:	4638      	mov	r0, r7
 8013576:	f7fc ff67 	bl	8010448 <_printf_i>
 801357a:	e7ed      	b.n	8013558 <_svfiprintf_r+0x1c0>
 801357c:	08014771 	.word	0x08014771
 8013580:	0801477b 	.word	0x0801477b
 8013584:	0800ff39 	.word	0x0800ff39
 8013588:	080132e1 	.word	0x080132e1
 801358c:	08014777 	.word	0x08014777

08013590 <__sfputc_r>:
 8013590:	6893      	ldr	r3, [r2, #8]
 8013592:	3b01      	subs	r3, #1
 8013594:	2b00      	cmp	r3, #0
 8013596:	b410      	push	{r4}
 8013598:	6093      	str	r3, [r2, #8]
 801359a:	da08      	bge.n	80135ae <__sfputc_r+0x1e>
 801359c:	6994      	ldr	r4, [r2, #24]
 801359e:	42a3      	cmp	r3, r4
 80135a0:	db01      	blt.n	80135a6 <__sfputc_r+0x16>
 80135a2:	290a      	cmp	r1, #10
 80135a4:	d103      	bne.n	80135ae <__sfputc_r+0x1e>
 80135a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135aa:	f7fd bbb0 	b.w	8010d0e <__swbuf_r>
 80135ae:	6813      	ldr	r3, [r2, #0]
 80135b0:	1c58      	adds	r0, r3, #1
 80135b2:	6010      	str	r0, [r2, #0]
 80135b4:	7019      	strb	r1, [r3, #0]
 80135b6:	4608      	mov	r0, r1
 80135b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135bc:	4770      	bx	lr

080135be <__sfputs_r>:
 80135be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135c0:	4606      	mov	r6, r0
 80135c2:	460f      	mov	r7, r1
 80135c4:	4614      	mov	r4, r2
 80135c6:	18d5      	adds	r5, r2, r3
 80135c8:	42ac      	cmp	r4, r5
 80135ca:	d101      	bne.n	80135d0 <__sfputs_r+0x12>
 80135cc:	2000      	movs	r0, #0
 80135ce:	e007      	b.n	80135e0 <__sfputs_r+0x22>
 80135d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135d4:	463a      	mov	r2, r7
 80135d6:	4630      	mov	r0, r6
 80135d8:	f7ff ffda 	bl	8013590 <__sfputc_r>
 80135dc:	1c43      	adds	r3, r0, #1
 80135de:	d1f3      	bne.n	80135c8 <__sfputs_r+0xa>
 80135e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080135e4 <_vfiprintf_r>:
 80135e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e8:	460d      	mov	r5, r1
 80135ea:	b09d      	sub	sp, #116	@ 0x74
 80135ec:	4614      	mov	r4, r2
 80135ee:	4698      	mov	r8, r3
 80135f0:	4606      	mov	r6, r0
 80135f2:	b118      	cbz	r0, 80135fc <_vfiprintf_r+0x18>
 80135f4:	6a03      	ldr	r3, [r0, #32]
 80135f6:	b90b      	cbnz	r3, 80135fc <_vfiprintf_r+0x18>
 80135f8:	f7fd fade 	bl	8010bb8 <__sinit>
 80135fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80135fe:	07d9      	lsls	r1, r3, #31
 8013600:	d405      	bmi.n	801360e <_vfiprintf_r+0x2a>
 8013602:	89ab      	ldrh	r3, [r5, #12]
 8013604:	059a      	lsls	r2, r3, #22
 8013606:	d402      	bmi.n	801360e <_vfiprintf_r+0x2a>
 8013608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801360a:	f7fd fc92 	bl	8010f32 <__retarget_lock_acquire_recursive>
 801360e:	89ab      	ldrh	r3, [r5, #12]
 8013610:	071b      	lsls	r3, r3, #28
 8013612:	d501      	bpl.n	8013618 <_vfiprintf_r+0x34>
 8013614:	692b      	ldr	r3, [r5, #16]
 8013616:	b99b      	cbnz	r3, 8013640 <_vfiprintf_r+0x5c>
 8013618:	4629      	mov	r1, r5
 801361a:	4630      	mov	r0, r6
 801361c:	f7fd fbb6 	bl	8010d8c <__swsetup_r>
 8013620:	b170      	cbz	r0, 8013640 <_vfiprintf_r+0x5c>
 8013622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013624:	07dc      	lsls	r4, r3, #31
 8013626:	d504      	bpl.n	8013632 <_vfiprintf_r+0x4e>
 8013628:	f04f 30ff 	mov.w	r0, #4294967295
 801362c:	b01d      	add	sp, #116	@ 0x74
 801362e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013632:	89ab      	ldrh	r3, [r5, #12]
 8013634:	0598      	lsls	r0, r3, #22
 8013636:	d4f7      	bmi.n	8013628 <_vfiprintf_r+0x44>
 8013638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801363a:	f7fd fc7b 	bl	8010f34 <__retarget_lock_release_recursive>
 801363e:	e7f3      	b.n	8013628 <_vfiprintf_r+0x44>
 8013640:	2300      	movs	r3, #0
 8013642:	9309      	str	r3, [sp, #36]	@ 0x24
 8013644:	2320      	movs	r3, #32
 8013646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801364a:	f8cd 800c 	str.w	r8, [sp, #12]
 801364e:	2330      	movs	r3, #48	@ 0x30
 8013650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013800 <_vfiprintf_r+0x21c>
 8013654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013658:	f04f 0901 	mov.w	r9, #1
 801365c:	4623      	mov	r3, r4
 801365e:	469a      	mov	sl, r3
 8013660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013664:	b10a      	cbz	r2, 801366a <_vfiprintf_r+0x86>
 8013666:	2a25      	cmp	r2, #37	@ 0x25
 8013668:	d1f9      	bne.n	801365e <_vfiprintf_r+0x7a>
 801366a:	ebba 0b04 	subs.w	fp, sl, r4
 801366e:	d00b      	beq.n	8013688 <_vfiprintf_r+0xa4>
 8013670:	465b      	mov	r3, fp
 8013672:	4622      	mov	r2, r4
 8013674:	4629      	mov	r1, r5
 8013676:	4630      	mov	r0, r6
 8013678:	f7ff ffa1 	bl	80135be <__sfputs_r>
 801367c:	3001      	adds	r0, #1
 801367e:	f000 80a7 	beq.w	80137d0 <_vfiprintf_r+0x1ec>
 8013682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013684:	445a      	add	r2, fp
 8013686:	9209      	str	r2, [sp, #36]	@ 0x24
 8013688:	f89a 3000 	ldrb.w	r3, [sl]
 801368c:	2b00      	cmp	r3, #0
 801368e:	f000 809f 	beq.w	80137d0 <_vfiprintf_r+0x1ec>
 8013692:	2300      	movs	r3, #0
 8013694:	f04f 32ff 	mov.w	r2, #4294967295
 8013698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801369c:	f10a 0a01 	add.w	sl, sl, #1
 80136a0:	9304      	str	r3, [sp, #16]
 80136a2:	9307      	str	r3, [sp, #28]
 80136a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80136a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80136aa:	4654      	mov	r4, sl
 80136ac:	2205      	movs	r2, #5
 80136ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136b2:	4853      	ldr	r0, [pc, #332]	@ (8013800 <_vfiprintf_r+0x21c>)
 80136b4:	f7ec fe2c 	bl	8000310 <memchr>
 80136b8:	9a04      	ldr	r2, [sp, #16]
 80136ba:	b9d8      	cbnz	r0, 80136f4 <_vfiprintf_r+0x110>
 80136bc:	06d1      	lsls	r1, r2, #27
 80136be:	bf44      	itt	mi
 80136c0:	2320      	movmi	r3, #32
 80136c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136c6:	0713      	lsls	r3, r2, #28
 80136c8:	bf44      	itt	mi
 80136ca:	232b      	movmi	r3, #43	@ 0x2b
 80136cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136d0:	f89a 3000 	ldrb.w	r3, [sl]
 80136d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80136d6:	d015      	beq.n	8013704 <_vfiprintf_r+0x120>
 80136d8:	9a07      	ldr	r2, [sp, #28]
 80136da:	4654      	mov	r4, sl
 80136dc:	2000      	movs	r0, #0
 80136de:	f04f 0c0a 	mov.w	ip, #10
 80136e2:	4621      	mov	r1, r4
 80136e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136e8:	3b30      	subs	r3, #48	@ 0x30
 80136ea:	2b09      	cmp	r3, #9
 80136ec:	d94b      	bls.n	8013786 <_vfiprintf_r+0x1a2>
 80136ee:	b1b0      	cbz	r0, 801371e <_vfiprintf_r+0x13a>
 80136f0:	9207      	str	r2, [sp, #28]
 80136f2:	e014      	b.n	801371e <_vfiprintf_r+0x13a>
 80136f4:	eba0 0308 	sub.w	r3, r0, r8
 80136f8:	fa09 f303 	lsl.w	r3, r9, r3
 80136fc:	4313      	orrs	r3, r2
 80136fe:	9304      	str	r3, [sp, #16]
 8013700:	46a2      	mov	sl, r4
 8013702:	e7d2      	b.n	80136aa <_vfiprintf_r+0xc6>
 8013704:	9b03      	ldr	r3, [sp, #12]
 8013706:	1d19      	adds	r1, r3, #4
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	9103      	str	r1, [sp, #12]
 801370c:	2b00      	cmp	r3, #0
 801370e:	bfbb      	ittet	lt
 8013710:	425b      	neglt	r3, r3
 8013712:	f042 0202 	orrlt.w	r2, r2, #2
 8013716:	9307      	strge	r3, [sp, #28]
 8013718:	9307      	strlt	r3, [sp, #28]
 801371a:	bfb8      	it	lt
 801371c:	9204      	strlt	r2, [sp, #16]
 801371e:	7823      	ldrb	r3, [r4, #0]
 8013720:	2b2e      	cmp	r3, #46	@ 0x2e
 8013722:	d10a      	bne.n	801373a <_vfiprintf_r+0x156>
 8013724:	7863      	ldrb	r3, [r4, #1]
 8013726:	2b2a      	cmp	r3, #42	@ 0x2a
 8013728:	d132      	bne.n	8013790 <_vfiprintf_r+0x1ac>
 801372a:	9b03      	ldr	r3, [sp, #12]
 801372c:	1d1a      	adds	r2, r3, #4
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	9203      	str	r2, [sp, #12]
 8013732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013736:	3402      	adds	r4, #2
 8013738:	9305      	str	r3, [sp, #20]
 801373a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013810 <_vfiprintf_r+0x22c>
 801373e:	7821      	ldrb	r1, [r4, #0]
 8013740:	2203      	movs	r2, #3
 8013742:	4650      	mov	r0, sl
 8013744:	f7ec fde4 	bl	8000310 <memchr>
 8013748:	b138      	cbz	r0, 801375a <_vfiprintf_r+0x176>
 801374a:	9b04      	ldr	r3, [sp, #16]
 801374c:	eba0 000a 	sub.w	r0, r0, sl
 8013750:	2240      	movs	r2, #64	@ 0x40
 8013752:	4082      	lsls	r2, r0
 8013754:	4313      	orrs	r3, r2
 8013756:	3401      	adds	r4, #1
 8013758:	9304      	str	r3, [sp, #16]
 801375a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801375e:	4829      	ldr	r0, [pc, #164]	@ (8013804 <_vfiprintf_r+0x220>)
 8013760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013764:	2206      	movs	r2, #6
 8013766:	f7ec fdd3 	bl	8000310 <memchr>
 801376a:	2800      	cmp	r0, #0
 801376c:	d03f      	beq.n	80137ee <_vfiprintf_r+0x20a>
 801376e:	4b26      	ldr	r3, [pc, #152]	@ (8013808 <_vfiprintf_r+0x224>)
 8013770:	bb1b      	cbnz	r3, 80137ba <_vfiprintf_r+0x1d6>
 8013772:	9b03      	ldr	r3, [sp, #12]
 8013774:	3307      	adds	r3, #7
 8013776:	f023 0307 	bic.w	r3, r3, #7
 801377a:	3308      	adds	r3, #8
 801377c:	9303      	str	r3, [sp, #12]
 801377e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013780:	443b      	add	r3, r7
 8013782:	9309      	str	r3, [sp, #36]	@ 0x24
 8013784:	e76a      	b.n	801365c <_vfiprintf_r+0x78>
 8013786:	fb0c 3202 	mla	r2, ip, r2, r3
 801378a:	460c      	mov	r4, r1
 801378c:	2001      	movs	r0, #1
 801378e:	e7a8      	b.n	80136e2 <_vfiprintf_r+0xfe>
 8013790:	2300      	movs	r3, #0
 8013792:	3401      	adds	r4, #1
 8013794:	9305      	str	r3, [sp, #20]
 8013796:	4619      	mov	r1, r3
 8013798:	f04f 0c0a 	mov.w	ip, #10
 801379c:	4620      	mov	r0, r4
 801379e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137a2:	3a30      	subs	r2, #48	@ 0x30
 80137a4:	2a09      	cmp	r2, #9
 80137a6:	d903      	bls.n	80137b0 <_vfiprintf_r+0x1cc>
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d0c6      	beq.n	801373a <_vfiprintf_r+0x156>
 80137ac:	9105      	str	r1, [sp, #20]
 80137ae:	e7c4      	b.n	801373a <_vfiprintf_r+0x156>
 80137b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80137b4:	4604      	mov	r4, r0
 80137b6:	2301      	movs	r3, #1
 80137b8:	e7f0      	b.n	801379c <_vfiprintf_r+0x1b8>
 80137ba:	ab03      	add	r3, sp, #12
 80137bc:	9300      	str	r3, [sp, #0]
 80137be:	462a      	mov	r2, r5
 80137c0:	4b12      	ldr	r3, [pc, #72]	@ (801380c <_vfiprintf_r+0x228>)
 80137c2:	a904      	add	r1, sp, #16
 80137c4:	4630      	mov	r0, r6
 80137c6:	f7fc fbb7 	bl	800ff38 <_printf_float>
 80137ca:	4607      	mov	r7, r0
 80137cc:	1c78      	adds	r0, r7, #1
 80137ce:	d1d6      	bne.n	801377e <_vfiprintf_r+0x19a>
 80137d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80137d2:	07d9      	lsls	r1, r3, #31
 80137d4:	d405      	bmi.n	80137e2 <_vfiprintf_r+0x1fe>
 80137d6:	89ab      	ldrh	r3, [r5, #12]
 80137d8:	059a      	lsls	r2, r3, #22
 80137da:	d402      	bmi.n	80137e2 <_vfiprintf_r+0x1fe>
 80137dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80137de:	f7fd fba9 	bl	8010f34 <__retarget_lock_release_recursive>
 80137e2:	89ab      	ldrh	r3, [r5, #12]
 80137e4:	065b      	lsls	r3, r3, #25
 80137e6:	f53f af1f 	bmi.w	8013628 <_vfiprintf_r+0x44>
 80137ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80137ec:	e71e      	b.n	801362c <_vfiprintf_r+0x48>
 80137ee:	ab03      	add	r3, sp, #12
 80137f0:	9300      	str	r3, [sp, #0]
 80137f2:	462a      	mov	r2, r5
 80137f4:	4b05      	ldr	r3, [pc, #20]	@ (801380c <_vfiprintf_r+0x228>)
 80137f6:	a904      	add	r1, sp, #16
 80137f8:	4630      	mov	r0, r6
 80137fa:	f7fc fe25 	bl	8010448 <_printf_i>
 80137fe:	e7e4      	b.n	80137ca <_vfiprintf_r+0x1e6>
 8013800:	08014771 	.word	0x08014771
 8013804:	0801477b 	.word	0x0801477b
 8013808:	0800ff39 	.word	0x0800ff39
 801380c:	080135bf 	.word	0x080135bf
 8013810:	08014777 	.word	0x08014777

08013814 <__sflush_r>:
 8013814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801381c:	0716      	lsls	r6, r2, #28
 801381e:	4605      	mov	r5, r0
 8013820:	460c      	mov	r4, r1
 8013822:	d454      	bmi.n	80138ce <__sflush_r+0xba>
 8013824:	684b      	ldr	r3, [r1, #4]
 8013826:	2b00      	cmp	r3, #0
 8013828:	dc02      	bgt.n	8013830 <__sflush_r+0x1c>
 801382a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801382c:	2b00      	cmp	r3, #0
 801382e:	dd48      	ble.n	80138c2 <__sflush_r+0xae>
 8013830:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013832:	2e00      	cmp	r6, #0
 8013834:	d045      	beq.n	80138c2 <__sflush_r+0xae>
 8013836:	2300      	movs	r3, #0
 8013838:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801383c:	682f      	ldr	r7, [r5, #0]
 801383e:	6a21      	ldr	r1, [r4, #32]
 8013840:	602b      	str	r3, [r5, #0]
 8013842:	d030      	beq.n	80138a6 <__sflush_r+0x92>
 8013844:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013846:	89a3      	ldrh	r3, [r4, #12]
 8013848:	0759      	lsls	r1, r3, #29
 801384a:	d505      	bpl.n	8013858 <__sflush_r+0x44>
 801384c:	6863      	ldr	r3, [r4, #4]
 801384e:	1ad2      	subs	r2, r2, r3
 8013850:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013852:	b10b      	cbz	r3, 8013858 <__sflush_r+0x44>
 8013854:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013856:	1ad2      	subs	r2, r2, r3
 8013858:	2300      	movs	r3, #0
 801385a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801385c:	6a21      	ldr	r1, [r4, #32]
 801385e:	4628      	mov	r0, r5
 8013860:	47b0      	blx	r6
 8013862:	1c43      	adds	r3, r0, #1
 8013864:	89a3      	ldrh	r3, [r4, #12]
 8013866:	d106      	bne.n	8013876 <__sflush_r+0x62>
 8013868:	6829      	ldr	r1, [r5, #0]
 801386a:	291d      	cmp	r1, #29
 801386c:	d82b      	bhi.n	80138c6 <__sflush_r+0xb2>
 801386e:	4a2a      	ldr	r2, [pc, #168]	@ (8013918 <__sflush_r+0x104>)
 8013870:	410a      	asrs	r2, r1
 8013872:	07d6      	lsls	r6, r2, #31
 8013874:	d427      	bmi.n	80138c6 <__sflush_r+0xb2>
 8013876:	2200      	movs	r2, #0
 8013878:	6062      	str	r2, [r4, #4]
 801387a:	04d9      	lsls	r1, r3, #19
 801387c:	6922      	ldr	r2, [r4, #16]
 801387e:	6022      	str	r2, [r4, #0]
 8013880:	d504      	bpl.n	801388c <__sflush_r+0x78>
 8013882:	1c42      	adds	r2, r0, #1
 8013884:	d101      	bne.n	801388a <__sflush_r+0x76>
 8013886:	682b      	ldr	r3, [r5, #0]
 8013888:	b903      	cbnz	r3, 801388c <__sflush_r+0x78>
 801388a:	6560      	str	r0, [r4, #84]	@ 0x54
 801388c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801388e:	602f      	str	r7, [r5, #0]
 8013890:	b1b9      	cbz	r1, 80138c2 <__sflush_r+0xae>
 8013892:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013896:	4299      	cmp	r1, r3
 8013898:	d002      	beq.n	80138a0 <__sflush_r+0x8c>
 801389a:	4628      	mov	r0, r5
 801389c:	f7fe f93e 	bl	8011b1c <_free_r>
 80138a0:	2300      	movs	r3, #0
 80138a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80138a4:	e00d      	b.n	80138c2 <__sflush_r+0xae>
 80138a6:	2301      	movs	r3, #1
 80138a8:	4628      	mov	r0, r5
 80138aa:	47b0      	blx	r6
 80138ac:	4602      	mov	r2, r0
 80138ae:	1c50      	adds	r0, r2, #1
 80138b0:	d1c9      	bne.n	8013846 <__sflush_r+0x32>
 80138b2:	682b      	ldr	r3, [r5, #0]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d0c6      	beq.n	8013846 <__sflush_r+0x32>
 80138b8:	2b1d      	cmp	r3, #29
 80138ba:	d001      	beq.n	80138c0 <__sflush_r+0xac>
 80138bc:	2b16      	cmp	r3, #22
 80138be:	d11e      	bne.n	80138fe <__sflush_r+0xea>
 80138c0:	602f      	str	r7, [r5, #0]
 80138c2:	2000      	movs	r0, #0
 80138c4:	e022      	b.n	801390c <__sflush_r+0xf8>
 80138c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138ca:	b21b      	sxth	r3, r3
 80138cc:	e01b      	b.n	8013906 <__sflush_r+0xf2>
 80138ce:	690f      	ldr	r7, [r1, #16]
 80138d0:	2f00      	cmp	r7, #0
 80138d2:	d0f6      	beq.n	80138c2 <__sflush_r+0xae>
 80138d4:	0793      	lsls	r3, r2, #30
 80138d6:	680e      	ldr	r6, [r1, #0]
 80138d8:	bf08      	it	eq
 80138da:	694b      	ldreq	r3, [r1, #20]
 80138dc:	600f      	str	r7, [r1, #0]
 80138de:	bf18      	it	ne
 80138e0:	2300      	movne	r3, #0
 80138e2:	eba6 0807 	sub.w	r8, r6, r7
 80138e6:	608b      	str	r3, [r1, #8]
 80138e8:	f1b8 0f00 	cmp.w	r8, #0
 80138ec:	dde9      	ble.n	80138c2 <__sflush_r+0xae>
 80138ee:	6a21      	ldr	r1, [r4, #32]
 80138f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80138f2:	4643      	mov	r3, r8
 80138f4:	463a      	mov	r2, r7
 80138f6:	4628      	mov	r0, r5
 80138f8:	47b0      	blx	r6
 80138fa:	2800      	cmp	r0, #0
 80138fc:	dc08      	bgt.n	8013910 <__sflush_r+0xfc>
 80138fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013906:	81a3      	strh	r3, [r4, #12]
 8013908:	f04f 30ff 	mov.w	r0, #4294967295
 801390c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013910:	4407      	add	r7, r0
 8013912:	eba8 0800 	sub.w	r8, r8, r0
 8013916:	e7e7      	b.n	80138e8 <__sflush_r+0xd4>
 8013918:	dfbffffe 	.word	0xdfbffffe

0801391c <_fflush_r>:
 801391c:	b538      	push	{r3, r4, r5, lr}
 801391e:	690b      	ldr	r3, [r1, #16]
 8013920:	4605      	mov	r5, r0
 8013922:	460c      	mov	r4, r1
 8013924:	b913      	cbnz	r3, 801392c <_fflush_r+0x10>
 8013926:	2500      	movs	r5, #0
 8013928:	4628      	mov	r0, r5
 801392a:	bd38      	pop	{r3, r4, r5, pc}
 801392c:	b118      	cbz	r0, 8013936 <_fflush_r+0x1a>
 801392e:	6a03      	ldr	r3, [r0, #32]
 8013930:	b90b      	cbnz	r3, 8013936 <_fflush_r+0x1a>
 8013932:	f7fd f941 	bl	8010bb8 <__sinit>
 8013936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d0f3      	beq.n	8013926 <_fflush_r+0xa>
 801393e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013940:	07d0      	lsls	r0, r2, #31
 8013942:	d404      	bmi.n	801394e <_fflush_r+0x32>
 8013944:	0599      	lsls	r1, r3, #22
 8013946:	d402      	bmi.n	801394e <_fflush_r+0x32>
 8013948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801394a:	f7fd faf2 	bl	8010f32 <__retarget_lock_acquire_recursive>
 801394e:	4628      	mov	r0, r5
 8013950:	4621      	mov	r1, r4
 8013952:	f7ff ff5f 	bl	8013814 <__sflush_r>
 8013956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013958:	07da      	lsls	r2, r3, #31
 801395a:	4605      	mov	r5, r0
 801395c:	d4e4      	bmi.n	8013928 <_fflush_r+0xc>
 801395e:	89a3      	ldrh	r3, [r4, #12]
 8013960:	059b      	lsls	r3, r3, #22
 8013962:	d4e1      	bmi.n	8013928 <_fflush_r+0xc>
 8013964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013966:	f7fd fae5 	bl	8010f34 <__retarget_lock_release_recursive>
 801396a:	e7dd      	b.n	8013928 <_fflush_r+0xc>

0801396c <__swhatbuf_r>:
 801396c:	b570      	push	{r4, r5, r6, lr}
 801396e:	460c      	mov	r4, r1
 8013970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013974:	2900      	cmp	r1, #0
 8013976:	b096      	sub	sp, #88	@ 0x58
 8013978:	4615      	mov	r5, r2
 801397a:	461e      	mov	r6, r3
 801397c:	da0d      	bge.n	801399a <__swhatbuf_r+0x2e>
 801397e:	89a3      	ldrh	r3, [r4, #12]
 8013980:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013984:	f04f 0100 	mov.w	r1, #0
 8013988:	bf14      	ite	ne
 801398a:	2340      	movne	r3, #64	@ 0x40
 801398c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013990:	2000      	movs	r0, #0
 8013992:	6031      	str	r1, [r6, #0]
 8013994:	602b      	str	r3, [r5, #0]
 8013996:	b016      	add	sp, #88	@ 0x58
 8013998:	bd70      	pop	{r4, r5, r6, pc}
 801399a:	466a      	mov	r2, sp
 801399c:	f000 f874 	bl	8013a88 <_fstat_r>
 80139a0:	2800      	cmp	r0, #0
 80139a2:	dbec      	blt.n	801397e <__swhatbuf_r+0x12>
 80139a4:	9901      	ldr	r1, [sp, #4]
 80139a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80139aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80139ae:	4259      	negs	r1, r3
 80139b0:	4159      	adcs	r1, r3
 80139b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80139b6:	e7eb      	b.n	8013990 <__swhatbuf_r+0x24>

080139b8 <__smakebuf_r>:
 80139b8:	898b      	ldrh	r3, [r1, #12]
 80139ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139bc:	079d      	lsls	r5, r3, #30
 80139be:	4606      	mov	r6, r0
 80139c0:	460c      	mov	r4, r1
 80139c2:	d507      	bpl.n	80139d4 <__smakebuf_r+0x1c>
 80139c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80139c8:	6023      	str	r3, [r4, #0]
 80139ca:	6123      	str	r3, [r4, #16]
 80139cc:	2301      	movs	r3, #1
 80139ce:	6163      	str	r3, [r4, #20]
 80139d0:	b003      	add	sp, #12
 80139d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139d4:	ab01      	add	r3, sp, #4
 80139d6:	466a      	mov	r2, sp
 80139d8:	f7ff ffc8 	bl	801396c <__swhatbuf_r>
 80139dc:	9f00      	ldr	r7, [sp, #0]
 80139de:	4605      	mov	r5, r0
 80139e0:	4639      	mov	r1, r7
 80139e2:	4630      	mov	r0, r6
 80139e4:	f7fe f90e 	bl	8011c04 <_malloc_r>
 80139e8:	b948      	cbnz	r0, 80139fe <__smakebuf_r+0x46>
 80139ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139ee:	059a      	lsls	r2, r3, #22
 80139f0:	d4ee      	bmi.n	80139d0 <__smakebuf_r+0x18>
 80139f2:	f023 0303 	bic.w	r3, r3, #3
 80139f6:	f043 0302 	orr.w	r3, r3, #2
 80139fa:	81a3      	strh	r3, [r4, #12]
 80139fc:	e7e2      	b.n	80139c4 <__smakebuf_r+0xc>
 80139fe:	89a3      	ldrh	r3, [r4, #12]
 8013a00:	6020      	str	r0, [r4, #0]
 8013a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a06:	81a3      	strh	r3, [r4, #12]
 8013a08:	9b01      	ldr	r3, [sp, #4]
 8013a0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013a0e:	b15b      	cbz	r3, 8013a28 <__smakebuf_r+0x70>
 8013a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a14:	4630      	mov	r0, r6
 8013a16:	f000 f849 	bl	8013aac <_isatty_r>
 8013a1a:	b128      	cbz	r0, 8013a28 <__smakebuf_r+0x70>
 8013a1c:	89a3      	ldrh	r3, [r4, #12]
 8013a1e:	f023 0303 	bic.w	r3, r3, #3
 8013a22:	f043 0301 	orr.w	r3, r3, #1
 8013a26:	81a3      	strh	r3, [r4, #12]
 8013a28:	89a3      	ldrh	r3, [r4, #12]
 8013a2a:	431d      	orrs	r5, r3
 8013a2c:	81a5      	strh	r5, [r4, #12]
 8013a2e:	e7cf      	b.n	80139d0 <__smakebuf_r+0x18>

08013a30 <memmove>:
 8013a30:	4288      	cmp	r0, r1
 8013a32:	b510      	push	{r4, lr}
 8013a34:	eb01 0402 	add.w	r4, r1, r2
 8013a38:	d902      	bls.n	8013a40 <memmove+0x10>
 8013a3a:	4284      	cmp	r4, r0
 8013a3c:	4623      	mov	r3, r4
 8013a3e:	d807      	bhi.n	8013a50 <memmove+0x20>
 8013a40:	1e43      	subs	r3, r0, #1
 8013a42:	42a1      	cmp	r1, r4
 8013a44:	d008      	beq.n	8013a58 <memmove+0x28>
 8013a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a4e:	e7f8      	b.n	8013a42 <memmove+0x12>
 8013a50:	4402      	add	r2, r0
 8013a52:	4601      	mov	r1, r0
 8013a54:	428a      	cmp	r2, r1
 8013a56:	d100      	bne.n	8013a5a <memmove+0x2a>
 8013a58:	bd10      	pop	{r4, pc}
 8013a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a62:	e7f7      	b.n	8013a54 <memmove+0x24>

08013a64 <strncmp>:
 8013a64:	b510      	push	{r4, lr}
 8013a66:	b16a      	cbz	r2, 8013a84 <strncmp+0x20>
 8013a68:	3901      	subs	r1, #1
 8013a6a:	1884      	adds	r4, r0, r2
 8013a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d103      	bne.n	8013a80 <strncmp+0x1c>
 8013a78:	42a0      	cmp	r0, r4
 8013a7a:	d001      	beq.n	8013a80 <strncmp+0x1c>
 8013a7c:	2a00      	cmp	r2, #0
 8013a7e:	d1f5      	bne.n	8013a6c <strncmp+0x8>
 8013a80:	1ad0      	subs	r0, r2, r3
 8013a82:	bd10      	pop	{r4, pc}
 8013a84:	4610      	mov	r0, r2
 8013a86:	e7fc      	b.n	8013a82 <strncmp+0x1e>

08013a88 <_fstat_r>:
 8013a88:	b538      	push	{r3, r4, r5, lr}
 8013a8a:	4d07      	ldr	r5, [pc, #28]	@ (8013aa8 <_fstat_r+0x20>)
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	4604      	mov	r4, r0
 8013a90:	4608      	mov	r0, r1
 8013a92:	4611      	mov	r1, r2
 8013a94:	602b      	str	r3, [r5, #0]
 8013a96:	f7ef fc4b 	bl	8003330 <_fstat>
 8013a9a:	1c43      	adds	r3, r0, #1
 8013a9c:	d102      	bne.n	8013aa4 <_fstat_r+0x1c>
 8013a9e:	682b      	ldr	r3, [r5, #0]
 8013aa0:	b103      	cbz	r3, 8013aa4 <_fstat_r+0x1c>
 8013aa2:	6023      	str	r3, [r4, #0]
 8013aa4:	bd38      	pop	{r3, r4, r5, pc}
 8013aa6:	bf00      	nop
 8013aa8:	24000d14 	.word	0x24000d14

08013aac <_isatty_r>:
 8013aac:	b538      	push	{r3, r4, r5, lr}
 8013aae:	4d06      	ldr	r5, [pc, #24]	@ (8013ac8 <_isatty_r+0x1c>)
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	4604      	mov	r4, r0
 8013ab4:	4608      	mov	r0, r1
 8013ab6:	602b      	str	r3, [r5, #0]
 8013ab8:	f7ef fc4a 	bl	8003350 <_isatty>
 8013abc:	1c43      	adds	r3, r0, #1
 8013abe:	d102      	bne.n	8013ac6 <_isatty_r+0x1a>
 8013ac0:	682b      	ldr	r3, [r5, #0]
 8013ac2:	b103      	cbz	r3, 8013ac6 <_isatty_r+0x1a>
 8013ac4:	6023      	str	r3, [r4, #0]
 8013ac6:	bd38      	pop	{r3, r4, r5, pc}
 8013ac8:	24000d14 	.word	0x24000d14

08013acc <_sbrk_r>:
 8013acc:	b538      	push	{r3, r4, r5, lr}
 8013ace:	4d06      	ldr	r5, [pc, #24]	@ (8013ae8 <_sbrk_r+0x1c>)
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	4608      	mov	r0, r1
 8013ad6:	602b      	str	r3, [r5, #0]
 8013ad8:	f7ef fc52 	bl	8003380 <_sbrk>
 8013adc:	1c43      	adds	r3, r0, #1
 8013ade:	d102      	bne.n	8013ae6 <_sbrk_r+0x1a>
 8013ae0:	682b      	ldr	r3, [r5, #0]
 8013ae2:	b103      	cbz	r3, 8013ae6 <_sbrk_r+0x1a>
 8013ae4:	6023      	str	r3, [r4, #0]
 8013ae6:	bd38      	pop	{r3, r4, r5, pc}
 8013ae8:	24000d14 	.word	0x24000d14
 8013aec:	00000000 	.word	0x00000000

08013af0 <nan>:
 8013af0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013af8 <nan+0x8>
 8013af4:	4770      	bx	lr
 8013af6:	bf00      	nop
 8013af8:	00000000 	.word	0x00000000
 8013afc:	7ff80000 	.word	0x7ff80000

08013b00 <__assert_func>:
 8013b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b02:	4614      	mov	r4, r2
 8013b04:	461a      	mov	r2, r3
 8013b06:	4b09      	ldr	r3, [pc, #36]	@ (8013b2c <__assert_func+0x2c>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	4605      	mov	r5, r0
 8013b0c:	68d8      	ldr	r0, [r3, #12]
 8013b0e:	b954      	cbnz	r4, 8013b26 <__assert_func+0x26>
 8013b10:	4b07      	ldr	r3, [pc, #28]	@ (8013b30 <__assert_func+0x30>)
 8013b12:	461c      	mov	r4, r3
 8013b14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b18:	9100      	str	r1, [sp, #0]
 8013b1a:	462b      	mov	r3, r5
 8013b1c:	4905      	ldr	r1, [pc, #20]	@ (8013b34 <__assert_func+0x34>)
 8013b1e:	f000 fba7 	bl	8014270 <fiprintf>
 8013b22:	f000 fbb7 	bl	8014294 <abort>
 8013b26:	4b04      	ldr	r3, [pc, #16]	@ (8013b38 <__assert_func+0x38>)
 8013b28:	e7f4      	b.n	8013b14 <__assert_func+0x14>
 8013b2a:	bf00      	nop
 8013b2c:	2400001c 	.word	0x2400001c
 8013b30:	080147c5 	.word	0x080147c5
 8013b34:	08014797 	.word	0x08014797
 8013b38:	0801478a 	.word	0x0801478a

08013b3c <_calloc_r>:
 8013b3c:	b570      	push	{r4, r5, r6, lr}
 8013b3e:	fba1 5402 	umull	r5, r4, r1, r2
 8013b42:	b93c      	cbnz	r4, 8013b54 <_calloc_r+0x18>
 8013b44:	4629      	mov	r1, r5
 8013b46:	f7fe f85d 	bl	8011c04 <_malloc_r>
 8013b4a:	4606      	mov	r6, r0
 8013b4c:	b928      	cbnz	r0, 8013b5a <_calloc_r+0x1e>
 8013b4e:	2600      	movs	r6, #0
 8013b50:	4630      	mov	r0, r6
 8013b52:	bd70      	pop	{r4, r5, r6, pc}
 8013b54:	220c      	movs	r2, #12
 8013b56:	6002      	str	r2, [r0, #0]
 8013b58:	e7f9      	b.n	8013b4e <_calloc_r+0x12>
 8013b5a:	462a      	mov	r2, r5
 8013b5c:	4621      	mov	r1, r4
 8013b5e:	f7fd f96b 	bl	8010e38 <memset>
 8013b62:	e7f5      	b.n	8013b50 <_calloc_r+0x14>

08013b64 <rshift>:
 8013b64:	6903      	ldr	r3, [r0, #16]
 8013b66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013b6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013b72:	f100 0414 	add.w	r4, r0, #20
 8013b76:	dd45      	ble.n	8013c04 <rshift+0xa0>
 8013b78:	f011 011f 	ands.w	r1, r1, #31
 8013b7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013b80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013b84:	d10c      	bne.n	8013ba0 <rshift+0x3c>
 8013b86:	f100 0710 	add.w	r7, r0, #16
 8013b8a:	4629      	mov	r1, r5
 8013b8c:	42b1      	cmp	r1, r6
 8013b8e:	d334      	bcc.n	8013bfa <rshift+0x96>
 8013b90:	1a9b      	subs	r3, r3, r2
 8013b92:	009b      	lsls	r3, r3, #2
 8013b94:	1eea      	subs	r2, r5, #3
 8013b96:	4296      	cmp	r6, r2
 8013b98:	bf38      	it	cc
 8013b9a:	2300      	movcc	r3, #0
 8013b9c:	4423      	add	r3, r4
 8013b9e:	e015      	b.n	8013bcc <rshift+0x68>
 8013ba0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013ba4:	f1c1 0820 	rsb	r8, r1, #32
 8013ba8:	40cf      	lsrs	r7, r1
 8013baa:	f105 0e04 	add.w	lr, r5, #4
 8013bae:	46a1      	mov	r9, r4
 8013bb0:	4576      	cmp	r6, lr
 8013bb2:	46f4      	mov	ip, lr
 8013bb4:	d815      	bhi.n	8013be2 <rshift+0x7e>
 8013bb6:	1a9a      	subs	r2, r3, r2
 8013bb8:	0092      	lsls	r2, r2, #2
 8013bba:	3a04      	subs	r2, #4
 8013bbc:	3501      	adds	r5, #1
 8013bbe:	42ae      	cmp	r6, r5
 8013bc0:	bf38      	it	cc
 8013bc2:	2200      	movcc	r2, #0
 8013bc4:	18a3      	adds	r3, r4, r2
 8013bc6:	50a7      	str	r7, [r4, r2]
 8013bc8:	b107      	cbz	r7, 8013bcc <rshift+0x68>
 8013bca:	3304      	adds	r3, #4
 8013bcc:	1b1a      	subs	r2, r3, r4
 8013bce:	42a3      	cmp	r3, r4
 8013bd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013bd4:	bf08      	it	eq
 8013bd6:	2300      	moveq	r3, #0
 8013bd8:	6102      	str	r2, [r0, #16]
 8013bda:	bf08      	it	eq
 8013bdc:	6143      	streq	r3, [r0, #20]
 8013bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013be2:	f8dc c000 	ldr.w	ip, [ip]
 8013be6:	fa0c fc08 	lsl.w	ip, ip, r8
 8013bea:	ea4c 0707 	orr.w	r7, ip, r7
 8013bee:	f849 7b04 	str.w	r7, [r9], #4
 8013bf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013bf6:	40cf      	lsrs	r7, r1
 8013bf8:	e7da      	b.n	8013bb0 <rshift+0x4c>
 8013bfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8013bfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8013c02:	e7c3      	b.n	8013b8c <rshift+0x28>
 8013c04:	4623      	mov	r3, r4
 8013c06:	e7e1      	b.n	8013bcc <rshift+0x68>

08013c08 <__hexdig_fun>:
 8013c08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013c0c:	2b09      	cmp	r3, #9
 8013c0e:	d802      	bhi.n	8013c16 <__hexdig_fun+0xe>
 8013c10:	3820      	subs	r0, #32
 8013c12:	b2c0      	uxtb	r0, r0
 8013c14:	4770      	bx	lr
 8013c16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013c1a:	2b05      	cmp	r3, #5
 8013c1c:	d801      	bhi.n	8013c22 <__hexdig_fun+0x1a>
 8013c1e:	3847      	subs	r0, #71	@ 0x47
 8013c20:	e7f7      	b.n	8013c12 <__hexdig_fun+0xa>
 8013c22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013c26:	2b05      	cmp	r3, #5
 8013c28:	d801      	bhi.n	8013c2e <__hexdig_fun+0x26>
 8013c2a:	3827      	subs	r0, #39	@ 0x27
 8013c2c:	e7f1      	b.n	8013c12 <__hexdig_fun+0xa>
 8013c2e:	2000      	movs	r0, #0
 8013c30:	4770      	bx	lr
	...

08013c34 <__gethex>:
 8013c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c38:	b085      	sub	sp, #20
 8013c3a:	468a      	mov	sl, r1
 8013c3c:	9302      	str	r3, [sp, #8]
 8013c3e:	680b      	ldr	r3, [r1, #0]
 8013c40:	9001      	str	r0, [sp, #4]
 8013c42:	4690      	mov	r8, r2
 8013c44:	1c9c      	adds	r4, r3, #2
 8013c46:	46a1      	mov	r9, r4
 8013c48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013c4c:	2830      	cmp	r0, #48	@ 0x30
 8013c4e:	d0fa      	beq.n	8013c46 <__gethex+0x12>
 8013c50:	eba9 0303 	sub.w	r3, r9, r3
 8013c54:	f1a3 0b02 	sub.w	fp, r3, #2
 8013c58:	f7ff ffd6 	bl	8013c08 <__hexdig_fun>
 8013c5c:	4605      	mov	r5, r0
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	d168      	bne.n	8013d34 <__gethex+0x100>
 8013c62:	49a0      	ldr	r1, [pc, #640]	@ (8013ee4 <__gethex+0x2b0>)
 8013c64:	2201      	movs	r2, #1
 8013c66:	4648      	mov	r0, r9
 8013c68:	f7ff fefc 	bl	8013a64 <strncmp>
 8013c6c:	4607      	mov	r7, r0
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	d167      	bne.n	8013d42 <__gethex+0x10e>
 8013c72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013c76:	4626      	mov	r6, r4
 8013c78:	f7ff ffc6 	bl	8013c08 <__hexdig_fun>
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d062      	beq.n	8013d46 <__gethex+0x112>
 8013c80:	4623      	mov	r3, r4
 8013c82:	7818      	ldrb	r0, [r3, #0]
 8013c84:	2830      	cmp	r0, #48	@ 0x30
 8013c86:	4699      	mov	r9, r3
 8013c88:	f103 0301 	add.w	r3, r3, #1
 8013c8c:	d0f9      	beq.n	8013c82 <__gethex+0x4e>
 8013c8e:	f7ff ffbb 	bl	8013c08 <__hexdig_fun>
 8013c92:	fab0 f580 	clz	r5, r0
 8013c96:	096d      	lsrs	r5, r5, #5
 8013c98:	f04f 0b01 	mov.w	fp, #1
 8013c9c:	464a      	mov	r2, r9
 8013c9e:	4616      	mov	r6, r2
 8013ca0:	3201      	adds	r2, #1
 8013ca2:	7830      	ldrb	r0, [r6, #0]
 8013ca4:	f7ff ffb0 	bl	8013c08 <__hexdig_fun>
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	d1f8      	bne.n	8013c9e <__gethex+0x6a>
 8013cac:	498d      	ldr	r1, [pc, #564]	@ (8013ee4 <__gethex+0x2b0>)
 8013cae:	2201      	movs	r2, #1
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	f7ff fed7 	bl	8013a64 <strncmp>
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	d13f      	bne.n	8013d3a <__gethex+0x106>
 8013cba:	b944      	cbnz	r4, 8013cce <__gethex+0x9a>
 8013cbc:	1c74      	adds	r4, r6, #1
 8013cbe:	4622      	mov	r2, r4
 8013cc0:	4616      	mov	r6, r2
 8013cc2:	3201      	adds	r2, #1
 8013cc4:	7830      	ldrb	r0, [r6, #0]
 8013cc6:	f7ff ff9f 	bl	8013c08 <__hexdig_fun>
 8013cca:	2800      	cmp	r0, #0
 8013ccc:	d1f8      	bne.n	8013cc0 <__gethex+0x8c>
 8013cce:	1ba4      	subs	r4, r4, r6
 8013cd0:	00a7      	lsls	r7, r4, #2
 8013cd2:	7833      	ldrb	r3, [r6, #0]
 8013cd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013cd8:	2b50      	cmp	r3, #80	@ 0x50
 8013cda:	d13e      	bne.n	8013d5a <__gethex+0x126>
 8013cdc:	7873      	ldrb	r3, [r6, #1]
 8013cde:	2b2b      	cmp	r3, #43	@ 0x2b
 8013ce0:	d033      	beq.n	8013d4a <__gethex+0x116>
 8013ce2:	2b2d      	cmp	r3, #45	@ 0x2d
 8013ce4:	d034      	beq.n	8013d50 <__gethex+0x11c>
 8013ce6:	1c71      	adds	r1, r6, #1
 8013ce8:	2400      	movs	r4, #0
 8013cea:	7808      	ldrb	r0, [r1, #0]
 8013cec:	f7ff ff8c 	bl	8013c08 <__hexdig_fun>
 8013cf0:	1e43      	subs	r3, r0, #1
 8013cf2:	b2db      	uxtb	r3, r3
 8013cf4:	2b18      	cmp	r3, #24
 8013cf6:	d830      	bhi.n	8013d5a <__gethex+0x126>
 8013cf8:	f1a0 0210 	sub.w	r2, r0, #16
 8013cfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013d00:	f7ff ff82 	bl	8013c08 <__hexdig_fun>
 8013d04:	f100 3cff 	add.w	ip, r0, #4294967295
 8013d08:	fa5f fc8c 	uxtb.w	ip, ip
 8013d0c:	f1bc 0f18 	cmp.w	ip, #24
 8013d10:	f04f 030a 	mov.w	r3, #10
 8013d14:	d91e      	bls.n	8013d54 <__gethex+0x120>
 8013d16:	b104      	cbz	r4, 8013d1a <__gethex+0xe6>
 8013d18:	4252      	negs	r2, r2
 8013d1a:	4417      	add	r7, r2
 8013d1c:	f8ca 1000 	str.w	r1, [sl]
 8013d20:	b1ed      	cbz	r5, 8013d5e <__gethex+0x12a>
 8013d22:	f1bb 0f00 	cmp.w	fp, #0
 8013d26:	bf0c      	ite	eq
 8013d28:	2506      	moveq	r5, #6
 8013d2a:	2500      	movne	r5, #0
 8013d2c:	4628      	mov	r0, r5
 8013d2e:	b005      	add	sp, #20
 8013d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d34:	2500      	movs	r5, #0
 8013d36:	462c      	mov	r4, r5
 8013d38:	e7b0      	b.n	8013c9c <__gethex+0x68>
 8013d3a:	2c00      	cmp	r4, #0
 8013d3c:	d1c7      	bne.n	8013cce <__gethex+0x9a>
 8013d3e:	4627      	mov	r7, r4
 8013d40:	e7c7      	b.n	8013cd2 <__gethex+0x9e>
 8013d42:	464e      	mov	r6, r9
 8013d44:	462f      	mov	r7, r5
 8013d46:	2501      	movs	r5, #1
 8013d48:	e7c3      	b.n	8013cd2 <__gethex+0x9e>
 8013d4a:	2400      	movs	r4, #0
 8013d4c:	1cb1      	adds	r1, r6, #2
 8013d4e:	e7cc      	b.n	8013cea <__gethex+0xb6>
 8013d50:	2401      	movs	r4, #1
 8013d52:	e7fb      	b.n	8013d4c <__gethex+0x118>
 8013d54:	fb03 0002 	mla	r0, r3, r2, r0
 8013d58:	e7ce      	b.n	8013cf8 <__gethex+0xc4>
 8013d5a:	4631      	mov	r1, r6
 8013d5c:	e7de      	b.n	8013d1c <__gethex+0xe8>
 8013d5e:	eba6 0309 	sub.w	r3, r6, r9
 8013d62:	3b01      	subs	r3, #1
 8013d64:	4629      	mov	r1, r5
 8013d66:	2b07      	cmp	r3, #7
 8013d68:	dc0a      	bgt.n	8013d80 <__gethex+0x14c>
 8013d6a:	9801      	ldr	r0, [sp, #4]
 8013d6c:	f7fd ffd6 	bl	8011d1c <_Balloc>
 8013d70:	4604      	mov	r4, r0
 8013d72:	b940      	cbnz	r0, 8013d86 <__gethex+0x152>
 8013d74:	4b5c      	ldr	r3, [pc, #368]	@ (8013ee8 <__gethex+0x2b4>)
 8013d76:	4602      	mov	r2, r0
 8013d78:	21e4      	movs	r1, #228	@ 0xe4
 8013d7a:	485c      	ldr	r0, [pc, #368]	@ (8013eec <__gethex+0x2b8>)
 8013d7c:	f7ff fec0 	bl	8013b00 <__assert_func>
 8013d80:	3101      	adds	r1, #1
 8013d82:	105b      	asrs	r3, r3, #1
 8013d84:	e7ef      	b.n	8013d66 <__gethex+0x132>
 8013d86:	f100 0a14 	add.w	sl, r0, #20
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	4655      	mov	r5, sl
 8013d8e:	469b      	mov	fp, r3
 8013d90:	45b1      	cmp	r9, r6
 8013d92:	d337      	bcc.n	8013e04 <__gethex+0x1d0>
 8013d94:	f845 bb04 	str.w	fp, [r5], #4
 8013d98:	eba5 050a 	sub.w	r5, r5, sl
 8013d9c:	10ad      	asrs	r5, r5, #2
 8013d9e:	6125      	str	r5, [r4, #16]
 8013da0:	4658      	mov	r0, fp
 8013da2:	f7fe f8ad 	bl	8011f00 <__hi0bits>
 8013da6:	016d      	lsls	r5, r5, #5
 8013da8:	f8d8 6000 	ldr.w	r6, [r8]
 8013dac:	1a2d      	subs	r5, r5, r0
 8013dae:	42b5      	cmp	r5, r6
 8013db0:	dd54      	ble.n	8013e5c <__gethex+0x228>
 8013db2:	1bad      	subs	r5, r5, r6
 8013db4:	4629      	mov	r1, r5
 8013db6:	4620      	mov	r0, r4
 8013db8:	f7fe fc3e 	bl	8012638 <__any_on>
 8013dbc:	4681      	mov	r9, r0
 8013dbe:	b178      	cbz	r0, 8013de0 <__gethex+0x1ac>
 8013dc0:	1e6b      	subs	r3, r5, #1
 8013dc2:	1159      	asrs	r1, r3, #5
 8013dc4:	f003 021f 	and.w	r2, r3, #31
 8013dc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013dcc:	f04f 0901 	mov.w	r9, #1
 8013dd0:	fa09 f202 	lsl.w	r2, r9, r2
 8013dd4:	420a      	tst	r2, r1
 8013dd6:	d003      	beq.n	8013de0 <__gethex+0x1ac>
 8013dd8:	454b      	cmp	r3, r9
 8013dda:	dc36      	bgt.n	8013e4a <__gethex+0x216>
 8013ddc:	f04f 0902 	mov.w	r9, #2
 8013de0:	4629      	mov	r1, r5
 8013de2:	4620      	mov	r0, r4
 8013de4:	f7ff febe 	bl	8013b64 <rshift>
 8013de8:	442f      	add	r7, r5
 8013dea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013dee:	42bb      	cmp	r3, r7
 8013df0:	da42      	bge.n	8013e78 <__gethex+0x244>
 8013df2:	9801      	ldr	r0, [sp, #4]
 8013df4:	4621      	mov	r1, r4
 8013df6:	f7fd ffd1 	bl	8011d9c <_Bfree>
 8013dfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	6013      	str	r3, [r2, #0]
 8013e00:	25a3      	movs	r5, #163	@ 0xa3
 8013e02:	e793      	b.n	8013d2c <__gethex+0xf8>
 8013e04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013e08:	2a2e      	cmp	r2, #46	@ 0x2e
 8013e0a:	d012      	beq.n	8013e32 <__gethex+0x1fe>
 8013e0c:	2b20      	cmp	r3, #32
 8013e0e:	d104      	bne.n	8013e1a <__gethex+0x1e6>
 8013e10:	f845 bb04 	str.w	fp, [r5], #4
 8013e14:	f04f 0b00 	mov.w	fp, #0
 8013e18:	465b      	mov	r3, fp
 8013e1a:	7830      	ldrb	r0, [r6, #0]
 8013e1c:	9303      	str	r3, [sp, #12]
 8013e1e:	f7ff fef3 	bl	8013c08 <__hexdig_fun>
 8013e22:	9b03      	ldr	r3, [sp, #12]
 8013e24:	f000 000f 	and.w	r0, r0, #15
 8013e28:	4098      	lsls	r0, r3
 8013e2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8013e2e:	3304      	adds	r3, #4
 8013e30:	e7ae      	b.n	8013d90 <__gethex+0x15c>
 8013e32:	45b1      	cmp	r9, r6
 8013e34:	d8ea      	bhi.n	8013e0c <__gethex+0x1d8>
 8013e36:	492b      	ldr	r1, [pc, #172]	@ (8013ee4 <__gethex+0x2b0>)
 8013e38:	9303      	str	r3, [sp, #12]
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	4630      	mov	r0, r6
 8013e3e:	f7ff fe11 	bl	8013a64 <strncmp>
 8013e42:	9b03      	ldr	r3, [sp, #12]
 8013e44:	2800      	cmp	r0, #0
 8013e46:	d1e1      	bne.n	8013e0c <__gethex+0x1d8>
 8013e48:	e7a2      	b.n	8013d90 <__gethex+0x15c>
 8013e4a:	1ea9      	subs	r1, r5, #2
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	f7fe fbf3 	bl	8012638 <__any_on>
 8013e52:	2800      	cmp	r0, #0
 8013e54:	d0c2      	beq.n	8013ddc <__gethex+0x1a8>
 8013e56:	f04f 0903 	mov.w	r9, #3
 8013e5a:	e7c1      	b.n	8013de0 <__gethex+0x1ac>
 8013e5c:	da09      	bge.n	8013e72 <__gethex+0x23e>
 8013e5e:	1b75      	subs	r5, r6, r5
 8013e60:	4621      	mov	r1, r4
 8013e62:	9801      	ldr	r0, [sp, #4]
 8013e64:	462a      	mov	r2, r5
 8013e66:	f7fe f9b1 	bl	80121cc <__lshift>
 8013e6a:	1b7f      	subs	r7, r7, r5
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	f100 0a14 	add.w	sl, r0, #20
 8013e72:	f04f 0900 	mov.w	r9, #0
 8013e76:	e7b8      	b.n	8013dea <__gethex+0x1b6>
 8013e78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013e7c:	42bd      	cmp	r5, r7
 8013e7e:	dd6f      	ble.n	8013f60 <__gethex+0x32c>
 8013e80:	1bed      	subs	r5, r5, r7
 8013e82:	42ae      	cmp	r6, r5
 8013e84:	dc34      	bgt.n	8013ef0 <__gethex+0x2bc>
 8013e86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e8a:	2b02      	cmp	r3, #2
 8013e8c:	d022      	beq.n	8013ed4 <__gethex+0x2a0>
 8013e8e:	2b03      	cmp	r3, #3
 8013e90:	d024      	beq.n	8013edc <__gethex+0x2a8>
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	d115      	bne.n	8013ec2 <__gethex+0x28e>
 8013e96:	42ae      	cmp	r6, r5
 8013e98:	d113      	bne.n	8013ec2 <__gethex+0x28e>
 8013e9a:	2e01      	cmp	r6, #1
 8013e9c:	d10b      	bne.n	8013eb6 <__gethex+0x282>
 8013e9e:	9a02      	ldr	r2, [sp, #8]
 8013ea0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013ea4:	6013      	str	r3, [r2, #0]
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	6123      	str	r3, [r4, #16]
 8013eaa:	f8ca 3000 	str.w	r3, [sl]
 8013eae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013eb0:	2562      	movs	r5, #98	@ 0x62
 8013eb2:	601c      	str	r4, [r3, #0]
 8013eb4:	e73a      	b.n	8013d2c <__gethex+0xf8>
 8013eb6:	1e71      	subs	r1, r6, #1
 8013eb8:	4620      	mov	r0, r4
 8013eba:	f7fe fbbd 	bl	8012638 <__any_on>
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	d1ed      	bne.n	8013e9e <__gethex+0x26a>
 8013ec2:	9801      	ldr	r0, [sp, #4]
 8013ec4:	4621      	mov	r1, r4
 8013ec6:	f7fd ff69 	bl	8011d9c <_Bfree>
 8013eca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ecc:	2300      	movs	r3, #0
 8013ece:	6013      	str	r3, [r2, #0]
 8013ed0:	2550      	movs	r5, #80	@ 0x50
 8013ed2:	e72b      	b.n	8013d2c <__gethex+0xf8>
 8013ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d1f3      	bne.n	8013ec2 <__gethex+0x28e>
 8013eda:	e7e0      	b.n	8013e9e <__gethex+0x26a>
 8013edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d1dd      	bne.n	8013e9e <__gethex+0x26a>
 8013ee2:	e7ee      	b.n	8013ec2 <__gethex+0x28e>
 8013ee4:	08014618 	.word	0x08014618
 8013ee8:	080144ad 	.word	0x080144ad
 8013eec:	080147c6 	.word	0x080147c6
 8013ef0:	1e6f      	subs	r7, r5, #1
 8013ef2:	f1b9 0f00 	cmp.w	r9, #0
 8013ef6:	d130      	bne.n	8013f5a <__gethex+0x326>
 8013ef8:	b127      	cbz	r7, 8013f04 <__gethex+0x2d0>
 8013efa:	4639      	mov	r1, r7
 8013efc:	4620      	mov	r0, r4
 8013efe:	f7fe fb9b 	bl	8012638 <__any_on>
 8013f02:	4681      	mov	r9, r0
 8013f04:	117a      	asrs	r2, r7, #5
 8013f06:	2301      	movs	r3, #1
 8013f08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013f0c:	f007 071f 	and.w	r7, r7, #31
 8013f10:	40bb      	lsls	r3, r7
 8013f12:	4213      	tst	r3, r2
 8013f14:	4629      	mov	r1, r5
 8013f16:	4620      	mov	r0, r4
 8013f18:	bf18      	it	ne
 8013f1a:	f049 0902 	orrne.w	r9, r9, #2
 8013f1e:	f7ff fe21 	bl	8013b64 <rshift>
 8013f22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013f26:	1b76      	subs	r6, r6, r5
 8013f28:	2502      	movs	r5, #2
 8013f2a:	f1b9 0f00 	cmp.w	r9, #0
 8013f2e:	d047      	beq.n	8013fc0 <__gethex+0x38c>
 8013f30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013f34:	2b02      	cmp	r3, #2
 8013f36:	d015      	beq.n	8013f64 <__gethex+0x330>
 8013f38:	2b03      	cmp	r3, #3
 8013f3a:	d017      	beq.n	8013f6c <__gethex+0x338>
 8013f3c:	2b01      	cmp	r3, #1
 8013f3e:	d109      	bne.n	8013f54 <__gethex+0x320>
 8013f40:	f019 0f02 	tst.w	r9, #2
 8013f44:	d006      	beq.n	8013f54 <__gethex+0x320>
 8013f46:	f8da 3000 	ldr.w	r3, [sl]
 8013f4a:	ea49 0903 	orr.w	r9, r9, r3
 8013f4e:	f019 0f01 	tst.w	r9, #1
 8013f52:	d10e      	bne.n	8013f72 <__gethex+0x33e>
 8013f54:	f045 0510 	orr.w	r5, r5, #16
 8013f58:	e032      	b.n	8013fc0 <__gethex+0x38c>
 8013f5a:	f04f 0901 	mov.w	r9, #1
 8013f5e:	e7d1      	b.n	8013f04 <__gethex+0x2d0>
 8013f60:	2501      	movs	r5, #1
 8013f62:	e7e2      	b.n	8013f2a <__gethex+0x2f6>
 8013f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f66:	f1c3 0301 	rsb	r3, r3, #1
 8013f6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d0f0      	beq.n	8013f54 <__gethex+0x320>
 8013f72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013f76:	f104 0314 	add.w	r3, r4, #20
 8013f7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013f7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013f82:	f04f 0c00 	mov.w	ip, #0
 8013f86:	4618      	mov	r0, r3
 8013f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013f90:	d01b      	beq.n	8013fca <__gethex+0x396>
 8013f92:	3201      	adds	r2, #1
 8013f94:	6002      	str	r2, [r0, #0]
 8013f96:	2d02      	cmp	r5, #2
 8013f98:	f104 0314 	add.w	r3, r4, #20
 8013f9c:	d13c      	bne.n	8014018 <__gethex+0x3e4>
 8013f9e:	f8d8 2000 	ldr.w	r2, [r8]
 8013fa2:	3a01      	subs	r2, #1
 8013fa4:	42b2      	cmp	r2, r6
 8013fa6:	d109      	bne.n	8013fbc <__gethex+0x388>
 8013fa8:	1171      	asrs	r1, r6, #5
 8013faa:	2201      	movs	r2, #1
 8013fac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013fb0:	f006 061f 	and.w	r6, r6, #31
 8013fb4:	fa02 f606 	lsl.w	r6, r2, r6
 8013fb8:	421e      	tst	r6, r3
 8013fba:	d13a      	bne.n	8014032 <__gethex+0x3fe>
 8013fbc:	f045 0520 	orr.w	r5, r5, #32
 8013fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fc2:	601c      	str	r4, [r3, #0]
 8013fc4:	9b02      	ldr	r3, [sp, #8]
 8013fc6:	601f      	str	r7, [r3, #0]
 8013fc8:	e6b0      	b.n	8013d2c <__gethex+0xf8>
 8013fca:	4299      	cmp	r1, r3
 8013fcc:	f843 cc04 	str.w	ip, [r3, #-4]
 8013fd0:	d8d9      	bhi.n	8013f86 <__gethex+0x352>
 8013fd2:	68a3      	ldr	r3, [r4, #8]
 8013fd4:	459b      	cmp	fp, r3
 8013fd6:	db17      	blt.n	8014008 <__gethex+0x3d4>
 8013fd8:	6861      	ldr	r1, [r4, #4]
 8013fda:	9801      	ldr	r0, [sp, #4]
 8013fdc:	3101      	adds	r1, #1
 8013fde:	f7fd fe9d 	bl	8011d1c <_Balloc>
 8013fe2:	4681      	mov	r9, r0
 8013fe4:	b918      	cbnz	r0, 8013fee <__gethex+0x3ba>
 8013fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8014050 <__gethex+0x41c>)
 8013fe8:	4602      	mov	r2, r0
 8013fea:	2184      	movs	r1, #132	@ 0x84
 8013fec:	e6c5      	b.n	8013d7a <__gethex+0x146>
 8013fee:	6922      	ldr	r2, [r4, #16]
 8013ff0:	3202      	adds	r2, #2
 8013ff2:	f104 010c 	add.w	r1, r4, #12
 8013ff6:	0092      	lsls	r2, r2, #2
 8013ff8:	300c      	adds	r0, #12
 8013ffa:	f7fc ff9c 	bl	8010f36 <memcpy>
 8013ffe:	4621      	mov	r1, r4
 8014000:	9801      	ldr	r0, [sp, #4]
 8014002:	f7fd fecb 	bl	8011d9c <_Bfree>
 8014006:	464c      	mov	r4, r9
 8014008:	6923      	ldr	r3, [r4, #16]
 801400a:	1c5a      	adds	r2, r3, #1
 801400c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014010:	6122      	str	r2, [r4, #16]
 8014012:	2201      	movs	r2, #1
 8014014:	615a      	str	r2, [r3, #20]
 8014016:	e7be      	b.n	8013f96 <__gethex+0x362>
 8014018:	6922      	ldr	r2, [r4, #16]
 801401a:	455a      	cmp	r2, fp
 801401c:	dd0b      	ble.n	8014036 <__gethex+0x402>
 801401e:	2101      	movs	r1, #1
 8014020:	4620      	mov	r0, r4
 8014022:	f7ff fd9f 	bl	8013b64 <rshift>
 8014026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801402a:	3701      	adds	r7, #1
 801402c:	42bb      	cmp	r3, r7
 801402e:	f6ff aee0 	blt.w	8013df2 <__gethex+0x1be>
 8014032:	2501      	movs	r5, #1
 8014034:	e7c2      	b.n	8013fbc <__gethex+0x388>
 8014036:	f016 061f 	ands.w	r6, r6, #31
 801403a:	d0fa      	beq.n	8014032 <__gethex+0x3fe>
 801403c:	4453      	add	r3, sl
 801403e:	f1c6 0620 	rsb	r6, r6, #32
 8014042:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014046:	f7fd ff5b 	bl	8011f00 <__hi0bits>
 801404a:	42b0      	cmp	r0, r6
 801404c:	dbe7      	blt.n	801401e <__gethex+0x3ea>
 801404e:	e7f0      	b.n	8014032 <__gethex+0x3fe>
 8014050:	080144ad 	.word	0x080144ad

08014054 <L_shift>:
 8014054:	f1c2 0208 	rsb	r2, r2, #8
 8014058:	0092      	lsls	r2, r2, #2
 801405a:	b570      	push	{r4, r5, r6, lr}
 801405c:	f1c2 0620 	rsb	r6, r2, #32
 8014060:	6843      	ldr	r3, [r0, #4]
 8014062:	6804      	ldr	r4, [r0, #0]
 8014064:	fa03 f506 	lsl.w	r5, r3, r6
 8014068:	432c      	orrs	r4, r5
 801406a:	40d3      	lsrs	r3, r2
 801406c:	6004      	str	r4, [r0, #0]
 801406e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014072:	4288      	cmp	r0, r1
 8014074:	d3f4      	bcc.n	8014060 <L_shift+0xc>
 8014076:	bd70      	pop	{r4, r5, r6, pc}

08014078 <__match>:
 8014078:	b530      	push	{r4, r5, lr}
 801407a:	6803      	ldr	r3, [r0, #0]
 801407c:	3301      	adds	r3, #1
 801407e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014082:	b914      	cbnz	r4, 801408a <__match+0x12>
 8014084:	6003      	str	r3, [r0, #0]
 8014086:	2001      	movs	r0, #1
 8014088:	bd30      	pop	{r4, r5, pc}
 801408a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801408e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014092:	2d19      	cmp	r5, #25
 8014094:	bf98      	it	ls
 8014096:	3220      	addls	r2, #32
 8014098:	42a2      	cmp	r2, r4
 801409a:	d0f0      	beq.n	801407e <__match+0x6>
 801409c:	2000      	movs	r0, #0
 801409e:	e7f3      	b.n	8014088 <__match+0x10>

080140a0 <__hexnan>:
 80140a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140a4:	680b      	ldr	r3, [r1, #0]
 80140a6:	6801      	ldr	r1, [r0, #0]
 80140a8:	115e      	asrs	r6, r3, #5
 80140aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80140ae:	f013 031f 	ands.w	r3, r3, #31
 80140b2:	b087      	sub	sp, #28
 80140b4:	bf18      	it	ne
 80140b6:	3604      	addne	r6, #4
 80140b8:	2500      	movs	r5, #0
 80140ba:	1f37      	subs	r7, r6, #4
 80140bc:	4682      	mov	sl, r0
 80140be:	4690      	mov	r8, r2
 80140c0:	9301      	str	r3, [sp, #4]
 80140c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80140c6:	46b9      	mov	r9, r7
 80140c8:	463c      	mov	r4, r7
 80140ca:	9502      	str	r5, [sp, #8]
 80140cc:	46ab      	mov	fp, r5
 80140ce:	784a      	ldrb	r2, [r1, #1]
 80140d0:	1c4b      	adds	r3, r1, #1
 80140d2:	9303      	str	r3, [sp, #12]
 80140d4:	b342      	cbz	r2, 8014128 <__hexnan+0x88>
 80140d6:	4610      	mov	r0, r2
 80140d8:	9105      	str	r1, [sp, #20]
 80140da:	9204      	str	r2, [sp, #16]
 80140dc:	f7ff fd94 	bl	8013c08 <__hexdig_fun>
 80140e0:	2800      	cmp	r0, #0
 80140e2:	d151      	bne.n	8014188 <__hexnan+0xe8>
 80140e4:	9a04      	ldr	r2, [sp, #16]
 80140e6:	9905      	ldr	r1, [sp, #20]
 80140e8:	2a20      	cmp	r2, #32
 80140ea:	d818      	bhi.n	801411e <__hexnan+0x7e>
 80140ec:	9b02      	ldr	r3, [sp, #8]
 80140ee:	459b      	cmp	fp, r3
 80140f0:	dd13      	ble.n	801411a <__hexnan+0x7a>
 80140f2:	454c      	cmp	r4, r9
 80140f4:	d206      	bcs.n	8014104 <__hexnan+0x64>
 80140f6:	2d07      	cmp	r5, #7
 80140f8:	dc04      	bgt.n	8014104 <__hexnan+0x64>
 80140fa:	462a      	mov	r2, r5
 80140fc:	4649      	mov	r1, r9
 80140fe:	4620      	mov	r0, r4
 8014100:	f7ff ffa8 	bl	8014054 <L_shift>
 8014104:	4544      	cmp	r4, r8
 8014106:	d952      	bls.n	80141ae <__hexnan+0x10e>
 8014108:	2300      	movs	r3, #0
 801410a:	f1a4 0904 	sub.w	r9, r4, #4
 801410e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014112:	f8cd b008 	str.w	fp, [sp, #8]
 8014116:	464c      	mov	r4, r9
 8014118:	461d      	mov	r5, r3
 801411a:	9903      	ldr	r1, [sp, #12]
 801411c:	e7d7      	b.n	80140ce <__hexnan+0x2e>
 801411e:	2a29      	cmp	r2, #41	@ 0x29
 8014120:	d157      	bne.n	80141d2 <__hexnan+0x132>
 8014122:	3102      	adds	r1, #2
 8014124:	f8ca 1000 	str.w	r1, [sl]
 8014128:	f1bb 0f00 	cmp.w	fp, #0
 801412c:	d051      	beq.n	80141d2 <__hexnan+0x132>
 801412e:	454c      	cmp	r4, r9
 8014130:	d206      	bcs.n	8014140 <__hexnan+0xa0>
 8014132:	2d07      	cmp	r5, #7
 8014134:	dc04      	bgt.n	8014140 <__hexnan+0xa0>
 8014136:	462a      	mov	r2, r5
 8014138:	4649      	mov	r1, r9
 801413a:	4620      	mov	r0, r4
 801413c:	f7ff ff8a 	bl	8014054 <L_shift>
 8014140:	4544      	cmp	r4, r8
 8014142:	d936      	bls.n	80141b2 <__hexnan+0x112>
 8014144:	f1a8 0204 	sub.w	r2, r8, #4
 8014148:	4623      	mov	r3, r4
 801414a:	f853 1b04 	ldr.w	r1, [r3], #4
 801414e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014152:	429f      	cmp	r7, r3
 8014154:	d2f9      	bcs.n	801414a <__hexnan+0xaa>
 8014156:	1b3b      	subs	r3, r7, r4
 8014158:	f023 0303 	bic.w	r3, r3, #3
 801415c:	3304      	adds	r3, #4
 801415e:	3401      	adds	r4, #1
 8014160:	3e03      	subs	r6, #3
 8014162:	42b4      	cmp	r4, r6
 8014164:	bf88      	it	hi
 8014166:	2304      	movhi	r3, #4
 8014168:	4443      	add	r3, r8
 801416a:	2200      	movs	r2, #0
 801416c:	f843 2b04 	str.w	r2, [r3], #4
 8014170:	429f      	cmp	r7, r3
 8014172:	d2fb      	bcs.n	801416c <__hexnan+0xcc>
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	b91b      	cbnz	r3, 8014180 <__hexnan+0xe0>
 8014178:	4547      	cmp	r7, r8
 801417a:	d128      	bne.n	80141ce <__hexnan+0x12e>
 801417c:	2301      	movs	r3, #1
 801417e:	603b      	str	r3, [r7, #0]
 8014180:	2005      	movs	r0, #5
 8014182:	b007      	add	sp, #28
 8014184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014188:	3501      	adds	r5, #1
 801418a:	2d08      	cmp	r5, #8
 801418c:	f10b 0b01 	add.w	fp, fp, #1
 8014190:	dd06      	ble.n	80141a0 <__hexnan+0x100>
 8014192:	4544      	cmp	r4, r8
 8014194:	d9c1      	bls.n	801411a <__hexnan+0x7a>
 8014196:	2300      	movs	r3, #0
 8014198:	f844 3c04 	str.w	r3, [r4, #-4]
 801419c:	2501      	movs	r5, #1
 801419e:	3c04      	subs	r4, #4
 80141a0:	6822      	ldr	r2, [r4, #0]
 80141a2:	f000 000f 	and.w	r0, r0, #15
 80141a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80141aa:	6020      	str	r0, [r4, #0]
 80141ac:	e7b5      	b.n	801411a <__hexnan+0x7a>
 80141ae:	2508      	movs	r5, #8
 80141b0:	e7b3      	b.n	801411a <__hexnan+0x7a>
 80141b2:	9b01      	ldr	r3, [sp, #4]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d0dd      	beq.n	8014174 <__hexnan+0xd4>
 80141b8:	f1c3 0320 	rsb	r3, r3, #32
 80141bc:	f04f 32ff 	mov.w	r2, #4294967295
 80141c0:	40da      	lsrs	r2, r3
 80141c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80141c6:	4013      	ands	r3, r2
 80141c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80141cc:	e7d2      	b.n	8014174 <__hexnan+0xd4>
 80141ce:	3f04      	subs	r7, #4
 80141d0:	e7d0      	b.n	8014174 <__hexnan+0xd4>
 80141d2:	2004      	movs	r0, #4
 80141d4:	e7d5      	b.n	8014182 <__hexnan+0xe2>

080141d6 <__ascii_mbtowc>:
 80141d6:	b082      	sub	sp, #8
 80141d8:	b901      	cbnz	r1, 80141dc <__ascii_mbtowc+0x6>
 80141da:	a901      	add	r1, sp, #4
 80141dc:	b142      	cbz	r2, 80141f0 <__ascii_mbtowc+0x1a>
 80141de:	b14b      	cbz	r3, 80141f4 <__ascii_mbtowc+0x1e>
 80141e0:	7813      	ldrb	r3, [r2, #0]
 80141e2:	600b      	str	r3, [r1, #0]
 80141e4:	7812      	ldrb	r2, [r2, #0]
 80141e6:	1e10      	subs	r0, r2, #0
 80141e8:	bf18      	it	ne
 80141ea:	2001      	movne	r0, #1
 80141ec:	b002      	add	sp, #8
 80141ee:	4770      	bx	lr
 80141f0:	4610      	mov	r0, r2
 80141f2:	e7fb      	b.n	80141ec <__ascii_mbtowc+0x16>
 80141f4:	f06f 0001 	mvn.w	r0, #1
 80141f8:	e7f8      	b.n	80141ec <__ascii_mbtowc+0x16>

080141fa <_realloc_r>:
 80141fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141fe:	4680      	mov	r8, r0
 8014200:	4615      	mov	r5, r2
 8014202:	460c      	mov	r4, r1
 8014204:	b921      	cbnz	r1, 8014210 <_realloc_r+0x16>
 8014206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801420a:	4611      	mov	r1, r2
 801420c:	f7fd bcfa 	b.w	8011c04 <_malloc_r>
 8014210:	b92a      	cbnz	r2, 801421e <_realloc_r+0x24>
 8014212:	f7fd fc83 	bl	8011b1c <_free_r>
 8014216:	2400      	movs	r4, #0
 8014218:	4620      	mov	r0, r4
 801421a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801421e:	f000 f840 	bl	80142a2 <_malloc_usable_size_r>
 8014222:	4285      	cmp	r5, r0
 8014224:	4606      	mov	r6, r0
 8014226:	d802      	bhi.n	801422e <_realloc_r+0x34>
 8014228:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801422c:	d8f4      	bhi.n	8014218 <_realloc_r+0x1e>
 801422e:	4629      	mov	r1, r5
 8014230:	4640      	mov	r0, r8
 8014232:	f7fd fce7 	bl	8011c04 <_malloc_r>
 8014236:	4607      	mov	r7, r0
 8014238:	2800      	cmp	r0, #0
 801423a:	d0ec      	beq.n	8014216 <_realloc_r+0x1c>
 801423c:	42b5      	cmp	r5, r6
 801423e:	462a      	mov	r2, r5
 8014240:	4621      	mov	r1, r4
 8014242:	bf28      	it	cs
 8014244:	4632      	movcs	r2, r6
 8014246:	f7fc fe76 	bl	8010f36 <memcpy>
 801424a:	4621      	mov	r1, r4
 801424c:	4640      	mov	r0, r8
 801424e:	f7fd fc65 	bl	8011b1c <_free_r>
 8014252:	463c      	mov	r4, r7
 8014254:	e7e0      	b.n	8014218 <_realloc_r+0x1e>

08014256 <__ascii_wctomb>:
 8014256:	4603      	mov	r3, r0
 8014258:	4608      	mov	r0, r1
 801425a:	b141      	cbz	r1, 801426e <__ascii_wctomb+0x18>
 801425c:	2aff      	cmp	r2, #255	@ 0xff
 801425e:	d904      	bls.n	801426a <__ascii_wctomb+0x14>
 8014260:	228a      	movs	r2, #138	@ 0x8a
 8014262:	601a      	str	r2, [r3, #0]
 8014264:	f04f 30ff 	mov.w	r0, #4294967295
 8014268:	4770      	bx	lr
 801426a:	700a      	strb	r2, [r1, #0]
 801426c:	2001      	movs	r0, #1
 801426e:	4770      	bx	lr

08014270 <fiprintf>:
 8014270:	b40e      	push	{r1, r2, r3}
 8014272:	b503      	push	{r0, r1, lr}
 8014274:	4601      	mov	r1, r0
 8014276:	ab03      	add	r3, sp, #12
 8014278:	4805      	ldr	r0, [pc, #20]	@ (8014290 <fiprintf+0x20>)
 801427a:	f853 2b04 	ldr.w	r2, [r3], #4
 801427e:	6800      	ldr	r0, [r0, #0]
 8014280:	9301      	str	r3, [sp, #4]
 8014282:	f7ff f9af 	bl	80135e4 <_vfiprintf_r>
 8014286:	b002      	add	sp, #8
 8014288:	f85d eb04 	ldr.w	lr, [sp], #4
 801428c:	b003      	add	sp, #12
 801428e:	4770      	bx	lr
 8014290:	2400001c 	.word	0x2400001c

08014294 <abort>:
 8014294:	b508      	push	{r3, lr}
 8014296:	2006      	movs	r0, #6
 8014298:	f000 f834 	bl	8014304 <raise>
 801429c:	2001      	movs	r0, #1
 801429e:	f7ef f813 	bl	80032c8 <_exit>

080142a2 <_malloc_usable_size_r>:
 80142a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142a6:	1f18      	subs	r0, r3, #4
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	bfbc      	itt	lt
 80142ac:	580b      	ldrlt	r3, [r1, r0]
 80142ae:	18c0      	addlt	r0, r0, r3
 80142b0:	4770      	bx	lr

080142b2 <_raise_r>:
 80142b2:	291f      	cmp	r1, #31
 80142b4:	b538      	push	{r3, r4, r5, lr}
 80142b6:	4605      	mov	r5, r0
 80142b8:	460c      	mov	r4, r1
 80142ba:	d904      	bls.n	80142c6 <_raise_r+0x14>
 80142bc:	2316      	movs	r3, #22
 80142be:	6003      	str	r3, [r0, #0]
 80142c0:	f04f 30ff 	mov.w	r0, #4294967295
 80142c4:	bd38      	pop	{r3, r4, r5, pc}
 80142c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80142c8:	b112      	cbz	r2, 80142d0 <_raise_r+0x1e>
 80142ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80142ce:	b94b      	cbnz	r3, 80142e4 <_raise_r+0x32>
 80142d0:	4628      	mov	r0, r5
 80142d2:	f000 f831 	bl	8014338 <_getpid_r>
 80142d6:	4622      	mov	r2, r4
 80142d8:	4601      	mov	r1, r0
 80142da:	4628      	mov	r0, r5
 80142dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142e0:	f000 b818 	b.w	8014314 <_kill_r>
 80142e4:	2b01      	cmp	r3, #1
 80142e6:	d00a      	beq.n	80142fe <_raise_r+0x4c>
 80142e8:	1c59      	adds	r1, r3, #1
 80142ea:	d103      	bne.n	80142f4 <_raise_r+0x42>
 80142ec:	2316      	movs	r3, #22
 80142ee:	6003      	str	r3, [r0, #0]
 80142f0:	2001      	movs	r0, #1
 80142f2:	e7e7      	b.n	80142c4 <_raise_r+0x12>
 80142f4:	2100      	movs	r1, #0
 80142f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80142fa:	4620      	mov	r0, r4
 80142fc:	4798      	blx	r3
 80142fe:	2000      	movs	r0, #0
 8014300:	e7e0      	b.n	80142c4 <_raise_r+0x12>
	...

08014304 <raise>:
 8014304:	4b02      	ldr	r3, [pc, #8]	@ (8014310 <raise+0xc>)
 8014306:	4601      	mov	r1, r0
 8014308:	6818      	ldr	r0, [r3, #0]
 801430a:	f7ff bfd2 	b.w	80142b2 <_raise_r>
 801430e:	bf00      	nop
 8014310:	2400001c 	.word	0x2400001c

08014314 <_kill_r>:
 8014314:	b538      	push	{r3, r4, r5, lr}
 8014316:	4d07      	ldr	r5, [pc, #28]	@ (8014334 <_kill_r+0x20>)
 8014318:	2300      	movs	r3, #0
 801431a:	4604      	mov	r4, r0
 801431c:	4608      	mov	r0, r1
 801431e:	4611      	mov	r1, r2
 8014320:	602b      	str	r3, [r5, #0]
 8014322:	f7ee ffc1 	bl	80032a8 <_kill>
 8014326:	1c43      	adds	r3, r0, #1
 8014328:	d102      	bne.n	8014330 <_kill_r+0x1c>
 801432a:	682b      	ldr	r3, [r5, #0]
 801432c:	b103      	cbz	r3, 8014330 <_kill_r+0x1c>
 801432e:	6023      	str	r3, [r4, #0]
 8014330:	bd38      	pop	{r3, r4, r5, pc}
 8014332:	bf00      	nop
 8014334:	24000d14 	.word	0x24000d14

08014338 <_getpid_r>:
 8014338:	f7ee bfae 	b.w	8003298 <_getpid>

0801433c <_init>:
 801433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801433e:	bf00      	nop
 8014340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014342:	bc08      	pop	{r3}
 8014344:	469e      	mov	lr, r3
 8014346:	4770      	bx	lr

08014348 <_fini>:
 8014348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801434a:	bf00      	nop
 801434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801434e:	bc08      	pop	{r3}
 8014350:	469e      	mov	lr, r3
 8014352:	4770      	bx	lr
